//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.Serialization;

#if NetCoreApi
namespace GalaxySMS.Business.Entities.Api.NetCore
#elif NETSTANDARD2_0
namespace GalaxySMS.Business.Entities.NetStd2
#else
namespace GalaxySMS.Business.Entities
#endif
{
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    public partial class gcsRole : EntityBase, IIdentifiableEntity, IEquatable<gcsRole>, ITableEntityBase
    {
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    using GCS.Core.Common.Extensions;
    
    using System.Runtime.Serialization;
    
    #if NetCoreApi
    namespace GalaxySMS.Business.Entities.Api.NetCore
    #elif NETSTANDARD2_0
    namespace GalaxySMS.Business.Entities.NetStd2
    #else
    namespace GalaxySMS.Business.Entities
    #endif
    {
        public partial class gcsRole
        {
        	public gcsRole()
        	{
        		Initialize();
        	}
        
        	public gcsRole(gcsRole e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		this.gcsEntityApplicationRoles = new HashSet<gcsEntityApplicationRole>();
        		this.gcsRolePermissions = new HashSet<gcsRolePermission>();
        		this.RoleAccessPortals = new HashSet<RoleAccessPortal>();
        		this.RoleClusters = new HashSet<RoleCluster>();
        		this.RoleInputDevices = new HashSet<RoleInputDevice>();
        		this.RoleInputOutputGroups = new HashSet<RoleInputOutputGroup>();
        		this.RoleOutputDevices = new HashSet<RoleOutputDevice>();
        		this.gcsUserEntityRoles = new HashSet<gcsUserEntityRole>();
        		this.gcsUserGroupEntityRoles = new HashSet<gcsUserGroupEntityRole>();
        		this.RoleRegions = new HashSet<RoleRegion>();
        		this.RoleSites = new HashSet<RoleSite>();
        		this.RoleMercScpGroups = new HashSet<RoleMercScpGroup>();
        	}
        
        	public void Initialize(gcsRole e)
        	{
        		Initialize();
        		if( e == null )
        			return;
        
        		this.IsDirty = e.IsDirty;
        		this.RoleId = e.RoleId;
        		this.ApplicationId = e.ApplicationId;
        		this.RoleName = e.RoleName;
        		this.RoleDescription = e.RoleDescription;
        		this.IsActive = e.IsActive;
        		this.IsTemplateRole = e.IsTemplateRole;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.IsAdministratorRole = e.IsAdministratorRole;
        		this.EntityId = e.EntityId;
        		this.IsDefault = e.IsDefault;
        		this.gcsEntityApplicationRoles = e.gcsEntityApplicationRoles.ToCollection();
        		this.gcsRolePermissions = e.gcsRolePermissions.ToCollection();
        		this.RoleAccessPortals = e.RoleAccessPortals.ToCollection();
        		this.RoleClusters = e.RoleClusters.ToCollection();
        		this.RoleInputDevices = e.RoleInputDevices.ToCollection();
        		this.RoleInputOutputGroups = e.RoleInputOutputGroups.ToCollection();
        		this.RoleOutputDevices = e.RoleOutputDevices.ToCollection();
        		this.gcsUserEntityRoles = e.gcsUserEntityRoles.ToCollection();
        		this.gcsUserGroupEntityRoles = e.gcsUserGroupEntityRoles.ToCollection();
        		this.RoleRegions = e.RoleRegions.ToCollection();
        		this.RoleSites = e.RoleSites.ToCollection();
        		this.RoleMercScpGroups = e.RoleMercScpGroups.ToCollection();
        		
        	}
        
        	public bool IsAnythingDirty
        	{
        		get
        		{
        			//foreach( var o in InterfaceBoardSections)
        			//{
        			//	if (o.IsAnythingDirty == true)
        			//		return true;
        			//}
        			return IsDirty;                
        		}
        	}
        
        	public gcsRole Clone(gcsRole e)
        	{
        		return new gcsRole(e);
        	}
        
        	public bool Equals(gcsRole other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(gcsRole other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.RoleId != this.RoleId )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid RoleId { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid ApplicationId { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string RoleName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string RoleDescription { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool IsActive { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool IsTemplateRole { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string InsertName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.DateTime> InsertDate { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string UpdateName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.DateTime> UpdateDate { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<short> ConcurrencyValue { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool IsAdministratorRole { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid EntityId { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool IsDefault { get; set; }
    
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<gcsEntityApplicationRole> gcsEntityApplicationRoles { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<gcsRolePermission> gcsRolePermissions { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<RoleAccessPortal> RoleAccessPortals { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<RoleCluster> RoleClusters { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<RoleInputDevice> RoleInputDevices { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<RoleInputOutputGroup> RoleInputOutputGroups { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<RoleOutputDevice> RoleOutputDevices { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<gcsUserEntityRole> gcsUserEntityRoles { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<gcsUserGroupEntityRole> gcsUserGroupEntityRoles { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public RoleFilter RoleFilter { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<RoleRegion> RoleRegions { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<RoleSite> RoleSites { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<RoleMercScpGroup> RoleMercScpGroups { get; set; }
    
    }
}
