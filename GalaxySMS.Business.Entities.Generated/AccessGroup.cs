//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.Serialization;

#if NetCoreApi
namespace GalaxySMS.Business.Entities.Api.NetCore
#elif NETSTANDARD2_0
namespace GalaxySMS.Business.Entities.NetStd2
#else
namespace GalaxySMS.Business.Entities
#endif
{
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    public partial class AccessGroup : EntityBase, IIdentifiableEntity, IEquatable<AccessGroup>, ITableEntityBase
    {
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    using GCS.Core.Common.Extensions;
    
    using System.Runtime.Serialization;
    
    #if NetCoreApi
    namespace GalaxySMS.Business.Entities.Api.NetCore
    #elif NETSTANDARD2_0
    namespace GalaxySMS.Business.Entities.NetStd2
    #else
    namespace GalaxySMS.Business.Entities
    #endif
    {
        public partial class AccessGroup
        {
        	public AccessGroup()
        	{
        		Initialize();
        	}
        
        	public AccessGroup(AccessGroup e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		this.AccessGroupAccessPortals = new HashSet<AccessGroupAccessPortal>();
        		this.AccessProfileAccessGroups = new HashSet<AccessProfileAccessGroup>();
        		this.PersonalAccessGroupDynamicAccessGroups = new HashSet<PersonalAccessGroupDynamicAccessGroup>();
        	}
        
        	public void Initialize(AccessGroup e)
        	{
        		Initialize();
        		if( e == null )
        			return;
        
        		this.IsDirty = e.IsDirty;
        		this.AccessGroupUid = e.AccessGroupUid;
        		this.ClusterUid = e.ClusterUid;
        		this.AccessGroupNumber = e.AccessGroupNumber;
        		this.AccessGroupName = e.AccessGroupName;
        		this.Description = e.Description;
        		this.ServiceComment = e.ServiceComment;
        		this.Comment = e.Comment;
        		this.IsExtended = e.IsExtended;
        		this.IsEnabled = e.IsEnabled;
        		this.ActivationDate = e.ActivationDate;
        		this.ExpirationDate = e.ExpirationDate;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.DisplayResourceKey = e.DisplayResourceKey;
        		this.DescriptionResourceKey = e.DescriptionResourceKey;
        		this.Display = e.Display;
        		this.CrisisModeAccessGroupUid = e.CrisisModeAccessGroupUid;
        		this.EntityId = e.EntityId;
        		this.DefaultTimeScheduleUid = e.DefaultTimeScheduleUid;
        		this.AccessGroupAccessPortals = e.AccessGroupAccessPortals.ToCollection();
        		this.AccessProfileAccessGroups = e.AccessProfileAccessGroups.ToCollection();
        		this.PersonalAccessGroupDynamicAccessGroups = e.PersonalAccessGroupDynamicAccessGroups.ToCollection();
        		
        	}
        
        	public bool IsAnythingDirty
        	{
        		get
        		{
        			//foreach( var o in InterfaceBoardSections)
        			//{
        			//	if (o.IsAnythingDirty == true)
        			//		return true;
        			//}
        			return IsDirty;                
        		}
        	}
        
        	public AccessGroup Clone(AccessGroup e)
        	{
        		return new AccessGroup(e);
        	}
        
        	public bool Equals(AccessGroup other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(AccessGroup other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.AccessGroupUid != this.AccessGroupUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid AccessGroupUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid ClusterUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public int AccessGroupNumber { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string AccessGroupName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string Description { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string ServiceComment { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string Comment { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public int IsExtended { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool IsEnabled { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.DateTime> ActivationDate { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.DateTime> ExpirationDate { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string InsertName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.DateTime> InsertDate { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string UpdateName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.DateTime> UpdateDate { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<short> ConcurrencyValue { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.Guid> DisplayResourceKey { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.Guid> DescriptionResourceKey { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string Display { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.Guid> CrisisModeAccessGroupUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid EntityId { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid DefaultTimeScheduleUid { get; set; }
    
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Cluster Cluster { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public gcsEntity gcsEntity { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<AccessGroupAccessPortal> AccessGroupAccessPortals { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<AccessProfileAccessGroup> AccessProfileAccessGroups { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<PersonalAccessGroupDynamicAccessGroup> PersonalAccessGroupDynamicAccessGroups { get; set; }
    
    }
}
