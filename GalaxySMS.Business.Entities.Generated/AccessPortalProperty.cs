//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.Serialization;

#if NetCoreApi
namespace GalaxySMS.Business.Entities.Api.NetCore
#elif NETSTANDARD2_0
namespace GalaxySMS.Business.Entities.NetStd2
#else
namespace GalaxySMS.Business.Entities
#endif
{
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    public partial class AccessPortalProperty : EntityBase, IIdentifiableEntity, IEquatable<AccessPortalProperty>, ITableEntityBase
    {
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    using GCS.Core.Common.Extensions;
    
    using System.Runtime.Serialization;
    
    #if NetCoreApi
    namespace GalaxySMS.Business.Entities.Api.NetCore
    #elif NETSTANDARD2_0
    namespace GalaxySMS.Business.Entities.NetStd2
    #else
    namespace GalaxySMS.Business.Entities
    #endif
    {
        public partial class AccessPortalProperty
        {
        	public AccessPortalProperty()
        	{
        		Initialize();
        	}
        
        	public AccessPortalProperty(AccessPortalProperty e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        	}
        
        	public void Initialize(AccessPortalProperty e)
        	{
        		Initialize();
        		if( e == null )
        			return;
        
        		this.IsDirty = e.IsDirty;
        		this.AccessPortalPropertiesUid = e.AccessPortalPropertiesUid;
        		this.AccessPortalUid = e.AccessPortalUid;
        		this.AutomaticForgivePassbackFrequencyUid = e.AutomaticForgivePassbackFrequencyUid;
        		this.PinRequiredModeUid = e.PinRequiredModeUid;
        		this.AccessPortalContactSupervisionTypeUid = e.AccessPortalContactSupervisionTypeUid;
        		this.AccessPortalDeferToServerBehaviorUid = e.AccessPortalDeferToServerBehaviorUid;
        		this.AccessPortalNoServerReplyBehaviorUid = e.AccessPortalNoServerReplyBehaviorUid;
        		this.AccessPortalLockPushButtonBehaviorUid = e.AccessPortalLockPushButtonBehaviorUid;
        		this.LiquidCrystalDisplayUid = e.LiquidCrystalDisplayUid;
        		this.AccessPortalElevatorControlTypeUid = e.AccessPortalElevatorControlTypeUid;
        		this.OtisElevatorDecUid = e.OtisElevatorDecUid;
        		this.ElevatorSerialChannelUid = e.ElevatorSerialChannelUid;
        		this.DoorNumber = e.DoorNumber;
        		this.UnlockDelay = e.UnlockDelay;
        		this.UnlockDuration = e.UnlockDuration;
        		this.RecloseDuration = e.RecloseDuration;
        		this.AllowPassbackAccess = e.AllowPassbackAccess;
        		this.RequireTwoValidCredentials = e.RequireTwoValidCredentials;
        		this.UnlockOnREX = e.UnlockOnREX;
        		this.SuppressIllegalOpenLog = e.SuppressIllegalOpenLog;
        		this.SuppressOpenTooLongLog = e.SuppressOpenTooLongLog;
        		this.SuppressClosedLog = e.SuppressClosedLog;
        		this.SuppressREXLog = e.SuppressREXLog;
        		this.LockWhenDoorCloses = e.LockWhenDoorCloses;
        		this.EnableDuress = e.EnableDuress;
        		this.DoorGroupNotify = e.DoorGroupNotify;
        		this.DoorGroupCanDisable = e.DoorGroupCanDisable;
        		this.RelayOneOnDuringArmDelay = e.RelayOneOnDuringArmDelay;
        		this.RequireValidAccessForAutoUnlock = e.RequireValidAccessForAutoUnlock;
        		this.PINSpecifiesRecloseDuration = e.PINSpecifiesRecloseDuration;
        		this.ValidAccessRequiresDoorOpen = e.ValidAccessRequiresDoorOpen;
        		this.DontDecrementLimitedSwipeExpireCount = e.DontDecrementLimitedSwipeExpireCount;
        		this.IgnoreNotInSystem = e.IgnoreNotInSystem;
        		this.ReaderSendsHeartbeat = e.ReaderSendsHeartbeat;
        		this.PhotoVerificationEnabled = e.PhotoVerificationEnabled;
        		this.TimeAttendancePortal = e.TimeAttendancePortal;
        		this.EMailEventsEnabled = e.EMailEventsEnabled;
        		this.TransmitEventsEnabled = e.TransmitEventsEnabled;
        		this.FileOutputEnabled = e.FileOutputEnabled;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.ElevatorRelayInterfaceBoardSectionUid = e.ElevatorRelayInterfaceBoardSectionUid;
        		this.GenerateDoorContactChangeLogs = e.GenerateDoorContactChangeLogs;
        		this.AccessPortalMultiFactorModeUid = e.AccessPortalMultiFactorModeUid;
        		this.DoorNumber1 = e.DoorNumber1;
        		
        	}
        
        	public bool IsAnythingDirty
        	{
        		get
        		{
        			//foreach( var o in InterfaceBoardSections)
        			//{
        			//	if (o.IsAnythingDirty == true)
        			//		return true;
        			//}
        			return IsDirty;                
        		}
        	}
        
        	public AccessPortalProperty Clone(AccessPortalProperty e)
        	{
        		return new AccessPortalProperty(e);
        	}
        
        	public bool Equals(AccessPortalProperty other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(AccessPortalProperty other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.AccessPortalPropertiesUid != this.AccessPortalPropertiesUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid AccessPortalPropertiesUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid AccessPortalUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid AutomaticForgivePassbackFrequencyUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid PinRequiredModeUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid AccessPortalContactSupervisionTypeUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid AccessPortalDeferToServerBehaviorUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid AccessPortalNoServerReplyBehaviorUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid AccessPortalLockPushButtonBehaviorUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.Guid> LiquidCrystalDisplayUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.Guid> AccessPortalElevatorControlTypeUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.Guid> OtisElevatorDecUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.Guid> ElevatorSerialChannelUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public short DoorNumber { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public int UnlockDelay { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public int UnlockDuration { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public int RecloseDuration { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool AllowPassbackAccess { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool RequireTwoValidCredentials { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool UnlockOnREX { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool SuppressIllegalOpenLog { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool SuppressOpenTooLongLog { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool SuppressClosedLog { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool SuppressREXLog { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool LockWhenDoorCloses { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool EnableDuress { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool DoorGroupNotify { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool DoorGroupCanDisable { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool RelayOneOnDuringArmDelay { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool RequireValidAccessForAutoUnlock { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool PINSpecifiesRecloseDuration { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool ValidAccessRequiresDoorOpen { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool DontDecrementLimitedSwipeExpireCount { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool IgnoreNotInSystem { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool ReaderSendsHeartbeat { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool PhotoVerificationEnabled { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool TimeAttendancePortal { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool EMailEventsEnabled { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool TransmitEventsEnabled { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool FileOutputEnabled { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string InsertName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.DateTime> InsertDate { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string UpdateName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.DateTime> UpdateDate { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<short> ConcurrencyValue { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.Guid> ElevatorRelayInterfaceBoardSectionUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool GenerateDoorContactChangeLogs { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid AccessPortalMultiFactorModeUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public short DoorNumber1 { get; set; }
    
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public AccessPortal AccessPortal { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public AccessPortalContactSupervisionType AccessPortalContactSupervisionType { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public AccessPortalDeferToServerBehavior AccessPortalDeferToServerBehavior { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public AccessPortalElevatorControlType AccessPortalElevatorControlType { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public AccessPortalLockPushButtonBehavior AccessPortalLockPushButtonBehavior { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public AccessPortalNoServerReplyBehavior AccessPortalNoServerReplyBehavior { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public GalaxyInterfaceBoardSection GalaxyInterfaceBoardSection { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public LiquidCrystalDisplay LiquidCrystalDisplay { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public AccessPortalMultiFactorMode AccessPortalMultiFactorMode { get; set; }
    
    }
}
