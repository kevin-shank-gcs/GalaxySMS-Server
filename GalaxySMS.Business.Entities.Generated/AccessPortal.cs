//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.Serialization;

#if NetCoreApi
namespace GalaxySMS.Business.Entities.Api.NetCore
#elif NETSTANDARD2_0
namespace GalaxySMS.Business.Entities.NetStd2
#else
namespace GalaxySMS.Business.Entities
#endif
{
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    public partial class AccessPortal : EntityBase, IIdentifiableEntity, IEquatable<AccessPortal>, ITableEntityBase
    {
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    using GCS.Core.Common.Extensions;
    
    using System.Runtime.Serialization;
    
    #if NetCoreApi
    namespace GalaxySMS.Business.Entities.Api.NetCore
    #elif NETSTANDARD2_0
    namespace GalaxySMS.Business.Entities.NetStd2
    #else
    namespace GalaxySMS.Business.Entities
    #endif
    {
        public partial class AccessPortal
        {
        	public AccessPortal()
        	{
        		Initialize();
        	}
        
        	public AccessPortal(AccessPortal e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		this.AccessPortalGalaxyHardwareAddresses = new HashSet<AccessPortalGalaxyHardwareAddress>();
        		this.AccessPortalProperties = new HashSet<AccessPortalProperty>();
        		this.AccessPortalAreas = new HashSet<AccessPortalArea>();
        		this.AccessPortalTimeSchedules = new HashSet<AccessPortalTimeSchedule>();
        		this.AccessPortalAuxiliaryOutputs = new HashSet<AccessPortalAuxiliaryOutput>();
        		this.AccessPortalNotes = new HashSet<AccessPortalNote>();
        		this.PersonalAccessGroupAccessPortals = new HashSet<PersonalAccessGroupAccessPortal>();
        		this.AccessPortalCommandAudits = new HashSet<AccessPortalCommandAudit>();
        		this.RoleAccessPortals = new HashSet<RoleAccessPortal>();
        		this.AccessPortalActivityEvents = new HashSet<AccessPortalActivityEvent>();
        	}
        
        	public void Initialize(AccessPortal e)
        	{
        		Initialize();
        		if( e == null )
        			return;
        
        		this.IsDirty = e.IsDirty;
        		this.AccessPortalUid = e.AccessPortalUid;
        		this.AccessPortalTypeUid = e.AccessPortalTypeUid;
        		this.BinaryResourceUid = e.BinaryResourceUid;
        		this.PortalName = e.PortalName;
        		this.Location = e.Location;
        		this.ServiceComment = e.ServiceComment;
        		this.CriticalityComment = e.CriticalityComment;
        		this.Comment = e.Comment;
        		this.IsTemplate = e.IsTemplate;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.SiteUid = e.SiteUid;
        		this.EntityId = e.EntityId;
        		this.IsEnabled = e.IsEnabled;
        		this.IsEnabledLastUpdated = e.IsEnabledLastUpdated;
        		this.IsBoundToHardware = e.IsBoundToHardware;
        		this.AlertEventsFlag = e.AlertEventsFlag;
        		this.AccessPortalGalaxyHardwareAddresses = e.AccessPortalGalaxyHardwareAddresses.ToCollection();
        		this.AccessPortalProperties = e.AccessPortalProperties.ToCollection();
        		this.AccessPortalAreas = e.AccessPortalAreas.ToCollection();
        		this.AccessPortalTimeSchedules = e.AccessPortalTimeSchedules.ToCollection();
        		this.AccessPortalAuxiliaryOutputs = e.AccessPortalAuxiliaryOutputs.ToCollection();
        		this.AccessPortalNotes = e.AccessPortalNotes.ToCollection();
        		this.PersonalAccessGroupAccessPortals = e.PersonalAccessGroupAccessPortals.ToCollection();
        		this.AccessPortalCommandAudits = e.AccessPortalCommandAudits.ToCollection();
        		this.RoleAccessPortals = e.RoleAccessPortals.ToCollection();
        		this.AccessPortalActivityEvents = e.AccessPortalActivityEvents.ToCollection();
        		
        	}
        
        	public bool IsAnythingDirty
        	{
        		get
        		{
        			//foreach( var o in InterfaceBoardSections)
        			//{
        			//	if (o.IsAnythingDirty == true)
        			//		return true;
        			//}
        			return IsDirty;                
        		}
        	}
        
        	public AccessPortal Clone(AccessPortal e)
        	{
        		return new AccessPortal(e);
        	}
        
        	public bool Equals(AccessPortal other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(AccessPortal other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.AccessPortalUid != this.AccessPortalUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid AccessPortalUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid AccessPortalTypeUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.Guid> BinaryResourceUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string PortalName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string Location { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string ServiceComment { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string CriticalityComment { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string Comment { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool IsTemplate { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string InsertName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.DateTime> InsertDate { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string UpdateName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.DateTime> UpdateDate { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<short> ConcurrencyValue { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid SiteUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid EntityId { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool IsEnabled { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.DateTimeOffset> IsEnabledLastUpdated { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<bool> IsBoundToHardware { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<int> AlertEventsFlag { get; set; }
    
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public gcsBinaryResource gcsBinaryResource { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<AccessPortalGalaxyHardwareAddress> AccessPortalGalaxyHardwareAddresses { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<AccessPortalProperty> AccessPortalProperties { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<AccessPortalArea> AccessPortalAreas { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<AccessPortalTimeSchedule> AccessPortalTimeSchedules { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<AccessPortalAuxiliaryOutput> AccessPortalAuxiliaryOutputs { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<AccessPortalNote> AccessPortalNotes { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<PersonalAccessGroupAccessPortal> PersonalAccessGroupAccessPortals { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<AccessPortalCommandAudit> AccessPortalCommandAudits { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<RoleAccessPortal> RoleAccessPortals { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<AccessPortalActivityEvent> AccessPortalActivityEvents { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public AccessPortalLastUsage AccessPortalLastUsage { get; set; }
    
    }
}
