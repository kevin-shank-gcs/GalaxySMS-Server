//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.Serialization;

#if NetCoreApi
namespace GalaxySMS.Business.Entities.Api.NetCore
#elif NETSTANDARD2_0
namespace GalaxySMS.Business.Entities.NetStd2
#else
namespace GalaxySMS.Business.Entities
#endif
{
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    public partial class ActivityEvent : EntityBase, IIdentifiableEntity, IEquatable<ActivityEvent>, ITableEntityBase
    {
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    using GCS.Core.Common.Extensions;
    
    using System.Runtime.Serialization;
    
    #if NetCoreApi
    namespace GalaxySMS.Business.Entities.Api.NetCore
    #elif NETSTANDARD2_0
    namespace GalaxySMS.Business.Entities.NetStd2
    #else
    namespace GalaxySMS.Business.Entities
    #endif
    {
        public partial class ActivityEvent
        {
        	public ActivityEvent()
        	{
        		Initialize();
        	}
        
        	public ActivityEvent(ActivityEvent e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		this.ActivityEventAcknowledgements = new HashSet<ActivityEventAcknowledgement>();
        	}
        
        	public void Initialize(ActivityEvent e)
        	{
        		Initialize();
        		if( e == null )
        			return;
        
        		this.IsDirty = e.IsDirty;
        		this.ActivityEventUid = e.ActivityEventUid;
        		this.ActivityDateTime = e.ActivityDateTime;
        		this.ActivityDateTimeUTC = e.ActivityDateTimeUTC;
        		this.EventTypeMessage = e.EventTypeMessage;
        		this.ForeColor = e.ForeColor;
        		this.ForeColorHex = e.ForeColorHex;
        		this.DeviceName = e.DeviceName;
        		this.SiteName = e.SiteName;
        		this.EntityId = e.EntityId;
        		this.DeviceUid = e.DeviceUid;
        		this.EventTypeUid = e.EventTypeUid;
        		this.DeviceType = e.DeviceType;
        		this.LastName = e.LastName;
        		this.FirstName = e.FirstName;
        		this.IsTraced = e.IsTraced;
        		this.CredentialDescription = e.CredentialDescription;
        		this.PersonUid = e.PersonUid;
        		this.CredentialUid = e.CredentialUid;
        		this.ClusterUid = e.ClusterUid;
        		this.ClusterNumber = e.ClusterNumber;
        		this.ClusterName = e.ClusterName;
        		this.ClusterGroupId = e.ClusterGroupId;
        		this.PanelNumber = e.PanelNumber;
        		this.InputOutputGroupName = e.InputOutputGroupName;
        		this.InputOutputGroupNumber = e.InputOutputGroupNumber;
        		this.CpuNumber = e.CpuNumber;
        		this.BoardNumber = e.BoardNumber;
        		this.SectionNumber = e.SectionNumber;
        		this.ModuleNumber = e.ModuleNumber;
        		this.NodeNumber = e.NodeNumber;
        		this.AlarmPriority = e.AlarmPriority;
        		this.ResponseRequired = e.ResponseRequired;
        		this.EntityName = e.EntityName;
        		this.EntityType = e.EntityType;
        		this.ActivityEventAcknowledgements = e.ActivityEventAcknowledgements.ToCollection();
        		
        	}
        
        	public bool IsAnythingDirty
        	{
        		get
        		{
        			//foreach( var o in InterfaceBoardSections)
        			//{
        			//	if (o.IsAnythingDirty == true)
        			//		return true;
        			//}
        			return IsDirty;                
        		}
        	}
        
        	public ActivityEvent Clone(ActivityEvent e)
        	{
        		return new ActivityEvent(e);
        	}
        
        	public bool Equals(ActivityEvent other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(ActivityEvent other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.ActivityEventUid != this.ActivityEventUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid ActivityEventUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.DateTimeOffset ActivityDateTime { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.DateTimeOffset> ActivityDateTimeUTC { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string EventTypeMessage { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public int ForeColor { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string ForeColorHex { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string DeviceName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string SiteName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid EntityId { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid DeviceUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid EventTypeUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string DeviceType { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string LastName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string FirstName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool IsTraced { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string CredentialDescription { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.Guid> PersonUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.Guid> CredentialUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.Guid> ClusterUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<int> ClusterNumber { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string ClusterName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<int> ClusterGroupId { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<int> PanelNumber { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string InputOutputGroupName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<int> InputOutputGroupNumber { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<short> CpuNumber { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<short> BoardNumber { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<short> SectionNumber { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<short> ModuleNumber { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<short> NodeNumber { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<int> AlarmPriority { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<bool> ResponseRequired { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string EntityName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string EntityType { get; set; }
    
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<ActivityEventAcknowledgement> ActivityEventAcknowledgements { get; set; }
    
    }
}
