//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.Serialization;

#if NetCoreApi
namespace GalaxySMS.Business.Entities.Api.NetCore
#elif NETSTANDARD2_0
namespace GalaxySMS.Business.Entities.NetStd2
#else
namespace GalaxySMS.Business.Entities
#endif
{
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    public partial class BackgroundJob : EntityBase, IIdentifiableEntity, IEquatable<BackgroundJob>, ITableEntityBase
    {
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    using GCS.Core.Common.Extensions;
    
    using System.Runtime.Serialization;
    
    #if NetCoreApi
    namespace GalaxySMS.Business.Entities.Api.NetCore
    #elif NETSTANDARD2_0
    namespace GalaxySMS.Business.Entities.NetStd2
    #else
    namespace GalaxySMS.Business.Entities
    #endif
    {
        public partial class BackgroundJob
        {
        	public BackgroundJob()
        	{
        		Initialize();
        	}
        
        	public BackgroundJob(BackgroundJob e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		this.BackgroundJobStateChanges = new HashSet<BackgroundJobStateChange>();
        	}
        
        	public void Initialize(BackgroundJob e)
        	{
        		Initialize();
        		if( e == null )
        			return;
        
        		this.IsDirty = e.IsDirty;
        		this.BackgroundJobUid = e.BackgroundJobUid;
        		this.UserId = e.UserId;
        		this.State = e.State;
        		this.JobType = e.JobType;
        		this.DataType = e.DataType;
        		this.DataItemUid = e.DataItemUid;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.EntityId = e.EntityId;
        		this.ItemName = e.ItemName;
        		this.BackgroundJobStateChanges = e.BackgroundJobStateChanges.ToCollection();
        		
        	}
        
        	public bool IsAnythingDirty
        	{
        		get
        		{
        			//foreach( var o in InterfaceBoardSections)
        			//{
        			//	if (o.IsAnythingDirty == true)
        			//		return true;
        			//}
        			return IsDirty;                
        		}
        	}
        
        	public BackgroundJob Clone(BackgroundJob e)
        	{
        		return new BackgroundJob(e);
        	}
        
        	public bool Equals(BackgroundJob other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(BackgroundJob other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.BackgroundJobUid != this.BackgroundJobUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid BackgroundJobUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid UserId { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string State { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string JobType { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string DataType { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid DataItemUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string InsertName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.DateTime> InsertDate { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string UpdateName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.DateTime> UpdateDate { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<short> ConcurrencyValue { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid EntityId { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string ItemName { get; set; }
    
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public BackgroundJobData BackgroundJobData { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<BackgroundJobStateChange> BackgroundJobStateChanges { get; set; }
    
    }
}
