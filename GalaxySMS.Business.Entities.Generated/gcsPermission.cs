//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.Serialization;

#if NetCoreApi
namespace GalaxySMS.Business.Entities.Api.NetCore
#elif NETSTANDARD2_0
namespace GalaxySMS.Business.Entities.NetStd2
#else
namespace GalaxySMS.Business.Entities
#endif
{
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    public partial class gcsPermission : EntityBase, IIdentifiableEntity, IEquatable<gcsPermission>, ITableEntityBase
    {
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    using GCS.Core.Common.Extensions;
    
    using System.Runtime.Serialization;
    
    #if NetCoreApi
    namespace GalaxySMS.Business.Entities.Api.NetCore
    #elif NETSTANDARD2_0
    namespace GalaxySMS.Business.Entities.NetStd2
    #else
    namespace GalaxySMS.Business.Entities
    #endif
    {
        public partial class gcsPermission
        {
        	public gcsPermission()
        	{
        		Initialize();
        	}
        
        	public gcsPermission(gcsPermission e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		this.UserDefinedPropertyPermissions = new HashSet<UserDefinedPropertyPermission>();
        		this.PropertySensitivityLevelPermissions = new HashSet<PropertySensitivityLevelPermission>();
        		this.RoleAccessPortalPermissions = new HashSet<RoleAccessPortalPermission>();
        		this.RoleClusterPermissions = new HashSet<RoleClusterPermission>();
        		this.RoleInputDevicePermissions = new HashSet<RoleInputDevicePermission>();
        		this.RoleInputOutputGroupPermissions = new HashSet<RoleInputOutputGroupPermission>();
        		this.RoleOutputDevicePermissions = new HashSet<RoleOutputDevicePermission>();
        		this.RoleRegionPermissions = new HashSet<RoleRegionPermission>();
        		this.RoleSitePermissions = new HashSet<RoleSitePermission>();
        		this.RoleMercScpGroupPermissions = new HashSet<RoleMercScpGroupPermission>();
        	}
        
        	public void Initialize(gcsPermission e)
        	{
        		Initialize();
        		if( e == null )
        			return;
        
        		this.IsDirty = e.IsDirty;
        		this.PermissionId = e.PermissionId;
        		this.PermissionCategoryId = e.PermissionCategoryId;
        		this.PermissionName = e.PermissionName;
        		this.PermissionDescription = e.PermissionDescription;
        		this.IsActive = e.IsActive;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.PermissionTypeId = e.PermissionTypeId;
        		this.Code = e.Code;
        		this.UserDefinedPropertyPermissions = e.UserDefinedPropertyPermissions.ToCollection();
        		this.PropertySensitivityLevelPermissions = e.PropertySensitivityLevelPermissions.ToCollection();
        		this.RoleAccessPortalPermissions = e.RoleAccessPortalPermissions.ToCollection();
        		this.RoleClusterPermissions = e.RoleClusterPermissions.ToCollection();
        		this.RoleInputDevicePermissions = e.RoleInputDevicePermissions.ToCollection();
        		this.RoleInputOutputGroupPermissions = e.RoleInputOutputGroupPermissions.ToCollection();
        		this.RoleOutputDevicePermissions = e.RoleOutputDevicePermissions.ToCollection();
        		this.RoleRegionPermissions = e.RoleRegionPermissions.ToCollection();
        		this.RoleSitePermissions = e.RoleSitePermissions.ToCollection();
        		this.RoleMercScpGroupPermissions = e.RoleMercScpGroupPermissions.ToCollection();
        		
        	}
        
        	public bool IsAnythingDirty
        	{
        		get
        		{
        			//foreach( var o in InterfaceBoardSections)
        			//{
        			//	if (o.IsAnythingDirty == true)
        			//		return true;
        			//}
        			return IsDirty;                
        		}
        	}
        
        	public gcsPermission Clone(gcsPermission e)
        	{
        		return new gcsPermission(e);
        	}
        
        	public bool Equals(gcsPermission other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(gcsPermission other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.PermissionId != this.PermissionId )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid PermissionId { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid PermissionCategoryId { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string PermissionName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string PermissionDescription { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool IsActive { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string InsertName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.DateTime> InsertDate { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string UpdateName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.DateTime> UpdateDate { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<short> ConcurrencyValue { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid PermissionTypeId { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string Code { get; set; }
    
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<UserDefinedPropertyPermission> UserDefinedPropertyPermissions { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<PropertySensitivityLevelPermission> PropertySensitivityLevelPermissions { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<RoleAccessPortalPermission> RoleAccessPortalPermissions { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<RoleClusterPermission> RoleClusterPermissions { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<RoleInputDevicePermission> RoleInputDevicePermissions { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<RoleInputOutputGroupPermission> RoleInputOutputGroupPermissions { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<RoleOutputDevicePermission> RoleOutputDevicePermissions { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<RoleRegionPermission> RoleRegionPermissions { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<RoleSitePermission> RoleSitePermissions { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<RoleMercScpGroupPermission> RoleMercScpGroupPermissions { get; set; }
    
    }
}
