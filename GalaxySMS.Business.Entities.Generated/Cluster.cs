//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.Serialization;

#if NetCoreApi
namespace GalaxySMS.Business.Entities.Api.NetCore
#elif NETSTANDARD2_0
namespace GalaxySMS.Business.Entities.NetStd2
#else
namespace GalaxySMS.Business.Entities
#endif
{
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    public partial class Cluster : EntityBase, IIdentifiableEntity, IEquatable<Cluster>, ITableEntityBase
    {
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    using GCS.Core.Common.Extensions;
    
    using System.Runtime.Serialization;
    
    #if NetCoreApi
    namespace GalaxySMS.Business.Entities.Api.NetCore
    #elif NETSTANDARD2_0
    namespace GalaxySMS.Business.Entities.NetStd2
    #else
    namespace GalaxySMS.Business.Entities
    #endif
    {
        public partial class Cluster
        {
        	public Cluster()
        	{
        		Initialize();
        	}
        
        	public Cluster(Cluster e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		this.GalaxyClusterTimeScheduleMaps = new HashSet<GalaxyClusterTimeScheduleMap>();
        		this.InputOutputGroups = new HashSet<InputOutputGroup>();
        		this.AccessGroups = new HashSet<AccessGroup>();
        		this.Areas = new HashSet<Area>();
        		this.ClusterEntityMaps = new HashSet<ClusterEntityMap>();
        		this.ClusterInputOutputGroups = new HashSet<ClusterInputOutputGroup>();
        		this.ClusterCommandAudits = new HashSet<ClusterCommandAudit>();
        		this.GalaxyClusterDayTypeMaps = new HashSet<GalaxyClusterDayTypeMap>();
        		this.AccessProfileClusters = new HashSet<AccessProfileCluster>();
        		this.CredentialClusterTours = new HashSet<CredentialClusterTour>();
        		this.PersonClusterPermissions = new HashSet<PersonClusterPermission>();
        		this.RoleClusters = new HashSet<RoleCluster>();
        	}
        
        	public void Initialize(Cluster e)
        	{
        		Initialize();
        		if( e == null )
        			return;
        
        		this.IsDirty = e.IsDirty;
        		this.ClusterUid = e.ClusterUid;
        		this.SiteUid = e.SiteUid;
        		this.ClusterNumber = e.ClusterNumber;
        		this.ClusterName = e.ClusterName;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.ClusterTypeUid = e.ClusterTypeUid;
        		this.EntityId = e.EntityId;
        		this.SiteUid1 = e.SiteUid1;
        		this.CredentialDataLengthUid = e.CredentialDataLengthUid;
        		this.TimeScheduleTypeUid = e.TimeScheduleTypeUid;
        		this.ClusterGroupId = e.ClusterGroupId;
        		this.IsActive = e.IsActive;
        		this.AbaStartDigit = e.AbaStartDigit;
        		this.AbaStopDigit = e.AbaStopDigit;
        		this.AbaFoldOption = e.AbaFoldOption;
        		this.WiegandStartBit = e.WiegandStartBit;
        		this.WiegandStopBit = e.WiegandStopBit;
        		this.CardaxStartBit = e.CardaxStartBit;
        		this.CardaxStopBit = e.CardaxStopBit;
        		this.LockoutAfterInvalidAttempts = e.LockoutAfterInvalidAttempts;
        		this.LockoutDurationSeconds = e.LockoutDurationSeconds;
        		this.AccessRuleOverrideTimeout = e.AccessRuleOverrideTimeout;
        		this.UnlimitedCredentialTimeout = e.UnlimitedCredentialTimeout;
        		this.TimeZoneId = e.TimeZoneId;
        		this.BinaryResourceUid = e.BinaryResourceUid;
        		this.CrisisActivateInputOutputGroupUid = e.CrisisActivateInputOutputGroupUid;
        		this.CrisisResetInputOutputGroupUid = e.CrisisResetInputOutputGroupUid;
        		this.AccessPortalLockedLedBehaviorModeUid = e.AccessPortalLockedLedBehaviorModeUid;
        		this.AccessPortalUnlockedLedBehaviorModeUid = e.AccessPortalUnlockedLedBehaviorModeUid;
        		this.AccessPortalTypeUid = e.AccessPortalTypeUid;
        		this.TemplateAccessPortalUid = e.TemplateAccessPortalUid;
        		this.AbaClipOption = e.AbaClipOption;
        		this.CurrentTimeForCluster = e.CurrentTimeForCluster;
        		this.Description = e.Description;
        		this.ClusterGroupIdOrig = e.ClusterGroupIdOrig;
        		this.GalaxyClusterTimeScheduleMaps = e.GalaxyClusterTimeScheduleMaps.ToCollection();
        		this.InputOutputGroups = e.InputOutputGroups.ToCollection();
        		this.AccessGroups = e.AccessGroups.ToCollection();
        		this.Areas = e.Areas.ToCollection();
        		this.ClusterEntityMaps = e.ClusterEntityMaps.ToCollection();
        		this.ClusterInputOutputGroups = e.ClusterInputOutputGroups.ToCollection();
        		this.ClusterCommandAudits = e.ClusterCommandAudits.ToCollection();
        		this.GalaxyClusterDayTypeMaps = e.GalaxyClusterDayTypeMaps.ToCollection();
        		this.AccessProfileClusters = e.AccessProfileClusters.ToCollection();
        		this.CredentialClusterTours = e.CredentialClusterTours.ToCollection();
        		this.PersonClusterPermissions = e.PersonClusterPermissions.ToCollection();
        		this.RoleClusters = e.RoleClusters.ToCollection();
        		
        	}
        
        	public bool IsAnythingDirty
        	{
        		get
        		{
        			//foreach( var o in InterfaceBoardSections)
        			//{
        			//	if (o.IsAnythingDirty == true)
        			//		return true;
        			//}
        			return IsDirty;                
        		}
        	}
        
        	public Cluster Clone(Cluster e)
        	{
        		return new Cluster(e);
        	}
        
        	public bool Equals(Cluster other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(Cluster other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.ClusterUid != this.ClusterUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid ClusterUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.Guid> SiteUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public short ClusterNumber { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string ClusterName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string InsertName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.DateTime> InsertDate { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string UpdateName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.DateTime> UpdateDate { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<short> ConcurrencyValue { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid ClusterTypeUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid EntityId { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid SiteUid1 { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid CredentialDataLengthUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid TimeScheduleTypeUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string ClusterGroupId { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool IsActive { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public short AbaStartDigit { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public short AbaStopDigit { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool AbaFoldOption { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public short WiegandStartBit { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public short WiegandStopBit { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public short CardaxStartBit { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public short CardaxStopBit { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public short LockoutAfterInvalidAttempts { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public int LockoutDurationSeconds { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public short AccessRuleOverrideTimeout { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public short UnlimitedCredentialTimeout { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string TimeZoneId { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.Guid> BinaryResourceUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.Guid> CrisisActivateInputOutputGroupUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.Guid> CrisisResetInputOutputGroupUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid AccessPortalLockedLedBehaviorModeUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid AccessPortalUnlockedLedBehaviorModeUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.Guid> AccessPortalTypeUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.Guid> TemplateAccessPortalUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool AbaClipOption { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.DateTime> CurrentTimeForCluster { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string Description { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<int> ClusterGroupIdOrig { get; set; }
    
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<GalaxyClusterTimeScheduleMap> GalaxyClusterTimeScheduleMaps { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ClusterType ClusterType { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<InputOutputGroup> InputOutputGroups { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<AccessGroup> AccessGroups { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<Area> Areas { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<ClusterEntityMap> ClusterEntityMaps { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<ClusterInputOutputGroup> ClusterInputOutputGroups { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<ClusterCommandAudit> ClusterCommandAudits { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<GalaxyClusterDayTypeMap> GalaxyClusterDayTypeMaps { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<AccessProfileCluster> AccessProfileClusters { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<CredentialClusterTour> CredentialClusterTours { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<PersonClusterPermission> PersonClusterPermissions { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public ICollection<RoleCluster> RoleClusters { get; set; }
    
    }
}
