//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.Serialization;

#if NetCoreApi
namespace GalaxySMS.Business.Entities.Api.NetCore
#elif NETSTANDARD2_0
namespace GalaxySMS.Business.Entities.NetStd2
#else
namespace GalaxySMS.Business.Entities
#endif
{
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    public partial class MercScp : EntityBase, IIdentifiableEntity, IEquatable<MercScp>, ITableEntityBase
    {
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    using GCS.Core.Common.Extensions;
    
    using System.Runtime.Serialization;
    
    #if NetCoreApi
    namespace GalaxySMS.Business.Entities.Api.NetCore
    #elif NETSTANDARD2_0
    namespace GalaxySMS.Business.Entities.NetStd2
    #else
    namespace GalaxySMS.Business.Entities
    #endif
    {
        public partial class MercScp
        {
        	public MercScp()
        	{
        		Initialize();
        	}
        
        	public MercScp(MercScp e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        	}
        
        	public void Initialize(MercScp e)
        	{
        		Initialize();
        		if( e == null )
        			return;
        
        		this.IsDirty = e.IsDirty;
        		this.MercScpUid = e.MercScpUid;
        		this.MercScpTypeUid = e.MercScpTypeUid;
        		this.MercScpGroupUid = e.MercScpGroupUid;
        		this.ScpNumber = e.ScpNumber;
        		this.SpcName = e.SpcName;
        		this.Location = e.Location;
        		this.Description = e.Description;
        		this.MacAddress = e.MacAddress;
        		this.SerialNumber = e.SerialNumber;
        		this.ConnectionType = e.ConnectionType;
        		this.IpAddress = e.IpAddress;
        		this.IpPort = e.IpPort;
        		this.AesPassword = e.AesPassword;
        		this.ScpReplyTimeout = e.ScpReplyTimeout;
        		this.TcpConnectRetryInterval = e.TcpConnectRetryInterval;
        		this.RetryCountBeforeOffline = e.RetryCountBeforeOffline;
        		this.OfflineTime = e.OfflineTime;
        		this.PollDelay = e.PollDelay;
        		this.TimeZoneId = e.TimeZoneId;
        		this.UseDaylightSavingsTime = e.UseDaylightSavingsTime;
        		this.TransactionCount = e.TransactionCount;
        		this.TransactionUnreportedLimit = e.TransactionUnreportedLimit;
        		this.DualPortEnabled = e.DualPortEnabled;
        		this.ConnectionTypeAlt = e.ConnectionTypeAlt;
        		this.RetryCountBeforeOfflineAlt = e.RetryCountBeforeOfflineAlt;
        		this.PollDelayAlt = e.PollDelayAlt;
        		this.IpAddressAlt = e.IpAddressAlt;
        		this.IpPortAlt = e.IpPortAlt;
        		this.AllowConnection = e.AllowConnection;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.ScpName = e.ScpName;
        		this.Description1 = e.Description1;
        		this.AllowConnection1 = e.AllowConnection1;
        		this.EntityId = e.EntityId;
        		this.SiteUid = e.SiteUid;
        		this.Serialnumber = e.Serialnumber;
        		
        	}
        
        	public bool IsAnythingDirty
        	{
        		get
        		{
        			//foreach( var o in InterfaceBoardSections)
        			//{
        			//	if (o.IsAnythingDirty == true)
        			//		return true;
        			//}
        			return IsDirty;                
        		}
        	}
        
        	public MercScp Clone(MercScp e)
        	{
        		return new MercScp(e);
        	}
        
        	public bool Equals(MercScp other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(MercScp other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.MercScpUid != this.MercScpUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid MercScpUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid MercScpTypeUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.Guid MercScpGroupUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public int ScpNumber { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string SpcName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string Location { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string Description { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string MacAddress { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string SerialNumber { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public int ConnectionType { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string IpAddress { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public int IpPort { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string AesPassword { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public int ScpReplyTimeout { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public int TcpConnectRetryInterval { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public int RetryCountBeforeOffline { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public int OfflineTime { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public int PollDelay { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string TimeZoneId { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool UseDaylightSavingsTime { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public int TransactionCount { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public int TransactionUnreportedLimit { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool DualPortEnabled { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public int ConnectionTypeAlt { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public int RetryCountBeforeOfflineAlt { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public int PollDelayAlt { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string IpAddressAlt { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public int IpPortAlt { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool AllowConnection { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string InsertName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public System.DateTimeOffset InsertDate { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string UpdateName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.DateTimeOffset> UpdateDate { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<short> ConcurrencyValue { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string ScpName { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public string Description1 { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public bool AllowConnection1 { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.Guid> EntityId { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public Nullable<System.Guid> SiteUid { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public long Serialnumber { get; set; }
    
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public MercScpGroup MercScpGroup { get; set; }
    
    #if NetCoreApi
    #else
    	[DataMember]
    #endif
    	public MercScpStatu MercScpStatu { get; set; }
    
    }
}
