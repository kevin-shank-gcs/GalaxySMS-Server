<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PDSA.DataLayer</name>
    </assembly>
    <members>
        <member name="T:PDSA.CodeGeneration.PDSACodeGenBase">
            <summary>
            Base class for all Code Generation classes to inherit from
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACodeGenBase.#ctor">
            <summary>
            Constructor for PDSACodeGenBase class
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenBase.DatabaseType">
            <summary>
            Get/Set the database you are generating for
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenBase.GenerationLanguage">
            <summary>
            Get/Set the .NET language you are generating for
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenBase.IsLoaded">
            <summary>
            Get/Set whether or not this file has been loaded
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenBase.LastException">
            <summary>
            Get/Set the Last Exception that occurred
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenBase.Message">
            <summary>
            Get/Set the last message
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACodeGenBase.CopyBase(PDSA.CodeGeneration.PDSACodeGenBase)">
            <summary>
            Copy all base properties to the new instance passed in
            </summary>
            <param name="x">The instance to set properties upon</param>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACodeGenBase.LoadTemplateText(System.String,System.String)">
            <summary>
            Load template text from the supplied path and file name
            </summary>
            <param name="filePath">The path where the file is located</param>
            <param name="fileName">The file name of the template text</param>
            <returns>The template text read from the file</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACodeGenBase.SetDatabaseType(System.String)">
            <summary>
            Set the database type (SQL Server, Oracle, etc.) for this code generation object
            </summary>
            <param name="serverName">The database server name</param>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACodeGenBase.SetLanguage(System.String)">
            <summary>
            Set the .NET language such as C# or Visual Basic for this code generation object
            </summary>
            <param name="language">The .NET language to set</param>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSACodeGenCollectionBase`1">
            <summary>
            Base class for all PDSA Code Generation Classes
            </summary>
            <typeparam name="T">The base type for this collection</typeparam>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACodeGenCollectionBase`1.#ctor">
            <summary>
            Constructor for PDSACodeGenCollectionBase Class
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenCollectionBase`1.LastMessage">
            <summary>
            Get/Set the Last Exception Message
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenCollectionBase`1.LastException">
            <summary>
            Get/Set the Last Exception
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenCollectionBase`1.RawXml">
            <summary>
            Get/Set the raw XML
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenCollectionBase`1.IsInitialized">
            <summary>
            Get/Set whether or not this collection has been initialized in the Init() method, or if needs to be loaded from an XML file.
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenCollectionBase`1.ClassName">
            <summary>
            Get/Set the Class Name
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenCollectionBase`1.ServerId">
            <summary>
            Get/Set the Database Server Id
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenCollectionBase`1.DatabaseType">
            <summary>
            Get/Set the Database Type
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenCollectionBase`1.GenerationLanguage">
            <summary>
            Get/Set the .NET Language
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACodeGenCollectionBase`1.Init">
            <summary>
            Initialize all variables to a valid start state
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACodeGenCollectionBase`1.CreateListFromXmlString(System.String)">
            <summary>
            Create a list from an XML string
            </summary>
            <param name="xml">The XML string to put into a list</param>
            <returns>A collection of objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACodeGenCollectionBase`1.CreateFromXMLFile(System.String)">
            <summary>
            Create a list from an XML file
            </summary>
            <param name="xmlFileName">The XML file name to read and put into a list</param>
            <returns>A collection of objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACodeGenCollectionBase`1.CreateFromXMLFile(System.String,System.Boolean)">
            <summary>
            Create a list from an XML file after clearing items
            </summary>
            <param name="xmlFileName">The XML file name to read</param>
            <param name="clearItems">Clear the list prior to loading new list</param>
            <returns>A collection of objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACodeGenCollectionBase`1.AddFromXMLFile(System.String)">
            <summary>
            Add items to the list from an XML file
            </summary>
            <param name="xmlFileName">The XML file name to read</param>
            <returns>A collection of objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACodeGenCollectionBase`1.MergeFromXMLFile(System.String)">
            <summary>
            Merge items from an XML file into the existing list. The items read from the XML file will replace any items already in the list
            </summary>
            <param name="xmlFileName">The XML file name to read</param>
            <returns>A collection of objects</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSAGeneratorLanguages">
            <summary>
            Types of .NET languages
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorLanguages.Both">
            <summary>
            Both
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorLanguages.CSharp">
            <summary>
            C#
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorLanguages.VisualBasic">
            <summary>
            Visual Basic
            </summary>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSAGeneratorDBObjectType">
            <summary>
            Types of Database Objects
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorDBObjectType.Table">
            <summary>
            Table
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorDBObjectType.StoredProcedure">
            <summary>
            Stored Procedure
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorDBObjectType.View">
            <summary>
            View
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorDBObjectType.Xml">
            <summary>
            XML
            </summary>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSAGeneratorGenerateType">
            <summary>
            Generation Types for Stored Procedures
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorGenerateType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorGenerateType.ReadOnly">
            <summary>
            Read Only
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorGenerateType.ReadOnlyWithParams">
            <summary>
            Read Only with Parameters
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorGenerateType.ReadOnlyNoParams">
            <summary>
            Read Only No Parameters
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorGenerateType.Execute">
            <summary>
            Execute
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorGenerateType.Full">
            <summary>
            Full
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorGenerateType.Xml">
            <summary>
            XML
            </summary>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSAGeneratorTypes">
            <summary>
            Generator Types for CRUD classes
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorTypes.Select">
            <summary>
            Select
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorTypes.Select_FK">
            <summary>
            Select for Foreign Keys
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorTypes.Insert">
            <summary>
            Insert
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorTypes.Delete">
            <summary>
            Delete
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorTypes.Update">
            <summary>
            Update
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorTypes.Where">
            <summary>
            Where
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorTypes.Where_FK">
            <summary>
            Where for Foreign Keys
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorTypes.OrderBy">
            <summary>
            Order By
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorTypes.RowCount">
            <summary>
            Row Count
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorTypes.Where_Indexes">
            <summary>
            Where for Indexes
            </summary>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSAGeneratorEventArgsType">
            <summary>
            Generator Event Args Type
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorEventArgsType.Informational">
            <summary>
            Informational Argument
            </summary>
        </member>
        <member name="F:PDSA.CodeGeneration.PDSAGeneratorEventArgsType.Fatal">
            <summary>
            Fatal Argument
            </summary>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSAGeneratorEventArgs2">
            <summary>
            Class passed in as an Event arg during and after code generation
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorEventArgs2.DBObjectName">
            <summary>
            Get/Set the database object name
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorEventArgs2.TotalLeft">
            <summary>
            Get/Set the total left to generate
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorEventArgs2.TemplateName">
            <summary>
            Get/Set the Template Name
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorEventArgs2.OutputText">
            <summary>
            Get/Set the Output Text
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorEventArgs2.NewColumnParam">
            <summary>
            Get/Set the New Column Parameter name
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorEventArgs2.RemoveColumnParam">
            <summary>
            Get/Set the Column to remove
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorEventArgs2.SkipThisObject">
            <summary>
            Get/Set whether or not to skip this object
            </summary>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSAGeneratorParamEventArgs">
            <summary>
            Class for use while generating parameters
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorParamEventArgs.XmlFile">
            <summary>
            Get/Set the XML File Name
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorParamEventArgs.XmlPath">
            <summary>
            Get/Set the path where to find the XML File name
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorParamEventArgs.XsdFile">
            <summary>
            Get/Set the XSD file name
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorParamEventArgs.XsdPath">
            <summary>
            Get/Set the path where to find the XSD File name
            </summary>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSAGeneratorStatementOptions">
            <summary>
            Class for Generator Statement Options
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorStatementOptions.IncludeWhere">
            <summary>
            Get/Set whether or not to include the WHERE clause in the statement
            </summary>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSAGeneratorTemplate">
            <summary>
            Class for code generation templates
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorTemplate.Language">
            <summary>
            Get/Set Code Generation Language
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorTemplate.FileName">
            <summary>
            Get/Set File Name
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorTemplate.TemplateName">
            <summary>
            Get/Set the Template Name
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorTemplate.TemplateFileName">
            <summary>
            Get/Set the Template File Name
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorTemplate.TemplateText">
            <summary>
            Get/Set the Template Text
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorTemplate.Generate">
            <summary>
            Get/Set whether or not to generate this template
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorTemplate.GeneratedClass">
            <summary>
            Get/Set whether or not this class has been generated
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorTemplate.IsEntity">
            <summary>
            Get/Set whether or not this is the Entity class
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorTemplate.GenerateToSubFolder">
            <summary>
            Get/Set the sub-folder to generate to
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorTemplate.TemplateSubFolder">
            <summary>
            Get/Set the sub folder for this template
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorTemplate.GenerateType">
            <summary>
            Get/Set the Generate Type
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorTemplate.BaseClassName">
            <summary>
            Get/Set the Base Class Name to use
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorTemplate.DBObjectType">
            <summary>
            Get/Set the Database Object Type this template is used for
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorTemplate.NamespaceSuffix">
            <summary>
            Get/Set the namespace suffix
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorTemplate.OutputFileExtension">
            <summary>
            Get/Set the Output File Extension
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorTemplate.OutputPath">
            <summary>
            Get/Set the Output Path
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorTemplate.OutputFilePrefix">
            <summary>
            Get/Set the Output File Prefix
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorTemplate.OutputFileSuffix">
            <summary>
            Get/Set the Output File Suffix
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorTemplate.WriteToFile">
            <summary>
            Get/Set whether or not to write to a separate file
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAGeneratorTemplate.ClassAttributes">
            <summary>
            Get/Set any class attributes to set on the generated class
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAGeneratorTemplate.LoadTemplateText(System.String)">
            <summary>
            Load a template file from the path and the TemplateFileName property
            </summary>
            <param name="filePath">The path to load the template file from</param>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAGeneratorTemplate.ToString">
            <summary>
            Override of ToString - Returns TemplateName
            </summary>
            <returns>Template Name</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSAXMLGenParams">
            <summary>
            Class for XML Generation Parameters
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAXMLGenParams.XmlClassNameSuffix">
            <summary>
            Get/Set the XML Class Name Suffix (if any)
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAXMLGenParams.XmlFileName">
            <summary>
            Get/Set the XML File Name
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAXMLGenParams.XmlProjectNamespace">
            <summary>
            Get/Set the XML Project Namespace
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAXMLGenParams.TopElementName">
            <summary>
            Get/Set the Top Element Name to use
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAXMLGenParams.OrderByElementName">
            <summary>
            Get/Set the ORDER BY Element Name to use
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAXMLGenParams.UniqueKeyElementName">
            <summary>
            Get/Set the Element Name to use for the Unique Key
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAXMLGenParams.IsUniqueKeyInteger">
            <summary>
            Get/Set whether or not the unique key element name is an integer data type
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAXMLGenParams.IsUniqueKeyElement">
            <summary>
            Get/Set whether or not there is a Unique Key Element Name in this XML file
            </summary>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSACodeGenProject">
            <summary>
            Class to hold information about a code generation project
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACodeGenProject.#ctor">
            <summary>
            Constructor for PDSACodeGenProject class
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.ProjectId">
            <summary>
            Get/Set the ProjectId value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.ProjectName">
            <summary>
            Get/Set the ProjectName value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.ProjectDescription">
            <summary>
            Get/Set the ProjectDescription value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.Author">
            <summary>
            Get/Set the Author value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.Copyright">
            <summary>
            Get/Set the Copyright value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.CompanyName">
            <summary>
            Get/Set the CompanyName value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.ProjectNamespace">
            <summary>
            Get/Set the ProjectNamespace value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.PrivateVariablePrefix">
            <summary>
            Get/Set the PrivateVariablePrefix value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.DefaultSchemaName">
            <summary>
            Get/Set the DefaultSchemaName value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.GenerationLanguageCode">
            <summary>
            Get/Set the GenerationLanguageCode value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.DBSchemaProviderName">
            <summary>
            Get/Set the DBSchemaProviderName value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.SchemaProvider">
            <summary>
            Get/Set the Schema Provider Object
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.ProjectConnectString">
            <summary>
            Get/Set the ProjectConnectString value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.ClassNameSuffix">
            <summary>
            Get/Set the ClassNameSuffix value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.UsePrefixReplacement">
            <summary>
            Get/Set the UsePrefixReplacement value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.RemoveUnderscores">
            <summary>
            Get/Set the RemoveUnderscores value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.WrapIdentifiers">
            <summary>
            Get/Set the WrapIdentifiers value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.PrefixColumnsWithObjectName">
            <summary>
            Get/Set the PrefixColumnsWithObjectName value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.PrefixObjectsWithSchema">
            <summary>
            Get/Set the PrefixObjectsWithSchema value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.PrefixObjectsWithCatalog">
            <summary>
            Get/Set the PrefixObjectsWithCatalog value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.AutoLoadForeignKeyTables">
            <summary>
            Get/Set the AutoLoadForeignKeyTables value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.UseAuditTracking">
            <summary>
            Get/Set the UseAuditTracking value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.ClassUsesDynamicSQL">
            <summary>
            Get/Set the ClassUsesDynamicSQL value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.ClassUsesStoredProcs">
            <summary>
            Get/Set the ClassUsesStoredProcs value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.UseDotNetTypePrefixes">
            <summary>
            Get/Set the UseDotNetTypePrefixes value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.UseStandardFields">
            <summary>
            Get/Set the UseStandardFields value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.DoNotGenerateAgain">
            <summary>
            Get/Set the DoNotGenerateAgain value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.ConvertUpperToProperCase">
            <summary>
            Get/Set the ConvertUpperToProperCase value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.DoNotGenerateComment">
            <summary>
            Get/Set the DoNotGenerateComment value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.SqlFileExtension">
            <summary>
            Get/Set the SqlFileExtension value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.IdentifierPrefix">
            <summary>
            Get/Set the IdentifierPrefix value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.IdentifierSuffix">
            <summary>
            Get/Set the IdentifierSuffix value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.GenerationFolder">
            <summary>
            Get/Set the GenerationFolder value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.TemplatesFolder">
            <summary>
            Get/Set the TemplatesFolder value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.XmlFolder">
            <summary>
            Get/Set the XmlFolder value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.XsdFolder">
            <summary>
            Get/Set the XsdFolder value
            </summary>  
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.SqlGenerateToSubFolder">
            <summary>
            Get/Set the SqlGenerateToSubFolder value
            </summary>  
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.RequiredMessage">
            <summary>
            Get/Set the RequiredMessage value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.RegularExpressionMessage">
            <summary>
            Get/Set the RegularExpressionMessage value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.UseSeparateAssemblies">
            <summary>
            Get/Set the UseSeparateAssemblies value
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenProject.IsPDSAFrameworkProject">
            <summary>
            Get/Set the IsPDSAFrameworkProject value
            </summary>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSACodeGenerationManager">
            <summary>
            This class manages all Code Generation Files, Current Language and Current Database
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationManager.CopyAfterGens">
            <summary>
            Get/Set the list of Copy After Generation Folders
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationManager.DatabaseServers">
            <summary>
            Get/Set the list of Database Servers
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationManager.DBDataTypes">
            <summary>
            Get/Set the list of Database Data Types
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationManager.DBDataTypesExcludes">
            <summary>
            Get/Set the list of Database Data Types to Exclude
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationManager.DotNetTypes">
            <summary>
            Get/Set the list of .NET Data Types
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationManager.Languages">
            <summary>
            Get/Set the list of Languages
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationManager.Prefixes">
            <summary>
            Get/Set the list of Prefixes to Replace
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationManager.ProjectTypes">
            <summary>
            Get/Set the list of Project Types
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationManager.RegularExpressions">
            <summary>
            Get/Set the List of Regular Expressions
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationManager.ReservedWords">
            <summary>
            Get/Set the List of Reserved Words
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationManager.SPGenerateTypes">
            <summary>
            Get/Set the List of Stored Procedure Generate Types
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationManager.SPSettings">
            <summary>
            Get/Set the List of Stored Procedure Settings
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationManager.StandardFields">
            <summary>
            Get/Set the List of Standard Fields
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationManager.Project">
            <summary>
            Get/Set the Code Generation Project Information
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationManager.CurrentDatabaseServer">
            <summary>
            Get/Set the Current Database Server
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationManager.Instance">
            <summary>
            A single instance of a PDSACodeGenerationManager object
            </summary>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSACodeGenerationTemplate">
            <summary>
            Class to hold a Code Generation Template
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACodeGenerationTemplate.#ctor">
            <summary>
            Constructor for PDSACodeGenerationTemplate Class
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationTemplate.Language">
            <summary>
            Get/Set Language
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationTemplate.Name">
            <summary>
            Get/Set Name
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationTemplate.TemplateSubFolder">
            <summary>
            Get/Set TemplateSubFolder
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationTemplate.DBObjectType">
            <summary>
            Get/Set DBObjectType
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationTemplate.GenerateType">
            <summary>
            Get/Set GenerateType
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationTemplate.FileName">
            <summary>
            Get/Set FileName
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationTemplate.GenerateToSubFolder">
            <summary>
            Get/Set GenerateToSubFolder
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationTemplate.BaseClassName">
            <summary>
            Get/Set BaseClassName
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationTemplate.NamespaceSuffix">
            <summary>
            Get/Set NamespaceSuffix
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationTemplate.OutputFileExtension">
            <summary>
            Get/Set OutputFileExtension
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationTemplate.OutputFilePrefix">
            <summary>
            Get/Set OutputFilePrefix
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationTemplate.OutputFileSuffix">
            <summary>
            Get/Set OutputFileSuffix
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationTemplate.ClassAttributes">
            <summary>
            Get/Set ClassAttributes
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationTemplate.GeneratedClass">
            <summary>
            Get/Set GeneratedClass
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACodeGenerationTemplate.Generate">
            <summary>
            Get/Set Generate
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACodeGenerationTemplate.Copy">
            <summary>
            Copy the current CopyAfterGen object to a new instance
            </summary>
            <returns>A PDSACodeGenerationTemplate object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACodeGenerationTemplate.ToString">
            <summary>
            Override of ToString to return the Name
            </summary>
            <returns>The Name</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSACodeGenerationTemplates">
            <summary>
            Collection class of Code Generation Template Objects
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACodeGenerationTemplates.#ctor">
            <summary>
            Constructor for PDSACodeGenerationTemplates class
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACodeGenerationTemplates.Init">
            <summary>
            Initialize the list of Database Servers
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACodeGenerationTemplates.CreateListFromXmlString(System.String)">
            <summary>
            Create a list of code generation templates from an XML string
            </summary>
            <param name="xml">An XML string of database servers</param>
            <returns>A List of PDSACodeGenerationTemplate objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACodeGenerationTemplates.MergeFromXMLFile(System.String)">
            <summary>
            This method will add/merge the values from the XML file into the existing collection.
            If any ID is the same, the XML file will take precendence and those values will overwrite the existing ones.
            </summary>
            <param name="xmlFileName">An XML file of information to be added/merged</param>
            <returns>A list of PDSACodeGenerationTemplate objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACodeGenerationTemplates.GetByName(System.String)">
            <summary>
            Get a PDSACodeGenerationTemplate object by locating the specific name
            </summary>
            <param name="name">The name to locate</param>
            <returns>A PDSACodeGenerationTemplate object, or null if not found</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSASQLCodeGenTemplate">
            <summary>
            Class for holding Code Generation Template information
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASQLCodeGenTemplate.#ctor">
            <summary>
            Constructor for PDSASQLCodeGenTemplate Class
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSASQLCodeGenTemplate.Id">
            <summary>
            Get/Set ID
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSASQLCodeGenTemplate.EnumName">
            <summary>
            Get/Set Enumeration Name
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSASQLCodeGenTemplate.IsAllStatement">
            <summary>
            Get/Set whether or not this template is for the 'All' statement
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSASQLCodeGenTemplate.IsSearchStatement">
            <summary>
            Get/Set whether or not this template is for the 'Search' statement
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSASQLCodeGenTemplate.CodeType">
            <summary>
            Get/Set the Code Type
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSASQLCodeGenTemplate.DBObjectTypes">
            <summary>
            Get/Set the Database Object Types this template can work with
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSASQLCodeGenTemplate.RegenOnChange">
            <summary>
            Get/Set whether or not to regenerate this statement when something changes
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSASQLCodeGenTemplate.SQLFileName">
            <summary>
            Get/Set the SQL File used to generate this statement
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSASQLCodeGenTemplate.SQLTemplateText">
            <summary>
            Get/Set the Template Text read from the SQL File Name
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSASQLCodeGenTemplate.SPFileName">
            <summary>
            Get/Set the Stored Proc File used to generate this statement
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSASQLCodeGenTemplate.SPTemplateText">
            <summary>
            Get/Set the Template Text read from the Stored Proc File Name
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSASQLCodeGenTemplate.SPPrefix">
            <summary>
            Get/Set the Stored Procedure Prefix
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSASQLCodeGenTemplate.SPSuffix">
            <summary>
            Get/Set the stored procedure suffix
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSASQLCodeGenTemplate.IsConcurrencyUpdate">
            <summary>
            Get/Set whether or not this statement uses the IsConcurrencyUpdate
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASQLCodeGenTemplate.Copy">
            <summary>
            Copy the current SQL Code Generation Template object to a new instance
            </summary>
            <returns>A PDSASQLCodeGenTemplate object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASQLCodeGenTemplate.LoadTemplateText(System.String)">
            <summary>
            Load template text
            </summary>
            <param name="filePath">The path where the file is located</param>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASQLCodeGenTemplate.ToString">
            <summary>
            Override of ToString Method
            </summary>
            <returns>Enum Name</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSASQLCodeGenTemplates">
            <summary>
            Collection class of PDSASQLCodeGenTemplate objects
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASQLCodeGenTemplates.#ctor">
            <summary>
            Constructor for PDSASQLCodeGenTemplates class
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASQLCodeGenTemplates.Init">
            <summary>
            Initialize the list of SQL Code Gen Templates
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASQLCodeGenTemplates.CreateListFromXmlString(System.String)">
            <summary>
            Create a list of SQL Code Generation Templates from an XML string
            </summary>
            <param name="xml">An XML string of SQL Code Generation Templates</param>
            <returns>A List of PDSASQLCodeGenTemplate objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASQLCodeGenTemplates.MergeFromXMLFile(System.String)">
            <summary>
            This method will add/merge the values from the XML file into the existing collection.
            If any ID is the same, the XML file will take precendence and those values will overwrite the existing ones.
            </summary>
            <param name="xmlFileName">An XML file of information to be added/merged</param>
            <returns>A list of PDSASQLCodeGenTemplate objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASQLCodeGenTemplates.GetAllByCodeTypeAndDBObjectType(System.String,System.String)">
            <summary>
            Get a collection of PDSASQLCodeGenTemplate objects by Code Type and DB Object Type
            </summary>
            <param name="codeType">A Code Type</param>
            <param name="dbObjectType">A DB Object Type</param>
            <returns>A Collection of PDSASQLCodeGenTemplate objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASQLCodeGenTemplates.GetByCodeTypeAndIsAllFlag(System.String,System.String,System.Boolean)">
            <summary>
            Return a PDSASQLCodeGenTemplate object by Code Type, EnumName and IsAllFlag
            </summary>
            <param name="codeType">Code Type</param>
            <param name="enumName">Enum Name</param>
            <param name="isAllFlag">Is All Flag</param>
            <returns>A PDSASQLCodeGenTemplate object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASQLCodeGenTemplates.GetByCodeTypeAndIsSearchFlag(System.String,System.Boolean)">
            <summary>
            Return a PDSASQLCodeGenTemplate object by Code Type and IsSearchFlag
            </summary>
            <param name="codeType">Code Type</param>
            <param name="isSearchFlag">Is All Flag</param>
            <returns>A PDSASQLCodeGenTemplate object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASQLCodeGenTemplates.GetAllByCodeTypeDBObjectTypeAndRegenOnChange(System.String,System.String,System.Boolean)">
            <summary>
            Get a collection of PDSASQLCodeGenTemplate objects by Code Type and DB Object Type 
            </summary>
            <param name="codeType">Code Type</param>
            <param name="dbObjectType">DB Object Type</param>
            <param name="regenOnChange">Regen On Change Flag</param>
            <returns>A collection of PDSASQLCodeGenTemplate objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASQLCodeGenTemplates.GetByEnumName(System.String)">
            <summary>
            Get by Enum Name
            </summary>
            <param name="enumName">Enum name</param>
            <returns>A PDSASQLCodeGenTemplate object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASQLCodeGenTemplates.GetById(System.Int32)">
            <summary>
            Get by ID
            </summary>
            <param name="id">An ID</param>
            <returns>A PDSASQLCodeGenTemplate object</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSATemplateGroup">
            <summary>
            Class to work with Template Groups for C# and Visual Basic
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSATemplateGroup.#ctor">
            <summary>
            Constructor for PDSATemplateGroup Class
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSATemplateGroup.GroupId">
            <summary>
            Get/Set the Group ID
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSATemplateGroup.GroupName">
            <summary>
            Get/Set the Group Name
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSATemplateGroup.TemplateFileName">
            <summary>
            Get/Set the Template File Name
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSATemplateGroup.ProjectId">
            <summary>
            Get/Set the Project ID
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSATemplateGroup.IsVisible">
            <summary>
            Get/Set IsVisible
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSATemplateGroup.IsRequired">
            <summary>
            Get/Set IsRequired
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSATemplateGroup.Copy">
            <summary>
            Copy the current Template Group object to a new instance
            </summary>
            <returns>A PDSATemplateGroup object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSATemplateGroup.ToString">
            <summary>
            The ToString Override. Returns the GroupName Property
            </summary>
            <returns>GroupName</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSATemplateGroups">
            <summary>
            Collection class of PDSA Template Group objects
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSATemplateGroups.#ctor">
            <summary>
            Constructor for PDSATemplateGroups class
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSATemplateGroups.Init">
            <summary>
            Initialize the list of Template Groups
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSATemplateGroups.CreateListFromXmlString(System.String)">
            <summary>
            Create a list of Template Groups from an XML string
            </summary>
            <param name="xml">An XML string of Template Groups</param>
            <returns>A List of PDSATemplateGroup objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSATemplateGroups.MergeFromXMLFile(System.String)">
            <summary>
            This method will add/merge the values from the XML file into the existing collection.
            If any ID is the same, the XML file will take precendence and those values will overwrite the existing ones.
            </summary>
            <param name="xmlFileName">An XML file of information to be added/merged</param>
            <returns>A list of PDSATemplateGroup objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSATemplateGroups.GetByProjectName(System.String)">
            <summary>
            Search for a specific Group Name
            </summary>
            <param name="groupName">A GroupName</param>
            <returns>A PDSATemplateGroup object</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSAUIControl">
            <summary>
            Class to hold UI Control information
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAUIControl.#ctor">
            <summary>
            Constructor for PDSAUIControl Class
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAUIControl.UIControls">
            <summary>
            Get/Set a collection of UIControl File Names
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAUIControl.Name">
            <summary>
            Get/Set a Name for this UI Control
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAUIControl.ControlFileName">
            <summary>
            Get/Set the UI Control File Name
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAUIControl.Copy">
            <summary>
            Copy the current UI Control object to a new instance
            </summary>
            <returns>A PDSAUIControl object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAUIControl.ToString">
            <summary>
            Override of ToString(). Returns Name property
            </summary>
            <returns>Name</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSAUIControlFile">
            <summary>
            Class used for keeping track of the UI Control Files
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAUIControlFile.#ctor">
            <summary>
            Constructor for PDSAUIControlFile Class
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAUIControlFile.DotNetType">
            <summary>
            Get/Set the .NET data type to use this control with
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAUIControlFile.TemplateSubFolder">
            <summary>
            Get/Set the folder where this template is located
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAUIControlFile.ControlFileName">
            <summary>
            Get/Set the Control File Name
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAUIControlFile.PropertyName">
            <summary>
            Get/Set the Property Name
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAUIControlFile.ControlPrefix">
            <summary>
            Get/Set the Control Prefix
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAUIControlFile.ControlSuffix">
            <summary>
            Get/Set the Control Suffix
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAUIControlFile.IsDefault">
            <summary>
            Get/Set whether or not this control file is the default
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAUIControlFile.Copy">
            <summary>
            Copy the current UI Control File object to a new instance
            </summary>
            <returns>A PDSAUIControlFile object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAUIControlFile.ToString">
            <summary>
            Override to ToString(). Returns DotNetType property
            </summary>
            <returns>DotNetType</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSAUIControlFiles">
            <summary>
            Collection class of UI Control File objects
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAUIControlFiles.#ctor">
            <summary>
            Constructor for PDSAUIControlFiles class
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAUIControlFiles.Init">
            <summary>
            Initialize the list of UI Control Files
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAUIControlFiles.CreateListFromXmlString(System.String)">
            <summary>
            Create a list of UI Control Files from an XML string
            </summary>
            <param name="xml">An XML string of UI Control Files</param>
            <returns>A List of PDSAUIControlFile objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAUIControlFiles.MergeFromXMLFile(System.String)">
            <summary>
            This method will add/merge the values from the XML file into the existing collection.
            If any ID is the same, the XML file will take precendence and those values will overwrite the existing ones.
            </summary>
            <param name="xmlFileName">An XML file of information to be added/merged</param>
            <returns>A list of PDSAUIControlFile objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAUIControlFiles.GetByDotNetType(System.String)">
            <summary>
            Get a PDSAUIControlFile object by locating the specific .NET type
            </summary>
            <param name="type">The .NET Type to locate</param>
            <returns>A PDSAUIControlFile object, or null if not found</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSAUIControls">
            <summary>
            Collection class of UI Control objects
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAUIControls.#ctor">
            <summary>
            Constructor for PDSAUIControls class
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAUIControls.Init">
            <summary>
            Initialize the list of UI Controls
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAUIControls.CreateListFromXmlString(System.String)">
            <summary>
            Create a list of UI Controls from an XML string
            </summary>
            <param name="xml">An XML string of UI Controls</param>
            <returns>A List of PDSAUIControl objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAUIControls.MergeFromXMLFile(System.String)">
            <summary>
            This method will add/merge the values from the XML file into the existing collection.
            If any ID is the same, the XML file will take precendence and those values will overwrite the existing ones.
            </summary>
            <param name="xmlFileName">An XML file of information to be added/merged</param>
            <returns>A list of PDSAUIControl objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAUIControls.GetByName(System.String)">
            <summary>
            Get a PDSAUIControl object by locating the specific name
            </summary>
            <param name="name">The name to locate</param>
            <returns>A PDSAUIControl object, or null if not found</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSACopyAfterGen">
            <summary>
            Class to hold a Folder to copy after generation
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACopyAfterGen.#ctor">
            <summary>
            Constructor for PDSACopyAfterGen Class
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACopyAfterGen.CopyFrom">
            <summary>
            Get/Set CopyFrom
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSACopyAfterGen.CopyTo">
            <summary>
            Get/Set CopyTo
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACopyAfterGen.Copy">
            <summary>
            Copy the current CopyAfterGen object to a new instance
            </summary>
            <returns>A PDSACopyAfterGen object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACopyAfterGen.ToString">
            <summary>
            Override of ToString to return the Copy From
            </summary>
            <returns>The Copy From</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSACopyAfterGens">
            <summary>
            Collection class of Copy After Gen Objects
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACopyAfterGens.#ctor">
            <summary>
            Constructor for PDSACopyAfterGens class
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACopyAfterGens.Init">
            <summary>
            Initialize the list of Copy After Gen objects
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACopyAfterGens.CreateListFromXmlString(System.String)">
            <summary>
            Create a list of copy after gen from an XML string
            </summary>
            <param name="xml">An XML string of copy after generation</param>
            <returns>A List of PDSACopyAfterGen objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSACopyAfterGens.MergeFromXMLFile(System.String)">
            <summary>
            This method will add/merge the values from the XML file into the existing collection.
            If any CopyFrom element is the same, the XML file will take precendence and those values will overwrite the existing ones.
            </summary>
            <param name="xmlFileName">An XML file of information to be added/merged</param>
            <returns>A list of PDSACopyAfterGen objects</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSADatabaseServer">
            <summary>
            Class to hold a list of database servers
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADatabaseServer.#ctor">
            <summary>
            Constructor for PDSADatabaseServer Class
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADatabaseServer.ServerId">
            <summary>
            Get/Set the Server Id of the database server
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADatabaseServer.Name">
            <summary>
            Get/Set the name of the database server
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADatabaseServer.ProviderName">
            <summary>
            Get/Set the Provider Name to use to connect to the database server
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADatabaseServer.DBDataTypesFile">
            <summary>
            Get/Set the name of the XML file of additional data types for this database server
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADatabaseServer.DBDataTypesExcludeFile">
            <summary>
            Get/Set the name of the XML file that holds the DB Data Types to Exclude from code generation
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADatabaseServer.SPSettingsFile">
            <summary>
            Get/Set the name of the XML file that holds Stored Procedure settings for this database server
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADatabaseServer.TemplatesFile">
            <summary>
            Get/Set the name of the database template file
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADatabaseServer.TemplatesPath">
            <summary>
            Get/Set the path of where the templates are located
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADatabaseServer.PackageSpecTemplateFile">
            <summary>
            Get/Set the Package specification template file for Oracle
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADatabaseServer.PackageBodyTemplateFile">
            <summary>
            Get/Set the Package Body specification template file for Oracle
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADatabaseServer.PackageSuffix">
            <summary>
            Get/Set the Package suffix for Oracle
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADatabaseServer.SPBlankFile">
            <summary>
            Get/Set the file name for a blank stored procedure template
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADatabaseServer.DefaultDataType">
            <summary>
            Get/Set the Default Data Type for this database
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADatabaseServer.MaxKeyword">
            <summary>
            Get/Set the 'MAX' keyword for this database
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADatabaseServer.CommandParameterPrefix">
            <summary>
            Get/Set the prefix for any .NET command objects to use to pass parameters to a stored procedure
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADatabaseServer.SPParameterPrefix">
            <summary>
            Get/Set the prefix for any parameters passed to a stored procedure
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADatabaseServer.NameOfReturnValueParam">
            <summary>
            Get/Set the name of the Return Value output parameter from a stored procedure
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADatabaseServer.AndOperator">
            <summary>
            Get/Set the And operator for this database
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADatabaseServer.OrOperator">
            <summary>
            Get/Set the Or operator for this database
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADatabaseServer.UsePackageName">
            <summary>
            Get/Set whether or not to use the package name when calling a stored procedure
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADatabaseServer.AllowSPGeneration">
            <summary>
            Get/Set whether or not to allow stored procedure generation
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADatabaseServer.UsePrecisionScale">
            <summary>
            Get/Set whether or not to use Precision and Scale when figuring out the .NET data type
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADatabaseServer.Copy">
            <summary>
            Copy the current Database Server object to a new instance
            </summary>
            <returns>A PDSADatabaseServer object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADatabaseServer.GetBlankSPFileContents(System.String)">
            <summary>
            Override this method to load the Blank Stored Procedure file
            </summary>
            <param name="filePath">Path for blank Stored Proc File</param>
            <returns>The blank SP template</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADatabaseServer.ToString">
            <summary>
            Override of ToString to return the Database Name
            </summary>
            <returns>The Database name</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSADatabaseServers">
            <summary>
            Collection class of Database Servers
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADatabaseServers.#ctor">
            <summary>
            Constructor for PDSADatabaseServers class
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADatabaseServers.Init">
            <summary>
            Initialize the list of Database Servers
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADatabaseServers.CreateListFromXmlString(System.String)">
            <summary>
            Create a list of database servers from an XML string
            </summary>
            <param name="xml">An XML string of database servers</param>
            <returns>A List of PDSADatabaseServer objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADatabaseServers.MergeFromXMLFile(System.String)">
            <summary>
            This method will add/merge the values from the XML file into the existing collection.
            If any ID is the same, the XML file will take precendence and those values will overwrite the existing ones.
            </summary>
            <param name="xmlFileName">An XML file of information to be added/merged</param>
            <returns>A list of PDSADatabaseServer objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADatabaseServers.GetById(System.Int32)">
            <summary>
            Get a PDSADatabaseServer object by locating the specific ID
            </summary>
            <param name="id">The ID to locate</param>
            <returns>A PDSADatabase Server object, or null if not found</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADatabaseServers.GetByName(System.String)">
            <summary>
            Get a PDSADatabaseServer object by locating the specific name
            </summary>
            <param name="name">The name to locate</param>
            <returns>A PDSADatabase Server object, or null if not found</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADatabaseServers.GetByProviderName(System.String)">
            <summary>
            Get a PDSADatabaseServer object by locating the specific provider name
            </summary>
            <param name="providerName">The provider name to locate</param>
            <returns>A PDSADatabase Server object, or null if not found</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSADBDataType">
            <summary>
            This class holds database data type information
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataType.#ctor">
            <summary>
            Constructor for PDSADBDataType Class
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataType.ServerId">
            <summary>
            Get/Set ServerId
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataType.DBType">
            <summary>
            Get/Set the database DBType
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataType.DotNetType">
            <summary>
            Get/Set the corresponding .NET data type for this database DBType
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataType.DbTypeEnum">
            <summary>
            Get/Set the string representation of the DbTypeEnum
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataType.DatabaseDataTypeEnum">
            <summary>
            Get/Set the string representation of the DatabaseDataTypeEnum
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataType.DbTypeForNull">
            <summary>
            Get/Set the DbType used for null
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataType.GenericType">
            <summary>
            Get/Set the generic type for the real data type
            Examples are 'String', 'Numeric', 'Boolean', etc.
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataType.TypeNumber">
            <summary>
            Get/Set the Type Number from the database server
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataType.MaxLength">
            <summary>
            Get/Set the Maximum length for this data type (if applicable)
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataType.Precision">
            <summary>
            Get/Set the Precision for this data type (if applicable)
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataType.MinScale">
            <summary>
            Get/Set the Minimum scale for this data type (if applicable)
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataType.MaxScale">
            <summary>
            Get/Set the Maximum scale for this data type (if applicable)
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataType.UsePrecisionAndScaleForMinMax">
            <summary>
            Get/Set where or not to use Precision and Scale for Min/Max for this data type (if applicable)
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataType.DefaultValue">
            <summary>
            Get/Set the default value to use for this data type
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataType.UseMaxLength">
            <summary>
            Get/Set whether or not to use maximum length with this data type
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataType.IsNullable">
            <summary>
            Get/Set whether or not this type can be nullable
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataType.IncludeSize">
            <summary>
            Get/Set whether or not to include the size when writing out this data type
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataType.IsInsertable">
            <summary>
            Get/Set whether or not this field is insertable
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataType.IsUpdatable">
            <summary>
            Get/Set whether or not this field is updatable
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataType.DisplayInGrid">
            <summary>
            Get/Set whether or not to display this field in a grid
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataType.DisplayInEdit">
            <summary>
            Get/Set whether or not to display this field in an edit form
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataType.IncludeInAuditTracking">
            <summary>
            Get/Set whether or not to include this data type in audit tracking
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataType.Copy">
            <summary>
            Copy the current DB Data Type object to a new instance
            </summary>
            <returns>A PDSADBDataType object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataType.GetDbTypeEnum">
            <summary>
            Return an actual DbType enumeration for the value set in the DbTypeEnum string property
            </summary>
            <returns>A DbType enumeration</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataType.ToString">
            <summary>
            Override of ToString to return the DBType
            </summary>
            <returns>DBType</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSADBDataTypeExcludes">
            <summary>
            Class to hold a list of data types to exclude from code generation
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypeExcludes.#ctor">
            <summary>
            Constructor for PDSADBDataTypeExcludes Class
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataTypeExcludes.Id">
            <summary>
            Get/Set the Data Type ID
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataTypeExcludes.DataType">
            <summary>
            Get/Set the Data Type to exclude
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataTypeExcludes.IsSelectable">
            <summary>
            Get/Set whether or not this data type can be used in a SELECT statement
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataTypeExcludes.IsInsertable">
            <summary>
            Get/Set whether or not this data type can be used in a INSERT statement
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADBDataTypeExcludes.IsUpdatable">
            <summary>
            Get/Set whether or not this data type can be used in a UPDATE statement
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypeExcludes.Copy">
            <summary>
            Copy the current DB DataType to Exclude object to a new instance
            </summary>
            <returns>A PDSADBDataTypeExcludes object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypeExcludes.ToString">
            <summary>
            Override of ToString to return the DataType + (Id)
            </summary>
            <returns>DataType + (Id)</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSADBDataTypes">
            <summary>
            Collection class of PDSADBDataType objects
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypes.#ctor">
            <summary>
            Constructor for PDSADBDataTypes class
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypes.#ctor(System.String)">
            <summary>
            Constructor for PDSADBDataTypes class
            </summary>
            <param name="serverName">Pass in the name of the database server of the types you wish to retrieve</param>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypes.Init">
            <summary>
            Initialize the list of Database Data Types
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypes.SqlServerInit">
            <summary>
            Initialize the list of SQL Server Database Data Types
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypes.OracleInit">
            <summary>
            Initialize the list of Oracle Database Data Types
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypes.CreateListFromXmlString(System.String)">
            <summary>
            Create a list of database data types from an XML string
            </summary>
            <param name="xml">An XML string of database data types</param>
            <returns>A List of PDSADBDataType objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypes.MergeFromXMLFile(System.String)">
            <summary>
            This method will add/merge the values from the XML file into the existing collection.
            If any ID is the same, the XML file will take precendence and those values will overwrite the existing ones.
            </summary>
            <param name="xmlFileName">An XML file of information to be added/merged</param>
            <returns>A list of PDSADBDataType objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypes.GetByDBType(PDSA.DataLayer.Schema.PDSASchemaColumn)">
            <summary>
            Pass in a PDSASchemaColumn and this method will attempt to find the corresponding
            PDSADBDataType object in the collection that matches the DataType from the Database
            </summary>
            <param name="schemaColumn">An instance of a PDSASchemaColumn object</param>
            <returns>A PDSADBDataType or null if not found</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypes.GetByDBType(PDSA.DataLayer.Schema.PDSASchemaStoredProcParameter)">
            <summary>
            Pass in a PDSASchemaStoredProcParameter and this method will attempt to find the corresponding
            PDSADBDataType object in the collection that matches the schema parameter data type
            </summary>
            <param name="schemaParam">An instance of a PDSASchemaStoredProcParameter object</param>
            <returns>A PDSADBDataType or null if not found</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypes.GetByDBType(System.String)">
            <summary>
            Pass in a string of a database type and this method will attempt to find the corresponding
            PDSADBDataType object in the collection that matches the type passed in
            </summary>
            <param name="dbType">A valid database type</param>
            <returns>A PDSADBDataType or null if not found</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypes.GetByDBType(System.String,System.Int32,System.Int32)">
            <summary>
            Pass in a string of a database type and this method will attempt to find the corresponding
            PDSADBDataType object in the collection that matches the type passed in
            </summary>
            <param name="dbType">A valid database type</param>
            <param name="precision">The numeric precision of the type</param>
            <param name="scale">The numeric scale of the type</param>
            <returns>A PDSADBDataType or null if not found</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypes.GetByDotNetType(System.String)">
            <summary>
            Search for a PDSADBDataType that matches the .NET data type passed in
            </summary>
            <param name="dotNetType">A .NET data type such as Int32, Boolean, etc.</param>
            <returns>A PDSADBDataType or null if not found</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSADBDataTypesExcludes">
            <summary>
            Collection class of Data Types to Exclude
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypesExcludes.#ctor">
            <summary>
            Constructor for PDSADBDataTypesExcludes class
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypesExcludes.Init">
            <summary>
            Initialize the list of Data Types to Exclude
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypesExcludes.SqlServerInit">
            <summary>
            Initialize the list of SQL Server Data Types to Exclude
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypesExcludes.OracleInit">
            <summary>
            Initialize the list of Oracle Data Types to Exclude
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypesExcludes.CreateListFromXmlString(System.String)">
            <summary>
            Create a list of database data types to exclude from an XML string
            </summary>
            <param name="xml">An XML string of database data types to exclude</param>
            <returns>A List of PDSADBDataTypeExcludes objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypesExcludes.MergeFromXMLFile(System.String)">
            <summary>
            This method will add/merge the values from the XML file into the existing collection.
            If any ID is the same, the XML file will take precendence and those values will overwrite the existing ones.
            </summary>
            <param name="xmlFileName">An XML file of information to be added/merged</param>
            <returns>A list of PDSADBDataTypeExcludes objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypesExcludes.GetByDBType(System.String)">
            <summary>
            Search for a specific database data type to exclude
            </summary>
            <param name="dbType">A database data type</param>
            <returns>A PDSADBDataTypeExcludes object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADBDataTypesExcludes.GetById(System.Int32)">
            <summary>
            Search for a specific database data type to exclude
            </summary>
            <param name="id">A database data type to exclude unique id</param>
            <returns>A PDSADBDataTypeExcludes object</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSADotNetType">
            <summary>
            Class to hold information about .NET Data types
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADotNetType.#ctor">
            <summary>
            Constructor for PDSADotNetType Class
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADotNetType.DotNetType">
            <summary>
            Get/Set the .NET Data Type
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADotNetType.LanguageType">
            <summary>
            Get/Set the actual .NET language type
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADotNetType.NullableLanguageType">
            <summary>
            Get/Set the actual .NET language type used for Nullable
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADotNetType.GenericType">
            <summary>
            Get/Set the generic type such as 'String', 'Numeric', 'Boolean', etc.
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADotNetType.SearchOperator">
            <summary>
            Get/Set the Search Operator for this data type when used in a WHERE clause.
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADotNetType.SearchWildCard">
            <summary>
            Get/Set the search wild card to use with this data type when used in a WHERE clause
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADotNetType.Prefix">
            <summary>
            Get/Set the Prefix (if any) to use with this data type
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADotNetType.IsNullableType">
            <summary>
            Get/Set whether or not this data type can be a .NET Nullable type
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADotNetType.DefaultValue">
            <summary>
            Get/Set the default value for this data type
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADotNetType.ValueForNull">
            <summary>
            Get/Set the value to be used when null is read in from the database
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADotNetType.ValueForNullAsString">
            <summary>
            Get/Set the value to be used when null is read in from the database as a string
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADotNetType.ConvertMethod">
            <summary>
            Get/Set the .NET Convert method to use to convert from the result set into the .NET data type
            Example: Convert.ToString, Convert.ToDateTime
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSADotNetType.GetNetTypeMethod">
            <summary>
            Get/Set the PDSA method name to be used to return this data type. Examples are GetAsDate(), GetAsInteger(), etc.
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADotNetType.Copy">
            <summary>
            Copy the current DotNetType object to a new instance
            </summary>
            <returns>A PDSADotNetType object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADotNetType.ToString">
            <summary>
            Override of ToString to return the LanguageType + (DotNetType)
            </summary>
            <returns>LanguageType + (DotNetType)</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSADotNetTypes">
            <summary>
            Collection class of PDSADotNetType objects
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADotNetTypes.#ctor">
            <summary>
            Constructor for PDSADotNetTypes class
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADotNetTypes.Init">
            <summary>
            Initialize the list of .NET Types
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADotNetTypes.CSharpInit">
            <summary>
            Initialize the list of C# .NET Types
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADotNetTypes.VisualBasicInit">
            <summary>
            Initialize the list of VB .NET Types
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADotNetTypes.CreateListFromXmlString(System.String)">
            <summary>
            Create a list of .NET data types from an XML string
            </summary>
            <param name="xml">An XML string of .NET data types</param>
            <returns>A List of PDSADotNetType objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADotNetTypes.MergeFromXMLFile(System.String)">
            <summary>
            This method will add/merge the values from the XML file into the existing collection.
            If any ID is the same, the XML file will take precendence and those values will overwrite the existing ones.
            </summary>
            <param name="xmlFileName">An XML file of information to be added/merged</param>
            <returns>A list of PDSADotNetType objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSADotNetTypes.GetByDotNetType(System.String)">
            <summary>
            Search for a specific .NET Type by the name
            </summary>
            <param name="dotNetType">A .NET type such as Int32, Boolean, etc.</param>
            <returns>A PDSADotNetType object</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSALanguage">
            <summary>
            Class to hold a Language for generation
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSALanguage.#ctor">
            <summary>
            Constructor for PDSALanguage Class
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSALanguage.Name">
            <summary>
            Get/Set the language name
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSALanguage.Code">
            <summary>
            Get/Set the Language Code
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSALanguage.DotNetTypesFile">
            <summary>
            Get/Set an XML file that contains a list of .NET Data Types for this language
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSALanguage.TemplateGroupFile">
            <summary>
            Get/Set an XML File of Template groups for this language
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSALanguage.Self">
            <summary>
            Get/Set the keyword in the language to refer to an object. 
            Example: C# is 'this', VB is 'Me'
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSALanguage.NullToken">
            <summary>
            Get/Set the keyword used to represent the abscence of data
            C# = null, VB = Nothing
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSALanguage.TrueValue">
            <summary>
            Get/Set the keyword used to represent true in the language
            C#=true, VB=True
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSALanguage.FalseValue">
            <summary>
            Get/Set the keyword used to represent false in the language
            C#=false, VB=False
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSALanguage.LineEnding">
            <summary>
            Get/Set the token used to represent the end of a line of code in the language
            C#=; VB=
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSALanguage.Comment">
            <summary>
            Get/Set the token used to represent a comment in the language
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSALanguage.And">
            <summary>
            Get/Set the token used to represent a logical And in the language
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSALanguage.Or">
            <summary>
            Get/Set the token used to represent a logical Or in the language
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSALanguage.Concatenation">
            <summary>
            Get/Set the token used to concatenate two strings together in the language
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSALanguage.NullablePattern">
            <summary>
            Get/Set the token used to represent a nullable data type in the language
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSALanguage.SystemTypeOf">
            <summary>
            Get/Set the keyword used to get the type of a datatype in the language
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSALanguage.ColumnAttributes">
            <summary>
            Get/Set the token used to represent serialization attributes for property in a language
            Example would be [DataMember] or &lt;DataMember&gt;
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSALanguage.Copy">
            <summary>
            Copy the current Language object to a new instance
            </summary>
            <returns>A PDSALanguage object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSALanguage.ToString">
            <summary>
            Override of ToString to return the Language Name
            </summary>
            <returns>The language name</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSALanguages">
            <summary>
            Class to hold list of languages for code generation
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSALanguages.#ctor">
            <summary>
            Constructor for PDSALanguages class
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSALanguages.Init">
            <summary>
            Initialize the list of languages
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSALanguages.CreateListFromXmlString(System.String)">
            <summary>
            Create a list of languages from an XML string
            </summary>
            <param name="xml">An XML string of languages</param>
            <returns>A List of PDSALanguage objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSALanguages.MergeFromXMLFile(System.String)">
            <summary>
            This method will add/merge the values from the XML file into the existing collection. 
            If any LanguageCode is the same, the XML file will take precendence and those values will overwrite the existing ones.
            </summary>
            <param name="xmlFileName">An XML file of information to be added/merged</param>
            <returns>A list of PDSALanguage objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSALanguages.GetByLanguageCode(System.String)">
            <summary>
            Find a specific language code in the list and return a PDSALanguage object or Null if not found
            </summary>
            <param name="languageCode">The language code to locate</param>
            <returns>A PDSALanguage object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSALanguages.GetByLanguageName(System.String)">
            <summary>
            Find a specific language name in the list and return a PDSALanguage object or Null if not found
            </summary>
            <param name="languageName">The language name to find</param>
            <returns>A PDSALanguage object</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSAPrefix">
            <summary>
            Class to hold information about Prefixes to strip from database data types
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAPrefix.#ctor">
            <summary>
            Constructor for PDSAPrefix Class
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAPrefix.PrefixToStrip">
            <summary>
            Get/Set the Prefix to strip
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAPrefix.Copy">
            <summary>
            Copy the current Prefix object to a new instance
            </summary>
            <returns>A PDSAPrefix object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAPrefix.ToString">
            <summary>
            Override of the ToString method to return the PrefixToStrip property
            </summary>
            <returns>PrefixToStrip</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSAPrefixes">
            <summary>
            Collection class of PDSAPrefix objects
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAPrefixes.#ctor">
            <summary>
            Constructor for PDSAPrefixes class
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAPrefixes.Init">
            <summary>
            Initialize the list of Prefixes
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAPrefixes.CreateListFromXmlString(System.String)">
            <summary>
            Create a list of Prefixes from an XML string
            </summary>
            <param name="xml">An XML string of Prefixes</param>
            <returns>A List of PDSAPrefix objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAPrefixes.MergeFromXMLFile(System.String)">
            <summary>
            This method will add/merge the values from the XML file into the existing collection.
            If any ID is the same, the XML file will take precendence and those values will overwrite the existing ones.
            </summary>
            <param name="xmlFileName">An XML file of information to be added/merged</param>
            <returns>A list of PDSAPrefix objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAPrefixes.GetByPrefix(System.String)">
            <summary>
            Search for a specific prefix
            </summary>
            <param name="prefix">A Prefix</param>
            <returns>A PDSAPrefix object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAPrefixes.FixColumn(System.String)">
            <summary>
            Fix a column that might have a prefix
            </summary>
            <param name="columnName">The column to fix</param>
            <returns>A new column</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSAProjectType">
            <summary>
            Class for working with Project Types
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAProjectType.#ctor">
            <summary>
            Constructor for PDSAProjectType Class
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAProjectType.ProjectId">
            <summary>
            Get/Set the Project ID
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAProjectType.ProjectName">
            <summary>
            Get/Set the Project Name
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAProjectType.IsIncluded">
            <summary>
            Get/Set whether or not this project type is included
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAProjectType.Copy">
            <summary>
            Copy the current Project Type object to a new instance
            </summary>
            <returns>A PDSAProjectType object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAProjectType.ToString">
            <summary>
            Override of ToString method to return ProjectName property
            </summary>
            <returns>ProjectName property</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSAProjectTypes">
            <summary>
            Collection class of PDSA Project Type objects
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAProjectTypes.#ctor">
            <summary>
            Constructor for PDSAProjectTypes class
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAProjectTypes.Init">
            <summary>
            Initialize the list of Project Types
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAProjectTypes.CreateListFromXmlString(System.String)">
            <summary>
            Create a list of Project Types from an XML string
            </summary>
            <param name="xml">An XML string of Project Types</param>
            <returns>A List of PDSAProjectType objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAProjectTypes.MergeFromXMLFile(System.String)">
            <summary>
            This method will add/merge the values from the XML file into the existing collection.
            If any ID is the same, the XML file will take precendence and those values will overwrite the existing ones.
            </summary>
            <param name="xmlFileName">An XML file of information to be added/merged</param>
            <returns>A list of PDSAProjectType objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAProjectTypes.GetByProjectId(System.Int32)">
            <summary>
            Search for a specific Project ID
            </summary>
            <param name="projectId">A ProjectId</param>
            <returns>A PDSAProjectType object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAProjectTypes.GetByProjectName(System.String)">
            <summary>
            Search for a specific Project Name
            </summary>
            <param name="projectName">A ProjectName</param>
            <returns>A PDSAProjectType object</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSARegularExpression">
            <summary>
            Class for working with Regular Expressions
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSARegularExpression.#ctor">
            <summary>
            Constructor for PDSARegularExpression Class
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSARegularExpression.Description">
            <summary>
            Get/Set the Regular Expression Description
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSARegularExpression.Expression">
            <summary>
            Get/Set the Regular Expression
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSARegularExpression.NamesToMatch">
            <summary>
            Get/Set the Names to Match
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSARegularExpression.Copy">
            <summary>
            Copy the current Prefix object to a new instance
            </summary>
            <returns>A PDSAPrefix object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSARegularExpression.ToString">
            <summary>
            The ToString override. Returns Description
            </summary>
            <returns>The Description Property</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSARegularExpressions">
            <summary>
            Collection class of PDSA Regular Expression objects
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSARegularExpressions.#ctor">
            <summary>
            Constructor for PDSARegularExpressions class
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSARegularExpressions.Init">
            <summary>
            Initialize the list of Project Types
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSARegularExpressions.CreateListFromXmlString(System.String)">
            <summary>
            Create a list of Project Types from an XML string
            </summary>
            <param name="xml">An XML string of Project Types</param>
            <returns>A List of PDSARegularExpression objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSARegularExpressions.MergeFromXMLFile(System.String)">
            <summary>
            This method will add/merge the values from the XML file into the existing collection.
            If any ID is the same, the XML file will take precendence and those values will overwrite the existing ones.
            </summary>
            <param name="xmlFileName">An XML file of information to be added/merged</param>
            <returns>A list of PDSARegularExpression objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSARegularExpressions.GetByDescription(System.String)">
            <summary>
            Search for a specific Description
            </summary>
            <param name="description">A Description</param>
            <returns>A PDSARegularExpression object</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSAReservedWord">
            <summary>
            Class to hold information about Reserved Words
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAReservedWord.#ctor">
            <summary>
            Constructor for PDSAReservedWord Class
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAReservedWord.Word">
            <summary>
            Get/Set the reserved word
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAReservedWord.ReplaceWith">
            <summary>
            Get/Set the value to replace the reserved word with
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAReservedWord.Copy">
            <summary>
            Copy the current Reserved Word object to a new instance
            </summary>
            <returns>A PDSAReservedWord object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAReservedWord.ToString">
            <summary>
            Override of ToString to return the Word
            </summary>
            <returns>The Reserved Word</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSAReservedWords">
            <summary>
            Collection class of PDSAReservedWord objects
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAReservedWords.#ctor">
            <summary>
            Constructor for PDSAReservedWords class
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAReservedWords.Init">
            <summary>
            Initialize the list of Reserved Words
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAReservedWords.CreateListFromXmlString(System.String)">
            <summary>
            Create a list of Reserved Words from an XML string
            </summary>
            <param name="xml">An XML string of Reserved Words</param>
            <returns>A List of PDSAReservedWord objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAReservedWords.MergeFromXMLFile(System.String)">
            <summary>
            This method will add/merge the values from the XML file into the existing collection.
            If any ID is the same, the XML file will take precendence and those values will overwrite the existing ones.
            </summary>
            <param name="xmlFileName">An XML file of information to be added/merged</param>
            <returns>A list of PDSAReservedWord objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAReservedWords.FixColumn(System.String)">
            <summary>
            Fix up column that has Reserved Word
            </summary>
            <param name="columnName">A column to check for Reserved words</param>
            <returns>A Column</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAReservedWords.GetReplacementWord(System.String)">
            <summary>
            Get Replacement word for a reserved word
            </summary>
            <param name="word">A word</param>
            <returns>A replacement word</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAReservedWords.GetByWord(System.String)">
            <summary>
            Search for a specific word
            </summary>
            <param name="word">A word to find</param>
            <returns>A PDSAReservedWord object</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSASPGenerateType">
            <summary>
            Class to hold information about what to generate for the stored procedure 
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASPGenerateType.#ctor">
            <summary>
            Constructor for PDSASPGenerateType Class
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSASPGenerateType.GenerateType">
            <summary>
            Get/Set the Generate Type of this stored procedure
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSASPGenerateType.GetColumns">
            <summary>
            Get/Set whether or not to get columns for this stored procedure
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSASPGenerateType.Parameters">
            <summary>
            Get/Set whether or not this stored procedure has parameters
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSASPGenerateType.IsDefault">
            <summary>
            Get/Set whether or not this is the default value
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASPGenerateType.Copy">
            <summary>
            Copy the current Reserved Word object to a new instance
            </summary>
            <returns>A PDSASPGenerateType object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASPGenerateType.ToString">
            <summary>
            Override of ToString to return the Word
            </summary>
            <returns>The Reserved Word</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSASPGenerateTypes">
            <summary>
            Collection class of PDSASPGenerateType objects
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASPGenerateTypes.#ctor">
            <summary>
            Constructor for PDSASPGenerateTypes class
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASPGenerateTypes.Init">
            <summary>
            Initialize the list of Stored Procedure Generation Types
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASPGenerateTypes.CreateListFromXmlString(System.String)">
            <summary>
            Create a list of Stored Procedure Generation Types from an XML string
            </summary>
            <param name="xml">An XML string of Stored Procedure Generation Types</param>
            <returns>A List of PDSASPGenerateType objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASPGenerateTypes.MergeFromXMLFile(System.String)">
            <summary>
            This method will add/merge the values from the XML file into the existing collection.
            If any ID is the same, the XML file will take precendence and those values will overwrite the existing ones.
            </summary>
            <param name="xmlFileName">An XML file of information to be added/merged</param>
            <returns>A list of PDSASPGenerateType objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASPGenerateTypes.GetByGeneratorType(System.String)">
            <summary>
            Search for SP Generator Type
            </summary>
            <param name="genType">A generator type</param>
            <returns>A PDSASPGenerateType object</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSASPSetting">
            <summary>
            Class to hold information about the current stored procedure
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASPSetting.#ctor">
            <summary>
            Constructor for PDSASPSetting Class
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSASPSetting.Id">
            <summary>
            Get/Set The Id for this SP Setting
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSASPSetting.SkipWithThisPrefix">
            <summary>
            Get/Set a value that any stored procedure with this prefix needs to be skipped when reading
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSASPSetting.RemoveSuffixAfterThisCharacter">
            <summary>
            Get/Set the character to remove any characters after in the stored procedure.
            Example: Use a semi-colon if your stored procs are named like this 'usp_GetPersons;1'
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASPSetting.Copy">
            <summary>
            Copy the current SP Setting object to a new instance
            </summary>
            <returns>A PDSASPSetting object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASPSetting.ToString">
            <summary>
            Override of ToString to return the SkipWithThisPrefix
            </summary>
            <returns>The SkipWithThisPrefix</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSASPSettings">
            <summary>
            Collection class of PDSASPSetting objects
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASPSettings.#ctor">
            <summary>
            Constructor for PDSASPSettings class
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASPSettings.Init">
            <summary>
            Initialize the list of Stored Procedure Settings
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASPSettings.SqlServerInit">
            <summary>
            Initialize the list of SQL Server Stored Procedure Settings
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASPSettings.OracleInit">
            <summary>
            Initialize the list of Oracle Stored Procedure Settings
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASPSettings.CreateListFromXmlString(System.String)">
            <summary>
            Create a list of Stored Procedure Settings from an XML string
            </summary>
            <param name="xml">An XML string of Stored Procedure Settings</param>
            <returns>A List of PDSASPSetting objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASPSettings.MergeFromXMLFile(System.String)">
            <summary>
            This method will add/merge the values from the XML file into the existing collection.
            If any ID is the same, the XML file will take precendence and those values will overwrite the existing ones.
            </summary>
            <param name="xmlFileName">An XML file of information to be added/merged</param>
            <returns>A list of PDSASPSetting objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASPSettings.GetById(System.Int32)">
            <summary>
            Search for SP Setting by ID
            </summary>
            <param name="id">An id</param>
            <returns>A PDSASPSetting Object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSASPSettings.GetBySkipPrefix(System.String)">
            <summary>
            Search for SP Setting by Skip Prefix
            </summary>
            <param name="skipPrefix">A Skip prefix</param>
            <returns>A PDSASPSetting object</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSAStandardField">
            <summary>
            Class to hold a standard field definition
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAStandardField.#ctor">
            <summary>
            Constructor for PDSAStandardField Class
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAStandardField.FieldName">
            <summary>
            Get/Set the standard field field name
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAStandardField.DefaultValue">
            <summary>
            Get/Set the value to default this field to when creating a new instance of an object
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAStandardField.IsRequired">
            <summary>
            Get/Set whether or not this field is a required field
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAStandardField.IsInsertable">
            <summary>
            Get/Set whether or not this field should be included in INSERT statements
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAStandardField.IsUpdatable">
            <summary>
            Get/Set whether or not this field should be included in UPDATE statements
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAStandardField.IsSelectable">
            <summary>
            Get/Set whether or not this field should be included in SELECT statements
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAStandardField.DisplayInGrid">
            <summary>
            Get/Set whether or not this field should be displayed on a grid
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAStandardField.DisplayInEdit">
            <summary>
            Get/Set whether or not this field should be displayed on an Edit screen
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAStandardField.ReturnInService">
            <summary>
            Get/Set whether or not this field should be returned from a service call
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAStandardField.IncludeInAuditTracking">
            <summary>
            Get/Set whether or not this field should be included in audit tracking
            </summary>
        </member>
        <member name="P:PDSA.CodeGeneration.PDSAStandardField.IsConcurrency">
            <summary>
            Get/Set whether or not this field is a Concurrency Field
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAStandardField.Copy">
            <summary>
            Copy the current Standard Field object to a new instance
            </summary>
            <returns>A PDSAStandardField object</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAStandardField.ToString">
            <summary>
            Override of ToString method - Returns Field Name
            </summary>
            <returns>Field Name</returns>
        </member>
        <member name="T:PDSA.CodeGeneration.PDSAStandardFields">
            <summary>
            Collection class of PDSAStandardField objects
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAStandardFields.#ctor">
            <summary>
            Constructor for PDSAStandardFields class
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAStandardFields.Init">
            <summary>
            Initialize the list of Standard Fields
            </summary>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAStandardFields.CreateListFromXmlString(System.String)">
            <summary>
            Create a list of Standard Fields from an XML string
            </summary>
            <param name="xml">An XML string of Standard Fields</param>
            <returns>A List of PDSAStandardField objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAStandardFields.MergeFromXMLFile(System.String)">
            <summary>
            This method will add/merge the values from the XML file into the existing collection.
            If any ID is the same, the XML file will take precendence and those values will overwrite the existing ones.
            </summary>
            <param name="xmlFileName">An XML file of information to be added/merged</param>
            <returns>A list of PDSAStandardField objects</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAStandardFields.GetByFieldName(System.String)">
            <summary>
            Get a standard field object by the field name
            </summary>
            <param name="fieldName">The field name to find</param>
            <returns>A PDSAStandardField object, or null if not found</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAStandardFields.IsStandardField(System.String)">
            <summary>
            Check to see if the passed in column name is a standard field
            </summary>
            <param name="columnName">A Column Name</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.CodeGeneration.PDSAStandardFields.IsConcurrencyField(System.String)">
            <summary>
            Check to see if the passed in column name is a concurrency field
            </summary>
            <param name="columnName">A Column Name</param>
            <returns>True or False</returns>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSADataColumn">
            <summary>
            Holds information about data fields. Usually used to create a collection of column information for data classes.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataColumn.#ctor">
            <summary>
            Constructor for the PDSADataColumn object
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataColumn.PublicPropertyName">
            <summary>
            Get/Set the Public Property name for this column
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataColumn.ColumnAlias">
            <summary>
            Get/Set an alias name for this column
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataColumn.IsSelectable">
            <summary>
            Get/Set whether or not this field can be used in a SELECT statement
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataColumn.IsConcurrencyField">
            <summary>
            Get/Set whether or not this field is used for concurrency
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataColumn.Precision">
            <summary>
            Get/Set the Precision of a numeric column
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataColumn.Scale">
            <summary>
            Get/Set the Scale of a numeric column
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataColumn.IsStandardField">
            <summary>
            Get/Set whether or not this field is a standard field
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataColumn.IsPrimaryKeyAutoNumber">
            <summary>
            Get/Set whether or not this primary key field is auto-numbered
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataColumn.GetGenericDataType">
            <summary>
            Returns a generic type for the database data type of this column
            </summary>
            <returns>PDSAGenericDBDataTypes</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataColumn.GetPropertiesAsPropertyHeaderCollection">
            <summary>
            Returns all properties in this object as a PDSAPropertyHeaders collection.
            </summary>
            <returns>A collection of PDSAPropertyHeader objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataColumn.CreateDataColumn(System.String,System.String,System.Boolean,System.Type,System.Data.DbType)">
            <summary>
            This static method is used to create a new instance of a PDSADataColumn
            </summary>
            <param name="columnName">The column name in the table</param>
            <param name="headerText">The header text or label to describe this column</param>
            <param name="isRequired">Is this column required</param>
            <param name="propertyType">The .NET property type</param>
            <param name="dbType">The database data type</param>
            <returns>A PDSADataColumn object</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataColumn.CreateDataColumn(System.String,System.String,System.Boolean,System.Type,System.Data.DbType,System.Int32)">
            <summary>
            This static method is used to create a new instance of a PDSADataColumn
            </summary>
            <param name="columnName">The column name in the table</param>
            <param name="headerText">The header text or label to describe this column</param>
            <param name="isRequired">Is this column required</param>
            <param name="propertyType">The .NET property type</param>
            <param name="dbType">The database data type</param>
            <param name="maxLength">The maximum length for this column</param>
            <returns>A PDSADataColumn object</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataColumn.CreateDataColumn(System.String,System.String,System.Boolean,System.Type,System.Data.DbType,System.Int32,System.String)">
            <summary>
            This static method is used to create a new instance of a PDSADataColumn
            </summary>
            <param name="columnName">The column name in the table</param>
            <param name="headerText">The header text or label to describe this column</param>
            <param name="isRequired">Is this column required</param>
            <param name="propertyType">The .NET property type</param>
            <param name="dbType">The database data type</param>
            <param name="maxLength">The maximum length for this column</param>
            <param name="requiredMessage">The message to return if this column is required and the value is not filled in</param>
            <returns>A PDSADataColumn object</returns>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSADataColumns">
            <summary>
            This class holds a collection of PDSADataColumn objects. This represents all of the columns in a table, view or a stored procedure.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataColumns.#ctor">
            <summary>
            Initializes the properties in this class to a valid start state
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataColumns.BusinessRuleMessages">
            <summary>
            Get/Set the collection of business rule messages that are in error for this data column
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataColumns.DBObjectName">
            <summary>
            Get/Set the database object name to which this column belongs.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataColumns.ParamPrefix">
            <summary>
            The parameter prefix to use when building parameters. For example: @ for SQL Server and : for Oracle
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataColumns.PrimaryKeyType">
            <summary>
            The type of primary key this table uses
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataColumns.ReturnNullWhenNull">
            <summary>
            Return an actual null value when the value read from the database is a null.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataColumns.IsValid">
            <summary>
            Is this data column's value correct?
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataColumns.Item(System.String)">
            <summary>
            A way to reference the collection of data columns by the column name
            </summary>
            <param name="columnName">The column to find</param>
            <returns>A PDSADataColumn object</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataColumns.GetByName(System.String)">
            <summary>
            Retrieve a specific PDSADataColumn object by the column name passed in
            </summary>
            <param name="columnName">A column name to find</param>
            <returns>A PDSADataColumn object</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataColumns.GetByPublicPropertyName(System.String)">
            <summary>
            Retrieve a specific PDSADataColumn object by the public property name passed in
            </summary>
            <param name="propertyName">A property name to find</param>
            <returns>A PDSADataColumn object</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataColumns.GetPKColumn">
            <summary>
            Gets a single primary key as a PDSADataColumn object
            </summary>
            <returns>A PDSADataColumn object</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataColumns.GetAllPKColumns">
            <summary>
            Returns an ArrayList of all primary key as PDSADataColumn objects
            </summary>
            <returns>An ArrayList of primary keys</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataColumns.GetAllStandardFields">
            <summary>
            Returns an ArrayList of all standard fields as PDSADataColumn objects
            </summary>
            <returns>An array list of all standard fields</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataColumns.CheckBusinessRules">
            <summary>
            Check all business rules from the data filled into the properties of the data class
            </summary>
            <returns>A PDSAValidationRuleStatus enumeration</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataColumns.GetBusinessRuleFailuresAsString">
            <summary>
            Returns all failed business rules as a CRLF delimited string
            </summary>
            <returns>A CRLF delimited string</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataColumns.GetBusinessRuleFailuresAsString(System.String)">
            <summary>
            Returns all failed business rules as a string delimited by the delimiter you pass in.
            </summary>
            <param name="delimiter">The delimiter to use to separate business rules</param>
            <returns>A delimited string</returns>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSADataClassBase">
            <summary>
            The base class for all Data Classes.
            </summary>  
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSADataClassBase.SB_INIT_LENGTH">
            <summary>
            The default length for all string builder objects
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassBase.#ctor">
            <summary>
            Constructor for PDSADataClassBase class. Calls the Init method
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassBase.#ctor(PDSA.DataLayer.PDSADataProvider)">
            <summary>
            Constructor for PDSADataClassBase class. Calls the Init method
            </summary>
            <param name="dataProvider">The Data provider to use for all data access</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassBase.InitAutoProperties">
            <summary>
            Initializes the auto-properties to a valid start state.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassBase.GetUserName">
            <summary>
            Get's the current user name by grabbing either the WindowsPrincipal.Identity.Name or a GenericPrincipal.Identity.Name
            </summary>
            <returns>A User Name</returns>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSADataClassBase.mProvider">
            <summary>
            The provider to use for all data access
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSADataClassBase.mCommand">
            <summary>
            The IDbCommand object used for submitting SQL to back end database
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSADataClassBase.mDBObjectName">
            <summary>
            The database object name
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSADataClassBase.mSchemaName">
            <summary>
            The schema name of this database object
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSADataClassBase.mUseStoredProcs">
            <summary>
            Whether or not to use Stored Procedures when accessing data
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSADataClassBase.mIsPrimaryKeyAutoNumber">
            <summary>
            Whether or not the Primary Key is Auto Number
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassBase.ClassName">
            <summary>
            Get/Set the name of the data class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassBase.PDSALoginName">
            <summary>
            Get/Set the login name that you can be use to update a field in a record
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassBase.CommandTimeout">
            <summary>
            Get/Set the CommandTimeout property
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassBase.DataSetObject">
            <summary>
            Get/Set the DataSet object of this data class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassBase.SQL">
            <summary>
            Get/Set the last SQL statement executed by this data class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassBase.RowsAffected">
            <summary>
            Get/Set the number of rows affected by the last SQL statement
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassBase.LastException">
            <summary>
            Get/Set the Last Exception that occurred
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassBase.TransactionObject">
            <summary>
            Get/Set the Transaction object
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassBase.ConnectionObject">
            <summary>
            Get/Set the Connection object
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassBase.SchemaName">
            <summary>
            Get/Set the name of the schema in the database this object comes from
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassBase.IsPrimaryKeyAutoNumber">
            <summary>
            Get/Set whether or not the primary key field is auto-numbered for this table
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassBase.DataProvider">
            <summary>
            Get/Set the data provider object.
            If the provider has not been set, then the default provider will be retrieved.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassBase.DBObjectName">
            <summary>
            Get/Set the database object name this data class represents
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassBase.DBObjectNameOnly">
            <summary>
            Gets the name of the just the database object
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassBase.CommandObject">
            <summary>
            Get/Set the Command object for this data class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassBase.UseStoredProcs">
            <summary>
            Get/Set whether or not a stored procedure or dynamic SQL is used to submit an SQL statement
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassBase.DatabaseMinDate">
            <summary>
            Gets the minimum date specified for this database provider.
            If the value is not specified in the .Config file, then DateTime.MinValue is used
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassBase.DatabaseMaxDate">
            <summary>
            Gets the maximum date specified for this database provider.
            If the value is not specified in the .Config file, then DateTime.MaxValue is used
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassBase.SetDBObjectNameOnColumnCollection(System.String)">
            <summary>
            Sets the database object name property (DBObjectName) on the Data Columns Collection with the value passed in.
            </summary>
            <param name="DBOBjectName">The name of the database object for this data class</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassBase.SetUseStoredProcFlag(System.Boolean)">
            <summary>
            Sets the UseStoredProc flag on the Data Columns Collection to a true or false value.
            </summary>
            <param name="value">true or false</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassBase.Init">
            <summary>
            Initializes this class to a valid start state.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassBase.GetResourceMessage(System.String,System.String)">
            <summary>
            Gets a Resource Message. You can override this method to get the messages from a Resource file, an XML file, or a database for a multi-lingual application.
            </summary>
            <param name="resourceCode">A unique identifier for this resource</param>
            <param name="message">The message if the resource is not found</param>
            <returns>The message</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassBase.CloseConnection">
            <summary>
            Close Connection Object and Dispose of it
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly">
            <summary>
            The base class for all Read Only Data Classes that simply need to read data from a database object.
            </summary>  
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.#ctor">
            <summary>
            Constructor for PDSADataClassReadOnly class
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.#ctor(PDSA.DataLayer.PDSADataProvider)">
            <summary>
            Constructor for PDSADataClassReadOnly class
            </summary>
            <param name="DataProvider">The data provider to use for all data access</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.#ctor(PDSA.DataLayer.PDSADataProvider,PDSA.Validation.IPDSAEntity)">
            <summary>
            Constructor for the PDSADataClassTable class
            </summary>
            <param name="dataProvider">A data provider to be used for all data access</param>
            <param name="entityObject">An Entity Object</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.#ctor(PDSA.Validation.IPDSAEntity)">
            <summary>
            Constructor for the PDSADataClassTable class
            </summary>
            <param name="entityObject">An Entity Object</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.#ctor(PDSA.DataLayer.PDSADataProvider,PDSA.Validation.IPDSAEntity,PDSA.Validation.IPDSAValidation)">
            <summary>
            Constructor for the PDSADataClassTable class
            </summary>
            <param name="dataProvider">A data provider to be used for all data access</param>
            <param name="entityObject">An Entity Object</param>
            <param name="validatorObject">A Validation Object</param>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.mSelectCustom">
            <summary>
            A custom SELECT statement
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.mWhereCustom">
            <summary>
            A custom WHERE clause
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.mOrderByCustom">
            <summary>
            A custom ORDER BY clause
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.mInsertCustom">
            <summary>
            A custom INSERT statement
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.mUpdateCustom">
            <summary>
            A custom UPDATE statement
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.mDeleteCustom">
            <summary>
            A custom DELETE statement
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.mRowCountCustom">
            <summary>
            A custom SELECT COUNT(*) statement
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.mProperties">
            <summary>
            A collection of PDSAPropery objects
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.mDataColumns">
            <summary>
            A collection of PDSADataColumn objects
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.ValidatorObject">
            <summary>
            Get/Set the validator object that is used to call the Validate() method on when an Insert or Update method is performed.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.UsePaging">
            <summary>
            Get/Set whether or not to add paging to your SQL Statements
            NOTE: In order for paging to work, you MUST include an ORDER BY clause
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.EntityObject">
            <summary>
            Get/Set the Entity object
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.BusinessRuleMessages">
            <summary>
            Get/Set the Business Rule Messages that failed during the last validation
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.AllColumns">
            <summary>
            Get/Set the Data Column Collection for this class.
            The data column collection will hold one PDSADataColumn object for each field in the table.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.SelectCustom">
            <summary>
            Get/Set a custom dynamic SQL SELECT statement
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.WhereCustom">
            <summary>
            Get/Set a custom dynamic SQL WHERE clause
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.OrderByCustom">
            <summary>
            Get/Set a custom dynamic SQL ORDER BY clause
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.InsertCustom">
            <summary>
            Get/Set a custom dynamic SQL INSERT clause
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.UpdateCustom">
            <summary>
            Get/Set a custom dynamic SQL UPDATE clause
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.DeleteCustom">
            <summary>
            Get/Set a custom dynamic SQL DELETE clause
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.RowCountCustom">
            <summary>
            Get/Set a custom dynamic SQL RowCount clause
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.GetDataReader">
            <summary>
            Returns a IDataReader object using the .SQL statement from the data class.
            NOTE: You must close the DataReader in your code!
            </summary>
            <returns>IDataReader</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.GetDataTable">
            <summary>
            Returns a DataTable object
            </summary>
            <returns>A DataTable object</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.GetDataSet">
            <summary>
            Returns a DataSet object using the .SQL statement from the data class.
            </summary>
            <returns>DataSet</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.GetDataSetAsXml">
            <summary>
            Gets a result set by calling the GetDataSet method and turning it into Element based XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.GetDataSetAsXml(PDSA.DataLayer.DataClasses.PDSAXmlGenerationType)">
            <summary>
            Gets a result set by calling the GetDataSet method and turning it into Element based XML.
            </summary>
            <param name="xmlGenType">Attribute or Element Based</param>
            <returns>An XML string</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.GetDataSetAsXml(PDSA.DataLayer.DataClasses.PDSAXmlGenerationType,System.String,System.String)">
            <summary>
            Gets a result set by calling the GetDataSet method and turning it into either Attribute or Element based XML.
            </summary>
            <param name="xmlGenType">Attribute or Element Based</param>
            <param name="topNodeName">The name for your top node of your XML</param>
            <param name="nodesName">The name for each lower level node in your XML</param>
            <returns>An XML string</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.GetDataSetAsJSON">
            <summary>
            Gets a result set by calling the GetDataSet method and turning it into a JSON formatted string.
            </summary>
            <returns>A JSON formatted string</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.GetDataSetAsExcelString">
            <summary>
            Pass in a DataSet and this method will return a string that you can open with Excel
            The string is tab delimited for each column and has a CRLF at the end of each row of data
            </summary>
            <returns>A string in Excel format</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.GetDataSetAsExcelString(System.Data.DataSet)">
            <summary>
            Pass in a DataSet and this method will return a string that you can open with Excel
            The string is tab delimited for each column and has a CRLF at the end of each row of data
            </summary>
            <param name="ds">The DataSet to convert</param>
            <returns>A string in Excel format</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.CleanData(System.Object)">
            <summary>
            Cleans up data coming from a database in preparation for converting the data to Excel
            </summary>
            <param name="value">The value to clean</param>
            <returns>A string of the data, or blank string if null</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.RowCount">
            <summary>
            Returns the total number of rows based on the SELECT and WHERE clause statements filled in, or the RowCount stored procedure selected.
            </summary>
            <returns>Rows affected</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.Load">
            <summary>
            This method calls the GetDataSet() method. It then loads the first data row in the returned dataset into the Entity class.
            Returns the total number of records loaded from the call to the GetDataSet() method.
            </summary>
            <returns>Rows affected</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.CreateDataRowFromEntity">
            <summary>
            Creates a DataRow object from an Entity object
            Assumes that you have filled in the 'Entity' property with a valid entity from the table.
            </summary>
            <returns>A DataRow</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.SetColumnValueToNull(System.String)">
            <summary>
            Set a column's value to Null when doing an INSERT or UPDATE.
            </summary>
            <param name="columnName">The column name's value to set to null</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.SyncDataColumnToProperty(PDSA.DataLayer.DataClasses.PDSADataColumn,PDSA.Validation.PDSAProperty)">
            <summary>
            This is called from the SyncDataColumnsToProperties method in order to set any special properties during an Insert or Update
            </summary>
            <param name="col">A PDSADataColumn object</param>
            <param name="prop">A PDSAProperty object</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.SelectSQL">
            <summary>
            Builds the SQL for the SELECT statement, or SELECT stored procedure based on the SelectFilter property. You will override this method.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.WhereClauseSQL">
            <summary>
            Builds the WHERE clause to be used in combination with a SELECT statement. You will override this method.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.OrderByClauseSQL">
            <summary>
            Builds the ORDER BY clause to be used in combination with a SELECT statement. You will override this method.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.InsertSQL">
            <summary>
            Builds the SQL for the INSERT statement, or INSERT stored procedure based on the InsertFilter property. You will override this method.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.UpdateSQL">
            <summary>
            Builds the SQL for the UPDATE statement, or UPDATE stored procedure based on the UpdateFilter property. You will override this method.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.DeleteSQL">
            <summary>
            Builds the SQL for the DELETE statement, or DELETE stored procedure. You can set the WhereFilter property to selectively delete rows from the table. You will override this method.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.RowCountSQL">
            <summary>
            Builds the SELECT Count(*) SQL, or the name of the stored procedure, that will count the number of rows. You will override this method.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.DataRowToProperties(System.Data.DataRow)">
            <summary>
            Moves the values from a DataRow object into the collection properties. 
            Called when object is first read in from the database
            </summary>
            <param name="dr">DataRow object with all fields from the table in it.</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.DataRowToProperties(System.Data.DataRow,System.Boolean)">
            <summary>
            Moves the values from a DataRow object into the collection properties. 
            Called when object is first read in from the database
            </summary>
            <param name="dr">DataRow object with all fields from the table in it.</param>
            <param name="populateAllColumnsCollection">Set to True to populate the 'AllColumns' collection with OriginalValue, WasDataReadInAsNull and IsDirty flag</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.DataSetRowToXml(System.Int32)">
            <summary>
            Builds an XML string from the data row index that is passed in.
            </summary>
            <param name="rowNumber">The row number to make an XML string from</param>
            <returns>An XML string</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.EntityDataToColumnCollection">
            <summary>
            Moves the data from the Entity class into the Columns collection. You will override this method.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.ColumnCollectionToEntityData">
            <summary>
            Moves the data from the Columns collection into the Entity class. You will override this method.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.WhereClauseFillInParameters">
            <summary>
            Fills in the parameter objects for any WHERE clauses that need it. You will override this method.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.SelectFillInParameters">
            <summary>
            Fills in the parameter objects for any SELECT clauses that need it. You will override this method.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.PagingFillInParameters(System.Int32,System.Int32)">
            <summary>
            Adds on parameters for SQL Server paging; @ResultSetRowNumberBegin and @ResultSetRowNumberEnd
            </summary>
            <summary>
            Builds the CommandObject.Parameters collection for any SELECT statement parameters.
            </summary>
            <param name="beginRow">Beginning Row Number</param>
            <param name="endRow">Ending Row Number</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.GetFullSelectStatement">
            <summary>
            Builds a dynamic SELECT statement using all columns and the database object name.
            </summary>
            <returns>A SELECT statement</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.GetFullSelectStatementForPaging">
            <summary>
            This method builds the SQL Server paging code around your existing SQL statement
            </summary>
            <returns>A SQL Statement</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.FormatSQL(System.String)">
            <summary>
            Format a SQL string so it looks better. This is used typically after code generating SQL.
            </summary>
            <param name="sqlString">The SQL to format</param>
            <returns>string of formatted SQL</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.InitDataColumns">
            <summary>
            Initialize the Data Columns Collection. You will override this method.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.ColumnToString(System.Data.DataRow,PDSA.DataLayer.DataClasses.PDSADataColumn)">
            <summary>
            Retrieves the value from a DataRow and uses a PDSADataColumn to get the 'value' property.
            </summary>
            <param name="dr">A DataRow</param>
            <param name="dc">A PDSADataColumn object</param>
            <returns>string value</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.ColumnToShort(System.Data.DataRow,PDSA.DataLayer.DataClasses.PDSADataColumn)">
            <summary>
            Retrieves the value from a DataRow and uses a PDSADataColumn to get the 'value' property.
            </summary>
            <param name="dr">A DataRow</param>
            <param name="dc">A PDSADataColumn object</param>
            <returns>short value</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.ColumnToInt16(System.Data.DataRow,PDSA.DataLayer.DataClasses.PDSADataColumn)">
            <summary>
            Retrieves the value from a DataRow and uses a PDSADataColumn to get the 'value' property.
            </summary>
            <param name="dr">A DataRow</param>
            <param name="dc">A PDSADataColumn object</param>
            <returns>short value</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.ColumnToInteger(System.Data.DataRow,PDSA.DataLayer.DataClasses.PDSADataColumn)">
            <summary>
            Retrieves the value from a DataRow and uses a PDSADataColumn to get the 'value' property.
            </summary>
            <param name="dr">A DataRow</param>
            <param name="dc">A PDSADataColumn object</param>
            <returns>int value</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.ColumnToInt32(System.Data.DataRow,PDSA.DataLayer.DataClasses.PDSADataColumn)">
            <summary>
            Retrieves the value from a DataRow and uses a PDSADataColumn to get the 'value' property.
            </summary>
            <param name="dr">A DataRow</param>
            <param name="dc">A PDSADataColumn object</param>
            <returns>int value</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.ColumnToLong(System.Data.DataRow,PDSA.DataLayer.DataClasses.PDSADataColumn)">
            <summary>
            Retrieves the value from a DataRow and uses a PDSADataColumn to get the 'value' property.
            </summary>
            <param name="dr">A DataRow</param>
            <param name="dc">A PDSADataColumn object</param>
            <returns>long value</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.ColumnToInt64(System.Data.DataRow,PDSA.DataLayer.DataClasses.PDSADataColumn)">
            <summary>
            Retrieves the value from a DataRow and uses a PDSADataColumn to get the 'value' property.
            </summary>
            <param name="dr">A DataRow</param>
            <param name="dc">A PDSADataColumn object</param>
            <returns>long value</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.ColumnToDecimal(System.Data.DataRow,PDSA.DataLayer.DataClasses.PDSADataColumn)">
            <summary>
            Retrieves the value from a DataRow and uses a PDSADataColumn to get the 'value' property.
            </summary>
            <param name="dr">A DataRow</param>
            <param name="dc">A PDSADataColumn object</param>
            <returns>decimal value</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.ColumnToSingle(System.Data.DataRow,PDSA.DataLayer.DataClasses.PDSADataColumn)">
            <summary>
            Retrieves the value from a DataRow and uses a PDSADataColumn to get the 'value' property.
            </summary>
            <param name="dr">A DataRow</param>
            <param name="dc">A PDSADataColumn object</param>
            <returns>single value</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.ColumnToDouble(System.Data.DataRow,PDSA.DataLayer.DataClasses.PDSADataColumn)">
            <summary>
            Retrieves the value from a DataRow and uses a PDSADataColumn to get the 'value' property.
            </summary>
            <param name="dr">A DataRow</param>
            <param name="dc">A PDSADataColumn object</param>
            <returns>double value</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.ColumnToBoolean(System.Data.DataRow,PDSA.DataLayer.DataClasses.PDSADataColumn)">
            <summary>
            Retrieves the value from a DataRow and uses a PDSADataColumn to get the 'value' property.
            </summary>
            <param name="dr">A DataRow</param>
            <param name="dc">A PDSADataColumn object</param>
            <returns>boolean value</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.ColumnToByte(System.Data.DataRow,PDSA.DataLayer.DataClasses.PDSADataColumn)">
            <summary>
            Retrieves the value from a DataRow and uses a PDSADataColumn to get the 'value' property.
            </summary>
            <param name="dr">A DataRow</param>
            <param name="dc">A PDSADataColumn object</param>
            <returns>byte value</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.ColumnToDate(System.Data.DataRow,PDSA.DataLayer.DataClasses.PDSADataColumn)">
            <summary>
            Retrieves the value from a DataRow and uses a PDSADataColumn to get the 'value' property.
            </summary>
            <param name="dr">A DataRow</param>
            <param name="dc">A PDSADataColumn object</param>
            <returns>DateTime value</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.ColumnToXML(System.Data.DataRow,PDSA.DataLayer.DataClasses.PDSADataColumn)">
            <summary>
            Retrieves the value from a DataRow and uses a PDSADataColumn to get the 'value' property.
            </summary>
            <param name="dr">A DataRow</param>
            <param name="dc">A PDSADataColumn object</param>
            <returns>string value</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.GetColumnsAsPropertyHeaderCollection">
            <summary>
            Return the collection of all table/view/stored procedured columns as a PDSAPropertyHeaders Collection
            This can be used with the PDSA.WPF.PDSAWPFListView.CreateGridViewColumns() method to create the view for a ListView control.
            </summary>
            <returns>A PDSAPropertyHeaders Collection</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassReadOnly.SetPrimaryKeyNamesOnDataTable(System.Data.DataTable)">
            <summary>
            Sets the PrimaryKey property on a DataTable with an array of DataColumns
            </summary>
            <param name="dt">The DataTable to set</param>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSADataClassTable">
            <summary>
            The base class for all data classes that need to add/edit/delete and select data from a database object.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.#ctor">
            <summary>
            Constructor for the PDSADataClassTable class
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.#ctor(PDSA.DataLayer.PDSADataProvider)">
            <summary>
            Constructor for the PDSADataClassTable class
            </summary>
            <param name="dataProvider">A data provider to be used for all data access</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.#ctor(PDSA.DataLayer.PDSADataProvider,PDSA.Validation.IPDSAEntity)">
            <summary>
            Constructor for the PDSADataClassTable class
            </summary>
            <param name="dataProvider">A data provider to be used for all data access</param>
            <param name="entityObject">An Entity Object</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.#ctor(PDSA.Validation.IPDSAEntity)">
            <summary>
            Constructor for the PDSADataClassTable class
            </summary>
            <param name="entityObject">An Entity Object</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.#ctor(PDSA.DataLayer.PDSADataProvider,PDSA.Validation.IPDSAEntity,PDSA.Validation.IPDSAValidation)">
            <summary>
            Constructor for the PDSADataClassTable class
            </summary>
            <param name="dataProvider">A data provider to be used for all data access</param>
            <param name="entityObject">An Entity Object</param>
            <param name="validatorObject">A Validation Object</param>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassTable.PerformValidation">
            <summary>
            Get/Set whether or not to perform validation when doing an INSERT/UPDATE
            Set to false only when performing an UPDATE with a WHERE clause that updates multiple records
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassTable.DataColumns">
            <summary>
            Get/Set the collection of DataColumns. This is parallel to the AllColumns collection.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassTable.DataModificationAction">
            <summary>
            Get/Set which data modification is taking place (Insert/Update/Delete)
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassTable.PrimaryKeyGenerate">
            <summary>
            Get/Set a flag of whether or not to generate a primary key using either the pdsaTableIds table, or a GUID.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassTable.PrimaryKeyType">
            <summary>
            Get/Set the method that will be used to generate a primary key
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassTable.ConcurrencyFieldName">
            <summary>
            Get/Set the Concurrency Field Name on this table (if any)
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassTable.PrimaryKeyAutoNumberDataType">
            <summary>
            Get/Set the data type of the primary key (only if the PK is an Auto Number type)
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassTable.TransactionType">
            <summary>
            Get/Set which method to call when in a transaction
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassTable.UseAuditTracking">
            <summary>
            Get/Set whether or not to build an audit track record
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassTable.ZeroRowsOK">
            <summary>
            Get/Set whether or not to throw an exception if zero rows are returned from an UPDATE or DELETE.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassTable.AuditRowAsXml">
            <summary>
            Get the audit row as an XML string
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.ExecuteNonQuery">
            <summary>
            Submits an action query to the database
            </summary>
            <returns>Int32</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.BuildModificationCommandObject(PDSA.Validation.PDSADataModificationState)">
            <summary>
            Builds the command object for submitting an action query
            </summary>
            <param name="dataModificationState">Which data modication is taking place (Insert/Update/Delete)</param>
            <returns>An IDbCommand object</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.PKGetFromPDSATableIds(System.String)">
            <summary>
            Gets a new Int32 primary key value from the pdsaTableIds table
            </summary>
            <param name="loginName">The person who is getting the new primary key value</param>
            <returns>An integer that is the new primary key value</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.GetPKColumn">
            <summary>
            Determines the primary key of a table.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.Validate">
            <summary>
            Call this method to perform validation on the Entity Properties for this Data Object
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.CheckBusinessRules">
            <summary>
            Check business rules on Validator Object after moving entity data into the properties collection
            </summary>
            <returns>A status of whether or not the rules were successful or not</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.Insert">
            <summary>
            Submits the INSERT statement, or stored procedure, to the database.
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.Update">
            <summary>
            Submits an UPDATE statement to the backend database
            </summary>
            <returns>Number of rows updated</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.Update(System.Boolean)">
            <summary>
            Submits an UPDATE statement to the backend database
            </summary>
            <param name="zeroRowsOk">Whether or not to throw an exception if no rows are updated</param>
            <returns>Number of rows updated</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.Delete">
            <summary>
            Submits a DELETE action query to the database.
            </summary>
            <returns>Number of rows deleted</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.Delete(System.Boolean)">
            <summary>
            Submits a DELETE action query to the database.
            </summary>
            <param name="zeroRowsOk">Whether or not to throw an exception if no rows are deleted</param>
            <returns>Number of rows deleted</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.UpdateAllConcurrencyFields">
            <summary>
            Update all ConcurrencyFields that are about to go over the limit back to MinValue.
            NOTE: This method uses Dynamic SQL to update the Concurrency Field
            If you want to use stored procedures, you will need to write your own to perform this updating.
            </summary>
            <returns>Total number of rows affected</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.SetAsNullFlag(System.String,System.Boolean)">
            <summary>
            Changes the property/column name SetAsNull property
            </summary>
            <param name="propertyName">The property/column name to change</param>
            <param name="setAsNullFlag">value to change the SetAsNull property to</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.BuildAuditTrackingXML">
            <summary>
            Builds an audit tracking xml from the current row of data.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.BuildAuditTrackingXML(PDSA.Validation.PDSADataModificationState)">
            <summary>
            Builds an audit tracking xml from the current row of data.
            </summary>
            <param name="dataModification">The data modification state of the data class (Insert/Update/Delete)</param>
            <returns>string</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.ResetCollectionProperties">
            <summary>
            Resets IsDirty Flag properties in collections
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.SyncDataColumnToProperty(PDSA.DataLayer.DataClasses.PDSADataColumn,PDSA.Validation.PDSAProperty)">
            <summary>
            This is called from the SyncDataColumnsToProperties method in order to set any special properties during an Insert or Update
            </summary>
            <param name="col">A PDSADataColumn object</param>
            <param name="prop">A PDSAProperty object</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.RetrievePrimaryKeyAfterInsert(System.Data.IDbConnection)">
            <summary>
            This method is called after an INSERT to retrieve the primary key value.
            </summary>
            <param name="cnn">IDbConnection object</param>
            <returns>The new primary key</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.SetModificationCommandParameters">
            <summary>
            Sets the command parameters for an action query. You will override this method.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.Inserted">
            <summary>
            This method is called after a call to the Insert() method and it is successful.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.Updated">
            <summary>
            This method is called after a call to the Update() method and it is successful.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.Deleted">
            <summary>
            This method is called after a call to the Update() method and it is successful.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.SetDirtyFlag">
            <summary>
            Method raised to allow you to set the dirty flag to any value you wish
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.SetDirtyFlag(System.Boolean)">
            <summary>
            Method raised to allow you to set the dirty flag to any value you wish
            This method is called after the Insert and Update methods with false value
            </summary>
            <param name="isDirty">Set the IsDirty flag to this value</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.CheckForNullData(PDSA.Validation.PDSAProperties)">
            <summary>
            NOT USED
            This method will check the data in the 'DefaultValue' property against what is in the 'Value' property.
            If the two are equal the 'SetAsNull' flag will be set to the value of the 'WasDataReadInAsNull' flag.
            </summary>
            <param name="properties">A PDSAEntityInitialDataCollection object</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.PKGenerateGuid">
            <summary>
            Generates a new GUID for a primary key
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.PrimaryKeySet(System.Int32)">
            <summary>
            Sets an Int32 primary key value. You will override this method.
            </summary>
            <param name="PK">The primary key value</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.PrimaryKeySet(System.Int32,System.Int32)">
            <summary>
            Sets two Int32 primary key values. You will override this method.
            </summary>
            <param name="PK1">The primary key value</param>
            <param name="PK2">The primary key value</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.PrimaryKeySet(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets three Int32 primary key values. You will override this method.
            </summary>
            <param name="PK1">The primary key value</param>
            <param name="PK2">The primary key value</param>
            <param name="PK3">The primary key value</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.PrimaryKeySet(System.Int64)">
            <summary>
            Sets an Int64 primary key value. You will override this method.
            </summary>
            <param name="PK">The primary key value</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.PrimaryKeySet(System.Int64,System.Int64)">
            <summary>
            Sets two Int64 primary key values. You will override this method.
            </summary>
            <param name="PK1">The primary key value</param>
            <param name="PK2">The primary key value</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.PrimaryKeySet(System.Int64,System.Int64,System.Int64)">
            <summary>
            Sets three Int64 primary key values. You will override this method.
            </summary>
            <param name="PK1">The primary key value</param>
            <param name="PK2">The primary key value</param>
            <param name="PK3">The primary key value</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.PrimaryKeySet(System.Int16)">
            <summary>
            Sets an Int16 primary key value. You will override this method.
            </summary>
            <param name="PK">The primary key value</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.PrimaryKeySet(System.Int16,System.Int16)">
            <summary>
            Sets two Int16 primary key values. You will override this method.
            </summary>
            <param name="PK1">The primary key value</param>
            <param name="PK2">The primary key value</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.PrimaryKeySet(System.Int16,System.Int16,System.Int16)">
            <summary>
            Sets three Int16 primary key values. You will override this method.
            </summary>
            <param name="PK1">The primary key value</param>
            <param name="PK2">The primary key value</param>
            <param name="PK3">The primary key value</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.PrimaryKeySet(System.Double)">
            <summary>
            Sets a Double primary key value. You will override this method.
            </summary>
            <param name="PK">The primary key value</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.PrimaryKeySet(System.Decimal)">
            <summary>
            Sets a Decimal primary key value. You will override this method.
            </summary>
            <param name="PK">The primary key value</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.PrimaryKeySet(System.String)">
            <summary>
            Sets a string primary key value. You will override this method.
            </summary>
            <param name="PK">The primary key value</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.PrimaryKeySet(System.String,System.String)">
            <summary>
            Sets a string primary key value. You will override this method.
            </summary>
            <param name="PK1">The primary key value</param>
            <param name="PK2">The primary key value</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassTable.PrimaryKeySet(System.String,System.String,System.String)">
            <summary>
            Sets a string primary key value. You will override this method.
            </summary>
            <param name="PK1">The primary key value</param>
            <param name="PK2">The primary key value</param>
            <param name="PK3">The primary key value</param>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSATransactionException">
            <summary>
            This class is used to throw an exception when in a transaction
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSATransactionException.DataClassObject">
            <summary>
            Get/Set the Data Class object that was in error in the transaction
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSATransactionException.StoredProcObject">
            <summary>
            Get/Set the Stored Procedure Execute object that was in error in the transaction
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSATransactionException.#ctor(System.String)">
            <summary>
            Constructor for the PDSATransactionException object
            </summary>
            <param name="message">The message for this exception</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSATransactionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the PDSATransactionException object
            </summary>
            <param name="message">The message for this exception</param>
            <param name="ex">An inner exception object</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSATransactionException.#ctor(System.Exception,PDSA.DataLayer.DataClasses.PDSADataClassTable,PDSA.DataLayer.DataClasses.PDSAStoredProcExecute)">
            <summary>
            Constructor for the PDSATransactionException object
            </summary>
            <param name="ex">An exception from which the ToString() message will be returned</param>
            <param name="dcObject">A PDSADataClassTable object</param>
            <param name="spObject">A PDSAStoredProcExecute object</param>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSAZeroRowsException">
            <summary>
            This exception is raised if no rows are affected by the latest insert, update or delete on a data class
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAZeroRowsException.#ctor(System.String)">
            <summary>
            Constructor for the PDSAZeroRowsException class
            </summary>
            <param name="message">A message for this exception</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAZeroRowsException.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor for the PDSAZeroRowsException class
            </summary>
            <param name="message">A message for this exception</param>
            <param name="className">The class name that this exception is raised from</param>
            <param name="methodName">The method name that this exception is raised from</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAZeroRowsException.#ctor(System.String,System.String,System.String,PDSA.DataLayer.DataClasses.PDSAStoredProcBase)">
            <summary>
            Constructor for the PDSAZeroRowsException class
            </summary>
            <param name="message">A message for this exception</param>
            <param name="className">The class name that this exception is raised from</param>
            <param name="methodName">The method name that this exception is raised from</param>
            <param name="dataClass">A DataClass Object</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAZeroRowsException.#ctor(System.String,System.String,System.String,PDSA.DataLayer.DataClasses.PDSADataClassTable)">
            <summary>
            Constructor for the PDSAZeroRowsException class
            </summary>
            <param name="message">A message for this exception</param>
            <param name="className">The class name that this exception is raised from</param>
            <param name="methodName">The method name that this exception is raised from</param>
            <param name="dataClass">A DataClass Object</param>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSAZeroRowsException.DataClassObject">
            <summary>
            Get/Set the DataClass that raised this exception
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSADataClassManagerBase">
            <summary>
            This abstract base class is used by manager data classes
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassManagerBase.#ctor">
            <summary>
            Constructor for PDSADataClassManagerBase class. Calls the Init method
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassManagerBase.#ctor(PDSA.DataLayer.PDSADataProvider)">
            <summary>
            Constuctor for the PDSADataClassManagerBase class
            </summary>
            <param name="dataProvider">The data provider to use for all data access.</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassManagerBase.#ctor(System.String)">
            <summary>
            Constuctor for the PDSADataClassManagerBase class
            </summary>
            <param name="dataProviderName">The data provider name to use for all data access.</param>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSADataClassManagerReadOnlyBase">
            <summary>
            This abstract base class is used by data manager classes that are read only
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassManagerReadOnlyBase.#ctor">
            <summary>
            Constuctor for PDSADataClassManagerReadOnlyBase class
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassManagerReadOnlyBase.#ctor(PDSA.DataLayer.PDSADataProvider)">
            <summary>
            Constuctor for the PDSADataClassManagerReadOnlyBase class
            </summary>
            <param name="dataProvider">The data provider to use for all data access.</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassManagerReadOnlyBase.#ctor(System.String)">
            <summary>
            Constuctor for the PDSADataClassManagerReadOnlyBase class
            </summary>
            <param name="dataProviderName">The data provider name to use for all data access.</param>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataClassManagerReadOnlyBase.DataProvider">
            <summary>
            Get/Set the data provider object.
            If the provider has not been set, then the default provider will be retrieved.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassManagerReadOnlyBase.ChangeProvider(System.String)">
            <summary>
            Call this method to change the Data Provider for all data access
            NOTE: After calling this method, set the DataObject property in your manager class to this new DataProvider. For example: _Manager.DataObject.DataProvider = _Manager.DataProvider
            </summary>
            <param name="dataProviderName">The data provider name to use for all data access.</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataClassManagerReadOnlyBase.Init">
            <summary>
            Override this method to initialize the object to a valid start state
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSADataParameter">
            <summary>
            This class holds parameter information that will be submitted through a command object.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataParameter.IsReturnValue">
            <summary>
            Get/Set whether or not this parameter is a return value from a stored procedure
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataParameter.IsRefCursor">
            <summary>
            Get/Set whether or not this parameter is a ref cursor in Oracle
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataParameter.ParameterName">
            <summary>
            Get/Set the name of the parameter
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataParameter.GetPropertiesAsPropertyHeaderCollection">
            <summary>
            Returns all properties of this class as a PDSAPropertyHeaders collection
            </summary>
            <returns>A collection of PDSAPropertyHeader objects</returns>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSADataParameters">
            <summary>
            This class is a collection class of PDSADataParameter objects
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataParameters.#ctor">
            <summary>
            Constructor for the PDSADataParameters class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataParameters.Item(System.String)">
            <summary>
            Indexer property to retrieve a PDSADataParameter by the parameter name
            </summary>
            <param name="paramName">Parameter name to find</param>
            <returns>A PDSADataParameter object, or null if the name is not found</returns>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataParameters.StoredProcName">
            <summary>
            Get/Set the stored procedure name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataParameters.BusinessRuleMessages">
            <summary>
            Get/Set the validation rules that have failed
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataParameters.ParamPrefix">
            <summary>
            Get/Set the Parameter prefix that is used for the current database server
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataParameters.IsValid">
            <summary>
            Get/Set whether or not this parameter is valid after checking the business rules
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataParameters.GetByName(System.String)">
            <summary>
            Get a PDSADataParameter object by the parameter name
            </summary>
            <param name="paramName">The parameter name to find</param>
            <returns>A PDSADataParameter object, or null if the name is not found</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataParameters.GetOutputParameters(System.Data.IDbCommand,PDSA.DataLayer.PDSADataProvider)">
            <summary>
            Sets the output parameters after the command has executed.
            </summary>
            <param name="cmd">The IDbCommand object that just executed a stored procedure</param>
            <param name="dataProvider">The data provider used to submit the command</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataParameters.AddAllParametersToCommandObject(System.Data.IDbCommand,PDSA.DataLayer.PDSADataProvider)">
            <summary>
            Adds all parameters in the collection to the passed in Command object
            </summary>
            <param name="cmd">A command object</param>
            <param name="dataProvider">The data provider that will be used</param>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSAXmlGenerationType">
            <summary>
            Enumeration for how you want to generate XML from a DataSet in your data classes
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAXmlGenerationType.ElementBased">
            <summary>
            Generate Element Based XML
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAXmlGenerationType.AttributeBased">
            <summary>
            Generate Attribute Based XML
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSATransactionType">
            <summary>
            Enumeration for the type of transaction you wish to perform on a data class
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSATransactionType.Insert">
            <summary>
            Call the Insert method on the data class. If no rows are inserted an exception is raised.
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSATransactionType.Update">
            <summary>
            Call the Update method on the data class. If no rows are updated an exception is raised.
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSATransactionType.Delete">
            <summary>
            Call the Delete method on the data class. If no rows are deleted an exception is raised.
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSATransactionType.InsertZeroRecsOK">
            <summary>
            Call the Insert method on the data class. If no rows are inserted no exception is raised.
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSATransactionType.UpdateZeroRecsOK">
            <summary>
            Call the Update method on the data class. If no rows are updated no exception is raised.
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSATransactionType.DeleteZeroRecsOK">
            <summary>
            Call the Delete method on the data class. If no rows are deleted no exception is raised.
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSATransactionType.StoredProcExecute">
            <summary>
            Calls the Execute method on a stored procedure data class.
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSATransactionType.StoredProcExecuteThrowExceptionOnZeroRows">
            <summary>
            Calls the Execute method on a stored procedure data class. If no rows are affected an exception is raised.
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSAPrimaryKeyType">
            <summary>
            Enumeration for determining which type of primary key generation a table uses
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAPrimaryKeyType.SQLIdentity">
            <summary>
            The primary key generated using SQL IDENTITY
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAPrimaryKeyType.PDSA">
            <summary>
            The primary key is generated used the PDSA Table IDs table
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAPrimaryKeyType.OracleSeqNumber">
            <summary>
            The primary key is generated from an Oracle Sequence Number
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAPrimaryKeyType.GUID">
            <summary>
            The primary key is generated using a GUID
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAPrimaryKeyType.Manual">
            <summary>
            The primary key is set manually
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAPrimaryKeyType.None">
            <summary>
            There is no primary key for this table
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSAGenericDBDataTypes">
            <summary>
            Enumeration of generic database data types
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAGenericDBDataTypes.StringType">
            <summary>
            The generic database data type is string (varchar, char, etc.)
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAGenericDBDataTypes.NumericType">
            <summary>
            The generic database data type is numeric (int, decimal, etc.)
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAGenericDBDataTypes.DateType">
            <summary>
            The generic database data type is date (date, datetime, etc.)
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAGenericDBDataTypes.BooleanType">
            <summary>
            The generic database data type is boolean
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAGenericDBDataTypes.BinaryType">
            <summary>
            The generic database data type is binary (image, blob, etc.)
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAGenericDBDataTypes.GUIDType">
            <summary>
            The generic database data type is GUID
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAGenericDBDataTypes.TimeStampType">
            <summary>
            The generic database data type is a time stamp
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAGenericDBDataTypes.VariantType">
            <summary>
            The generic database data type is variant
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAGenericDBDataTypes.ObjectType">
            <summary>
            The generic database data type is object
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSADataItem">
            <summary>
            This abstract base class is used as the basis for all Data Column classes.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataItem.#ctor">
            <summary>
            Constructor for the PDSADataItem class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataItem.ParamDirection">
            <summary>
            Get/Set the direction of a parameter used in Stored Procedure classes.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataItem.OrdinalPosition">
            <summary>
            Get/Set the ordinal position of the column/parameter
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSADataItem.DBType">
            <summary>
             Get/Set the database data type for the specified data column.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataItem.GetPropertiesAsPropertyHeaderCollection">
            <summary>
            Returns all properties of this object as a collection of PDSAPropertyHeader objects
            </summary>
            <returns>A collection of PDSAPropertyHeader objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataItem.CreateParameterName(System.String)">
            <summary>
            Create a parameter name from a property or column name.
            </summary>
            <param name="propertyName">A property name to create a parameter name from</param>
            <returns>string</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataItem.BuildCommandParameter(PDSA.DataLayer.PDSADataProvider,System.String,System.Int32)">
            <summary>
            Builds an IDataParameter command parameter
            </summary>
            <param name="dp">Data Provider</param>
            <param name="parameterName">Parameter name</param>
            <param name="size">size</param>
            <returns>IDataParameter</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataItem.BuildCommandParameter(PDSA.DataLayer.PDSADataProvider,System.String)">
            <summary>
            Builds an IDataParameter command parameter
            </summary>
            <param name="dp">Data Provider</param>
            <param name="parameterName">Parameter name</param>
            <returns>IDataParameter</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataItem.BuildCommandParameter(PDSA.DataLayer.PDSADataProvider)">
            <summary>
            Builds an IDataParameter command parameter from the PropertyName property.
            </summary>
            <param name="dp">Data Provider</param>
            <returns>IDataParameter</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataItem.GetCurrentValue">
            <summary>
            Returns the current 'value' of this data column.
            This method must be here because we need to return 'DBNull.Value' and not just a .NET 'null' value.
            </summary>
            <returns>object</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSADataItem.GetGenericDBType">
            <summary>
            This method will return the generic type for the DBType contained in this property.
            </summary>
            <returns>PDSAGenericPropertyTypes</returns>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSAPKTableIdSqlServer">
            <summary>
            This class is only for generating the next Primary Key for a table in SQL Server
            This is NOT to be used for CRUD on the PDSATableId table.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAPKTableIdSqlServer.#ctor">
            <summary>
            Constructor for the PDSAPKTableId class
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAPKTableIdSqlServer.#ctor(PDSA.DataLayer.PDSADataProvider)">
            <summary>
            Constructor for the PDSAPKTableId class
            </summary>
            <param name="dataProvider">A PDSADataProvider object</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAPKTableIdSqlServer.ResetTableId(System.String,System.String,System.String)">
            <summary>
            Deletes the row in the pdsaTableIds table for the specified table name passed in. Then calculates the next primary key for that table.
            </summary>
            <param name="tableName">The table name to retrieve a primary key for</param>
            <param name="pkField">The primary key field name</param>
            <param name="loginName">The user requesting to reset</param>
            <returns>The next primary key</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAPKTableIdSqlServer.ReadNextId">
            <summary>
            Reads the next id from the pdsaTableIds table.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAPKTableIdSqlServer.GetIdTableByName(System.String)">
            <summary>
            Gets a Table ID by passing in a Table Name
            </summary>
            <param name="tableName">The table name to get the next ID for</param>
            <returns>The next primary key</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAPKTableIdSqlServer.GetNextIDFromTable">
            <summary>
            Gets the next primary key value from the specified table by selecting the Max(fieldName) from that table.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAPKTableIdSqlServer.UpdateTableID">
            <summary>
            Updates the pdsaTableIds table with the new primary key value.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAPKTableIdSqlServer.CreateTableIDRecord">
            <summary>
            Creates a new row in the pdsaTableids table.
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSAPKTableId">
            <summary>
            This abstract base class is only for generating the next Primary Key for a table.
            This is NOT to be used for CRUD on the PDSATableId table.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAPKTableId.#ctor">
            <summary>
            Constructor for the PDSAPKTableId class
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAPKTableId.#ctor(PDSA.DataLayer.PDSADataProvider)">
            <summary>
            Constructor for the PDSAPKTableId class
            </summary>
            <param name="dataProvider">A PDSADataProvider object</param>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAPKTableId.TABLE_NAME">
            <summary>
            The Table Name where the next ids are stored
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSAPKTableId.mCurrentMethod">
            <summary>
            Get/Set the current method name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSAPKTableId.mTableName">
            <summary>
            Get/Set the Table Name to generate an ID for
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSAPKTableId.mPKField">
            <summary>
            Get/Set the Primary Key field
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSAPKTableId.mLoginName">
            <summary>
            Get/Set the login name of the person calling this method
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSAPKTableId.mPKValue">
            <summary>
            Get/Set the Primary Key Value generated
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSAPKTableId.mConcurValue">
            <summary>
            Get/Set the Concurrency Value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSAPKTableId.mNewConcurValue">
            <summary>
            Get/Set the new concurrency value after update the Table IDs table
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSAPKTableId.mIsFound">
            <summary>
            Get/Set whether or not the table to generate for was found.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSAPKTableId.ErrorMessage">
            <summary>
            Get/Set the error message
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSAPKTableId.PDSATableIdsColumnNames">
            <summary>
            This class contains static members that hold the field names for the pdsaTableIds table, and the parameters for the stored procedures used to modify and select from this table.
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAPKTableId.PDSATableIdsColumnNames.TableNameId">
            <summary>
            Get/Set the TableNameId column name
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAPKTableId.PDSATableIdsColumnNames.TableName">
            <summary>
            Get/Set the TableName column name
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAPKTableId.PDSATableIdsColumnNames.NextId">
            <summary>
            Get/Set the NextId column name
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAPKTableId.PDSATableIdsColumnNames.InsertName">
            <summary>
            Get/Set the InsertName column name
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAPKTableId.PDSATableIdsColumnNames.InsertDate">
            <summary>
            Get/Set the InsertDate column name
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAPKTableId.PDSATableIdsColumnNames.UpdateName">
            <summary>
            Get/Set the UpdateName column name
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAPKTableId.PDSATableIdsColumnNames.UpdateDate">
            <summary>
            Get/Set the UpdateDate column name
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAPKTableId.PDSATableIdsColumnNames.ConcurrencyValue">
            <summary>
            Get/Set the ConcurrencyValue column name
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAPKTableId.PDSATableIdsColumnNames.NewConcurrencyValue">
            <summary>
            Get/Set the NewConcurrencyValue column name
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAPKTableId.PDSATableIdsColumnNames.FieldName">
            <summary>
            Get/Set the FieldName column name
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAPKTableId.PDSATableIdsColumnNames.MaxValue">
            <summary>
            Get/Set the MaxValue column name
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAPKTableId.GetNewPrimaryKey(System.String,System.String,System.String)">
            <summary>
            Gets a new Int32 primary key value for the specified table name.
            </summary>
            <param name="tableName">The table name for which to retrieve a primary key</param>
            <param name="pkField">The primary key field name of the table</param>
            <param name="loginName">The user requesting the key</param>
            <returns>Int32</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAPKTableId.GetNewPrimaryKey">
            <summary>
            Starts the process for retrieving the new primary key from the pdsaTableIds table.
            </summary>
            <returns>Int32</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAPKTableId.ResetAllTableIds">
            <summary>
            Deletes all rows in the pdsaTableIds table.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAPKTableId.ResetTableId(System.String,System.String,System.String)">
            <summary>
            You must override this method. Deletes the row in the pdsaTableIds table for the specified table name passed in. Then calculates the next primary key for that table.
            </summary>
            <param name="tableName">The table name to retrieve a primary key for</param>
            <param name="pkField">The primary key field name</param>
            <param name="loginName">The user requesting to reset</param>
            <returns>The next primary key value</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAPKTableId.CreateNewPKException(System.Exception)">
            <summary>
            This method will create new PDSADataException object
            </summary>
            <param name="ex">An exception object</param>
            <returns>PDSADataException</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAPKTableId.ReadNextId">
            <summary>
            Reads the next id from the pdsaTableIds table.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAPKTableId.GetIdTableByName(System.String)">
            <summary>
            Returns the next ID for the specified table name
            </summary>
            <param name="tableName">The table to retrieve the next PK for</param>
            <returns>The next primary key</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAPKTableId.GetNextIDFromTable">
            <summary>
            Gets the next primary key value from the specified table by selecting the Max(fieldName) from that table.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAPKTableId.UpdateTableID">
            <summary>
            Updates the pdsaTableIds table with the new primary key value.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAPKTableId.CreateTableIDRecord">
            <summary>
            Creates a new row in the pdsaTableids table.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAPKTableId.FillInErrorMessage(System.Data.IDataParameter)">
            <summary>
            Create an error message from an IDataParameter object passed in.
            </summary>
            <param name="param">An IDataParameter object</param>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSAStoredProcBase">
            <summary>
            Base class for executing stored procedures
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcBase.#ctor">
            <summary>
            Constructor for PDSAStoredProcBase class
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcBase.#ctor(PDSA.DataLayer.PDSADataProvider)">
            <summary>
            Constructor for PDSAStoredProcBase class
            </summary>
            <param name="dataProvider">A PDSADataProvider object</param>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSAStoredProcBase.ReturnValue">
            <summary>
            Get/Set the return value from the stored procedure
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSAStoredProcBase.ReturnValueParamName">
            <summary>
            Get/Set the name of the return value parameter
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSAStoredProcBase.StoredProcName">
            <summary>
            Get/Set the name of the stored procedure
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSAStoredProcBase.AllParameters">
            <summary>
            Get/Set the PDSADataParameters collection
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSAStoredProcBase.ValidatorObject">
            <summary>
            Get/Set the validator object that is used to call the Validate() method on when an Insert or Update method is performed.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcBase.InitParameters">
            <summary>
            Initialize all parameters
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcBase.PropertiesToParameters(PDSA.Validation.PDSAProperties)">
            <summary>
            Transfers the data from a collection of PDSAProperties objects into the collection of PDSADataParameter objects
            </summary>
            <param name="props">A collection of PDSAProperty objects</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcBase.BuildExecCall">
            <summary>
            Call this method to build a call to the stored procedure where all parameters are passed on the command line
            Example: EXEC [dbo].[MyStoredproc] @Para1=Value1, @Param2=Value2
            </summary>
            <returns>A string</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcBase.AddAllParametersToCommandObject">
            <summary>
            Adds all parameters to the command object
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcBase.RetrieveOutputParameterValues">
            <summary>
            Retrieves all output parameter values after the stored procedure executes
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcBase.EntityDataToParameterCollection">
            <summary>
            Moves all entity properties to the internal parameter collection. You need to override this method
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcBase.OutputParametersToEntityData">
            <summary>
            Moves all parameter values from the internal parameter collection to the entity object. You need to override this method.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcBase.GetReturnValue">
            <summary>
            Gets the return value from the command object after executing the stored procedure
            </summary>
            <returns>The return value</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcBase.AddReturnValueParameterToCollection">
            <summary>
            Adds the return value parameter to the collection.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcBase.SetDirtyFlag">
            <summary>
            Method raised to allow you to set the dirty flag to any value you wish
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcBase.SetDirtyFlag(System.Boolean)">
            <summary>
            Method raised to allow you to set the dirty flag to any value you wish
            This method is called after the Insert and Update methods with false value
            </summary>
            <param name="isDirty">Set the IsDirty flag to this value</param>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSAStoredProcExecute">
            <summary>
            A class used to submit a stored procedure that will exceute SQL such as an INSERT, UPDATE or DELETE.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcExecute.#ctor">
            <summary>
            Constructor for the PDSAStoredProcExecute class
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcExecute.#ctor(PDSA.DataLayer.PDSADataProvider)">
            <summary>
            Constructor for the PDSAStoredProcExecute class
            </summary>
            <param name="dataProvider">A PDSADataProvider object</param>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSAStoredProcExecute.TransactionType">
            <summary>
            Get/Set which method to call when in a transaction
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSAStoredProcExecute.ZeroRowsOK">
            <summary>
            Get/Set whether or not to throw an exception if zero rows are returned from an UPDATE or DELETE.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcExecute.Execute">
            <summary>
            Executes a stored procedure
            </summary>
            <returns>The number of rows affected by the Execute statement</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcExecute.GetDataSet">
            <summary>
            Returns a DataSet object from the results of running the stored procedure.
            </summary>
            <returns>A DataSet object</returns>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSAStoredProcExecuteManagerBase">
            <summary>
            This abstract base class is used by Execute stored procedure manager classes
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcExecuteManagerBase.#ctor">
            <summary>
            Constructor for the PDSAStoredProcExecuteManagerBase class
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcExecuteManagerBase.#ctor(PDSA.DataLayer.PDSADataProvider)">
            <summary>
            Constructor for the PDSAStoredProcExecuteManagerBase class
            </summary>
            <param name="dataProvider">A PDSADataProvider object</param>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSAStoredProcExecuteManagerBase.DataProvider">
            <summary>
            Get/Set the data provider object.
            If the provider has not been set, then the default provider will be retrieved.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcExecuteManagerBase.Init">
            <summary>
            Override this method to initialize the object to a valid start state
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSAStoredProcReadOnly">
            <summary>
            An abstract class that all read-only stored procedure classes will inherit from
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcReadOnly.#ctor">
            <summary>
            Constructor for the PDSAStoredProcReadOnly class
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcReadOnly.#ctor(PDSA.DataLayer.PDSADataProvider)">
            <summary>
            Constructor for the PDSAStoredProcReadOnly class
            </summary>
            <param name="dataProvider">A PDSADataProvider object</param>
        </member>
        <member name="F:PDSA.DataLayer.DataClasses.PDSAStoredProcReadOnly.mDCColumns">
            <summary>
            Get/Set a collection of PDSADataColumn objects
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSAStoredProcReadOnly.AllColumns">
            <summary>
            Get/Set the Data Column Collection for this class.
            The data column collection will hold one PDSADataColumn object for each field in the table.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcReadOnly.InitDataColumns">
            <summary>
            Initializes all data columns that will be returned from this stored procedure. You need to override this method.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcReadOnly.EntityDataToColumnCollection">
            <summary>
            Moves all entity properties to the internal column collection. You need to override this method.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcReadOnly.ColumnCollectionToEntityData">
            <summary>
            Moves all the internal column collection values to the Entity object. You need to override this method.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcReadOnly.GetDataReader">
            <summary>
            Returns a data reader object from the results of running the stored procedure.
            NOTE: You MUST close the DataReader when you are done!
            </summary>
            <returns>A IDataReader object</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcReadOnly.GetDataTable">
            <summary>
            Returns a DataTable object from the results of running the stored procedure.
            </summary>
            <returns>A DataTable object</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcReadOnly.GetDataSet">
            <summary>
            Returns a DataSet object from the results of running the stored procedure.
            </summary>
            <returns>A DataSet object</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcReadOnly.GetDataSetAsXml">
            <summary>
            Gets a result set by calling the GetDataSet method and turning it into Element based XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcReadOnly.GetDataSetAsXml(PDSA.DataLayer.DataClasses.PDSAXmlGenerationType)">
            <summary>
            Gets a result set by calling the GetDataSet method and turning it into Element based XML.
            </summary>
            <param name="xmlGenType">Attribute or Element Based</param>
            <returns>An XML string</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSAStoredProcReadOnly.GetDataSetAsXml(PDSA.DataLayer.DataClasses.PDSAXmlGenerationType,System.String,System.String)">
            <summary>
            Gets a result set by calling the GetDataSet method and turning it into either Attribute or Element based XML.
            </summary>
            <param name="xmlGenType">Attribute or Element Based</param>
            <param name="topNodeName">The name for your top node of your XML</param>
            <param name="nodesName">The name for each lower level node in your XML</param>
            <returns>An XML string</returns>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSATransaction">
            <summary>
            This collection class holds any amount of Data Table Classes. The Execute() method will submit the appropriate SQL based on the TransactionType set in each Data Class. All of these will be placed into a transaction and all will succeed or all will fail.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSATransaction.#ctor">
            <summary>
            Constructor for the PDSATransaction class
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSATransaction.#ctor(PDSA.DataLayer.PDSADataProvider)">
            <summary>
            Constructor for the PDSATransaction class
            </summary>
            <param name="dataProvider">A PDSADataProvider object</param>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSATransaction.BeforeSubmitEventHandler">
            <summary>
            This delegate sets up the BeforeSubmit event
            </summary>
            <param name="sender">this object</param>
            <param name="e">A PDSATransactionEventArgs object</param>
        </member>
        <member name="E:PDSA.DataLayer.DataClasses.PDSATransaction.BeforeSubmit">
            <summary>
            This is the BeforeSubmit event that is raised before an object is submitted through the transaction.
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSATransaction.AfterSubmitEventHandler">
            <summary>
            This delegate sets up the AfterSubmit event
            </summary>
            <param name="sender">this object</param>
            <param name="e">A PDSATransactionEventArgs object</param>
        </member>
        <member name="E:PDSA.DataLayer.DataClasses.PDSATransaction.AfterSubmit">
            <summary>
            This is the AfterSubmit event that is raised after an object has been submitted through the transaction.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSATransaction.DataProvider">
            <summary>
            Get/Set the data provider object.
            If the provider has not been set, then the default provider will be retrieved.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSATransaction.Item(System.Int32)">
            <summary>
            Indexer into the collection
            </summary>
            <param name="index">Numeric value</param>
            <returns>An object from the collection</returns>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSATransaction.Init">
            <summary>
            Initialize this object to a valid start state
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSATransaction.Add(PDSA.DataLayer.DataClasses.PDSADataClassTable)">
            <summary>
            Add a Data Class Table object to this collection
            </summary>
            <param name="value">A PDSADataClassTable object</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSATransaction.Add(PDSA.DataLayer.DataClasses.PDSAStoredProcExecute)">
            <summary>
            Add a Stored Procedure Excute object to this collection
            </summary>
            <param name="value">A PDSAStoredProcExecute object</param>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSATransaction.Execute">
            <summary>
            Execute each data class table object or stored procedure object in the collection within the context of a transaction. Will commit or rollback the transaction based on the outcome of each object.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSATransaction.CloseConnections">
            <summary>
            This method is called after the Execute Method. 
            Closes and disposes of all connection and command objects used in the data classes.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSATransaction.CommitTransaction">
            <summary>
            Commits the transaction
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.DataClasses.PDSATransaction.RollbackTransaction">
            <summary>
            Rolls back the transaction
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.DataClasses.PDSATransactionEventArgs">
            <summary>
            This class is used as the 'e' argument from PDSATransaction events.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSATransactionEventArgs.ClassName">
            <summary>
            The class name of the object in this transaction
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSATransactionEventArgs.DataClassTable">
            <summary>
            The data class object in this transaction
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSATransactionEventArgs.StoredProcObject">
            <summary>
            The stored procedure object in this transaction
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.DataClasses.PDSATransactionEventArgs.Cancel">
            <summary>
            Get/Set this property if you wish to cancel the transaction or not
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.Configuration.PDSADBSchemaConfigProvider">
            <summary>
            Class to hold a information about a PDSADBSchema provider from the config file.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.Configuration.PDSADBSchemaConfigProvider.DataProviderName">
            <summary>
            Get/Set the Data Provider Name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.Configuration.PDSADBSchemaConfigProvider.FilterOutSchemas">
            <summary>
            Get/Set which schemas in the database server you wish to not see when reading schema information
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.Configuration.PDSADBSchemaConfigProvider.UserNameIsSchemaName">
            <summary>
            Get/Set whether or not the user name is the schema name in the database system.
            The default is false
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.Configuration.PDSADBSchemaConfigProvider.UpperCaseSchemaNames">
            <summary>
            Get/Set whether or not to upper case all schema names in the database server.
            The default is false.
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.Configuration.PDSADBSchemaConfigProviderCollection">
            <summary>
            A class to hold a collection of PDSADBSchemaConfigProvider objects
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.Configuration.PDSADBSchemaConfigProviders">
            <summary>
            A collection of all PDSADBSchema providers listed in the config file.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.Configuration.PDSADBSchemaConfigProviders.DefaultProvider">
            <summary>
            Get/Set the Default Provider for the Schema Provider
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.Configuration.PDSADBSchemaConfigProviders.UserLanguage">
            <summary>
            Get the Language for all Messages
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Configuration.PDSADBSchemaConfigProviders.CreateNewElement">
            <summary>
            Creates a new PDSADBSchemaConfigProvider
            </summary>
            <returns>A PDSADBSchemaConfigProvider object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Configuration.PDSADBSchemaConfigProviders.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns the Provider name
            </summary>
            <param name="element">A ConfigurationElement object</param>
            <returns>A provider name</returns>
        </member>
        <member name="P:PDSA.DataLayer.Schema.Configuration.PDSADBSchemaConfigProviders.CollectionType">
            <summary>
            Returns ConfigurationElementCollectionType.BasicMap
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.Configuration.PDSADBSchemaConfigProviders.ElementName">
            <summary>
            Returns 'add'
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.Configuration.PDSADBSchemaSectionHandler">
            <summary>
            Class to hold the config file information for the PDSADBSchema providers
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.Configuration.PDSADBSchemaSectionHandler.ConfigProviders">
            <summary>
            A collection of providers for the PDSADBSchema section
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSADBSchemaException">
            <summary>
            Pass any exception into this class to get a complete list of all of the parameters, and all inner exceptions.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaException.#ctor">
            <summary>
            Constructor for the PDSADBSchemaException class
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the PDSADBSchemaException class
            </summary>
            <param name="message">A message for this exception</param>
            <param name="theException">An exception to make an Inner Excetion</param>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaException.#ctor(System.String,System.Exception,System.String,System.String)">
            <summary>
            Constructor for the PDSADBSchemaException class
            </summary>
            <param name="message">A message for this exception</param>
            <param name="theException">An exception to make an Inner Excetion</param>
            <param name="className">The class which raised this exception</param>
            <param name="methodName">The method which raised this exception</param>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaException.Init">
            <summary>
            Initialize the Exception object
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaException.ParameterInfo">
            <summary>
            Get/Set the parameter info present when the exception was raised
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaException.SQL">
            <summary>
            Get/Set the SQL that was being used when the exception was raised
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaException.ConnectString">
            <summary>
            Get/Set the connection string that was being used when the exception was raised
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaException.ConfigProvider">
            <summary>
            Get/Set the Configuration Provider that was being used when the exception was raised
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaException.Provider">
            <summary>
            Get/Set the PDSADBSchemaProvider object
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaException.GetFullExceptionMessage(System.Boolean)">
            <summary>
            Returns the full exception message
            </summary>
            <param name="retrieveFullMessage">Return a partial or full exception message</param>
            <returns>An exception message</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaException.ToString">
            <summary>
            Override of the ToString method. Returns the full exception message
            </summary>
            <returns>A full exception message.</returns>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaCommentInfo">
            <summary>
            Class to hold comment information for a database server.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaCommentInfo.#ctor">
            <summary>
            Constructor for the PDSASchemaCommentInfo class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaCommentInfo.CommentStart">
            <summary>
            Get/Set the Comment start character(s) such as /*
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaCommentInfo.CommentEnd">
            <summary>
            Get/Set the Commend end character(s) such as */
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaCommentInfo.IsMultiLine">
            <summary>
            Get/Set whether or not this comment can go across multiple lines
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaCommentInfoList">
            <summary>
            A collection of PDSASchemaCommandInfo objects
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaDataType">
            <summary>
            Class to hold information about Data Types
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaDataType.#ctor">
            <summary>
            Constructor for the PDSASchemaDataType class
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaDataType.#ctor(System.String)">
            <summary>
            Constructor for the PDSASchemaDataType class
            </summary>
            <param name="dataType">Pass in a data type to assign</param>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaDataType.DataType">
            <summary>
            Get/Set the Database DataType
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaDataType.DotNetDataType">
            <summary>
            Get/Set the .NET DataType
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaDataType.XmlDataType">
            <summary>
            Get/Set the XML (xsd) DataType
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaDataTypes">
            <summary>
            A Collection class of PDSASchemaDataType objects
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaDataTypes.Exists(System.String)">
            <summary>
            Does a Data Type exist in this collection
            </summary>
            <param name="dataType">The data type to locate</param>
            <returns>True if found, false otherwise</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaDataTypes.GetByName(System.String)">
            <summary>
            Return a PDSASchemaDataType object for the data type passed in
            </summary>
            <param name="dataType">The data type to locate</param>
            <returns>A PDSASchemaDataType object or null if not found</returns>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaKeyword">
            <summary>
            Class to hold information about keywords in a database server
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaKeyword.#ctor">
            <summary>
            Constructor for the PDSASchemaKeyword class
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaKeyword.#ctor(System.String)">
            <summary>
            Constructor for the PDSASchemaKeyword class
            </summary>
            <param name="keyWord">The keyword to initialize this class with</param>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaKeyword.Keyword">
            <summary>
            Get/Set the keyword
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaKeywords">
            <summary>
            A collection class to hold PDSASchemaKeyword objects
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaKeywords.Exists(System.String)">
            <summary>
            Returns true if the keyword exists in this collection
            </summary>
            <param name="keyWord">The keyword to locate</param>
            <returns>True if found, otherwise false</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaKeywords.GetByName(System.String)">
            <summary>
            Returns a PDSASchemaKeyword object based on they keyword passed in
            </summary>
            <param name="keyWord">The keyword to locate</param>
            <returns>A PDSASchemaKeyword object or null if not found</returns>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaProcedureInfo">
            <summary>
            A class to hold information about Stored Procedures
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaProcedureInfo.ProcedureStatement">
            <summary>
            The statement used to delimit a procedure or function.
            For example: CREATE PROCEDURE, CREATE FUNCTION, etc.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaProcedureInfo.ParameterStartToken">
            <summary>
            The statement used to separate the name of the procedure from the parameters of the procedure.
            For example: an open parentheses ( for a function in SQL Server, or an empty string in the case of procedure.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaProcedureInfo.ParameterEndToken">
            <summary>
            The statement used to separate the parameters of the procedure from the body of the procedure.
            For example: a close parentheses ) for a function in SQL Server, or AS in the case of procedure. In Oracle, this could be IS or AS.
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaProcedureInfoList">
            <summary>
            A collection class of PDSASchemaProcedureInfo objects
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaGenericDataType">
            <summary>
            Enumeration for the PDSA Generic Data Types
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.Schema.PDSASchemaGenericDataType.StringType">
            <summary>
            Generic String Type
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.Schema.PDSASchemaGenericDataType.NumericType">
            <summary>
            Generic Numeric Type
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.Schema.PDSASchemaGenericDataType.DateType">
            <summary>
            Generic Date Type
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.Schema.PDSASchemaGenericDataType.BinaryType">
            <summary>
            Generic Binary Type
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.Schema.PDSASchemaGenericDataType.GUIDType">
            <summary>
            Generic GUID Type
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.Schema.PDSASchemaGenericDataType.TimeStampType">
            <summary>
            Generic TimeStamp Type
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.Schema.PDSASchemaGenericDataType.VariantType">
            <summary>
            Generic Variant Type
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.Schema.PDSASchemaGenericDataType.ObjectType">
            <summary>
            Generic Object Type
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaSqlType">
            <summary>
            The type of Schema we are currently generating
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.Schema.PDSASchemaSqlType.Unknown">
            <summary>
            Unknown SQL Type
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.Schema.PDSASchemaSqlType.Select">
            <summary>
            SQL Select Type
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.Schema.PDSASchemaSqlType.Insert">
            <summary>
            SQL INSERT Type
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.Schema.PDSASchemaSqlType.Update">
            <summary>
            SQL UPDATE Type
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.Schema.PDSASchemaSqlType.Delete">
            <summary>
            SQL DELETE Type
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSADBSchemaEventArgs">
            <summary>
            This class is used when raising events from the Schema Reading process
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaEventArgs.DBObjectName">
            <summary>
            Get/Set the database object name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaEventArgs.ClassName">
            <summary>
            Get/Set the class name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaEventArgs.MethodName">
            <summary>
            Get/Set the method name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaEventArgs.Message">
            <summary>
            Get/Set a message to display
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaEventArgs.LastException">
            <summary>
            Get/Set the last exception that occurred during schema reading
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaEventArgs.CompletedWithErrors">
            <summary>
            Get/Set whether or not the last operation completed, but with errors.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaEventArgs.Cancel">
            <summary>
            Get/Set whether or not to cancel the current schema operation
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaEventArgs.TotalCounted">
            <summary>
            Get/Set how many items counted so far
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSADBSchemaManager">
            <summary>
            The Manager class that reads in all PDSADBSchemaProvider objects and initializes a PDSADBSchemaProvider object
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaManager.#ctor">
            <summary>
            Constructor for PDSADBSchemaManager
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaManager.Provider">
            <summary>
            Get/Set the PDSADBSchemaProvider object
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaManager.ConfigurationProvider">
            <summary>
            Get/Set the PDSADBSchemaConfigProvider object
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaManager.ConfigurationProviders">
            <summary>
            Get/Set the PDSADBSchemaConfigProviders collection object
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaManager.Reset">
            <summary>
            Reset all objects to null
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaManager.GetProviderNames">
            <summary>
            Return a collection of PDSADBSchemaConfigProvider objects
            </summary>
            <returns>A collection of PDSADBSchemaConfigProvider objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaManager.GetDefaultProviderName">
            <summary>
            Returns the Default DB Schema Provider Name
            </summary>
            <returns>A string</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaManager.GetDefaultProvider">
            <summary>
            Returns an instance of a PDSADBSchemaProvider object that is the default specified in the config file
            </summary>
            <returns>A PDSADBSchemaProvider object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaManager.GetProvider(System.String)">
            <summary>
            Returns a specific instance of a PDSADBSchemaProvider object based on the provider name passed in
            </summary>
            <param name="providerName">A provider name</param>
            <returns>A PDSADBSchemaProvider object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaManager.GetProvider(System.String,System.String)">
            <summary>
            Returns a specific instance of a PDSADBSchemaProvider object based on the provider name passed in
            </summary>
            <param name="providerName">A provider name</param>
            <param name="keyNameForCache">Return a provider from the cache</param>
            <returns>A PDSADBSchemaProvider object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaManager.GetProvidersCollection">
            <summary>
            Returns a collection of PDSADBSchemaConfigProvider objects
            </summary>
            <returns>A collection of PDSADBSchemaConfigProvider objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaManager.GetConnectionString">
            <summary>
            Get connection string from the current provider
            </summary>
            <returns>A connection string</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaManager.GetConnectionString(System.String)">
            <summary>
            Get connection string from the passed in Schema Provider Name
            </summary>
            <param name="schemaProviderName">A Provider Name</param>
            <returns>A connection string</returns>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSADBSchemaProvider">
            <summary>
            Base class for all PDSADBSchemaProvider classes
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.#ctor">
            <summary>
            Constructor for PDSADBSchemaProvider class
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSADBSchemaProvider.InfoMessageEventHandler">
            <summary>
            Delegate for displaying Informational messages
            </summary>
            <param name="sender">object from which event is raised</param>
            <param name="e">a PDSADBSchemaEventArgs object</param>
        </member>
        <member name="E:PDSA.DataLayer.Schema.PDSADBSchemaProvider.ReportInfoMessage">
            <summary>
            Event to raise an information message
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSADBSchemaProvider.ErrorMessageEventHandler">
            <summary>
            Delegate for displaying error messages
            </summary>
            <param name="sender">object from which event is raised</param>
            <param name="e">a PDSADBSchemaEventArgs object</param>
        </member>
        <member name="E:PDSA.DataLayer.Schema.PDSADBSchemaProvider.ReportErrorMessage">
            <summary>
            Event to raise an error message
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSADBSchemaProvider.ObjectsCountedEventHandler">
            <summary>
            Delegate for displaying Objects Counted Event
            </summary>
            <param name="sender">object from which event is raised</param>
            <param name="e">a PDSADBSchemaEventArgs object</param>
        </member>
        <member name="E:PDSA.DataLayer.Schema.PDSADBSchemaProvider.ObjectsCounted">
            <summary>
            Event to raise an information message
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.RaiseInfoMessage(PDSA.DataLayer.Schema.PDSADBSchemaEventArgs)">
            <summary>
            Method to call to raise an informational message
            </summary>
            <param name="e">a PDSADBSchemaEventArgs object</param>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.RaiseErrorMessage(PDSA.DataLayer.Schema.PDSADBSchemaEventArgs)">
            <summary>
            Method to call to raise an error message
            </summary>
            <param name="e">a PDSADBSchemaEventArgs object</param>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.RaiseObjectsCounted">
            <summary>
            Method to call to raise an ObjectsCounted Event
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.Schema.PDSADBSchemaProvider.mEventArgs">
            <summary>
            An PDSADBSchemaEventArgs object
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaProvider.ConfigurationProvider">
            <summary>
            Get/Set a PDSADBSchemaConfigProvider object. This object is created from the information in the config file.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaProvider.ConfigurationProviders">
            <summary>
            Get/Set the collection of configuration providers
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaProvider.ProviderName">
            <summary>
            Get/Set a provider name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DataSetObject">
            <summary>
            Get/Set the last DataSet object to be created when reading schema data
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DefaultSchemaName">
            <summary>
            Get/Set a default schema name to read schema information from
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaProvider.SetFormatOnly">
            <summary>
            Get/Set whether or not to issue a SET FORMAT ONLY command prior to submitting a stored procedure
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaProvider.NumberOfObjectsToRaiseEvent">
            <summary>
            Get/Set when to raise the ObjectsCounted Event. Default is 25
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaProvider.RaiseEvents">
            <summary>
            Get/Set whether or not to raise events as the schema information is loaded
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DatabaseType">
            <summary>
            Get/Set the database type that you are currently reading schema information for
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DataProviderName">
            <summary>
            Get/Set the Data Layer provider name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DataProvider">
            <summary>
            Get/Set the Data Provider to use for communicating with the database
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaProvider.IncludeSystemObjects">
            <summary>
            Get/Set whether or not to include system objects when reading schema data
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaProvider.FilterOutSchemas">
            <summary>
            Get/Set a comma-delimited list of schema names that you do NOT wish to include when reading schema data
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaProvider.SQL">
            <summary>
            Get/Set the last SQL statement issued when reading schema data
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaProvider.LastErrorMessage">
            <summary>
            Get/Set the last error message reported when reading schema data
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaProvider.CommentInfo">
            <summary>
            Get/Set a PDSASchemaCommentInfoList object that holds comment information for the current database provider
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaProvider.ProcedureInfo">
            <summary>
            Get/Set a PDSASchemaProcedureInfoList object that holds information about stored procedures in the current data provider
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaProvider.Keywords">
            <summary>
            Get/Set a PDSASchemaKeywords object that holds a list of keywords for the current database system
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DataTypes">
            <summary>
            Get/Set a PDSASchemaDataTypes which contains a list of data types for the database
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetUserIDFromConnectString">
            <summary>
            Returns the "user id" value from a connection string
            </summary>
            <returns>A user id</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetPasswordFromConnectString">
            <summary>
            Returns the "password" value from a connection string
            </summary>
            <returns>A password</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetDataSourceFromConnectString">
            <summary>
            Returns the "data source" value from a connection string
            </summary>
            <returns>A data source</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetCatalogFromConnectString">
            <summary>
            Returns the "catalog" value from a connection string
            </summary>
            <returns>The value for the catalog from the connection string</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetOtherAttributeFromConnectString(System.String)">
            <summary>
            Gets any other value for the key passed in
            </summary>
            <param name="key">The key to find in a connecton string</param>
            <returns>The value for the key</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DBMSProductName">
            <summary>
            The name of the current database provider. 
            </summary>
            <returns>name of database</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.ColumnNamesMustBeUpperCase">
            <summary>
            Override this if the database requires all column names to be upper case. The default is false.
            </summary>
            <returns>A boolean</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.SupportsCascadeDelete">
            <summary>
            Override this to set whether or not the database supports cascade deletes. The default is True.
            </summary>
            <returns>A boolean</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.SupportsCascadeUpdate">
            <summary>
            Override this to set whether or not the database supports cascade updates. The default is True.
            </summary>
            <returns>A boolean</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.SupportsConstraints">
            <summary>
            Override this to set whether or not the database supports constraints. The default is True.
            </summary>
            <returns>A boolean</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.SupportsNull">
            <summary>
            Override this to set whether or not the database supports nulls. The default is True.
            </summary>
            <returns>A boolean</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.SupportsAutoIncrement">
            <summary>
            Override this to set whether or not the database supports auto number columns. The default is True.
            </summary>
            <returns>A boolean</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.UseCommitOnInsert">
            <summary>
            Override this to set whether or not the database needs to submit a commit on INSERT. The default is True.
            </summary>
            <returns>A boolean</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetDBTypeFromString(System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
             This method checks only for .NET data types
             This method can be called when using a DataSet and it returns the data types as .NET types.
            </summary>
            <param name="dbType">The type from the database</param>
            <param name="precision">The precision from the database (or -1 if not applicable)</param>
            <param name="scale">The scale from the database (or -1 if not applicable)</param>
            <param name="wasSet">Passed by reference. Set to true if DbType is set, otherwise false</param>
            <returns>A DbType value</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetGenericDataType(System.String)">
            <summary>
            Given a specific SQL Server data type, returns a PDSASchemaGenericDataType enumeration value
            </summary>
            <param name="DataType">A SQL Server data type</param>
            <returns>A PDSASchemaGenericDataType value</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetGenericDataTypeAsString(PDSA.DataLayer.Schema.PDSASchemaGenericDataType)">
            <summary>
            Returns a string of what ever the genericType is that is passed in.
            </summary>
            <param name="genericType">A genericType enumeration.</param>
            <returns>A string representing the generic type</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.ProcedureNameCleanUp(System.String)">
            <summary>
            Override if you need to do some clean up on procedure names for your database.
            </summary>
            <param name="procedureName">A procedure name</param>
            <returns>A string</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.ConvertToBoolean(System.Object)">
            <summary>
            Returns a true value if the 'value' parameter is "True", "Yes", "Y", "1", or "-1", otherwise returns false
            </summary>
            <param name="value">An object value that contains a string to evaluate</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.ReplaceParameterSymbol(System.String)">
            <summary>
            Replaces the "@" symbol with the ParameterPrefixForADONETCommands specified for this data provider.
            </summary>
            <param name="sql">An SQL string</param>
            <returns>A SQL string</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.CreateCommentInfo">
            <summary>
            Create a collection of PDSASchemaCommentInfo objects that describe the different comments used in SQL Server.
            </summary>
            <returns>A PDSASchemaCommentInfo object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.CreateProcedureInfo">
            <summary>
            Create a collection of PDSASchemaProcedureInfo objects that describe the various tokens used to create a stored procedure in SQL Server
            </summary>
            <returns>A collection of PDSASchemaProcedureInfo objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.AddToDataTypesList(System.String)">
            <summary>
            Adds a data type to the collection of PDSASchemaDataType objects
            </summary>
            <param name="sqlDataType">The data type to add</param>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.AddToDataTypesList(System.String,System.String)">
            <summary>
            Adds a data type to the collection of PDSASchemaDataType objects
            </summary>
            <param name="sqlDataType">The sql data type to add</param>
            <param name="dotNetType">The .NET data type to add</param>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.AddToDataTypesList(System.String,System.String,System.String)">
            <summary>
            Adds a data type to the collection of PDSASchemaDataType objects
            </summary>
            <param name="sqlDataType">The sql data type to add</param>
            <param name="dotNetType">The .NET data type to add</param>
            <param name="xmlType">The xml (xsd) data type to add</param>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.CreateDataTypes">
            <summary>
            Create Data Types Collection. Override this to create a custom list for your database.
            </summary>
            <returns>A collection of PDSASchemaDataType objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.AddToKeywordList(System.String)">
            <summary>
            Add a keyword to the collection of PDSASchemaKeyword objects
            </summary>
            <param name="keyWord">The keyword to add</param>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.CreateKeywords">
            <summary>
            Create a list of keywords for a database. This returns a collection of PDSASchemaKeyword objects.
            </summary>
            <returns>A collection of PDSASchemaKeyword objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetCatalogsSQL">
            <summary>
            Returns a SQL statement to retieve all catalogs/databases.
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetCatalogCountSQL">
            <summary>
            Returns a SQL statement to count all catalogs/databases.
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetCatalogCount">
            <summary>
            Executes the appropriate SQL to get a count of all catalogs/databases in a database system
            </summary>
            <returns>A count of catalogs</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetCatalogs">
            <summary>
            Returns a collection of PDSASchemaCatalog objects
            </summary>
            <returns>A collection of PDSASchemaCatalog objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetSchemasSQL">
            <summary>
            Returns a SQL statement to retieve all schemas.
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetSchemaCountSQL">
            <summary>
            Returns a SQL statement to count all schemas.
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DoesSchemaExistSQL">
            <summary>
            Returns a SQL statement to determine if a schema exists.
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetSchemas">
            <summary>
            Executes the appropriate SQL and returns a collection of PDSASchema objects
            </summary>
            <returns>A collection of PDSASchema objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetSchemas(System.Boolean)">
            <summary>
            Executes the appropriate SQL and returns a collection of PDSASchema objects
            </summary>
            <param name="filterOutSystemSchemas">Set to true if you wish to filter out the system schemas</param>
            <returns>A collection of PDSASchema objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetSchemaCount">
            <summary>
            Executes the appropriate SQL and returns a count of how schemas there are
            </summary>
            <returns>A count of schemas</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DoesSchemaExist(System.String)">
            <summary>
            Executes the appropriate SQL and returns whether or not a schema exists
            </summary>
            <param name="schemaName">A schema name</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetTablesSQL">
            <summary>
            Returns a SQL statement to get all tables
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetTablesSchemaSQL">
            <summary>
            Returns a SQL statement to get all tables in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetTablesSchemaTableSQL">
            <summary>
            Returns a SQL statement to get all tables that match a 'LIKE' in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetTableCountSQL">
            <summary>
            Returns a SQL statement to count all tables
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetTableCountSchemaSQL">
            <summary>
            Returns a SQL statement to count all tables in a schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DoesTableExistSQL">
            <summary>
            Returns a SQL statement to determine if a table exists
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetTableSQL">
            <summary>
            Returns a SQL statement to get information about a specific table
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetTableStructureAsDataSetSQL(System.String,System.String)">
            <summary>
            Returns a SQL statement that can be used to build a blank DataSet for a specific table.
            </summary>
            <param name="schemaName">A schema name</param>    
            <param name="tableName">A stored procedure name</param>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetTables">
            <summary>
            Returns a collection of PDSASchemaTable objects
            </summary>
            <returns>A collection of PDSASchemaTable objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetTables(System.Boolean)">
            <summary>
            Returns a collection of PDSASchemaTable objects
            </summary>
            <param name="loadColumns">Load columns into PDSASchemaTable object?</param>
            <returns>A collection of PDSASchemaTable objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetTables(System.String)">
            <summary>
            Returns a collection of PDSASchemaTable objects within a specific schema
            </summary>
            <param name="schemaName">A schema name (or partial name for a 'LIKE' search)</param>
            <returns>A collection of PDSASchemaTable objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetTables(System.String,System.String)">
            <summary>
            Returns a collection of PDSASchemaTable objects within a specific schema
            </summary>
            <param name="schemaName">A schema name (or partial name for a 'LIKE' search)</param>
            <param name="tableName">A table name (or partial name for a 'LIKE' search)</param>
            <returns>A collection of PDSASchemaTable objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetTables(System.String,System.String,System.Boolean)">
            <summary>
            Returns a collection of PDSASchemaTable objects
            </summary>
            <param name="schemaName">A schema name (or partial name for a 'LIKE' search)</param>
            <param name="tableName">A table name (or partial name for a 'LIKE' search)</param>
            <param name="loadColumns">Load columns into PDSASchemaTable object?</param>
            <returns>A collection of PDSASchemaTable objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetTablesAndRelatedTables(System.String,System.String,System.Boolean)">
            <summary>
            Returns a collection of PDSASchemaTable objects. For each table returned, it will also look up any FK related tables and load those as well.
            </summary>
            <param name="schemaName">A schema name (or partial name for a 'LIKE' search)</param>
            <param name="tableName">A table name (or partial name for a 'LIKE' search)</param>
            <param name="loadColumns">Load columns into PDSASchemaTable object?</param>
            <returns>A collection of PDSASchemaTable objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetTableFKTablesAndChildTables(System.String,System.String,System.Boolean)">
            <summary>
            Returns a collection of PDSASchemaTable objects. For each table returned, it will also look up any FK related tables and child tables, and load those as well.
            </summary>
            <param name="schemaName">A schema name (or partial name for a 'LIKE' search)</param>
            <param name="tableName">A table name (or partial name for a 'LIKE' search)</param>
            <param name="loadColumns">Load columns into PDSASchemaTable object?</param>
            <returns>A collection of PDSASchemaTable objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetTableCount">
            <summary>
            Gets the total table count
            </summary>
            <returns>A count of tables</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetTableCount(System.String)">
            <summary>
            Gets the total table count within a schema
            </summary>
            <param name="schemaName">A schema name</param>
            <returns>A table count</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DoesTableExist(System.String)">
            <summary>
            Returns whether or not the table name passed in exists.
            </summary>
            <param name="tableName">A table name</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DoesTableExist(System.String,System.String)">
            <summary>
            Returns whether or not the table name passed in exists.
            </summary>
            <param name="schemaName">A schema name</param>
            <param name="tableName">A Table name</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetTable(System.String,System.String)">
            <summary>
            Returns a specific PDSASchemaTable object for a table passed in.
            </summary>
            <param name="schemaName">A Schema name</param>
            <param name="tableName">A Table Name</param>
            <returns>A PDSASchemaTable object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetTable(System.String,System.String,System.Boolean)">
            <summary>
            Returns a specific PDSASchemaTable object for a table passed in.
            </summary>
            <param name="schemaName">A Schema name</param>
            <param name="tableName">A Table Name</param>
            <param name="loadAllInfo">Load all column, PKs, FKs, etc. info?</param>
            <returns>A PDSASchemaTable object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetTableStructureAsDataSet(System.String)">
            <summary>
            Returns a DataSet object with no data, but with the structure of the table.
            </summary>
            <param name="tableName">A table name</param>
            <returns>A DataObject object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetTableStructureAsDataSet(System.String,System.String)">
            <summary>
            Returns a DataSet object with no data, but with the structure of the table.
            </summary>
            <param name="schemaName">A Schema name</param>
            <param name="tableName">A table name</param>
            <returns>A DataObject object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetViewsSQL">
            <summary>
            Returns a SQL statement to get all views
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetViewsSchemaSQL">
            <summary>
            Returns a SQL statement to get all views in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetViewsSchemaViewSQL">
            <summary>
            Returns a SQL statement to get all views that match a LIKE in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetViewCountSQL">
            <summary>
            Returns a SQL statement to count all views
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetViewCountSchemaSQL">
            <summary>
            Returns a SQL statement to count all views in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DoesViewExistSQL">
            <summary>
            Returns a SQL statement to determine if a view exists
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetViewSQL">
            <summary>
            Returns a SQL statement to get information about a specific view
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetViewStructureAsDataSetSQL(System.String,System.String)">
            <summary>
            Returns a SQL statement that can be used to build a blank DataSet of a view
            </summary>
            <param name="schemaName">A schema name</param>
            <param name="viewName">A view name</param>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetViews">
            <summary>
            Returns a collection of PDSASchemaView objects
            </summary>
            <returns>A collection of PDSASchemaView objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetViews(System.Boolean)">
            <summary>
            Returns a collection of PDSASchemaView objects
            </summary>
            <param name="loadColumns">Whether or not to load all columns</param>
            <returns>A collection of PDSASchemaView objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetViews(System.String)">
            <summary>
            Returns a collection of PDSASchemaView objects within a specific schema
            </summary>
            <param name="schemaName">A Schema Name (or partial name for a 'LIKE' search)</param>
            <returns>A collection of PDSASchemaView objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetViews(System.String,System.String)">
            <summary>
            Returns a collection of PDSASchemaView objects within a specific schema
            </summary>
            <param name="schemaName">A Schema Name (or partial name for a 'LIKE' search)</param>
            <param name="viewName">A View Name (or partial name for a 'LIKE' search)</param>
            <returns>A collection of PDSASchemaView objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetViews(System.String,System.String,System.Boolean)">
            <summary>
            Returns a collection of PDSASchemaView objects within a specific schema
            </summary>
            <param name="schemaName">A Schema Name (or partial name for a 'LIKE' search)</param>
            <param name="viewName">A View Name (or partial name for a 'LIKE' search)</param>
            <param name="loadColumns">Whether or not to load all columns</param>
            <returns>A collection of PDSASchemaView objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetViewCount">
            <summary>
            Returns a count of all views
            </summary>
            <returns>A count of all views</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetViewCount(System.String)">
            <summary>
            Returns a count of all views in a schema
            </summary>
            <param name="schemaName">A Schema Name</param>
            <returns>A count of all views</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DoesViewExist(System.String)">
            <summary>
            Does a specific view exist?
            </summary>
            <param name="viewName">A View Name</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DoesViewExist(System.String,System.String)">
            <summary>
            Does a specific view exist?
            </summary>
            <param name="schemaName">A Schema name</param>
            <param name="viewName">A view name</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetView(System.String,System.String)">
            <summary>
            Returns a PDSASchemaView object with the information for a view.
            </summary>
            <param name="schemaName">A Schema Name</param>
            <param name="viewName">A view name</param>
            <returns>A PDSASchemaView object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetView(System.String,System.String,System.Boolean)">
            <summary>
            Returns a PDSASchemaView object with the information for a view.
            </summary>
            <param name="schemaName">A Schema Name</param>
            <param name="viewName">A view name</param>
            <param name="loadAllInfo">Load the PDSASchemaView object with all column and index info?</param>
            <returns>A PDSASchemaView object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetViewStructureAsDataSet(System.String)">
            <summary>
            Returns a DataSet with no data but the structure of the view
            </summary>
            <param name="viewName">A view name</param>
            <returns>A DataSet</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetViewStructureAsDataSet(System.String,System.String)">
            <summary>
            Returns a DataSet with no data but the structure of the view
            </summary>
            <param name="schemaName">A schema name</param>
            <param name="viewName">A view name</param>
            <returns>A DataSet</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DoesColumnExistSQL">
            <summary>
            Returns a SQL statement to determine if a specific column exists in a table
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetColumnsSQL">
            <summary>
            Returns a SQL statement to get all columns in a catalog/database
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetColumnsSchemaSQL">
            <summary>
            Returns a SQL statement to get all columns in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetColumnsSchemaTableSQL">
            <summary>
            Returns a SQL statement to get all columns in a specific table
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetColumnsSchemaTableColumnSQL">
            <summary>
            Returns a SQL statement to get a specific column in a specific table
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DoesColumnExist(System.String,System.String)">
            <summary>
            Returns whether or not a column exists in a specific table
            </summary>
            <param name="tableName">A table name</param>
            <param name="columnName">A column name</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DoesColumnExist(System.String,System.String,System.String)">
            <summary>
            Returns whether or not a column exists in a specific table
            </summary>
            <param name="schemaName">A Schema Name</param>
            <param name="tableName">A table name</param>
            <param name="columnName">A column name</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetColumns">
            <summary>
            Returns a collection of PDSASchemaColumn objects
            </summary>
            <returns>A collection of PDSASchemaColumn objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.CreateColumnFromDataRow(System.Data.DataRow)">
            <summary>
            Creates a PDSASchemaColumn object from a DataRow object
            </summary>
            <param name="dr">A DataRow object</param>
            <returns>A PDSASchemaColumn object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetColumns(System.String)">
            <summary>
            Returns a collection of PDSASchemaColumn objects within a schema
            </summary>
            <param name="schemaName">A schema name</param>
            <returns>A collection of PDSASchemaColumn objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetColumns(System.String,System.String)">
            <summary>
            Returns a collection of PDSASchemaColumn objects within a table
            </summary>
            <param name="schemaName">A schema name</param>
            <param name="tableName">A table name</param>
            <returns>A collection of PDSASchemaColumn objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.SetCodeGenerationPropertiesOnColumns(System.String,System.String,PDSA.DataLayer.Schema.PDSASchemaColumns)">
            <summary>
            Set Code Generation Properties for all columns read in a particular schema.table.
            This needs to be called after you have already retrieved a collection of Column objects
            </summary>
            <param name="schemaName">A schema name</param>
            <param name="tableName">A table name</param>
            <param name="cols">A Collection of PDSASchemaColumn objects</param>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetColumn(System.String,System.String,System.String)">
            <summary>
            Returns a specific PDSASchemaColumn object within a table
            </summary>
            <param name="schemaName">A schema name</param>
            <param name="tableName">A table name</param>
            <param name="columnName">A column name</param>
            <returns>A PDSASchemaColumn object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.IsColumnPrimaryKeySQL">
            <summary>
            Returns a SQL statement to determine if a specific column in a table is a primary key
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetPrimaryKeysSQL">
            <summary>
            Returns a SQL statement to get all primary keys in a database
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetPrimaryKeysSchemaSQL">
            <summary>
            Returns a SQL statement to get all primary keys in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetPrimaryKeyInfoSQL">
            <summary>
            Returns a SQL statement to get information about a specific primary key for a table
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.IsPrimaryKeyAutoNumberSQL">
            <summary>
            Returns a SQL statement to determine if a primary key is any auto number
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.IsColumnPrimaryKey(System.String,System.String)">
            <summary>
            Returns whether or not a column is a primary key on a table
            </summary>
            <param name="tableName">A table name</param>
            <param name="columnName">A column name</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.IsColumnPrimaryKey(System.String,System.String,System.String)">
            <summary>
            Returns whether or not a column is a primary key on a table
            </summary>
            <param name="schemaName">A Schema Name</param>
            <param name="tableName">A table name</param>
            <param name="columnName">A column name</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetPrimaryKeys">
            <summary>
            Returns a collection of PDSASchemaPrimaryKey objects
            </summary>
            <returns>A collection of PDSASchemaPrimaryKey objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetPrimaryKeys(System.String)">
            <summary>
            Returns a collection of PDSASchemaPrimaryKey objects within a schema
            </summary>
            <param name="schemaName">A Schema Name</param>
            <returns>A collection of PDSASchemaPrimaryKey objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetPrimaryKeyFromDataRow(System.Data.DataRow)">
            <summary>
            Returns a PDSASchemaPrimaryKey object from the information in a DataRow object
            </summary>
            <param name="dr">A DataRow object</param>
            <returns>A PDSASchemaPrimaryKey object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetPrimaryKeyInfo(System.String)">
            <summary>
            Returns a PDSASchemaPrimaryKey object for a table
            </summary>
            <param name="tableName">A table name</param>
            <returns>A PDSASchemaPrimaryKey object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetPrimaryKeyInfo(System.String,System.String)">
            <summary>
            Returns a PDSASchemaPrimaryKey object for a table
            </summary>
            <param name="schemaName">A schema name</param>
            <param name="tableName">A table name</param>
            <returns>A PDSASchemaPrimaryKey object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.IsPrimaryKeyAutoNumber(System.String)">
            <summary>
            Is a primary key on a table an auto number?
            </summary>
            <param name="tableName">A table name</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.IsPrimaryKeyAutoNumber(System.String,System.String)">
            <summary>
            Is a primary key on a table an auto number?
            </summary>
            <param name="schemaName">A Schema name</param>
            <param name="tableName">A table name</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetForeignKeysSQL">
            <summary>
            Returns a SQL statement to get all foreign keys in a database
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetForeignKeysSchemaSQL">
            <summary>
            Returns a SQL statement to get all foreign keys in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetForeignKeysSchemaTableSQL">
            <summary>
            Returns a SQL statement to get all foreign keys for a specific table
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetPrimaryKeyTableFromForeignKeySQL">
            <summary>
            Returns a SQL statement to get the primary key table information for a specific foreign key
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetForeignKeys">
            <summary>
            Get All Foreign Keys in a Catalog/Database
            </summary>
            <returns>A Collection of PDSASchemaForeignKey objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetForeignKeys(System.String)">
            <summary>
            Returns a Collection of Foreign Keys in a specific schema
            </summary>
            <param name="schemaName">A Schema Name</param>
            <returns>A Collection of PDSASchemaForeignKey object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetForeignKeys(System.String,System.String)">
            <summary>
            Returns a Collection of Foreign Keys for a table or all in a schema if the tableName parameter is left blank
            </summary>
            <param name="schemaName">A Schema name</param>
            <param name="tableName">A table name</param>
            <returns>A Collection of PDSASchemaForeignKey object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.CreateForeignKeyFromDataRow(System.Data.DataRow)">
            <summary>
            Creates a PDSASchemaForeignKey object from a DataRow object
            </summary>
            <param name="dr">A DataRow object</param>
            <returns>A PDSASchemaForeignKey object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetPrimaryKeyTableFromForeignKey(System.String,System.String)">
            <summary>
            Returns a PDSASchemaTable object
            </summary>
            <param name="schemaName">A Schema Name</param>
            <param name="constraintName">A Constraint Name</param>
            <returns>A PDSASchemaTable object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.IsColumnForeignKey(System.String,System.String)">
            <summary>
            Returns whether or not a column is a foreign key column
            </summary>
            <param name="tableName">A table name</param>
            <param name="columnName">A column name</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.IsColumnForeignKey(System.String,System.String,System.String)">
            <summary>
            Returns whether or not a column is a foreign key column
            </summary>
            <param name="schemaName">A schema name</param>
            <param name="tableName">A table name</param>
            <param name="columnName">A column name</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetChildTables(System.String,System.String)">
            <summary>
            Returns a Collection of Child Tables in a specific schema for a specific table
            </summary>
            <param name="schemaName">A Schema name</param>
            <param name="tableName">A table name</param>
            <returns>A Collection of PDSASchemaTable objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetUniqueConstraintsSQL">
            <summary>
            Returns a SQL statement to get all unique constraints in a database
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetUniqueConstraintsSchemaSQL">
            <summary>
            Returns a SQL statement to get all unique constraints in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetUniqueConstraintsSchemaTableSQL">
            <summary>
            Returns a SQL statement to get all unique constraints in a specific table
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetUniqueConstraints">
            <summary>
            Returns a collection of PDSASchemaUniqueConstraint objects
            </summary>
            <returns>A collection of PDSASchemaUniqueConstraint objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetUniqueConstraints(System.String)">
            <summary>
            Returns a collection of PDSASchemaUniqueConstraint objects within a schema
            </summary>
            <param name="schemaName">A schema name</param>
            <returns>A collection of PDSASchemaUniqueConstraint objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetUniqueConstraints(System.String,System.String)">
            <summary>
            Returns a collection of PDSASchemaUniqueConstraint objects for a table name, or just within a schema if the tableName parameter is left blank
            </summary>
            <param name="schemaName">A schema name</param>
            <param name="tableName">A table name</param>
            <returns>A collection of PDSASchemaUniqueConstraint objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.CreateUniqueConstraintFromDataRow(System.Data.DataRow)">
            <summary>
            Creates a PDSASchemaUniqueConstraint object from a DataRow object
            </summary>
            <param name="dr">A DataRow object</param>
            <returns>A PDSASchemaUniqueConstraint object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetConstraintColumnsSQL">
            <summary>
            Gets the SQL to return all constraint columns in a catalog
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetConstraintColumnsSchemaSQL">
            <summary>
            Gets the SQL to return all constraint columns within a Schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetConstraintColumnsSchemaConstraintSQL">
            <summary>
            Gets the SQL to return all constraint columns in a specific constraint
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetConstraintColumns(System.String,System.String)">
            <summary>
            Get a collection of PDSASchemaColumn objects that are in a particular constraint
            </summary>
            <param name="schemaName">A schema name</param>
            <param name="constraintName">A constraint name</param>
            <returns>A collection of PDSASchemaColumn objects </returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetCheckConstraintsSQL">
            <summary>
            Returns a SQL statement to get all check constraints in a database
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetCheckConstraintsSchemaSQL">
            <summary>
            Returns a SQL statement to get all check constraints in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetCheckConstraintsSchemaTableSQL">
            <summary>
            Returns a SQL statement to get all check constraints in a specific table
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetCheckConstraints">
            <summary>
            Returns a collection of PDSASchemaCheckConstraint objects
            </summary>
            <returns>A collection of PDSASchemaCheckConstraint objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetCheckConstraints(System.String)">
            <summary>
            Returns a collection of PDSASchemaCheckConstraint objects
            </summary>
            <param name="schemaName">A Schema Name</param>
            <returns>A collection of PDSASchemaCheckConstraint</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetCheckConstraints(System.String,System.String)">
            <summary>
            Returns a collection of PDSASchemaCheckConstraint objects
            </summary>
            <param name="schemaName">A Schema Name</param>
            <param name="tableName">A Table Name</param>
            <returns>A collection of PDSASchemaCheckConstraint</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.CreateCheckConstraintFromDataRow(System.Data.DataRow)">
            <summary>
            Create a PDSASchemaCheckConstraint object from a DataRow object
            </summary>
            <param name="dr">A DataRow object</param>
            <returns>A PDSASchemaCheckConstraint object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetDefaultsSQL">
            <summary>
            Returns a SQL statement to get all defaults in a database
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetDefaultsSchemaSQL">
            <summary>
            Returns a SQL statement to get all defaults in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetDefaultsSchemaTableSQL">
            <summary>
            Returns a SQL statement to get all defaults in a specific table
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetDefaults">
            <summary>
            Returns a collection of PDSASchemaDefault objects
            </summary>
            <returns>A collection of PDSASchemaDefault objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetDefaults(System.String)">
            <summary>
            Returns a collection of PDSASchemaDefault objects
            </summary>
            <param name="schemaName">A Schema Name</param>
            <returns>A collection of PDSASchemaDefault</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetDefaults(System.String,System.String)">
            <summary>
            Returns a collection of PDSASchemaDefault objects
            </summary>
            <param name="schemaName">A Schema Name</param>
            <param name="tableName">A Table Name</param>
            <returns>A collection of PDSASchemaDefault</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.CreateDefaultFromDataRow(System.Data.DataRow)">
            <summary>
            Create a PDSASchemaDefault object from a DataRow object
            </summary>
            <param name="dr">A DataRow object</param>
            <returns>A PDSASchemaDefault object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetIndexesSQL">
            <summary>
            Returns a SQL statement to get all indexes in a database
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetIndexesSchemaSQL">
            <summary>
            Returns a SQL statement to get all indexes in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetIndexesSchemaTableSQL">
            <summary>
            Returns a SQL statement to get all indexes for a specific table
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetIndexes">
            <summary>
            Returns a collection of PDSASchemaIndex objects in a catalog/database
            </summary>
            <returns>A collection of PDSASchemaIndex objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetIndexes(System.String)">
            <summary>
            Returns a collection of PDSASchemaIndex objects within a schema
            </summary>
            <param name="schemaName">A schema name</param>
            <returns>A collection of PDSASchemaIndex objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetIndexes(System.String,System.String)">
            <summary>
            Returns a collection of PDSASchemaIndex objects within a schema
            </summary>
            <param name="schemaName">A schema name</param>
            <param name="tableName">A table name</param>
            <returns>A collection of PDSASchemaIndex objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.CreateIndexFromDataRow(System.Data.DataRow)">
            <summary>
            Create a PDSASchemaIndex object from a DataRow object
            </summary>
            <param name="dr">A DataRow object</param>
            <returns>A PDSASchemaIndex object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetDomainsSQL">
            <summary>
            Returns a SQL statement to get all domain (user types) in a database
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetDomainsSchemaSQL">
            <summary>
            Returns a SQL statement to get all domain (user types) in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetDomains">
            <summary>
            Returns a collection of PDSASchemaDomain objects within a catalog/database
            </summary>
            <returns>A collection of PDSASchemaDomain objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetDomains(System.String)">
            <summary>
            Returns a collection of PDSASchemaDomain objects within a Schema
            </summary>
            <param name="schemaName">A Schema Name</param>
            <returns>A collection of PDSASchemaDomain objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.CreateDomainFromDataRow(System.Data.DataRow)">
            <summary>
            Create a PDSASchemaDomain object from a DataRow object
            </summary>
            <param name="dr">A DataRow Object</param>
            <returns>A PDSASchemaDomain object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DoesPackageExistSQL">
            <summary>
            Returns the SQL to determine whether or not a package exists in a schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetPackageCountSQL">
            <summary>
            Returns the SQL to count how many packages exist in a schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetPackageCountSchemaSQL">
            <summary>
            Returns the SQL to count how many packages exist in a schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetPackagesSQL">
            <summary>
            Returns the SQL to get package information
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetPackagesSchemaSQL">
            <summary>
            Returns the SQL to return package information within a schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetPackageSQL">
            <summary>
            Returns the SQL to return package information
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProceduresInPackage(System.String,System.String)">
            <summary>
            Return a collection of PDSASchemaStoredProc objects within a package
            </summary>
            <param name="schemaName">A Schema name</param>
            <param name="packageName">A Package name</param>
            <returns>A collection of PDSASchemaStoredProc</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProceduresInPackageSQL">
            <summary>
            Return a SQL string to get all stored procedures within a package
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetPackageText(System.String,System.String)">
            <summary>
            Return the text of a package
            </summary>
            <param name="schemaName">A Schema Name</param>
            <param name="packageName">A Package Name</param>
            <returns>A string</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DoesPackageExist(System.String,System.String)">
            <summary>
            Returns whether or not a package exists
            </summary>
            <param name="schemaName">A schema name</param>
            <param name="packageName">A package name</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetPackages">
            <summary>
            Returns a collection of PDSASchemaPackage objects
            </summary>
            <returns>A collection of PDSASchemaPackage objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetPackages(System.String)">
            <summary>
            Returns a collection of PDSASchemaPackage objects
            </summary>
            <param name="schemaName">A Schema name</param>
            <returns>A collection of PDSASchemaPackage objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetPackageCount">
            <summary>
            Gets the total number of packages
            </summary>
            <returns>A count of packages</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetPackageCount(System.String)">
            <summary>
            Gets the total number of packages within a schema
            </summary>
            <param name="schemaName">A Schema Name</param>
            <returns>A count of packages</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetPackage(System.String,System.String)">
            <summary>
            Return Package Information 
            </summary>
            <param name="schemaName">Schema in which Package is located</param>
            <param name="packageName">Package Name</param>
            <returns>A PDSASchemaPackage object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.CreatePackageFromDataReader(System.Data.IDataReader)">
            <summary>
            Create a PDSASchemaPackage object from a IDataReader object
            </summary>
            <param name="dr">A IDataReader object</param>
            <returns>A PDSASchemaPackage object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.CreatePackageFromDataRow(System.Data.DataRow)">
            <summary>
            Create a PDSASchemaPackage object from a DataRow object
            </summary>
            <param name="dr">A DataRow Object</param>
            <returns>A PDSASchemaPackage object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DoesStoredProcExistSQL">
            <summary>
            Returns a SQL statement to determine if a stored procedure exists
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProcedureParameters(System.String)">
            <summary>
            Retrieve the Stored Procedure Parameters for a database
            For most database systems you will we need to override this method.
            </summary>
            <param name="procedureName">Stored Procedure Name</param>
            <returns>A PDSASchemaStoredProcParameters collection</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProcedureParameters(System.String,System.String)">
            <summary>
            Retrieve the Stored Procedure Parameters for a database
            For most database systems you will we need to override this method.
            </summary>
            <param name="schemaName">Schema Name</param>
            <param name="procedureName">Stored Procedure Name</param>
            <returns>A PDSASchemaStoredProcParameters collection</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProcedureCountSQL">
            <summary>
            Returns a SQL statement to count all stored procedures in a database
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProcedureCountSchemaSQL">
            <summary>
            Returns a SQL statement to count all stored procedures in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProcedureCountSchemaProcSQL">
            <summary>
            Returns a SQL statement to count all stored procedures in a specific schema and for a specific set of tables
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProceduresSQL">
            <summary>
            Returns a SQL statement to get all stored procedures in a database
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProceduresPackageSQL">
            <summary>
            Returns a SQL statement to get all stored procedures in a package
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProceduresPackageSchemaSQL">
            <summary>
            Returns a SQL statement to get all stored procedures in a package in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProceduresPackageSchemaLikePackageSQL">
            <summary>
            Returns a SQL statement to get all stored procedures in a package in a specific schema where Package is LIKE a name
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProceduresPackageSchemaLikeStoredProcSQL">
            <summary>
            Returns a SQL statement to get all stored procedures in a package in a specific schema where Stored Procedure is LIKE a name
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProceduresSchemaSQL">
            <summary>
            Returns a SQL statement to get all stored procedures in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProceduresSchemaStoredProcSQL">
            <summary>
            Returns a SQL statement to get all stored procedures that match a LIKE in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProcedureSQL">
            <summary>
            Returns a SQL statement to get information about a specific stored procedure
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProcedureReturnColumnsSQL(System.String,System.String)">
            <summary>
            Returns a SQL statement that is the stored procedure name
            </summary>
            <param name="schemaName">A schema name</param>    
            <param name="procedureName">A stored procedure name</param>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProcedureParametersSQL(System.String,System.String)">
            <summary>
            Returns a SQL statement that is the stored procedure name
            </summary>
            <param name="schemaName">A schema name</param>    
            <param name="procedureName">A stored procedure name</param>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DoesStoredProcExist(System.String)">
            <summary>
            Returns whether or not a stored procedure exists
            </summary>
            <param name="procedureName">A stored proc name</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProcedureText(System.String,System.String,System.String)">
            <summary>
            Gets the text of a stored procedure.
            </summary>
            <param name="schemaName">A schema name</param>
            <param name="procedureName">A stored proc name</param>
            <param name="packageName">A package name</param>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.DoesStoredProcExist(System.String,System.String)">
            <summary>
            Returns whether or not a stored procedure exists in a database
            </summary>
            <param name="schemaName">A Schema name</param>
            <param name="procedureName">A stored procedure name</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProcedures">
            <summary>
            Returns a collection of PDSASchemaStoredProc objects within a database
            </summary>
            <returns>A collection of PDSASchemaStoredProc objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProceduresPackages(System.String)">
            <summary>
            Override this for Oracle. Returns a collection of PDSASchemaStoredProc objects within a Package
            </summary>
            <param name="schemaName">A Schema name</param>
            <returns>A collection of PDSASchemaStoredProc objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProceduresPackages(System.String,System.String,System.Boolean)">
            <summary>
            Override this for Oracle. Returns a collection of PDSASchemaStoredProc objects within a Package
            </summary>
            <param name="schemaName">A Schema name (or partial name for a 'LIKE' search)</param>
            <param name="name">A Package or Stored Procedure Name (or partial name for a 'LIKE' search)</param>
            <param name="nameIsPackage">Set to True if 'name' parameter is a package, otherwise search for stored procs that match name</param>
            <returns>A collection of PDSASchemaStoredProc objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProcedures(System.String,System.String)">
            <summary>
            Returns a collection of PDSASchemaStoredProc objects within a schema
            </summary>
            <param name="schemaName">A Schema name (or partial name for a 'LIKE' search)</param>
            <param name="procName">A Stored Procedure Name (or partial name for a 'LIKE' search)</param>
            <returns>A collection of PDSASchemaStoredProc objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProcedureCount">
            <summary>
            Returns the number of stored procedures within a database
            </summary>
            <returns>A count of stored procs</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProcedureCount(System.String)">
            <summary>
            Returns the number of stored procedures within a schema
            </summary>
            <param name="schemaName">A schema name (or partial)</param>
            <returns>A count of stored procs</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProcedureCount(System.String,System.String)">
            <summary>
            Returns the number of stored procedures within a schema
            </summary>
            <param name="schemaName">A schema name (or partial)</param>
            <param name="procName">Procedure name (or partial)</param>
            <returns>A count of stored procs</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProcedure(System.String,System.String)">
            <summary>
            Return Stored Procedure Information and the Parameters for that Stored Procedure
            </summary>
            <param name="schemaName">Schema in which Procedure is located</param>
            <param name="procedureName">Procedure Name</param>
            <returns>A PDSASchemaStoredProc object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.CreateSchemaColumnsFromDataTable(System.Data.DataTable,System.String,System.String)">
            <summary>
            Create a collection of PDSASchemaColumn objects from a DataTable
            </summary>
            <param name="dt">A DataTable object</param>
            <param name="schemaName">A Schema Name</param>
            <param name="procedureName">A stored proc name</param>
            <returns>A collection of PDSASchemaColumn objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.CreateSchemaColumnsFromDataTable(System.Data.DataTable,System.String,System.String,PDSA.DataLayer.Schema.PDSASchemaColumns)">
            <summary>
            Create a collection of PDSASchemaColumn objects from a DataTable
            </summary>
            <param name="dt">A DataTable object</param>
            <param name="schemaName">A Schema Name</param>
            <param name="procedureName">A stored proc name</param>
            <param name="cols">A collection of PDSASchemaColumn objects</param>
            <returns>A collection of PDSASchemaColumn objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProcedureReturnColumns(System.String)">
            <summary>
            Returns a collection of PDSASchemaColumn objects that are returned from a specific stored procedure.
            </summary>
            <param name="procedureName">A Stored Procedure name</param>
            <returns>A collection of PDSASchemaColumn objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProcedureReturnColumns(System.String,System.String)">
            <summary>
            Return a collection of PDSASchemaColumn objects that will be returned from a stored procedure
            </summary>
            <param name="schemaName">A schema name</param>
            <param name="procedureName">A stored procedure name</param>
            <returns>A collection of PDSASchemaColumn objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProcedureReturnColumns(System.String,System.String,PDSA.DataLayer.Schema.PDSASchemaStoredProcParameters)">
            <summary>
            Return a collection of PDSASchemaColumn objects that will be returned from a stored procedure
            </summary>
            <param name="schemaName">A schema name</param>
            <param name="procedureName">A stored procedure name</param>
            <param name="paramList">A PDSASchemaStoredProcParameters object</param>
            <returns>A collection of PDSASchemaColumn objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.CreateStoredProcedureFromDataReader(System.Data.IDataReader)">
            <summary>
            Create a PDSASchemaStoredProc object from an IDataReader object
            </summary>
            <param name="dr">A Data Reader Object</param>
            <returns>A PDSASchemaStoredProc object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.CreateStoredProcedureFromDataRow(System.Data.DataRow)">
            <summary>
            Create a PDSASchemaStoredProc object from a DataRow object
            </summary>
            <param name="dr">A DataRow Object</param>
            <returns>A PDSASchemaStoredProc Object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetDataSet(System.String,System.String,System.String)">
            <summary>
            Create a DataSet
            </summary>
            <param name="sql">SQL String</param>
            <param name="methodName">Method name that is requesting the DataSet</param>
            <param name="message">Message for Event Args</param>
            <returns>A Data Set</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.CreateCommand(System.String)">
            <summary>
            Create a Command Object
            </summary>
            <param name="sql">A SQL String for the Command object</param>
            <returns>An IDbCommand object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.CloseCommandConnection(System.Data.IDbCommand)">
            <summary>
            Close Connection in the Command object
            </summary>
            <param name="cmd">A command object</param>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.ResetCache">
            <summary>
            Clears all schema objects that have been cached
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.ToString">
            <summary>
            Returns the Provider name
            </summary>
            <returns>The provider name</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.FormatSQL(System.String)">
            <summary>
            Format a SQL string so it looks better. This is used typically after code generating SQL.
            </summary>
            <param name="sqlString">The SQL to format</param>
            <returns>string of formatted SQL</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetAllTokens(System.String)">
            <summary>
            Gets all tokens from an SQL string and puts them into a string array.
            Tokens do not include any punctuation or symbols.
            </summary>
            <param name="sqlString">The SQL string to parse</param>
            <returns>string array of tokens</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetAllColumnsAndParameters(System.String)">
            <summary>
            Extracts all columns and parameters from an SQL string.
            </summary>
            <param name="sqlString">The SQL string to parse.</param>
            <returns>string array of all columns and parameters</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.RemoveComments(System.String)">
            <summary>
            Remove comments from a SQL string
            </summary>
            <param name="sqlString">The SQL to parse</param>
            <returns>string with comments removed</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetAllParameters(System.String)">
            <summary>
            This method will extract all parameters from a SQL string.
            This could be a dynamic SQL string or a stored procedure or function.
            This method calls GetAllParameters(sqlString, paramPrefix) and passes the default parameter prefix for the SQL for this provider.
            </summary>
            <param name="sqlString">The SQL string to parse</param>
            <returns>string array of all parameters</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetAllParameters(System.String,System.String)">
            <summary>
            This method will extract all parameters from a SQL string.
            This could be a dynamic SQL string or a stored procedure or function.
            </summary>
            <param name="sqlString">The SQL string to parse.</param>
            <param name="paramPrefix">The parameter prefix such as '@' or ':'</param>
            <returns>string array of all the parameters in the SQL string</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.IsSQLProcedureOrFunction(System.String)">
            <summary>
            Is the SQL String passed in a procedure or function?
            </summary>
            <param name="sqlString">A SQL String</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.ProcedureType(System.String)">
            <summary>
            Returns a PDSASchemaSqlType object that tells what the SQL does such as SELECT, INSERT, UPDATE or DELETE
            </summary>
            <param name="sqlString">A SQL String</param>
            <returns>A PDSASchemaSqlType object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetSQLInProcedure(System.String)">
            <summary>
            Extract the SQL string from a stored procedure/function
            </summary>
            <param name="sqlString">A full stored proc/function SQL string</param>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.StripMainSelectFromProcedure(System.String)">
            <summary>
            Get the main SELECT statement from a stored procedure or function
            </summary>
            <param name="sqlString">A full stored procedure or function</param>
            <returns>A SELECT statement</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.StripRemainingSelectsFromProcedure(System.String)">
            <summary>
            Call this when you have a INSERT, UPDATE or DELETE statement in a stored proc and you want to strip out any trailing SELECT statements
            </summary>
            <param name="sqlString">A SQL String</param>
            <returns>A SQL string</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetProcedureSQL(System.String)">
            <summary>
            Pass in a stored procedure or function SQL and all comments and extra trailing CRLF's will be removed.
            </summary>
            <param name="sqlString">A stored proc or function</param>
            <returns>SQL with all comments, CRLF and Tab characters removed</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetAllParametersFromProcedure(System.String,System.String,PDSA.DataLayer.Schema.PDSASchemaProcedureInfo)">
            <summary>
            Extracts all parameters from a stored procedure or function.
            </summary>
            <param name="sqlString">A full stored proc or function</param>
            <param name="paramPrefix">The prefix character used in front of a parameter</param>
            <param name="procInfo">A PDSASchemaProcedureInfo object</param>
            <returns>A string array of all parameters</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetStoredProcedureSpecification(System.String)">
            <summary>
            Returns the CREATE PROC name(param1, param2, etc.)
            </summary>
            <param name="sqlString">String to extract from</param>
            <returns>The stored procedure spec</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetAllParametersFromDynamicSQL(System.String,System.String)">
            <summary>
            Returns a string array of all parameters from a Dynamic SQL string
            </summary>
            <param name="sqlString">A SQL String</param>
            <param name="paramPrefix">The prefix used in front of the parameters</param>
            <returns>A string array of parameters</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.StripSQLForParameters(System.String)">
            <summary>
            Strips 'FROM', 'UPDATE', 'INSERT' and other extraneous SQL from a full SQL statement to just give back a string that can be parsed into a parameter list.
            </summary>
            <param name="sqlString">The full SQL Statement to strip</param>
            <returns>A stripped SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetAllColumns(System.String)">
            <summary>
            Get all columns within a SQL String
            </summary>
            <param name="sqlString">A SQL String</param>
            <returns>a string array of column names</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetAllColumns(System.String,System.String)">
            <summary>
            Get all columns within a SQL String
            </summary>
            <param name="sqlString">A SQL String</param>
            <param name="paramPrefix">A parameter prefix</param>
            <returns>a string array of column names</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.StripSQLForColumns(System.String)">
            <summary>
            Strips 'FROM', 'UPDATE', 'INSERT' and other extraneous SQL from a full SQL statement to just give back a string that can be parsed into a column list.
            </summary>
            <param name="sqlString">The full SQL Statement to strip</param>
            <returns>A stripped SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.RemoveColumnAliases(System.String)">
            <summary>
            Removes any Column Aliases; ie. FirstName As [First Name]
            </summary>
            <param name="sqlString">The SQL String to check</param>
            <returns>SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetWords(System.String)">
            <summary>
            Get all words in a normal English sentence. Any spaces, periods, commas, semi-colons, or colons will be used as the word delimiters.
            </summary>
            <param name="value">The sentence to parse</param>
            <returns>String Array</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetQuotedWords(System.String)">
            <summary>
            Get all words that have quotes around them in a string
            </summary>
            <param name="value">The string to search</param>
            <returns>An array of strings</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.GetBracketedWords(System.String)">
            <summary>
            Returns a collection of words that have brackets around them within a string
            </summary>
            <param name="value">The string to search</param>
            <returns>A string array</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProvider.RemoveDuplicates(System.Collections.ArrayList)">
            <summary>
            Remove any duplicates within an ArrayList
            </summary>
            <param name="items">An ArrayList object</param>
            <returns>De-duped array list</returns>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSADBSchemaProviders">
            <summary>
            A Collection class of PDSADBSchemaProvider objects
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSADBSchemaProviders.GetByName(System.String)">
            <summary>
            Retrieve a PDSADBSchemaProvider object from the collection by its provider name
            </summary>
            <param name="providerName">A DBSchemaProvider name</param>
            <returns>A PDSADBSchemaProvider object</returns>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchema">
            <summary>
            Holds information about Schemas/Owners in a database
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchema.#ctor">
            <summary>
            Constructor for the PDSASchema class
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaBase">
            <summary>
            Base class that holds common properties for many classes in the PDSA DBSchema Provider system
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaBase.#ctor">
            <summary>
            Constructor for the PDSASchemaBase class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaBase.OwnerName">
            <summary>
            Get/Set the Owner Name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaBase.SchemaName">
            <summary>
            Get/Set the Schema Name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaBase.CatalogName">
            <summary>
            Get/Set the Catalog Name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaBase.ObjectName">
            <summary>
            Get/Set the database object name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaBase.DBObjectType">
            <summary>
            Get/Set the database object type (Table, Stored Proc, View, etc.)
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaBase.CopyBase(PDSA.DataLayer.Schema.PDSASchemaBase)">
            <summary>
            Copy the base class properties to the instance passed in
            </summary>
            <param name="x">An object to copy values to</param>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaCatalog">
            <summary>
            Holds catalog information within a database server.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaCatalog.#ctor">
            <summary>
            Constructor for the PDSASchemaCatalog class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaCatalog.ServerName">
            <summary>
            Get/Set the server name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaCatalog.CatalogName">
            <summary>
            Get/Set the catalog name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaCatalog.Description">
            <summary>
            Get/Set the description for this catalog
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaCatalogs">
            <summary>
            A collection class of PDSASchemaCatalog objects
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaCheckConstraint">
            <summary>
            Holds Check Constaint Information
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaCheckConstraint.#ctor">
            <summary>
            Constructor for the PDSASchemaCheckConstraint class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaCheckConstraint.TableName">
            <summary>
            Get/Set the table name that this constraint belongs to
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaCheckConstraint.ConstraintName">
            <summary>
            Get/Set the constraint name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaCheckConstraint.CheckClause">
            <summary>
            Get/Set the CHECK clause for this constraint
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaCheckConstraints">
            <summary>
            A collection class of PDSASchemaCheckConstraint objects
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaColumn">
            <summary>
            A class to hold information about a Column
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaColumn.#ctor">
            <summary>
            Constructor for the PDSASchemaColumn class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.DbColumnId">
            <summary>
            Get/Set the DB Column Id value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.ProjectId">
            <summary>
            Get/Set the Project Id value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.DBObjectId">
            <summary>
            Get/Set the DB Object Id value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.DbObjectName">
            <summary>
            Get/Set the Database Object Name to which this column belongs
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.DomainName">
            <summary>
            Get/Set the Domain Name to which this column belongs
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.ColumnName">
            <summary>
            Get/Set the column name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.ColumnNameOriginalName">
            <summary>
            Get/Set the original parameter name
            This is used when a group of columns are gathered into a package and there is a conflicting column name.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.DBType">
            <summary>
            Get/Set the actual DbType enumeration of this column
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.HasDefault">
            <summary>
            Get/Set whether or not there is a default for this column
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.CharacterMaximumLength">
            <summary>
            Get/Set the maximum length of this domain
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.CharacterOctetLength">
            <summary>
            Get/Set the Octet length of this domain
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.NumericPrecision">
            <summary>
            Get/Set the numeric precision of this domain
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.NumericScale">
            <summary>
            Get/Set the numeric scale of this domain
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.DateTimePrecision">
            <summary>
            Get/Set the date/time precision of this domain
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.Flags">
            <summary>
            Get/Set any flags associated with this column
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.IsNullable">
            <summary>
            Get/Set whether or not this column may contain nulls
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.ConstraintName">
            <summary>
            Get/Set the Constraint Name to which this column belongs
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.IsComputed">
            <summary>
            Get/Set whether or not this column is a computed column
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.IsForeignKey">
            <summary>
            Get/Set whether or not this column is a foreign key column
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.IsPrimaryKey">
            <summary>
            Get/Set whether or not this column is a primary key column
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.IsPrimaryKeyAutoNumber">
            <summary>
            Get/Set whether or not this column is an Auto Number
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.ColumnAlias">
            <summary>
            Get/Set the Column Alias value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.PrivatePropertyName">
            <summary>
            Get/Set the Private Property Name value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.PublicPropertyName">
            <summary>
            Get/Set the Public Property Name value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.DotNetType">
            <summary>
            Get/Set the Dot Net Type value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.DotNetTypeObject">
            <summary>
            Get/Set the Dot Net Type Object
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.GenericType">
            <summary>
            Get/Set the Generic Data Type
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.DataTypeFromDatabase">
            <summary>
            Get/Set the Database Data Type value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.OrdinalPosition">
            <summary>
            Get/Set the Ordinal Position value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.UseMaxLength">
            <summary>
            Get/Set the Use Max Length value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.IsSPParameter">
            <summary>
            Get/Set the Is SP Parameter value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.IsCustomColumn">
            <summary>
            Get/Set the Is Custom Column value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.IsDescriptionField">
            <summary>
            Get/Set the Is Description Field value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.IsRequired">
            <summary>
            Get/Set the Is Required value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.RequiredMessage">
            <summary>
            Get/Set the Required Message value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.HeaderText">
            <summary>
            Get/Set the Header Text value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.DefaultValue">
            <summary>
            Get/Set the Default Value value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.ParamValue">
            <summary>
            Get/Set the Param Value value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.Tag">
            <summary>
            Get/Set the Tag value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.MinLength">
            <summary>
            Get/Set the Min Length value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.MinValue">
            <summary>
            Get/Set the Min Value value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.MaxValue">
            <summary>
            Get/Set the Max Value value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.IsIdentity">
            <summary>
            Get/Set the Is IDENTITY value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.IsInsertable">
            <summary>
            Get/Set the Is Insertable value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.IsUpdatable">
            <summary>
            Get/Set the Is Updatable value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.IsSelectable">
            <summary>
            Get/Set the Is Selectable value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.IsSearchField">
            <summary>
            Get/Set the Is Search Field value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.IncludeInAuditTracking">
            <summary>
            Get/Set the Include In Audit Tracking value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.ReturnNullWhenNull">
            <summary>
            Get/Set the Return Null When Null value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.IsConcurrencyField">
            <summary>
            Get/Set the Is Concurrency Field value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.IsStandardField">
            <summary>
            Get/Set the Is Standard Field value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.DisplayOrder">
            <summary>
            Get/Set the Display Order value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.Tooltip">
            <summary>
            Get/Set the Tooltip value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.GridAttribute">
            <summary>
            Get/Set the Grid Attribute value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.EditAttribute">
            <summary>
            Get/Set the Edit Attribute value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.DisplayInGrid">
            <summary>
            Get/Set the Display In Grid value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.DisplayInEdit">
            <summary>
            Get/Set the Display In Edit value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.IsFieldReadOnlyOnEdit">
            <summary>
            Get/Set the Is Field Read Only On Edit value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.IsReturnValueInService">
            <summary>
            Get/Set the Is Return Value In Service value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.PerformBusinessRuleCheck">
            <summary>
            Get/Set whether or not to perform a business rule check
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.ColumnAttributes">
            <summary>
            Get/Set the Column Attributes value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.ColumnRegularExpression">
            <summary>
            Get/Set the Column Regular Expression value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.RegularExpressionMessage">
            <summary>
            Get/Set the Regular Expression Message value
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaColumn.IsMaxColumn">
            <summary>
            Get/Set the Is Max Column value
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaColumn.Copy">
            <summary>
            Copy the current PDSASchemaColumn object to a new instance
            </summary>
            <returns>A PDSASchemaColumn object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaColumn.SetCodeGenProperties">
            <summary>
            Set code generation properties
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaColumn.BuildPublicPropertyName(System.String,System.String)">
            <summary>
            Build the Public Property Name for a given Column
            </summary>
            <param name="colName">The Column Name</param>
            <param name="dbObjectClassName">The Database Object Class Name</param>
            <returns>A Public Property Name</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaColumn.BuildPrivateVariableName(PDSA.DataLayer.Schema.PDSASchemaColumn)">
            <summary>
            Build the Private Variable for a Property for a given column
            </summary>
            <param name="sc">A PDSASchemaColumn object</param>
            <returns>A Private Variable Name</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaColumn.BuildHeaderText(System.String)">
            <summary>
            Build the Header or Label for a given column name
            </summary>
            <param name="colName">The Column Name</param>
            <returns>A Header/Label for Displaying Column Info</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaColumn.GetDotNetTypeForDBType(PDSA.DataLayer.Schema.PDSASchemaColumn)">
            <summary>
            Get the .NET Data Type for the Database Type of a Column
            </summary>
            <param name="sc">A PDSASchemaColumn object</param>
            <returns>A PDSADotNetType object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaColumn.SetMinMaxValues(PDSA.DataLayer.Schema.PDSASchemaColumn)">
            <summary>
            Set the MinValue and MaxValue properties on a PDSASchemaColumn object
            </summary>
            <param name="pdc">A PDSASchemaColumn object</param>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaColumn.GetGenericDataType(System.Data.DbType)">
            <summary>
            Returns a generic type for the database data type of this column
            </summary>
            <param name="dbType">A DbType object</param>
            <returns>PDSAGenericDBDataTypes</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaColumn.GetDataTypeWithSize(PDSA.DataLayer.Schema.PDSASchemaColumn)">
            <summary>
            Return the database data type with the size in parentheses if appropriate
            </summary>
            <param name="sc">A PDSASchemaColumn object</param>
            <returns>A database data type</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaColumn.ToString">
            <summary>
            Override of ToString method
            </summary>
            <returns>A string</returns>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaColumns">
            <summary>
            A collection of PDSASchemaColumn objects
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaColumns.GetByTypeFromDB(System.String)">
            <summary>
            Returns a PDSASchemaColumn object based on the data type from the database passed in
            </summary>
            <param name="dataTypeFromDB">The data type to locate</param>
            <returns>The first PDSASchemaColumn object that matches the data type passed in</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaColumns.GetByColumnName(System.String)">
            <summary>
            Returns a PDSASchemaColumn object from the column name passed in.
            </summary>
            <param name="colName">The column name to locate</param>
            <returns>A PDSASchemaColumn object, or null if the column is not found</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaColumns.ContainsStandardFields">
            <summary>
            Returns true if at least one column is marked as a standard field in the columns collection
            </summary>
            <returns>True or False</returns>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaDefault">
            <summary>
            A class to hold a Default for a column in a table
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaDefault.DefaultName">
            <summary>
            Get/Set the default name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaDefault.Definition">
            <summary>
            Get/Set the Definition for this Default
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaDefault.ColumnName">
            <summary>
            Get/Set the Column Name for this Default
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaDefaults">
            <summary>
            A collection class of PDSASchemaDefault objects
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaDomain">
            <summary>
            A class to hold a Domain/User Defined Types in a database
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaDomain.DomainName">
            <summary>
            Get/Set the domain name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaDomain.DataType">
            <summary>
            Get/Set the data type for this domain
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaDomain.DefaultValue">
            <summary>
            Get/Set the default value for this domain
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaDomain.HasDefault">
            <summary>
            Get/Set whether or not this domain has a default value associated with it
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaDomain.CharacterMaximumLength">
            <summary>
            Get/Set the maximum length of this domain
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaDomain.CharacterOctetLength">
            <summary>
            Get/Set the Octet length of this domain
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaDomain.NumericPrecision">
            <summary>
            Get/Set the numeric precision of this domain
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaDomain.NumericScale">
            <summary>
            Get/Set the numeric scale of this domain
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaDomain.DateTimePrecision">
            <summary>
            Get/Set the date/time precision of this domain
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaDomains">
            <summary>
            A collection class of PDSASchemaDomain objects
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaForeignKey">
            <summary>
            A class to hold foreign key information for a table.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaForeignKey.#ctor">
            <summary>
            Constructor for the PDSASchemaForeignKey class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaForeignKey.ForeignKeyConstraintName">
            <summary>
            Get/Set the foreign key constraint name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaForeignKey.PrimaryKeyConstraintName">
            <summary>
            Get/Set the primary key constraint name this foreign key is related to
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaForeignKey.PrimaryKeyConstraintSchemaName">
            <summary>
            Get/Set the primary key constraint schema name this foreign key is related to
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaForeignKey.UpdateRule">
            <summary>
            Get/Set the Update Rule for this foreign key
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaForeignKey.DeleteRule">
            <summary>
            Get/Set the Delete Rule for this foreign key
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaForeignKey.ParentTableName">
            <summary>
            Get/Set the Parent Table Name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaForeignKey.ParentTableSchemaName">
            <summary>
            Get/Set the Parent Table Schema Name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaForeignKey.PKColumns">
            <summary>
            Get/Set the columns used in the parent table to join to this table
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaForeignKey.TableName">
            <summary>
            Get/Set the Table Name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaForeignKey.FKColumns">
            <summary>
            Get/Set the columns used to join to the parent table
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaForeignKeys">
            <summary>
            A collection of PDSASchemaForeignKey objects
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaIndex">
            <summary>
            A class to hold Index information
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaIndex.#ctor">
            <summary>
            Constructor for the PDSASchemaIndex class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaIndex.TableName">
            <summary>
            Get/Set the table name to which this index is attached
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaIndex.IndexName">
            <summary>
            Get/Set the index name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaIndex.IsClustered">
            <summary>
            Get/Set whether or not this index is the clustered index for a table
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaIndex.IsUnique">
            <summary>
            Get/Set whether or not this index is unique
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaIndex.Columns">
            <summary>
            Get/Set the collection of columns that make up this index
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaIndexes">
            <summary>
            A collection class of PDSASchemaIndex objects
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaObjectBase">
            <summary>
            Base Class for Tables/Views/Stored Procedures
            This class matches the table DBObject in Haystack
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaObjectBase.#ctor">
            <summary>
            Constructor for PDSASchemaObjectBase Class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.DbObjectId">
            <summary>
            Get/Set the Database Object Id
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.ProjectId">
            <summary>
            Get/Set the Project ID
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.TypeOfObject">
            <summary>
            Get/Set the Type to Database Object
            Valid values are 1=Table, 2=StoredProcedure, 3=View, 4=Xml
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.TypeToGenerate">
            <summary>
            Get/Set the Type to Generate
            Valid values are 1=Unknown, 2=ReadOnly, 3=ReadOnlyWithParams, 4=ReadOnlyNoParams, 5=Execute, 6=Full, 7=Xml
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.TypeOfPrimaryKey">
            <summary>
            Get/Set the Type of Primary Key
            Valid values are 0=SqlIdentity, 1=PDSA, 2=OracleSeqNumber, 3=Guid, 4=Manual, 5=None
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.Description">
            <summary>
            Get/Set the description of this database object
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.PackageName">
            <summary>
            Get/Set the Oracle Package Name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.UsesStandardFields">
            <summary>
            Get/Set whether or not this database object uses standard fields
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.DoNotGenerateAgain">
            <summary>
            Get/Set whether or not to generate this object again
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.UseAuditTracking">
            <summary>
            Get/Set whether or not to use Audit Tracking with this object
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.UsesColumnPrefixes">
            <summary>
            Get/Set whether or not this database object uses column prefixes such as 'dt', 's', 'sz', etc.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.UsesDynamicSQL">
            <summary>
            Get/Set whether or not this class uses dynamic SQL for all data access
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.UsesStoredProcs">
            <summary>
            Get/Set whether or not this class uses stored procedures for all data access
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.GenViewAsTable">
            <summary>
            Get/Set whether or not to generate the View with full Add/Edit/Delete like a table
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.GenViewSQL">
            <summary>
            Get/Set whether or not to generate the SQL with the View
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.Columns">
            <summary>
            Get/Set the collection of columns that make up this table
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.DateCreated">
            <summary>
            Get/Set the Date/Time this object was created
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.DateModified">
            <summary>
            Get/Set the last Date/Time this object was modified
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.Definition">
            <summary>
            Get/Set the Definition for the Database Object.
            This might be the text of a view or of a stored procedure.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.ClassNamePlural">
            <summary>
            Get/Set the Plural Form of the Class Name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.StandardFieldsClassName">
            <summary>
            Get/Set the base class name to use for standard fields
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.DoNotGenerateComment">
            <summary>
            Get/Set the Comment entered to tell others why not to generate this class again
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaObjectBase.EntityToMapTo">
            <summary>
            Get/Set the name of the entity to map to. Used when mapping stored procedures to an existing entity.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaObjectBase.GetClassName(System.String,System.Boolean,System.Boolean)">
            <summary>
            Build the class name for the object passed in.
            </summary>
            <param name="objectName">The object name</param>
            <param name="convertUpperToProper">Convert upper case letters to proper case</param>
            <param name="makeAValidIdentifier">Make class a valid identifier</param>
            <returns>A Class Name</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaObjectBase.CreateSingularName(System.String)">
            <summary>
            Attempt to take a 'name' such as 'Customers' and create a singular version such as 'Customer'.
            </summary>
            <param name="name">The name to make singular</param>
            <returns>A singular name</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaObjectBase.CreatePluralName(System.String)">
            <summary>
            Attempt to take a 'name' such as 'Customer' and create a plural version such as 'Customers'.
            </summary>
            <param name="name">The name to make plural</param>
            <returns>A plural name</returns>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaPackage">
            <summary>
            This class is used for working with Packages or Stored Procedures
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaPackage.#ctor">
            <summary>
            Constructor for PDSASchemaPackage Class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaPackage.PackageName">
            <summary>
            Get/Set the PackageName
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaPackage.StoredProcsCount">
            <summary>
            Get/Set the number of stored procedures within this package
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaPackage.Description">
            <summary>
            Get/Set the Description of this package
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaPackage.DateCreated">
            <summary>
            Get/Set the Date the package was created
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaPackage.DateModified">
            <summary>
            Get/Set the Date the package was last modified
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaPackage.Definition">
            <summary>
            Get/Set the text of the package
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaPackage.StoredProcedures">
            <summary>
            Get/Set the collection of stored procedures in this package.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaPackage.AllParameters">
            <summary>
            Get/Set the list of parameters for this stored procedure
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaPackage.AllColumns">
            <summary>
            Get/Set the list of columns returned from this stored procedure. Only applicable to those stored procedures that return data
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaPackage.BuildAllParameters">
            <summary>
            Gather all unique parameters from all stored procs in this package and put them into the 'AllParameters' property
            If any parameters have the same name and a different data type, then the will be suffixed with _[StoredProcName].
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaPackage.BuildAllColumns">
            <summary>
            Gather all unique columns from all stored procs in this package and put them into the 'AllColumns' property
            If any columns have the same name and a different data type, then the will be suffixed with _[StoredProcName].
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaPackages">
            <summary>
            A collection class for Oracle PDSASchemaPackage objects
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaPackages.GetByFilter(System.String,System.String)">
            <summary>
            Returns a subset of the Packages based on the object name and schema name passed into this method
            </summary>
            <param name="objectName">A full or partial object name to find</param>
            <param name="schemaName">A full or partial schema name to find</param>
            <returns>A collection of PDSASchemaPackage objects</returns>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaPrimaryKey">
            <summary>
            A class to hold primary key information for a table
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaPrimaryKey.#ctor">
            <summary>
            Constructor for the PDSASchemaPrimaryKey class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaPrimaryKey.PrimaryKeyType">
            <summary>
            Get/Set the Primary Key Type
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaPrimaryKey.TableName">
            <summary>
            Get/Set the table name for this primary key information
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaPrimaryKey.PrimaryKeyConstraintName">
            <summary>
            Get/Set the Primary key constraint name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaPrimaryKey.IsAutoNumber">
            <summary>
            Get/Set whether or not this primary key is auto-numbered or not
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaPrimaryKey.Columns">
            <summary>
            The collection of columns that make up the primary key
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaPrimaryKey.IsColumnPrimaryKey(System.String)">
            <summary>
            Returns a True if the column passed in is part of this table's primary key
            </summary>
            <param name="columnName">The column name to query</param>
            <returns>A boolean value</returns>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaPrimaryKeys">
            <summary>
            A collection class for PDSASchemaPrimaryKey objects
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemas">
            <summary>
            A collection class of PDSASchema objects
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaStoredProc">
            <summary>
            This class is used for the meta-data we gather about a stored procedure
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaStoredProc.#ctor">
            <summary>
            Constructor for the PDSASchemaStoredProc class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaStoredProc.StoredProcName">
            <summary>
            Get/Set the Stored Procedure Name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaStoredProc.PackageStoredProcedure">
            <summary>
            Get/Set the Package plus the Stored Procedure name. Returns just the stored procedure name, if the stored procedure is not part of a package.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaStoredProc.Parameters">
            <summary>
            Get/Set the list of parameters for this stored procedure
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaStoredProcParameter">
            <summary>
            A class to hold parameter information for a stored procedure
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaStoredProcParameter.#ctor">
            <summary>
            Constructor for the PDSASchemaStoredProcParameter class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaStoredProcParameter.ParameterName">
            <summary>
            Get/Set the parameter name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaStoredProcParameter.ParameterName_Original">
            <summary>
            Get/Set the original parameter name
            This is used when a group of parameters are gathered into a package and there is a conflicting parameter name.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaStoredProcParameter.OrdinalPosition">
            <summary>
            Get/Set the ordinal position of the parameter
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaStoredProcParameter.GenericDataType">
            <summary>
            Get/Set the generic data type of this parameter
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaStoredProcParameter.DBType">
            <summary>
            Get/Set the DbType enumeration of this parameter
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaStoredProcParameter.DataTypeFromDatabase">
            <summary>
            Get/Set the DataType from the database for this parameter
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaStoredProcParameter.IsNullable">
            <summary>
            Get/Set whether or not this parameter may be set to null
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaStoredProcParameter.IsMaxParam">
            <summary>
            Get/Set whether or not this parameter is defined as 'max'
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaStoredProcParameter.Direction">
            <summary>
            Get/Set the direction of this parameter, such as Input, Output, etc.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaStoredProcParameter.Size">
            <summary>
            Get/Set the size of this parameter
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaStoredProcParameter.Precision">
            <summary>
            Get/Set the precision of this parameter
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaStoredProcParameter.Scale">
            <summary>
            Get/Set the scale of this parameter
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaStoredProcParameter.Value">
            <summary>
            Get/Set the value of this parameter
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaStoredProcParameters">
            <summary>
            A collection class of PDSASchemaStoredProcParameter objects
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaStoredProcParameters.GetByParameterName(System.String)">
            <summary>
            Locate and return a PDSASchemaStoredProcParameter object based on the parameter name passed in
            </summary>
            <param name="paramName">The parameter name to locate</param>
            <returns>A PDSASchemaStoredProcParameter object, or null if the parameter is not found</returns>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaStoredProcs">
            <summary>
            A collection class of PDSASchemaStoredProc objects
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaStoredProcs.GetByFilter(System.String,System.String)">
            <summary>
            Returns a collection of PDSASchemaStoredProc objects based on the parameters passed in
            </summary>
            <param name="objectName">A full or partial object name to locate</param>
            <param name="schemaName">A full or partial schema name to locate</param>
            <returns>A collection of PDSASchemaStoredProc objects</returns>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaTable">
            <summary>
            A class to hold information about a table in a database
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaTable.#ctor">
            <summary>
            Constructor for the PDSASchemaTable class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaTable.TableName">
            <summary>
            Get/Set the table name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaTable.IsAllInfoLoaded">
            <summary>
            Get/Set whether or not all information has been loaded
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaTable.PrimaryKeyInfo">
            <summary>
            Get/Set the primary key information for this table
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaTable.ForeignKeys">
            <summary>
            Get/Set the foreign keys in this table
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaTable.ChildTables">
            <summary>
            Get/Set the child tables for this table
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaTable.CheckConstraints">
            <summary>
            Get/Set the CHECK constraints for this table
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaTable.UniqueConstraints">
            <summary>
            Get/Set the unique constraints for this table
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaTable.Indexes">
            <summary>
            Get/Set the indexes for this table
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaTable.SetCodeGenProperties">
            <summary>
            Set code generation properties for a Table
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaTables">
            <summary>
            A collection of PDSASchemaTable objects
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaTables.GetByFilter(System.String,System.String)">
            <summary>
            Returns a collection of PDSASchemaTable objects based on the parameters passed in
            </summary>
            <param name="objectName">A full or partial object name to locate.</param>
            <param name="schemaName">A full or partial schema name to locate.</param>
            <returns>A collection of PDSASchemaTable objects</returns>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaUniqueConstraint">
            <summary>
            A class to hold information about Unique Constraints
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaUniqueConstraint.#ctor">
            <summary>
            Constructor for the PDSASchemanUniqueConstraint class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaUniqueConstraint.TableName">
            <summary>
            Get/Set the table name to which this unique constraint belongs
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaUniqueConstraint.ConstraintName">
            <summary>
            Get/Set the constraint name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaUniqueConstraint.Columns">
            <summary>
            Get/Set the collection of columns that make up this unique constraint
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaUniqueConstraints">
            <summary>
            A collection class of PDSASchemaUniqueConstraint objects
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaView">
            <summary>
            A class to hold information about a View
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaView.#ctor">
            <summary>
            Constructor for the PDSASchemaView class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaView.ViewName">
            <summary>
            Get/Set the View Name
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaView.CheckOption">
            <summary>
            Get/Set the CHECK option flag
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaView.IsUpdatable">
            <summary>
            Get/Set whether or not this view is updatable
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASchemaView.Indexes">
            <summary>
            Get/Set the indexes attached to this view
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASchemaViews">
            <summary>
            A collection class of PDSASchemaView objects
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASchemaViews.GetByFilter(System.String,System.String)">
            <summary>
            Returns a filtered list of PDSASchemaView objects based on the parameters passed in
            </summary>
            <param name="objectName">A full or partial object name to locate</param>
            <param name="schemaName">A full or partial schema name to locate</param>
            <returns>A collection of PDSASchemaView objects</returns>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASqlOrderByColumn">
            <summary>
            Class to work with SQL ORDER BY statements
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASqlOrderByColumn.#ctor">
            <summary>
            Constructor for the PDSASqlOrderByColumn class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASqlOrderByColumn.OrderByColumn">
            <summary>
            Get/Set the ORDER BY Column
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASqlOrderByColumn.OrderByModifier">
            <summary>
            Get/Set the ORDER BY modifier such as "ASC" or "DESC"
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASqlOrderByColumn.ToString">
            <summary>
            Overrides the ToString method
            </summary>
            <returns>Either the OrderByColumn property, or with the modifier if it exists</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASqlOrderByColumn.GetColumns(System.String)">
            <summary>
            Returns a collection of PDSASqlOrderByColumn objects from the SQL String passed in
            </summary>
            <param name="sqlString">The SQL string to parse and look for ORDER BY statements within</param>
            <returns>A collection of PDSASqlOrderByColumn objects</returns>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASqlOrderByColumns">
            <summary>
            A collection class of PDSASqlOrderByColumn objects
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASqlOrderByColumns.GetColumnByName(System.String)">
            <summary>
            Locate an ORDER BY column by its name
            </summary>
            <param name="colName">The column name to locate</param>
            <returns>A PDSASqlOrderByColumn object or null if it is not found</returns>
        </member>
        <member name="T:PDSA.DataLayer.Schema.PDSASqlSelectStatement">
            <summary>
            A class to hold information about a SQL SELECT statement
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASqlSelectStatement.#ctor">
            <summary>
            Constructor for the PDSASqlSelectStatement class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASqlSelectStatement.Columns">
            <summary>
            The columns within the SELECT statement
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Schema.PDSASqlSelectStatement.RestOfStatement">
            <summary>
            The rest of the statement after the columns
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.PDSASqlSelectStatement.SplitIntoParts(System.String)">
            <summary>
            Split a SELECT statement into its component parts.
            </summary>
            <param name="sqlString">The SELECT statement to break apart.</param>
            <returns>Returns true if the SELECT statement was broken apart, false if not.</returns>
        </member>
        <member name="T:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient">
            <summary>
            A Schema Provider to work with SQL Server.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.#ctor">
            <summary>
            Constructor for the PDSADBSchemaSqlClient() class
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetUserIDFromConnectString">
            <summary>
            Returns the "user id" value from a connection string
            </summary>
            <returns>A user id</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetPasswordFromConnectString">
            <summary>
            Returns the "password" value from a connection string
            </summary>
            <returns>A password</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetDataSourceFromConnectString">
            <summary>
            Returns the "data source" value from a connection string
            </summary>
            <returns>A data source</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetCatalogFromConnectString">
            <summary>
            Returns the "catalog" value from a connection string
            </summary>
            <returns>A catalog value</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetOtherAttributeFromConnectString(System.String)">
            <summary>
            Gets any other value for the key passed in
            </summary>
            <param name="key">The key to find in a connecton string</param>
            <returns>The value for the key</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.DBMSProductName">
            <summary>
            The name of the current database provider. 
            </summary>
            <returns>"Microsoft SQL Server 2005/2008"</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetGenericDataType(System.String)">
            <summary>
            Given a specific SQL Server data type, returns a PDSASchemaGenericDataType enumeration value
            </summary>
            <param name="DataType">A SQL Server data type</param>
            <returns>A PDSASchemaGenericDataType value</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetDBTypeFromString(System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Returns an actual DbType object based on the dbType string passed in.
            </summary>
            <param name="dbType">A string value with a valid SQL Server DbType</param>
            <param name="precision">Precision of type</param>
            <param name="scale">Scale of type</param>
            <param name="wasSet">Whether or not the value was set</param>
            <returns>A valid DbType object, or AnsiString if type can not be determined. If not determined, then 'wasSet' will be false.</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.CreateCommentInfo">
            <summary>
            Create a collection of PDSASchemaCommentInfo objects that describe the different comments used in SQL Server.
            </summary>
            <returns>A PDSASchemaCommentInfo object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.CreateProcedureInfo">
            <summary>
            Create a collection of PDSASchemaProcedureInfo objects that describe the various tokens used to create a stored procedure in SQL Server
            </summary>
            <returns>A collection of PDSASchemaProcedureInfo objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.CreateDataTypes">
            <summary>
            Create a collection of PDSASchemaDataType objects. These are a list of all valid data types in SQL Server
            </summary>
            <returns>A collection of PDSASchemaDataType objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.CreateKeywords">
            <summary>
            Create a list of keywords in SQL Server. This returns a collection of PDSASchemaKeyword objects.
            </summary>
            <returns>A collection of PDSASchemaKeyword objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetCatalogsSQL">
            <summary>
            Returns a SQL statement to retieve all catalogs/databases.
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetCatalogCountSQL">
            <summary>
            Returns a SQL statement to count all catalogs/databases.
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetSchemasSQL">
            <summary>
            Returns a SQL statement to retieve all schemas.
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetSchemaCountSQL">
            <summary>
            Returns a SQL statement to count all schemas.
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.DoesSchemaExistSQL">
            <summary>
            Returns a SQL statement to determine if a schema exists.
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetTablesSQL">
            <summary>
            Returns a SQL statement to get all tables
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetTablesSchemaSQL">
            <summary>
            Returns a SQL statement to get all tables in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetTablesSchemaTableSQL">
            <summary>
            Returns a SQL statement to get all tables in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetTableCountSQL">
            <summary>
            Returns a SQL statement to count all tables
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetTableCountSchemaSQL">
            <summary>
            Returns a SQL statement to count all tables in a schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.DoesTableExistSQL">
            <summary>
            Returns a SQL statement to determine if a table exists
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetTableSQL">
            <summary>
            Returns a SQL statement to get information about a specific table
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetTableStructureAsDataSetSQL(System.String,System.String)">
            <summary>
            Returns a SQL statement that can be used to build a blank DataSet for a specific table.
            </summary>
            <param name="schemaName">Schema Name</param>
            <param name="tableName">A Table Name</param>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetViewsSQL">
            <summary>
            Returns a SQL statement to get all views
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetViewsSchemaSQL">
            <summary>
            Returns a SQL statement to get all views in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetViewsSchemaViewSQL">
            <summary>
            Returns a SQL statement to get all views in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetViewCountSQL">
            <summary>
            Returns a SQL statement to count all views
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetViewCountSchemaSQL">
            <summary>
            Returns a SQL statement to count all views in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.DoesViewExistSQL">
            <summary>
            Returns a SQL statement to determine if a view exists
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetViewSQL">
            <summary>
            Returns a SQL statement to get information about a specific view
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetViewStructureAsDataSetSQL(System.String,System.String)">
            <summary>
            Returns a SQL statement that can be used to build a blank DataSet of a view
            </summary>
            <param name="schemaName">Schema Name</param>
            <param name="viewName">View Name</param>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.DoesColumnExistSQL">
            <summary>
            Returns a SQL statement to determine if a specific column exists in a table
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetColumnsSQL">
            <summary>
            Returns a SQL statement to get all columns in a catalog/database
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetColumnsSchemaSQL">
            <summary>
            Returns a SQL statement to get all columns in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetColumnsSchemaTableSQL">
            <summary>
            Returns a SQL statement to get all columns in a specific table
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetColumnsSchemaTableColumnSQL">
            <summary>
            Returns a SQL statement to get a specific column in a specific table
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetPrimaryKeysSQL">
            <summary>
            Returns a SQL statement to get all primary keys in a database
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetPrimaryKeysSchemaSQL">
            <summary>
            Returns a SQL statement to get all primary keys in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.IsColumnPrimaryKeySQL">
            <summary>
            Returns a SQL statement to determine if a specific column in a table is a primary key
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetPrimaryKeyInfoSQL">
            <summary>
            Returns a SQL statement to get information about a specific primary key for a table
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.IsPrimaryKeyAutoNumberSQL">
            <summary>
            Returns a SQL statement to determine if a primary key is any auto number
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetForeignKeysSQL">
            <summary>
            Returns a SQL statement to get all foreign keys in a database
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetForeignKeysSchemaSQL">
            <summary>
            Returns a SQL statement to get all foreign keys in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetForeignKeysSchemaTableSQL">
            <summary>
            Returns a SQL statement to get all foreign keys for a specific table
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetPrimaryKeyTableFromForeignKeySQL">
            <summary>
            Returns a SQL statement to get the primary key table information for a specific foreign key
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetConstraintColumnsSQL">
            <summary>
            Gets the SQL to return all constraint columns in a catalog
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetConstraintColumnsSchemaSQL">
            <summary>
            Gets the SQL to return all constraint columns within a Schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetConstraintColumnsSchemaConstraintSQL">
            <summary>
            Gets the SQL to return all constraint columns in a specific constraint
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetUniqueConstraintsSQL">
            <summary>
            Returns a SQL statement to get all unique constraints in a database
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetUniqueConstraintsSchemaSQL">
            <summary>
            Returns a SQL statement to get all unique constraints in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetUniqueConstraintsSchemaTableSQL">
            <summary>
            Returns a SQL statement to get all unique constraints in a specific table
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetCheckConstraintsSQL">
            <summary>
            Returns a SQL statement to get all check constraints in a database
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetCheckConstraintsSchemaSQL">
            <summary>
            Returns a SQL statement to get all check constraints in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetCheckConstraintsSchemaTableSQL">
            <summary>
            Returns a SQL statement to get all check constraints in a specific table
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetDefaultsSQL">
            <summary>
            Returns a SQL statement to get all defaults in a database
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetDefaultsSchemaSQL">
            <summary>
            Returns a SQL statement to get all defaults in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetDefaultsSchemaTableSQL">
            <summary>
            Returns a SQL statement to get all check constraints in a specific table
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetIndexesSQL">
            <summary>
            Returns a SQL statement to get all indexes in a database
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetIndexesSchemaSQL">
            <summary>
            Returns a SQL statement to get all indexes in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetIndexesSchemaTableSQL">
            <summary>
            Returns a SQL statement to get all indexes for a specific table
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetDomainsSQL">
            <summary>
            Returns a SQL statement to get all domain (user types) in a database
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetDomainsSchemaSQL">
            <summary>
            Returns a SQL statement to get all domain (user types) in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.DoesStoredProcExistSQL">
            <summary>
            Returns a SQL statement to determine if a stored procedure exists
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetStoredProceduresSQL">
            <summary>
            Returns a SQL statement to get all stored procedures in a database
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetStoredProceduresSchemaSQL">
            <summary>
            Returns a SQL statement to get all stored procedures in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetStoredProceduresSchemaStoredProcSQL">
            <summary>
            Returns a SQL statement to get all stored procedures that match a LIKE in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetStoredProcedureCountSQL">
            <summary>
            Returns a SQL statement to count all stored procedures in a database
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetStoredProcedureCountSchemaSQL">
            <summary>
            Returns a SQL statement to count all stored procedures in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetStoredProcedureCountSchemaProcSQL">
            <summary>
            Returns a SQL statement to count all stored procedures in a specific schema
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetStoredProcedureSQL">
            <summary>
            Returns a SQL statement to get information about a specific stored procedure
            </summary>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetStoredProcedureReturnColumnsSQL(System.String,System.String)">
            <summary>
            Returns a SQL statement that is the stored procedure name
            </summary>
            <param name="schemaName">Schema Name</param>
            <param name="procedureName">Stored Procedure Name</param>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetStoredProceduresPackageSQL">
            <summary>
            NOT IMPLEMENTED for SQL Server
            </summary>
            <returns>An empty String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetStoredProceduresPackageSchemaSQL">
            <summary>
            NOT IMPLEMENTED for SQL Server
            </summary>
            <returns>An empty String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetStoredProcedureReturnColumns(System.String,System.String,PDSA.DataLayer.Schema.PDSASchemaStoredProcParameters)">
            <summary>
            Returns a collection of PDSASchemaColumn objects that are returned from a specific stored procedure.
            </summary>
            <param name="schemaName">Schema Name</param>
            <param name="procedureName">Stored Procedure Name</param>
            <param name="paramList">A PDSASchemaStoredProcParameters object</param>
            <returns>A collection of PDSASchemaColumn objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetStoredProcedureParametersSQL(System.String,System.String)">
            <summary>
            Returns a SQL statement that is the stored procedure name
            </summary>
            <param name="schemaName">Schema Name</param>
            <param name="procedureName">Stored Procedure Name</param>
            <returns>A SQL String</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetStoredProceduresPackages(System.String)">
            <summary>
            NOT IMPLEMENTED FOR SQL SERVER
            </summary>
            <param name="schemaName">Schema Name</param>
            <returns>NotImplementedException object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetStoredProcedureParameters(System.String)">
            <summary>
            Retrieve the Stored Procedure Parameters for SQL Server
            For SQL Server, we need to override this method.
            </summary>
            <param name="procedureName">Stored Procedure Name</param>
            <returns>A PDSASchemaStoredProcParameters collection</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.GetStoredProcedureParameters(System.String,System.String)">
            <summary>
            Retrieve the Stored Procedure Parameters for SQL Server
            For SQL Server, we need to override this method.
            </summary>
            <param name="schemaName">Schema Name</param>
            <param name="procedureName">Stored Procedure Name</param>
            <returns>A PDSASchemaStoredProcParameters collection</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient.ProcedureNameCleanUp(System.String)">
            <summary>
            Removes any ";" or "." from the end of the stored procedure
            </summary>
            <param name="procedureName">A stored procedure name</param>
            <returns>A string</returns>
        </member>
        <member name="T:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient2000">
            <summary>
            This class is for reading schema data in SQL Server 200
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient2000.#ctor">
            <summary>
            Constructor for PDSADBSchemaSqlClient2000 class
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient2000.DBMSProductName">
            <summary>
            Return the name of the SQL Server
            </summary>
            <returns>Microsoft SQL Server 2000</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient2000.GetCatalogsSQL">
            <summary>
            Return the SQL to read catalogs from SQL Server
            </summary>
            <returns>SELECT [name] FROM master.dbo.sysdatabases</returns>
        </member>
        <member name="M:PDSA.DataLayer.Schema.Providers.PDSADBSchemaSqlClient2000.GetStoredProceduresSQL">
            <summary>
            Return SQL to read Stored Procedures from SQL Server
            </summary>
            <returns>An SQL Statement</returns>
        </member>
        <member name="T:PDSA.DataLayer.Configuration.PDSADataConfigProvider">
            <summary>
            This class holds all properties read in from each data provider's config file settings.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Configuration.PDSADataConfigProvider.ConnectStringName">
            <summary>
            Get/Set the Connect String Name that will be used to look up the connection string in the &lt;connectionStrings&gt; section in the Config file
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Configuration.PDSADataConfigProvider.DBLanguage">
            <summary>
            Get/Set the language used to store data in this database.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Configuration.PDSADataConfigProvider.DBDateFormat">
            <summary>
            Get/Set the database format string used to store date data in the database.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Configuration.PDSADataConfigProvider.MinDate">
            <summary>
            Get/Set the minimum date that is allowed to be stored in the database.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Configuration.PDSADataConfigProvider.MaxDate">
            <summary>
            Get/Set the maximum date that is allowed to be stored in the database.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Configuration.PDSADataConfigProvider.UseStoredProcedures">
            <summary>
            Get/Set whether or not the data classes should use stored procedures for all calls to the database.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Configuration.PDSADataConfigProvider.UseDBAuditTracking">
            <summary>
            Get/Set whether or not the data classes should use audit tracking.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Configuration.PDSADataConfigProvider.PKTableType">
            <summary>
            Get/Set the name of the Class that will be used for retrieving a Primary key from the pdsaTableIds table.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Configuration.PDSADataConfigProvider.PKTableAssembly">
            <summary>
            Get/Set the name of the Assembly where the PKTableType class is located that will be used for retrieving a Primary key from the pdsaTableIds table.
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Configuration.PDSADataConfigProviderCollection">
            <summary>
            A collection of PDSADataConfigProvider objects
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Configuration.PDSADataConfigProviders">
            <summary>
            The collection class for all PDSADataConfigProvider objects
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Configuration.PDSADataConfigProviders.DefaultProvider">
            <summary>
            Get/Set the default provider to use.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Configuration.PDSADataConfigProviders.UserLanguage">
            <summary>
            Get the Language for all Messages
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Configuration.PDSADataConfigProviders.CreateNewElement">
            <summary>
            Create new PDSADataConfigProvider object
            </summary>
            <returns>A ConfigurationElement object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Configuration.PDSADataConfigProviders.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns a provider name from the element name passed in.
            </summary>
            <param name="element">The element to locate</param>
            <returns>A String with the Provider Name</returns>
        </member>
        <member name="P:PDSA.DataLayer.Configuration.PDSADataConfigProviders.CollectionType">
            <summary>
            Gets the ConfigurationElementCollectionType object
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Configuration.PDSADataConfigProviders.ElementName">
            <summary>
            Returns 'add' as that is what is used for each data provider in the config file
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Configuration.PDSADataSectionHandler">
            <summary>
            This class handles the &lt;providers&gt; section in the config file
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.Configuration.PDSADataSectionHandler.ConfigProviders">
            <summary>
            Get/Set the the collection of PDSADataProviders.
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.IPDSAPKTableId">
            <summary>
            Interface for classes to implement that retrieve a new Primary Key from the pdsaTableIds table.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.IPDSAPKTableId.ErrorMessage">
            <summary>
            Get/Set the error message
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.IPDSAPKTableId.GetNewPrimaryKey(System.String,System.String,System.String)">
            <summary>
            Gets a new Int32 primary key value for the specified table name.
            </summary>
            <param name="tableName">The table name for which to retrieve a primary key</param>
            <param name="pkField">The primary key field name of the table</param>
            <param name="loginName">The user requesting the key</param>
            <returns>Int32</returns>
        </member>
        <member name="M:PDSA.DataLayer.IPDSAPKTableId.ResetAllTableIds">
            <summary>
            Deletes all rows in the pdsaTableIds table.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.IPDSAPKTableId.ResetTableId(System.String,System.String,System.String)">
            <summary>
            You must override this method. Deletes the row in the pdsaTableIds table for the specified table name passed in. Then calculates the next primary key for that table.
            </summary>
            <param name="tableName">The table name to retrieve a primary key for</param>
            <param name="pkField">The primary key field name</param>
            <param name="loginName">The user requesting to reset</param>
            <returns>The new pirmary key id</returns>
        </member>
        <member name="T:PDSA.DataLayer.PDSADatabaseType">
            <summary>
            Enumeration for which database server you are connected to.
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSADatabaseType.Unknown">
            <summary>
            Initial state
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSADatabaseType.SQLServer">
            <summary>
            SQL Server
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSADatabaseType.Oracle">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSADatabaseType.Sybase">
            <summary>
            Sybase
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSADatabaseType.MySQL">
            <summary>
            MySQL
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSADatabaseType.DB2">
            <summary>
            DB2
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.PDSADataException">
            <summary>
            Pass any exception into this class to get a complete list of all of the parameters, and all inner exceptions.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataException.#ctor">
            <summary>
            Base constructor for the PDSADataException object. Calls the Init method.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the PDSADataException object.
            </summary>
            <param name="message">The message to set</param>
            <param name="theException">The exception to put into the inner exception</param>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataException.#ctor(System.String,System.Exception,System.String,System.String)">
            <summary>
            Constructor for the PDSADataException object.
            </summary>
            <param name="message">The message to set</param>
            <param name="theException">The exception to put into the inner exception</param>
            <param name="className">The class name that caused the exception</param>
            <param name="methodName">The method name that caused the exception</param>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataException.Init">
            <summary>
            Initialize variables to a valid start state.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataException.ParameterInfo">
            <summary>
            Get/Set the ParameterInfo object
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataException.SQL">
            <summary>
            Get/Set the last SQL Statement submitted.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataException.ConnectString">
            <summary>
            Get/Set the connection string the last SQL statement was sumitted on.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataException.ConfigProvider">
            <summary>
            Get/Set a reference to the PDSADataConfigProvider
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataException.Provider">
            <summary>
            Get/Set the PDSADataProvider the exception occurred on
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataException.GetFullExceptionMessage(System.Boolean)">
            <summary>
            Creates an exception object from all the information gathered from the various objects
            </summary>
            <param name="retrieveFullMessage">True=Retrieve all info about the message</param>
            <returns>An exception message</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataException.ToString">
            <summary>
            Calls the GetFullExceptionMessage method
            </summary>
            <returns>A string exception message</returns>
        </member>
        <member name="T:PDSA.DataLayer.PDSADataProviderParameterInfo">
            <summary>
            This class holds information about how to pass parameters via the data provider
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProviderParameterInfo.#ctor">
            <summary>
            Constructor to initialize all properties to a valid start state
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataProviderParameterInfo.ObjectPrefix">
            <summary>
            Get/Set the prefix to put around object names that might have a space. For example, in SQL Server you would use the open square bracket '['.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataProviderParameterInfo.ObjectSuffix">
            <summary>
            Get/Set the suffix to put around object names that might have a space. For example, in SQL Server you would use the close square bracket ']'.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataProviderParameterInfo.ObjectSeparator">
            <summary>
            Get/Set the separator character to put in between names. For example, in SQL Server you would use the period '.'.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataProviderParameterInfo.ParameterPrefixForADONETCommands">
            <summary>
            Get/Set the prefix to use when passing parameters via an ADO.NET parameter object
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataProviderParameterInfo.ParameterPrefixInSql">
            <summary>
            Get/Set the Parameter prefix that is used in SQL of the database. For example, in SQL Server you use an @ sign, while in Oracle you use a colon (:)
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataProviderParameterInfo.ReturnParameterName">
            <summary>
            Get/Set the name of the return parameter name. For example in SQL Server it is always RETURN_VALUE.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataProviderParameterInfo.ReturnParameterDataType">
            <summary>
            Get/Set the data type of the return parameter.
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.PDSADataManager">
            <summary>
            A class that you use to submit all SQL statements on
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataManager.#ctor">
            <summary>
            Constructor for PDSADataManager
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSADataManager.SECTION_NAME">
            <summary>
            The section name in the config file to read
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSADataManager.PDSAFrameworkProviderCacheKey">
            <summary>
            Use this as the 'Key' param to the call to the GetProvider() 
            when you want to cache the PDSADataProvider object that is used for the PDSA Framework tables.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataManager.Provider">
            <summary>
            Get/Set the current Data Provider
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataManager.ConfigurationProvider">
            <summary>
            Get/Set the PDSADataConfigProvider object
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataManager.ConfigFileName">
            <summary>
            Get/Set the Config File Name string
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataManager.PDSAFrameworkProviderName">
            <summary>
            Get/Set the DataProviderName that is used to get the Data Provider for all the PDSA Framework Tables. The default value is 'PDSASqlClient'.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataManager.ConfigurationProviders">
            <summary>
            Get/Set the PDSADataConfigProviders object
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataManager.Reset">
            <summary>
            Resets all objects to null
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataManager.GetProviderNames">
            <summary>
            Gets a collection of all Provider Names from the Config File
            </summary>
            <returns>A collection of PDSADataConfigProvider objects</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataManager.GetDefaultProviderName">
            <summary>
            Returns a string of the default provider name
            </summary>
            <returns>A string of the default provider name</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataManager.GetDefaultProvider">
            <summary>
            Returns the default PDSADataProvider object
            </summary>
            <returns>A PDSADataProvider object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataManager.GetProvider(System.String)">
            <summary>
            Returns a PDSADataProvider object based on the provider name passed in.
            </summary>
            <param name="providerName">A provider name</param>
            <returns>A PDSADataProvider object, or null if not found.</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataManager.GetPDSAFrameworkProvider">
            <summary>
            Returns the PDSADataProvider that will be used to get all tables in the PDSA Framework database
            </summary>
            <returns>A PDSADataProvider object, or if not found, then the Default provider will be returned</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataManager.GetPDSAFrameworkProvider(System.String)">
            <summary>
            Returns the PDSADataProvider that will be used to get all tables in the PDSA Framework database
            </summary>
            <param name="providerName">A provider name</param>
            <returns>A PDSADataProvider object, or if not found, then the Default provider will be returned</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataManager.GetProvider(System.String,System.String)">
            <summary>
            Returns a PDSADataProvider object based on the provider name passed in.
            </summary>
            <param name="providerName">A provider name</param>
            <param name="keyNameForCache">A key name to look up the provider in the data provider cache</param>
            <returns>A PDSADataProvider object, or null if not found.</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataManager.GetProvidersCollection">
            <summary>
            Returns a PDSADataConfigProviders object of all data providers read in from the config file
            </summary>
            <returns>A PDSADataConfigProviders object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataManager.InitProvider(PDSA.DataLayer.Configuration.PDSADataConfigProvider,System.String)">
            <summary>
            Initializes a PDSADataProvider object
            </summary>
            <param name="configProvider">A PDSADataConfigProvider that will be used to create an instance of the PDSADataProvider object</param>
            <param name="keyNameForCache">The key name in the data provider cache to look up</param>
            <returns>A PDSADataProvider object, null if an exception occurs.</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataManager.CreateException(System.Exception,System.String,System.String,System.String,PDSA.DataLayer.Configuration.PDSADataConfigProvider)">
            <summary>
            Create a PDSADataException object
            </summary>
            <param name="ex">An exception object</param>
            <param name="msg">A message</param>
            <param name="className">Class name in which exception occurred</param>
            <param name="methodName">Method name in which exception occurred</param>
            <param name="configProvider">Current configuration provider</param>
            <returns>A PDSADataException object</returns>
        </member>
        <member name="T:PDSA.DataLayer.PDSADataNullProvider">
            <summary>
            This class is used when we do not need a full provider, but need something that will return values. Useful in WPF and Silverlight applications when data binding.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataNullProvider.CreateParameterInfo">
            <summary>
            Creates a new PDSADataProviderParameterInfo object
            </summary>
            <returns>A PDSADataProviderParameterInfo object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataNullProvider.CreateConnection">
            <summary>
            Create NULL Connection
            </summary>
            <returns>A null value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataNullProvider.CreateConnection(System.String,System.Boolean)">
            <summary>
            Create NULL Connection
            </summary>
            <param name="connectString">Connection string</param>
            <param name="openConnection">Open a connection</param>
            <returns>A null value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataNullProvider.CreateConnection(System.Boolean)">
            <summary>
            Create NULL Connection
            </summary>
            <param name="openConnection">Open a connection</param>
            <returns>A null value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataNullProvider.CreateConnection(System.String)">
            <summary>
            Create NULL Connection
            </summary>
            <param name="connectString">Connection string</param>
            <returns>A null value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataNullProvider.CreateCommand">
            <summary>
            Create NULL Command
            </summary>
            <returns>A null value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataNullProvider.CreateCommand(System.String)">
            <summary>
            Create NULL Command
            </summary>
            <param name="sql">SQL String</param>
            <returns>A null value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataNullProvider.CreateCommand(System.String,System.String)">
            <summary>
            Create NULL Command
            </summary>
            <param name="sql">SQL String</param>
            <param name="connectString">Connection String</param>
            <returns>A null value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataNullProvider.CreateCommand(System.String,System.String,System.Boolean)">
            <summary>
            Create NULL Command
            </summary>
            <param name="sql">SQL String</param>
            <param name="connectString">Connection String</param>
            <param name="openConnection">Open a connection</param>
            <returns>A null value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataNullProvider.CreateCommand(System.String,System.Data.IDbConnection)">
            <summary>
            Create NULL Command
            </summary>
            <param name="sql">SQL String</param>
            <param name="cnn">A Connection</param>
            <returns>A null value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataNullProvider.CreateParameter">
            <summary>
            Create NULL Parameter
            </summary>
            <returns>A null value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataNullProvider.CreateParameter(System.String)">
            <summary>
            Create NULL Parameter
            </summary>
            <param name="paramName">A parameter name</param>
            <returns>A null value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataNullProvider.CreateParameter(System.String,System.Data.DbType)">
            <summary>
            Create NULL Parameter
            </summary>
            <param name="paramName">A parameter name</param>
            <param name="dataType">A data type</param>
            <returns>A null value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataNullProvider.CreateParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            Create NULL Parameter
            </summary>
            <param name="paramName">A parameter name</param>
            <param name="dataType">A data type</param>
            <param name="value">A value</param>
            <returns>A null value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataNullProvider.CreateParameter(System.String,System.Data.DbType,System.Object,System.Int32)">
            <summary>
            Create NULL Parameter
            </summary>
            <param name="paramName">A parameter name</param>
            <param name="dataType">A data type</param>
            <param name="value">A value</param>
            <param name="size">Size of parameter</param>
            <returns>A null value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataNullProvider.GetDataFromParameter(System.Data.IDataParameter)">
            <summary>
            Get NULL
            </summary>
            <param name="param">Parameter name</param>
            <returns>A null value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataNullProvider.CreateDataAdapter(System.String,System.String)">
            <summary>
            Create NULL Data Adapter
            </summary>
            <param name="sql">SQL String</param>
            <param name="connectString">Connection string</param>
            <returns>A null value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataNullProvider.CreateDataAdapter(System.Data.IDbCommand)">
            <summary>
            Create NULL Data Adapter
            </summary>
            <param name="cmd">Command object</param>
            <returns>A null value</returns>
        </member>
        <member name="T:PDSA.DataLayer.PDSADataProvider">
            <summary>
            An abstract class from which all PDSADataProvider classes inherit.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.#ctor">
            <summary>
            Base constructor for the PDSADataProvider class. Calls the Init method.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.Init">
            <summary>
            Initialize any properties to a valid start state
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSADataProvider.mConfig">
            <summary>
            Variable to hold a reference to the PDSADataConfigProvider object
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSADataProvider.mConfigs">
            <summary>
            Variable to hold a reference to the PDSADataConfigProviders object
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSADataProvider.mConnectString">
            <summary>
            Variable to hold the connection string
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSADataProvider.mDBLanguage">
            <summary>
            Variable to hold the Database Language read from the Config file
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSADataProvider.mDefaultDateFormatString">
            <summary>
            Variable to hold the default date date format string
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSADataProvider.mLikeOperator">
            <summary>
            Variable to hold the LIKE operator that this database uses.
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSADataProvider.mUseStoredProcedures">
            <summary>
            Variable to hold whether or not to use stored procedures
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSADataProvider.mUseDBAuditTracking">
            <summary>
            Variable to hold whether or not to use audit tracking
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSADataProvider.mParameterInfo">
            <summary>
            Variable to hold a reference to a PDSADataProviderParameterInfo object
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSADataProvider.mPKTableIdObject">
            <summary>
            Variable to hold an instance of a PDSA Primary Key Table ID Generation Class
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataProvider.ConfigurationProvider">
            <summary>
            Get/Set a PDSADataConfigProvider object for this Data Provider
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataProvider.ConfigFileName">
            <summary>
            Get/Set the confgiFileName string
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataProvider.ConfigurationProviders">
            <summary>
             Get/Set a PDSADataConfigProviders object for this Data Provider
             </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataProvider.ProviderConnectStringKey">
            <summary>
            Get/Set the connect string key for this provider. This key is used to 
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataProvider.ParameterInfo">
            <summary>
            Get/Set a reference to a PDSADataProviderParameterInfo object for this data provider.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataProvider.ConnectString">
            <summary>
            Get/Set the connection string used by this data provider.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataProvider.DefaultDateFormatString">
            <summary>
            Get/Set the default date format string used for this provider.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataProvider.DBLanguage">
            <summary>
            Get/Set the language used by this database.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataProvider.LikeOperator">
            <summary>
            Get/Set the LIKE operator used by this database.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataProvider.UseStoredProcedures">
            <summary>
            Get/Set whether or not to use stored procedures for all data access.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataProvider.UseDBAuditTracking">
            <summary>
            Get/Set whether or not to have the data classes use audit tracking for all data modification operations.
            </summary>
        </member>
        <member name="P:PDSA.DataLayer.PDSADataProvider.PKTableIdObject">
            <summary>
            Get/Set an instance of a PDSA PK Table ID Generation Class
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreatePKTableIdObject">
            <summary>
            Create an instance of a PDSAPKTableId class
            </summary>
            <returns>A PDSAPKTableId object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.QuoteString(System.String)">
            <summary>
            Checks the passed in string for any single quote characters and puts two single quotes in its place. This will help avoid SQL injection attacks on string values
            </summary>
            <param name="value">A value that may contain single quotes</param>
            <returns>A string with the appropriate single quotes around it</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.HideLoginInfoForConnectionString(System.String)">
            <summary>
            Looks for UID, User Id, Pwd, Password, etc. in a connection string and replaces their 'values' with astericks.
            </summary>
            <param name="connectString">The connection string to check</param>
            <returns>A string with hidden user id and password values</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.NowFormatted">
            <summary>
            Returns the current date/time using the default date format string
            </summary>
            <returns>a string value that contains the current date/time</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.NowFormatted(System.String)">
            <summary>
            Returns the current date/time using the default date format string
            </summary>
            <param name="dateFormatString">A date format string</param>
            <returns>a string value that contains the current date/time</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.GetDataExceptionString(System.Exception)">
            <summary>
            This method is intended to be overriden. By default will return the Message property from the passed in Exception object
            </summary>
            <param name="ex">An Exception object</param>
            <returns>A string containing error info</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.StringToDateFieldFormat(System.String)">
            <summary>
            Returns a date that is passed in with single quotes around it.
            </summary>
            <param name="value">The string to quote</param>
            <returns>A string</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.StringToDateFieldFormat(System.DateTime)">
            <summary>
            Returns a string in the Default Date Format specified for this provider.
            </summary>
            <param name="value">The date/time value to format</param>
            <returns>a date in a string format with single quotes around it</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.GetDataSet(System.String)">
            <summary>
            Returns a DataSet from the supplied SQL string passed in.
            </summary>
            <param name="sql">A SQL string that returns data</param>
            <returns>A DataSet Object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.GetDataSet(System.String,System.String)">
            <summary>
            Returns a DataSet from the supplied SQL string passed in.
            </summary>
            <param name="sql">A SQL string that returns data</param>
            <param name="connectString">A connection string</param>
            <returns>A DataSet Object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.GetDataSet(System.String,System.Data.IDbConnection)">
            <summary>
            Returns a DataSet from the supplied SQL string passed in.
            </summary>
            <param name="sql">A SQL string that returns data</param>
            <param name="cnn">A IDbConnection Object</param>
            <returns>A DataSet Object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.GetDataSet(System.Data.IDbCommand)">
            <summary>
            Returns a DataSet from the IDbCommand object passed in.
            </summary>
            <param name="cmd">A IDbCommand object</param>
            <returns>A DataSet object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.GetDataSet(System.Data.IDbCommand,System.String)">
            <summary>
            Returns a DataSet from the IDbCommand object passed in.
            </summary>
            <param name="cmd">A IDbCommand object</param>
            <param name="connectString">A connection string</param>
            <returns>A DataSet object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.GetDataSet(System.Data.IDbCommand,System.String,System.Boolean)">
            <summary>
            Returns a DataSet from the IDbCommand object passed in.
            </summary>
            <param name="cmd">A IDbCommand object</param>
            <param name="connectString">A connection string</param>
            <param name="closeConnection">True = Close connection when call is complete.</param>
            <returns>A DataSet object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.GetDataSet(System.Data.IDbCommand,System.Boolean)">
            <summary>
            Returns a DataSet from the IDbCommand object passed in.
            </summary>
            <param name="cmd">A IDbCommand object</param>
            <param name="closeConnection">True = Close connection when call is complete.</param>
            <returns>A DataSet object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.GetDataReader(System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary>
            Returns a IDataReader object after running the command in the IDbCommand object passed in.
            </summary>
            <param name="cmd">An IDbCommand object</param>
            <param name="behavior">A CommandBehavior enumeration</param>
            <returns>An IDataReader object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.GetDataReader(System.Data.IDbCommand)">
            <summary>
            Returns a IDataReader object after running the command in the IDbCommand object passed in.
            </summary>
            <param name="cmd">An IDbCommand object</param>
            <returns>An IDataReader object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.GetDataReader(System.Data.IDbCommand,System.String)">
            <summary>
            Returns a IDataReader object after running the command in the IDbCommand object passed in.
            </summary>
            <param name="cmd">An IDbCommand object</param>
            <param name="connectString">A connection string</param>
            <returns>An IDataReader object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.GetDataReader(System.Data.IDbCommand,System.Data.IDbConnection)">
            <summary>
            Returns a IDataReader object after running the command in the IDbCommand object passed in.
            </summary>
            <param name="cmd">An IDbCommand object</param>
            <param name="cnn">An IDbConnection object</param>
            <returns>An IDataReader object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.GetDataReader(System.Data.IDbCommand,System.Data.IDbConnection,System.Data.CommandBehavior)">
            <summary>
            Returns a IDataReader object after running the command in the IDbCommand object passed in.
            </summary>
            <param name="cmd">An IDbCommand object</param>
            <param name="cnn">An IDbConnection object</param>
            <param name="behavior">A CommandBehavior enumeration</param>
            <returns>An IDataReader object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.GetDataReader(System.String,System.String)">
            <summary>
            Returns a IDataReader object after running the SQL string passed in.
            </summary>
            <param name="sql">A SQL statement that returns data</param>
            <param name="connectString">A connection string</param>
            <returns>An IDataReader object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.GetDataReader(System.String,System.String,System.Data.CommandBehavior)">
            <summary>
            Returns a IDataReader object after running the SQL string passed in.
            </summary>
            <param name="sql">A SQL statement that returns data</param>
            <param name="behavior">A CommandBehavior enumeration</param>
            <param name="connectString">A connection string</param>
            <returns>An IDataReader object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.GetDataReader(System.String,System.Data.IDbConnection)">
            <summary>
            Returns a IDataReader object after running the SQL string passed in.
            </summary>
            <param name="sql">A SQL statement that returns data</param>
            <param name="cnn">A IDbConnection object</param>
            <returns>An IDataReader object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.ExecuteSQL(System.Data.IDbCommand)">
            <summary>
            Executes a SQL data modification 
            </summary>
            <param name="cmd">An IDbCommand object with the appropriate SQL statement and connection object already set.</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.ExecuteSQL(System.Data.IDbCommand,System.String)">
            <summary>
            Executes a SQL data modification 
            </summary>
            <param name="cmd">An IDbCommand object with the appropriate SQL statement and connection object already set.</param>
            <param name="connectString">A connection string</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.ExecuteSQL(System.String,System.String)">
            <summary>
            Executes a SQL data modification 
            </summary>
            <param name="sql">A SQL statement.</param>
            <param name="connectString">A connection string</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.ExecuteSQL(System.String,System.Data.IDbConnection)">
            <summary>
            Executes a SQL data modification 
            </summary>
            <param name="sql">A SQL statement.</param>
            <param name="cnn">A IDbConnection object</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.ExecuteSQL(System.Data.IDbCommand,System.Boolean)">
            <summary>
            Executes a SQL data modification 
            </summary>
            <param name="cmd">An IDbCommand object with the appropriate SQL statement and connection object already set.</param>
            <param name="closeConnection">Close the connection after executing the SQL</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.ExecuteScalar(System.String,System.String)">
            <summary>
            Executes a SQL statement that just returns a single value
            </summary>
            <param name="sql">A SQL statement</param>
            <param name="connectString">A Connection String</param>
            <returns>The value returned from the execution. Null if an error occurred.</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.ExecuteScalar(System.String,System.Data.IDbConnection)">
            <summary>
            Executes a SQL statement that just returns a single value
            </summary>
            <param name="sql">A SQL statement</param>
            <param name="cnn">A IDbConnection object</param>
            <returns>The value returned from the execution. Null if an error occurred.</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.ExecuteScalar(System.String,System.Data.IDbTransaction)">
            <summary>
            Executes a SQL statement that just returns a single value
            </summary>
            <param name="sql">A SQL statement</param>
            <param name="tran">A IDbTransaction object</param>
            <returns>The value returned from the execution. Null if an error occurred.</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.ExecuteScalar(System.Data.IDbCommand,System.String)">
            <summary>
            Executes a SQL statement that just returns a single value
            </summary>
            <param name="cmd">A IDbCommand object</param>
            <param name="connectString">A connection string</param>
            <returns>The value returned from the execution. Null if an error occurred.</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.ExecuteScalar(System.Data.IDbCommand)">
            <summary>
            Executes a SQL statement that just returns a single value
            </summary>
            <param name="cmd">A IDbCommand object</param>
            <returns>The value returned from the execution. Null if an error occurred.</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateParameterInfo">
            <summary>
            Abstract method to be overriden. Use this to create a parameter information object
            </summary>
            <returns>A PDSADataProviderParameterInfo object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateConnection">
            <summary>
            Creates a Connection object for the specific data provider
            </summary>
            <returns>An IDbConnection object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateConnection(System.String,System.Boolean)">
            <summary>
            Creates a Connection object for the specific data provider
            </summary>
            <param name="connectString">A connection string</param>
            <param name="openConnection">Open the connection?</param>
            <returns>An IDbConnection object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateConnection(System.Boolean)">
            <summary>
            Creates a Connection object for the specific data provider
            </summary>
            <param name="openConnection">Open the connection?</param>
            <returns>An IDbConnection object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateConnection(System.String)">
            <summary>
            Creates a Connection object for the specific data provider
            </summary>
            <param name="connectString">A connection string</param>
            <returns>An IDbConnection object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateCommand">
            <summary>
            Creates a Command object for the specific data provider
            </summary>
            <returns>An IDbCommand object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateCommand(System.String)">
            <summary>
            Creates a Command object for the specific data provider
            </summary>
            <param name="sql">A SQL statement</param>
            <returns>An IDbCommand object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateCommand(System.String,System.String)">
            <summary>
            Creates a Command object for the specific data provider
            </summary>
            <param name="sql">A SQL statement</param>
            <param name="connectString">A connection string</param>
            <returns>An IDbCommand object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateCommand(System.String,System.String,System.Boolean)">
            <summary>
            Creates a Command object for the specific data provider
            </summary>
            <param name="sql">A SQL statement</param>
            <param name="connectString">A connection string</param>
            <param name="openConnection">Open the connection object?</param>
            <returns>An IDbCommand object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateCommand(System.String,System.Data.IDbConnection)">
            <summary>
            Creates a Command object for the specific data provider
            </summary>
            <param name="sql">A SQL statement</param>
            <param name="cnn">An IDbConnection object</param>
            <returns>An IDbCommand object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateParameter">
            <summary>
            Creates a Parameter object for the specific data provider
            </summary>
            <returns>An IDataParameter object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateParameter(System.String)">
            <summary>
            Creates a Parameter object for the specific data provider
            </summary>
            <param name="paramName">The parameter name</param>
            <returns>An IDataParameter object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateParameter(System.String,System.Data.DbType)">
            <summary>
            Creates a Parameter object for the specific data provider
            </summary>
            <param name="paramName">The parameter name</param>
            <param name="dataType">The data type for the parameter</param>
            <returns>An IDataParameter object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            Creates a Parameter object for the specific data provider
            </summary>
            <param name="paramName">The parameter name</param>
            <param name="dataType">The data type for the parameter</param>
            <param name="value">The value for the parameter</param>
            <returns>An IDataParameter object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateParameter(System.String,System.Data.DbType,System.Object,System.Int32)">
            <summary>
            Creates a Parameter object for the specific data provider
            </summary>
            <param name="paramName">The parameter name</param>
            <param name="dataType">The data type for the parameter</param>
            <param name="value">The value for the parameter</param>
            <param name="size">The size of the parameter</param>
            <returns>An IDataParameter object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.GetDataFromParameter(System.Data.IDataParameter)">
            <summary>
            Returns the 'value' from the parameter object passed in
            </summary>
            <param name="param">An IDataParameter object</param>
            <returns>An IDataParameter object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateParameterName(System.String)">
            <summary>
            Creates a Parameter name for the specific data provider by using the ParameterPrefixForADONETCommands property from the ParameterInfo object.
            </summary>
            <param name="paramName">The name of the parameter to create</param>
            <returns>a string</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateDataAdapter(System.String,System.String)">
            <summary>
            Create an IDbDataAdapter
            </summary>
            <param name="sql">A SQL String</param>
            <param name="connectString">A Connection String</param>
            <returns>An IDbDataAdapter object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateDataAdapter(System.Data.IDbCommand)">
            <summary>
            Create an IDbDataAdapter
            </summary>
            <param name="cmd">An IDbCommand object</param>
            <returns>An IDbDataAdapter object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateDataReader(System.Data.IDbCommand)">
            <summary>
            Create an IDataReader object
            </summary>
            <param name="cmd">An IDbCommand object</param>
            <returns>An IDataReader object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateDataReader(System.Data.IDbCommand,System.String)">
            <summary>
            Create an IDataReader object
            </summary>
            <param name="cmd">An IDbCommand object</param>
            <param name="connectString">A connection string</param>
            <returns>An IDataReader object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateDataReader(System.Data.IDbCommand,System.Data.IDbConnection)">
            <summary>
            Create an IDataReader object
            </summary>
            <param name="cmd">An IDbCommand object</param>
            <param name="cnn">An IDbConnection object</param>
            <returns>An IDataReader object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateDataReader(System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary>
            Create an IDataReader object
            </summary>
            <param name="cmd">An IDbCommand object</param>
            <param name="behavior">A CommandBehavior Enumeration</param>
            <returns>An IDataReader object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateDataReader(System.String,System.Data.IDbConnection)">
            <summary>
            Create an IDataReader object
            </summary>
            <param name="sql">A SQL string</param>
            <param name="cnn">An IDbConnection object</param>
            <returns>An IDataReader</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateTransaction(System.Data.IDbConnection)">
            <summary>
            Create an IDbTransaction object
            </summary>
            <param name="cnn">An IDbConnection object</param>
            <returns>A IDbTransaction object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.RetrieveObjectPrimaryKeyAfterInsert(System.Data.IDbConnection)">
            <summary>
            Submits the appropriate command to retrieve an auto-generated value from the database
            </summary>
            <param name="cnn">An IDbConnection object</param>
            <returns>An object value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.RetrieveObjectPrimaryKeyAfterInsert(System.Data.IDbTransaction)">
            <summary>
            Submits the appropriate command to retrieve an auto-generated value from the database
            </summary>
            <param name="tran">An IDbTransaction object</param>
            <returns>An object value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.RetrievePrimaryKeyAfterInsert(System.Data.IDbConnection)">
            <summary>
            Submits the appropriate command to retrieve an auto-generated value from the database
            </summary>
            <param name="cnn">An IDbConnection object</param>
            <returns>An integer value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.RetrievePrimaryKeyAfterInsert(System.Data.IDbTransaction)">
            <summary>
            Submits the appropriate command to retrieve an auto-generated value from the database
            </summary>
            <param name="tran">An IDbTransaction object</param>
            <returns>An integer value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.RetrieveLongPrimaryKeyAfterInsert(System.Data.IDbConnection)">
            <summary>
            Submits the appropriate command to retrieve an auto-generated value from the database
            </summary>
            <param name="cnn">An IDbConnection object</param>
            <returns>A long value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.RetrieveLongPrimaryKeyAfterInsert(System.Data.IDbTransaction)">
            <summary>
            Submits the appropriate command to retrieve an auto-generated value from the database
            </summary>
            <param name="tran">An IDbTransaction object</param>
            <returns>An long value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.RetrieveDecimalPrimaryKeyAfterInsert(System.Data.IDbConnection)">
            <summary>
            Submits the appropriate command to retrieve an auto-generated value from the database
            </summary>
            <param name="cnn">An IDbConnection object</param>
            <returns>A decimal value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.RetrieveDecimalPrimaryKeyAfterInsert(System.Data.IDbTransaction)">
            <summary>
            Submits the appropriate command to retrieve an auto-generated value from the database
            </summary>
            <param name="tran">An IDbTransaction object</param>
            <returns>An decimal value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.RetrieveDoublePrimaryKeyAfterInsert(System.Data.IDbConnection)">
            <summary>
            Submits the appropriate command to retrieve an auto-generated value from the database
            </summary>
            <param name="cnn">An IDbConnection object</param>
            <returns>A double value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.RetrieveDoublePrimaryKeyAfterInsert(System.Data.IDbTransaction)">
            <summary>
            Submits the appropriate command to retrieve an auto-generated value from the database
            </summary>
            <param name="tran">An IDbTransaction object</param>
            <returns>An double value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.RetrieveShortPrimaryKeyAfterInsert(System.Data.IDbConnection)">
            <summary>
            Submits the appropriate command to retrieve an auto-generated value from the database
            </summary>
            <param name="cnn">An IDbConnection object</param>
            <returns>A short value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.RetrieveShortPrimaryKeyAfterInsert(System.Data.IDbTransaction)">
            <summary>
            Submits the appropriate command to retrieve an auto-generated value from the database
            </summary>
            <param name="tran">An IDbTransaction object</param>
            <returns>An short value</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CreateException(System.Exception,System.String,System.String,System.String,System.String,System.String,System.Data.IDbCommand)">
            <summary>
            Creates a PDSADataException object
            </summary>
            <param name="ex">An exception object</param>
            <param name="msg">A message</param>
            <param name="className">The class name where the exception originated</param>
            <param name="methodName">The method name where the exception originated</param>
            <param name="sql">The SQL statement that was just submitted</param>
            <param name="connectString">The connection string used to submit the last SQL Statement</param>
            <param name="cmd">An IDbCommand object</param>
            <returns>A PDSADataException object</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.CanOpenConnection">
            <summary>
            Returns true if a connection can be opened used the connection string set in the data provider.
            This method just opens the connection, then closes it immediately.
            </summary>
            <returns>True if the connection can be opened.</returns>
        </member>
        <member name="M:PDSA.DataLayer.PDSADataProvider.SetCursorOnParam(System.Data.IDataParameter)">
            <summary>
            Use this mainly for oracle databases to set a Cursor Type on a data parameter
            </summary>
            <param name="param">The parameter on which to set the Cursor type</param>
        </member>
        <member name="T:PDSA.DataLayer.PDSALastDbStatus">
            <summary>
            Enumeration to keep track of the status of the last database call
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSALastDbStatus.Unknown">
            <summary>
            Initial state
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSALastDbStatus.Success">
            <summary>
            Database operation was successful
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSALastDbStatus.Exception">
            <summary>
            An exception occurred during the last database operation
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSALastDbStatus.NoRecordsFound">
            <summary>
            No records found as a result of the last database operation
            </summary>
        </member>
        <member name="F:PDSA.DataLayer.PDSALastDbStatus.ValidationFailed">
            <summary>
            Validation of data failed
            </summary>
        </member>
        <member name="T:PDSA.DataLayer.Providers.PDSADataSqlClient">
            <summary>
            A PDSA Data Provider for dealing specifically with SQL Server
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.#ctor">
            <summary>
            Base constructor for PDSADataSqlClient. Calls the Init Method.
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.Init">
            <summary>
            Initializes all variables to a valid start state
            </summary>
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.CreateParameterInfo">
            <summary>
            Create parameter information for this data provider and initializes each property to valid values for this database.
            </summary>
            <returns>A PDSADataProviderParameterInfo object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.RetrieveObjectPrimaryKeyAfterInsert(System.Data.IDbConnection)">
            <summary>
            Implements the specific method for SQL Server to return the IDENTITY.
            </summary>
            <param name="cnn">An IDbConnection Object</param>
            <returns>An Object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.RetrieveObjectPrimaryKeyAfterInsert(System.Data.IDbTransaction)">
            <summary>
            Implements the specific method for SQL Server to return the IDENTITY.
            </summary>
            <param name="tran">An IDbTransaction Object</param>
            <returns>An Object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.GetDataExceptionString(System.Exception)">
            <summary>
            Loops through all exceptions in the Errors collection and returns an Exception message.
            </summary>
            <param name="ex">An exception</param>
            <returns>A string</returns>
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.CreateConnection(System.String,System.Boolean)">
            <summary>
            Creates and returns a SqlConnection object.
            </summary>
            <param name="connectString">The connection string</param>
            <param name="openConnection">Pass in a true if you want to open the connection after setting the connection string</param>
            <returns>A SqlConnection object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.CreateConnection">
            <summary>
            Creates and returns a SqlConnection object.
            </summary>
            <returns>A SqlConnection Object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.CreateConnection(System.Boolean)">
            <summary>
            Creates and returns a SqlConnection object.
            </summary>
            <param name="openConnection">Pass in a true if you want to open the connection after setting the connection string</param>
            <returns>A SqlConnection Object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.CreateConnection(System.String)">
            <summary>
            Creates and returns a SqlConnection object.
            </summary>
            <param name="connectString">The connection string</param>
            <returns>A SqlConnection object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.CreateCommand">
            <summary>
            Create and return a SqlCommand object
            </summary>
            <returns>A SqlCommand object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.CreateCommand(System.String)">
            <summary>
            Create and return a SqlCommand object
            </summary>
            <param name="sql">The SQL string for this SqlCommand object</param>
            <returns>A SqlCommand object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.CreateCommand(System.String,System.String)">
            <summary>
            Create and return a SqlCommand object
            </summary>
            <param name="sql">The SQL string for this SqlCommand object</param>
            <param name="connectString">The connection string for this SqlCommand object</param>
            <returns>A SqlCommand object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.CreateCommand(System.String,System.String,System.Boolean)">
            <summary>
            Create and return a SqlCommand object
            </summary>
            <param name="sql">The SQL string for this SqlCommand object</param>
            <param name="connectString">The connection string for this SqlCommand object</param>
            <param name="openConnection">Open the connection on this Command object</param>
            <returns>A SqlCommand object</returns>    
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.CreateCommand(System.String,System.Data.IDbConnection)">
            <summary>
            Create and return a SqlCommand object
            </summary>
            <param name="sql">The SQL string for this SqlCommand object</param>
            <param name="cnn">A SqlConnection object</param>
            <returns>A SqlCommand object</returns>    
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.CreateParameter">
            <summary>
            Create and return a SqlParameter
            </summary>
            <returns>A SqlParameter object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.CreateParameter(System.String)">
            <summary>
            Create and return a SqlParameter
            </summary>
            <param name="paramName">The name to assign to the ParameterName property</param>
            <returns>A SqlParameter object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.CreateParameter(System.String,System.Data.DbType)">
            <summary>
            Create and return a SqlParameter
            </summary>
            <param name="paramName">The name to assign to the ParameterName property</param>
            <param name="dataType">The data type for this parameter</param>
            <returns>A SqlParameter object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.CreateParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            Create and return a SqlParameter
            </summary>
            <param name="paramName">The name to assign to the ParameterName property</param>
            <param name="dataType">The data type for this parameter</param>
            <param name="value">The value for this parameter</param>
            <returns>A SqlParameter object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.CreateParameter(System.String,System.Data.DbType,System.Object,System.Int32)">
            <summary>
            Create and return a SqlParameter
            </summary>
            <param name="paramName">The name to assign to the ParameterName property</param>
            <param name="dataType">The data type for this parameter</param>
            <param name="value">The value for this parameter</param>
            <param name="size">The size of this parameter</param>
            <returns>A SqlParameter object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.GetDataFromParameter(System.Data.IDataParameter)">
            <summary>
            Returns the value property from a SqlParameter object
            </summary>
            <param name="param">A SqlParameter object</param>
            <returns>An object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.CreateDataAdapter(System.String,System.String)">
            <summary>
            Create and return a SqlDataAdapter object
            </summary>
            <param name="sql">The SQL string for the SqlDataAdapter</param>
            <param name="connectString">The connection string for the SqlDataAdapter</param>
            <returns>A SqlDataAdapter object</returns>
        </member>
        <member name="M:PDSA.DataLayer.Providers.PDSADataSqlClient.CreateDataAdapter(System.Data.IDbCommand)">
            <summary>
            Create and return a SqlDataAdapter object
            </summary>
            <param name="cmd">A SqlCommand object pre-populated with the appropriate SQL string and Connection String.</param>
            <returns>A SqlDataAdapter object</returns>
        </member>
        <member name="T:PDSA.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.colConcurrencyValue">
            <summary>
              Looks up a localized string similar to ConcurrecyValue.
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.colInsertDate">
            <summary>
              Looks up a localized string similar to InsertDate.
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.colInsertName">
            <summary>
              Looks up a localized string similar to InsertName.
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.colUpdateDate">
            <summary>
              Looks up a localized string similar to UpdateDate.
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.colUpdateName">
            <summary>
              Looks up a localized string similar to UpdateName.
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.DeleteNoRowsAffected">
            <summary>
              Looks up a localized string similar to This record was not deleted. Possible Reasons...\r\n The record you were trying to delete was already deleted or another user updated the record before you attempted to delete it. Or, the Concurrency value field is set to Null..
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.TransactionNoRows">
            <summary>
              Looks up a localized string similar to No rows were {0} by the class: {1}\r\nPossible Reasons...\r\n  The record you were searching for using the primary key values was not found.\r\n  You forgot to set/update the ConcurrencyID.\r\nThe SQL submitted was: {2}\r\n.
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.TransactionNoRowsInserted">
            <summary>
              Looks up a localized string similar to No rows were Inserted by the class {0}.\r\nThe SQL submitted was: {1}.\r\n.
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.UpdateNoRowsAffected">
            <summary>
              Looks up a localized string similar to This record was not updated. Possible Reasons...\r\n The record you were trying to update was deleted or another user updated the record before you did. Or, the Concurrency value field is set to Null..
            </summary>
        </member>
    </members>
</doc>
