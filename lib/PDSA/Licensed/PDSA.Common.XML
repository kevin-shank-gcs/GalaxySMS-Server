<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PDSA.Common</name>
    </assembly>
    <members>
        <member name="T:PDSA.DataAccess.PDSAXmlGenerationType">
            <summary>
            The type of XML to generate
            </summary>
        </member>
        <member name="F:PDSA.DataAccess.PDSAXmlGenerationType.ElementBased">
            <summary>
            Generate Element Based XML
            </summary>
        </member>
        <member name="F:PDSA.DataAccess.PDSAXmlGenerationType.AttributeBased">
            <summary>
            Generate Attribute Based XML
            </summary>
        </member>
        <member name="T:PDSA.DataAccess.PDSADataConversions">
            <summary>
            A set of extension methods for DataSets, DataTables and List&lt;T&gt;
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataConversions.GetDataSetAsXml(System.Data.DataSet)">
            <summary>
            Returns an element-based XML string for a DataSet.
            </summary>
            <param name="ds">The DataSet</param>
            <returns>An XML string</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataConversions.GetDataSetAsXml(System.Data.DataSet,PDSA.DataAccess.PDSAXmlGenerationType)">
            <summary>
            Returns an element or attribute-based XML string for a DataSet.
            </summary>
            <param name="ds">The DataSet</param>
            <param name="xmlGenType">Attribute or Element Based</param>
            <returns>An XML string</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataConversions.GetDataSetAsXml(System.Data.DataSet,PDSA.DataAccess.PDSAXmlGenerationType,System.String,System.String)">
            <summary>
            Returns an element or attribute-based XML string for a DataSet.
            </summary>
            <param name="ds">The DataSet</param>
            <param name="xmlGenType">Attribute or Element Based</param>
            <param name="topNodeName">The name for your top node of your XML</param>
            <param name="nodesName">The name for each lower level node in your XML</param>
            <returns>An XML string</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataConversions.GetDataSetAsJSON(System.Data.DataSet)">
            <summary>
            Turn a DataSet into a JSON formatted string.
            Same as PDSAString.GetAsJSON
            </summary>
            <param name="ds">The DataSet</param>
            <returns>A JSON formatted string</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataConversions.GetDataTableAsJSON(System.Data.DataTable)">
            <summary>
            Turn a DataTable into a JSON formatted string.
            Same as PDSAString.GetAsJSON
            </summary>
            <param name="dt">The DataTable</param>
            <returns>A JSON formatted string</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataConversions.GetDataSetAsExcelString(System.Data.DataSet)">
            <summary>
            Turns a DataSet into a string that you can open with Excel
            The string is tab delimited for each column and has a CRLF at the end of each row of data
            </summary>
            <param name="ds">The DataSet</param>
            <returns>A string in Excel format</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataConversions.GetDataTableAsExcelString(System.Data.DataTable)">
            <summary>
            Turns a DataTable into a string that you can open with Excel
            The string is tab delimited for each column and has a CRLF at the end of each row of data
            </summary>
            <param name="dt">The DataTable to convert</param>
            <returns>A string in Excel format</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataConversions.GetListAsExcelString``1(System.Collections.Generic.IList{``0})">
            <summary>
            Turns a List&lt;T&gt; into a string that you can open with Excel
            The string is tab delimited for each column and has a CRLF at the end of each row of data
            </summary>
            <param name="coll">The generic List&lt;T&gt; to convert</param>
            <typeparam name="T">The base list type</typeparam>
            <returns>A string in Excel format</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataConversions.GetListAsCSVString``1(System.Collections.Generic.IList{``0})">
            <summary>
            Turns a List&lt;T&gt; into a comma-delimited string that you can open with Excel
            </summary>
            <param name="coll">The generic List&lt;T&gt; to convert</param>
            <typeparam name="T">The base list type</typeparam>
            <returns>A string in CSV format</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataConversions.CleanData(System.Object)">
            <summary>
            Cleans up data coming from a database in preparation for converting the data to Excel
            </summary>
            <param name="value">The value to clean</param>
            <returns>A string of the data, or blank string if null</returns>
        </member>
        <member name="T:PDSA.DataAccess.PDSADataException">
            <summary>
            Pass any exception into this class to get a complete list of all of the parameters, and all inner exceptions.
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataException.#ctor">
            <summary>
            Base constructor for the PDSADataException object. Calls the Init method.
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataException.#ctor(System.String)">
            <summary>
            Constructor for the PDSADataException object.
            </summary>
            <param name="message">The message to set</param>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the PDSADataException object.
            </summary>
            <param name="message">The message to set</param>
            <param name="innerException">The exception to put into the inner exception</param>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataException.Init">
            <summary>
            Initialize variables to a valid start state.
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataException.SQL">
            <summary>
            Get/Set the last SQL Statement submitted.
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataException.Parameters">
            <summary>
            Get/Set the last parameters submitted.
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataException.ConnectString">
            <summary>
            Get/Set the last connection string used
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataException.DatabaseSpecificError">
            <summary>
            Get/Set the last database specific error code
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataException.ToString">
            <summary>
            Gathers all information from the exception information gathered and returns a string
            </summary>
            <returns>A database specific error string</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataException.HideLoginInfoForConnectionString(System.String)">
            <summary>
            Looks for UID, User Id, Pwd, Password, etc. in a connection string and replaces their 'values' with astericks.
            </summary>
            <param name="connectString">The connection string to check</param>
            <returns>A string with hidden user id and password values</returns>
        </member>
        <member name="T:PDSA.DataAccess.PDSADataExtensionMethods">
            <summary>
            This class contains extension methods for DataRow objects
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataExtensionMethods.GetDataAs``1(System.Data.DataRow,System.String,``0)">
            <summary>
            If you are converting a 'tinyint' in SQL Server into a short or anything other than 'byte'
            This method will cause an exception and slow things down. In that case use the ConvertDataTo&lt;T&gt; method
            Or use the ConvertDataTo&lt;T&gt; if any other data type conversion causes an exception
            </summary>
            <param name="dr">The DataRow</param>
            <param name="colName">The column name in the data row</param>
            <param name="defaultValue">A default value to return if a null is detected</param>
            <typeparam name="T">The base type</typeparam>
            <returns>An object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataExtensionMethods.ConvertDataTo``1(System.Data.DataRow,System.String,``0)">
            <summary>
            Call this method when the GetDataAs&lt;T&gt; causes an error
            </summary>
            <param name="dr">The DataRow</param>
            <param name="colName">The column name in the data row</param>
            <param name="defaultValue">A default value to return if a null is detected</param>
            <typeparam name="T">The base type</typeparam>
            <returns>An object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataExtensionMethods.GetParameterAs``1(System.Data.IDbCommand,System.String,System.String)">
            <summary>
            Call this method when the GetDataAs&lt;T&gt; causes an error
            </summary>
            <param name="cmd">The Command Object</param>
            <param name="paramName">The parameter name to retrieve data from</param>
            <param name="paramPrefix">The parameter prefix (optional). Defaults to "@"</param>
            <typeparam name="T">The base type</typeparam>
            <returns>An object</returns>
        </member>
        <member name="T:PDSA.DataAccess.PDSADataManager">
            <summary>
            The Data Manager class that contains the default provider used for your whole application
            You can also create your own instance of this class to have multiple data providers
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManager.#ctor(PDSA.DataAccess.PDSADataProviderBase)">
            <summary>
            Constructor for PDSADataManager class
            </summary>
            <param name="provider">A data provider to use</param>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataManager.Instance">
            <summary>
            Get/Set a singleton instance of the PDSADataManager class
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataManager.DataProvider">
            <summary>
            Get/Set the Data Provider to use for data access
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataManager.ApplicationName">
            <summary>
            Get/Set the Application Name
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManager.GetDataSet(System.String)">
            <summary>
            Get a DataSet from the passed in SQL statement
            </summary>
            <param name="sql">The SQL statement to execute</param>
            <returns>A DataSet</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManager.GetDataSet(System.String,System.String)">
            <summary>
            Get a DataSet from the passed in SQL statement
            </summary>
            <param name="sql">The SQL statement to execute</param>
            <param name="connectString">A connection string</param>
            <returns>A DataSet</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManager.GetDataSet(System.Data.IDbCommand)">
            <summary>
            Get a DataSet from the passed in SQL statement
            </summary>
            <param name="cmd">The Command object with the SQL to execute</param>
            <returns>A DataSet</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManager.GetDataTable(System.String)">
            <summary>
            Get a DataTable from the passed in SQL statement
            </summary>
            <param name="sql">The SQL statement to execute</param>
            <returns>A DataSet</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManager.GetDataTable(System.String,System.String)">
            <summary>
            Get a DataTable from the passed in SQL statement
            </summary>
            <param name="sql">The SQL statement to execute</param>
            <param name="connectString">A connection string</param>
            <returns>A DataTable</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManager.GetDataTable(System.Data.IDbCommand)">
            <summary>
            Get a DataTable from the passed in SQL statement
            </summary>
            <param name="cmd">The Command object with the SQL to execute</param>
            <returns>A DataTable</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManager.ExecuteNonQuery(System.String)">
            <summary>
            Execute a SQL statement that does not return any rows
            </summary>
            <param name="sql">The SQL statement</param>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManager.ExecuteNonQuery(System.String,System.String)">
            <summary>
            Execute a SQL statement that does not return any rows
            </summary>
            <param name="sql">The SQL statement</param>
            <param name="connectString">A connection string</param>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManager.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
            Execute a SQL statement that does not return any rows
            </summary>
            <param name="cmd">The Command object with the SQL statement to execute</param>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManager.ExecuteScalar(System.String)">
            <summary>
            Execute a SQL statement that returns a single value
            </summary>
            <param name="sql">The SQL statement</param>
            <returns>A value</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManager.ExecuteScalar(System.String,System.String)">
            <summary>
            Execute a SQL statement that returns a single value
            </summary>
            <param name="sql">The SQL statement</param>
            <param name="connectString">A connection string</param>
            <returns>A value</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManager.ExecuteScalar(System.Data.IDbCommand)">
            <summary>
            Execute a SQL statement that returns a single value
            </summary>
            <param name="cmd">The Command object with the SQL statement to execute</param>
            <returns>A value</returns>
        </member>
        <member name="T:PDSA.DataAccess.PDSADataManagerBase">
            <summary>
            The base class for all Data Manager classes
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.#ctor">
            <summary>
            Constructor for the PDSADataManagerBase class
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.#ctor(PDSA.DataAccess.PDSADataProviderBase)">
            <summary>
            Constructor for the PDSADataManagerBase class
            </summary>
            <param name="provider">An instance of a PDSADataProviderBase class</param>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataManagerBase.ApplicationName">
            <summary>
            Get/Set the Application Name
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataManagerBase.UseAuditTracking">
            <summary>
            Get/Set whether or not to build an audit track record
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataManagerBase.AuditRowAsXml">
            <summary>
            Get the audit row as an XML string
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataManagerBase.SQL">
            <summary>
            Get/Set the SQL Statement
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataManagerBase.RowsAffected">
            <summary>
            Get/Set the number of rows affected by the last submitted SQL statement
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataManagerBase.Message">
            <summary>
            Get/Set any messages to communicate back to consumer
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataManagerBase.ErrorOccurred">
            <summary>
            Get/Set whether or not an error occurred in the last method
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataManagerBase.LastException">
            <summary>
            Get/Set the last exception object
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataManagerBase.ValidationFailed">
            <summary>
            Get/Set whether or not validation failed
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataManagerBase.PDSALoginName">
            <summary>
            Get/Set the current login name
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataManagerBase.ValidationRuleFailures">
            <summary>
            Get/Set validation rule failures
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataManagerBase.LastIdentity">
            <summary>
            Get/Set the Last Identity value generated
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataManagerBase.XmlAuditProperties">
            <summary>
            Get/Set the list of property names to include in the XML audit string
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataManagerBase.SqlBuilder">
            <summary>
            Get/Set the PDSASQLBuilder object
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataManagerBase.Transaction">
            <summary>
            Get/Set the Transaction object
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataManagerBase.ClassName">
            <summary>
            Get/Set the name of the Manager class
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.Init">
            <summary>
            Initialize all properties to a valid start state
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataManagerBase.DataProvider">
            <summary>
            Get/Set the DataProvider to use for this manager class
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.InitSql">
            <summary>
            Initialize the SqlBuilder object to a default start sate
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.InitRowCountSql">
            <summary>
            Initialize the SELECT COUNT(*) statement
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.InitInsertSql">
            <summary>
            Initialize the INSERT statement
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.InitUpdateSql">
            <summary>
            Initialize the UPDATE statement
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.InitDeleteSql">
            <summary>
            Initialize the DELETE statement
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.InitInsertParameters">
            <summary>
            Initialize all parameters for the INSERT statement
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.InitUpdateParameters">
            <summary>
            Initialize all parameters for the UPDATE statement
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.InitDeleteParameters">
            <summary>
            Initialize all parameters for the UPDATE statement
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.InitXmlAuditProperties">
            <summary>
            Build the collection of properties that will participate in auditing
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.TrackChanges``1(System.String,``0)">
            <summary>
            Implement your change tracking logic here
            </summary>
            <param name="action">Can be 'Insert', 'Update', 'Delete', or anything you want</param>
            <param name="entity">The entity with values to track</param>
            <typeparam name="T">The type of the 'entity'</typeparam>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.HandleException(System.Exception)">
            <summary>
            Handle any exceptions 
            </summary>
            <param name="ex">The exception object</param>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.GetDataTable">
            <summary>
            Return a DataTable
            </summary>
            <returns>A DataTable or null if can't get a resultset</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.GetDataTable``1(``0)">
            <summary>
            Return a DataTable
            </summary>
            <param name="search">An entity object with values to search upon</param>
            <typeparam name="T">The type of the 'entity'</typeparam>
            <returns>A DataTable or null if can't get a resultset</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.GetDataSet">
            <summary>
            Return a DataSet
            </summary>
            <returns>A DataSet</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.GetDataSet``1(``0)">
            <summary>
            Return a DataSet
            </summary>
            <param name="search">An entity object with values to search upon</param>
            <typeparam name="T">The type of the 'entity'</typeparam>
            <returns>A DataSet</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.RowCount">
            <summary>
            Count records in a table
            </summary>
            <returns>A count of records</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.RowCount``1(``0)">
            <summary>
            Count records in a table using search parameters
            </summary>
            <param name="search">An instance of a entity object with values to search upon</param>
            <typeparam name="T">The type of the 'entity'</typeparam>
            <returns>A count of records in the search</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.ExecuteScalar">
            <summary>
            Execute a scalar function in a table. For example: MIN(), MAX(), SUM(), AVG(), etc.
            </summary>
            <returns>A single value from the scalar function</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.ExecuteScalar``1(``0)">
            <summary>
            Execute a scalar function in a table. For example: MIN(), MAX(), SUM(), AVG(), etc.
            </summary>
            <param name="search">An instance of a entity object with values to search upon</param>
            <typeparam name="T">The type of the 'entity'</typeparam>
            <returns>A single value from the scalar function</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.Insert``1(``0,PDSA.DataAccess.PDSADataValidatorBase)">
            <summary>
            Insert a new entity
            </summary>
            <typeparam name="T">The type of the 'entity'</typeparam>
            <param name="entity">An entity with the information to insert</param>
            <param name="validator">An instance of a PDSAValidatorBase object used to validate the entity</param>
            <returns>True if successful, False if not</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.Update``1(``0,PDSA.DataAccess.PDSADataValidatorBase)">
            <summary>
            Update an entity in a table
            </summary>
            <typeparam name="T">The type of the 'entity'</typeparam>
            <param name="entity">The entity object with the information to update</param>
            <param name="validator">An instance of a PDSAValidatorBase object used to validate the entity</param>
            <returns>True if successful, False if not</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.Update``1(``0,``0,PDSA.DataAccess.PDSADataValidatorBase)">
            <summary>
            Update an entity in a table using Audit tracking
            </summary>
            <typeparam name="T">The type of the 'entity'</typeparam>
            <param name="entity">The entity object with the information to update</param>
            <param name="oldEntity">The original data to use for Audit tracking</param>
            <param name="validator">An instance of a PDSAValidatorBase object used to validate the entity</param>
            <returns>True if successful, False if not</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.UpdateBulk``1(``0)">
            <summary>
            Update multiple rows in a table. No validation is done on entity object passed in.
            Assumes you have filled in the SQLUpdate and any parameters and where filters
            </summary>
            <typeparam name="T">The type of the 'entity'</typeparam>
            <param name="entity">The entity object with the information to update</param>
            <returns>True if successful, False if not</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.Delete``1(``0)">
            <summary>
            Delete an existing record in a table
            </summary>
            <typeparam name="T">The type of the 'entity'</typeparam>
            <param name="entity">The entity object with the information to delete</param>
            <returns>Total Number of Rows Deleted</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.DeleteBulk``1(``0)">
            <summary>
            Delete one or more record(s) in a table
            </summary>
            <typeparam name="T">The type of the 'entity'</typeparam>
            <param name="entity">The entity object with the information to delete</param>
            <returns>Total Number of Rows Deleted</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.Validate(PDSA.DataAccess.PDSADataValidatorBase)">
            <summary>
            Validate all Data Annotations
            </summary>
            <param name="validator">An instance of a PDSAValidatorBase object</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.CreateXmlAuditString``1(``0,``0,PDSA.Validation.PDSADataModificationState,System.Collections.Generic.List{System.String})">
            <summary>
            Build the XML Audit String
            </summary>
            <typeparam name="T">The type of entity</typeparam>
            <param name="oldEntity">An instance of an entity</param>
            <param name="newEntity">An instance of an entity</param>
            <param name="dataModification">What kind of data modification we are in</param>
            <param name="properties">The list of properties to include in the XML audit string</param>
            <returns>An XML audit string</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.CreateAndOpenConnection">
            <summary>
            Call this method to create and open a connection
            Sets the DataProvider property's ConnectionObject
            Typically used when performing transactions
            </summary>
            <returns>An open connection or null</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.StartTransaction">
            <summary>
            Call this method to create and open a connection, create a command object, set the IsInTransaction property to true and set the KeepConnectionAlive to true.
            It then creates a Transaction object and Begins a Transaction
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.CommitTransaction">
            <summary>
            Commit a transaction
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.RollbackTransaction">
            <summary>
            Rollback a transaction
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.GetSortDirection(System.String)">
            <summary>
            Pass in a direction and this will return either 'ASC' or 'DESC'
            If nothing is passed in, then "ASC" is returned.
            </summary>
            <param name="direction">Can be anything from 'asc', 'ascending', 'desc', 'descending', etc.</param>
            <returns>ASC or DESC</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataManagerBase.CleanUp">
            <summary>
            Call this after a transaction to clean up database resources
            </summary>
        </member>
        <member name="T:PDSA.DataAccess.PDSADataProviderBase">
            <summary>
            Base class for Database Injectors
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.#ctor(System.String)">
            <summary>
            Constructor for the PDSADataProviderBase class
            </summary>
            <param name="connectString">A connection string</param>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataProviderBase.Transaction">
            <summary>
            Get/Set a Transaction object
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataProviderBase.Connection">
            <summary>
            Get/Set a Connection object
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataProviderBase.Command">
            <summary>
            Get/Set a Command object
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataProviderBase.DataAdapter">
            <summary>
            Get/Set a DataAdapter object
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataProviderBase.RowsAffected">
            <summary>
            Get/Set the number of Rows Affected by the last SQL statement submitted
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataProviderBase.SQL">
            <summary>
            Get/Set the last SQL statement submitted
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataProviderBase.ConnectString">
            <summary>
            Get/Set a connection string
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataProviderBase.LastMessage">
            <summary>
            Get/Set the last message generated from this class
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataProviderBase.LastException">
            <summary>
            Get/Set the last exception generated from this class
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataProviderBase.KeepConnectionAlive">
            <summary>
            Get/Set whether or not to keep the connection alive. This is typically set to true when you need to get more data from the same connection.
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataProviderBase.IsInTransaction">
            <summary>
            Get/Set whether or not this object is participating in a transaction
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataProviderBase.ParameterPrefix">
            <summary>
            Get/Set any Parameter Prefix to add for a command object. Examples are "@" or ":"
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataProviderBase.LastIdentity">
            <summary>
            Get/Set the last identity (auto-sequence) number generated on this connection
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataProviderBase.IsActive">
            <summary>
            Get/Set where or not this injector class is active
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataProviderBase.Name">
            <summary>
            Get/Set a unique name for this injector class
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataProviderBase.Message">
            <summary>
            Get/Set the last message generated
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataProviderBase.LastDataSet">
            <summary>
            Get/Set the last DataSet retrieved
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.CreateCommand">
            <summary>
            Returns a concrete instance of a command object
            </summary>
            <returns>A Command object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.CreateCommand(System.String)">
            <summary>
            Returns a concrete instance of a command object
            </summary>
            <param name="sql">A SQL statement to submit</param>
            <returns>A Command object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.CreateCommand(System.String,System.String)">
            <summary>
            Returns a concrete instance of a command object
            </summary>
            <param name="sql">A SQL statement to submit</param>
            <param name="connectString">A connection string</param>
            <returns>A Command object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.CreateDataAdapter(System.String,System.String)">
            <summary>
            Returns a concrete instance of a DataAdapter object
            </summary>
            <param name="sql">A SQL statement to submit</param>
            <param name="connectString">A connection string</param>
            <returns>A DataAdapter object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.CreateDataAdapter(System.Data.IDbCommand)">
            <summary>
            Returns a concrete instance of a DataAdapter object
            </summary>
            <param name="cmd">A Command object</param>
            <returns>A DataAdapter object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.CreateConnection(System.String)">
            <summary>
            Returns a concrete instance of a Connection object
            </summary>
            <param name="connectString">A connection string</param>
            <returns>A Connection object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.CreateParameter(System.String,System.Object)">
            <summary>
            Creates a Parameter to add to a Command object
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="value">The value for the parameter</param>
            <returns>A DataParameter object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.CreateParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            Creates a Parameter to add to a Command object
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="value">The value for the parameter</param>
            <param name="direction">The direction of the parameter (input, output, inputoutput)</param>
            <returns>A DataParameter object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.CreateParameter(System.String,System.Object,System.Data.ParameterDirection,System.Int32)">
            <summary>
            Creates a Parameter to add to a Command object
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="value">The value for the parameter</param>
            <param name="direction">The direction of the parameter (input, output, inputoutput)</param>
            <param name="size">The size of the string/binary parameter</param>
            <returns>A DataParameter object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.CreateParameter``1(``0,System.String,System.String)">
            <summary>
            Create a SqlParameter object using a property name and entity object
            </summary>
            <param name="entity">The object to get the value for</param>
            <param name="paramName">The name of the parameter</param>
            <param name="propertyName">The name of the property to get the value from in the entity</param>
            <typeparam name="T">The base type</typeparam>
            <returns>A SqlParameter object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.CreateParameter``1(``0,System.String,System.String,System.Data.ParameterDirection)">
            <summary>
            Create a SqlParameter object using a property name and entity object
            </summary>
            <param name="entity">The object to get the value for</param>
            <param name="paramName">The name of the parameter</param>
            <param name="propertyName">The name of the property to get the value from in the entity</param>
            <param name="direction">The direction for the parameter (input, output, inputoutput)</param>
            <typeparam name="T">The base type</typeparam>
            <returns>A SqlParameter object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.CreateParameter``1(``0,System.String,System.String,System.Data.ParameterDirection,System.Int32)">
            <summary>
            Create a SqlParameter object using a property name and entity object
            </summary>
            <param name="entity">The object to get the value for</param>
            <param name="paramName">The name of the parameter</param>
            <param name="propertyName">The name of the property to get the value from in the entity</param>
            <param name="direction">The direction for the parameter (input, output, inputoutput)</param>
            <param name="size">The size of the string/binary parameter</param>
            <typeparam name="T">The base type</typeparam>
            <returns>A SqlParameter object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.GetParameter(System.String)">
            <summary>
            Retrieve a parameter value from the supplied parameter name
            </summary>
            <param name="paramName">The name of the parameter</param>
            <returns>The value</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.GetParameterValue(System.String)">
            <summary>
            Retrieve a parameter value from the supplied parameter name
            </summary>
            <param name="paramName">The name of the parameter</param>
            <returns>The value</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.SetParameterValue``1(``0,System.String,System.String)">
            <summary>
            Retrieve a parameter value from the supplied parameter name
            </summary>
            <typeparam name="T">The type of the 'entity'</typeparam>
            <param name="entity">The object to get the value for</param>
            <param name="paramName">The name of the parameter</param>
            <param name="propertyName">The name of the property to get the value from in the entity</param>
            <returns>The value</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.GetDatabaseSpecificError(System.Exception)">
            <summary>
            Returns a large string containing all the information about a specific database error
            </summary>
            <param name="ex">The error</param>
            <returns>A string</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.GetDataSet(System.String)">
            <summary>
            Returns a DataSet from the supplied SQL
            </summary>
            <param name="sql">The SELECT statement to submit</param>
            <returns>A DataSet</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.GetDataSet(System.String,System.String)">
            <summary>
            Returns a DataSet from the supplied SQL
            </summary>
            <param name="sql">The SELECT statement to submit</param>
            <param name="connectString">A connection string</param>
            <returns>A DataSet</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.GetDataSet(System.Data.IDbCommand)">
            <summary>
            Returns a DataSet from the supplied SQL
            </summary>
            <param name="cmd">A Command object with the SELECT statement to submit</param>
            <returns>A DataSet</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.GetDataTable(System.String)">
            <summary>
            Returns a DataTable from the supplied SQL
            </summary>
            <param name="sql">The SELECT statement to submit</param>
            <returns>A DataTable</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.GetDataTable(System.String,System.String)">
            <summary>
            Returns a DataTable from the supplied SQL
            </summary>
            <param name="sql">The SELECT statement to submit</param>
            <param name="connectString">A connection string</param>
            <returns>A DataTable</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.GetDataTable(System.Data.IDbCommand)">
            <summary>
            Returns a DataTable from the supplied SQL
            </summary>
            <param name="cmd">A Command object with the SELECT statement to submit</param>
            <returns>A DataTable</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.ExecuteNonQuery(System.String)">
            <summary>
            Exectute a SQL statement
            </summary>
            <param name="sql">The SQL statement to execute</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.ExecuteNonQuery(System.String,System.String)">
            <summary>
            Exectute a SQL statement
            </summary>
            <param name="sql">The SQL statement to execute</param>
            <param name="connectString">A connection string</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
            Exectute a SQL statement
            </summary>
            <param name="cmd">A Command object with the SQL statement to execute</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.ExecuteNonQuery(System.Data.IDbCommand,System.Boolean)">
            <summary>
            Exectute a SQL statement and optionally get the last IDENTITY (sequence number) after the SQL executes.
            </summary>
            <param name="cmd">A Command object with the SQL statement to execute</param>
            <param name="getIdentity">Whether or not to get the IDENTITY after submitting the SQL</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.ExecuteScalar(System.String)">
            <summary>
            Execute a SQL statement that returns a single value
            </summary>
            <param name="sql">The SQL statement to submit</param>
            <returns>The value</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.ExecuteScalar(System.String,System.String)">
            <summary>
            Execute a SQL statement that returns a single value
            </summary>
            <param name="sql">The SQL statement to submit</param>
            <param name="connectString">A connection string</param>
            <returns>The value</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.ExecuteScalar(System.Data.IDbCommand)">
            <summary>
            Execute a SQL statement that returns a single value
            </summary>
            <param name="cmd">A Command object with the SQL statement to submit</param>
            <returns>The value</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.SetConnection(System.Data.IDbCommand)">
            <summary>
            Set a connection on a Command object
            </summary>
            <param name="cmd">The Command object to set the Connection on</param>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.SetCommandObject(System.Data.IDbCommand)">
            <summary>
            Sets the Command property of this class to the passed in Command object
            </summary>
            <param name="cmd">A Command object</param>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.CleanUp">
            <summary>
            Call this method to close and dispose of the Command and Connection properties.
            This will close and dispose of each of these objects.
            They will NOT be closed if the IsInTransaction property is set to true.
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.CreateDataException(System.Exception)">
            <summary>
            Create a PDSADataException object with as much specific database error as possible
            </summary>
            <param name="ex">The exception</param>
            <returns>A PDSADataException object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataProviderBase.GetCommandParameters">
            <summary>
            Gets all parameter names and values from the Command property and returns them all as a CRLF delimited string
            </summary>
            <returns>A string with all parameter names and values</returns>
        </member>
        <member name="T:PDSA.DataAccess.PDSADataSqlServer">
            <summary>
            A Concrete Data Provider for SQL Server
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataSqlServer.#ctor(System.String)">
            <summary>
            Constructor for the PDSADataSqlServer class
            </summary>
            <param name="connectString">A connection string</param>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataSqlServer.CreateCommand">
            <summary>
            Create a SqlCommand object
            </summary>
            <returns>A SqlCommand object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataSqlServer.CreateCommand(System.String)">
            <summary>
            Create a SqlCommand object
            </summary>
            <param name="sql">The SQL statement for this Command object</param>
            <returns>A SqlCommand object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataSqlServer.CreateCommand(System.String,System.String)">
            <summary>
            Create a SqlCommand object
            </summary>
            <param name="sql">The SQL statement for this Command object</param>
            <param name="connectString">A connection string</param>
            <returns>A SqlCommand object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataSqlServer.CreateDataAdapter(System.String,System.String)">
            <summary>
            Create a SqlDataAdapter object
            </summary>
            <param name="sql">The SQL statement for this DataAdapter object</param>
            <param name="connectString">A connection string</param>
            <returns>A SqlDataAdatper object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataSqlServer.CreateDataAdapter(System.Data.IDbCommand)">
            <summary>
            Create a SqlDataAdapter object
            </summary>
            <param name="cmd">A Command object with the SQL statement for this DataAdapter object</param>
            <returns>A SqlDataAdatper object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataSqlServer.CreateConnection(System.String)">
            <summary>
            Create a SqlDataAdapter object
            </summary>
            <param name="connectString">A connection string</param>
            <returns>A SqlDataAdatper object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataSqlServer.CreateParameter(System.String,System.Object)">
            <summary>
            Create a SqlParameter object
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="value">The value for the parameter</param>
            <returns>A SqlParameter object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataSqlServer.CreateParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            Create a SqlParameter object
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="value">The value for the parameter</param>
            <param name="direction">The direction for the parameter (input, output, inputoutput)</param>
            <returns>A SqlParameter object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataSqlServer.CreateParameter(System.String,System.Object,System.Data.ParameterDirection,System.Int32)">
            <summary>
            Create a SqlParameter object
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="value">The value for the parameter</param>
            <param name="direction">The direction for the parameter (input, output, inputoutput)</param>
            <param name="size">The size for the output parameter</param>
            <returns>A SqlParameter object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataSqlServer.CreateParameter``1(``0,System.String,System.String)">
            <summary>
            Create a SqlParameter object using a property name and entity object
            </summary>
            <typeparam name="T">The type of object</typeparam>
            <param name="entity">The object to get the value for</param>
            <param name="paramName">The name of the parameter</param>
            <param name="propertyName">The name of the property to get the value from in the entity</param>
            <returns>A SqlParameter object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataSqlServer.CreateParameter``1(``0,System.String,System.String,System.Data.ParameterDirection)">
            <summary>
            Create a SqlParameter object using a property name and entity object
            </summary>
            <typeparam name="T">The type of object</typeparam>
            <param name="entity">The object to get the value for</param>
            <param name="paramName">The name of the parameter</param>
            <param name="propertyName">The name of the property to get the value from in the entity</param>
            <param name="direction">The direction for the parameter (input, output, inputoutput)</param>
            <returns>A SqlParameter object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataSqlServer.CreateParameter``1(``0,System.String,System.String,System.Data.ParameterDirection,System.Int32)">
            <summary>
            Create a SqlParameter object using a property name and entity object
            </summary>
            <typeparam name="T">The type of object</typeparam>
            <param name="entity">The object to get the value for</param>
            <param name="paramName">The name of the parameter</param>
            <param name="propertyName">The name of the property to get the value from in the entity</param>
            <param name="direction">The direction for the parameter (input, output, inputoutput)</param>
            <param name="size">The size for the output parameter</param>
            <returns>A SqlParameter object</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataSqlServer.GetParameter(System.String)">
            <summary>
            Get a specified parameter object
            </summary>
            <param name="paramName">The parameter name</param>
            <returns>The value</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataSqlServer.GetParameterValue(System.String)">
            <summary>
            Get the value for the specified parameter
            </summary>
            <param name="paramName">The parameter name</param>
            <returns>The value</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataSqlServer.SetParameterValue``1(``0,System.String,System.String)">
            <summary>
            Set the value of an existing parameter object
            </summary>
            <typeparam name="T">The type of object</typeparam>
            <param name="entity">The object to get the value for</param>
            <param name="paramName">The name of the parameter</param>
            <param name="propertyName">The name of the property to get the value from in the entity</param>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataSqlServer.GetDatabaseSpecificError(System.Exception)">
            <summary>
            Create a string with as much specific database error as possible
            </summary>
            <param name="ex">The exception</param>
            <returns>A string</returns>
        </member>
        <member name="T:PDSA.DataAccess.PDSADataEntityBase">
            <summary>
            This is an abstract class from which "Entity" classes inherit.
            This class implements INotifyPropertyChanged
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataEntityBase.#ctor">
            <summary>
            Constructor for the PDSADataEntityBase Class. Initializes variables to a valid start state.
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataEntityBase.#ctor(System.String)">
            <summary>
            Constructor for the PDSAEntityBase Class. Initializes variables to a valid start state.
            </summary>
            <param name="loginName">A login name to set into the PDSALoginName property</param>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataEntityBase.Init">
            <summary>
            Initialize all properties to a valid start state
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataEntityBase.ClassName">
            <summary>
            Get/Set the name of the Entity class
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataEntityBase.PDSALoginName">
            <summary>
            Get/Set the login name of the person using this class.
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataEntityBase.ResultSetRowNumberBegin">
            <summary>
            Get/Set the Row Number to begin with when doing paging
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataEntityBase.ResultSetRowNumberEnd">
            <summary>
            Get/Set the Row Number to end with when doing paging
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataEntityBase.IsDirty">
            <summary>
            Get/Set the dirty flag for the current entity.
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataEntityBase.IsSelected">
            <summary>
            Get/Set whether or not this Entity has been selected in a UI
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataEntityBase.MessageLanguage">
            <summary>
            Get/Set the MessageLanguage for SQL stored procs
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataEntityBase.DefaultLanguage">
            <summary>
            Get the 'Default Language' for this property (en-us). 
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataEntityBase.DataModificationAction">
            <summary>
            Get/Set the MessageLanguage for SQL stored procs
            </summary>
        </member>
        <member name="E:PDSA.DataAccess.PDSADataEntityBase.PropertyChanged">
            <summary>
            The PropertyChanged Event to raise to any UI object
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataEntityBase.RaisePropertyChanged(System.String)">
            <summary>
            The PropertyChanged Event to raise to any UI object
            The event is only invoked if data binding is used
            </summary>
            <param name="propertyName">The property name that is changing</param>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataEntityBase.GetPropertyChangedEventArgs(System.String)">
            <summary>
            Returns an instance of PropertyChangedEventArgs for 
            the specified property name.
            </summary>
            <param name="propertyName">The name of the property to create event args for.</param>
            <returns>A PropertyChangedEventArgs object</returns>
        </member>
        <member name="T:PDSA.DataAccess.PDSAWildCard">
            <summary>
            Enumeration for specifying where the wild card character is added
            </summary>
        </member>
        <member name="F:PDSA.DataAccess.PDSAWildCard.None">
            <summary>
            No wildcard
            </summary>
        </member>
        <member name="F:PDSA.DataAccess.PDSAWildCard.WildCardAfter">
            <summary>
            Add wild card character after
            </summary>
        </member>
        <member name="F:PDSA.DataAccess.PDSAWildCard.WildCardBefore">
            <summary>
            Add wild card character before
            </summary>
        </member>
        <member name="F:PDSA.DataAccess.PDSAWildCard.WildCardBeforeAfter">
            <summary>
            Add wild card character before and after
            </summary>
        </member>
        <member name="T:PDSA.DataAccess.PDSASQLBuilder">
            <summary>
            This class is used to help you build SQL with WHERE and ORDER BY clauses
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.#ctor">
            <summary>
            Constructor for PDSASQLBuilder class
            </summary>
        </member>
        <member name="F:PDSA.DataAccess.PDSASQLBuilder.IS_NULL">
            <summary>
            Returns IS NULL
            </summary>
        </member>
        <member name="F:PDSA.DataAccess.PDSASQLBuilder.EQUAL_TO">
            <summary>
            Returns equal sign (=)
            </summary>
        </member>
        <member name="F:PDSA.DataAccess.PDSASQLBuilder.LESS_THAN_EQUAL_TO">
            <summary>
            Returns less than or equal to sign (&lt;=)
            </summary>
        </member>
        <member name="F:PDSA.DataAccess.PDSASQLBuilder.LESS_THAN">
            <summary>
            Returns less than sign (&lt;)
            </summary>
        </member>
        <member name="F:PDSA.DataAccess.PDSASQLBuilder.GREATER_THAN_EQUAL_TO">
            <summary>
            Returns greater than or equal to sign (&gt;=)
            </summary>
        </member>
        <member name="F:PDSA.DataAccess.PDSASQLBuilder.GREATER_THAN">
            <summary>
            Returns greater than sign (&gt;)
            </summary>
        </member>
        <member name="F:PDSA.DataAccess.PDSASQLBuilder.LIKE">
            <summary>
            Returns LIKE
            </summary>
        </member>
        <member name="F:PDSA.DataAccess.PDSASQLBuilder.BETWEEN">
            <summary>
            Returns BETWEEN
            </summary>
        </member>
        <member name="F:PDSA.DataAccess.PDSASQLBuilder.JOIN_AND">
            <summary>
            Returns AND
            </summary>
        </member>
        <member name="F:PDSA.DataAccess.PDSASQLBuilder.JOIN_OR">
            <summary>
            Returns OR
            </summary>
        </member>
        <member name="F:PDSA.DataAccess.PDSASQLBuilder.SORT_ASC">
            <summary>
            Returns ASC
            </summary>
        </member>
        <member name="F:PDSA.DataAccess.PDSASQLBuilder.SORT_DESC">
            <summary>
            Returns DESC
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilder.SQLForInsert">
            <summary>
            Get the full SQL statement used for inserting.
            This property is populated by calling the BuildSQLForInsert() method.
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilder.SQLForUpdate">
            <summary>
            Get the full SQL statement used for updating.
            This property is populated by calling the BuildSQLForUpdate() method.
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilder.SQLForDelete">
            <summary>
            Get the full SQL statement used for deleting, this includes the WHERE clause
            This property is populated by calling the BuildSQLForDelete() method.
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilder.SQLForSelect">
            <summary>
            Get the full SQL statement used for searching, this includes the WHERE and ORDER BY clauses
            This property is populated by calling the BuildSQLForSelect() method.
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilder.SQLForRowCount">
            <summary>
            Get the full SQL statement used for counting the search rows, this includes the WHERE and ORDER BY clauses
            This property is populated by calling the BuildSQLForRowCount() method.
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilder.SQLSelect">
            <summary>
            Get/Set the SQL statement used for selecting data
            Ex: SELECT * FROM Product
            Do NOT include the WHERE clause
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilder.SQLRowCount">
            <summary>
            Get/Set the SQL statement used for counting
            Ex: SELECT Count(*) FROM Product
            Do NOT include the WHERE clause
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilder.SQLDelete">
            <summary>
            Get/Set the SQL statement used for deleting
            Ex: DELETE FROM Product
            Do NOT include the WHERE clause
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilder.SQLInsert">
            <summary>
            Get/Set the SQL statement used for inserting
            Ex: INSERT INTO TableName(Column1, Column2, etc.) VALUE (@Param1, @Param2, etc.)
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilder.SQLUpdate">
            <summary>
            Get/Set the SQL statement used for updating
            Ex: UPDATE TableName SET Column1 = @Param1, Column2 = @Param2, etc. WHERE Column = @Param
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilder.IsStoredProc">
            <summary>
            Get/Set whether or not the SQL statement is a stored procedure or dynamic SQL
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilder.SelectWhereItems">
            <summary>
            Get/Set the list of items to use when selecting
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilder.DeleteWhereItems">
            <summary>
            Get/Set the list of items to use when deleting
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilder.UpdateWhereItems">
            <summary>
            Get/Set the list of items to use when updating
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilder.OrderByItems">
            <summary>
            Get/Set a list of items to use for the ORDER BY clause
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilder.InsertParameters">
            <summary>
            Get/Set a list of parameters for the INSERT statement
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilder.UpdateParameters">
            <summary>
            Get/Set a list of parameters for the UPDATE statement
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.Init">
            <summary>
            Initialize all properties to a valid start state
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.Clear">
            <summary>
            Clears all 'Items' collections
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.BuildSQLForSelect">
            <summary>
            Build the SQL with the WHERE clause for selecting
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.BuildSQLForRowCount">
            <summary>
            Build the SQL with the WHERE clause for the row count for the search parameters
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.BuildSQLForInsert">
            <summary>
            Build the SQL for inserting data
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.BuildSQLForUpdate">
            <summary>
            Build the SQL with the WHERE clause for updating data
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.BuildSQLForDelete">
            <summary>
            Build the SQL with the WHERE clause for deleting
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.BuildSelectWhereClause">
            <summary>
            Build the WHERE clause for selecting
            </summary>
            <returns>A WHERE clause</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.BuildDeleteWhereClause">
            <summary>
            Build the WHERE clause for DELETE
            </summary>
            <returns>A WHERE clause</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.BuildUpdateWhereClause">
            <summary>
            Build the WHERE clause for UPDATE
            </summary>
            <returns>A WHERE clause</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.BuildOrderBy">
            <summary>
            Builds the ORDER BY clause
            </summary>
            <returns>A sort direction</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.AddSelectWhereItem(System.String)">
            <summary>
            Add PDSASQLBuilderWhereItem for building a WHERE clause for selecting.
            Sets both the property name and the column name to the same value.
            </summary>
            <param name="propertyName">Property Name</param>
            <returns>A PDSASQLBuilderWhereItem Instance</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.AddSelectWhereItem(System.String,System.String)">
            <summary>
            Add PDSASQLBuilderWhereItem for building a WHERE clause for selecting
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="columnName">Column Name</param>
            <returns>A PDSASQLBuilderWhereItem Instance</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.AddSelectWhereItem(System.String,System.String,System.String)">
            <summary>
            Add PDSASQLBuilderWhereItem for building a WHERE clause for selecting
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="columnName">Column Name</param>
            <param name="searchOperator">The search operator</param>
            <returns>A PDSASQLBuilderWhereItem Instance</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.AddSelectWhereItem(System.String,System.String,System.String,PDSA.DataAccess.PDSAWildCard)">
            <summary>
            Add PDSASQLBuilderWhereItem for building a WHERE clause for selecting
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="columnName">Column Name</param>
            <param name="searchOperator">The search operator</param>
            <param name="addWildCard">Where to add a wild card ('%') character</param>
            <returns>A PDSASQLBuilderWhereItem Instance</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.AddSelectWhereItem(System.String,System.String,PDSA.DataAccess.PDSAWildCard)">
            <summary>
            Add PDSASQLBuilderWhereItem for building a WHERE clause for selecting
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="columnName">Column Name</param>
            <param name="addWildCard">Where to add a wild card ('%') character</param>
            <returns>A PDSASQLBuilderWhereItem Instance</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.AddSelectWhereItem(System.String,System.String,PDSA.DataAccess.PDSAWildCard,System.String,System.String)">
            <summary>
            Add PDSASQLBuilderWhereItem for building a WHERE clause for selecting
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="columnName">Column Name</param>
            <param name="addWildCard">Where to add a wild card ('%') character</param>
            <param name="joinTerm">The join term can be either AND or OR</param>
            <param name="searchOperator">The search operator</param>
            <returns>A PDSASQLBuilderWhereItem Instance</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.AddOrderByItem(System.String)">
            <summary>
            Add PDSASQLBuilderOrderByItem for building a ORDER BY clause
            </summary>
            <param name="columnName">Column Name</param>
            <returns>A PDSASQLBuilderOrderByItem Instance</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.AddOrderByItem(System.String,System.String)">
            <summary>
            Add PDSASQLBuilderOrderByItem for building a ORDER BY clause
            </summary>
            <param name="columnName">Column Name</param>
            <param name="sortDirection">The direction to sort</param>
            <returns>A PDSASQLBuilderOrderByItem Instance</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.AddDeleteWhereItem(System.String,System.String)">
            <summary>
            Add PDSASQLBuilderWhereItem for building a WHERE clause for deleting
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="columnName">Column Name</param>
            <returns>A PDSASQLBuilderWhereItem Instance</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.AddDeleteWhereItem(System.String,System.String,System.String)">
            <summary>
            Add PDSASQLBuilderWhereItem for building a WHERE clause for deleting
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="columnName">Column Name</param>
            <param name="searchOperator">The search operator</param>
            <returns>A PDSASQLBuilderWhereItem Instance</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.AddDeleteWhereItem(System.String,System.String,System.String,PDSA.DataAccess.PDSAWildCard)">
            <summary>
            Add PDSASQLBuilderWhereItem for building a WHERE clause for deleting
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="columnName">Column Name</param>
            <param name="searchOperator">The search operator</param>
            <param name="addWildCard">Where to add a wild card ('%') character</param>
            <returns>A PDSASQLBuilderWhereItem Instance</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.AddDeleteWhereItem(System.String,System.String,PDSA.DataAccess.PDSAWildCard)">
            <summary>
            Add PDSASQLBuilderWhereItem for building a WHERE clause for deleting
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="columnName">Column Name</param>
            <param name="addWildCard">Where to add a wild card ('%') character</param>
            <returns>A PDSASQLBuilderWhereItem Instance</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.AddDeleteWhereItem(System.String,System.String,PDSA.DataAccess.PDSAWildCard,System.String,System.String)">
            <summary>
            Add PDSASQLBuilderWhereItem for building a WHERE clause for deleting
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="columnName">Column Name</param>
            <param name="addWildCard">Where to add a wild card ('%') character</param>
            <param name="joinTerm">The join term can be either AND or OR</param>
            <param name="searchOperator">The search operator</param>
            <returns>A PDSASQLBuilderWhereItem Instance</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.AddUpdateWhereItem(System.String,System.String)">
            <summary>
            Add PDSASQLBuilderWhereItem for building a WHERE clause for updating
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="columnName">Column Name</param>
            <returns>A PDSASQLBuilderWhereItem Instance</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.AddUpdateWhereItem(System.String,System.String,System.String)">
            <summary>
            Add PDSASQLBuilderWhereItem for building a WHERE clause for updating
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="columnName">Column Name</param>
            <param name="searchOperator">The search operator</param>
            <returns>A PDSASQLBuilderWhereItem Instance</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.AddUpdateWhereItem(System.String,System.String,System.String,PDSA.DataAccess.PDSAWildCard)">
            <summary>
            Add PDSASQLBuilderWhereItem for building a WHERE clause for updating
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="columnName">Column Name</param>
            <param name="searchOperator">The search operator</param>
            <param name="addWildCard">Where to add a wild card ('%') character</param>
            <returns>A PDSASQLBuilderWhereItem Instance</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.AddUpdateWhereItem(System.String,System.String,PDSA.DataAccess.PDSAWildCard)">
            <summary>
            Add PDSASQLBuilderWhereItem for building a WHERE clause for updating
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="columnName">Column Name</param>
            <param name="addWildCard">Where to add a wild card ('%') character</param>
            <returns>A PDSASQLBuilderWhereItem Instance</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilder.AddUpdateWhereItem(System.String,System.String,PDSA.DataAccess.PDSAWildCard,System.String,System.String)">
            <summary>
            Add PDSASQLBuilderWhereItem for building a WHERE clause for updating
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="columnName">Column Name</param>
            <param name="addWildCard">Where to add a wild card ('%') character</param>
            <param name="joinTerm">The join term can be either AND or OR</param>
            <param name="searchOperator">The search operator</param>
            <returns>A PDSASQLBuilderWhereItem Instance</returns>
        </member>
        <member name="T:PDSA.DataAccess.PDSASQLBuilderOrderByItem">
            <summary>
            Class for different ORDER BY items
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilderOrderByItem.#ctor">
            <summary>
            Constructor for PDSASQLBuilderOrderByItem Class
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilderOrderByItem.#ctor(System.String)">
            <summary>
            Constructor for PDSASQLBuilderOrderByItem Class
            </summary>
            <param name="columnName">Column Name</param>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilderOrderByItem.#ctor(System.String,System.String)">
            <summary>
            Constructor for PDSASQLBuilderItem Class
            Sets the AddWildCard property to true
            </summary>
            <param name="columnName">Column Name</param>
            <param name="order">ASC or DESC</param>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilderOrderByItem.ColumnName">
            <summary>
            Get/Set the column name to order by
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilderOrderByItem.SortDirection">
            <summary>
            Get/Set the ORDER. Can be either ASC or DESC
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilderOrderByItem.Init">
            <summary>
            Initialize all properties to a valid start state
            ColumnName = string.Empty
            SortDirection = " ASC"
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilderOrderByItem.ToString">
            <summary>
            Returns the ORDER BY Clause
            </summary>
            <returns>ColumnName + SortDirection</returns>
        </member>
        <member name="T:PDSA.DataAccess.PDSASQLBuilderParameter">
            <summary>
            Class for Parameters for INSERT and UPDATE statements
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilderParameter.#ctor">
            <summary>
            Constructor for PDSASQLBuilderParameter Class
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilderParameter.#ctor(System.String,System.String)">
            <summary>
            Constructor for PDSASQLBuilderParameter Class
            </summary>
            <param name="paramName">Parameter Name</param>
            <param name="propertyName">Property Name in Entity to get Value from</param>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilderParameter.#ctor(System.String,System.String,System.Data.ParameterDirection)">
            <summary>
            Constructor for PDSASQLBuilderParameter Class
            </summary>
            <param name="paramName">Parameter Name</param>
            <param name="propertyName">Property Name in Entity to get Value from</param>
            <param name="direction">The direction for this parameter</param>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilderParameter.#ctor(System.String,System.String,System.Data.ParameterDirection,System.Object)">
            <summary>
            Constructor for PDSASQLBuilderParameter Class
            </summary>
            <param name="paramName">Parameter Name</param>
            <param name="propertyName">Property Name in Entity to get Value from</param>
            <param name="direction">The direction for this parameter</param>
            <param name="value">The value for this parameter</param>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilderParameter.ParameterName">
            <summary>
            Get/Set the parameter name to use in the SQL statement
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilderParameter.PropertyName">
            <summary>
            Get/Set the property name in the class to retrieve the value from
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilderParameter.Direction">
            <summary>
            Get/Set the direction of this parameter
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilderParameter.Size">
            <summary>
            Get/Set the size of the data
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilderParameter.Value">
            <summary>
            Get/Set the value of the data to submit
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilderParameter.Init">
            <summary>
            Initialize all properties to a valid start state
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilderParameter.ToString">
            <summary>
            Returns the search string
            </summary>
            <returns>ParameterName + ' ' + PropertyName</returns>
        </member>
        <member name="T:PDSA.DataAccess.PDSASQLBuilderWhereItem">
            <summary>
            Class for different WHERE clause items
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilderWhereItem.#ctor">
            <summary>
            Constructor for PDSASQLBuilderItem Class
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilderWhereItem.#ctor(System.String,System.String)">
            <summary>
            Constructor for PDSASQLBuilderItem Class
            Sets the AddWildCard property to true
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="columnName">Column Name</param>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilderWhereItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor for PDSASQLBuilderItem Class
            Sets the AddWildCard property to true
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="columnName">Column Name</param>
            <param name="searchOperator">The search operator</param>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilderWhereItem.#ctor(System.String,System.String,System.String,PDSA.DataAccess.PDSAWildCard)">
            <summary>
            Constructor for PDSASQLBuilderItem Class
            Sets the AddWildCard property to true
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="columnName">Column Name</param>
            <param name="searchOperator">The search operator</param>
            <param name="addWildCard">Where to add a wild card ('%') character</param>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilderWhereItem.#ctor(System.String,System.String,PDSA.DataAccess.PDSAWildCard)">
            <summary>
            Constructor for PDSASQLBuilderItem Class
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="columnName">Column Name</param>
            <param name="addWildCard">Where to add a wild card ('%') character</param>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilderWhereItem.#ctor(System.String,System.String,PDSA.DataAccess.PDSAWildCard,System.String,System.String)">
            <summary>
            Constructor for PDSASQLBuilderItem Class
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="columnName">Column Name</param>
            <param name="addWildCard">Where to add a wild card ('%') character</param>
            <param name="joinTerm">The join term can be either AND or OR</param>
            <param name="searchOperator">The search operator</param>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilderWhereItem.PropertyName">
            <summary>
            Get/Set the property name in the class to retrieve the value from
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilderWhereItem.ColumnName">
            <summary>
            Get/Set the column name to retrieve the data from
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilderWhereItem.AddWildCard">
            <summary>
            Get/Set where to add the wild card character
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilderWhereItem.SearchOperator">
            <summary>
            Get/Set the Search Operator such as "LIKE" or "=" or "&lt;", etc.
            Default is LIKE
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSASQLBuilderWhereItem.JoinTerm">
            <summary>
            Get/Set the join term such as "AND" or "OR"
            Default is "AND"
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilderWhereItem.Init">
            <summary>
            Initialize all properties to a valid start state
            AddWildCard = false
            JoinTerm = "AND"
            SearchOperator = "="
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSASQLBuilderWhereItem.ToString">
            <summary>
            Returns the search string
            </summary>
            <returns>The WHERE Clause</returns>
        </member>
        <member name="T:PDSA.DataAccess.PDSADataValidationException">
            <summary>
            This exception is returned from the Validate method in Validator classes to signify the failure of business rules.
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataValidationException.#ctor(System.String,System.String,System.Collections.Generic.List{PDSA.Validation.PDSAValidationRule})">
            <summary>
            Base constructor for the PDSAValidationException object
            </summary>
            <param name="message">The message for this validation exception</param>
            <param name="className">Class name on which validation rules failed</param>
            <param name="businessRuleMessages">The PDSAValidationRules object</param>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataValidationException.ValidationMessages">
            <summary>
            Get/Set validation messages that have failed
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataValidationException.ClassName">
            <summary>
            The class name on which the business rules failed
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataValidationException.ToString">
            <summary>
            ToString() returns a CRLF delimited list of business rule failure messages.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:PDSA.DataAccess.PDSADataValidatorBase">
            <summary>
            Base class for all Validation classes
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataValidatorBase.#ctor">
            <summary>
            Constructor for the PDSAValidatorBase class
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataValidatorBase.IsValid">
            <summary>
            Get/Set whether or not this entity is valid
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataValidatorBase.ThrowExceptionWhenValidationFails">
            <summary>
            Get/Set whether or not to throw an exception when validation fails
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataValidatorBase.ValidationRuleFailures">
            <summary>
            Get/Set validation rule failures
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataValidatorBase.TheEntityToValidate">
            <summary>
            Get/Set the Entity to Validate. Set this prior to calling the validate method
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataValidatorBase.DataModificationAction">
            <summary>
            Get/Set which data modification is taking place (Insert/Update/Delete)
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataValidatorBase.PDSALoginName">
            <summary>
            Get/Set the current login name
            </summary>
        </member>
        <member name="P:PDSA.DataAccess.PDSADataValidatorBase.ClassName">
            <summary>
            Get/Set the name of the Validator class
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataValidatorBase.Init">
            <summary>
            Initialize all properties to a valid start state
            </summary>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataValidatorBase.Validate">
            <summary>
            Override this method to validate your entity object
            </summary>
            <returns>True if entity is valid</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataValidatorBase.Validate(System.Object)">
            <summary>
            Override this method to validate your entity object
            </summary>
            <param name="entityToValidate">The entity to validate</param>
            <returns>True if entity is valid</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataValidatorBase.GetValidationMessages">
            <summary>
            Get the list of validation messages as a string that is CRLF delimited
            </summary>
            <returns>A CRLF delimited string</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataValidatorBase.GetValidationMessages(System.String)">
            <summary>
            Get the list of validation messages as a string that is CRLF delimited
            </summary>
            <param name="delimiter">The delimiter to use</param>
            <returns>A delimited string</returns>
        </member>
        <member name="M:PDSA.DataAccess.PDSADataValidatorBase.AddValidationMessage(System.String,System.String)">
            <summary>
            Add a new PDSAValidationRule object to the ValidationMessages property
            </summary>
            <param name="property">A property name</param>
            <param name="message">The validation message</param>
        </member>
        <member name="T:PDSA.Common.PDSAKeyValuePair">
            <summary>
            This class is used whenever you wish to create a Key/Value pair. This class is used when reading in an XML file or reading a section within the Registry. It is often added as an entry into the PDSAKeyValuePairs collection class.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAKeyValuePair.#ctor">
            <summary>
            Constructor for PDSAKeyValuePair
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAKeyValuePair.#ctor(System.String,System.String)">
            <summary>
            Constructor for a PDSAKeyValuePair object
            </summary>
            <param name="key">A key</param>
            <param name="value">A value to associate with the key</param>
        </member>
        <member name="P:PDSA.Common.PDSAKeyValuePair.Key">
            <summary>
            Get/Set the Key name for the PDSAKeyValuePair object
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAKeyValuePair.Value">
            <summary>
            Get/Set the value to associate with the Key
            </summary>
        </member>
        <member name="T:PDSA.Common.PDSAKeyValuePairs">
            <summary>
            This class holds a collection of PDSAKeyValuePair objects.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAKeyValuePairs.#ctor">
            <summary>
            Constructor for PDSAKeyValuePairs Class
            </summary>
        </member>
        <member name="T:PDSA.Common.PDSAPager">
            <summary>
            A class that represents a pager object
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAPager.#ctor">
            <summary>
            Constructor for the PDSAPager class
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAPager.#ctor(System.Int32)">
            <summary>
            Constructor for PDSAPager class
            </summary>
            <param name="pageSize">The page size to use</param>
        </member>
        <member name="M:PDSA.Common.PDSAPager.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor for PDSAPager class
            </summary>
            <param name="pageSize">The page size to use</param>
            <param name="visiblePagesToDisplay">The number of pagers to display</param>
        </member>
        <member name="M:PDSA.Common.PDSAPager.Init">
            <summary>
            Initialize this class
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAPager._PageSize">
            <summary>
            Get/Set the page size selected
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPager.PageSize">
            <summary>
            Get/Set the Page Size
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPager.PageIndex">
            <summary>
            Get/Set the Current Page Index
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPager.StartingRow">
            <summary>
            Get/set the row to start at
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPager.VisiblePagesToDisplay">
            <summary>
            Get/Set total number of visible pages to display
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPager.TotalPages">
            <summary>
            Get/Set the total number of pages
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPager.TotalRecords">
            <summary>
            Get/Set the total records
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAPager.CalculateTotalPages">
            <summary>
            Calculate total number of pager items to create
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAPager.SetPagerProperties(System.String)">
            <summary>
            Set the properties of this class based on the argument passed in.
            </summary>
            <param name="argument">An argument such as 'first', 'next', 'last', or 'previous'</param>
        </member>
        <member name="T:PDSA.Common.PDSAPagerCommands">
            <summary>
            This class contains Pager commands for moving through a pager.
            It also contains the Text for displaying pager information.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAPagerCommands.#cctor">
            <summary>
            Static constructor for PDSAPagerCommands class
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAPagerCommands.First">
            <summary>
            "first"
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAPagerCommands.Next">
            <summary>
            "next"
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAPagerCommands.NextPage">
            <summary>
            "nextPage"
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAPagerCommands.Previous">
            <summary>
            "prev"
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAPagerCommands.PreviousPage">
            <summary>
            "prevPage"
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAPagerCommands.Last">
            <summary>
            "last"
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPagerCommands.FirstTooltipText">
            <summary>
            Get/Set the first page tooltip text
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPagerCommands.NextTooltipText">
            <summary>
            Get/Set the next tooltip text
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPagerCommands.NextPageTooltipText">
            <summary>
            Get/Set the next page tooltip text
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPagerCommands.PreviousTooltipText">
            <summary>
            Get/Set the previous tooltip text
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPagerCommands.PreviousPageTooltipText">
            <summary>
            Get/Set the previous page tooltip text
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPagerCommands.LastTooltipText">
            <summary>
            Get/Set the last page tooltip text
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPagerCommands.FirstText">
            <summary>
            Get/Set the first page text
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPagerCommands.NextText">
            <summary>
            Get/Set the next text
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPagerCommands.NextPageText">
            <summary>
            Get/Set the next page text
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPagerCommands.PreviousText">
            <summary>
            Get/Set the previous text
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPagerCommands.PreviousPageText">
            <summary>
            Get/Set the previous page text
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPagerCommands.LastText">
            <summary>
            Get/Set the last page text
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPagerCommands.PageText">
            <summary>
            Get/Set the page text
            </summary>
        </member>
        <member name="T:PDSA.Common.PDSAPagerItem">
            <summary>
            This class represents a single pager item. Used to display a single pager item below a grid.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAPagerItem.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor for PDSAPagerItem
            </summary>
            <param name="pageCount">Total pages</param>
            <param name="pageIndex">Current page</param>
            <param name="tooltip">Tooltip to display on this page</param>
        </member>
        <member name="M:PDSA.Common.PDSAPagerItem.#ctor(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Constructor for PDSAPagerItem
            </summary>
            <param name="text">Text to display</param>
            <param name="arg">An argument to pass to server when clicked upon</param>
            <param name="isDisabled">Is disabled?</param>
            <param name="tooltip">Tooltip to display on this page</param>
        </member>
        <member name="P:PDSA.Common.PDSAPagerItem.Text">
            <summary>
            Get/Set the text to use for the pager
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPagerItem.Tooltip">
            <summary>
            Get/Set the tooltip to use for the pager
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPagerItem.Argument">
            <summary>
            Get/Set the argument to use for the pager
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPagerItem.IsSelected">
            <summary>
            Get/Set whether or not this pager is selected
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPagerItem.IsDisabled">
            <summary>
            Get/Set whether or not this pager is disabled
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPagerItem.CssActiveClass">
            <summary>
            Get/Set the css class for a selected pager. Default is 'active'.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPagerItem.CssDisabledClass">
            <summary>
            Get/Set the css class for a disabled pager. Default is 'disabled'.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAPagerItem.CssClass">
            <summary>
            Get/Set the CSS Class to apply based on the IsSelected/IsDisabled properties.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAPagerItem.Init">
            <summary>
            Initialize this class
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAPagerItem.ToString">
            <summary>
            Override of ToString
            </summary>
            <returns>Text property</returns>
        </member>
        <member name="T:PDSA.Common.PDSAPagerItemCollection">
            <summary>
            Class to hold a collection of pager items to display on a page
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAPagerItemCollection.#ctor(PDSA.Common.PDSAPager)">
            <summary>
            Constructor for the PDSAPagerItemCollection class
            </summary>
            <param name="pagerInfo">An instance of a PDSAPager object</param>
        </member>
        <member name="T:PDSA.Common.PDSAApplicationException">
            <summary>
            This class extends the Exception class in .NET by adding a ClassName, MethodName and ExtraInfo properties.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAApplicationException.#ctor">
            <summary>
            Base constructor for PDSAApplicationException. Calls the Init() method.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAApplicationException.#ctor(System.String)">
            <summary>
            Base constructor for PDSAApplicationException. Calls the Init() method.
            </summary>
            <param name="message">The message of this exception</param>
        </member>
        <member name="M:PDSA.Common.PDSAApplicationException.#ctor(System.String,System.Exception)">
            <summary>
            Base constructor for PDSAApplicationException. Calls the Init() method.
            </summary>
            <param name="message">The message of this exception</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:PDSA.Common.PDSAApplicationException.#ctor(System.String,System.Exception,System.String,System.String)">
            <summary>
            Base constructor for PDSAApplicationException. Calls the Init() method.
            </summary>
            <param name="message">The message of this exception</param>
            <param name="innerException">The inner exception</param>
            <param name="className">The class name that caused the exception</param>
            <param name="methodName">The method name that caused the exception</param>
        </member>
        <member name="M:PDSA.Common.PDSAApplicationException.Init">
            <summary>
            Initialize the public properties of the class
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAApplicationException.ClassName">
            <summary>
            Get/Set the name of the current class
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAApplicationException.MethodName">
            <summary>
            Get/Set the name of the current method
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAApplicationException.ExtraInfo">
            <summary>
            Get/Set any extra information you wish to pass with this exception
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAApplicationException.GetFullExceptionMessage(System.Boolean)">
            <summary>
            Retrieves the complete Exception information including the extra properties in this class
            </summary>
            <param name="retrieveFullMessage">Set to true to retrieve the ToString() or just the Message property of the exception.</param>
            <returns>A string with all the exception information.</returns>
        </member>
        <member name="M:PDSA.Common.PDSAApplicationException.ToString">
            <summary>
            Calls the GetFullExceptionMessage method
            </summary>
            <returns>The full exception information.</returns>
        </member>
        <member name="T:PDSA.Common.PDSAAssemblyInfo">
            <summary>
            This class will return Assembly information about your currently executing assembly.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAAssemblyInfo.#ctor">
            <summary>
            Base constructor of the PDSAAssemblyInfo. Gets a reference to the CallingAssembly.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAAssemblyInfo.#ctor(System.Reflection.Assembly)">
            <summary>
            Base constructor of the PDSAAssemblyInfo.
            </summary>
            <param name="assm">An assembly to get info from</param>
        </member>
        <member name="P:PDSA.Common.PDSAAssemblyInfo.CodeBase">
            <summary>
            Gets the CodeBase property from the Assembly
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAAssemblyInfo.Copyright">
            <summary>
            Gets the Copyright property from the Assembly
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAAssemblyInfo.Company">
            <summary>
            Gets the Company property from the Assembly
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAAssemblyInfo.Description">
            <summary>
            Gets the Description property from the Assembly
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAAssemblyInfo.Product">
            <summary>
            Gets the Product property from the Assembly
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAAssemblyInfo.Title">
            <summary>
            Gets the Title property from the Assembly
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAAssemblyInfo.AssemblyGuid">
            <summary>
            Gets the Guid property from the Assembly
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAAssemblyInfo.Version">
            <summary>
            Gets the Version property from the Assembly
            </summary>
        </member>
        <member name="T:PDSA.Common.PDSACheckAssembly">
            <summary>
            Class for PDSA Licensing
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSACheckAssembly._IsCheckingForRuntimeLicense">
            <summary>
            Get/Set whether or not we are checking for a runtime license.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSACheckAssembly._LicenseNotFound">
            <summary>
            Get/Set whether or not the license file was found.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSACheckAssembly._LicenseFilePath">
            <summary>
            Get/Set the license file path
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSACheckAssembly.IsDemoVersion">
            <summary>
            Get/Set whether or not we are in a DemoVersion
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSACheckAssembly.DemoDaysRemaining">
            <summary>
            Get/Set the number of days remaining in the Demo
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSACheckAssembly._EntryAssemblyName">
            <summary>
            Get/Set the Entry Assembly Name
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSACheckAssembly._CallingAssemblyName">
            <summary>
            Get/Set the Calling Assembly Name
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSACheckAssembly._CurrentProcessName">
            <summary>
            Gets the Current Process Name.
            This is checked with System.Diagnostics.Process.GetCurrentProcess().ProcessName
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSACheckAssembly._Message">
            <summary>
            Get/Set the message to display
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSACheckAssembly.IsLicenseValid">
            <summary>
            Get whether or not the license is valid
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSACheckAssembly.LicenseFileName">
            <summary>
            Get/Set the name of the license file (Default is the .EXE or .DLL name)
            NOTE: This needs to be just a name without a path or extension.
            It will always use the current directory path and an extension of '.lic'
            </summary>    
        </member>
        <member name="F:PDSA.Common.PDSACheckAssembly._IsInRuntimeMode">
            <summary>
            Get/Set whether or not we are in Runtime mode
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSACheckAssembly._IsInDebugMode">
            <summary>
            Get/Set whether or not we are in Debug mode
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSACheckAssembly.CheckPDSALicense">
            <summary>
            Check for valid PDSA License
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSACheckAssembly.CheckMode">
            <summary>
            This method checks to make sure this DLL is only running from a normal EXE and NOT within Visual Studio
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSACheckAssembly.SetEntryAssembly(System.Reflection.Assembly)">
            <summary>
            Set the main Assembly for your application. This is typically called from ASP.NET in the Global.asax, or your main web page.
            </summary>
            <param name="entryAssembly">The Main ASP.NET Web Assembly for your Project</param>
        </member>
        <member name="M:PDSA.Common.PDSACheckAssembly.CheckForRuntimeLicenseFile">
            <summary>
            Check for runtime license file
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSACheckAssembly.GenerateLicenseSalt">
            <summary>
            Generate a unique salt value for PDSA Runtime License
            NOTE: This method can only be called by other PDSA Framework tools as it needs the same strong named assembly.
            </summary>
            <returns>A salt value to be used in generating a runtime license</returns>
        </member>
        <member name="M:PDSA.Common.PDSACheckAssembly.GetHaystackLicenseLocation">
            <summary>
            Return the full path and file name where the Haystack license is located
            </summary>
            <returns>A string</returns>
        </member>
        <member name="M:PDSA.Common.PDSACheckAssembly.GetFrameworkLicenseLocation">
            <summary>
            Return the full path and file name where the PDSA Framework v5.x license is located
            </summary>
            <returns>A string</returns>
        </member>
        <member name="T:PDSA.Common.PDSALicenseException">
            <summary>
            Exception that is raised when a license exception is encountered.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSALicenseException.#ctor">
            <summary>
            Base constructor for the PDSALicenseException
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSALicenseException.#ctor(System.String)">
            <summary>
            Base constructor for the PDSALicenseException
            </summary>
            <param name="message">The message of the exception</param>
        </member>
        <member name="M:PDSA.Common.PDSALicenseException.#ctor(System.String,System.Exception)">
            <summary>
            Base constructor for the PDSALicenseException
            </summary>
            <param name="message">The message of the exception</param>
            <param name="innerException">An inner exception</param>
        </member>
        <member name="T:PDSA.Common.PDSACommonBase">
            <summary>
            This class implements the INotifyPropertyChanged Event Procedure
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSACommonBase.#ctor">
            <summary>
            Constructor for the PDSACommonBase class. Initializes variables to a valid start state.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSACommonBase.#cctor">
            <summary>
            Static constructor for PDSACommBase class.
            </summary>
        </member>
        <member name="E:PDSA.Common.PDSACommonBase.PropertyChanged">
            <summary>
            The PropertyChanged Event to raise to any UI object
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSACommonBase.RaisePropertyChanged(System.String)">
            <summary>
            The PropertyChanged Event to raise to any UI object
            The event is only invoked if data binding is used
            </summary>
            <param name="propertyName">The property name that is changing</param>
        </member>
        <member name="F:PDSA.Common.PDSACommonBase._IsDirty">
            <summary>
            Get/Set the mIsDirty protected variable
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSACommonBase.ClassName">
            <summary>
            Get/Set the name of the Entity class
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSACommonBase.PDSALoginName">
            <summary>
            Get/Set the login name of the person using this class.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSACommonBase.IsDirty">
            <summary>
            Get/Set the dirty flag for the current entity.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSACommonBase.IsSelected">
            <summary>
            Get/Set whether or not this Entity has been selected in a UI
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSACommonBase.GetPropertyChangedEventArgs(System.String)">
            <summary>
            Returns an instance of PropertyChangedEventArgs for 
            the specified property name.
            </summary>
            <param name="propertyName">
            The name of the property to create event args for.
            </param>		
            <returns>A PropertyChangedEventsArgs object</returns>
        </member>
        <member name="T:PDSA.Common.PDSADate">
            <summary>
            A class for helping you work with Dates.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSADate.#ctor">
            <summary>
            Constructor for PDSADate Class
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSADate.NowFormatted">
            <summary>
            Returns the current date and time in a string in a yyyy-MM-dd HH:mm:ss format. This is commonly used to insert into a SQL Server database.
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:PDSA.Common.PDSADate.NowFormatted(System.DateTime)">
            <summary>
            Returns the date and time passed into this method in a string in a yyyy-MM-dd HH:mm:ss format. This is commonly used to insert into a SQL Server database.
            </summary>
            <param name="dt">A Date/Time Value</param>
            <returns>String</returns>
        </member>
        <member name="M:PDSA.Common.PDSADate.NowFormatted(System.String)">
            <summary>
            Returns the current date/time passed in using the format string passed in.
            </summary>
            <param name="dateFormat">A format string</param>
            <returns>String</returns>
        </member>
        <member name="M:PDSA.Common.PDSADate.MonthStart(System.DateTime)">
            <summary>
            Returns the first day of the month for the date value passed in.
            </summary>
            <param name="value">A Date Value</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:PDSA.Common.PDSADate.MonthEnd(System.DateTime)">
            <summary>
            Returns the last day of the month for the date value passed in.
            </summary>
            <param name="value">A Date Value</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:PDSA.Common.PDSADate.QuarterStart(System.DateTime)">
            <summary>
            Returns a Date that is the first day of the quarter for the given date value passed in.
            </summary>
            <param name="value">A Date Value</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:PDSA.Common.PDSADate.QuarterEnd(System.DateTime)">
            <summary>
            Returns a Date that is the last day of the quarter for the given date value passed in.
            </summary>
            <param name="value">A Date Value</param>
            <returns>DataTime</returns>
        </member>
        <member name="M:PDSA.Common.PDSADate.YearStart(System.DateTime)">
            <summary>
            Returns the first day of the year for the given date passed in.
            </summary>
            <param name="value">A Date Value</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:PDSA.Common.PDSADate.YearEnd(System.DateTime)">
            <summary>
            Returns the last day of the year for the given date value passed in.
            </summary>
            <param name="value">DateTime</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:PDSA.Common.PDSADate.GetQuarter(System.DateTime)">
            <summary>
            Returns the number of the quarter that the given date falls within.
            </summary>
            <param name="value">A Date Value</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:PDSA.Common.PDSADate.GetSecondsSinceMidnight">
            <summary>
            Gets the number of seconds that have elapsed since midnight of the current date/time.
            </summary>
            <returns>Double</returns>
        </member>
        <member name="M:PDSA.Common.PDSADate.GetWeek(System.DateTime)">
            <summary>
            Returns the week number for the given date value passed in.
            </summary>
            <param name="value">A Date Value</param>
            <returns>int</returns>
        </member>
        <member name="M:PDSA.Common.PDSADate.GetMonthName(System.DateTime)">
            <summary>
            Returns the Month Name for the given date value passed in.
            </summary>
            <param name="value">A Date Value</param>
            <returns>String</returns>
        </member>
        <member name="M:PDSA.Common.PDSADate.GetMonthName(System.Int32)">
            <summary>
            Returns the Month Name for a value from 1-12 that is passed in.
            </summary>
            <param name="value">An integer value between 1 and 12</param>
            <returns>string</returns>
        </member>
        <member name="M:PDSA.Common.PDSADate.IsADate(System.String)">
            <summary>
            Returns True if the string value passed in is a valid date.
            </summary>
            <param name="value">A string to be test</param>
            <returns>boolean</returns>
        </member>
        <member name="M:PDSA.Common.PDSADate.IsADate(System.String,System.String)">
            <summary>
            Returns True if the string value passed in is a valid date. This method also allows you to pass in a format such as "yyyyMMdd".
            This method does use the CurrentCulture and assumes that your date passed in is in a local format.
            </summary>
            <param name="value">The date to test</param>
            <param name="dateFormat">A valid date format string such as "yyyyMMdd" that the 'value' parameter is in</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.Common.PDSADate.Age(System.DateTime)">
            <summary>     
            Returns the age of a person in years based on today's date and the birthdate passed in
            </summary>     
            <param name="birthDate">The date of birth</param>     
            <returns>The age in years. If the birth date passed in is a future date, then zero is returned</returns>     
        </member>
        <member name="M:PDSA.Common.PDSADate.Age(System.DateTime,System.DateTime)">
            <summary>     
            Calculates the age in years of the current System.DateTime object as of later date.     
            </summary>     
            <param name="birthDate">The date of birth</param>     
            <param name="baseDate">The date on which to calculate the age.</param>     
            <returns>The age in years</returns>     
        </member>
        <member name="T:PDSA.Common.PDSAEmailProcessorReplacement">
            <summary>
            Class for keyword/text replacement for email processor
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAEmailProcessorReplacement.#ctor">
            <summary>
            Constructor for PDSAEmailProcessorReplacement
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAEmailProcessorReplacement.#ctor(System.String,System.String)">
            <summary>
            Constructor for PDSAEmailProcessorReplacement
            </summary>
            <param name="key">The keyword to look for</param>
            <param name="replace">The value to replace with</param>
        </member>
        <member name="P:PDSA.Common.PDSAEmailProcessorReplacement.Keyword">
            <summary>
            Get/Set the keyword to locate within the email
            NOTE: Do not put any tokens around this keyword.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAEmailProcessorReplacement.Replacement">
            <summary>
            Get/Set the Replacement value to replace in the location of the keyword
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAEmailProcessorReplacement.ToString">
            <summary>
            Override of ToString. Returns Keyword: Replacement
            </summary>
            <returns>String of Keyword: Replacement</returns>
        </member>
        <member name="T:PDSA.Common.PDSAEmailProcessor">
            <summary>
            This class is used to create an email using replaceable tokens
            Tokens are defined with curly braces {AppName}, {CompanyName}, etc.
            You can define any tokens you want and then supply the text to do the replacement.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAEmailProcessor.#ctor">
            <summary>
            Constructor for the PDSAEmailProcessor class
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAEmailProcessor.#ctor(System.String)">
            <summary>
            Constructor for the PDSAEmailProcessor class
            </summary>
            <param name="htmlFile">An HTML file to read in</param>
        </member>
        <member name="M:PDSA.Common.PDSAEmailProcessor.#ctor(System.String,System.Collections.Generic.List{PDSA.Common.PDSAEmailProcessorReplacement})">
            <summary>
            Constructor for the PDSAEmailProcessor class
            </summary>
            <param name="htmlFile">An HTML file to read in</param>
            <param name="keywords">A set of replaceable tokens</param>
        </member>
        <member name="M:PDSA.Common.PDSAEmailProcessor.Init">
            <summary>
            Initialize properties to a valid start state
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAEmailProcessor.IsValid">
            <summary>
            Whether or not the email replacement was successful
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAEmailProcessor.KeywordReplacements">
            <summary>
            Get/Set the list of keywords to locate within the HTML file and the values to replace them with
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAEmailProcessor.HtmlEmailFile">
            <summary>
            Get/Set the full path and file name of the HTML file to process
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAEmailProcessor.Html">
            <summary>
            Get/Set the HTML to process
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAEmailProcessor.HtmlResult">
            <summary>
            Get/Set the HTML result from creating the email
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAEmailProcessor.Messages">
            <summary>
            Get/Set any error messages to pass back from this process
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAEmailProcessor.TokenStart">
            <summary>
            Get/Set the Token that delimits the start of the keyword.
            The default is '{'
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAEmailProcessor.TokenEnd">
            <summary>
            Get/Set the Token that delimits the end of the keyword.
            The default is '}'
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAEmailProcessor.Subject">
            <summary>
            Get/Set the Subject of the Email. Will grab from the title if not filled in.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAEmailProcessor.CreateEmail">
            <summary>
            Call this method after setting the HtmlEmailFile property to the location of a valid file name
            </summary>
            <returns>An HTML Email</returns>
        </member>
        <member name="M:PDSA.Common.PDSAEmailProcessor.CreateEmail(System.String)">
            <summary>
            Call this method if you have an HTML string with delimiters ready to be processed.
            This method would be used if you read the HTML string from a database table for example.
            </summary>
            <param name="htmlText">The HTML text to process</param>
            <returns>An HTML Email</returns>
        </member>
        <member name="M:PDSA.Common.PDSAEmailProcessor.GetTokenInfo">
            <summary>
            Returns a CRLF delimited string of all keywords and their replacements.
            </summary>
            <returns>String of keywords and replacements</returns>
        </member>
        <member name="M:PDSA.Common.PDSAEmailProcessor.GetTokenInfo(System.String)">
            <summary>
            Returns a delimited string of all keywords and their replacements.
            </summary>
            <param name="delimiter">Delimiter to use</param>
            <returns>String of keywords and replacements</returns>
        </member>
        <member name="T:PDSA.Common.PDSAImpersonationException">
            <summary>
            Used when PDSAUserIdentity fails to validate credentials
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAImpersonationException.#ctor(System.String)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="message">A message to display for this exception message</param>
        </member>
        <member name="T:PDSA.Common.PDSAMinMax">
            <summary>
            This class will help you get the minimum and maximum values for a data type.
            Pass in a string value such as "System.Int32" to the GetMinMaxFromDataType method, or set the DataType property and the MinValue and MaxValue properties will be filled in.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAMinMax.#ctor">
            <summary>
            Constructor for PDSAMinMax class
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAMinMax.DataType">
            <summary>
            Get/Set the Data Type to get the Minimum and Maximum values for.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAMinMax.MinValue">
            <summary>
            Get/Set the Minimum value for the data type specified in the DataType property.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAMinMax.MaxValue">
            <summary>
            Get/Set the Maximum value for the data type specified in the DataType property.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAMinMax.GetMinMaxFromDataType(System.String)">
            <summary>
            Pass a string representing a valid .NET data type to this method and the MinValue and MaxValue for that data type will be filled in.
            If an invalid .NET data type is passed in, then the MinValue and MaxValue are set to Null.
            </summary>
            <param name="dataType">A string representing a valid .NET data type such as System.Int32.</param>
        </member>
        <member name="M:PDSA.Common.PDSAMinMax.GetMinMaxFromDataType">
            <summary>
            Pass a string representing a valid .NET data type to this method and the MinValue and MaxValue for that data type will be filled in.
            If an invalid .NET data type is passed in, then the MinValue and MaxValue are set to Null.
            </summary>
        </member>
        <member name="T:PDSA.Common.PDSATracer">
            <summary>
            This class is used to trace calls during debug or runtime
            <remarks>
            Add the following to the .config file for your application
            
            &lt;system.diagnostics&gt;
              &lt;trace autoflush="true"/&gt;
              &lt;sources&gt;
                &lt;source name="PDSATracer"
                        switchName="PDSATracerSwitch"
                        switchType="System.Diagnostics.SourceSwitch" &gt;
                  &lt;listeners&gt;
                    &lt;add name="PDSATracer"
                         type="System.Diagnostics.TextWriterTraceListener"
                         initializeData="MyApplication.log" /&gt;
                    &lt;remove name="Default" /&gt;
                    &lt;!-- Uncomment the following to stop tracing --&gt;
                    &lt;!--&lt;remove name="PDSATracer" /&gt;--&gt;
                  &lt;/listeners&gt;
                &lt;/source&gt;
              &lt;/sources&gt;
              &lt;switches&gt;
                &lt;add name="PDSATracerSwitch"
                     value="Information" /&gt;
              &lt;/switches&gt;
            &lt;/system.diagnostics&gt;
            </remarks>
            
            <example>
            PDSATracer.Instance.WriteLog("ClassName", "MethodName", "Message to write");
            PDSATracer.Instance.WriteLog("MethodName", "Message to write");
            PDSATracer.Instance.WriteLog("Message to write");
            </example>
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSATracer.#ctor">
            <summary>
            Constructor for PDSATracer class
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSATracer.#ctor(System.String,System.String)">
            <summary>
            Constructor for PDSATracer class
            </summary>
            <param name="listenerName">Listener Name</param>
            <param name="switchName">Switch Name</param>
        </member>
        <member name="F:PDSA.Common.PDSATracer.TraceProvider">
            <summary>
            Get/Set the Trace Provider
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSATracer.ListenerName">
            <summary>
            Get/Set the Listener Name. This property is required.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSATracer.SwitchName">
            <summary>
            Get/Set the Listener Name. This property is required.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSATracer.ClassName">
            <summary>
            Get/Set the Class Name you are tracing
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSATracer.MethodName">
            <summary>
            Get/Set the Method Name you are tracing
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSATracer.AddDateTime">
            <summary>
            Get/Set whether or not add the Date and Time to the message
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSATracer.AddClassName">
            <summary>
            Get/Set whether or not add the Class Name to the message
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSATracer.AddMethodName">
            <summary>
            Get/Set whether or not add the Method Name to the message
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSATracer.WriteToDebugWindow">
            <summary>
            Get/Set whether or not add to write the message to the debug window using Debug.WriteLine()
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSATracer.UseUTCDateTime">
            <summary>
            Get/Set whether or not to use DateTime.UtcNow or DateTime.Now
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSATracer.Init">
            <summary>
            Initialize all properties to a valid start state
            NOTE: ListenerName is initialized to "PDSATracer" and SwitchName is initialized to "PDSATracerSwitch"
            All 'Add' properties are initialized to true.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSATracer.GetDefaultTracerAndSwitch">
            <summary>
            Get the default ListenerName and SwitchName from the .Config file
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSATracer.Instance">
            <summary>
            Get/Set an instance of the PDSATracer class
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSATracer.WriteLog(System.String)">
            <summary>
            Write a message to the listener
            </summary>
            <param name="msg">The message to write</param>
        </member>
        <member name="M:PDSA.Common.PDSATracer.WriteLog(System.String,System.String)">
            <summary>
            Write a message to the listener
            </summary>
            <param name="methodName">A method name</param>
            <param name="msg">The message to write</param>
        </member>
        <member name="M:PDSA.Common.PDSATracer.WriteLog(System.String,System.String,System.String)">
            <summary>
            Write a message to the listener
            </summary>
            <param name="className">A class name</param>
            <param name="methodName">A method name</param>
            <param name="msg">The message to write</param>
        </member>
        <member name="M:PDSA.Common.PDSATracer.Close">
            <summary>
            Flush and Close the Tracer
            </summary>
        </member>
        <member name="T:PDSA.Common.PDSAEventArgsEventType">
            <summary>
            Enumeration of the type of event that is being raised
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAEventArgsEventType.Informational">
            <summary>
            Information message only
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAEventArgsEventType.ExtraInformation">
            <summary>
            Extra information only. Could use this if you just want minimal messages, or all messages to be displayed.
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAEventArgsEventType.Exception">
            <summary>
            This event is raising an Exception message
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAEventArgsEventType.Fatal">
            <summary>
            This event is raising a Fatal message
            </summary>
        </member>
        <member name="T:PDSA.Common.PDSAEventArgs">
            <summary>
            This class is used for custom events that are raised from the various PDSA Framework Classes
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAEventArgs.#ctor">
            <summary>
            Constructor for PDSAEventArgs class
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor for PDSAEventArgs class
            </summary>
            <param name="className">The class name that raises this event arg</param>
            <param name="methodName">The method name that raises this event arg</param>
            <param name="message">The message for this event arg</param>
        </member>
        <member name="M:PDSA.Common.PDSAEventArgs.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Constructor for PDSAEventArgs class
            </summary>
            <param name="className">The class name that raises this event arg</param>
            <param name="methodName">The method name that raises this event arg</param>
            <param name="message">The message for this event arg</param>
            <param name="lastException">The last exception</param>
        </member>
        <member name="P:PDSA.Common.PDSAEventArgs.ClassName">
            <summary>
            Get/Set the Class Name this event was raised from
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAEventArgs.MethodName">
            <summary>
            Get/Set the Method Name this event was raised from.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAEventArgs.Type">
            <summary>
            Get/Set the type of this event
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAEventArgs.Message">
            <summary>
            Get/Set the message for this event
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAEventArgs.Cancel">
            <summary>
            Get/Set whether or not to cancel the long running process from which this event was raised.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAEventArgs.LastException">
            <summary>
            Get/Set the last exception object that was generated from the event
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAEventArgs.CompletedWithErrors">
            <summary>
            Get/Set a flag to inform the user/develop that the process completed, but with errors.
            </summary>
        </member>
        <member name="T:PDSA.Common.PDSAExceptionInfo">
            <summary>
            This class is used to process all exceptions and inner exceptions and return all exception information in one big string.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAExceptionInfo.GetAllExceptionMessages(System.Exception,System.String)">
            <summary>
            Loop through all exceptions and return a string with all of the messages concatenated together. They will be separated by the delimiter passed in.
            </summary>
            <param name="ex">The exception object</param>
            <param name="delimiter">A delimiter to separate each exception.</param>
            <returns>A string with all the exception information.</returns>
        </member>
        <member name="M:PDSA.Common.PDSAExceptionInfo.GetAllExceptionMessages(System.Exception)">
            <summary>
            Loop through all exceptions and return a string with all of the messages concatenated together. They will be separated by a NewLine character.
            </summary>
            <param name="ex">The exception object</param>
            <returns>A string with all the exception information.</returns>
        </member>
        <member name="T:PDSA.Common.PDSAFramework">
            <summary>
            This class is used to return information about the currently running PDSA .NET Productivity Framework.
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAFramework.FW_FOLDER_FRAGMENT">
            <summary>
            Returns 'PDSAFramework'
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAFramework.FW_MYDOCUMENTS_FOLDER">
            <summary>
            Returns 'PDSAFramework5'
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAFramework.FW_FOLDER">
            <summary>
            Returns 'PDSAFramework-500'
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAFramework.FW_VER">
            <summary>
            Returns '5.0.0'
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAFramework.GetFrameworkFolder">
            <summary>
            This method is intended to be used from utilities within the PDSA Framework.
            It assumes you are running a DLL or EXE from within the PDSAFramework-??? folder.
            </summary>
            <returns>The root folder of the PDSA Framework.</returns>
        </member>
        <member name="M:PDSA.Common.PDSAFramework.GetFrameworkMyDocumentsFolder">
            <summary>
            This method returns the folder to put things for the PDSA Framework
            within the user's 'My Documents' folder.
            </summary>
            <returns>The root folder of the PDSA Framework.</returns>
        </member>
        <member name="M:PDSA.Common.PDSAFramework.GetFrameworkFolder(System.String)">
            <summary>
            This method is intended to be used from utilities within the PDSA Framework.
            It assumes you are running a DLL or EXE from within the PDSAFramework-??? folder.
            </summary>
            <param name="fwFolderName">A partial folder name like 'PDSAFramework' from which this method will try to figure out the root directory of the PDSA Framework</param>
            <returns>The root folder of the PDSA Framework.</returns>
        </member>
        <member name="M:PDSA.Common.PDSAFramework.GetFrameworkVersion">
            <summary>
            Returns the current PDSA Framework version number
            </summary>
            <returns>The version number</returns>
        </member>
        <member name="T:PDSA.Common.PDSAImpersonationType">
            <summary>
            Defines the impersonation types used by the PDSAUserIdentity class 
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAImpersonationType.Interactive">
            <summary>
            Interactive
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAImpersonationType.Network">
            <summary>
            Network
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAImpersonationType.Batch">
            <summary>
            Batch
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAImpersonationType.Service">
            <summary>
            Service
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAImpersonationType.NetworkClearText">
            <summary>
            Network Clear Text
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAImpersonationType.NewCredentials">
            <summary>
            New Credentials
            </summary>
        </member>
        <member name="T:PDSA.Common.PDSANumbers">
            <summary>
            The methods in the class are helpful when you are dealing with Numbers in your .NET code.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSANumbers.ToFileSize(System.Int64)">
            <summary>
            Returns the file size in either xxx GB, xxx MB, xxx KB, or xxx bytes 
            </summary>
            <param name="totalBytes">Total bytes to convert</param>
            <returns>String with total bytes plus a suffix</returns>
        </member>
        <member name="M:PDSA.Common.PDSANumbers.NumberOfPages(System.Int64,System.Int32)">
            <summary>
            Calculate a total number of pages given a total rows and a page size.
            </summary>
            <param name="totalRows">Total number of rows</param>
            <param name="pageSize">The page size (if equal to or less than 0, then 10 is used)</param>
            <returns>The number of pages</returns>
        </member>
        <member name="M:PDSA.Common.PDSANumbers.CheckForIntegerNonBlank(System.String)">
            <summary>
            Returns true if the 'value' passed in can be converted to an Int32 data type.
            </summary>
            <param name="value">The value to test</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:PDSA.Common.PDSANumbers.CheckForIntegerNonBlank(System.String,System.Boolean)">
            <summary>
            Returns true if the 'value' passed in can be converted to an Int32 data type.
            </summary>
            <param name="value">The value to test</param>
            <param name="checkForLessThanZero">Pass in a 'true' if you require the number to be greater than zero.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:PDSA.Common.PDSANumbers.IsNumeric(System.String)">
            <summary>
            Returns 'true' if the string value passed in can be converted to a numeric value
            </summary>
            <param name="value">The value to test</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:PDSA.Common.PDSANumbers.CheckForNumericNonBlank(System.String,System.Boolean)">
            <summary>
            Returns 'true' if the string value passed in can be converted to a numeric value
            </summary>
            <param name="value">The value to test</param>
            <param name="checkForLessThanZero">Pass in a 'true' if you require the number to be greater than zero.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:PDSA.Common.PDSANumbers.CheckForNumericNonBlank(System.String)">
            <summary>
            Returns 'true' if the string value passed in can be converted to a numeric value
            </summary>
            <param name="value">The value to test</param>
            <returns>Boolean</returns>
        </member>
        <member name="T:PDSA.Common.PDSAString">
            <summary>
            This class is useful for dealing with string data in your .NET code.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAString.GetAsJSON``1(System.Type,System.Collections.Generic.IList{``0})">
            <summary>
            Pass in a type and a collection and this method will return the corresponding JSON string back
            Example: string ret = GetCollectionAsJSON(typeof(Products), productCollection);
            </summary>
            <typeparam name="T">A Specific Collection Type</typeparam>
            <param name="typ">The typeof() Collection Type</param>
            <param name="coll">The collection of data</param>
            <returns>A string of the data in JSON format</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.GetAsJSON(System.Data.DataSet)">
            <summary>
            Get a DataSet expressed as JSON. 
            This method just performs a simple DataSet to JSON translation.
            </summary>
            <param name="ds">The Dataset to convert</param>
            <returns>A string of the data in JSON format</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.GetAsJSON(System.Data.DataTable)">
            <summary>
            Get a DataTable expressed as JSON. 
            This method just performs a simple DataTable to JSON translation.
            </summary>
            <param name="dt">The DataTable to convert</param>
            <returns>A string of the data in JSON format</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.GetAsJSON(System.Type,System.Object)">
            <summary>
            Pass in a type and a specific object and this method will return the corresponding JSON string back
            Example: string ret = GetObjectAsJSON(typeof(Product), productEntity);
            </summary>
            <param name="typ">The typeof() Class Type</param>
            <param name="classData">The entity object</param>
            <returns>A string of the data in JSON format</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.GetFromJSON(System.Type,System.String)">
            <summary>
            Pass in a JSON encoded string and an object will be returned back
            </summary>
            <param name="typ">The typeof() Class Type</param>
            <param name="value">The JSON encoded string</param>
            <returns>An object</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.ConvertToStringTrim(System.Object)">
            <summary>
            Convert an object type to a string and trim it. This is mainly used from VB when reading from a DataRow because VB will return the full size for the value in the database.
            </summary>
            <param name="value">The string value to convert and trim</param>
            <returns>A trimmed string.</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.GetData(System.Object,System.String)">
            <summary>
            This method is used to return a string value from an object data value.
            If that value is equal to DBNull.Value, then the 'defaultValue' value is returned.
            Otherwise the object value is converted to a string and returned.
            This method is generally called while reading from a DataReader
            </summary>
            <param name="value">An object value to convert to a string</param>
            <param name="defaultValue">A value that is returned if the value passed in is equal to DBNull.Value</param>
            <returns>A string with either the data in 'value' returned, or the 'defaultValue' if 'value' is null</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.ReverseString(System.String)">
            <summary>
            Take any string and reverse all of its characters
            </summary>
            <param name="value">The string to reverse</param>
            <returns>A string with all characters in reverse order</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.GetWords(System.String)">
            <summary>
            Get all words in a normal English sentence. Any spaces, periods, commas, semi-colons, or colons will be used as the word delimiters.
            </summary>
            <param name="value">The sentence to parse</param>
            <returns>String Array</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.GetQuotedWords(System.String)">
            <summary>
            Get all words in a normal English sentence that have double or single quotes around them. Any spaces, periods, commas, semi-colons, or colons will be used as the word delimiters.
            </summary>
            <param name="value">The sentence to parse</param>
            <returns>String Array</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.RemoveDuplicates(System.Collections.ArrayList)">
            <summary>
            Remove duplicates from an ArrayList full of strings.
            </summary>
            <param name="stringItems">An array list of strings</param>
            <returns>An array list with all duplicates removed.</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.MakeFieldAValidIdentifier(System.String)">
            <summary>
            Pass in any string (normally a field name) and this will make sure that the field name is valid for an Identifier in C# or VB code.
            Replaces all invalid characters with a blank
            </summary>
            <param name="value">The string to check</param>
            <returns>The valid string</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.MakeFieldAValidIdentifier(System.String,System.String)">
            <summary>
            Pass in any string (normally a field name) and this will make sure that the field name is valid for an Identifier in C# or VB code.
            </summary>
            <param name="value">The string to check</param>
            <param name="delimiter">Delimiter to replace for invalid characters</param>
            <returns>The valid string</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.MakeFieldAValidIdentifier(System.String,System.String,System.Boolean)">
            <summary>
            Pass in any string (normally a field name) and this will make sure that the field name is valid for an Identifier in C# or VB code.
            </summary>
            <param name="value">The string to check</param>
            <param name="delimiter">Delimiter to replace for invalid characters</param>
            <param name="removePeriod">Pass in True to remove a period (.)</param>
            <returns>The valid string</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.FieldNameWrap(System.String)">
            <summary>
            If the string value has a space, wrap the string value within [ and ].  Used for SQL Server column names.
            </summary>
            <param name="value">The string to wrap.</param>
            <returns>The string with the delimiters around it.</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.FieldNameWrap(System.String,System.String,System.String)">
            <summary>
            If the string value has a space, wrap the string value within the two delimiters passed.
            </summary>
            <param name="value">The string to wrap.</param>
            <param name="prefix">The prefix for the string</param>
            <param name="suffix">The suffix for the string</param>
            <returns>The string with the delimiters around it.</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.StringToBoolean(System.String)">
            <summary>
            Convert a string to a boolean
            1, -1, True, true, T, t, Yes, yes, Y, y will return 'true'
            0, False, false, F, f, No, no, N, n will return 'false'
            </summary>
            <param name="value">value to convert to boolean</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.IsValidEmail(System.String)">
            <summary>
            Is the value passed in a valid email format?
            </summary>
            <param name="email">The email to check</param>
            <returns>True if the email is valid, otherwise false.</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.RandomString(System.Int32,System.Boolean)">
            <summary>
            Generates a string of random characters up to the length passed in
            </summary>
            <param name="size">Size of string to generate</param>
            <param name="mostlyLetters">Use mostly letters for random string</param>
            <returns>A string of random characters</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.TrimCRLF(System.String)">
            <summary>
            Trims off all Carriage/Return Line/Feed characters from the end of a string
            </summary>
            <param name="value">The string value that has CRLF's at the end</param>
            <returns>The string minus all CRLF's at the end</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.IsAllLowerCase(System.String)">
            <summary>
            Pass in a string and this method will determine if it is all lower case characters or not.
            </summary>
            <param name="value">The string to check</param>
            <returns>True if the string passed in is all lower case, otherwise false.</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.IsAllUpperCase(System.String)">
            <summary>
            Pass in a string and this method will determine if it is all upper case characters or not.
            </summary>
            <param name="value">The string to check</param>
            <returns>True if the string passed in is all upper case, otherwise false.</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.CamelCaseWordSplit(System.String)">
            <summary>
            Given a string where there are both lower and upper case characters, this method will split it on the upper case characters and put spaces before each upper case character.
            For example, if you pass in 'ThisIsASentence.", this method returns 'This Is A Sentence."
            </summary>
            <param name="value">The string to parse</param>
            <returns>The parsed string.</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.ProperCase(System.String)">
            <summary>
            Returns a string in proper case format. It looks for a space on where to add an upper case character.
            For example, if you pass in 'This is a sentence." this method returns 'This Is A Sentence.'
            </summary>
            <param name="value">The string to check</param>
            <returns>The proper cased string</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.ProperCase(System.String,System.String)">
            <summary>
            Returns a string in proper case format. It looks for the delimiter on where to add an upper case character.
            <para>For example, if you pass in 'THIS_IS_A_SENTENCE" and you pass in an underscore as the delimiter, then this method returns 'This Is A Sentence.'</para>
            </summary>
            <param name="value">The string to check</param>
            <param name="delimiter">The delimiter to change to a space</param>
            <returns>The proper cased string</returns>
        </member>
        <member name="T:PDSA.Common.PDSAString.SpecialFolderNameTypes">
            <summary>
            Enumeration of the type of special folder names used in method ExpandSpecialFolders.
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAString.SpecialFolderNameTypes.AppPath">
            <summary>
            Expands to the path where the .EXE is running
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAString.SpecialFolderNameTypes.UserAppData">
            <summary>
            Expands to the user's application data path
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAString.SpecialFolderNameTypes.MyDocuments">
            <summary>
            Expands to the user's MyDocuments path
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAString.SpecialFolderNameTypes.FrameworkPath">
            <summary>
            Expands to the folder where the PDSA Framework is located
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAString.SpecialFolderNameTypes.FrameworkUserPath">
            <summary>
            Expands to the folder where the PDSA Framework User Data is located
            </summary>
        </member>
        <member name="F:PDSA.Common.PDSAString.SpecialFolderNameTypes.ConfigFile">
            <summary>
            Expands to the configuration file for the current .EXE
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAString.ExpandSpecialFolders(PDSA.Common.PDSAString.SpecialFolderNameTypes)">
            <summary>
            This method will accept an Enumeration for special path. These Enumeration will be expanded into their appropriate full paths.
            <para>NOTE: None of the above tokens has a trailing backslash, so you need to add one if required.</para>
            </summary>
            <param name="SpecialFolderNameType">An Enumeration for special folder</param>
            <returns>The full special folder name</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.ExpandSpecialFolders(System.String)">
            <summary>
            This method will accept any of the Environment.SpecialFolder enumerations in the format [SpecialFolderEnum].
            This method will also accept any path with the following special tokens in that path. These tokens will be expanded into their appropriate full paths.
            <para>[AppPath] = The folder where the application is installed</para>
            <para>     Example: C:\Program Files\YourAppName</para>
            <para>[UserAppData] = Your unique storage area for this application</para>
            <para>     Example: C:\Users\[YourLoginName]\AppData\Roaming\Company\YourAppName\1.0.0.0</para>
            <para>[MyDocuments] = Generate under your "My Documents" folder</para>
            <para>     Example: C:\Users\[YourLoginName]\Documents</para>
            <para>[FrameworkPath] = The folder where the PDSA Framework is installed</para>
            <para>     Example: C:\PDSAFramework-500</para>
            <para>[ConfigFile] = The .Config file for the current .EXE file</para>
            <para>     Example: C:\MyApp\MyApp.exe.config</para>
            <para>[ProgramFiles] = The folder where your programs are installed</para>
            <para>     Example: C:\Program Files (x86)</para>
            <para>[TEMP] = The TEMP folder on your machine</para>
            <para>     Example: C:\Temp</para>
            <para>[TMP] = The TMP folder on your machine</para>
            <para>     Example: C:\Temp</para>
            <para>NOTE: None of the above tokens has a trailing backslash, so you need to add one if required.</para>
            </summary>
            <param name="folderName">The folder name with the special token in it</param>
            <returns>The full special folder name</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.ExpandSpecialTokens(System.String)">
            <summary>
            Pass in a string to this method that has one of the special tokens in it and that token will be replaced with 
            the corresponding variables as described below.
            <para>[UserName] = The user name that is running this application as retrieved from Environment.UserName</para>
            <para>[Domain] = The current domain that this application is running on as retrieved from Environment.UserDomainName</para>
            <para>[MachineName] = The current machine name that this application is running on as retrieved from Environment.MachineName</para>
            </summary>
            <param name="value">The string with the special token in it</param>
            <returns>The new string with the tokens replaced</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.CountChars(System.String,System.Char)">
            <summary>
            Count the number of occurrences of a given character in a string.
            </summary>
            <param name="text">The string to count characters in</param>
            <param name="chr">The character to count</param>
            <returns>The number of occurrences of a given character</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.CountSpecialChars(System.String)">
            <summary>
            Count the number of occurrences of special characters in a string.
            Special characters are: !@#$%&amp;*?~
            </summary>
            <param name="text">The string to count special characters within</param>
            <returns>The number of occurrences of special character</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.GetCurrentDirectory">
            <summary>
            Returns the current directory the program is running in. If running in Visual Studio, this method removes the \bin folder. NO ending slash is applied to the end of this directory path.
            </summary>
            <returns>The current directory.</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.GetConfigFileName">
            <summary>
            Gets the currently executing assembly's .Config file name
            </summary>
            <returns>A path the to config file name</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.RemoveSpecialChars(System.String)">
            <summary>
            Remove any special characters like CRLF, LF, TABs, etc. and replace with a space.
            </summary>
            <param name="sqlString">The string that contains the "special" characters</param>
            <returns>String with "special" characters removed</returns>
        </member>
        <member name="M:PDSA.Common.PDSAString.RemoveAllNumbers(System.String)">
            <summary>
            Remove any numbers (0-9) and replace with an empty string.
            </summary>
            <param name="value">The string that contains the numbers</param>
            <returns>String with all numbers removed</returns>
        </member>
        <member name="T:PDSA.Common.PDSASystemInfo">
            <summary>
            This class will return the system information of the current running machine.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSASystemInfo.#ctor">
            <summary>
            Base constructor for the PDSASystemInfo class. Gets a reference to the CallingAssembly.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.MachineName">
            <summary>
            Get the current machine name.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.Is64bitOS">
            <summary>
            Get whether or not the OS is 64 bit.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.CommandLine">
            <summary>
            Gets the Command line. Same as Environment.CommandLine
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.SystemDirectory">
            <summary>
            Gets the SystemDirectory. Same as Environment.SystemDirectory
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.UserDomainName">
            <summary>
            Gets the User Domain Name. Same as Environment.UserDomainName.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.UserInteractive">
            <summary>
            Gets the whether or not the current environment is running in UserInteractive mode. Same as Environment.UserInteractive
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.Memory">
            <summary>
            Gets the Current Working Set of Memory on this machine. Same as Environment.WorkingSet
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.UserName">
            <summary>
            Gets the current user name. Same as Environment.UserName
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.WindowsIdentity">
            <summary>
            Gets the current Windows Identity object's name. Same as System.Security.Principal.WindowsIdentity.GetCurrent().Name
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.LocalUserAppDataPath">
            <summary>
            Returns the current user's local application data path. Same as Application.LocalUserAppDataPath.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.ExecutablePath">
            <summary>
            Gets the current EXE's executing path. Same as Application.ExecutablePath.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.StartUpPath">
            <summary>
            Gets the current application's startup path. Same as Application.StartupPath.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.CommonAppDataPath">
            <summary>
            Returns the location of the common application data path. Same as Application.CommonAppDataPath.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.CommonAppDataRegistryName">
            <summary>
            Gets the current applications common registry location. Same as Application.CommonAppDataRegistry.Name.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.UserAppDataPath">
            <summary>
            Gets the current users application data path. Same as Application.UserAppDataPath.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.UserAppDataRegistryName">
            <summary>
            Gets the current user's location to store data in the Registry. Same as Application.UserAppDataRegistry.Name.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.CurrentCulture">
            <summary>
            Gets the current application's culture name. Same as Application.CurrentCulture.Name
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.CurrentInputLanguage">
            <summary>
            Gets the current input language. Same as Application.CurrentInputLanguage.LayoutName.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.LoadedAssemblies">
            <summary>
            Gets the currently loaded assemblies
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.EnvVariables">
            <summary>
            Gets any environment variables passed into this EXE
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSASystemInfo.IPAddresses">
            <summary>
            Gets all IPAddresses for the current machine separated by a CRLF.
            </summary>
            <returns>All IPAddresses for the current machine.</returns>
        </member>
        <member name="M:PDSA.Common.PDSASystemInfo.IPAddresses(System.String)">
            <summary>
            Returns the IP Addresses on the current machine 
            </summary>
            <param name="delimiter">The delimiter used to separate all IP addresses</param>
            <returns>All IP addresses on the machine</returns>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.CurrentDirectory">
            <summary>
            Gets the Current Directory.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.OSVersion">
            <summary>
            Gets the Operating System Version.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.OSName">
            <summary>
            Gets the Operating System Name.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.StackTrace">
            <summary>
            Gets the Current Stack Trace.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.ProgramFilesPath">
            <summary>
            Gets the Program Files path. Usually C:\Program Files or C:\Program Files (x86).
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.TickCount">
            <summary>
            Gets the Current TickCount since Midnight.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.ThreadName">
            <summary>
            Gets the current thread name.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.AssemblyName">
            <summary>
            Gets the current executing Assembly's Full Name.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.MainAssemblyName">
            <summary>
            Gets the Main Application's Assembly Full Name.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.AppDomainName">
            <summary>
            The Current Domain's Friendly Name. Same as AppDomain.CurrentDomain.FriendlyName.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.CompanyName">
            <summary>
            Gets the current application's company name.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.ProductName">
            <summary>
            Gets the current application's product name.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.Description">
            <summary>
            Gets the current application's description.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.Title">
            <summary>
            Gets the current application's title.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.Copyright">
            <summary>
            Gets the current application's copyright.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.ProductVersion">
            <summary>
            Gets the current application's product version.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.Version">
            <summary>
            Gets the current application's Product Version.
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSASystemInfo.UserLanguage">
            <summary>
            Returns the current user language such as 'en-US' or 'es-MX' for the current thread of execution
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSASystemInfo.GetAllSystemInfo">
            <summary>
            Retrieves all system information properties from the PDSASystemInfo class and presents them in CRLF delimited string.
            </summary>
            <returns>A string with all the system information.</returns>
        </member>
        <member name="M:PDSA.Common.PDSASystemInfo.GetAllSystemInfo(System.String)">
            <summary>
            Retrieves all system information properties from the PDSASystemInfo class and presents them in a string separated by the delimiter passed in.
            </summary>
            <param name="delimiter">The delimiter to separate all the properties</param>
            <returns>A string with all the system information.</returns>
        </member>
        <member name="M:PDSA.Common.PDSASystemInfo.GetAllSystemInfo(System.Boolean)">
            <summary>
            Retrieves all system information properties from the PDSASystemInfo class and presents them in a string separated by the delimiter passed in.
            </summary>
            <param name="includePersonalInfo">Whether or not to return personal info</param>
            <returns>A string with all the system information plus personal info.</returns>
        </member>
        <member name="M:PDSA.Common.PDSASystemInfo.GetAllSystemInfo(System.String,System.Boolean)">
            <summary>
            Retrieves all system information properties from the PDSASystemInfo class and presents them in a string separated by the delimiter passed in.
            </summary>
            <param name="delimiter">The delimiter to separate all the properties</param>
            <param name="includePersonalInfo">Whether or not to return personal info</param>
            <returns>A string with all the system information.</returns>
        </member>
        <member name="M:PDSA.Common.PDSASystemInfo.EnvVariablesGet">
            <summary>
            Gets all environment variables separated by a CRLF.
            </summary>
            <returns>All environment variables.</returns>
        </member>
        <member name="M:PDSA.Common.PDSASystemInfo.EnvVariablesGet(System.String)">
            <summary>
            Gets all environment variables in a string separated by the delimiter you pass in.
            </summary>
            <param name="delimiter">The delimiter to use to separate all environment variables.</param>
            <returns>All environment variables.</returns>
        </member>
        <member name="M:PDSA.Common.PDSASystemInfo.GetUserAppDataPath">
            <summary>
            Get's the user's App Data Path in the form:
            C:\Users\YOUR NAME\AppData\Roaming\COMPANY NAME\APPLICATION NAME\APPLICATION VERSION
            </summary>
            <returns>Returns a string to the user's personal application data path</returns>
        </member>
        <member name="M:PDSA.Common.PDSASystemInfo.AssembliesGet">
            <summary>
            Get all loaded assemblies in the current EXE separated by a CRLF.
            </summary>
            <returns>All assemblies currently loaded.</returns>
        </member>
        <member name="M:PDSA.Common.PDSASystemInfo.AssembliesGet(System.String)">
            <summary>
            Get all loaded assemblies in the current EXE separated by a CRLF.
            </summary>
            <param name="delimiter">The delimiter used to separate the assemblies.</param>
            <returns>All assemblies currently loaded.</returns>
        </member>
        <member name="T:PDSA.Common.PDSAUserIdentity">
            <summary>
            This class is used to impersonate another user during the running of an application
            </summary>
        </member>
        <member name="P:PDSA.Common.PDSAUserIdentity.LastError">
            <summary>
            Gets the error code of the last error that occurred while trying to impersonate an identity.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAUserIdentity.Logon(System.String,System.String,System.String)">
            <summary>
            Validates the user name, password and domain credentials as a network login.  
            If the credentials are not valid, throws a PDSAImpersonationException
            </summary>
            <param name="userName">A valid domain user name</param>
            <param name="password">A valid domain user password</param>
            <param name="domain">A valid domain name</param>
        </member>
        <member name="M:PDSA.Common.PDSAUserIdentity.Logon(System.String,System.String,System.String,PDSA.Common.PDSAImpersonationType)">
            <summary>
            Validates the user name, password and domain credentials for a PDSAImpersonationType.  
            If the credentials are not valid, throws a PDSAImpersonationException
            </summary>
            <param name="userName">A valid domain user name</param>
            <param name="password">A valid domain user password</param>
            <param name="domain">A valid domain name</param>
            <param name="type">A PDSAImpersonationType enum</param>
        </member>
        <member name="M:PDSA.Common.PDSAUserIdentity.Impersonate">
            <summary>
            After logon, starts a new impersonation context.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAUserIdentity.Undo">
            <summary>
            Ends the impersonation context and reverts to the previous identity.
            </summary>
        </member>
        <member name="M:PDSA.Common.PDSAUserIdentity.GetIdentity(System.String,System.String,System.String)">
            <summary>
            Creates a new PDSAUserIdentity instance, authenticates using the credentials
            passed in, starts a new impersonation context and returns the instance.
            </summary>
            <param name="userName">string user name to impersonate</param>
            <param name="password">string password to authenticate</param>
            <param name="domain">string domain name to authenticate</param>
            <returns>A PDSAUserIdentity object</returns>
        </member>
        <member name="M:PDSA.Common.PDSAUserIdentity.GetUserName">
            <summary>
            Gets the current user name
            </summary>
            <returns>The current user name or blank if it can not be determined</returns>
        </member>
        <member name="M:PDSA.Common.PDSAUserIdentity.GetDomainName">
            <summary>
            Gets the current user domain name
            </summary>
            <returns>The current user's domain name or blank if it can not be determined</returns>
        </member>
        <member name="M:PDSA.Common.PDSAUserIdentity.GetUserNameWithNoDomain">
            <summary>
            Returns a user name without the Domain name
            </summary>
            <returns>The current user name or blank if it can not be determined</returns>
        </member>
        <member name="T:PDSA.Web.MVC.HtmlExtensions">
            <summary>
            Class with some extra HTML Helpers for MVC
            </summary>
        </member>
        <member name="T:PDSA.Web.MVC.HtmlExtensions.Html5InputTypes">
            <summary>
            Enumerations for HTML 5 Input types
            </summary>
        </member>
        <member name="F:PDSA.Web.MVC.HtmlExtensions.Html5InputTypes.text">
            <summary>
            HTML 5 input type=text
            </summary>
        </member>
        <member name="F:PDSA.Web.MVC.HtmlExtensions.Html5InputTypes.color">
            <summary>
            HTML 5 input type=color
            </summary>
        </member>
        <member name="F:PDSA.Web.MVC.HtmlExtensions.Html5InputTypes.date">
            <summary>
            HTML 5 input type=date
            </summary>
        </member>
        <member name="F:PDSA.Web.MVC.HtmlExtensions.Html5InputTypes.datetime">
            <summary>
            HTML 5 input type=datetime
            </summary>
        </member>
        <member name="F:PDSA.Web.MVC.HtmlExtensions.Html5InputTypes.email">
            <summary>
            HTML 5 input type=email
            </summary>
        </member>
        <member name="F:PDSA.Web.MVC.HtmlExtensions.Html5InputTypes.month">
            <summary>
            HTML 5 input type=month
            </summary>
        </member>
        <member name="F:PDSA.Web.MVC.HtmlExtensions.Html5InputTypes.number">
            <summary>
            HTML 5 input type=number
            </summary>
        </member>
        <member name="F:PDSA.Web.MVC.HtmlExtensions.Html5InputTypes.password">
            <summary>
            HTML 5 input type=password
            </summary>
        </member>
        <member name="F:PDSA.Web.MVC.HtmlExtensions.Html5InputTypes.range">
            <summary>
            HTML 5 input type=range
            </summary>
        </member>
        <member name="F:PDSA.Web.MVC.HtmlExtensions.Html5InputTypes.search">
            <summary>
            HTML 5 input type=search
            </summary>
        </member>
        <member name="F:PDSA.Web.MVC.HtmlExtensions.Html5InputTypes.tel">
            <summary>
            HTML 5 input type=tel
            </summary>
        </member>
        <member name="F:PDSA.Web.MVC.HtmlExtensions.Html5InputTypes.time">
            <summary>
            HTML 5 input type=time
            </summary>
        </member>
        <member name="F:PDSA.Web.MVC.HtmlExtensions.Html5InputTypes.url">
            <summary>
            HTML 5 input type=url
            </summary>
        </member>
        <member name="F:PDSA.Web.MVC.HtmlExtensions.Html5InputTypes.week">
            <summary>
            HTML 5 input type=week
            </summary>
        </member>
        <member name="M:PDSA.Web.MVC.HtmlExtensions.SubmitButton(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
            <summary>
            Bootstrap Submit Button Helper
            </summary>
            <param name="htmlHelper">The helper</param>
            <param name="buttonText">The text for the button</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
            <returns>An HTML input type='submit' with the appropriate properties set.</returns>
        </member>
        <member name="M:PDSA.Web.MVC.HtmlExtensions.SubmitButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Bootstrap Submit Button Helper
            </summary>
            <param name="htmlHelper">The helper</param>
            <param name="buttonText">The text for the button</param>
            <param name="id">The id for the button</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
            <returns>An HTML input type='submit' with the appropriate properties set.</returns>
        </member>
        <member name="M:PDSA.Web.MVC.HtmlExtensions.SubmitButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Bootstrap Submit Button Helper
            </summary>
            <param name="htmlHelper">The helper</param>
            <param name="buttonText">The text for the button</param>
            <param name="id">The id for the button</param>
            <param name="isDisabled">Set to true if you want the button disabled</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
            <returns>An HTML input type='submit' with the appropriate properties set.</returns>
        </member>
        <member name="M:PDSA.Web.MVC.HtmlExtensions.SubmitButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Boolean,System.String,System.Object)">
            <summary>
            Bootstrap Submit Button Helper
            </summary>
            <param name="htmlHelper">The helper</param>
            <param name="buttonText">The text for the button</param>
            <param name="id">The id for the button</param>
            <param name="isDisabled">Set to true if you want the button disabled</param>
            <param name="btnClass">The bootstrap 'btn-' class to use for this button</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
            <returns>An HTML input type='submit' with the appropriate properties set.</returns>
        </member>
        <member name="M:PDSA.Web.MVC.HtmlExtensions.CheckBoxBootstrapFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.String,System.Object)">
            <summary>
            Bootstrap and HTML 5 Check Box.
            </summary>
            <typeparam name="TModel">The type of the Model</typeparam>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="expression">An expression that identifies the object that contains the properties to render.</param>
            <param name="id">UNUSED: The 'id' attribute name to set.</param>
            <param name="text">The text to display next to this check box.</param>
            <param name="htmlAttributes">Any additional HTML attributes</param>
            <returns>An HTML checkbox with the appropriate type set.</returns>
        </member>
        <member name="M:PDSA.Web.MVC.HtmlExtensions.CheckBoxBootstrapFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Bootstrap and HTML 5 Check Box in a Button Helper.
            This helper assumes you have added the appropriate CSS to style this check box.
            </summary>
            <typeparam name="TModel">The type of the Model</typeparam>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="expression">An expression that identifies the object that contains the properties to render.</param>
            <param name="id">The 'id' attribute name to set.</param>
            <param name="text">The text to display next to this check box.</param>
            <param name="isChecked">UNUSED: Whether or not to set the 'checked' attribute on this check box.</param>
            <param name="isAutoFocus">Whether or not to set the 'autofocus' attribute on this check box.</param>
            <param name="useInline">Whether or not to use 'checkbox-inline' for the Bootstrap class.</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
            <returns>An HTML checkbox with the appropriate type set.</returns>
        </member>
        <member name="M:PDSA.Web.MVC.HtmlExtensions.CheckBoxButtonFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.String,System.Object)">
            <summary>
            Bootstrap and HTML 5 Check Box in a Button Helper.
            This helper assumes you have added the appropriate CSS to style this check box.
            </summary>
            <typeparam name="TModel">The type of the Model</typeparam>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="expression">An expression that identifies the object that contains the properties to render.</param>
            <param name="id">UNUSED: The 'id' attribute name to set.</param>
            <param name="text">The text to display next to this check box.</param>
            <param name="htmlAttributes">Any additional HTML attributes</param>
            <returns>An HTML checkbox with the appropriate type set.</returns>
        </member>
        <member name="M:PDSA.Web.MVC.HtmlExtensions.CheckBoxButtonFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.String,System.String,System.Object)">
            <summary>
            Bootstrap and HTML 5 Check Box in a Button Helper.
            This helper assumes you have added the appropriate CSS to style this check box.
            </summary>
            <typeparam name="TModel">The type of the Model</typeparam>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="expression">An expression that identifies the object that contains the properties to render.</param>
            <param name="id">UNUSED: The 'id' attribute name to set.</param>
            <param name="text">The text to display next to this check box.</param>
            <param name="btnClass">The Bootstrap 'btn-' class to add to this check box.</param>
            <param name="htmlAttributes">Any additional HTML attributes</param>
            <returns>An HTML checkbox with the appropriate type set.</returns>
        </member>
        <member name="M:PDSA.Web.MVC.HtmlExtensions.CheckBoxButtonFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Bootstrap and HTML 5 Check Box in a Button Helper.
            This helper assumes you have added the appropriate CSS to style this check box.
            </summary>
            <typeparam name="TModel">The type of the Model</typeparam>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="expression">An expression that identifies the object that contains the properties to render.</param>
            <param name="id">UNUSED: The 'id' attribute name to set.</param>
            <param name="text">The text to display next to this check box.</param>
            <param name="btnClass">The Bootstrap 'btn-' class to add to this check box.</param>
            <param name="isChecked">Whether or not to set the 'checked' attribute on this check box.</param>
            <param name="isAutoFocus">Whether or not to set the 'autofocus' attribute on this check box.</param>
            <param name="useInline">Whether or not to use 'checkbox-inline' for the Bootstrap class.</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
            <returns>An HTML checkbox with the appropriate type set.</returns>
        </member>
        <member name="M:PDSA.Web.MVC.HtmlExtensions.RadioButtonBootstrapFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Bootstrap and HTML 5 Radio Button.
            </summary>
            <typeparam name="TModel">The type of the Model</typeparam>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="expression">An expression that identifies the object that contains the properties to render.</param>
            <param name="id">UNUSED: The 'id' attribute name to set.</param>
            <param name="name">The 'name' attribute to set.</param>
            <param name="text">The text to display next to this radio button.</param>
            <param name="value">The 'value' attribute to set.</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
            <returns>An HTML radio button with the appropriate type set.</returns>
        </member>
        <member name="M:PDSA.Web.MVC.HtmlExtensions.RadioButtonBootstrapFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Bootstrap and HTML 5 Radio Button in a Button Helper.
            This helper assumes you have added the appropriate CSS to style this radio button.
            </summary>
            <typeparam name="TModel">The type of the Model</typeparam>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="expression">An expression that identifies the object that contains the properties to render.</param>
            <param name="id">UNUSED: The 'id' attribute name to set.</param>
            <param name="name">The 'name' attribute to set.</param>
            <param name="text">The text to display next to this radio button.</param>
            <param name="value">The 'value' attribute to set.</param>
            <param name="isChecked">Whether or not to set the 'checked' attribute on this radio button.</param>
            <param name="isAutoFocus">Whether or not to set the 'autofocus' attribute on this radio button.</param>
            <param name="useInline">Whether or not to use 'radio-inline' for the Bootstrap class.</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
            <returns>An HTML radio button with the appropriate type set.</returns>
        </member>
        <member name="M:PDSA.Web.MVC.HtmlExtensions.RadioButtonInButtonFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Bootstrap and HTML 5 Radio Button in a Button Helper.
            This helper assumes you have added the appropriate CSS to style this radio button.
            </summary>
            <typeparam name="TModel">The type of the Model</typeparam>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="expression">An expression that identifies the object that contains the properties to render.</param>
            <param name="id">UNUSED: The 'id' attribute name to set.</param>
            <param name="name">The 'name' attribute to set.</param>
            <param name="text">The text to display next to this radio button.</param>
            <param name="value">The 'value' attribute to set.</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
            <returns>An HTML radio button with the appropriate type set.</returns>
        </member>
        <member name="M:PDSA.Web.MVC.HtmlExtensions.RadioButtonInButtonFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Bootstrap and HTML 5 Radio Button in a Button Helper.
            This helper assumes you have added the appropriate CSS to style this radio button.
            </summary>
            <typeparam name="TModel">The type of the Model</typeparam>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="expression">An expression that identifies the object that contains the properties to render.</param>
            <param name="id">UNUSED: The 'id' attribute name to set.</param>
            <param name="name">The 'name' attribute to set.</param>
            <param name="text">The text to display next to this radio button.</param>
            <param name="value">The 'value' attribute to set.</param>
            <param name="btnClass">The Bootstrap 'btn-' class to add to this check box.</param>
            <param name="isChecked">Whether or not to set the 'checked' attribute on this radio button.</param>
            <param name="isAutoFocus">Whether or not to set the 'autofocus' attribute on this radio button.</param>
            <param name="useInline">Whether or not to use 'radio-inline' for the Bootstrap class.</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
            <returns>An HTML radio button with the appropriate type set.</returns>
        </member>
        <member name="M:PDSA.Web.MVC.HtmlExtensions.TextBox5For``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
            <summary>
            Bootstrap and HTML 5 Text Box Helper
            </summary>
            <typeparam name="TModel">The HTML helper type</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="expression">An expression that identifies the object that contains the properties to render.</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
            <returns>An HTML input element with the appropriate type set.</returns>
        </member>
        <member name="M:PDSA.Web.MVC.HtmlExtensions.TextBox5For``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},PDSA.Web.MVC.HtmlExtensions.Html5InputTypes,System.Object)">
            <summary>
            Bootstrap and HTML 5 Text Box Helper
            </summary>
            <typeparam name="TModel">The type of the model</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="expression">An expression that identifies the object that contains the properties to render.</param>
            <param name="type">The text type to set (text, password, date, tel, email, etc.).</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
            <returns>An HTML input element with the appropriate type set.</returns>
        </member>
        <member name="M:PDSA.Web.MVC.HtmlExtensions.TextBox5For``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
            <summary>
            Bootstrap and HTML 5 Text Box Helper
            </summary>
            <typeparam name="TModel">The type of the model</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="expression">An expression that identifies the object that contains the properties to render.</param>
            <param name="title">The HTML 5 'title' attribute to set.</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
            <returns>An HTML input element with the appropriate type set.</returns>
        </member>
        <member name="M:PDSA.Web.MVC.HtmlExtensions.TextBox5For``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},PDSA.Web.MVC.HtmlExtensions.Html5InputTypes,System.String,System.Object)">
            <summary>
            Bootstrap and HTML 5 Text Box Helper
            </summary>
            <typeparam name="TModel">The type of the model</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="expression">An expression that identifies the object that contains the properties to render.</param>
            <param name="type">The text type to set (text, password, date, tel, email, etc.).</param>
            <param name="title">The HTML 5 'title' attribute to set.</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
            <returns>An HTML input element with the appropriate type set.</returns>
        </member>
        <member name="M:PDSA.Web.MVC.HtmlExtensions.TextBox5For``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Bootstrap and HTML 5 Text Box Helper
            </summary>
            <typeparam name="TModel">The type of the model</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="expression">An expression that identifies the object that contains the properties to render.</param>
            <param name="title">The HTML 5 'title' attribute to set.</param>
            <param name="isRequired">Whether or not to set the 'required' attribute on this text box.</param>
            <param name="isAutoFocus">Whether or not to set the 'autofocus' attribute on this text box.</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
            <returns>An HTML input element with the appropriate type set.</returns>
        </member>
        <member name="M:PDSA.Web.MVC.HtmlExtensions.TextBox5For``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},PDSA.Web.MVC.HtmlExtensions.Html5InputTypes,System.String,System.String,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Bootstrap and HTML 5 Text Box Helper
            </summary>
            <typeparam name="TModel">The type of the model</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="htmlHelper">The HTML helper instance that this method extends.</param>
            <param name="expression">An expression that identifies the object that contains the properties to render.</param>
            <param name="type">The text type to set (text, password, date, tel, email, etc.).</param>
            <param name="title">The HTML 5 'title' attribute to set.</param>
            <param name="placeholder">The HTML 5 'placeholder' attribute to set.</param>
            <param name="isRequired">Whether or not to set the 'required' attribute on this text box.</param>
            <param name="isAutoFocus">Whether or not to set the 'autofocus' attribute on this text box.</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
            <returns>An HTML input element with the appropriate type set.</returns>
        </member>
        <member name="M:PDSA.Web.MVC.HtmlExtensions.GetHtmlAttributes(System.Object)">
            <summary>
            Break the HTML Attributes apart and put into key='value' pairs for adding to an HTML element.
            </summary>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
            <returns>A string with the key='value' pairs</returns>
        </member>
        <member name="T:PDSA.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.msgBusinessRulesFailed">
            <summary>
              Looks up a localized string similar to Business rules failed in {0}.
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.msgCantConvert">
            <summary>
              Looks up a localized string similar to Can&apos;t Convert Value {0) to Data Type {0}..
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.msgInvalidDate">
            <summary>
              Looks up a localized string similar to {0} is an invalid date. {0} must be a valid date and greater than or equal to {1} and less than or equal to {2}..
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.msgInvalidMinMax">
            <summary>
              Looks up a localized string similar to {0} must be greater than or equal to {1} and less than or equal to {2}..
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.msgInvalidNumeric">
            <summary>
              Looks up a localized string similar to {0} is an invalid number. {0} must be a numeric value and greater than or equal to {1} and less than or equal to {2}..
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.msgMaxLength">
            <summary>
              Looks up a localized string similar to {0} can only be {1} characters long..
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.msgMaxValue">
            <summary>
              Looks up a localized string similar to {0} must be less than or equal to {1}..
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.msgMinLength">
            <summary>
              Looks up a localized string similar to {0} must be greater than or equal to {1} characters long..
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.msgMinValue">
            <summary>
              Looks up a localized string similar to {0} must be greater than or equal to {1}..
            </summary>
        </member>
        <member name="P:PDSA.Properties.Resources.msgMustBeFilledIn">
            <summary>
              Looks up a localized string similar to {0} must be filled in..
            </summary>
        </member>
        <member name="T:PDSA.Provider.PDSAConfigProviderBase">
            <summary>
            The base class for all Providers Configuration Class
            </summary>
        </member>
        <member name="P:PDSA.Provider.PDSAConfigProviderBase.ProviderName">
            <summary>
            Get/Set the 'providerName' attribute from the configuration file
            </summary>
        </member>
        <member name="P:PDSA.Provider.PDSAConfigProviderBase.Type">
            <summary>
            Get/Set the 'type' attribute from the configuration file
            </summary>
        </member>
        <member name="P:PDSA.Provider.PDSAConfigProviderBase.Assembly">
            <summary>
            Get/Set the 'assembly' attribute from the configuration file
            </summary>
        </member>
        <member name="T:PDSA.Provider.PDSAProviderBase">
            <summary>
            Base class for all PDSA Providers
            </summary>
        </member>
        <member name="M:PDSA.Provider.PDSAProviderBase.#ctor">
            <summary>
            Constructor for PDSAProviderBase
            </summary>
        </member>
        <member name="P:PDSA.Provider.PDSAProviderBase.ClassName">
            <summary>
            Get/Set the name of this class
            </summary>
        </member>
        <member name="P:PDSA.Provider.PDSAProviderBase.ErrorMessage">
            <summary>
            Get/Set the error message returned from the database operation
            </summary>
        </member>
        <member name="P:PDSA.Provider.PDSAProviderBase.LastExceptionObject">
            <summary>
            Get/Set the last exception thrown on the current provider
            </summary>
        </member>
        <member name="P:PDSA.Provider.PDSAProviderBase.MessageLanguage">
            <summary>
            Get/Set the Message Language of this class
            </summary>
        </member>
        <member name="M:PDSA.Provider.PDSAProviderBase.GetCurrentUser">
            <summary>
            Attempts to call Environment.UserName to retrieve the current user.
            Failing that a call to WindowsIdentity.GetCurrent().Name will be tried. If these fail, then "N/A" will be returned.
            </summary>
            <returns>The current user or "N/A" if can't be retrieved</returns>
        </member>
        <member name="M:PDSA.Provider.PDSAProviderBase.GetMachineName">
            <summary>
            Returns the current machine you are running on by calling Environment.MachineName. If this returns nothing or an exception, then calls System.Net.Dns.GetHostName()
            </summary>
            <returns>The current machine name</returns>
        </member>
        <member name="P:PDSA.Provider.PDSAProviderBase.ValueCache">
            <summary>
            Get a Value from the Cache
            </summary>
        </member>
        <member name="M:PDSA.Provider.PDSAProviderBase.ResetCache">
            <summary>
            Reset the cache
            </summary>
        </member>
        <member name="M:PDSA.Provider.PDSAProviderBase.AddOrUpdateCache(System.String,System.Object)">
            <summary>
            Add a value to the cache or update an existing one into the cache
            </summary>
            <param name="key">A key name to identify the value</param>
            <param name="value">A Value</param>
        </member>
        <member name="M:PDSA.Provider.PDSAProviderBase.GetValueFromCache(System.String)">
            <summary>
            Get a value from a cache based on the key
            </summary>
            <param name="key">The unique key of the value</param>
            <returns>A value</returns>
        </member>
        <member name="M:PDSA.Provider.PDSAProviderBase.RemoveProviderFromCache(System.String)">
            <summary>
            Remove a provider from the cache based on the unique key
            </summary>
            <param name="key">The unique identifier of the provider</param>
        </member>
        <member name="T:PDSA.Provider.PDSAProviderManagerBase">
            <summary>
            Base class for all PDSA Provider Manager Classes
            </summary>
        </member>
        <member name="M:PDSA.Provider.PDSAProviderManagerBase.#ctor">
            <summary>
            Constructor for PDSAProviderManagerBase class
            </summary>
        </member>
        <member name="P:PDSA.Provider.PDSAProviderManagerBase.ProviderCache">
            <summary>
            Get a Single Provider from the Cache
            </summary>
        </member>
        <member name="P:PDSA.Provider.PDSAProviderManagerBase.ProvidersCache">
            <summary>
            Get a Providers Collection from the Cache
            </summary>
        </member>
        <member name="P:PDSA.Provider.PDSAProviderManagerBase.ClassName">
            <summary>
            Get/Set the name of this class
            </summary>
        </member>
        <member name="M:PDSA.Provider.PDSAProviderManagerBase.ResetCache">
            <summary>
            Reset the cache
            </summary>
        </member>
        <member name="M:PDSA.Provider.PDSAProviderManagerBase.AddOrUpdateCache(System.String,System.Object)">
            <summary>
            Add a provider to the cache or update an existing one into the cache
            </summary>
            <param name="key">A key name to identify this provider</param>
            <param name="provider">The PDSA Provider object</param>
        </member>
        <member name="M:PDSA.Provider.PDSAProviderManagerBase.GetProviderFromCache(System.String)">
            <summary>
            Get a provider from a cache based on the key
            </summary>
            <param name="key">The unique identifier of the provider</param>
            <returns>A provider object</returns>
        </member>
        <member name="M:PDSA.Provider.PDSAProviderManagerBase.RemoveProviderFromCache(System.String)">
            <summary>
            Remove a provider from the cache based on the unique key
            </summary>
            <param name="key">The unique identifier of the provider</param>
        </member>
        <member name="M:PDSA.Provider.PDSAProviderManagerBase.ResetCollectionCache">
            <summary>
            Reset the Providers Collection cache
            </summary>
        </member>
        <member name="M:PDSA.Provider.PDSAProviderManagerBase.AddOrUpdateCollectionCache(System.String,System.Object)">
            <summary>
            Add a provider collection to the cache or update an existing one into the cache
            </summary>
            <param name="key">A key name to identify this provider</param>
            <param name="providers">The PDSA Provider Collection object</param>
        </member>
        <member name="M:PDSA.Provider.PDSAProviderManagerBase.GetProviderCollectionFromCache(System.String)">
            <summary>
            Get a provider collection from a cache based on the key
            </summary>
            <param name="key">The unique identifier of the providers collection</param>
            <returns>A provider collection object</returns>
        </member>
        <member name="M:PDSA.Provider.PDSAProviderManagerBase.RemoveProviderCollectionFromCache(System.String)">
            <summary>
            Remove a provider collection from the cache based on the unique key
            </summary>
            <param name="key">The unique identifier of the provider collection</param>
        </member>
        <member name="T:PDSA.ServiceModel.PDSAServiceResponseBase">
            <summary>
            The base class for all service responses
            </summary>
        </member>
        <member name="M:PDSA.ServiceModel.PDSAServiceResponseBase.#ctor">
            <summary>
            Default constructor for the PDSAServiceResponseBase class
            </summary>
        </member>
        <member name="P:PDSA.ServiceModel.PDSAServiceResponseBase.Status">
            <summary>
            Get/Set the Status of the last operation
            </summary>
        </member>
        <member name="P:PDSA.ServiceModel.PDSAServiceResponseBase.FriendlyErrorMessage">
            <summary>
            Get/Set the Friendly Error Message to show to the user
            </summary>
        </member>
        <member name="P:PDSA.ServiceModel.PDSAServiceResponseBase.ErrorMessage">
            <summary>
            The actual .NET error message returned from the last service operation
            </summary>
        </member>
        <member name="P:PDSA.ServiceModel.PDSAServiceResponseBase.ErrorMessageExtended">
            <summary>
            The full .ToString() of the .NET error message
            </summary>
        </member>
        <member name="P:PDSA.ServiceModel.PDSAServiceResponseBase.RowsAffected">
            <summary>
            The number of rows affected by the last service operation
            </summary>
        </member>
        <member name="P:PDSA.ServiceModel.PDSAServiceResponseBase.TotalPages">
            <summary>
            The number of pages for this record set
            </summary>
        </member>
        <member name="T:PDSA.ServiceModel.PDSAServiceStatus">
            <summary>
            Enumeration for what happened when calling a Service
            </summary>
        </member>
        <member name="F:PDSA.ServiceModel.PDSAServiceStatus.Unknown">
            <summary>
            Default value for Service Status
            </summary>
        </member>
        <member name="F:PDSA.ServiceModel.PDSAServiceStatus.Success">
            <summary>
            Service Succeeded
            </summary>
        </member>
        <member name="F:PDSA.ServiceModel.PDSAServiceStatus.Exception">
            <summary>
            An exception occurred calling the service
            </summary>
        </member>
        <member name="F:PDSA.ServiceModel.PDSAServiceStatus.NoRecords">
            <summary>
            No records were returned or affected by the last call
            </summary>
        </member>
        <member name="F:PDSA.ServiceModel.PDSAServiceStatus.NoMorePages">
            <summary>
            No more pages were found
            </summary>
        </member>
        <member name="F:PDSA.ServiceModel.PDSAServiceStatus.PrimaryKeyNotFound">
            <summary>
            The primary key you were searching for was not found
            </summary>
        </member>
        <member name="F:PDSA.ServiceModel.PDSAServiceStatus.ValidationFailed">
            <summary>
            A business rule validation failed
            </summary>
        </member>
        <member name="F:PDSA.ServiceModel.PDSAServiceStatus.NotAuthenticated">
            <summary>
            The user is not authenticated
            </summary>
        </member>
        <member name="T:PDSA.UI.PDSAMessageListItemType">
            <summary>
            Defines the types of messages that could be displayed on an add/edit/delete screen
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSAMessageListItemType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSAMessageListItemType.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSAMessageListItemType.Information">
            <summary>
            Information
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSAMessageListItemType.Validation">
            <summary>
            Validation
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSAMessageListItemType.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="T:PDSA.UI.PDSASortExpression">
            <summary>
            Class for all ASP.NET data grids to handle sorting columns
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSASortExpression.SortOn">
            <summary>
            Gets/set the Sort Expression from the grid property.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSASortExpression.Direction">
            <summary>
            Gets/set the Sort Direction Ascending or Descending.
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSASortExpression.GetExpression">
            <summary>
            Returns the sort expression
            </summary>
            <returns>The sort expression string</returns>
        </member>
        <member name="T:PDSA.UI.PDSASortExpressionDirection">
            <summary>
            Sort Expression Direction
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSASortExpressionDirection.Ascending">
            <summary>
            Ascending
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSASortExpressionDirection.Descending">
            <summary>
            Descending
            </summary>
        </member>
        <member name="T:PDSA.UI.PDSAUIState">
            <summary>
            Enumeration for the state of the UI
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSAUIState.Unknown">
            <summary>
            Place UI into Normal Mode
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSAUIState.Normal">
            <summary>
            Place UI into Normal Mode
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSAUIState.NoRecords">
            <summary>
            No Records
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSAUIState.ListOnly">
            <summary>
            Place UI into List Mode
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSAUIState.ListAndDetail">
            <summary>
            Place UI into List and the Detail Mode
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSAUIState.Add">
            <summary>
            Place UI into Add mode
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSAUIState.Edit">
            <summary>
            Places UI into Edit mode
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSAUIState.DisplayingDataProgrammatically">
            <summary>
            Places UI into Displaying Data Programmatically mode
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSAUIState.Exception">
            <summary>
            Places UI into Exception mode
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSAUIState.ValidationFailed">
            <summary>
            Places UI into Validation Rule Failure mode
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSAUIState.Delete">
            <summary>
            Places UI into Delete mode
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSAUIState.ViewOnly">
            <summary>
            Places UI into ViewOnly mode
            </summary>
        </member>
        <member name="T:PDSA.UI.PDSAUIObjectBase">
            <summary>
            A Base Class for any UI Object. This class implements the INotifyPropertyChanged event
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAUIObjectBase.#ctor">
            <summary>
            The base constructor for the PDSAUIObjectBase class
            </summary>
        </member>
        <member name="E:PDSA.UI.PDSAUIObjectBase.PropertyChanged">
            <summary>
            The PropertyChanged Event to raise to any UI object
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAUIObjectBase.RaisePropertyChanged(System.String)">
            <summary>
            The PropertyChanged Event to raise to any UI object
            </summary>
            <param name="propertyName">The property name that is changing</param>
        </member>
        <member name="T:PDSA.UI.PDSAUIViewModelBase">
            <summary>
            This class is used as a View Model base class for all View Models that add/edit/delete data
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelBase.#ctor">
            <summary>
            Base constructor for the PDSAUIViewModelBase. Calls the Constructor for the PDSAUIViewModelReadOnlyBase
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.IsSaveVisible">
            <summary>
            Get/Set the state of a "Save" UI IsVisible property
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.IsDeleteVisible">
            <summary>
            Get/Set the state of a "Delete" UI IsVisible property
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.IsCancelVisible">
            <summary>
            Get/Set the state of a "Cancel" UI IsVisible property
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.IsDetailAreaVisible">
            <summary>
            Get/Set the state of a "Detail" UI IsVisible property
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.IsSearchAreaVisible">
            <summary>
            Get/Set the state of a "Seach" UI IsVisible property
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.IsAddVisible">
            <summary>
            Get/Set the state of a "Add" UI IsVisible property
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.IsValidationVisible">
            <summary>
            Get/Set the state of a "Validation" UI IsVisible property
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.IsSaveEnabled">
            <summary>
            Get/Set the state of a "Save" UI IsEnabled property
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.IsDeleteEnabled">
            <summary>
            Get/Set the state of a "Delete" UI IsEnabled property
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.IsCancelEnabled">
            <summary>
            Get/Set the state of a "Cancel" UI IsEnabled property
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.ValidationRuleMessages">
            <summary>
            The last validation messages generated
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.IsDetailAreaEnabled">
            <summary>
            Get/Set the state of a "Detail" UI IsEnabled property
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.IsSearchAreaEnabled">
            <summary>
            Get/Set the state of a "Seach" UI IsEnabled property
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.IsAddEnabled">
            <summary>
            Get/Set the state of a "Add" UI IsEnabled property
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.IsValidationEnabled">
            <summary>
            Get/Set the state of a "Validation" UI IsEnabled property
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.IsAddMode">
            <summary>
            Get/Set the state of a "Add Mode"
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.IsEditMode">
            <summary>
            Get/Set the state of a "Edit Mode"
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.IsDeleteMode">
            <summary>
            Get/Set the state of a "Delete Mode"
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.IsPKFieldReadOnly">
            <summary>
            Get/Set the whether or not the Primary Key Field is Read Only.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.IsPrimaryKeyAutoNumber">
            <summary>
            Get/Set the whether or not the Primary Key Field is an Auto-Number
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.ValidationFailed">
            <summary>
            Get/Set the state of whether or not the validation failed
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.AddToolTip">
            <summary>
            Get/Set the message of the tooltip for a Add UI command
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.EditToolTip">
            <summary>
            Get/Set the message of the tooltip for a Edit UI command
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.DeleteToolTip">
            <summary>
            Get/Set the message of the tooltip for a Delete UI command
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.SaveToolTip">
            <summary>
            Get/Set the message of the tooltip for a Save UI command
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.CancelToolTip">
            <summary>
            Get/Set the message of the tooltip for a Cancel UI command
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.ValidationToolTip">
            <summary>
            Get/Set the message of the tooltip for a Validation UI command
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.SearchToolTip">
            <summary>
            Get/Set the message of the tooltip for searching
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.ResetSearchToolTip">
            <summary>
            Get/Set the message of the tooltip for searching
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.XmlAuditString">
            <summary>
            Get/Set the XML fragment generated from audit tracking in data objects
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.SqlString">
            <summary>
            Get/Set the last SQL statement submitted to the back end data store.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.GroupHeader">
            <summary>
            Get/Set the message for a Group UI Header
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.NoRowsAffectedMessageInsert">
            <summary>
            Get/Set the No Rows Affected Message to display when Insert returns Zero rows.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.NoRowsAffectedMessageUpdate">
            <summary>
            Get/Set the No Rows Affected Message to display when Update returns Zero rows.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.NoRowsAffectedMessageDelete">
            <summary>
            Get/Set the No Rows Affected Message to display when Delete returns Zero rows.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.DeleteMessage">
            <summary>
            Get/Set the message used when Deleting a Record
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.SearchCriteriaMessage">
            <summary>
            Get/Set the message displayed for Search Criteria Message
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.ActionsColumn">
            <summary>
            Get/Set the message displayed for Actions Column Message
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.PageHeader">
            <summary>
            Get/Set the message displayed for Page Header
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelBase.Init">
            <summary>
            Initialize the View Model
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelBase.ValidationRuleFailures">
            <summary>
            Get/Set the collection of PDSAValidationRule objects that are the validation errors to report back to the user
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelBase.HandleValidationMessages(PDSA.Validation.PDSAValidationException)">
            <summary>
            Sets the ValidationRuleMessages property to the BusinesRuleMessages that have failed and sets the ValidationRulesFailure property with the actual Business Rule Objects that failed.
            </summary>
            <param name="ex">A PDSAValidationException object</param>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelBase.SetViewStateMode">
            <summary>
            Sets the state of all UI properties based on the UIState property.
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelBase.SetViewStateMode(PDSA.UI.PDSAUIState)">
            <summary>
            Sets the state of all UI properties based on the PDSAUIState enumeration passed in
            </summary>
            <param name="mode">A PDSAUIState Enumeration value</param>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelBase.DataSave">
            <summary>
            Saves (Insert/Update) based on the UI State.
            Assumes you have already filled in your 'DetailData' property with the data you wish to Insert/Update
            Calls the DataInsert() if in 'Add' mode. Calls DataUpdate() if in 'Edit' mode.
            If any validation exceptions occur, you can bind to the (string)ValidationRuleMessages or (PDSAValidationRules)ValidationRuleFailures properties
            If any other exceptions occur, you can bind to the (string)LastExceptionMessage or (Exception)LastException properties
            </summary>
            <returns>True if successful, False if not</returns>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelBase.DataInsert">
            <summary>
            Call this method to insert your data
            </summary>
            <returns>True if successful, False if not</returns>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelBase.DataUpdate">
            <summary>
            Call this method to update your data
            </summary>
            <returns>True if successful, False if not</returns>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelBase.ResetSearch">
            <summary>
            Reset Search
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelBase.HandleValidationMessages(System.String)">
            <summary>
            Sets the ValidationRuleMessages property. You would most likely override this method to do some "UI Thing" to display those messages in response to that property being set.
            </summary>
            <param name="messages">The messages to display</param>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelBase.HandleExceptionMessages(System.Exception)">
            <summary>
            Sets an exception object into the LastException property of this ViewModel class
            </summary>
            <param name="ex">An exception object</param>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelBase.HandleExceptionMessages(System.String)">
            <summary>
            Sets an exception message into the LastExceptionMessage property of this ViewModel class 
            </summary>
            <param name="message">The message to set</param>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelBase.ResetMessages">
            <summary>
            Call this method after you have changed the View Model messages in the PDSAUIViewModelMessages class.
            All the messages will be reset.
            NOTE: You should set the "RecordName" and "RecordNamePlural" prior to calling this method.
            </summary>
        </member>
        <member name="T:PDSA.UI.PDSAUIViewModelMessages">
            <summary>
            This class returns the standard view model messages.
            You may override any of the messages just be setting their values one time in your application.
            The messages are in the following format:
              PDSAUIViewModelMessages.NoRowsAffectedMessageUpdateMessage = "A MESSAGE";
              PDSAUIViewModelMessages.NoRowsAffectedMessageDeleteMessage = "A MESSAGE";
              etc.
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelMessages.#cctor">
            <summary>
            Constructor for PDSAUIViewModelMessages class
            Each message can contain a {0} which will be replaced with either the "RecordName" or "RecordNamePlural" property.
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelMessages.InitMessages">
            <summary>
            Reinitialize all messages to English default values
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.RecordNameMessage">
            <summary>
            Get/Set the RecordName Message.
            The default is "Record"
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.RecordNamePluralMessage">
            <summary>
            Get/Set the RecordNamePlural Message.
            The default is "Records"
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.NoRowsAffectedMessageInsertMessage">
            <summary>
            Get/Set the NoRowsAffectedMessageInsert Message.
            The default is "{0} was not inserted. Possible Reasons: The {0} you were trying to insert was already inserted, or an error occurred when inserting."
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.NoRowsAffectedMessageUpdateMessage">
            <summary>
            Get/Set the NoRowsAffectedMessageUpdate Message.
            The default is "This record was not updated. Possible Reasons: The record you were trying to update was deleted or another user updated the record before you did."
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.NoRowsAffectedMessageDeleteMessage">
            <summary>
            Get/Set the NoRowsAffectedMessageDelete Message.
            The default is "This record was not deleted. Possible Reasons: The record you were trying to delete was already deleted or another user updated the record before you attempted to delete it."
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.GroupHeaderMessage">
            <summary>
            Get/Set the GroupHeader Message.
            The default is "Information"
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.AddToolTipMessage">
            <summary>
            Get/Set the AddToolTip Message.
            The default is "Add New {0}"
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.EditToolTipMessage">
            <summary>
            Get/Set the EditToolTip Message.
            The default is "Edit {0}"
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.DeleteToolTipMessage">
            <summary>
            Get/Set the DeleteToolTip Message.
            The default is "Delete {0}"
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.SaveToolTipMessage">
            <summary>
            Get/Set the SaveToolTip Message.
            The default is "Save {0}"
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.SearchToolTipMessage">
            <summary>
            Get/Set the SearchToolTip Message.
            The default is "Search for {0}"
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.ResetSearchToolTipMessage">
            <summary>
            Get/Set the ResetSearchToolTip Message.
            The default is "Reset Search Criteria"
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.CancelToolTipMessage">
            <summary>
            Get/Set the CancelToolTip Message.
            The default is "Undo Changes"
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.ValidationToolTipMessage">
            <summary>
            Get/Set the ValidationToolTip Message.
            The default is "Validation Failures"
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.ListHeaderMessage">
            <summary>
            Get/Set the ListHeader Message.
            The default is "List of {0}"
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.SearchAreaTitleMessage">
            <summary>
            Get/Set the SearchAreaTitle Message.
            The default is "Search Criteria"
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.DetailHeaderMessage">
            <summary>
            Get/Set the DetailHeader Message.
            The default is "{0} Information"
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.ExceptionToolTipMessage">
            <summary>
            Get/Set the ExceptionToolTip Message.
            The default is "Exception Information"
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.ControlTitleMessage">
            <summary>
            Get/Set the ControlTitle Message.
            The default is ""
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.ControlToolTipMessage">
            <summary>
            Get/Set the ControlToolTip Message.
            The default is ""
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.RowCountTextMessage">
            <summary>
            Get/Set the RowCountText Message.
            The default is "Total Records:"
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.NoRecordsFoundMessage">
            <summary>
            Get/Set the NoRecordsFound Message.
            The default is "No matching {0} found."
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.DeleteMessage">
            <summary>
            Get/Set the DeleteMessage Message.
            The default is "Delete this {0}"
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.SearchCriteriaMessage">
            <summary>
            Get/Set the SearchCriteria Message.
            The default is "Search Criteria"
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.TotalRecordsMessage">
            <summary>
            Get/Set the TotalRecords.
            The default is "Total Records: "
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.ActionsColumn">
            <summary>
            Get/Set the ActionsColumn.
            The default is "Actions"
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelMessages.PageHeader">
            <summary>
            Get/Set the PageHeader.
            The default is "{0} Maintenance"
            </summary>
        </member>
        <member name="T:PDSA.UI.PDSAUIViewModelReadOnlyBase">
            <summary>
            Base class for read only View Model Classes
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelReadOnlyBase.#ctor">
            <summary>
            Base constructor for the PDSAUIViewModelReadOnlyBase class
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSAUIViewModelReadOnlyBase.mUIState">
            <summary>
            The Current UI State
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.IsPageSizeAreaVisible">
            <summary>
            Get/Set whether or not the Page Size Area is Visible
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.PDSALoginName">
            <summary>
            Get/Set the login name of the person using this class.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.RecordName">
            <summary>
            Get/Set the name of each row type being displayed or edited.  
            Used by the UI to display tooltips, such as "Add new Customer".
            <example>
            RecordName = "Customer";
            </example>
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.RecordNamePlural">
            <summary>
            Get/Set the name of each row type being displayed or edited.  
            Used by the UI to display tooltips, such as "Add new Customer".
            <example>
            RecordNamePlural = "Customers";
            </example>
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.GridPageSizes">
            <summary>
            Get/Set a collection of Grid Page Sizes. This is used on any form where you wish to show data in pages and want to allow the user to select a set of page sizes.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.SearchAreaTitle">
            <summary>
            Gets/sets the text to display as the title of the search area.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.RowCountText">
            <summary>
            Gets/sets the text to display in the row count indicator.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.SelectedGridSize">
            <summary>
            Gets/sets the page size selected by the user using the size drop-down.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.IsPagingAllowed">
            <summary>
            Gets/sets the value that determines if paging is allowed.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.NoRecordsFoundText">
            <summary>
            Gets/sets the text to display when no records are found.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.ControlToolTip">
            <summary>
            Gets/sets the tooltip to display for the form.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.ControlTitle">
            <summary>
            Gets or sets the control title
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.UserLanguage">
            <summary>
             Gets/Sets the current User Language
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.PreviousUIState">
            <summary>
            Get/Set the previous UI state
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.IsInDesignMode">
            <summary>
            Get/Set whether or not the control that invoked this class is in design mode or not
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.InAsynchCall">
            <summary>
            Get/Set whether or not the code is still making an asynchronous call to the server
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.TotalRecords">
            <summary>
            Get/Set the total records read in the last operation
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.PageSize">
            <summary>
            Get/Set the Page Size to use for displaying records in a grid
            Can't set this to a value less than 1.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.InfoMessage">
            <summary>
            Get/Set an Informational Message to Display to User
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.StatusBarMessage">
            <summary>
            Get/Set the message to display in a status bar
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.LastExceptionMessage">
            <summary>
            Get/Set the last exception message generated
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.LastException">
            <summary>
            Get/Set the last exception that occurred
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.IsListEnabled">
            <summary>
            Get/Set whether or not a list-type control on the UI is enabled
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.IsRecordCountVisible">
            <summary>
            Get/Set whether or not the Record Count is Visible on the screen
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.IsInfoMessageAreaEnabled">
            <summary>
            Get/Set whether or not an "Info Message Area" on the UI is enabled
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.IsStatusBarAreaEnabled">
            <summary>
            Get/Set whether or not the status bar area on the UI is enabled/visible
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.IsActionAreaEnabled">
            <summary>
            Get/Set whether or not an "Action Area" on the UI is enabled.
            This might be an area where action buttons such as Add or Refresh are located.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.IsExceptionEnabled">
            <summary>
            Get/Set whether or not an "Exception Area" on the UI is enabled.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.DisplayingDataProgrammatically">
            <summary>
            Get/Set whether or not your code is programatically displaying data and you don't want certain events to fire. You could set this to true while you are updating, then check the value in certain event procedures to perform or not perform the event.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.ExceptionOccurred">
            <summary>
            Get/Set whether or not an exception occurred.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.ListSelectedIndex">
            <summary>
            Get/Set the selected index on a List-Type control on the UI
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.ExceptionToolTip">
            <summary>
            Get/Set the tooltip on an Exception area on the UI
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.ListHeader">
            <summary>
            Get/Set the header to be displayed above a List-Type control
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.DetailHeader">
            <summary>
            Get/Set the message for a Detail UI Header
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.MessageDelimiter">
            <summary>
            Get/Set the delimiter to use for separating messages. The default is CRLF.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.UIState">
            <summary>
            Get/Set the current UI state.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.IsRefreshList">
            <summary>
            Gets/sets the value to determine if the list should be refreshed.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.IsListVisible">
            <summary>
            Get/Set whether or not a list-type control on the UI is enabled
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.IsInfoMessageAreaVisible">
            <summary>
            Get/Set whether or not an "Info Message Area" on the UI is Visible
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.IsStatusBarAreaVisible">
            <summary>
            Get/Set whether or not the status bar area on the UI is Visible/visible
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.IsActionAreaVisible">
            <summary>
            Get/Set whether or not an "Action Area" on the UI is Visible.
            This might be an area where action buttons such as Add or Refresh are located.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.IsExceptionVisible">
            <summary>
            Get/Set whether or not an "Exception Area" on the UI is Visible.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.TotalRecordsMessage">
            <summary>
            Get/Set the message displayed for Total Records Message
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelReadOnlyBase.Init">
            <summary>
            Initialize the View Model
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelReadOnlyBase.SetViewStateMode">
            <summary>
            Sets the state of all UI properties based on the UIState property.
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelReadOnlyBase.SetViewStateMode(PDSA.UI.PDSAUIState)">
            <summary>
            Sets the state of all UI properties based on the PDSAUIState enumeration passed in
            </summary>
            <param name="mode">A PDSAUIState Enumeration value</param>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelReadOnlyBase.GetResourceMessage(System.String,System.String)">
            <summary>
            Gets a Resource Message. You can override this method to get the messages from a Resource file, an XML file, or a database for a multi-lingual application.
            </summary>
            <param name="resourceCode">A unique identifier for this resource</param>
            <param name="message">The message if the resource is not found</param>
            <returns>The message</returns>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelReadOnlyBase.HandleExceptionMessages(System.Exception)">
            <summary>
            Sets an exception object into the LastException property of this ViewModel class
            </summary>
            <param name="ex">An exception object</param>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelReadOnlyBase.HandleExceptionMessages(System.String)">
            <summary>
            Sets an exception message into the LastExceptionMessage property of this ViewModel class 
            </summary>
            <param name="message">The message to set</param>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelReadOnlyBase.HandleInfoMessages(System.String)">
            <summary>
            Sets a message into the InfoMessage property of this ViewModel class.
            </summary>
            <param name="message">The message to set</param>
        </member>
        <member name="P:PDSA.UI.PDSAUIViewModelReadOnlyBase.IsTitleAreaVisible">
            <summary>
            Gets/sets the visibility of the title area.
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelReadOnlyBase.GetPDSALoginName">
            <summary>
            Returns the value in the PDSALoginName property. If the PDSALoginName property is empty, then Environment.UserName is returned.
            If running in Silverlight/Windows Phone, then "user" is returned.
            </summary>
            <returns>Returns a user login name</returns>
        </member>
        <member name="M:PDSA.UI.PDSAUIViewModelReadOnlyBase.ResetMessages">
            <summary>
            Call this method after you have changed the View Model messages in the PDSAUIViewModelMessages class.
            All the messages will be reset.
            NOTE: You should set the "RecordName" and "RecordNamePlural" prior to calling this method.
            </summary>
        </member>
        <member name="T:PDSA.UI.PDSAMVCViewModelBase">
            <summary>
            Class for all MVC View Model Base Classes to Inherit From
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAMVCViewModelBase.#ctor">
            <summary>
            Base constructor for the PDSAMVCViewModelBase. Calls the Constructor for the PDSAUIViewModelReadOnlyBase
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSAMVCViewModelBase._Messages">
            <summary>
            Get/Set a list of messages to display
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAMVCViewModelBase.SortDirection">
            <summary>
            Get/Set the current sort direction
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAMVCViewModelBase.SortDirectionNew">
            <summary>
            Get/Set the new sort direction
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAMVCViewModelBase.SortExpression">
            <summary>
            Get/Set the current column you wish to sort on
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAMVCViewModelBase.LastSortExpression">
            <summary>
            Get/Set the last column you sorted on
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAMVCViewModelBase.Pager">
            <summary>
            Get/Set the Pager object
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAMVCViewModelBase.IsPagerVisible">
            <summary>
            Get/Set whether or not the pager is visible
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAMVCViewModelBase.Pages">
            <summary>
            Get/Set the page collection
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAMVCViewModelBase.EventCommand">
            <summary>
            Get/Set the current command executed on the client-side
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAMVCViewModelBase.EventArgument">
            <summary>
            Get/Set any parameters for the current command executed. This could be a page number for paging, etc.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAMVCViewModelBase.IsValid">
            <summary>
            Get/Set whether or not the view model is in a valid state
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAMVCViewModelBase.Init">
            <summary>
            Initialize the View Model
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAMVCViewModelBase.IsInRole(System.String)">
            <summary>
            Returns whether or not the user is in the specified role
            </summary>
            <param name="roleName">The role name to check</param>
            <returns>True if in role</returns>
        </member>
        <member name="M:PDSA.UI.PDSAMVCViewModelBase.HasPermission(System.String)">
            <summary>
            Returns whether or not the user has the specified permission
            </summary>
            <param name="permissionName">The permission name to check</param>
            <returns>True if has permission</returns>
        </member>
        <member name="M:PDSA.UI.PDSAMVCViewModelBase.SetSortDirection">
            <summary>
            Set the sort direction
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAMVCViewModelBase.Sort``1(System.Linq.IQueryable{``0})">
            <summary>
            Sort the List passed in
            </summary>
            <typeparam name="T">A Type</typeparam>
            <param name="list">Any IQueryable List</param>
            <returns>A Sorted List</returns>
        </member>
        <member name="M:PDSA.UI.PDSAMVCViewModelBase.HandleRequest">
            <summary>
            Handle request. Made to be overridden in your View Model class
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAMVCViewModelBase.AddMode">
            <summary>
            Place view into 'Add' mode
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAMVCViewModelBase.EditMode">
            <summary>
            Place view into 'Edit' mode
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAMVCViewModelBase.NormalMode">
            <summary>
            Place view into 'Norma' Mode
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAMVCViewModelBase.ResetSearch">
            <summary>
            Reset Search
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAMVCViewModelBase.SetModeAfterValidation">
            <summary>
            Set the mode after validation
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAMVCViewModelBase.SetPagerObject(System.Int32)">
            <summary>
            Set pager object based on total amount of records
            </summary>
            <param name="totalRecords">Total records</param>
        </member>
        <member name="M:PDSA.UI.PDSAMVCViewModelBase.Display(System.String)">
            <summary>
            Displays a message in the info message area.
            </summary>
            <param name="message">The message to display</param>
        </member>
        <member name="T:PDSA.UI.PDSAWebViewModelBase">
            <summary>
            Class for all ASP.NET View Model Base Classes to Inherit From
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.#ctor">
            <summary>
            Constructor for the PDSAWebViewModelBase. Calls the Constructor for the PDSAUIViewModelBase
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSAWebViewModelBase.ZERO_ROWS">
            <summary>
            Constant for comparison of when zero rows are returned.
            </summary>
        </member>
        <member name="F:PDSA.UI.PDSAWebViewModelBase.BINDING_CANCELED">
            <summary>
            Constant for the result value that indicates data binding is cancelled.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAWebViewModelBase.IsPagingDisabled">
            <summary>
            Returns true when the selected record count is set to display all records.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAWebViewModelBase.MessageItemFormatString">
            <summary>
            Gets/sets the format for a validation or error message item
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAWebViewModelBase.MessageContainerFormatString">
            <summary>
            Gets/sets the value for the element format to surround the message 
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAWebViewModelBase.ValidationMarkers">
            <summary>
            Gets/sets the collection of validation markers defined on the UI form.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAWebViewModelBase.SelectedStatus">
            <summary>
            Gets/sets the page status filter value by the user using the status filter drop-down.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAWebViewModelBase.SelectedStatusFilter">
            <summary>
            Gets/sets the page status filter by the user using the status filter drop-down.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAWebViewModelBase.MessageContainerStyle">
            <summary>
            Gets/sets the style name to use when displaying information.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAWebViewModelBase.UnorderedListOpenTag">
            <summary>
            Gets/sets the value for a UL element
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAWebViewModelBase.UnorderedListCloseTag">
            <summary>
            Gets/sets the value for a UL element
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAWebViewModelBase.UserName">
            <summary>
            Gets/sets the current user name.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAWebViewModelBase.IsFirstRequest">
            <summary>
            Gets/sets the value to indicate if it is the first time the form is displayed.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAWebViewModelBase.IsBindingCancelled">
            <summary>
            Gets/sets the value to indicate that data binding was cancelled.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAWebViewModelBase.MessageLineTerminator">
            <summary>
            Gets/sets the value to use to separate multiple lines in a message
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAWebViewModelBase.SortExpression">
            <summary>
            Gets/sets the value to indicate the Sort Expression on a data grid.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAWebViewModelBase.ControlTitleFormat">
            <summary>
            Gets or sets the string format of the control title
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAWebViewModelBase.ErrorMessageStyle">
            <summary>
            Gets/set a style name to use when displaying error messages.
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAWebViewModelBase.InfoMessageStyle">
            <summary>
            Gets/sets the style for an informational message
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAWebViewModelBase.ValidationMessageStyle">
            <summary>
            Gets/sets the style name for a validation message item
            </summary>
        </member>
        <member name="P:PDSA.UI.PDSAWebViewModelBase.WarningMessageStyle">
            <summary>
            Gets/sets the style name for a warning message item
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.Init">
            <summary>
            Initialize the View Model
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.GetStatusValue(System.String)">
            <summary>
            Gets the integer value for a string representation of the status filter
            </summary>
            <param name="statusFilter">The status filter to check</param>
            <returns>An integer for the status filter</returns>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.DisplayRowCount(System.Int32)">
            <summary>
            Formats and displays the count of result rows. 
            </summary>
            <param name="rows">number of rows</param>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.DisplayRowCount(System.Int32,System.String)">
            <summary>
            Formats and displays the count of result rows. 
            </summary>
            <param name="rows">number of rows</param>
            <param name="message">custom message</param>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.AdjustPageSize">
            <summary>
            Adjusts the list page size depending on whether paging is enabled.
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.DisplayValidationErrors(PDSA.Validation.PDSAValidationException)">
            <summary>
            Displays validation errors for a PDSAValidationException instance
            </summary>
            <param name="ex">a valid PDSAValidationException</param>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.Display(PDSA.Validation.PDSAValidationRules)">
            <summary>
            Formats and displays the list of validation errors that occurred when 
            trying to save the current record or search for records
            </summary>
            <param name="errors">A PDSAValidationRules object with the errors to display</param>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.Display(System.String)">
            <summary>
            Displays a message in the info message area.
            </summary>
            <param name="message">The message to display</param>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.Display(System.String,PDSA.UI.PDSAMessageListItemType)">
            <summary>
            Displays a message in the info message area.
            </summary>
            <param name="message">The message string</param>
            <param name="messageType">The type of message</param>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.ClearMessages">
            <summary>
            Set the 'InfoMessage' property to empty string
            Set the 'IsInfoMessageAreaVisible' property to false.
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.RefreshGrid">
            <summary>
            This method sets the 'IsRefreshList' property to true 
            and the 'IsListVisible' property to true
            You can use this to trigger a refresh of the grid or list displayed on the UI.
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.LoadView(System.Boolean)">
            <summary>
            Handles the initial load of the view.
            </summary>
            <param name="isFirstRequest">Is this the first request for the view</param>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.ChangeState(PDSA.UI.PDSAUIState)">
            <summary>
            Sets each of the UI properties to the correct state depending on the PDSAUIState.
            </summary>
            <param name="state">The PDSAUIState enum to set</param>
        </member>
        <member name="P:PDSA.UI.PDSAWebViewModelBase.IsDirty">
            <summary>
            Get/Set the dirty flag for the current entity.
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.SetIsDirtyFlagForProperty(System.String,System.Boolean)">
            <summary>
            Set the IsDirty property for a property
            </summary>
            <param name="propertyName">The property name</param>
            <param name="isDirty">Value for IsDirty propert</param>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.ResetAllIsDirtyProperties">
            <summary>
            Clears the PropertyTrackerCollection property. Removes all objects from the collection
            </summary>   
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.IsPropertySetAsNull(System.String)">
            <summary>
            Returns whether or not a specific property's SetAsNull flag is true or false
            </summary>
            <param name="propertyName">The property name</param>
            <returns>True or false</returns>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.SetAsNullFlagForProperty(System.String,System.Boolean)">
            <summary>
            Set the SetAsNull property for a property
            </summary>
            <param name="propertyName">The property name</param>
            <param name="setAsNull">Value for SetAsNull propert</param>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.ResetAllSetAsNullProperties">
            <summary>
            Resets all SetAsNull properties to 'False'
            </summary>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.ResetAllSetAsNullProperties(System.Boolean)">
            <summary>
            Resets all SetAsNull properties to 'False'
            </summary>
            <param name="value">Value to set the SetAsNull property to</param>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.HasValueChanged(System.Int32,System.Int32,System.String)">
            <summary>
            Call this method to check your properties to see if they have changed. This method will handle Nulls and all data types.
            </summary>
            <param name="oldValue">The original value to check</param>
            <param name="newValue">The new value to check</param>
            <param name="propertyName">The property name that changed</param>
            <returns>True if the value has changed</returns>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.HasValueChanged(System.String,System.String,System.String)">
            <summary>
            Call this method to check your properties to see if they have changed. This method will handle Nulls and all data types.
            </summary>
            <param name="oldValue">The original value to check</param>
            <param name="newValue">The new value to check</param>
            <param name="propertyName">The property name that changed</param>
            <returns>True if the value has changed</returns>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.HasValueChanged(System.Object,System.Object)">
            <summary>
            Call this method to check your properties to see if they have changed. This method will handle Nulls and all data types.
            </summary>
            <param name="originalValue">The original value to check</param>
            <param name="newValue">The new value to check</param>
            <returns>True if the value has changed</returns>
        </member>
        <member name="M:PDSA.UI.PDSAWebViewModelBase.HasValueChanged(System.Object,System.Object,System.String)">
            <summary>
            Call this method to check your properties to see if they have changed. This method will handle Nulls and all data types.
            </summary>
            <param name="originalValue">The original value to check</param>
            <param name="newValue">The new value to check</param>
            <param name="propertyName">The property name being checked</param>
            <returns>True if the value has changed</returns>
        </member>
        <member name="T:PDSA.Validation.IPDSAEntity">
            <summary>
            Interface for all Entity objects
            </summary>
        </member>
        <member name="P:PDSA.Validation.IPDSAEntity.ClassName">
            <summary>
            Get/Set the name of the Entity class
            </summary>
        </member>
        <member name="P:PDSA.Validation.IPDSAEntity.PDSALoginName">
            <summary>
            Get/Set the login name of the person using this class.
            </summary>
        </member>
        <member name="P:PDSA.Validation.IPDSAEntity.IsDirty">
            <summary>
            Get/Set the dirty flag for the current entity.
            </summary>
        </member>
        <member name="P:PDSA.Validation.IPDSAEntity.PropertyTrackerCollection">
            <summary>
            Get/Set collection of properties that are dirty
            </summary>
        </member>
        <member name="M:PDSA.Validation.IPDSAEntity.IsPropertyDirty(System.String)">
            <summary>
            Returns whether or not a specific property's IsDirty flag is true
            </summary>
            <param name="propertyName">The property name</param>
            <returns>True or false</returns>
        </member>
        <member name="M:PDSA.Validation.IPDSAEntity.SetIsDirtyFlagForProperty(System.String,System.Boolean)">
            <summary>
            Set the IsDirty property for a property
            </summary>
            <param name="propertyName">The property name</param>
            <param name="isDirty">Value for IsDirty propert</param>
        </member>
        <member name="M:PDSA.Validation.IPDSAEntity.ResetAllIsDirtyProperties">
            <summary>
            Resets all IsDirty properties to 'False'
            </summary>   
        </member>
        <member name="M:PDSA.Validation.IPDSAEntity.IsPropertySetAsNull(System.String)">
            <summary>
            Returns whether or not a specific property's SetAsNull flag is true or false
            </summary>
            <param name="propertyName">The property name</param>
            <returns>True or false</returns>
        </member>
        <member name="M:PDSA.Validation.IPDSAEntity.SetAsNullFlagForProperty(System.String,System.Boolean)">
            <summary>
            Set the SetAsNull property for a property
            </summary>
            <param name="propertyName">The property name</param>
            <param name="setAsNull">Value for SetAsNull propert</param>
        </member>
        <member name="M:PDSA.Validation.IPDSAEntity.ResetAllSetAsNullProperties">
            <summary>
            Resets all SetAsNull properties to 'False'
            </summary>   
        </member>
        <member name="M:PDSA.Validation.IPDSAEntity.ResetAllSetAsNullProperties(System.Boolean)">
            <summary>
            Resets all SetAsNull properties to value passed in
            </summary>
            <param name="value">Set 'SetAsNull' property to this value</param>
        </member>
        <member name="T:PDSA.Validation.IPDSAValidation">
            <summary>
            This is an interface that defines the API for any validation classes
            </summary>
        </member>
        <member name="P:PDSA.Validation.IPDSAValidation.ClassName">
            <summary>
            Get/Set the class name of the validation class.
            </summary>
        </member>
        <member name="P:PDSA.Validation.IPDSAValidation.PDSALoginName">
            <summary>
            Get/Set the login name of the person doing the validation.
            </summary>
        </member>
        <member name="P:PDSA.Validation.IPDSAValidation.Properties">
            <summary>
            Get/Set the collection of Properties to validate
            </summary>
        </member>
        <member name="P:PDSA.Validation.IPDSAValidation.Entity">
            <summary>
            Get/Set the Entity Object
            </summary>
        </member>
        <member name="P:PDSA.Validation.IPDSAValidation.DataModificationAction">
            <summary>
            Get/Set which data modification is taking place (Insert/Update/Delete)
            </summary>
        </member>
        <member name="P:PDSA.Validation.IPDSAValidation.MoveEntityDataToProperties">
            <summary>
            Get/Set whether or not to move the Entity data into the Properties. When using the validation system stand-alone, this should be set to true. When used with the Haystack generated classes, this can be set to false because we have already moved them into the properties.
            </summary>
        </member>
        <member name="M:PDSA.Validation.IPDSAValidation.CheckBusinessRules">
            <summary>
            Call this method to check all the business rules
            </summary>
            <returns>Enumeration of whether or not the business rules succeeded or failed</returns>
        </member>
        <member name="M:PDSA.Validation.IPDSAValidation.Validate">
            <summary>
            Call this method to check all the business rules. Throws a PDSAValidationException if any business rule fails
            </summary>
        </member>
        <member name="M:PDSA.Validation.IPDSAValidation.SetAllDirtyFlags(PDSA.Validation.PDSAPropertyTrackers)">
            <summary>
            Set all Dirty Flags in the Properties collection from the Dirty Flags in the Entity PropertyTracker collection
            </summary>
            <param name="dirtyFlagsFromEntity">The collection of PDSAPropertyTracker objects</param>
        </member>
        <member name="M:PDSA.Validation.IPDSAValidation.SetAllSetAsNullFlags(PDSA.Validation.PDSAPropertyTrackers)">
            <summary>
            Set all SetAsNull Flags in the Properties collection from the SetAsNull Flags in the Entity PropertyTracker collection
            </summary>
            <param name="nullFlagsFromEntity">The collection of PDSAPropertyTracker objects</param>
        </member>
        <member name="M:PDSA.Validation.IPDSAValidation.SetAsNullFlag(System.String,System.Boolean)">
            <summary>
            Changes the property/column name SetAsNull property
            </summary>
            <param name="propertyName">The property/column name to change</param>
            <param name="setAsNullFlag">value to change the SetAsNull property to</param>
        </member>
        <member name="M:PDSA.Validation.IPDSAValidation.ResetAllIsDirtyProperties">
            <summary>
            Resets all IsDirty properties to 'False'
            </summary>
        </member>
        <member name="M:PDSA.Validation.IPDSAValidation.ResetAllSetAsNullProperties">
            <summary>
            Resets all SetAsNull properties to 'False'
            </summary>   
        </member>
        <member name="M:PDSA.Validation.IPDSAValidation.ResetAllSetAsNullProperties(System.Boolean)">
            <summary>
            Resets all SetAsNull properties to value passed in
            </summary>   
            <param name="value">Set 'SetAsNull' property to this value</param>
        </member>
        <member name="M:PDSA.Validation.IPDSAValidation.CreateAllEntityProperties(System.Boolean,System.Boolean)">
            <summary>
            Creates all the Entity Properties; one for each property. This should not be called for SOA applications. You can set the IsDirty property and SetAsNull property with this method.
            </summary>
            <param name="isDirtyFlag">Value to set IsDirty</param>
            <param name="setAsNullFlag">Value to set SetAsNull</param>
        </member>
        <member name="T:PDSA.Validation.PDSAEntityBase">
            <summary>
            This is an abstract class from which "Entity" classes inherit.
            This class implements both INotifyPropertyChanged and IPDSAEntity
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAEntityBase.#ctor">
            <summary>
            Constructor for the PDSAEntityBase Class. Initializes variables to a valid start state.
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAEntityBase.#ctor(System.String)">
            <summary>
            Constructor for the PDSAEntityBase Class. Initializes variables to a valid start state.
            </summary>
            <param name="loginName">A login name to set into the PDSALoginName property</param>
        </member>
        <member name="M:PDSA.Validation.PDSAEntityBase.#cctor">
            <summary>
            Static constructor for PDSAEntityBase class.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAEntityBase.ClassName">
            <summary>
            Get/Set the name of the Entity class
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAEntityBase.PDSALoginName">
            <summary>
            Get/Set the login name of the person using this class.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAEntityBase.ResultSetRowNumberBegin">
            <summary>
            Get/Set the Row Number to begin with when doing paging
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAEntityBase.ResultSetRowNumberEnd">
            <summary>
            Get/Set the Row Number to end with when doing paging
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAEntityBase.IsDirty">
            <summary>
            Get/Set the dirty flag for the current entity.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAEntityBase.IsSelected">
            <summary>
            Get/Set whether or not this Entity has been selected in a UI
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAEntityBase.MessageLanguage">
            <summary>
            Get/Set the MessageLanguage for SQL stored procs
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAEntityBase.PropertyTrackerCollection">
            <summary>
            Get/Set collection of properties that are dirty
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAEntityBase.DefaultLanguage">
            <summary>
            Get the 'Default Language' for this property (en-us). 
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAEntityBase.IsPropertyDirty(System.String)">
            <summary>
            Returns whether or not a specific property's IsDirty flag is true
            </summary>
            <param name="propertyName">The property name</param>
            <returns>True or false</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAEntityBase.SetIsDirtyFlagForProperty(System.String,System.Boolean)">
            <summary>
            Set the IsDirty property for a property
            </summary>
            <param name="propertyName">The property name</param>
            <param name="isDirty">Value for IsDirty propert</param>
        </member>
        <member name="M:PDSA.Validation.PDSAEntityBase.ResetAllIsDirtyProperties">
            <summary>
            Loops thru the PropertyTracker collection and resets the IsDirty Property
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAEntityBase.IsPropertySetAsNull(System.String)">
            <summary>
            Returns whether or not a specific property's SetAsNull flag is true or false
            </summary>
            <param name="propertyName">The property name</param>
            <returns>True or false</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAEntityBase.SetAsNullFlagForProperty(System.String,System.Boolean)">
            <summary>
            Set the SetAsNull property for a property
            </summary>
            <param name="propertyName">The property name</param>
            <param name="setAsNull">Value for SetAsNull propert</param>
        </member>
        <member name="M:PDSA.Validation.PDSAEntityBase.IsValueNull(System.String)">
            <summary>
            Check to see if the original value read from the database was a null
            </summary>
            <param name="propertyName">The property name to check</param>
            <returns>True if read in as null</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAEntityBase.ResetAllSetAsNullProperties">
            <summary>
            Resets all SetAsNull properties to 'False'
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAEntityBase.ResetAllSetAsNullProperties(System.Boolean)">
            <summary>
            Resets all SetAsNull properties to 'False'
            </summary>
            <param name="value">Value to set the SetAsNull property to</param>
        </member>
        <member name="M:PDSA.Validation.PDSAEntityBase.HasValueChanged(System.Object,System.Object)">
            <summary>
            Call this method to check your properties to see if they have changed. This method will handle Nulls and all data types.
            </summary>
            <param name="originalValue">The original value to check</param>
            <param name="newValue">The new value to check</param>
            <returns>True if the value has changed</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAEntityBase.HasValueChanged(System.Object,System.Object,System.String)">
            <summary>
            Call this method to check your properties to see if they have changed. This method will handle Nulls and all data types.
            </summary>
            <param name="originalValue">The original value to check</param>
            <param name="newValue">The new value to check</param>
            <param name="propertyName">The property name being checked</param>
            <returns>True if the value has changed</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAEntityBase.SetOriginalValueForProperty(System.String,System.Object)">
            <summary>
            Set the OriginalValue property in the PropertyTrackers collection for the property name passed in
            </summary>
            <param name="propertyName">The property name in the collection to set</param>
            <param name="value">The value to set</param>
        </member>
        <member name="E:PDSA.Validation.PDSAEntityBase.PropertyChanged">
            <summary>
            The PropertyChanged Event to raise to any UI object
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAEntityBase.RaisePropertyChanged(System.String)">
            <summary>
            The PropertyChanged Event to raise to any UI object
            The event is only invoked if data binding is used
            </summary>
            <param name="propertyName">The property name that is changing</param>
        </member>
        <member name="M:PDSA.Validation.PDSAEntityBase.GetPropertyChangedEventArgs(System.String)">
            <summary>
            Returns an instance of PropertyChangedEventArgs for 
            the specified property name.
            </summary>
            <param name="propertyName">The name of the property to create event args for.</param>
            <returns>A PropertyChangedEventArgs object</returns>
        </member>
        <member name="T:PDSA.Validation.PDSAEntitySearchBase">
            <summary>
            This is an abstract class from which "Search" classes inherit.
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAEntitySearchBase.#ctor">
            <summary>
            Constructor for the PDSAEntitySearchBase
            </summary>
        </member>
        <member name="T:PDSA.Validation.PDSAManagerBase">
            <summary>
            This is a base class from which the data manager classes can inherit.
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAManagerBase.#ctor">
            <summary>
            Constructor for the PDSAManagerBase class
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAManagerBase.MessageLanguage">
            <summary>
            Get/Set the MessageLanguage for SQL stored procs
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAManagerBase.GetPropertiesAsPropertyHeaderCollection(PDSA.Validation.PDSAProperties)">
            <summary>
            Gather all the properties in the entity class and return them back as collection of PDSAPropertyHeader objects
            </summary>
            <param name="properties">A PDSAProperties collection</param>
            <returns>A PDSAPropertyHeaders collection</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAManagerBase.GetResourceMessage(System.String,System.String)">
            <summary>
            Gets a Resource Message. You can override this method to get the messages from a Resource file, an XML file, or a database for a multi-lingual application.
            </summary>
            <param name="resourceCode">A unique identifier for this resource</param>
            <param name="message">The message if the resource is not found</param>
            <returns>The message</returns>
        </member>
        <member name="T:PDSA.Validation.PDSAProperties">
            <summary>
            A collection class of PDSAProperty objects.
            This class is used to check business rules on each individual Property object stored in the collection.
            This class's BusinessRuleMessages property will hold all of the failed business rules.
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAProperties.#ctor">
            <summary>
            Initializes the PDSAProperties class
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperties.BusinessRuleMessages">
            <summary>
            Get/Set collection of PDSAValidationRule objects
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperties.TotalPrimaryKeys">
            <summary>
            Get/Set Total Number of Primary Key Fields
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperties.IsValid">
            <summary>
            Get/Set whether or not the business rules for this collection are valid.
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAProperties.Clone">
            <summary>
            Create a clone of the existing PDSAProperties collection
            </summary>
            <returns>Returns a new PDSAProperties collection that matches the current one</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperties.SetAllSetAsNullToTrue">
            <summary>
            Set all Property objects 'SetAsNull' property to True.
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAProperties.SetAllSetAsNull(System.Boolean)">
            <summary>
            Set all Property objects 'SetAsNull' property to the value passed in.
            NOTE: Will not set any fields marked as 'IsRequired=True' equal to null.
            </summary>
            <param name="value">True or False</param>
        </member>
        <member name="M:PDSA.Validation.PDSAProperties.WasPropertyReadInAsNull(System.String)">
            <summary>
            Returns true if the column data was read in as null from the database
            </summary>
            <param name="propertyName">The property/column name to find</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperties.IsPropertyDirty(System.String)">
            <summary>
            Returns true if the column data was changed
            </summary>
            <param name="propertyName">The property/column name to find</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperties.DataHasChanged(System.String)">
            <summary>
            Changes the property 'SetAsNull' to true and 'IsDirty' to true.
            </summary>
            <param name="propertyName">The property/column name to change</param>
        </member>
        <member name="M:PDSA.Validation.PDSAProperties.SetAsNullFlag(System.String,System.Boolean)">
            <summary>
            Changes the property/column name SetAsNull property
            </summary>
            <param name="propertyName">The property/column name to change</param>
            <param name="setAsNullFlag">value to change the SetAsNull property to</param>
        </member>
        <member name="M:PDSA.Validation.PDSAProperties.SetIsDirtyFlag(System.String,System.Boolean)">
            <summary>
            Changes the property/column name IsDirty flag
            </summary>
            <param name="propertyName">The property/column name to change</param>
            <param name="isDirtyFlag">value for the IsDirty flag</param>
        </member>
        <member name="M:PDSA.Validation.PDSAProperties.CheckBusinessRules">
            <summary>
            Validates all of business rules for each individual PDSAProperty object in the collection.
            </summary>
            <returns>PDSAValidationRuleStatus</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperties.SetPerformBusinessRuleCheck(System.Boolean)">
            <summary>
            Use this method to set every property's "PerformBusinessRuleCheck" property to the value passed in.
            </summary>
            <param name="value">The value to set each PerformBusinessRuleCheck to</param>
        </member>
        <member name="M:PDSA.Validation.PDSAProperties.CalculateTotalNumberOfPrimaryKeys">
            <summary>
            Calculate and fill in the TotalPrimaryKeys property
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAProperties.GetByName(System.String)">
            <summary>
            This method allows you to search for a specific PDSAProperty object in the collection by the property name.
            </summary>
            <param name="propertyName">The property name to find</param>
            <returns>PDSAProperty</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperties.FindByName(PDSA.Validation.PDSAProperty)">
            <summary>
            This method is called by the GetByName method to locate the PDSAProperty object by the property name.
            </summary>
            <param name="prop">The PDSAProperty object to inspect</param>
            <returns>bool</returns>
        </member>
        <member name="T:PDSA.Validation.PDSAProperty">
            <summary>
            This class is used to hold all of the attributes about a property.
            Each instance of this property will be used to help validate a given property.
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.#ctor">
            <summary>
            Constructor for the PDSAProperty Class. Calls Init() to initialize variables to a valid start state.
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.#ctor(System.String,System.String)">
            <summary>
            Constructor for the PDSAProperty Class. Calls Init() to initialize variables to a valid start state.
            </summary>
            <param name="propertyName">PropertyName to initialize</param>
            <param name="headerText">The header text or label to describe this property</param>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.Init">
            <summary>
            Initializes all properties to a valid start state
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.PropertyName">
            <summary>
            Get/Set the Property Name
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.HeaderText">
            <summary>
            Get/Set the header text or label to describe this property
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.IsDirty">
            <summary>
            Get/Set whether or not the value has changed
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.DisplayInGrid">
            <summary>
            Get/Set whether or not to display this property in a Grid
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.DisplayOrder">
            <summary>
            Get/Set the order in which to display this property
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.DisplayInEdit">
            <summary>
            Get/Set whether or not to display this property in a detail edit panel
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.IsFieldReadOnlyOnEdit">
            <summary>
            Get/Set whether or not this property should be read-only in an edit panel
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.IsRequired">
            <summary>
            Get/Set whether or not this property value must be filled in
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.ToolTip">
            <summary>
            Get/Set the message to use for a Tool Tip.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.RequiredMessage">
            <summary>
            Get/Set the message to use when the required value is not filled in.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.IncludeInAuditTracking">
            <summary>
            Get/Set whether or not this field should be included in the audit tracking process
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.IsValid">
            <summary>
            Get/Set whether or not this property has passed it's validation
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.IsVisible">
            <summary>
            Get/Set whether or not this property is visible. This is not used by Haystack, this can be used by the developer.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.IsSelected">
            <summary>
            Get/Set whether or not this property is selected. This is not used by Haystack, this can be used by the developer.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.BusinessRuleMessages">
            <summary>
            Get/Set collection of business rules that failed for this property
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.MaxLength">
            <summary>
            Get/Set the maximum length for this property
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.MinLength">
            <summary>
            Get/Set the minimum length for this property
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.MinValue">
            <summary>
            Get/Set the minimum value for this property.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.MaxValue">
            <summary>
            Get/Set the maximum value for this property.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.RegularExpression">
            <summary>
            Get/Set the regular expression for this property.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.RegularExpressionMessage">
            <summary>
            Get/Set the regular expression message to display if Regular Expression Fails.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.IsNullable">
            <summary>
            Get/Set whether or not this property is defined as 'Nullable'.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.IsInsertable">
            <summary>
            Get/Set whether or not this data column can be used in an INSERT statement. 
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.IsUpdatable">
            <summary>
            Get/Set whether or not this data column can be used in an UPDATE statement. 
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.PerformBusinessRuleCheck">
            <summary>
            Get/Set whether or not this property's business rules should be checked.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.PropertyType">
            <summary>
            Get/Set the .NET data type of this property.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.DefaultValue">
            <summary>
            Get/Set the default value this column should receive when it is instantiated
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.WasDataReadInAsNull">
            <summary>
            Get/Set whether or not this property's value was read in from the row as null.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.IsNull">
            <summary>
            Gets whether or not the current 'Value' is now null.
            SAME AS 'IsValueNull' property
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.SetAsNull">
            <summary>
            Get/Set whether or not to put this column back as null when inserting or updating a row.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.ValueForNull">
            <summary>
            Get/Set the value that would be returned if the 'Value' property is null.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.DBValueForNull">
            <summary>
            Get/Set the value that will be inserted into the database when value should be null
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.ReturnNullWhenNull">
            <summary>
            Get/Set whether or not a null value should be returned when the value is null. This is typically used when using Nullable types on your Entity classes.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.IsValueNull">
            <summary>
            Gets whether or not the current 'Value' is now null.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.IsOriginalValueNull">
            <summary>
            Gets whether or not the 'OriginalValue' was null.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.IsPrimaryKey">
            <summary>
            Get/Set whether or not this data column is a primary key column. 
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.OriginalValue">
            <summary>
            Get/Set the 'Original Value' for this property.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAProperty.Value">
            <summary>
            Get/Set the 'value' for this property.
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.Clone(PDSA.Validation.PDSAProperty)">
            <summary>
            Create a clone of a PDSAProperty object
            </summary>
            <param name="propertyToClone">The PDSAProperty object to clone</param>
            <returns>A new PDSAProperty object that matches the one passed in</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.SetAsNullFlag(System.Boolean)">
            <summary>
            Changes the current property's SetAsNull property
            </summary>
            <param name="setAsNullFlag">value to change the SetAsNull property to</param>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetPropertiesAsPropertyHeaderCollection">
            <summary>
            Returns all properties of the PDSAProperty Class and returns them as a PDSAPropertyHeaders collection.
            </summary>
            <returns>A PDSAPropertyHeaders object</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.Create(System.String,System.String,System.Boolean,System.Type)">
            <summary>
            This static method will create a new PDSAProperty object
            </summary>
            <param name="propertyName">The property name</param>
            <param name="headerText">The header text or label to describe this property</param>
            <param name="isRequired">Whether or not this property is required</param>
            <param name="propertyType">The .NET data type</param>
            <returns>A PDSA Property Object</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.Create(System.String,System.String,System.Boolean,System.Type,System.Int32)">
            <summary>
            This static method will create a new PDSAProperty object
            </summary>
            <param name="propertyName">The property name</param>
            <param name="headerText">The header text or label to describe this property</param>
            <param name="isRequired">Whether or not this property is required</param>
            <param name="propertyType">The .NET data type</param>
            <param name="maxLength">The maximum length of this property</param>
            <returns>A PDSA Property Object</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.Create(System.String,System.String,System.Boolean,System.Type,System.Int32,System.String)">
            <summary>
            This static method will create a new PDSAProperty object
            </summary>
            <param name="propertyName">The property name</param>
            <param name="headerText">The header text or label to describe this property</param>
            <param name="isRequired">Whether or not this property is required</param>
            <param name="propertyType">The .NET data type</param>
            <param name="maxLength">The maximum length of this property</param>
            <param name="requiredMessage">The message to use if this property is required and the value is not filled in</param>
            <returns>A PDSA Property Object</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.Create(System.String,System.String,System.Boolean,System.Type,System.Int32,System.String,System.Object,System.Object)">
            <summary>
            This static method will create a new PDSAProperty object
            </summary>
            <param name="propertyName">The property name</param>
            <param name="headerText">The header text or label to describe this property</param>
            <param name="isRequired">Whether or not this property is required</param>
            <param name="propertyType">The .NET data type</param>
            <param name="maxLength">The maximum length of this property</param>
            <param name="requiredMessage">The message to use if this property is required and the value is not filled in</param>
            <param name="minValue">A minimum value for Numeric/Date properties</param>
            <param name="maxValue">A maximum value for Numeric/Date properties</param>
            <returns>A PDSA Property Object</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.Create(System.String,System.String,System.Boolean,System.Type,System.Int32,System.String,System.Object,System.Object,System.Int32)">
            <summary>
            This static method will create a new PDSAProperty object
            </summary>
            <param name="propertyName">The property name</param>
            <param name="headerText">The header text or label to describe this property</param>
            <param name="isRequired">Whether or not this property is required</param>
            <param name="propertyType">The .NET data type</param>
            <param name="maxLength">The maximum length of this property</param>
            <param name="requiredMessage">The message to use if this property is required and the value is not filled in</param>
            <param name="minValue">A minimum value for Numeric/Date properties</param>
            <param name="maxValue">A maximum value for Numeric/Date properties</param>
            <param name="minLength">A minimum length for String properties</param>
            <returns>A PDSA Property Object</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.Create(System.String,System.String,System.Boolean,System.Type,System.Int32,System.String,System.Object,System.Object,System.Int32,System.Object)">
            <summary>
            This static method will create a new PDSAProperty object
            </summary>
            <param name="propertyName">The property name</param>
            <param name="headerText">The header text or label to describe this property</param>
            <param name="isRequired">Whether or not this property is required</param>
            <param name="propertyType">The .NET data type</param>
            <param name="maxLength">The maximum length of this property</param>
            <param name="requiredMessage">The message to use if this property is required and the value is not filled in</param>
            <param name="minValue">A minimum value for Numeric/Date properties</param>
            <param name="maxValue">A maximum value for Numeric/Date properties</param>
            <param name="minLength">A minimum length for String properties</param>
            <param name="defaultValue">The default value to initialize the value to</param>
            <returns>A PDSA Property Object</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.Create(System.String,System.String,System.Boolean,System.Type,System.Int32,System.String,System.Object,System.Object,System.Int32,System.Object,System.String,System.String)">
            <summary>
            This static method will create a new PDSAProperty object
            </summary>
            <param name="propertyName">The property name</param>
            <param name="headerText">The header text or label to describe this property</param>
            <param name="isRequired">Whether or not this property is required</param>
            <param name="propertyType">The .NET data type</param>
            <param name="maxLength">The maximum length of this property</param>
            <param name="requiredMessage">The message to use if this property is required and the value is not filled in</param>
            <param name="minValue">A minimum value for Numeric/Date properties</param>
            <param name="maxValue">A maximum value for Numeric/Date properties</param>
            <param name="minLength">A minimum length for String properties</param>
            <param name="defaultValue">The default value to initialize the value to</param>
            <param name="regularExpression">The regular expression to validate</param>
            <param name="regularExpressionMessage">The message to return if the regular expression does not match</param>
            <returns>A PDSA Property Object</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.CheckBusinessRule">
            <summary>
            This method will perform the validation on this property according to the property values that are set.
            </summary>
            <returns>PDSAValidationRuleStatus</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.RegularExpressionCheck">
            <summary>
            Performs a RegEx.IsMatch() on the Value property against the RegularExpression property. If they do not match, then a false is returned and a PDSAValidationRule is created and added to the BusinessRuleMessages collection with the RegularExpressionMessage property filled in.
            </summary>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.CheckNumericRange">
            <summary>
            This method is called by the Validate method to check the property value to see if it is within the appropriate numeric range.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.CheckTimeRange">
            <summary>
            This method is called by the Validate method to check the property value to see if it is within the appropriate time range.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.CheckDateRange">
            <summary>
            This method is called by the Validate method to check the property value to see if it is within the appropriate date range.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetValue">
            <summary>
            Returns the 'value' of this property
            </summary>
            <returns>object</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetValueAsObject">
            <summary>
            Returns the 'Value' property as an Object data type
            </summary>
            <returns>An object</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetAsObject">
            <summary>
            Returns the 'Value' property as an Object data type
            </summary>
            <returns>An object</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetAsString">
            <summary>
            Returns the 'Value' property as a string data type
            </summary>
            <returns>A string</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetValueAsString">
            <summary>
            Returns the 'Value' property as a string data type
            </summary>
            <returns>A string</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetAsChar">
            <summary>
            Returns the 'Value' property as a character data type
            </summary>
            <returns>A character</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetValueAsChar">
            <summary>
            Returns the 'Value' property as a Nullable character data type
            </summary>
            <returns>A character</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetAsByte">
            <summary>
            Returns the 'Value' property as a Byte data type
            </summary>
            <returns>A byte</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetAsByteArray">
            <summary>
            Returns the 'Value' property as a Byte array data type
            </summary>
            <returns>A byte array</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetValueAsByte">
            <summary>
            Returns the 'Value' property as a nullable Byte array data type
            </summary>
            <returns>A nullable byte array</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetAsGuid">
            <summary>
            Returns the 'Value' property as a Guid data type
            </summary>
            <returns>A Guid</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetValueAsGuid">
            <summary>
            Returns the 'Value' property as a Nullable Guid data type
            </summary>
            <returns>A Nullable Guid</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetAsDate">
            <summary>
            Returns the 'Value' property as a Date data type
            </summary>
            <returns>A DateTime</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetValueAsDate">
            <summary>
            Returns the 'Value' property as a Nullable Date data type
            </summary>
            <returns>A Nullable DateTime</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetAsInteger">
            <summary>
            Returns the 'Value' property as an Integer (Int32) data type
            </summary>
            <returns>An Integer</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetValueAsInteger">
            <summary>
            Returns the 'Value' property as a Nullable Integer (Int32) data type
            </summary>
            <returns>An Nullable Integer</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetAsShort">
            <summary>
            Returns the 'Value' property as a Short (Int16) data type
            </summary>
            <returns>A Short</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetValueAsShort">
            <summary>
            Returns the 'Value' property as a Nullable Short (Int16) data type
            </summary>
            <returns>A Nullable Short</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetAsLong">
            <summary>
            Returns the 'Value' property as a Long (Int64) data type
            </summary>
            <returns>A Long (Int64)</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetValueAsLong">
            <summary>
            Returns the 'Value' property as a Nullable Long (Int64) data type
            </summary>
            <returns>A Nullable Long (Int64)</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetAsDecimal">
            <summary>
            Returns the 'Value' property as a Decimal data type
            </summary>
            <returns>A Decimal</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetValueAsDecimal">
            <summary>
            Returns the 'Value' property as a Nullable Decimal data type
            </summary>
            <returns>A Nullable Decimal</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetAsFloat">
            <summary>
            Returns the 'Value' property as a Float data type
            </summary>
            <returns>A Float</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetValueAsFloat">
            <summary>
            Returns the 'Value' property as a Nullable Float data type
            </summary>
            <returns>A Nullable Float</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetAsSingle">
            <summary>
            Returns the 'Value' property as a Single data type
            </summary>
            <returns>A Single</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetValueAsSingle">
            <summary>
            Returns the 'Value' property as a Nullable Single data type
            </summary>
            <returns>A Nullable Single</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetAsBool">
            <summary>
            Returns the 'Value' property as a Boolean data type
            </summary>
            <returns>A Boolean</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetAsBoolean">
            <summary>
            Returns the 'Value' property as a Boolean data type
            </summary>
            <returns>A Boolean</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetValueAsBool">
            <summary>
            Returns the 'Value' property as a Nullable Boolean data type
            </summary>
            <returns>A Nullable Boolean</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetValueAsBoolean">
            <summary>
            Returns the 'Value' property as a Nullable Boolean data type
            </summary>
            <returns>A Nullable Boolean</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetAsDouble">
            <summary>
            Returns the 'Value' property as a Double data type
            </summary>
            <returns>A Double</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetValueAsDouble">
            <summary>
            Returns the 'Value' property as a Nullable Double data type
            </summary>
            <returns>A Nullable Double</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetAsTimeSpan">
            <summary>
            Returns the 'Value' property as a TimeSpan data type
            </summary>
            <returns>A TimeSpan</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetAsDateTimeOffset">
            <summary>
            Returns the 'Value' property as a DateTimeOffset data type
            </summary>
            <returns>A DateTimeOffset</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.ConvertToGuid(System.Object)">
            <summary>
            Converts an object that is a GUID to an actual Guid data type.
            </summary>
            <param name="value">The guid value to convert</param>
            <returns>A Guid data type</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.ConvertToGuid(System.String)">
            <summary>
            Converts a string that is a GUID to an actual Guid data type.
            </summary>
            <param name="value">The guid value to convert</param>
            <returns>A Guid data type</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.ConvertToByteArray(System.Object)">
            <summary>
            Converts an object that is a binary type into a byte array.
            </summary>
            <param name="value">The value to convert</param>
            <returns>A byte array</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.ConvertToTimeSpan(System.Object)">
            <summary>
            Converts an object into a timespan
            </summary>
            <param name="value">The object to convert</param>
            <returns>A TimeSpan object</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.ConvertToDateTimeOffset(System.Object)">
            <summary>
            Converts an object into a DateTimeOffset object
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A DateTimeOffset object</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.GetGenericType">
            <summary>
            This method will return the generic type for the .NET data type contained in this property.
            </summary>
            <returns>PDSAGenericPropertyTypes</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.IsTimeOnly(System.String)">
            <summary>
            Determines whether or not the value contains only time elements
            </summary>
            <param name="value">The value to check</param>
            <returns>bool</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.IsADate(System.String)">
            <summary>
            Returns whether or not the string value passed in is in a valid date data type.
            </summary>
            <param name="value">The value to check for a date</param>
            <returns>bool</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.IsNumeric(System.String)">
            <summary>
            Returns whether or not the string value passed in is in a valid numeric data type.
            </summary>
            <param name="value">The value to check for a numeric</param>
            <returns>bool</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAProperty.ToString">
            <summary>
            Returns PropertyName
            </summary>
            <returns>Returns PropertyName</returns>
        </member>
        <member name="T:PDSA.Validation.PDSAPropertyHeader">
            <summary>
            This class is used when you need a PropertyName and Header value collection.
            This is sometimes used with the PDSAWPFListView class to create a 'View' for a ListView control.
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAPropertyHeader.#ctor">
            <summary>
            Base constructor for the PDSAPropertyHeader class. Initializes variables to a valid start state
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAPropertyHeader.#ctor(System.String,System.String)">
            <summary>
            Constructor for PDSAPropertyHeader class
            </summary>
            <param name="propertyName">The property name to set</param>
            <param name="headerText">The header text to set</param>
        </member>
        <member name="P:PDSA.Validation.PDSAPropertyHeader.PropertyName">
            <summary>
            Get/Set the Property name
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAPropertyHeader.HeaderText">
            <summary>
            Get/Set the Header Text
            </summary>
        </member>
        <member name="T:PDSA.Validation.PDSAPropertyHeaders">
            <summary>
            A collection class of PDSAPropertyHeader objects
            </summary>
        </member>
        <member name="T:PDSA.Validation.PDSAPropertyTracker">
            <summary>
            Class used to keep track of which properties in your entity class are "Dirty"
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAPropertyTracker.#ctor">
            <summary>
            Constructor for PDSAPropertyTracker class
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAPropertyTracker.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor for PDSAPropertyTracker class
            </summary>
            <param name="propertyName">The property name</param>
            <param name="isDirty">Whether or not this property is dirty</param>
        </member>
        <member name="M:PDSA.Validation.PDSAPropertyTracker.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor for PDSAPropertyTracker class
            </summary>
            <param name="propertyName">The property name</param>
            <param name="isDirty">Whether or not this property is dirty</param>
            <param name="setAsNull">Whether or not this property should be set as null</param>
        </member>
        <member name="P:PDSA.Validation.PDSAPropertyTracker.IsDirty">
            <summary>
            Get/Set whether or not this property has changed or not
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAPropertyTracker.SetAsNull">
            <summary>
            Get/Set whether or not to store the property as null
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAPropertyTracker.PropertyName">
            <summary>
            Get/Set the property that changed
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAPropertyTracker.OriginalValue">
            <summary>
            Get/Set the original value that changed
            </summary>
        </member>
        <member name="T:PDSA.Validation.PDSAPropertyTrackers">
            <summary>
            Class to maintain a collection of PDSAPropertyTracker objects
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAPropertyTrackers.#ctor">
            <summary>
            Constructor for PDSAPropertyTrackers collection
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAPropertyTrackers.ResetAllDirtyFlags">
            <summary>
            Reset all IsDirty properties in this collection to a 'false' value
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAPropertyTrackers.SetAllDirtyFlags(System.Boolean)">
            <summary>
            Set all IsDirty properties in this collection to the specified value
            </summary>
            <param name="value">The value to set the 'IsDirty' property to</param>
        </member>
        <member name="M:PDSA.Validation.PDSAPropertyTrackers.IsPropertyDirty(System.String)">
            <summary>
            Returns whether or not the passed in Property Name has been changed
            </summary>
            <param name="propertyName">The property name</param>
            <returns>True or False</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAPropertyTrackers.GetByName(System.String)">
            <summary>
            This method allows you to search for a specific PDSAPropertyTracker object in the collection by the property name.
            </summary>
            <param name="propertyName">The property name to find</param>
            <returns>PDSAPropertyTracker or null if not found</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAPropertyTrackers.FindByName(PDSA.Validation.PDSAPropertyTracker)">
            <summary>
            This method is called by the GetByName method to locate the PDSAPropertyTracker object by the property name.
            </summary>
            <param name="prop">The PDSAPropertyTracker object to inspect</param>
            <returns>bool</returns>
        </member>
        <member name="T:PDSA.Validation.PDSAValidationRuleStatus">
            <summary>
            Enumeration for the results of the validation of a property
            </summary>
        </member>
        <member name="F:PDSA.Validation.PDSAValidationRuleStatus.Passed">
            <summary>
            All Validation rules passed
            </summary>
        </member>
        <member name="F:PDSA.Validation.PDSAValidationRuleStatus.Failed">
            <summary>
            At least one validation rule failed
            </summary>
        </member>
        <member name="F:PDSA.Validation.PDSAValidationRuleStatus.NotChecked">
            <summary>
            Validation Rule Not Checked
            </summary>
        </member>
        <member name="T:PDSA.Validation.PDSAGenericPropertyTypes">
            <summary>
            The generic data types for a property
            </summary>
        </member>
        <member name="F:PDSA.Validation.PDSAGenericPropertyTypes.StringType">
            <summary>
            Data type is a string
            </summary>
        </member>
        <member name="F:PDSA.Validation.PDSAGenericPropertyTypes.BinaryType">
            <summary>
            Data type is a binary
            </summary>
        </member>
        <member name="F:PDSA.Validation.PDSAGenericPropertyTypes.NumericType">
            <summary>
            Data type is a numeric
            </summary>
        </member>
        <member name="F:PDSA.Validation.PDSAGenericPropertyTypes.DateType">
            <summary>
            Data type is a date/time
            </summary>
        </member>
        <member name="F:PDSA.Validation.PDSAGenericPropertyTypes.CharType">
            <summary>
            Data type is a character
            </summary>
        </member>
        <member name="F:PDSA.Validation.PDSAGenericPropertyTypes.GUIDType">
            <summary>
            Data type is a GUID
            </summary>
        </member>
        <member name="F:PDSA.Validation.PDSAGenericPropertyTypes.ObjectType">
            <summary>
            Data type is a object
            </summary>
        </member>
        <member name="T:PDSA.Validation.PDSAValidationException">
            <summary>
            This exception is returned from the Validate method in Validator classes to signify the failure of business rules.
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAValidationException.#ctor(System.String,PDSA.Validation.PDSAValidationRules)">
            <summary>
            Base constructor for the PDSAValidationException object
            </summary>
            <param name="message">The message for this validation exception</param>
            <param name="businessRuleMessages">The PDSAValidationRules object</param>
        </member>
        <member name="P:PDSA.Validation.PDSAValidationException.BusinessRuleMessages">
            <summary>
            Get/Set the collection of business rules that have failed.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAValidationException.ClassName">
            <summary>
            The class name on which the business rules failed
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAValidationException.Message">
            <summary>
            A CRLF delimited list of business rule failure messages
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAValidationException.MessageForWebDisplay">
            <summary>
            A '&lt;br /&gt;' delimited list of business rule failure messages
            </summary>
            <returns>The message to display</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAValidationException.ToString">
            <summary>
            ToString() returns a CRLF delimited list of business rule failure messages.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:PDSA.Validation.PDSAValidationMessages">
            <summary>
            This class returns standard validation messages from a message store. The default store is the resource file in the PDSA.Common.DLL.
            You may override any of the messages just be setting their values. 
            The messages are in the following format:
              PDSAValidationMessages.InvalidDate = {0} is an invalid date.
              PDSAValidationMessages.msgInvalidNumeric = {0} is an invalid number. {0} must be a numeric value and greater than or equal to {1} and less than or equal to {2}.
              PDSAValidationMessages.InvalidMinMax = {0} must be greater than or equal to {1} and less than or equal to {2}.
              PDSAValidationMessages.MaxLength = {0} can only be {1} characters long.
              PDSAValidationMessages.MaxValue = {0} must be less than or equal to {1}.
              PDSAValidationMessages.MinLength = {0} must be greater than or equal to {1} characters long.
              PDSAValidationMessages.MinValue = {0} must be greater than or equal to {1}.
              PDSAValidationMessages.MustBeFilledIn = {0} must be filled in.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAValidationMessages.BusinessRulesFailed">
            <summary>
            Get/Set the 'Business Rules Failed' error message. The default message is: 'Business rules failed in {0}'. Replace the {0} with the class name.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAValidationMessages.MustBeFilledIn">
            <summary>
            Get/Set the error message for when a property does not pass the 'IsRequired' test. The default message is: '{0} must be filled in.'. Replace the {0} with the HeaderText property.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAValidationMessages.MaxLength">
            <summary>
            Get/Set the error message for when a property exceeds the maximum length. The default message is: '{0} can only be {1} characters long.'. Replace the {0} with the HeaderText property, and the {1} with the maximum length.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAValidationMessages.MinLength">
            <summary>
            Get/Set the error message for when a property is less than the minimum length. The default message is: '{0} must be more than {1} characters long.'. Replace the {0} with the HeaderText property, and the {1} with the minimum length.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAValidationMessages.InvalidDate">
            <summary>
            Get/Set the error message for when a property is not a valid date/time data type. The default is: '{0} is an invalid date.'. Replace the {0} with the HeaderText property.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAValidationMessages.InvalidNumericValue">
            <summary>
            Get/Set the error message for when a property is not a valid numeric data type. The default message is: '{0} is an invalid number. {0} must be a numeric value and greater than or equal to {1} and less than or equal to {2}.'. Replace the {0} with the HeaderText property.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAValidationMessages.MinValue">
            <summary>
            Get/Set the error message for when a property is less than the minimum value. The default message is: '{0} must be greater than {1}.'. Replace the {0} with the HeaderText property, and the {1} with the minimum value.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAValidationMessages.MaxValue">
            <summary>
            Get/Set the error message for when a property is greater than the maximum value. The default message is: '{0} must be less than {1}.'. Replace the {0} with the HeaderText property, and the {1} with the maximum value.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAValidationMessages.InvalidMinMax">
            <summary>
            Get/Set the error message for when a property is greater than the maximum value and less than the minimum value. The default message is: '{0} must be greater than {1} and less than {2}.'. Replace the {0} with the HeaderText property, and the {1} with the minimum value and the {2} with the maximum value.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAValidationMessages.CantConvertToType">
            <summary>
            Get/Set the error message for when the value can not be converted to the specified type.
            </summary>
        </member>
        <member name="T:PDSA.Validation.PDSAValidationRule">
            <summary>
            This class holds the business rule failure message for a specific property.
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAValidationRule.#ctor(System.String,System.String)">
            <summary>
            Constructor for PDSAValidation Class
            </summary>
            <param name="propertyName">The property name that is in error</param>
            <param name="message">The validation message to display</param>
        </member>
        <member name="P:PDSA.Validation.PDSAValidationRule.PropertyName">
            <summary>
            Get/Set the property name
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAValidationRule.Message">
            <summary>
            Get/Set the business rule failure message
            </summary>
        </member>
        <member name="T:PDSA.Validation.PDSAValidationRules">
            <summary>
            Collection class to hold all validation rule failure messages.
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAValidationRules.#ctor">
            <summary>
            Constructor for PDSAValidationRules class
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAValidationRules.ClassName">
            <summary>
            Get/Set the class name to which these business rules belong
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAValidationRules.ToString">
            <summary>
            ToString() method returns a CRLF delimited list of validation rule failure messages.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:PDSA.Validation.PDSADataModificationState">
            <summary>
            Enumeration for specifying which data modification method is currently performing. This is used in the Validate method for determining which rules to run.
            </summary>
        </member>
        <member name="F:PDSA.Validation.PDSADataModificationState.Unknown">
            <summary>
            The data modification state is unknown
            </summary>
        </member>
        <member name="F:PDSA.Validation.PDSADataModificationState.Insert">
            <summary>
            The data modification state is Insert
            </summary>
        </member>
        <member name="F:PDSA.Validation.PDSADataModificationState.Update">
            <summary>
            The data modification state is Update
            </summary>
        </member>
        <member name="F:PDSA.Validation.PDSADataModificationState.Delete">
            <summary>
            The data modification state is Delete
            </summary>
        </member>
        <member name="T:PDSA.Validation.PDSAValidatorBase">
            <summary>
            This abstract class is intended to be a base class from which validator classes can inherit.
            This class implements the IPDSAValidation interface.
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAValidatorBase.#ctor">
            <summary>
            Constructor for the PDSAValidatorBase class. Initializes variables to a valid start state.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAValidatorBase.ClassName">
            <summary>
            Get/Set the name of the Validator class
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAValidatorBase.PDSALoginName">
            <summary>
            Get/Set the login name of the person using this class.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAValidatorBase.Properties">
            <summary>
            Get/Set the collection of PDSAProperty objects.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAValidatorBase.BusinessRuleMessages">
            <summary>
            Get/Set collection of PDSAValidationRule objects. This property references the Properties.BusinessRuleMessages property.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAValidatorBase.MoveEntityDataToProperties">
            <summary>
            Get/Set whether or not to move the Entity data into the Properties. When using the validation system stand-alone, this should be set to true. When used with the Haystack generated classes, this can be set to false because we have already moved them into the properties.
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAValidatorBase.Entity">
            <summary>
            Get/Set the Entity Object
            </summary>
        </member>
        <member name="P:PDSA.Validation.PDSAValidatorBase.DataModificationAction">
            <summary>
            Get/Set which data modification is taking place (Insert/Update/Delete)
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAValidatorBase.AddBusinessRuleMessage(System.String,System.String)">
            <summary>
            Adds a new business rule message to the BusinessRuleMessages collection
            </summary>
            <param name="propertyName">The property you are validating</param>
            <param name="message">The message to display</param>
        </member>
        <member name="M:PDSA.Validation.PDSAValidatorBase.CheckBusinessRule(System.String)">
            <summary>
            Call this method to validate just the built-in rules for one property. This will not call any custom business rules you may have written.
            </summary>
            <param name="propertyName">The property name to locate in the collection</param>
            <returns>PDSAProperty object or null if the propertyName is not found</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAValidatorBase.CheckBusinessRules">
            <summary>
            Call this method to validate all business rules. This method calls the ValidateCore method which will check any custom business rules you write.
            </summary>
            <returns>PDSAValidationRuleStatus</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAValidatorBase.Validate">
            <summary>
            This method is similar to the CheckBusinessRules(), but will throw an PDSAValidationException if any business rules fail. This method must be overriden.
            This method will also call the ValidateCore() method, which you will override in your validation class. This method is used for your own custom business rules.
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAValidatorBase.GetResourceMessage(System.String,System.String)">
            <summary>
            Gets a Resource Message. You can override this method to get the messages from a Resource file, an XML file, or a database for a multi-lingual application.
            </summary>
            <param name="resourceCode">A unique identifier for this resource</param>
            <param name="message">The message if the resource is not found</param>
            <returns>The message</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAValidatorBase.SetPerformBusinessRuleCheck(System.Boolean)">
            <summary>
            Use this method to set every property's "PerformBusinessRuleCheck" property to the value passed in.
            </summary>
            <param name="value">The value to set each PerformBusinessRuleCheck to</param>
        </member>
        <member name="M:PDSA.Validation.PDSAValidatorBase.IsValueNull(System.String)">
            <summary>
            Returns True if the value in the Property was returned as a null from the database
            </summary>
            <param name="propertyName">The property/column name to check</param>
            <returns>True if the value for the property name passed in is null</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAValidatorBase.SetAsNullFlag(System.String,System.Boolean)">
            <summary>
            Changes the property/column name SetAsNull property
            </summary>
            <param name="propertyName">The property/column name to change</param>
            <param name="setAsNullFlag">value to change the SetAsNull property to</param>
        </member>
        <member name="M:PDSA.Validation.PDSAValidatorBase.SetAllDirtyFlags(PDSA.Validation.PDSAPropertyTrackers)">
            <summary>
            Set all Dirty Flags in the Properties collection from the Dirty Flags in the Entity PropertyTracker collection
            </summary>
            <param name="dirtyFlagsFromEntity">The collection of PDSAPropertyTracker objects</param>
        </member>
        <member name="M:PDSA.Validation.PDSAValidatorBase.CreateAllEntityProperties(System.Boolean,System.Boolean)">
            <summary>
            Creates all the Entity Properties; one for each property. This should not be called for SOA applications. You can set the IsDirty property and SetAsNull property with this method.
            </summary>
            <param name="isDirtyFlag">Value to set IsDirty</param>
            <param name="setAsNullFlag">Value to set SetAsNull</param>
        </member>
        <member name="M:PDSA.Validation.PDSAValidatorBase.SetAllSetAsNullFlags(PDSA.Validation.PDSAPropertyTrackers)">
            <summary>
            Set all SetAsNull Flags in the Properties collection from the SetAsNull Flags in the Entity PropertyTracker collection
            </summary>
            <param name="nullFlagsFromEntity">The collection of PDSAPropertyTracker objects</param>
        </member>
        <member name="M:PDSA.Validation.PDSAValidatorBase.ResetAllIsDirtyProperties">
            <summary>
            Resets all IsDirty properties to 'False'
            </summary>   
        </member>
        <member name="M:PDSA.Validation.PDSAValidatorBase.ResetAllSetAsNullProperties">
            <summary>
            Resets all SetAsNull properties to 'False'
            </summary>   
        </member>
        <member name="M:PDSA.Validation.PDSAValidatorBase.ResetAllSetAsNullProperties(System.Boolean)">
            <summary>
            Resets all SetAsNull properties to value passed in
            </summary>   
            <param name="value">Set the 'SetAsNull' properties to this value</param>
        </member>
        <member name="M:PDSA.Validation.PDSAValidatorBase.InitializeEntity">
            <summary>
            This method is called when a new instance of the Validator class is created. 
            All the properties for the Entity are set to default values here.
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAValidatorBase.CreateProperties">
            <summary>
            Create the properties of each PDSAProperty object. This method must be overriden.
            </summary>
            <returns>A PDSAProperties Object</returns>
        </member>
        <member name="M:PDSA.Validation.PDSAValidatorBase.InitProperties">
            <summary>
            Initialize the properties of each PDSAProperty object. This method must be overriden.
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAValidatorBase.AddBusinessRulesToProperties">
            <summary>
            Add more standard business rules to properties. This method must be overriden.
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAValidatorBase.ValidateCore">
            <summary>
            This method is where you write custom business rules. This method must be overriden.
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAValidatorBase.EntityDataToProperties">
            <summary>
            Moves the Entity class data into the Properties collection.
            </summary>
        </member>
        <member name="M:PDSA.Validation.PDSAValidatorBase.PropertiesToEntityData">
            <summary>
            Moves the Properties collection objects into the EntityClass properties
            </summary>
        </member>
        <member name="T:PDSA.XML.DataClasses.PDSAXmlDataClassBase">
            <summary>
            The base class for all XML Data Classes
            </summary>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.#ctor(System.String)">
            <summary>
            Constructor for the PDSAXmlDataClassBase class
            </summary>
            <param name="fileName">An XML File name</param>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor for the PDSAXmlDataClassBase class
            </summary>
            <param name="xmlString">An XML string</param>
            <param name="inMemoryOnly">Set to "True" to specify that you are only doing In Memory Manipulation of this XML</param>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.Init">
            <summary>
            Initialize variables to a valid start state
            </summary>
        </member>
        <member name="T:PDSA.XML.DataClasses.PDSAXmlDataClassBase.PDSADataModificationState">
            <summary>
            Enumeration for specifying which data modification method is currently performing. This is used in the ValidateCore method for determining which rules to run.
            </summary>
        </member>
        <member name="F:PDSA.XML.DataClasses.PDSAXmlDataClassBase.PDSADataModificationState.Unknown">
            <summary>
            Unknown Modification State. This is the default value
            </summary>
        </member>
        <member name="F:PDSA.XML.DataClasses.PDSAXmlDataClassBase.PDSADataModificationState.Insert">
            <summary>
            User has called the Insert Method.
            </summary>
        </member>
        <member name="F:PDSA.XML.DataClasses.PDSAXmlDataClassBase.PDSADataModificationState.Update">
            <summary>
            User has called the Update Method.
            </summary>
        </member>
        <member name="F:PDSA.XML.DataClasses.PDSAXmlDataClassBase.PDSADataModificationState.Delete">
            <summary>
            User has called the Delete Method.
            </summary>
        </member>
        <member name="F:PDSA.XML.DataClasses.PDSAXmlDataClassBase.mxElem">
            <summary>
            The XElement object that was used to read the XML File.
            </summary>
        </member>
        <member name="F:PDSA.XML.DataClasses.PDSAXmlDataClassBase.mXmlString">
            <summary>
            Get/Set the XML String
            </summary>
        </member>
        <member name="P:PDSA.XML.DataClasses.PDSAXmlDataClassBase.XmlElements">
            <summary>
            Get the collection of XElement objects after opening the XML file.
            </summary>
        </member>
        <member name="P:PDSA.XML.DataClasses.PDSAXmlDataClassBase.IncrementUniqueValueBy">
            <summary>
            Get/Set the value to increment the UniqueKeyName element by, the default is 1.
            NOTE: This only works if you have a "unique key" element that is an integer type.
            </summary>
        </member>
        <member name="P:PDSA.XML.DataClasses.PDSAXmlDataClassBase.FileName">
            <summary>
            Get/Set the XML file name to be used in the data class
            </summary>
        </member>
        <member name="P:PDSA.XML.DataClasses.PDSAXmlDataClassBase.UniqueKeyName">
            <summary>
            Get/Set the name of the Element/Attribute that is used for the Unique Key
            </summary>
        </member>
        <member name="P:PDSA.XML.DataClasses.PDSAXmlDataClassBase.IsUniqueKeyInteger">
            <summary>
            Get/Set if the UniqueKeyName is an Integer value and can be incremented
            </summary>
        </member>
        <member name="P:PDSA.XML.DataClasses.PDSAXmlDataClassBase.IsUniqueKeyElement">
            <summary>
            Get/Set if the UniqueKeyName is an Element or Attribute
            </summary>
        </member>
        <member name="P:PDSA.XML.DataClasses.PDSAXmlDataClassBase.TopElementName">
            <summary>
            Get/Set the name of the top level element that is used to query over the set of elements.
            </summary>
        </member>
        <member name="P:PDSA.XML.DataClasses.PDSAXmlDataClassBase.OrderByName">
            <summary>
            Get/Set the name of the Element/Attribute to be used for sorting the data
            </summary>
        </member>
        <member name="P:PDSA.XML.DataClasses.PDSAXmlDataClassBase.InMemoryOnly">
            <summary>
            Get/Set whether or not to load/save XML to/from a file, or just use the XmlString property. True=In Memory Only, False=Use File (default).
            </summary>
        </member>
        <member name="P:PDSA.XML.DataClasses.PDSAXmlDataClassBase.XmlString">
            <summary>
            Get/Set the XML String
            </summary>
        </member>
        <member name="P:PDSA.XML.DataClasses.PDSAXmlDataClassBase.DataModificationState">
            <summary>
            The Data Modification State the Object is in
            </summary>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.CreateInsertElement">
            <summary>
            Override this method to create a blank XML Node used to insert into the XML File
            </summary>
            <returns>An XElement object</returns>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.XElementToProperties(System.Xml.Linq.XElement)">
            <summary>
            Take the XElement object read in and convert to the properties of the data class
            </summary>
            <param name="elem">The current XElement object</param>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.PropertiesToXElement(System.Xml.Linq.XElement)">
            <summary>
            Take the current properties in the data class and create an XElement object
            </summary>
            <param name="elem">An XElement object</param>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.XElementToEntity(System.Xml.Linq.XElement)">
            <summary>
            Take the current XElement object and convert to an entity class
            </summary>
            <param name="elem">The current XElement object</param>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.EntityToXElement(System.Xml.Linq.XElement)">
            <summary>
            Take the current Entity object and convert to an XElement object
            </summary>
            <param name="elem">An XElement object</param>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.GetDataSet">
            <summary>
            Returns the XML file as a DataSet
            </summary>
            <returns>DataSet</returns>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.GetDataTable">
            <summary>
            Returns the XML file as a DataTable
            </summary>
            <returns>DataTable</returns>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.GetXElements">
            <summary>
            Returns the XML file as an XElement object
            </summary>
            <returns>XElement</returns>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.GetXmlAsString">
            <summary>
            Return the value in the 'XmlElements' property as a String
            </summary>
            <returns>An XML String</returns>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.GetXElement(System.String)">
            <summary>
            Returns a single XElement object for the Element/Attribute value passed in. If the key value is not found in the UniqueKeyName element, then a null is returned.
            </summary>
            <param name="key">The key value to locate in the UniqueKeyName element</param>
            <returns>XElement or null</returns>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.GetValue(System.Xml.Linq.XAttribute,System.String)">
            <summary>
            Retrieve a value from an XAttribute. If the attribute does not exist, or is null, then a string.Empty is returned.
            </summary>
            <example>
            // Fill a list of Product objects
            var coll = from elem in XmlObject.Descendants(TopElementName)
                       orderby elem.Attribute("ProductName").Value
                       select new Product
                       {
                         ProductId = Convert.ToInt32(GetValue(elem.Attribute("ProductId"), "0")),
                         ProductName = Convert.ToString(GetValue(elem.Attribute("ProductName"), string.Empty)),
                         IntroductionDate = Convert.ToDateTime(GetValue(elem.Attribute("IntroductionDate"), "1/1/2000")),
                         Price = Convert.ToDecimal(GetValue(elem.Attribute("Price"), "0"))
                       };
            </example>
            <param name="attr">The XAttribute to read the value from</param>
            <param name="defaultValue">The default value to return if it does not exist</param>
            <returns>A string value</returns>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.GetValue(System.Xml.Linq.XAttribute,System.Object)">
            <summary>
            Retrieve a value from an XAttribute. If the attribute does not exist, or is null, then a string.Empty is returned.
            </summary>
            <example>
            // Fill a list of Product objects
            var coll = from elem in XmlObject.Descendants(TopElementName)
                       orderby elem.Attribute("ProductName").Value
                       select new Product
                       {
                         ProductId = Convert.ToInt32(GetValue(elem.Attribute("ProductId"), default(int))),
                         ProductName = Convert.ToString(GetValue(elem.Attribute("ProductName"), default(string))),
                         IntroductionDate = Convert.ToDateTime(GetValue(elem.Attribute("IntroductionDate"), default(DateTime))),
                         Price = Convert.ToDecimal(GetValue(elem.Attribute("Price"), default(decimal)))
                       };
            </example>
            <param name="attr">The XAttribute to read the value from</param>
            <param name="defaultValue">The default value to return if it does not exist</param>
            <returns>A string value</returns>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.GetValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            Retrieve a value from an XElement. If the element does not exist, or is null, then a string.Empty is returned.
            </summary>
            <example>
            // Fill a list of Product objects
            var coll = from elem in XmlObject.Descendants(TopElementName)
                       orderby elem.Attribute("ProductName").Value
                       select new Product
                       {
                         ProductId = Convert.ToInt32(GetValue(elem.Element("ProductId"), "0")),
                         ProductName = Convert.ToString(GetValue(elem.Element("ProductName"), string.Empty)),
                         IntroductionDate = Convert.ToDateTime(GetValue(elem.Element("IntroductionDate"), "1/1/2000")),
                         Price = Convert.ToDecimal(GetValue(elem.Element("Price"), "0"))
                       };
            </example>
            <param name="elem">The XElement to read the value from</param>
            <param name="defaultValue">The default value to return if it does not exist</param>
            <returns>A string value</returns>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.GetValue(System.Xml.Linq.XElement,System.Object)">
            <summary>
            Retrieve a value from an XElement. If the element does not exist, or is null, then a string.Empty is returned.
            </summary>
            <example>
            // Fill a list of Product objects
            var coll = from elem in XmlObject.Descendants(TopElementName)
                       orderby elem.Attribute("ProductName").Value
                       select new Product
                       {
                         ProductId = Convert.ToInt32(GetValue(elem.Element("ProductId"), default(int))),
                         ProductName = Convert.ToString(GetValue(elem.Element("ProductName"), default(string))),
                         IntroductionDate = Convert.ToDateTime(GetValue(elem.Element("IntroductionDate"), default(DateTime))),
                         Price = Convert.ToDecimal(GetValue(elem.Element("Price"), default(decimal)))
                       };
            </example>
            <param name="elem">The XElement to read the value from</param>
            <param name="defaultValue">The default value to return if it does not exist</param>
            <returns>A string value</returns>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.Save">
            <summary>
            Saves the XML file with any changes made. 
            NOTE: This is a single user operation and will save the entire file.
            </summary>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.DoesUniqueKeyExist(System.String)">
            <summary>
            Returns a true value if the key value passed is located within the XML file.
            </summary>
            <param name="key">The key value to locate in the UniqueKeyName element</param>
            <returns>bool</returns>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.LoadByUniqueKey(System.String)">
            <summary>
            Loads the Entity class with the data found for the key passed in. Returns a true value if the key is found and the data has been loaded into the Entity class.
            </summary>
            <param name="key">The key value to locate in the UniqueKeyName element</param>
            <returns>bool</returns>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.Insert">
            <summary>
            Adds a new element to the collection of XElement objects, then performs a Save on the XML file.
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.Update(System.String)">
            <summary>
            Updates an existing XML element based on the key passed in. It then performs a Save on the XML file.
            </summary>
            <param name="key">The key value to locate in the UniqueKeyName element</param>
            <returns>int</returns>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.Delete(System.String)">
            <summary>
            Deletes an element from the XElement collection based on the key passed in. Then performs a Save on the XML file.
            </summary>
            <param name="key">The key value to locate in the UniqueKeyName element</param>
            <returns>int</returns>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.GetNextUniqueKeyValue">
            <summary>
            Returns a string that is the next unique key value as determined by the IncrementKeyValueBy property.
            NOTE: This only works if you have a UniqueKeyName that is an int data type.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.SetDirtyFlag">
            <summary>
            Method raised to allow you to set the dirty flag to any value you wish
            </summary>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassBase.SetDirtyFlag(System.Boolean)">
            <summary>
            Method raised to allow you to set the dirty flag to any value you wish
            This method is called after the Insert and Update methods with false value
            </summary>
            <param name="isDirty">The value to set</param>
        </member>
        <member name="T:PDSA.XML.DataClasses.PDSAXmlDataClassException">
            <summary>
            An exception object that is used to report back any errors for working with the PDSA XML Data Class objects
            </summary>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassException.#ctor">
            <summary>
            Constructor for the PDSAXmlDataClassException class
            </summary>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassException.#ctor(System.String)">
            <summary>
            Constructor for the PDSAXmlDataClassException class
            </summary>
            <param name="message">An exception message</param>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassException.#ctor(System.String,System.String)">
            <summary>
            Constructor for the PDSAXmlDataClassException class
            </summary>
            <param name="message">An exception message</param>
            <param name="className">The class name this exception is raised from</param>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassException.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor for the PDSAXmlDataClassException class
            </summary>
            <param name="message">An exception message</param>
            <param name="className">The class name this exception is raised from</param>
            <param name="methodName">The method name this exception occurred within</param>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassException.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor for the PDSAXmlDataClassException class
            </summary>
            <param name="message">An exception message</param>
            <param name="className">The class name this exception is raised from</param>
            <param name="methodName">The method name this exception occurred within</param>
            <param name="xmlFileName">The XML File name that was being read</param>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the PDSAXmlDataClassException class
            </summary>
            <param name="message">An exception message</param>
            <param name="innerException">An inner exception</param>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlDataClassException.#ctor(System.String,System.Exception,System.String,System.String,System.String)">
            <summary>
            Constructor for the PDSAXmlDataClassException class
            </summary>
            <param name="message">An exception message</param>
            <param name="innerException">An inner exception</param>
            <param name="className">The class name this exception is raised from</param>
            <param name="methodName">The method name this exception occurred within</param>
            <param name="xmlFileName">The XML File name that was being read</param>
        </member>
        <member name="P:PDSA.XML.DataClasses.PDSAXmlDataClassException.ClassName">
            <summary>
            Get/Set the Class Name for this exception
            </summary>
        </member>
        <member name="P:PDSA.XML.DataClasses.PDSAXmlDataClassException.MethodName">
            <summary>
            Get/Set the Method Name for this exception
            </summary>
        </member>
        <member name="P:PDSA.XML.DataClasses.PDSAXmlDataClassException.XmlFileName">
            <summary>
            Get/Set the XML File Name for this exception
            </summary>
        </member>
        <member name="T:PDSA.XML.DataClasses.PDSAXmlFile">
            <summary>
            Class to help with File IO on XML files for the Xml Data Classes
            </summary>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlFile.GetCurrentDirectory">
            <summary>
            Returns the current directory the program is running in. If running in Visual Studio, this method removes the \bin folder. NO ending slash is applied to the end of this directory path.
            </summary>
            <returns>The current directory.</returns>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlFile.FileNameWithCurrentDirectory(System.String)">
            <summary>
            Pass in a file name and this method will return the current directory with the file name appended to it. If running in Visual Studio, the \bin folder is removed.
            </summary>
            <param name="fileName">A File Name</param>
            <returns>A full path and file name with the current directory added to the front of the file name</returns>
        </member>
        <member name="T:PDSA.XML.DataClasses.PDSAXmlManagerBase">
            <summary>
            The base Manager class for all PDSA XML Data Classes
            </summary>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlManagerBase.#ctor(System.String)">
            <summary>
            Constructor for the PDSAXmlManagerBase class
            </summary>
            <param name="fileName">The XML File name</param>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlManagerBase.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor for the PDSAXmlManagerBase class
            </summary>
            <param name="xmlString">An XML string</param>
            <param name="inMemoryOnly">Set to "True" to specify that you are only doing In Memory Manipulation of this XML</param>
        </member>
        <member name="P:PDSA.XML.DataClasses.PDSAXmlManagerBase.FileName">
            <summary>
            Get/Set the XML File Name
            </summary>
        </member>
        <member name="P:PDSA.XML.DataClasses.PDSAXmlManagerBase.XmlString">
            <summary>
            Get/Set the XML String
            </summary>
        </member>
        <member name="P:PDSA.XML.DataClasses.PDSAXmlManagerBase.InMemoryOnly">
            <summary>
            Get/Set whether or not to load/save XML to/from a file, or just use the XmlString property. True=In Memory Only, False=Use File (default).
            </summary>
        </member>
        <member name="M:PDSA.XML.DataClasses.PDSAXmlManagerBase.Init">
            <summary>
            Initialize all variables for the XML Data Class
            </summary>
        </member>
    </members>
</doc>
