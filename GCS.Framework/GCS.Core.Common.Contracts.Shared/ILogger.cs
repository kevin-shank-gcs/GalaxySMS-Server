////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	ILogger.cs
//
// summary:	Declares the ILogger interface
////////////////////////////////////////////////////////////////////////////////////////////////////

using System;

namespace GCS.Core.Common.Contracts
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for logger. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface ILogger
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Debugs. </summary>
        ///
        /// <param name="message">  The message. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void Debug(object message);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Debugs. </summary>
        ///
        /// <param name="message">      The message. </param>
        /// <param name="exception">    The exception. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void Debug(object message, Exception exception);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Debug format. </summary>
        ///
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="args">     A variable-length parameters list containing arguments. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void DebugFormat(string format, params object[] args);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Debug format. </summary>
        ///
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="arg0">     The argument 0. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void DebugFormat(string format, object arg0);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Debug format. </summary>
        ///
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="arg0">     The argument 0. </param>
        /// <param name="arg1">     The first argument. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void DebugFormat(string format, object arg0, object arg1);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Debug format. </summary>
        ///
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="arg0">     The argument 0. </param>
        /// <param name="arg1">     The first argument. </param>
        /// <param name="arg2">     The second argument. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void DebugFormat(string format, object arg0, object arg1, object arg2);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Debug format. </summary>
        ///
        /// <param name="provider"> The provider. </param>
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="args">     A variable-length parameters list containing arguments. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void DebugFormat(IFormatProvider provider, string format, params object[] args);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Infoes. </summary>
        ///
        /// <param name="message">  The message. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void Info(object message);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Infoes. </summary>
        ///
        /// <param name="message">      The message. </param>
        /// <param name="exception">    The exception. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void Info(object message, Exception exception);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Information format. </summary>
        ///
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="args">     A variable-length parameters list containing arguments. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void InfoFormat(string format, params object[] args);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Information format. </summary>
        ///
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="arg0">     The argument 0. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void InfoFormat(string format, object arg0);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Information format. </summary>
        ///
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="arg0">     The argument 0. </param>
        /// <param name="arg1">     The first argument. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void InfoFormat(string format, object arg0, object arg1);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Information format. </summary>
        ///
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="arg0">     The argument 0. </param>
        /// <param name="arg1">     The first argument. </param>
        /// <param name="arg2">     The second argument. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void InfoFormat(string format, object arg0, object arg1, object arg2);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Information format. </summary>
        ///
        /// <param name="provider"> The provider. </param>
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="args">     A variable-length parameters list containing arguments. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void InfoFormat(IFormatProvider provider, string format, params object[] args);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Warns. </summary>
        ///
        /// <param name="message">  The message. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void Warn(object message);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Warns. </summary>
        ///
        /// <param name="message">      The message. </param>
        /// <param name="exception">    The exception. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void Warn(object message, Exception exception);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Warning format. </summary>
        ///
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="args">     A variable-length parameters list containing arguments. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void WarnFormat(string format, params object[] args);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Warning format. </summary>
        ///
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="arg0">     The argument 0. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void WarnFormat(string format, object arg0);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Warning format. </summary>
        ///
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="arg0">     The argument 0. </param>
        /// <param name="arg1">     The first argument. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void WarnFormat(string format, object arg0, object arg1);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Warning format. </summary>
        ///
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="arg0">     The argument 0. </param>
        /// <param name="arg1">     The first argument. </param>
        /// <param name="arg2">     The second argument. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void WarnFormat(string format, object arg0, object arg1, object arg2);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Warning format. </summary>
        ///
        /// <param name="provider"> The provider. </param>
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="args">     A variable-length parameters list containing arguments. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void WarnFormat(IFormatProvider provider, string format, params object[] args);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Errors. </summary>
        ///
        /// <param name="message">  The message. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void Error(object message);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Errors. </summary>
        ///
        /// <param name="message">      The message. </param>
        /// <param name="exception">    The exception. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void Error(object message, Exception exception);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Error format. </summary>
        ///
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="args">     A variable-length parameters list containing arguments. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void ErrorFormat(string format, params object[] args);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Error format. </summary>
        ///
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="arg0">     The argument 0. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void ErrorFormat(string format, object arg0);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Error format. </summary>
        ///
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="arg0">     The argument 0. </param>
        /// <param name="arg1">     The first argument. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void ErrorFormat(string format, object arg0, object arg1);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Error format. </summary>
        ///
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="arg0">     The argument 0. </param>
        /// <param name="arg1">     The first argument. </param>
        /// <param name="arg2">     The second argument. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void ErrorFormat(string format, object arg0, object arg1, object arg2);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Error format. </summary>
        ///
        /// <param name="provider"> The provider. </param>
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="args">     A variable-length parameters list containing arguments. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void ErrorFormat(IFormatProvider provider, string format, params object[] args);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Fatals. </summary>
        ///
        /// <param name="message">  The message. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void Fatal(object message);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Fatals. </summary>
        ///
        /// <param name="message">      The message. </param>
        /// <param name="exception">    The exception. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void Fatal(object message, Exception exception);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Fatal format. </summary>
        ///
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="args">     A variable-length parameters list containing arguments. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void FatalFormat(string format, params object[] args);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Fatal format. </summary>
        ///
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="arg0">     The argument 0. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void FatalFormat(string format, object arg0);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Fatal format. </summary>
        ///
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="arg0">     The argument 0. </param>
        /// <param name="arg1">     The first argument. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void FatalFormat(string format, object arg0, object arg1);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Fatal format. </summary>
        ///
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="arg0">     The argument 0. </param>
        /// <param name="arg1">     The first argument. </param>
        /// <param name="arg2">     The second argument. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void FatalFormat(string format, object arg0, object arg1, object arg2);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Fatal format. </summary>
        ///
        /// <param name="provider"> The provider. </param>
        /// <param name="format">   Describes the format to use. </param>
        /// <param name="args">     A variable-length parameters list containing arguments. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void FatalFormat(IFormatProvider provider, string format, params object[] args);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets a value indicating whether a debug is enabled. </summary>
        ///
        /// <value> True if a debug is enabled, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IsDebugEnabled { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets a value indicating whether an information is enabled. </summary>
        ///
        /// <value> True if an information is enabled, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IsInfoEnabled { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets a value indicating whether a warning is enabled. </summary>
        ///
        /// <value> True if a warning is enabled, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IsWarnEnabled { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets a value indicating whether an error is enabled. </summary>
        ///
        /// <value> True if an error is enabled, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IsErrorEnabled { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets a value indicating whether a fatal is enabled. </summary>
        ///
        /// <value> True if a fatal is enabled, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IsFatalEnabled { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Pushes an activity. </summary>
        ///
        /// <param name="activityName"> Name of the activity. </param>
        ///
        /// <returns>   An IDisposable. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        IDisposable PushActivity(string activityName);
    }
}