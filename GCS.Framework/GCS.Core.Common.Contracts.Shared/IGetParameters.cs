////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	IGetParameters.cs
//
// summary:	Declares the IGetParameters interface
////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Runtime.Serialization;

namespace GCS.Core.Common.Contracts
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for call parameters base. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface ICallParametersBase
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the operation UID. </summary>
        ///
        /// <value> The operation UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid OperationUid { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the identifier of the background job. </summary>
        ///
        /// <value> The identifier of the background job. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        Guid BackgroundJobId { get; set; }
        //////////////////////////////////////////////////////////////////////////////////////////////////////
        ///// <summary>   Gets or sets the identifier of the session. </summary>
        /////
        ///// <value> The identifier of the session. </value>
        //////////////////////////////////////////////////////////////////////////////////////////////////////

        //Guid SessionId { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the current entity identifier. </summary>
        ///
        /// <value> The identifier of the current entity. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid CurrentEntityId { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the current site u identifier. </summary>
        ///
        /// <value> The identifier of the current site u. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid CurrentSiteUid { get; set; }


        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the request date time. </summary>
        ///
        /// <value> The request date time. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        DateTimeOffset RequestDateTime { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether the do not validate authorization.
        /// </summary>
        ///
        /// <value> True if do not validate authorization, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool DoNotValidateAuthorization { get; set; }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for get parameters base. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface IGetParametersBase : ICallParametersBase, IHasExcludeMemberSupport
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a unique identifier. </summary>
        ///
        /// <value> The identifier of the unique. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid UniqueId { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a unique identifier of the get. </summary>
        ///
        /// <value> Unique identifier of the get. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid GetGuid { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the get string. </summary>
        ///
        /// <value> The get string. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        String GetString { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the get u int 32. </summary>
        ///
        /// <value> The get u int 32. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        UInt32 GetUInt32 { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the get u int 16. </summary>
        ///
        /// <value> The get u int 16. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        UInt16 GetUInt16 { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the get int 32. </summary>
        ///
        /// <value> The get int 32. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Int32 GetInt32 { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the get int 16. </summary>
        ///
        /// <value> The get int 16. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Int16 GetInt16 { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the get date. </summary>
        ///
        /// <value> The get date. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        DateTimeOffset GetDate { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the Date/Time of the get date 2. </summary>
        ///
        /// <value> The get date 2. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        DateTimeOffset GetDate2 { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether or not to get for list. </summary>
        ///
        /// <value> True if get for list, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool GetForList { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether or not to get the bool. </summary>
        ///
        /// <value> True if get bool, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool GetBool { get; set; }

        //////////////////////////////////////////////////////////////////////////////////////////////////////
        ///// <summary>
        ///// Gets or sets a value indicating whether the member collections should be included.
        ///// </summary>
        /////
        ///// <value> True if include member collections, false if not. </value>
        //////////////////////////////////////////////////////////////////////////////////////////////////////

        //bool IncludeMemberCollections { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether the throw exception if not found.
        /// </summary>
        ///
        /// <value> True if throw exception if not found, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool ThrowExceptionIfNotFound { get; set; }

        //////////////////////////////////////////////////////////////////////////////////////////////////////
        ///// <summary>   Gets or sets the exclude member collection settings. </summary>
        /////
        ///// <value> The exclude member collection settings. </value>
        //////////////////////////////////////////////////////////////////////////////////////////////////////

        //ICollection<string> ExcludeMemberCollectionSettings { get; set; }

        //////////////////////////////////////////////////////////////////////////////////////////////////////
        ///// <summary>   Query if 'name' is excluded. </summary>
        /////
        ///// <param name="name"> The name. </param>
        /////
        ///// <returns>   True if excluded, false if not. </returns>
        /////=================================================================================================

        //bool IsExcluded(string name);
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets options for controlling the operation. </summary>
        ///
        /// <value> The options. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        ICollection<KeyValuePair<string, bool>> Options { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets an option. </summary>
        ///
        /// <param name="key">  The key. </param>
        ///
        /// <returns>   The option. </returns>
        ///=================================================================================================

        bool? GetOption(string key);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Adds an option to 'value'. </summary>
        ///
        /// <param name="key">      The key. </param>
        /// <param name="value">    True to value. </param>
        ///=================================================================================================

        void AddOption(string key, bool value);
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the account code. </summary>
        ///
        /// <value> The account code. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Int32 ClusterGroupId { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the cluster number. </summary>
        ///
        /// <value> The cluster number. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Int32 ClusterNumber { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the panel number. </summary>
        ///
        /// <value> The panel number. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Int32 PanelNumber { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the person UID. </summary>
        ///
        /// <value> The person UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid PersonUid { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the cluster UID. </summary>
        ///
        /// <value> The cluster UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid ClusterUid { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the cluster UID. </summary>
        ///
        /// <value> The cluster UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid MercScpGroupUid { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the page number. </summary>
        ///
        /// <value> The page number. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        int PageNumber { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the size of the page. </summary>
        ///
        /// <value> The size of the page. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        int PageSize { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether to order descending order. </summary>
        ///
        /// <value> True if descending order, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool DescendingOrder { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the sort property. </summary>
        ///
        /// <value> The sort property. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        string SortProperty { get; set; }
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether the hardware address should be included.
        /// </summary>
        ///
        /// <value> True if include hardware address, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IncludeHardwareAddress { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether the commands should be included.
        /// </summary>
        ///
        /// <value> True if include commands, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IncludeCommands { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a list of identifiers of the allowed entities. </summary>
        ///
        /// <value> A list of identifiers of the allowed entities. </value>
        ///=================================================================================================

        ICollection<Guid> AllowedEntityIds { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a list of identifiers of the allowed applications. </summary>
        ///
        /// <value> A list of identifiers of the allowed applications. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        ICollection<Guid> AllowedApplicationIds { get; set; }

        bool RefreshCache { get; set; }

        //bool ReadFromCache { get; set; }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for get parameters with photo. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface IGetParametersWithPhoto : IGetParametersBase
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the photo should be included. </summary>
        ///
        /// <value> True if include photo, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IncludePhoto { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the width of the photo pixel. </summary>
        ///
        /// <value> The width of the photo pixel. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        int PhotoPixelWidth { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the include photo links. </summary>
        ///
        /// <value> The include photo links. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool OmitPhotoBinaryData { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether the scaled photos should be included.
        /// </summary>
        ///
        /// <value> True if include scaled photos, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IncludeScaledPhotos { get; set; }


    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for get parameters. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ///
    /// <typeparam name="T">    Generic type parameter. </typeparam>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface IGetParameters<T> : IGetParametersBase where T : class, new()
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the data. </summary>
        ///
        /// <value> The data. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        T Data { get; set; }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for get parameters with photo. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ///
    /// <typeparam name="T">    Generic type parameter. </typeparam>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface IGetParametersWithPhoto<T> : IGetParameters<T> where T : class, new()
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the photo should be included. </summary>
        ///
        /// <value> True if include photo, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IncludePhoto { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the width of the photo pixel. </summary>
        ///
        /// <value> The width of the photo pixel. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        int PhotoPixelWidth { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the include photo links. </summary>
        ///
        /// <value> The include photo links. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool OmitPhotoBinaryData { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether the scaled photos should be included.
        /// </summary>
        ///
        /// <value> True if include scaled photos, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IncludeScaledPhotos { get; set; }

    }

    public enum SaveOperationType
    {
        AddOrUpdate,
        AddOnly,
        UpdateOnly
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for save parameters. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface ISaveParameters : ICallParametersBase, IHasExcludeMemberSupport
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether the throw exception if duplicate.
        /// </summary>
        ///
        /// <value> True if throw exception if duplicate, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool ThrowExceptionIfDuplicate { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the photo should be saveed. </summary>
        ///
        /// <value> True if save photo, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool SavePhoto { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets options for controlling the operation. </summary>
        ///
        /// <value> The options. </value>
        ///=================================================================================================

        ICollection<KeyValuePair<string, string>> Options { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the properties to ignore. </summary>
        ///
        /// <value> The ignore properties. </value>
        ///=================================================================================================

        ICollection<string> IgnoreProperties { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Determine if a specific property name is in the IgnoreProperties collection. </summary>
        ///
        /// <param name="name"> The name of the property to ignore. </param>
        ///
        /// <returns>   True if it succeeds, false if it fails. </returns>
        ///=================================================================================================

        bool Ignore(string name);

        KeyValuePair<string, string> OptionKvp(string key);
        string OptionValue(string key);
        T OptionValue<T>(string key);
        void AddOption<T>(string key, T value);
        Guid BackgroundJobId { get; set; }
        bool DoNotValidateAuthorization { get; set; }

        //bool IncludeMemberCollections { get; set; }
        //ICollection<string> ExcludeMemberCollectionSettings { get; set; }
        //bool IsExcluded(string name);
        // Used for response data
        bool IncludePhoto { get; set; }
        int PhotoPixelWidth { get; set; }
        bool OmitPhotoBinaryData { get; set; }
        bool IncludeScaledPhotos { get; set; }
        SaveOperationType SaveType { get; set; }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for save parameters. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ///
    /// <typeparam name="T">    Generic type parameter. </typeparam>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface ISaveParameters<T> : ISaveParameters where T : class, new()
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the data. </summary>
        ///
        /// <value> The data. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        T Data { get; set; }
    }


    public interface ISaveResponse 
    {
        Guid OperationUid { get; set; }
        SaveOperationType SaveType { get; set; }
        Dictionary<string, string[]> Errors { get; set; }

        //IValidationProblemDetails ValidationErrors { get; set; }
        HttpStatusCode HttpStatus { get; set; }
        //Exception Ex { get; set; }
    }

    public interface ISaveResponse<T> : ISaveResponse where T : class, new()
    {
        T Data { get; set; }

    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for delete parameters. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface IDeleteParameters : ICallParametersBase
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a unique identifier. </summary>
        ///
        /// <value> The identifier of the unique. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid UniqueId { get; set; }
        string StringValue { get; set; }
        ICollection<KeyValuePair<string, string>> Options { get; set; }
        KeyValuePair<string, string> OptionKvp(string key);
        string OptionValue(string key);
        T OptionValue<T>(string key);
        void AddOption<T>(string key, T value);

    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for delete parameters. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ///
    /// <typeparam name="T">    Generic type parameter. </typeparam>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface IDeleteParameters<T> : IDeleteParameters where T : class, new()
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the data. </summary>
        ///
        /// <value> The data. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        T Data { get; set; }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for command parameters. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface ICommandParameters : ICallParametersBase
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets options for controlling the operation. </summary>
        ///
        /// <value> The parameters. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        ICollection<KeyValuePair<string, string>> Parameters { get; set; }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for command parameters. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface ICommandResponse //: ICallParametersBase
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the operation UID. </summary>
        ///
        /// <value> The operation UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid OperationUid { get; set; }
    
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the request date time. </summary>
        ///
        /// <value> The request date time. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        DateTimeOffset RequestDateTime { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets options for controlling the operation. </summary>
        ///
        /// <value> The parameters. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        ICollection<KeyValuePair<string, string>> Parameters { get; set; }

        int ApproximateDuration { get; set; }

    }

    public interface ICommandResponse<T> : ICommandResponse where T : class, new()
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the data. </summary>
        ///
        /// <value> The data. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        T Data { get; set; }
    }


    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for command parameters. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ///
    /// <typeparam name="T">    Generic type parameter. </typeparam>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface ICommandParameters<T> : ICommandParameters where T : class, new()
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the data. </summary>
        ///
        /// <value> The data. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        T Data { get; set; }
    }


    public interface IHasExcludeMemberSupport
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the exclude member collection settings. </summary>
        ///
        /// <value> The exclude member collection settings. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        ICollection<string> ExcludeMemberCollectionSettings { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Query if 'name' is excluded. </summary>
        ///
        /// <param name="name"> The name. </param>
        ///
        /// <returns>   True if excluded, false if not. </returns>
        ///=================================================================================================

        bool IsExcluded(string name);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether the member collections should be included.
        /// </summary>
        ///
        /// <value> True if include member collections, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IncludeMemberCollections { get; set; }

    }


}