////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	IApplicationControlMonitor.cs
//
// summary:	Declares the IApplicationControlMonitor interface
////////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Xml;
using System.Xml.Serialization;

namespace GCS.Core.Common.Contracts
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   A message. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    [DataContract]
    public class Message
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the identifier of the message. </summary>
        ///
        /// <value> The identifier of the message. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public string MessageId { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the subject. </summary>
        ///
        /// <value> The subject. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public string Subject { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the category. </summary>
        ///
        /// <value> The category. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public string Category { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the tag. </summary>
        ///
        /// <value> The tag. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public string Tag { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets information describing the text. </summary>
        ///
        /// <value> Information describing the text. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public string TextData { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets information describing the binary. </summary>
        ///
        /// <value> Information describing the binary. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public byte[] BinaryData { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the messages. </summary>
        ///
        /// <value> The messages. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public Message[] Messages { get; set; }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for application control monitor. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    [ServiceContract(CallbackContract = typeof(IApplicationControlMonitorCallback))]
    public interface IApplicationControlMonitor
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a message one way. </summary>
        ///
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [OperationContract(IsOneWay = true)]
        void SendMessageOneWay(Message data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a message with response. </summary>
        ///
        /// <param name="data"> The data. </param>
        ///
        /// <returns>   A Message. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [OperationContract]
        Message SendMessageWithResponse(Message data);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for application control monitor callback. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface IApplicationControlMonitorCallback
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends an event message. </summary>
        ///
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [OperationContract(IsOneWay = true)]
        void SendEventMessage(Message data);
    }
}