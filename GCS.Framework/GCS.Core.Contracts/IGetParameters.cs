////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	IGetParameters.cs
//
// summary:	Declares the IGetParameters interface
////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;

namespace GCS.Core.Common.Contracts
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for call parameters base. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface ICallParametersBase
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the operation UID. </summary>
        ///
        /// <value> The operation UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid OperationUid { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the identifier of the session. </summary>
        ///
        /// <value> The identifier of the session. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid SessionId { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the current entity identifier. </summary>
        ///
        /// <value> The identifier of the current entity. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid CurrentEntityId { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the current site u identifier. </summary>
        ///
        /// <value> The identifier of the current site u. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid CurrentSiteUid { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the request date time. </summary>
        ///
        /// <value> The request date time. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        DateTimeOffset RequestDateTime { get; set; }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for get parameters base. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface IGetParametersBase : ICallParametersBase
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a unique identifier. </summary>
        ///
        /// <value> The identifier of the unique. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid UniqueId { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a unique identifier of the get. </summary>
        ///
        /// <value> Unique identifier of the get. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid GetGuid { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the get string. </summary>
        ///
        /// <value> The get string. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        String GetString { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the get u int 32. </summary>
        ///
        /// <value> The get u int 32. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        UInt32 GetUInt32 { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the get u int 16. </summary>
        ///
        /// <value> The get u int 16. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        UInt16 GetUInt16 { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the get int 32. </summary>
        ///
        /// <value> The get int 32. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Int32 GetInt32 { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the get int 16. </summary>
        ///
        /// <value> The get int 16. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Int16 GetInt16 { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether or not to get for list. </summary>
        ///
        /// <value> True if get for list, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool GetForList { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether the member collections should be included.
        /// </summary>
        ///
        /// <value> True if include member collections, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IncludeMemberCollections { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether the throw exception if not found.
        /// </summary>
        ///
        /// <value> True if throw exception if not found, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool ThrowExceptionIfNotFound { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the exclude member collection settings. </summary>
        ///
        /// <value> The exclude member collection settings. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        ICollection<KeyValuePair<string, bool>> ExcludeMemberCollectionSettings { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets options for controlling the operation. </summary>
        ///
        /// <value> The options. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        ICollection<KeyValuePair<string, bool>> Options { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the account code. </summary>
        ///
        /// <value> The account code. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        String ClusterGroupId { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the cluster number. </summary>
        ///
        /// <value> The cluster number. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Int32 ClusterNumber { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the panel number. </summary>
        ///
        /// <value> The panel number. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Int32 PanelNumber { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the person UID. </summary>
        ///
        /// <value> The person UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid PersonUid { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the cluster UID. </summary>
        ///
        /// <value> The cluster UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid ClusterUid { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the page number. </summary>
        ///
        /// <value> The page number. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        int PageNumber { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the size of the page. </summary>
        ///
        /// <value> The size of the page. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        int PageSize { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether the hardware address should be included.
        /// </summary>
        ///
        /// <value> True if include hardware address, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IncludeHardwareAddress {get;set;}

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether the commands should be included.
        /// </summary>
        ///
        /// <value> True if include commands, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IncludeCommands {get;set;}
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for get parameters with photo. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface IGetParametersWithPhoto : IGetParametersBase
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the photo should be included. </summary>
        ///
        /// <value> True if include photo, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IncludePhoto { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the width of the photo pixel. </summary>
        ///
        /// <value> The width of the photo pixel. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        int PhotoPixelWidth { get; set; }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for get parameters. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ///
    /// <typeparam name="T">    Generic type parameter. </typeparam>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface IGetParameters<T> : IGetParametersBase where T : class, new()
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the data. </summary>
        ///
        /// <value> The data. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        T Data { get; set; }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for get parameters with photo. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ///
    /// <typeparam name="T">    Generic type parameter. </typeparam>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface IGetParametersWithPhoto<T> : IGetParameters<T> where T : class, new()
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the photo should be included. </summary>
        ///
        /// <value> True if include photo, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IncludePhoto { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the width of the photo pixel. </summary>
        ///
        /// <value> The width of the photo pixel. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        int PhotoPixelWidth { get; set; }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for save parameters. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface ISaveParameters : ICallParametersBase
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether the throw exception if duplicate.
        /// </summary>
        ///
        /// <value> True if throw exception if duplicate, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool ThrowExceptionIfDuplicate { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the photo should be saveed. </summary>
        ///
        /// <value> True if save photo, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool SavePhoto { get; set; }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for save parameters. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ///
    /// <typeparam name="T">    Generic type parameter. </typeparam>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface ISaveParameters<T> : ISaveParameters where T : class, new()
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the data. </summary>
        ///
        /// <value> The data. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        T Data { get; set; }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for delete parameters. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface IDeleteParameters : ICallParametersBase
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a unique identifier. </summary>
        ///
        /// <value> The identifier of the unique. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid UniqueId { get; set; }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for delete parameters. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ///
    /// <typeparam name="T">    Generic type parameter. </typeparam>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface IDeleteParameters<T> : IDeleteParameters where T : class, new()
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the data. </summary>
        ///
        /// <value> The data. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        T Data { get; set; }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for command parameters. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface ICommandParameters : ICallParametersBase
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets options for controlling the operation. </summary>
        ///
        /// <value> The parameters. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        ICollection<KeyValuePair<string, string>> Parameters { get; set; }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for command parameters. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ///
    /// <typeparam name="T">    Generic type parameter. </typeparam>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface ICommandParameters<T> : ICommandParameters where T : class, new()
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the data. </summary>
        ///
        /// <value> The data. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        T Data { get; set; }
    }

}