////////////////////////////////////////////////////////////////////////////////////////////////////// file:	ApiControllerBase.cs//// summary:	Implements the API controller base class////////////////////////////////////////////////////////////////////////////////////////////////////using System;using System.Collections.Generic;using System.Linq;using System.Net;using System.Net.Http;using System.Reflection;using System.Security;using System.ServiceModel;using System.Text;using System.Threading.Tasks;using System.Web.Http;using System.Web.UI.WebControls;using GCS.Core.Common.Contracts;using GCS.Core.Common.Core;using GCS.Core.Common.Exceptions;using GCS.Core.Common.Logger;using GCS.Core.Common.ServiceModel;using GCS.Core.Common.Validation;namespace GCS.Core.Common.WebApi{    ////////////////////////////////////////////////////////////////////////////////////////////////////    /// <summary>   An API controller base. </summary>    ///    /// <remarks>   Kevin, 12/26/2018. </remarks>    ////////////////////////////////////////////////////////////////////////////////////////////////////    public class ApiControllerBase : ApiController, IServiceAwareController    {        /// <summary>   The disposable services. </summary>        List<IServiceContract> _DisposableServices;        /// <summary>   Information describing the client user session. </summary>        private readonly ApplicationUserSessionHeader _clientUserSessionData = new ApplicationUserSessionHeader();        ////////////////////////////////////////////////////////////////////////////////////////////////////        /// <summary>   Default constructor. </summary>        ///        /// <remarks>   Kevin, 12/26/2018. </remarks>        ////////////////////////////////////////////////////////////////////////////////////////////////////        public ApiControllerBase() : base()        {            if (this.Request != null)            {                try                {                    IEnumerable<string> headerValues;                    if (Request.Headers.TryGetValues(HeaderNames.ApplicationId, out headerValues))                    {                        if (headerValues != null)                        {                            var value = headerValues.FirstOrDefault();                            Guid g;                            if (Guid.TryParse(value, out g))                                ApplicationUserSessionHeader.ApplicationId = g;                        }                    }                    if (Request.Headers.TryGetValues(HeaderNames.ApplicationName, out headerValues))                    {                        if (headerValues != null)                            ApplicationUserSessionHeader.ApplicationName = headerValues.FirstOrDefault();                    }                    if (Request.Headers.TryGetValues(HeaderNames.ApplicationVersion, out headerValues))                    {                        if (headerValues != null)                            ApplicationUserSessionHeader.ApplicationVersion = headerValues.FirstOrDefault();                    }                    //if (Request.Headers.TryGetValues(HeaderNames.ClientDateTime, out headerValues))                    //{                    //    if (headerValues != null)                    //        ApplicationUserSessionHeader.ClientDateTime =                    //            Convert.ToDateTime(headerValues.FirstOrDefault());                    //}                    if (Request.Headers.TryGetValues(HeaderNames.ClientTimeZoneId, out headerValues))                    {                        if (headerValues != null)                            ApplicationUserSessionHeader.ClientTimeZoneId = headerValues.FirstOrDefault();                    }                    if (Request.Headers.TryGetValues(HeaderNames.Culture, out headerValues))                    {                        if (headerValues != null)                            ApplicationUserSessionHeader.Culture = headerValues.FirstOrDefault();                    }                    if (Request.Headers.TryGetValues(HeaderNames.MachineName, out headerValues))                    {                        if (headerValues != null)                            ApplicationUserSessionHeader.MachineName = headerValues.FirstOrDefault();                    }                    if (Request.Headers.TryGetValues(HeaderNames.OperationGuid, out headerValues))                    {                        if (headerValues != null)                        {                            var value = headerValues.FirstOrDefault();                            Guid g;                            if (Guid.TryParse(value, out g))                                ApplicationUserSessionHeader.OperationGuid = g;                        }                    }                    if (Request.Headers.TryGetValues(HeaderNames.ProductVersionBuild, out headerValues))                    {                        if (headerValues != null)                            ApplicationUserSessionHeader.ProductVersionBuild =                                Convert.ToInt32(headerValues.FirstOrDefault());                    }                    if (Request.Headers.TryGetValues(HeaderNames.ProductVersionMajor, out headerValues))                    {                        if (headerValues != null)                            ApplicationUserSessionHeader.ProductVersionMajor =                                Convert.ToInt32(headerValues.FirstOrDefault());                    }                    if (Request.Headers.TryGetValues(HeaderNames.ProductVersionMinor, out headerValues))                    {                        if (headerValues != null)                            ApplicationUserSessionHeader.ProductVersionMinor =                                Convert.ToInt32(headerValues.FirstOrDefault());                    }                    if (Request.Headers.TryGetValues(HeaderNames.ProductVersionRevision, out headerValues))                    {                        if (headerValues != null)                            ApplicationUserSessionHeader.ProductVersionRevision =                                Convert.ToInt32(headerValues.FirstOrDefault());                    }                    if (Request.Headers.TryGetValues(HeaderNames.SessionGuid, out headerValues))                    {                        if (headerValues != null)                        {                            var value = headerValues.FirstOrDefault();                            Guid g;                            if (Guid.TryParse(value, out g))                                ApplicationUserSessionHeader.SessionGuid = g;                        }                    }                    if (Request.Headers.TryGetValues(HeaderNames.UserName, out headerValues))                    {                        if (headerValues != null)                            ApplicationUserSessionHeader.UserName = headerValues.FirstOrDefault();                    }                    if (Request.Headers.TryGetValues(HeaderNames.UiCulture, out headerValues))                    {                        if (headerValues != null)                            ApplicationUserSessionHeader.UiCulture = headerValues.FirstOrDefault();                    }                    if (Request.Headers.TryGetValues(HeaderNames.CurrentEntityId, out headerValues))                    {                        if (headerValues != null)                        {                            var value = headerValues.FirstOrDefault();                            Guid g;                            if (Guid.TryParse(value, out g))                                ApplicationUserSessionHeader.CurrentEntityId = g;                        }                    }                }                catch (Exception ex)                {                    _clientUserSessionData = new ApplicationUserSessionHeader();                }            }            //try            //{            //    if (ObjectBase.Container != null)            //        ObjectBase.Container.SatisfyImportsOnce(this);            //    if (!string.IsNullOrWhiteSpace(LoginName))            //        _AuthorizationAccount = LoadAuthorizationValidationAccount(LoginName);            //}            //catch (Exception ex)            //{            //    if (ex.InnerException != null)            //        this.Log().DebugFormat("{0}", ex.InnerException.Message);            //    ExceptionDetailEx detail = new ExceptionDetailEx(ex);            //    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);            //}        }        ////////////////////////////////////////////////////////////////////////////////////////////////////        /// <summary>   Registers the services described by disposableServices. </summary>        ///        /// <remarks>   Kevin, 12/26/2018. </remarks>        ///        /// <param name="disposableServices">   The disposable services. </param>        ////////////////////////////////////////////////////////////////////////////////////////////////////        protected virtual void RegisterServices(List<IServiceContract> disposableServices)        {        }        ////////////////////////////////////////////////////////////////////////////////////////////////////        /// <summary>   Registers the disposable services described by disposableServices. </summary>        ///        /// <remarks>   Kevin, 12/26/2018. </remarks>        ///        /// <param name="disposableServices">   The disposable services. </param>        ////////////////////////////////////////////////////////////////////////////////////////////////////        void IServiceAwareController.RegisterDisposableServices(List<IServiceContract> disposableServices)        {            RegisterServices(disposableServices);        }        ////////////////////////////////////////////////////////////////////////////////////////////////////        /// <summary>   Gets the disposable services. </summary>        ///        /// <value> The disposable services. </value>        ////////////////////////////////////////////////////////////////////////////////////////////////////        List<IServiceContract> IServiceAwareController.DisposableServices        {            get            {                if (_DisposableServices == null)                    _DisposableServices = new List<IServiceContract>();                return _DisposableServices;            }        }        ////////////////////////////////////////////////////////////////////////////////////////////////////        /// <summary>   Validates the authorized user described by userRequested. </summary>        ///        /// <remarks>   Kevin, 12/26/2018. </remarks>        ///        /// <exception cref="SecurityException">    Thrown when a security violation occurs. </exception>        ///        /// <param name="userRequested">    The user requested. </param>        ////////////////////////////////////////////////////////////////////////////////////////////////////        protected void ValidateAuthorizedUser(string userRequested)        {            string userLoggedIn = User.Identity.Name;            if (userLoggedIn != userRequested)                throw new SecurityException("Attempting to access data for another user.");        }        ////////////////////////////////////////////////////////////////////////////////////////////////////        /// <summary>   Gets HTTP response. </summary>        ///        /// <remarks>   Kevin, 12/26/2018. </remarks>        ///        /// <param name="request">          The request. </param>        /// <param name="codeToExecute">    The code to execute. </param>        ///        /// <returns>   The HTTP response. </returns>        ////////////////////////////////////////////////////////////////////////////////////////////////////        protected HttpResponseMessage GetHttpResponse(HttpRequestMessage request,            Func<HttpResponseMessage> codeToExecute)        {            HttpResponseMessage response = null;            try            {                response = codeToExecute.Invoke();            }            catch (SecurityException ex)            {                response = request.CreateResponse(HttpStatusCode.Unauthorized, ex.Message);            }            catch (FaultException<AuthorizationValidationException> ex)            {                response = request.CreateResponse(HttpStatusCode.Unauthorized, ex.Message);            }            catch (FaultException ex)            {                response = request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);            }            catch (Exception ex)            {                response = request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);            }            return response;        }        ////////////////////////////////////////////////////////////////////////////////////////////////////        /// <summary>   Gets error response. </summary>        ///        /// <remarks>   Kevin, 12/26/2018. </remarks>        ///        /// <param name="request">  The request. </param>        /// <param name="error">    The error. </param>        /// <param name="message">  The message. </param>        ///        /// <returns>   The error response. </returns>        ////////////////////////////////////////////////////////////////////////////////////////////////////        protected HttpResponseMessage GetErrorResponse(HttpRequestMessage request, CustomError error, string message)        {            switch (error.ExceptionType)            {                case "System.UnauthorizedAccessException":                    return request.CreateResponse(HttpStatusCode.Unauthorized, message);                default:                    return request.CreateResponse(HttpStatusCode.InternalServerError, message);            }        }        ////////////////////////////////////////////////////////////////////////////////////////////////////        /// <summary>   Gets HTTP response asynchronous. </summary>        ///        /// <remarks>   Kevin, 12/26/2018. </remarks>        ///        /// <param name="request">          The request. </param>        /// <param name="codeToExecute">    The code to execute. </param>        ///        /// <returns>   The HTTP response asynchronous. </returns>        ////////////////////////////////////////////////////////////////////////////////////////////////////        protected async Task<HttpResponseMessage> GetHttpResponseAsync(HttpRequestMessage request,            Func<HttpResponseMessage> codeToExecute)        {            HttpResponseMessage response = await Task<HttpResponseMessage>.Run(() =>            {                try                {                    response = codeToExecute.Invoke();                }                catch (ArgumentNullException ex)                {                    response = request.CreateResponse(HttpStatusCode.BadRequest, ex.Message);                }                catch (SecurityException ex)                {                    response = request.CreateResponse(HttpStatusCode.Unauthorized, ex.Message);                }                catch (FaultException<SecurityException> ex)                {                    response = request.CreateResponse(HttpStatusCode.Unauthorized, ex.Message);                }                catch (FaultException<AuthorizationValidationException> ex)                {                    response = request.CreateResponse(HttpStatusCode.Unauthorized, ex.Message);                }                catch (FaultException ex)                {                    if (ex.Message.Contains("unauthorized"))                        response = request.CreateResponse(HttpStatusCode.Unauthorized, ex.Message);                    else                        response = request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);                    PropertyInfo pi = ex.GetType().GetProperty("Detail");                    if (pi != null)                    {                        Object rawDetail = pi.GetValue(ex);                        if (rawDetail != null)                        {                            var type = rawDetail.GetType();                            if (rawDetail is UnauthorizedAccessException)                            {                                response = request.CreateResponse(HttpStatusCode.Unauthorized, ex.Message);                            }                        }                         }                }                catch (Exception ex)                {                    response = request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);                }                return response;            });            return response;        }        ////////////////////////////////////////////////////////////////////////////////////////////////////        /// <summary>   Gets the application user session header. </summary>        ///        /// <value> The application user session header. </value>        ////////////////////////////////////////////////////////////////////////////////////////////////////        public ApplicationUserSessionHeader ApplicationUserSessionHeader        {            get { return _clientUserSessionData; }        }        ////////////////////////////////////////////////////////////////////////////////////////////////////        /// <summary>   Gets the name of the login. </summary>        ///        /// <value> The name of the login. </value>        ////////////////////////////////////////////////////////////////////////////////////////////////////        public string LoginName        {            get { return _clientUserSessionData.UserName; }        }        ////////////////////////////////////////////////////////////////////////////////////////////////////        /// <summary>   Gets a unique identifier of the galaxy user session. </summary>        ///        /// <value> Unique identifier of the galaxy user session. </value>        ////////////////////////////////////////////////////////////////////////////////////////////////////        public Guid GalaxyUserSessionGuid        {            get { return _clientUserSessionData.SessionGuid; }        }        ////////////////////////////////////////////////////////////////////////////////////////////////////        /// <summary>   Gets a unique identifier of the galaxy operation. </summary>        ///        /// <value> Unique identifier of the galaxy operation. </value>        ////////////////////////////////////////////////////////////////////////////////////////////////////        public Guid GalaxyOperationGuid        {            get { return _clientUserSessionData.OperationGuid; }        }        ////////////////////////////////////////////////////////////////////////////////////////////////////        /// <summary>   Gets the name of the culture. </summary>        ///        /// <value> The name of the culture. </value>        ////////////////////////////////////////////////////////////////////////////////////////////////////        public string CultureName        {            get { return _clientUserSessionData.Culture; }        }        ////////////////////////////////////////////////////////////////////////////////////////////////////        /// <summary>   Gets the name of the culture. </summary>        ///        /// <value> The name of the culture. </value>        ////////////////////////////////////////////////////////////////////////////////////////////////////        public string UiCultureName        {            get { return _clientUserSessionData.UiCulture; }        }        //public DateTimeOffset ClientDateTime        //{        //    get { return _clientUserSessionData.ClientDateTime; }        //}        ////////////////////////////////////////////////////////////////////////////////////////////////////        /// <summary>   Gets the identifier of the client time zone. </summary>        ///        /// <value> The identifier of the client time zone. </value>        ////////////////////////////////////////////////////////////////////////////////////////////////////        public string ClientTimeZoneId        {            get { return _clientUserSessionData.ClientTimeZoneId; }        }        ////////////////////////////////////////////////////////////////////////////////////////////////////        /// <summary>   Executes the fault handled operation operation. </summary>        ///        /// <remarks>   Kevin, 12/26/2018. </remarks>        ///        /// <exception cref="FaultException{AuthorizationValidationException}"> Thrown when a fault        ///                                                                     exception error condition        ///                                                                     occurs. </exception>        /// <exception cref="fe">                                               Thrown when a fe error        ///                                                                     condition occurs. </exception>        /// <exception cref="FaultException">                                   Thrown when a Fault error        ///                                                                     condition occurs. </exception>        ///        /// <typeparam name="T">    Generic type parameter. </typeparam>        /// <param name="codetoExecute">    The codeto execute. </param>        ///        /// <returns>   A T. </returns>        ////////////////////////////////////////////////////////////////////////////////////////////////////        protected T ExecuteFaultHandledOperation<T>(Func<T> codetoExecute)        {            try            {                return codetoExecute.Invoke();            }            catch (AuthorizationValidationException ex)            {                throw new FaultException<AuthorizationValidationException>(ex, ex.Message);            }            catch (DataValidationException ex)            {                ExceptionDetailEx detail = new ExceptionDetailEx(ex);                foreach (ValidationRule r in ex.ValidationRuleMessages)                    detail.AddMessage(r.Message);                FaultException<ExceptionDetailEx> fe = new FaultException<ExceptionDetailEx>(detail, ex.ToString());                throw fe;            }            catch (FaultException ex)            {                throw ex;            }            catch (Exception ex)            {                ExceptionDetailEx detail = new ExceptionDetailEx(ex);                while (ex.InnerException != null)                    ex = ex.InnerException;                string msg = ex.Message;                this.Log().DebugFormat("{0}", msg);                FaultException<ExceptionDetailEx> fe = new FaultException<ExceptionDetailEx>(detail, msg);                throw fe;            }        }        ////////////////////////////////////////////////////////////////////////////////////////////////////        /// <summary>   Executes the fault handled operation operation. </summary>        ///        /// <remarks>   Kevin, 12/26/2018. </remarks>        ///        /// <exception cref="FaultException{AuthorizationValidationException}"> Thrown when a fault        ///                                                                     exception error condition        ///                                                                     occurs. </exception>        /// <exception cref="FaultException">                                   Thrown when a Fault error        ///                                                                     condition occurs. </exception>        /// <exception cref="FaultException{ExceptionDetailEx}">                Thrown when a fault        ///                                                                     exception error condition        ///                                                                     occurs. </exception>        ///        /// <param name="codetoExecute">    The codeto execute. </param>        ////////////////////////////////////////////////////////////////////////////////////////////////////        protected void ExecuteFaultHandledOperation(Action codetoExecute)        {            try            {                codetoExecute.Invoke();            }            catch (AuthorizationValidationException ex)            {                throw new FaultException<AuthorizationValidationException>(ex, ex.Message);            }            catch (FaultException ex)            {                throw ex;            }            catch (Exception ex)            {                ExceptionDetailEx detail = new ExceptionDetailEx(ex);                throw new FaultException<ExceptionDetailEx>(detail, ex.Message);            }        }    }}