////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	Interfaces\IDialogService.cs
//
// summary:	Declares the IDialogService interface
////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using Telerik.Windows.Controls;
using ViewModelBase = GCS.Core.Common.UI.Core.ViewModelBase;

namespace GCS.Core.Common.UI.Interfaces
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for dialog service. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface IDialogService
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Shows the message box. </summary>
        ///
        /// <param name="content">  The content. </param>
        /// <param name="title">    The title. </param>
        /// <param name="buttons">  The buttons. </param>
        ///
        /// <returns>   A MessageBoxResult. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        MessageBoxResult ShowMessageBox(string content, string title, MessageBoxButton buttons);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Shows the dialog. </summary>
        ///
        /// <param name="viewModel">    The view model. </param>
        /// <param name="dialog">       The dialog. </param>
        ///
        /// <returns>   A Nullable&lt;bool&gt; </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Nullable<bool> ShowDialog(ViewModelBase viewModel, Window dialog);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Shows the dialog. </summary>
        ///
        /// <param name="userControl">  The user control. </param>
        /// <param name="dialog">       The dialog. </param>
        /// <param name="windowTitle">  The window title. </param>
        ///
        /// <returns>   A Nullable&lt;bool&gt; </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Nullable<bool> ShowDialog(UserControl userControl, Window dialog, string windowTitle);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Shows the dialog. </summary>
        ///
        /// <param name="viewModel">    The view model. </param>
        /// <param name="content">      The content. </param>
        /// <param name="dialog">       The dialog. </param>
        /// <param name="windowTitle">  The window title. </param>
        ///
        /// <returns>   A Nullable&lt;bool&gt; </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Nullable<bool> ShowDialog(ViewModelBase viewModel, object content, Window dialog, string windowTitle);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Shows the radians dialog. </summary>
        ///
        /// <param name="viewModel">    The view model. </param>
        /// <param name="dialog">       The dialog. </param>
        ///
        /// <returns>   A Nullable&lt;bool&gt; </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Nullable<bool> ShowRadDialog(ViewModelBase viewModel, RadWindow dialog);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Shows the radians dialog. </summary>
        ///
        /// <param name="userControl">  The user control. </param>
        /// <param name="dialog">       The dialog. </param>
        /// <param name="windowTitle">  The window title. </param>
        ///
        /// <returns>   A Nullable&lt;bool&gt; </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Nullable<bool> ShowRadDialog(UserControl userControl, RadWindow dialog, string windowTitle);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Shows the radians dialog. </summary>
        ///
        /// <param name="viewModel">    The view model. </param>
        /// <param name="content">      The content. </param>
        /// <param name="dialog">       The dialog. </param>
        /// <param name="windowTitle">  The window title. </param>
        ///
        /// <returns>   A Nullable&lt;bool&gt; </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Nullable<bool> ShowRadDialog(ViewModelBase viewModel, object content, RadWindow dialog, string windowTitle);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Shows the popup. </summary>
        ///
        /// <param name="viewModel">    The view model. </param>
        /// <param name="popup">        The popup. </param>
        ///
        /// <returns>   A Nullable&lt;bool&gt; </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Nullable<bool> ShowPopup(ViewModelBase viewModel, Popup popup);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Shows the popup. </summary>
        ///
        /// <param name="userControl">  The user control. </param>
        /// <param name="popup">        The popup. </param>
        ///
        /// <returns>   A Nullable&lt;bool&gt; </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Nullable<bool> ShowPopup(UserControl userControl, Popup popup);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Creates the window. </summary>
        ///
        /// <returns>   The new window. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Window CreateWindow();

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Creates radians window. </summary>
        ///
        /// <returns>   The new radians window. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        RadWindow CreateRadWindow();

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Creates the popup. </summary>
        ///
        /// <returns>   The new popup. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Popup CreatePopup();

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Alerts the given dialog parameters. </summary>
        ///
        /// <param name="content">  The content. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void Alert(object content);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Alerts the given dialog parameters. </summary>
        ///
        /// <param name="content">  The content. </param>
        /// <param name="closed">   The closed. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void Alert(object content, EventHandler<WindowClosedEventArgs> closed);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Alerts the given dialog parameters. </summary>
        ///
        /// <param name="dialogParameters"> Options for controlling the dialog. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void Alert(DialogParameters dialogParameters);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Prompts the given dialog parameters. </summary>
        ///
        /// <param name="content">  The content. </param>
        /// <param name="closed">   The closed. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void Prompt(object content, EventHandler<WindowClosedEventArgs> closed);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Prompts the given dialog parameters. </summary>
        ///
        /// <param name="content">              The content. </param>
        /// <param name="closed">               The closed. </param>
        /// <param name="defaultPromptResult">  The default prompt result. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void Prompt(object content, EventHandler<WindowClosedEventArgs> closed, string defaultPromptResult);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Prompts the given dialog parameters. </summary>
        ///
        /// <param name="dialogParameters"> Options for controlling the dialog. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void Prompt(DialogParameters dialogParameters);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Confirms. </summary>
        ///
        /// <param name="dialogParameters"> Options for controlling the dialog. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void Confirm(DialogParameters dialogParameters);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Confirms. </summary>
        ///
        /// <param name="content">  The content. </param>
        /// <param name="closed">   The closed. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void Confirm(object content, EventHandler<WindowClosedEventArgs> closed); 

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the view model. </summary>
        ///
        /// <value> The view model. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        ViewModelBase ViewModel { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the dialog window. </summary>
        ///
        /// <value> The dialog window. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Window DialogWindow { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the popup window. </summary>
        ///
        /// <value> The popup window. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Popup PopupWindow { get; set; }

    }
}
