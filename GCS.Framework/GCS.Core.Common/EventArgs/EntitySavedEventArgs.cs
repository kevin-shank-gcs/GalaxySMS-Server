////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	EventArgs\EntitySavedEventArgs.cs
//
// summary:	Implements the entity saved event arguments class
////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GCS.Core.Common
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Additional information for entity saved events. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ///
    /// <typeparam name="T">    Generic type parameter. </typeparam>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public class EntitySavedEventArgs<T> : EventArgs
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Default constructor. </summary>
        ///
        /// <remarks>   Kevin, 12/26/2018. </remarks>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public EntitySavedEventArgs()
        {
            IsNew = false;
            CloseEditor = true;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Constructor. </summary>
        ///
        /// <remarks>   Kevin, 12/26/2018. </remarks>
        ///
        /// <param name="entity">       The entity. </param>
        /// <param name="isNew">        True if this EntitySavedEventArgs&lt;T&gt; is new, false if not. </param>
        /// <param name="closeEditor">  True if close editor, false if not. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public EntitySavedEventArgs(T entity, bool isNew, bool closeEditor)
        {
            Entity = entity;
            IsNew = isNew;
            CloseEditor = closeEditor;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the entity. </summary>
        ///
        /// <value> The entity. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public T Entity { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether this EntitySavedEventArgs&lt;T&gt; is new.
        /// </summary>
        ///
        /// <value> True if this EntitySavedEventArgs&lt;T&gt; is new, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public bool IsNew { get; set; }     

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the editor should be closed. </summary>
        ///
        /// <value> True if close editor, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public bool CloseEditor { get; set; }   
    }
}
