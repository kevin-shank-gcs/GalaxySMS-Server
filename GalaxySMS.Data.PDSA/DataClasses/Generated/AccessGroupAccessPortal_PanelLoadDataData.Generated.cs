using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Select data from the AccessGroupAccessPortal_PanelLoadDataPDSA view.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class AccessGroupAccessPortal_PanelLoadDataPDSAData : PDSADataClassReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the AccessGroupAccessPortal_PanelLoadDataPDSAData class
    /// </summary>
    public AccessGroupAccessPortal_PanelLoadDataPDSAData() : base()
    {
      Entity = new AccessGroupAccessPortal_PanelLoadDataPDSA();
      ValidatorObject = new AccessGroupAccessPortal_PanelLoadDataPDSAValidator(Entity);

      Init();
    }
    
    /// <summary>
    /// Constructor for the AccessGroupAccessPortal_PanelLoadDataPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a AccessGroupAccessPortal_PanelLoadDataPDSA</param>
    public AccessGroupAccessPortal_PanelLoadDataPDSAData(PDSADataProvider dataProvider,
      AccessGroupAccessPortal_PanelLoadDataPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new AccessGroupAccessPortal_PanelLoadDataPDSAValidator(Entity);

      Init();
    }
     
    /// <summary>
    /// Constructor for the AccessGroupAccessPortal_PanelLoadDataPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a AccessGroupAccessPortal_PanelLoadDataPDSA</param>
    /// <param name="validator">An instance of a AccessGroupAccessPortal_PanelLoadDataPDSAValidator</param>
    public AccessGroupAccessPortal_PanelLoadDataPDSAData(PDSADataProvider dataProvider,
      AccessGroupAccessPortal_PanelLoadDataPDSA entity, AccessGroupAccessPortal_PanelLoadDataPDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// A Custom SelectFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a WHERE statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum WhereFilters
    {
      /// <summary>
      /// No WhereFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom WhereFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'AccessGroupName' WhereFilter
      /// </summary>
      AccessGroupName
      ,
      /// <summary>
      /// 'AccessGroupUid' WhereFilter
      /// </summary>
      AccessGroupUid
      ,
      /// <summary>
      /// 'AccessPortalUid' WhereFilter
      /// </summary>
      AccessPortalUid
      ,
      /// <summary>
      /// 'LikeAccessGroupName' WhereFilter
      /// </summary>
      LikeAccessGroupName
    }

    /// <summary>
    /// Enumeration for selecting an ORDER BY statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum OrderByFilters
    {
      /// <summary>
      /// No OrderByFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'AccessGroupName' OrderByFilter
      /// </summary>
      AccessGroupName
    }
    
    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }
    /// <summary>
    /// Get/Set a WHERE clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public WhereFilters WhereFilter { get; set; }
    /// <summary>
    /// Get/Set a ORDER BY clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public OrderByFilters OrderByFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Public Property Entity Class
        private AccessGroupAccessPortal_PanelLoadDataPDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public AccessGroupAccessPortal_PanelLoadDataPDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "AccessGroupAccessPortal_PanelLoadDataPDSAData";
      DBObjectName = "GCS.AccessGroupAccessPortal_PanelLoadData";
      SchemaName = "GCS";
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;
      
      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes all of the Data Columns with valid data for each field in the table.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupAccessPortalUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.TimeScheduleName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelScheduleNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ActivationDate);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ExpirationDate);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsEnabled);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.TimeScheduleUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CurrentTimeForCluster);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupLoadToCpuUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DefaultTimeScheduleName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DefaultTimeScheduleNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsConnected);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsNodeActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupAccessPortalUid).Value = Entity.AccessGroupAccessPortalUid;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupAccessPortalUid).SetAsNull == true)
        Entity.AccessGroupAccessPortalUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupName).Value = Entity.AccessGroupName;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupName).SetAsNull == true)
        Entity.AccessGroupName = string.Empty;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.TimeScheduleName).Value = Entity.TimeScheduleName;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.TimeScheduleName).SetAsNull == true)
        Entity.TimeScheduleName = string.Empty;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalName).Value = Entity.AccessPortalName;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalName).SetAsNull == true)
        Entity.AccessPortalName = string.Empty;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId).Value = Entity.ClusterGroupId;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId).SetAsNull == true)
        Entity.ClusterGroupId = 0;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber).Value = Entity.ClusterNumber;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber).SetAsNull == true)
        Entity.ClusterNumber = 0;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber).Value = Entity.PanelNumber;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber).SetAsNull == true)
        Entity.PanelNumber = 0;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber).Value = Entity.BoardNumber;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber).SetAsNull == true)
        Entity.BoardNumber = 0;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber).Value = Entity.SectionNumber;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber).SetAsNull == true)
        Entity.SectionNumber = 0;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber).Value = Entity.ModuleNumber;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber).SetAsNull == true)
        Entity.ModuleNumber = 0;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber).Value = Entity.NodeNumber;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber).SetAsNull == true)
        Entity.NodeNumber = 0;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupNumber).Value = Entity.AccessGroupNumber;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupNumber).SetAsNull == true)
        Entity.AccessGroupNumber = 0;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelScheduleNumber).Value = Entity.PanelScheduleNumber;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelScheduleNumber).SetAsNull == true)
        Entity.PanelScheduleNumber = null;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ActivationDate).Value = Entity.ActivationDate;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ActivationDate).SetAsNull == true)
        Entity.ActivationDate = null;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ExpirationDate).Value = Entity.ExpirationDate;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ExpirationDate).SetAsNull == true)
        Entity.ExpirationDate = null;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsEnabled).Value = Entity.IsEnabled;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsEnabled).SetAsNull == true)
        Entity.IsEnabled = false;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalUid).Value = Entity.AccessPortalUid;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalUid).SetAsNull == true)
        Entity.AccessPortalUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.TimeScheduleUid).Value = Entity.TimeScheduleUid;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.TimeScheduleUid).SetAsNull == true)
        Entity.TimeScheduleUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupUid).Value = Entity.AccessGroupUid;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupUid).SetAsNull == true)
        Entity.AccessGroupUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeTypeCode).Value = Entity.AccessPortalBoardTypeTypeCode;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeTypeCode).SetAsNull == true)
        Entity.AccessPortalBoardTypeTypeCode = 0;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CurrentTimeForCluster).Value = Entity.CurrentTimeForCluster;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CurrentTimeForCluster).SetAsNull == true)
        Entity.CurrentTimeForCluster = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid).Value = Entity.ClusterUid;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid).SetAsNull == true)
        Entity.ClusterUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid).Value = Entity.GalaxyPanelUid;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid).SetAsNull == true)
        Entity.GalaxyPanelUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber).Value = Entity.CpuNumber;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber).SetAsNull == true)
        Entity.CpuNumber = 0;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuUid).Value = Entity.CpuUid;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuUid).SetAsNull == true)
        Entity.CpuUid = string.Empty;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupLoadToCpuUid).Value = Entity.AccessGroupLoadToCpuUid;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupLoadToCpuUid).SetAsNull == true)
        Entity.AccessGroupLoadToCpuUid = string.Empty;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress).Value = Entity.ServerAddress;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress).SetAsNull == true)
        Entity.ServerAddress = string.Empty;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DefaultTimeScheduleName).Value = Entity.DefaultTimeScheduleName;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DefaultTimeScheduleName).SetAsNull == true)
        Entity.DefaultTimeScheduleName = string.Empty;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DefaultTimeScheduleNumber).Value = Entity.DefaultTimeScheduleNumber;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DefaultTimeScheduleNumber).SetAsNull == true)
        Entity.DefaultTimeScheduleNumber = 0;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsConnected).Value = Entity.IsConnected;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsConnected).SetAsNull == true)
        Entity.IsConnected = 0;
      ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsNodeActive).Value = Entity.IsNodeActive;
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsNodeActive).SetAsNull == true)
        Entity.IsNodeActive = false;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupAccessPortalUid).IsNull == false)
        Entity.AccessGroupAccessPortalUid = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupAccessPortalUid).GetAsGuid();
      else
        Entity.AccessGroupAccessPortalUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupAccessPortalUid, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupAccessPortalUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupName).IsNull == false)
        Entity.AccessGroupName = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupName).GetAsString();
      else
        Entity.AccessGroupName = string.Empty;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupName, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupName).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.TimeScheduleName).IsNull == false)
        Entity.TimeScheduleName = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.TimeScheduleName).GetAsString();
      else
        Entity.TimeScheduleName = string.Empty;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.TimeScheduleName, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.TimeScheduleName).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalName).IsNull == false)
        Entity.AccessPortalName = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalName).GetAsString();
      else
        Entity.AccessPortalName = string.Empty;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalName, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalName).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId).IsNull == false)
        Entity.ClusterGroupId = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId).GetAsInteger();
      else
        Entity.ClusterGroupId = 0;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber).IsNull == false)
        Entity.ClusterNumber = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber).GetAsInteger();
      else
        Entity.ClusterNumber = 0;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber).IsNull == false)
        Entity.PanelNumber = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber).GetAsInteger();
      else
        Entity.PanelNumber = 0;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber).IsNull == false)
        Entity.BoardNumber = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber).GetAsShort();
      else
        Entity.BoardNumber = 0;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber).IsNull == false)
        Entity.SectionNumber = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber).GetAsShort();
      else
        Entity.SectionNumber = 0;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber).IsNull == false)
        Entity.ModuleNumber = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber).GetAsShort();
      else
        Entity.ModuleNumber = 0;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber).IsNull == false)
        Entity.NodeNumber = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber).GetAsShort();
      else
        Entity.NodeNumber = 0;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupNumber).IsNull == false)
        Entity.AccessGroupNumber = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupNumber).GetAsInteger();
      else
        Entity.AccessGroupNumber = 0;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupNumber, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelScheduleNumber).IsNull == false)
        Entity.PanelScheduleNumber = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelScheduleNumber).GetAsInteger();
      else
        Entity.PanelScheduleNumber = null;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelScheduleNumber, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelScheduleNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ActivationDate).IsNull == false)
        Entity.ActivationDate = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ActivationDate).GetAsDate();
      else
        Entity.ActivationDate = null;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ActivationDate, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ActivationDate).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ExpirationDate).IsNull == false)
        Entity.ExpirationDate = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ExpirationDate).GetAsDate();
      else
        Entity.ExpirationDate = null;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ExpirationDate, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ExpirationDate).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsEnabled).IsNull == false)
        Entity.IsEnabled = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsEnabled).GetAsBool();
      else
        Entity.IsEnabled = false;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsEnabled, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsEnabled).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalUid).IsNull == false)
        Entity.AccessPortalUid = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalUid).GetAsGuid();
      else
        Entity.AccessPortalUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalUid, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.TimeScheduleUid).IsNull == false)
        Entity.TimeScheduleUid = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.TimeScheduleUid).GetAsGuid();
      else
        Entity.TimeScheduleUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.TimeScheduleUid, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.TimeScheduleUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupUid).IsNull == false)
        Entity.AccessGroupUid = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupUid).GetAsGuid();
      else
        Entity.AccessGroupUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupUid, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeTypeCode).IsNull == false)
        Entity.AccessPortalBoardTypeTypeCode = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeTypeCode).GetAsShort();
      else
        Entity.AccessPortalBoardTypeTypeCode = 0;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeTypeCode, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CurrentTimeForCluster).IsNull == false)
        Entity.CurrentTimeForCluster = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CurrentTimeForCluster).GetAsDateTimeOffset();
      else
        Entity.CurrentTimeForCluster = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CurrentTimeForCluster, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CurrentTimeForCluster).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid).IsNull == false)
        Entity.ClusterUid = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid).GetAsGuid();
      else
        Entity.ClusterUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid).IsNull == false)
        Entity.GalaxyPanelUid = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid).GetAsGuid();
      else
        Entity.GalaxyPanelUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber).IsNull == false)
        Entity.CpuNumber = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber).GetAsInteger();
      else
        Entity.CpuNumber = 0;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuUid).IsNull == false)
        Entity.CpuUid = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuUid).GetAsString();
      else
        Entity.CpuUid = string.Empty;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuUid, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupLoadToCpuUid).IsNull == false)
        Entity.AccessGroupLoadToCpuUid = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupLoadToCpuUid).GetAsString();
      else
        Entity.AccessGroupLoadToCpuUid = string.Empty;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupLoadToCpuUid, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGroupLoadToCpuUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress).IsNull == false)
        Entity.ServerAddress = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress).GetAsString();
      else
        Entity.ServerAddress = string.Empty;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DefaultTimeScheduleName).IsNull == false)
        Entity.DefaultTimeScheduleName = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DefaultTimeScheduleName).GetAsString();
      else
        Entity.DefaultTimeScheduleName = string.Empty;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DefaultTimeScheduleName, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DefaultTimeScheduleName).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DefaultTimeScheduleNumber).IsNull == false)
        Entity.DefaultTimeScheduleNumber = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DefaultTimeScheduleNumber).GetAsInteger();
      else
        Entity.DefaultTimeScheduleNumber = 0;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DefaultTimeScheduleNumber, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DefaultTimeScheduleNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsConnected).IsNull == false)
        Entity.IsConnected = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsConnected).GetAsInteger();
      else
        Entity.IsConnected = 0;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsConnected, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsConnected).Value);

      if (ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsNodeActive).IsNull == false)
        Entity.IsNodeActive = ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsNodeActive).GetAsBool();
      else
        Entity.IsNodeActive = false;
      Entity.SetOriginalValueForProperty(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsNodeActive, ValidatorObject.Properties.GetByName(AccessGroupAccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsNodeActive).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>AccessGroupAccessPortal_PanelLoadDataPDSA</returns>
    public AccessGroupAccessPortal_PanelLoadDataPDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new AccessGroupAccessPortal_PanelLoadDataPDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          
          
          break;
        case SelectFilters.Search:
          
          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL that will count the number of rows returned from this view.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          
          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      sb.Append(WhereClauseSQL());
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion
    
    #region WhereClauseSQL Method
    /// <summary>
    /// Builds the WHERE clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string WhereClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (WhereFilter)
      {
        case WhereFilters.Custom:
          sb.Append(" " + WhereCustom);

          break;

        case WhereFilters.None:
          //  Do nothing

          break;

        case WhereFilters.AccessGroupName:
          
          
          break;
        case WhereFilters.AccessGroupUid:
          
          
          break;
        case WhereFilters.AccessPortalUid:
          
          
          break;
        case WhereFilters.LikeAccessGroupName:
          
          
          break;
      }
      
      return sb.ToString();
    }
    #endregion

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
         
          break;
        case SelectFilters.Search:
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion

    #region WhereClauseFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any WHERE clause parameters.
    /// </summary>
    protected override void WhereClauseFillInParameters()
    {
      switch (WhereFilter)
      {
        case WhereFilters.AccessGroupName:
         
          break;
        case WhereFilters.AccessGroupUid:
         
          break;
        case WhereFilters.AccessPortalUid:
         
          break;
        case WhereFilters.LikeAccessGroupName:
         
          break;
      }
    }
    #endregion

    #region OrderByClauseSQL Method
    /// <summary>
    /// Builds the ORDER BY clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string OrderByClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (OrderByFilter)
      {
        case OrderByFilters.None:
          //  Do Nothing

          break;

        case OrderByFilters.Custom:
          sb.Append(" " + OrderByCustom);

          break;
          
        case OrderByFilters.AccessGroupName:
          
          
          break;
      }

      return sb.ToString();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the AccessGroupAccessPortal_PanelLoadDataPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'AccessGroupAccessPortalUid'
    /// </summary>
    public static string AccessGroupAccessPortalUid = "AccessGroupAccessPortalUid";
    /// <summary>
    /// Returns 'AccessGroupName'
    /// </summary>
    public static string AccessGroupName = "AccessGroupName";
    /// <summary>
    /// Returns 'TimeScheduleName'
    /// </summary>
    public static string TimeScheduleName = "TimeScheduleName";
    /// <summary>
    /// Returns 'AccessPortalName'
    /// </summary>
    public static string AccessPortalName = "AccessPortalName";
    /// <summary>
    /// Returns 'ClusterGroupId'
    /// </summary>
    public static string ClusterGroupId = "ClusterGroupId";
    /// <summary>
    /// Returns 'ClusterNumber'
    /// </summary>
    public static string ClusterNumber = "ClusterNumber";
    /// <summary>
    /// Returns 'PanelNumber'
    /// </summary>
    public static string PanelNumber = "PanelNumber";
    /// <summary>
    /// Returns 'BoardNumber'
    /// </summary>
    public static string BoardNumber = "BoardNumber";
    /// <summary>
    /// Returns 'SectionNumber'
    /// </summary>
    public static string SectionNumber = "SectionNumber";
    /// <summary>
    /// Returns 'ModuleNumber'
    /// </summary>
    public static string ModuleNumber = "ModuleNumber";
    /// <summary>
    /// Returns 'NodeNumber'
    /// </summary>
    public static string NodeNumber = "NodeNumber";
    /// <summary>
    /// Returns 'AccessGroupNumber'
    /// </summary>
    public static string AccessGroupNumber = "AccessGroupNumber";
    /// <summary>
    /// Returns 'PanelScheduleNumber'
    /// </summary>
    public static string PanelScheduleNumber = "PanelScheduleNumber";
    /// <summary>
    /// Returns 'ActivationDate'
    /// </summary>
    public static string ActivationDate = "ActivationDate";
    /// <summary>
    /// Returns 'ExpirationDate'
    /// </summary>
    public static string ExpirationDate = "ExpirationDate";
    /// <summary>
    /// Returns 'IsEnabled'
    /// </summary>
    public static string IsEnabled = "IsEnabled";
    /// <summary>
    /// Returns 'AccessPortalUid'
    /// </summary>
    public static string AccessPortalUid = "AccessPortalUid";
    /// <summary>
    /// Returns 'TimeScheduleUid'
    /// </summary>
    public static string TimeScheduleUid = "TimeScheduleUid";
    /// <summary>
    /// Returns 'AccessGroupUid'
    /// </summary>
    public static string AccessGroupUid = "AccessGroupUid";
    /// <summary>
    /// Returns 'AccessPortalBoardTypeTypeCode'
    /// </summary>
    public static string AccessPortalBoardTypeTypeCode = "AccessPortalBoardTypeTypeCode";
    /// <summary>
    /// Returns 'CurrentTimeForCluster'
    /// </summary>
    public static string CurrentTimeForCluster = "CurrentTimeForCluster";
    /// <summary>
    /// Returns 'ClusterUid'
    /// </summary>
    public static string ClusterUid = "ClusterUid";
    /// <summary>
    /// Returns 'GalaxyPanelUid'
    /// </summary>
    public static string GalaxyPanelUid = "GalaxyPanelUid";
    /// <summary>
    /// Returns 'CpuNumber'
    /// </summary>
    public static string CpuNumber = "CpuNumber";
    /// <summary>
    /// Returns 'CpuUid'
    /// </summary>
    public static string CpuUid = "CpuUid";
    /// <summary>
    /// Returns 'AccessGroupLoadToCpuUid'
    /// </summary>
    public static string AccessGroupLoadToCpuUid = "AccessGroupLoadToCpuUid";
    /// <summary>
    /// Returns 'ServerAddress'
    /// </summary>
    public static string ServerAddress = "ServerAddress";
    /// <summary>
    /// Returns 'DefaultTimeScheduleName'
    /// </summary>
    public static string DefaultTimeScheduleName = "DefaultTimeScheduleName";
    /// <summary>
    /// Returns 'DefaultTimeScheduleNumber'
    /// </summary>
    public static string DefaultTimeScheduleNumber = "DefaultTimeScheduleNumber";
    /// <summary>
    /// Returns 'IsConnected'
    /// </summary>
    public static string IsConnected = "IsConnected";
    /// <summary>
    /// Returns 'IsNodeActive'
    /// </summary>
    public static string IsNodeActive = "IsNodeActive";
    }
    #endregion
  }
}
