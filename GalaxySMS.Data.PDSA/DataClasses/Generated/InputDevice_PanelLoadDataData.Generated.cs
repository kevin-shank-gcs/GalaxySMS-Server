using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Select data from the InputDevice_PanelLoadDataPDSA view.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class InputDevice_PanelLoadDataPDSAData : PDSADataClassReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the InputDevice_PanelLoadDataPDSAData class
    /// </summary>
    public InputDevice_PanelLoadDataPDSAData() : base()
    {
      Entity = new InputDevice_PanelLoadDataPDSA();
      ValidatorObject = new InputDevice_PanelLoadDataPDSAValidator(Entity);

      Init();
    }
    
    /// <summary>
    /// Constructor for the InputDevice_PanelLoadDataPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a InputDevice_PanelLoadDataPDSA</param>
    public InputDevice_PanelLoadDataPDSAData(PDSADataProvider dataProvider,
      InputDevice_PanelLoadDataPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new InputDevice_PanelLoadDataPDSAValidator(Entity);

      Init();
    }
     
    /// <summary>
    /// Constructor for the InputDevice_PanelLoadDataPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a InputDevice_PanelLoadDataPDSA</param>
    /// <param name="validator">An instance of a InputDevice_PanelLoadDataPDSAValidator</param>
    public InputDevice_PanelLoadDataPDSAData(PDSADataProvider dataProvider,
      InputDevice_PanelLoadDataPDSA entity, InputDevice_PanelLoadDataPDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// A Custom SelectFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a WHERE statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum WhereFilters
    {
      /// <summary>
      /// No WhereFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom WhereFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'ClusterUid' WhereFilter
      /// </summary>
      ClusterUid
      ,
      /// <summary>
      /// 'GalaxyHardwareModuleUid' WhereFilter
      /// </summary>
      GalaxyHardwareModuleUid
      ,
      /// <summary>
      /// 'GalaxyInterfaceBoardSectionNodeUid' WhereFilter
      /// </summary>
      GalaxyInterfaceBoardSectionNodeUid
      ,
      /// <summary>
      /// 'GalaxyInterfaceBoardSectionUid' WhereFilter
      /// </summary>
      GalaxyInterfaceBoardSectionUid
      ,
      /// <summary>
      /// 'GalaxyInterfaceBoardUid' WhereFilter
      /// </summary>
      GalaxyInterfaceBoardUid
      ,
      /// <summary>
      /// 'GalaxyPanelUid' WhereFilter
      /// </summary>
      GalaxyPanelUid
      ,
      /// <summary>
      /// 'InputDeviceUid' WhereFilter
      /// </summary>
      InputDeviceUid
      ,
      /// <summary>
      /// 'InputName' WhereFilter
      /// </summary>
      InputName
      ,
      /// <summary>
      /// 'LikeInputName' WhereFilter
      /// </summary>
      LikeInputName
    }

    /// <summary>
    /// Enumeration for selecting an ORDER BY statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum OrderByFilters
    {
      /// <summary>
      /// No OrderByFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'HardwareAddress' OrderByFilter
      /// </summary>
      HardwareAddress
      ,
      /// <summary>
      /// 'InputName' OrderByFilter
      /// </summary>
      InputName
    }
    
    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }
    /// <summary>
    /// Get/Set a WHERE clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public WhereFilters WhereFilter { get; set; }
    /// <summary>
    /// Get/Set a ORDER BY clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public OrderByFilters OrderByFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Public Property Entity Class
        private InputDevice_PanelLoadDataPDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public InputDevice_PanelLoadDataPDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "InputDevice_PanelLoadDataPDSAData";
      DBObjectName = "GCS.InputDevice_PanelLoadData";
      SchemaName = "GCS";
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;
      
      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes all of the Data Columns with valid data for each field in the table.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyHardwareModuleUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsInputActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardSectionMode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsNodeActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardSectionModeDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsModuleActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDevicePanelModelTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceCpuTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardTypeModel);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardTypeTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardTypeDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.SupervisionTypeDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.HasSeriesResistor);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.HasParallelResistor);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsNormalOpen);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.TroubleShortThreshold);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.TroubleOpenThreshold);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.NormalChangeThreshold);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateNormalChangeThreshold);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateTroubleOpenThreshold);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateTroubleShortThreshold);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateVoltagesEnabled);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputModeDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputModeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputDelayTypeDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputDelayTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupTag);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupIsLocal);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupOffset);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.DelayDuration);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.DisableDisarmedOnOffLogEvents);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmControlScheduleDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputDevicePropertiesLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup1LastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup2LastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmControlScheduleNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup3LastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup4LastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainScheduleLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup1Display);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber1);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup1IsLocal);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup2Display);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber2);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup2IsLocal);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup3Display);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber3);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup3IsLocal);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup4Display);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber4);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup4IsLocal);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsConnected);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceUid).Value = Entity.InputDeviceUid;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceUid).SetAsNull == true)
        Entity.InputDeviceUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid).Value = Entity.ClusterUid;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid).SetAsNull == true)
        Entity.ClusterUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid).Value = Entity.GalaxyPanelUid;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid).SetAsNull == true)
        Entity.GalaxyPanelUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).Value = Entity.GalaxyInterfaceBoardUid;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).SetAsNull == true)
        Entity.GalaxyInterfaceBoardUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).Value = Entity.GalaxyInterfaceBoardSectionUid;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).SetAsNull == true)
        Entity.GalaxyInterfaceBoardSectionUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).Value = Entity.GalaxyHardwareModuleUid;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).SetAsNull == true)
        Entity.GalaxyHardwareModuleUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).Value = Entity.GalaxyInterfaceBoardSectionNodeUid;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).SetAsNull == true)
        Entity.GalaxyInterfaceBoardSectionNodeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputName).Value = Entity.InputName;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputName).SetAsNull == true)
        Entity.InputName = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId).Value = Entity.ClusterGroupId;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId).SetAsNull == true)
        Entity.ClusterGroupId = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber).Value = Entity.ClusterNumber;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber).SetAsNull == true)
        Entity.ClusterNumber = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber).Value = Entity.PanelNumber;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber).SetAsNull == true)
        Entity.PanelNumber = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber).Value = Entity.BoardNumber;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber).SetAsNull == true)
        Entity.BoardNumber = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber).Value = Entity.SectionNumber;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber).SetAsNull == true)
        Entity.SectionNumber = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber).Value = Entity.ModuleNumber;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber).SetAsNull == true)
        Entity.ModuleNumber = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber).Value = Entity.NodeNumber;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber).SetAsNull == true)
        Entity.NodeNumber = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsInputActive).Value = Entity.IsInputActive;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsInputActive).SetAsNull == true)
        Entity.IsInputActive = false;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardSectionMode).Value = Entity.InputDeviceBoardSectionMode;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardSectionMode).SetAsNull == true)
        Entity.InputDeviceBoardSectionMode = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsNodeActive).Value = Entity.IsNodeActive;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsNodeActive).SetAsNull == true)
        Entity.IsNodeActive = false;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardSectionModeDisplay).Value = Entity.InputDeviceBoardSectionModeDisplay;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardSectionModeDisplay).SetAsNull == true)
        Entity.InputDeviceBoardSectionModeDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsModuleActive).Value = Entity.IsModuleActive;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsModuleActive).SetAsNull == true)
        Entity.IsModuleActive = false;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDevicePanelModelTypeCode).Value = Entity.InputDevicePanelModelTypeCode;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDevicePanelModelTypeCode).SetAsNull == true)
        Entity.InputDevicePanelModelTypeCode = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceCpuTypeCode).Value = Entity.InputDeviceCpuTypeCode;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceCpuTypeCode).SetAsNull == true)
        Entity.InputDeviceCpuTypeCode = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardTypeModel).Value = Entity.InputDeviceBoardTypeModel;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardTypeModel).SetAsNull == true)
        Entity.InputDeviceBoardTypeModel = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardTypeTypeCode).Value = Entity.InputDeviceBoardTypeTypeCode;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardTypeTypeCode).SetAsNull == true)
        Entity.InputDeviceBoardTypeTypeCode = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardTypeDisplay).Value = Entity.InputDeviceBoardTypeDisplay;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardTypeDisplay).SetAsNull == true)
        Entity.InputDeviceBoardTypeDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.SupervisionTypeDisplay).Value = Entity.SupervisionTypeDisplay;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.SupervisionTypeDisplay).SetAsNull == true)
        Entity.SupervisionTypeDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.HasSeriesResistor).Value = Entity.HasSeriesResistor;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.HasSeriesResistor).SetAsNull == true)
        Entity.HasSeriesResistor = false;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.HasParallelResistor).Value = Entity.HasParallelResistor;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.HasParallelResistor).SetAsNull == true)
        Entity.HasParallelResistor = false;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsNormalOpen).Value = Entity.IsNormalOpen;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsNormalOpen).SetAsNull == true)
        Entity.IsNormalOpen = false;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.TroubleShortThreshold).Value = Entity.TroubleShortThreshold;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.TroubleShortThreshold).SetAsNull == true)
        Entity.TroubleShortThreshold = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.TroubleOpenThreshold).Value = Entity.TroubleOpenThreshold;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.TroubleOpenThreshold).SetAsNull == true)
        Entity.TroubleOpenThreshold = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.NormalChangeThreshold).Value = Entity.NormalChangeThreshold;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.NormalChangeThreshold).SetAsNull == true)
        Entity.NormalChangeThreshold = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateNormalChangeThreshold).Value = Entity.AlternateNormalChangeThreshold;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateNormalChangeThreshold).SetAsNull == true)
        Entity.AlternateNormalChangeThreshold = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateTroubleOpenThreshold).Value = Entity.AlternateTroubleOpenThreshold;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateTroubleOpenThreshold).SetAsNull == true)
        Entity.AlternateTroubleOpenThreshold = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateTroubleShortThreshold).Value = Entity.AlternateTroubleShortThreshold;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateTroubleShortThreshold).SetAsNull == true)
        Entity.AlternateTroubleShortThreshold = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateVoltagesEnabled).Value = Entity.AlternateVoltagesEnabled;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateVoltagesEnabled).SetAsNull == true)
        Entity.AlternateVoltagesEnabled = false;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputModeDisplay).Value = Entity.GalaxyInputModeDisplay;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputModeDisplay).SetAsNull == true)
        Entity.GalaxyInputModeDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputModeCode).Value = Entity.GalaxyInputModeCode;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputModeCode).SetAsNull == true)
        Entity.GalaxyInputModeCode = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputDelayTypeDisplay).Value = Entity.GalaxyInputDelayTypeDisplay;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputDelayTypeDisplay).SetAsNull == true)
        Entity.GalaxyInputDelayTypeDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputDelayTypeCode).Value = Entity.GalaxyInputDelayTypeCode;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputDelayTypeCode).SetAsNull == true)
        Entity.GalaxyInputDelayTypeCode = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupTag).Value = Entity.MainIOGroupTag;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupTag).SetAsNull == true)
        Entity.MainIOGroupTag = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupDisplay).Value = Entity.MainIOGroupDisplay;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupDisplay).SetAsNull == true)
        Entity.MainIOGroupDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupNumber).Value = Entity.MainIOGroupNumber;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupNumber).SetAsNull == true)
        Entity.MainIOGroupNumber = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupIsLocal).Value = Entity.MainIOGroupIsLocal;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupIsLocal).SetAsNull == true)
        Entity.MainIOGroupIsLocal = false;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupOffset).Value = Entity.MainIOGroupOffset;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupOffset).SetAsNull == true)
        Entity.MainIOGroupOffset = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.DelayDuration).Value = Entity.DelayDuration;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.DelayDuration).SetAsNull == true)
        Entity.DelayDuration = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.DisableDisarmedOnOffLogEvents).Value = Entity.DisableDisarmedOnOffLogEvents;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.DisableDisarmedOnOffLogEvents).SetAsNull == true)
        Entity.DisableDisarmedOnOffLogEvents = false;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmControlScheduleDisplay).Value = Entity.ArmControlScheduleDisplay;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmControlScheduleDisplay).SetAsNull == true)
        Entity.ArmControlScheduleDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputDevicePropertiesLastUpdated).Value = Entity.GalaxyInputDevicePropertiesLastUpdated;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputDevicePropertiesLastUpdated).SetAsNull == true)
        Entity.GalaxyInputDevicePropertiesLastUpdated = null;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupLastUpdated).Value = Entity.MainIOGroupLastUpdated;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupLastUpdated).SetAsNull == true)
        Entity.MainIOGroupLastUpdated = null;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup1LastUpdated).Value = Entity.ArmingIOGroup1LastUpdated;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup1LastUpdated).SetAsNull == true)
        Entity.ArmingIOGroup1LastUpdated = null;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup2LastUpdated).Value = Entity.ArmingIOGroup2LastUpdated;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup2LastUpdated).SetAsNull == true)
        Entity.ArmingIOGroup2LastUpdated = null;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmControlScheduleNumber).Value = Entity.ArmControlScheduleNumber;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmControlScheduleNumber).SetAsNull == true)
        Entity.ArmControlScheduleNumber = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup3LastUpdated).Value = Entity.ArmingIOGroup3LastUpdated;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup3LastUpdated).SetAsNull == true)
        Entity.ArmingIOGroup3LastUpdated =null;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup4LastUpdated).Value = Entity.ArmingIOGroup4LastUpdated;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup4LastUpdated).SetAsNull == true)
        Entity.ArmingIOGroup4LastUpdated =null;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainScheduleLastUpdated).Value = Entity.MainScheduleLastUpdated;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainScheduleLastUpdated).SetAsNull == true)
        Entity.MainScheduleLastUpdated =null;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup1Display).Value = Entity.ArmingIOGroup1Display;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup1Display).SetAsNull == true)
        Entity.ArmingIOGroup1Display = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber1).Value = Entity.ArmingIOGroupNumber1;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber1).SetAsNull == true)
        Entity.ArmingIOGroupNumber1 = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup1IsLocal).Value = Entity.ArmingIOGroup1IsLocal;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup1IsLocal).SetAsNull == true)
        Entity.ArmingIOGroup1IsLocal = false;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup2Display).Value = Entity.ArmingIOGroup2Display;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup2Display).SetAsNull == true)
        Entity.ArmingIOGroup2Display = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber2).Value = Entity.ArmingIOGroupNumber2;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber2).SetAsNull == true)
        Entity.ArmingIOGroupNumber2 = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup2IsLocal).Value = Entity.ArmingIOGroup2IsLocal;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup2IsLocal).SetAsNull == true)
        Entity.ArmingIOGroup2IsLocal = false;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup3Display).Value = Entity.ArmingIOGroup3Display;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup3Display).SetAsNull == true)
        Entity.ArmingIOGroup3Display = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber3).Value = Entity.ArmingIOGroupNumber3;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber3).SetAsNull == true)
        Entity.ArmingIOGroupNumber3 = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup3IsLocal).Value = Entity.ArmingIOGroup3IsLocal;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup3IsLocal).SetAsNull == true)
        Entity.ArmingIOGroup3IsLocal = false;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup4Display).Value = Entity.ArmingIOGroup4Display;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup4Display).SetAsNull == true)
        Entity.ArmingIOGroup4Display = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber4).Value = Entity.ArmingIOGroupNumber4;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber4).SetAsNull == true)
        Entity.ArmingIOGroupNumber4 = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup4IsLocal).Value = Entity.ArmingIOGroup4IsLocal;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup4IsLocal).SetAsNull == true)
        Entity.ArmingIOGroup4IsLocal = false;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber).Value = Entity.CpuNumber;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber).SetAsNull == true)
        Entity.CpuNumber = 0;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuUid).Value = Entity.CpuUid;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuUid).SetAsNull == true)
        Entity.CpuUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress).Value = Entity.ServerAddress;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress).SetAsNull == true)
        Entity.ServerAddress = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsConnected).Value = Entity.IsConnected;
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsConnected).SetAsNull == true)
        Entity.IsConnected = 0;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceUid).IsNull == false)
        Entity.InputDeviceUid = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceUid).GetAsGuid();
      else
        Entity.InputDeviceUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceUid, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid).IsNull == false)
        Entity.ClusterUid = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid).GetAsGuid();
      else
        Entity.ClusterUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid).IsNull == false)
        Entity.GalaxyPanelUid = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid).GetAsGuid();
      else
        Entity.GalaxyPanelUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).IsNull == false)
        Entity.GalaxyInterfaceBoardUid = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).GetAsGuid();
      else
        Entity.GalaxyInterfaceBoardUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).IsNull == false)
        Entity.GalaxyInterfaceBoardSectionUid = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).GetAsGuid();
      else
        Entity.GalaxyInterfaceBoardSectionUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).IsNull == false)
        Entity.GalaxyHardwareModuleUid = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).GetAsGuid();
      else
        Entity.GalaxyHardwareModuleUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyHardwareModuleUid, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).IsNull == false)
        Entity.GalaxyInterfaceBoardSectionNodeUid = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).GetAsGuid();
      else
        Entity.GalaxyInterfaceBoardSectionNodeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputName).IsNull == false)
        Entity.InputName = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputName).GetAsString();
      else
        Entity.InputName = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputName, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputName).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId).IsNull == false)
        Entity.ClusterGroupId = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId).GetAsInteger();
      else
        Entity.ClusterGroupId = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber).IsNull == false)
        Entity.ClusterNumber = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber).GetAsInteger();
      else
        Entity.ClusterNumber = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber).IsNull == false)
        Entity.PanelNumber = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber).GetAsInteger();
      else
        Entity.PanelNumber = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber).IsNull == false)
        Entity.BoardNumber = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber).GetAsShort();
      else
        Entity.BoardNumber = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber).IsNull == false)
        Entity.SectionNumber = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber).GetAsShort();
      else
        Entity.SectionNumber = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber).IsNull == false)
        Entity.ModuleNumber = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber).GetAsShort();
      else
        Entity.ModuleNumber = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber).IsNull == false)
        Entity.NodeNumber = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber).GetAsShort();
      else
        Entity.NodeNumber = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsInputActive).IsNull == false)
        Entity.IsInputActive = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsInputActive).GetAsBool();
      else
        Entity.IsInputActive = false;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsInputActive, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsInputActive).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardSectionMode).IsNull == false)
        Entity.InputDeviceBoardSectionMode = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardSectionMode).GetAsShort();
      else
        Entity.InputDeviceBoardSectionMode = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardSectionMode, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardSectionMode).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsNodeActive).IsNull == false)
        Entity.IsNodeActive = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsNodeActive).GetAsBool();
      else
        Entity.IsNodeActive = false;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsNodeActive, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsNodeActive).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardSectionModeDisplay).IsNull == false)
        Entity.InputDeviceBoardSectionModeDisplay = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardSectionModeDisplay).GetAsString();
      else
        Entity.InputDeviceBoardSectionModeDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardSectionModeDisplay, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardSectionModeDisplay).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsModuleActive).IsNull == false)
        Entity.IsModuleActive = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsModuleActive).GetAsBool();
      else
        Entity.IsModuleActive = false;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsModuleActive, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsModuleActive).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDevicePanelModelTypeCode).IsNull == false)
        Entity.InputDevicePanelModelTypeCode = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDevicePanelModelTypeCode).GetAsString();
      else
        Entity.InputDevicePanelModelTypeCode = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDevicePanelModelTypeCode, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDevicePanelModelTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceCpuTypeCode).IsNull == false)
        Entity.InputDeviceCpuTypeCode = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceCpuTypeCode).GetAsString();
      else
        Entity.InputDeviceCpuTypeCode = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceCpuTypeCode, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceCpuTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardTypeModel).IsNull == false)
        Entity.InputDeviceBoardTypeModel = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardTypeModel).GetAsString();
      else
        Entity.InputDeviceBoardTypeModel = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardTypeModel, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardTypeModel).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardTypeTypeCode).IsNull == false)
        Entity.InputDeviceBoardTypeTypeCode = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardTypeTypeCode).GetAsShort();
      else
        Entity.InputDeviceBoardTypeTypeCode = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardTypeTypeCode, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardTypeTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardTypeDisplay).IsNull == false)
        Entity.InputDeviceBoardTypeDisplay = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardTypeDisplay).GetAsString();
      else
        Entity.InputDeviceBoardTypeDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardTypeDisplay, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputDeviceBoardTypeDisplay).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.SupervisionTypeDisplay).IsNull == false)
        Entity.SupervisionTypeDisplay = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.SupervisionTypeDisplay).GetAsString();
      else
        Entity.SupervisionTypeDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.SupervisionTypeDisplay, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.SupervisionTypeDisplay).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.HasSeriesResistor).IsNull == false)
        Entity.HasSeriesResistor = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.HasSeriesResistor).GetAsBool();
      else
        Entity.HasSeriesResistor = false;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.HasSeriesResistor, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.HasSeriesResistor).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.HasParallelResistor).IsNull == false)
        Entity.HasParallelResistor = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.HasParallelResistor).GetAsBool();
      else
        Entity.HasParallelResistor = false;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.HasParallelResistor, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.HasParallelResistor).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsNormalOpen).IsNull == false)
        Entity.IsNormalOpen = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsNormalOpen).GetAsBool();
      else
        Entity.IsNormalOpen = false;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsNormalOpen, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsNormalOpen).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.TroubleShortThreshold).IsNull == false)
        Entity.TroubleShortThreshold = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.TroubleShortThreshold).GetAsShort();
      else
        Entity.TroubleShortThreshold = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.TroubleShortThreshold, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.TroubleShortThreshold).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.TroubleOpenThreshold).IsNull == false)
        Entity.TroubleOpenThreshold = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.TroubleOpenThreshold).GetAsShort();
      else
        Entity.TroubleOpenThreshold = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.TroubleOpenThreshold, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.TroubleOpenThreshold).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.NormalChangeThreshold).IsNull == false)
        Entity.NormalChangeThreshold = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.NormalChangeThreshold).GetAsShort();
      else
        Entity.NormalChangeThreshold = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.NormalChangeThreshold, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.NormalChangeThreshold).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateNormalChangeThreshold).IsNull == false)
        Entity.AlternateNormalChangeThreshold = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateNormalChangeThreshold).GetAsShort();
      else
        Entity.AlternateNormalChangeThreshold = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateNormalChangeThreshold, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateNormalChangeThreshold).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateTroubleOpenThreshold).IsNull == false)
        Entity.AlternateTroubleOpenThreshold = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateTroubleOpenThreshold).GetAsShort();
      else
        Entity.AlternateTroubleOpenThreshold = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateTroubleOpenThreshold, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateTroubleOpenThreshold).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateTroubleShortThreshold).IsNull == false)
        Entity.AlternateTroubleShortThreshold = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateTroubleShortThreshold).GetAsShort();
      else
        Entity.AlternateTroubleShortThreshold = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateTroubleShortThreshold, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateTroubleShortThreshold).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateVoltagesEnabled).IsNull == false)
        Entity.AlternateVoltagesEnabled = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateVoltagesEnabled).GetAsBool();
      else
        Entity.AlternateVoltagesEnabled = false;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateVoltagesEnabled, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.AlternateVoltagesEnabled).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputModeDisplay).IsNull == false)
        Entity.GalaxyInputModeDisplay = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputModeDisplay).GetAsString();
      else
        Entity.GalaxyInputModeDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputModeDisplay, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputModeDisplay).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputModeCode).IsNull == false)
        Entity.GalaxyInputModeCode = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputModeCode).GetAsShort();
      else
        Entity.GalaxyInputModeCode = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputModeCode, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputModeCode).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputDelayTypeDisplay).IsNull == false)
        Entity.GalaxyInputDelayTypeDisplay = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputDelayTypeDisplay).GetAsString();
      else
        Entity.GalaxyInputDelayTypeDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputDelayTypeDisplay, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputDelayTypeDisplay).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputDelayTypeCode).IsNull == false)
        Entity.GalaxyInputDelayTypeCode = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputDelayTypeCode).GetAsShort();
      else
        Entity.GalaxyInputDelayTypeCode = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputDelayTypeCode, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputDelayTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupTag).IsNull == false)
        Entity.MainIOGroupTag = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupTag).GetAsString();
      else
        Entity.MainIOGroupTag = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupTag, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupTag).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupDisplay).IsNull == false)
        Entity.MainIOGroupDisplay = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupDisplay).GetAsString();
      else
        Entity.MainIOGroupDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupDisplay, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupDisplay).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupNumber).IsNull == false)
        Entity.MainIOGroupNumber = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupNumber).GetAsInteger();
      else
        Entity.MainIOGroupNumber = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupNumber, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupNumber).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupIsLocal).IsNull == false)
        Entity.MainIOGroupIsLocal = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupIsLocal).GetAsBool();
      else
        Entity.MainIOGroupIsLocal = false;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupIsLocal, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupIsLocal).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupOffset).IsNull == false)
        Entity.MainIOGroupOffset = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupOffset).GetAsShort();
      else
        Entity.MainIOGroupOffset = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupOffset, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupOffset).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.DelayDuration).IsNull == false)
        Entity.DelayDuration = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.DelayDuration).GetAsInteger();
      else
        Entity.DelayDuration = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.DelayDuration, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.DelayDuration).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.DisableDisarmedOnOffLogEvents).IsNull == false)
        Entity.DisableDisarmedOnOffLogEvents = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.DisableDisarmedOnOffLogEvents).GetAsBool();
      else
        Entity.DisableDisarmedOnOffLogEvents = false;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.DisableDisarmedOnOffLogEvents, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.DisableDisarmedOnOffLogEvents).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmControlScheduleDisplay).IsNull == false)
        Entity.ArmControlScheduleDisplay = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmControlScheduleDisplay).GetAsString();
      else
        Entity.ArmControlScheduleDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmControlScheduleDisplay, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmControlScheduleDisplay).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputDevicePropertiesLastUpdated).IsNull == false)
        Entity.GalaxyInputDevicePropertiesLastUpdated = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputDevicePropertiesLastUpdated).GetAsDateTimeOffset();
      else
        Entity.GalaxyInputDevicePropertiesLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputDevicePropertiesLastUpdated, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInputDevicePropertiesLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupLastUpdated).IsNull == false)
        Entity.MainIOGroupLastUpdated = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupLastUpdated).GetAsDateTimeOffset();
      else
        Entity.MainIOGroupLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupLastUpdated, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainIOGroupLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup1LastUpdated).IsNull == false)
        Entity.ArmingIOGroup1LastUpdated = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup1LastUpdated).GetAsDateTimeOffset();
      else
        Entity.ArmingIOGroup1LastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup1LastUpdated, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup1LastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup2LastUpdated).IsNull == false)
        Entity.ArmingIOGroup2LastUpdated = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup2LastUpdated).GetAsDateTimeOffset();
      else
        Entity.ArmingIOGroup2LastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup2LastUpdated, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup2LastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmControlScheduleNumber).IsNull == false)
        Entity.ArmControlScheduleNumber = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmControlScheduleNumber).GetAsInteger();
      else
        Entity.ArmControlScheduleNumber = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmControlScheduleNumber, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmControlScheduleNumber).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup3LastUpdated).IsNull == false)
        Entity.ArmingIOGroup3LastUpdated = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup3LastUpdated).GetAsDateTimeOffset();
      else
        Entity.ArmingIOGroup3LastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup3LastUpdated, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup3LastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup4LastUpdated).IsNull == false)
        Entity.ArmingIOGroup4LastUpdated = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup4LastUpdated).GetAsDateTimeOffset();
      else
        Entity.ArmingIOGroup4LastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup4LastUpdated, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup4LastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainScheduleLastUpdated).IsNull == false)
        Entity.MainScheduleLastUpdated = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainScheduleLastUpdated).GetAsDateTimeOffset();
      else
        Entity.MainScheduleLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainScheduleLastUpdated, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.MainScheduleLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup1Display).IsNull == false)
        Entity.ArmingIOGroup1Display = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup1Display).GetAsString();
      else
        Entity.ArmingIOGroup1Display = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup1Display, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup1Display).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber1).IsNull == false)
        Entity.ArmingIOGroupNumber1 = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber1).GetAsInteger();
      else
        Entity.ArmingIOGroupNumber1 = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber1, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber1).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup1IsLocal).IsNull == false)
        Entity.ArmingIOGroup1IsLocal = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup1IsLocal).GetAsBool();
      else
        Entity.ArmingIOGroup1IsLocal = false;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup1IsLocal, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup1IsLocal).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup2Display).IsNull == false)
        Entity.ArmingIOGroup2Display = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup2Display).GetAsString();
      else
        Entity.ArmingIOGroup2Display = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup2Display, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup2Display).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber2).IsNull == false)
        Entity.ArmingIOGroupNumber2 = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber2).GetAsInteger();
      else
        Entity.ArmingIOGroupNumber2 = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber2, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber2).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup2IsLocal).IsNull == false)
        Entity.ArmingIOGroup2IsLocal = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup2IsLocal).GetAsBool();
      else
        Entity.ArmingIOGroup2IsLocal = false;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup2IsLocal, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup2IsLocal).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup3Display).IsNull == false)
        Entity.ArmingIOGroup3Display = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup3Display).GetAsString();
      else
        Entity.ArmingIOGroup3Display = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup3Display, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup3Display).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber3).IsNull == false)
        Entity.ArmingIOGroupNumber3 = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber3).GetAsInteger();
      else
        Entity.ArmingIOGroupNumber3 = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber3, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber3).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup3IsLocal).IsNull == false)
        Entity.ArmingIOGroup3IsLocal = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup3IsLocal).GetAsBool();
      else
        Entity.ArmingIOGroup3IsLocal = false;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup3IsLocal, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup3IsLocal).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup4Display).IsNull == false)
        Entity.ArmingIOGroup4Display = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup4Display).GetAsString();
      else
        Entity.ArmingIOGroup4Display = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup4Display, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup4Display).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber4).IsNull == false)
        Entity.ArmingIOGroupNumber4 = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber4).GetAsInteger();
      else
        Entity.ArmingIOGroupNumber4 = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber4, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroupNumber4).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup4IsLocal).IsNull == false)
        Entity.ArmingIOGroup4IsLocal = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup4IsLocal).GetAsBool();
      else
        Entity.ArmingIOGroup4IsLocal = false;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup4IsLocal, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ArmingIOGroup4IsLocal).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber).IsNull == false)
        Entity.CpuNumber = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber).GetAsInteger();
      else
        Entity.CpuNumber = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuUid).IsNull == false)
        Entity.CpuUid = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuUid).GetAsGuid();
      else
        Entity.CpuUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuUid, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress).IsNull == false)
        Entity.ServerAddress = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress).GetAsString();
      else
        Entity.ServerAddress = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress).Value);

      if (ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsConnected).IsNull == false)
        Entity.IsConnected = ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsConnected).GetAsInteger();
      else
        Entity.IsConnected = 0;
      Entity.SetOriginalValueForProperty(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsConnected, ValidatorObject.Properties.GetByName(InputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsConnected).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>InputDevice_PanelLoadDataPDSA</returns>
    public InputDevice_PanelLoadDataPDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new InputDevice_PanelLoadDataPDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          
          
          break;
        case SelectFilters.Search:
          
          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL that will count the number of rows returned from this view.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          
          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      sb.Append(WhereClauseSQL());
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion
    
    #region WhereClauseSQL Method
    /// <summary>
    /// Builds the WHERE clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string WhereClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (WhereFilter)
      {
        case WhereFilters.Custom:
          sb.Append(" " + WhereCustom);

          break;

        case WhereFilters.None:
          //  Do nothing

          break;

        case WhereFilters.ClusterUid:
          
          
          break;
        case WhereFilters.GalaxyHardwareModuleUid:
          
          
          break;
        case WhereFilters.GalaxyInterfaceBoardSectionNodeUid:
          
          
          break;
        case WhereFilters.GalaxyInterfaceBoardSectionUid:
          
          
          break;
        case WhereFilters.GalaxyInterfaceBoardUid:
          
          
          break;
        case WhereFilters.GalaxyPanelUid:
          
          
          break;
        case WhereFilters.InputDeviceUid:
          
          
          break;
        case WhereFilters.InputName:
          
          
          break;
        case WhereFilters.LikeInputName:
          
          
          break;
      }
      
      return sb.ToString();
    }
    #endregion

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
         
          break;
        case SelectFilters.Search:
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion

    #region WhereClauseFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any WHERE clause parameters.
    /// </summary>
    protected override void WhereClauseFillInParameters()
    {
      switch (WhereFilter)
      {
        case WhereFilters.ClusterUid:
         
          break;
        case WhereFilters.GalaxyHardwareModuleUid:
         
          break;
        case WhereFilters.GalaxyInterfaceBoardSectionNodeUid:
         
          break;
        case WhereFilters.GalaxyInterfaceBoardSectionUid:
         
          break;
        case WhereFilters.GalaxyInterfaceBoardUid:
         
          break;
        case WhereFilters.GalaxyPanelUid:
         
          break;
        case WhereFilters.InputDeviceUid:
         
          break;
        case WhereFilters.InputName:
         
          break;
        case WhereFilters.LikeInputName:
         
          break;
      }
    }
    #endregion

    #region OrderByClauseSQL Method
    /// <summary>
    /// Builds the ORDER BY clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string OrderByClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (OrderByFilter)
      {
        case OrderByFilters.None:
          //  Do Nothing

          break;

        case OrderByFilters.Custom:
          sb.Append(" " + OrderByCustom);

          break;
          
        case OrderByFilters.HardwareAddress:
          
          
          break;
        case OrderByFilters.InputName:
          
          
          break;
      }

      return sb.ToString();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the InputDevice_PanelLoadDataPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'InputDeviceUid'
    /// </summary>
    public static string InputDeviceUid = "InputDeviceUid";
    /// <summary>
    /// Returns 'ClusterUid'
    /// </summary>
    public static string ClusterUid = "ClusterUid";
    /// <summary>
    /// Returns 'GalaxyPanelUid'
    /// </summary>
    public static string GalaxyPanelUid = "GalaxyPanelUid";
    /// <summary>
    /// Returns 'GalaxyInterfaceBoardUid'
    /// </summary>
    public static string GalaxyInterfaceBoardUid = "GalaxyInterfaceBoardUid";
    /// <summary>
    /// Returns 'GalaxyInterfaceBoardSectionUid'
    /// </summary>
    public static string GalaxyInterfaceBoardSectionUid = "GalaxyInterfaceBoardSectionUid";
    /// <summary>
    /// Returns 'GalaxyHardwareModuleUid'
    /// </summary>
    public static string GalaxyHardwareModuleUid = "GalaxyHardwareModuleUid";
    /// <summary>
    /// Returns 'GalaxyInterfaceBoardSectionNodeUid'
    /// </summary>
    public static string GalaxyInterfaceBoardSectionNodeUid = "GalaxyInterfaceBoardSectionNodeUid";
    /// <summary>
    /// Returns 'InputName'
    /// </summary>
    public static string InputName = "InputName";
    /// <summary>
    /// Returns 'ClusterGroupId'
    /// </summary>
    public static string ClusterGroupId = "ClusterGroupId";
    /// <summary>
    /// Returns 'ClusterNumber'
    /// </summary>
    public static string ClusterNumber = "ClusterNumber";
    /// <summary>
    /// Returns 'PanelNumber'
    /// </summary>
    public static string PanelNumber = "PanelNumber";
    /// <summary>
    /// Returns 'BoardNumber'
    /// </summary>
    public static string BoardNumber = "BoardNumber";
    /// <summary>
    /// Returns 'SectionNumber'
    /// </summary>
    public static string SectionNumber = "SectionNumber";
    /// <summary>
    /// Returns 'ModuleNumber'
    /// </summary>
    public static string ModuleNumber = "ModuleNumber";
    /// <summary>
    /// Returns 'NodeNumber'
    /// </summary>
    public static string NodeNumber = "NodeNumber";
    /// <summary>
    /// Returns 'IsInputActive'
    /// </summary>
    public static string IsInputActive = "IsInputActive";
    /// <summary>
    /// Returns 'InputDeviceBoardSectionMode'
    /// </summary>
    public static string InputDeviceBoardSectionMode = "InputDeviceBoardSectionMode";
    /// <summary>
    /// Returns 'IsNodeActive'
    /// </summary>
    public static string IsNodeActive = "IsNodeActive";
    /// <summary>
    /// Returns 'InputDeviceBoardSectionModeDisplay'
    /// </summary>
    public static string InputDeviceBoardSectionModeDisplay = "InputDeviceBoardSectionModeDisplay";
    /// <summary>
    /// Returns 'IsModuleActive'
    /// </summary>
    public static string IsModuleActive = "IsModuleActive";
    /// <summary>
    /// Returns 'InputDevicePanelModelTypeCode'
    /// </summary>
    public static string InputDevicePanelModelTypeCode = "InputDevicePanelModelTypeCode";
    /// <summary>
    /// Returns 'InputDeviceCpuTypeCode'
    /// </summary>
    public static string InputDeviceCpuTypeCode = "InputDeviceCpuTypeCode";
    /// <summary>
    /// Returns 'InputDeviceBoardTypeModel'
    /// </summary>
    public static string InputDeviceBoardTypeModel = "InputDeviceBoardTypeModel";
    /// <summary>
    /// Returns 'InputDeviceBoardTypeTypeCode'
    /// </summary>
    public static string InputDeviceBoardTypeTypeCode = "InputDeviceBoardTypeTypeCode";
    /// <summary>
    /// Returns 'InputDeviceBoardTypeDisplay'
    /// </summary>
    public static string InputDeviceBoardTypeDisplay = "InputDeviceBoardTypeDisplay";
    /// <summary>
    /// Returns 'SupervisionTypeDisplay'
    /// </summary>
    public static string SupervisionTypeDisplay = "SupervisionTypeDisplay";
    /// <summary>
    /// Returns 'HasSeriesResistor'
    /// </summary>
    public static string HasSeriesResistor = "HasSeriesResistor";
    /// <summary>
    /// Returns 'HasParallelResistor'
    /// </summary>
    public static string HasParallelResistor = "HasParallelResistor";
    /// <summary>
    /// Returns 'IsNormalOpen'
    /// </summary>
    public static string IsNormalOpen = "IsNormalOpen";
    /// <summary>
    /// Returns 'TroubleShortThreshold'
    /// </summary>
    public static string TroubleShortThreshold = "TroubleShortThreshold";
    /// <summary>
    /// Returns 'TroubleOpenThreshold'
    /// </summary>
    public static string TroubleOpenThreshold = "TroubleOpenThreshold";
    /// <summary>
    /// Returns 'NormalChangeThreshold'
    /// </summary>
    public static string NormalChangeThreshold = "NormalChangeThreshold";
    /// <summary>
    /// Returns 'AlternateNormalChangeThreshold'
    /// </summary>
    public static string AlternateNormalChangeThreshold = "AlternateNormalChangeThreshold";
    /// <summary>
    /// Returns 'AlternateTroubleOpenThreshold'
    /// </summary>
    public static string AlternateTroubleOpenThreshold = "AlternateTroubleOpenThreshold";
    /// <summary>
    /// Returns 'AlternateTroubleShortThreshold'
    /// </summary>
    public static string AlternateTroubleShortThreshold = "AlternateTroubleShortThreshold";
    /// <summary>
    /// Returns 'AlternateVoltagesEnabled'
    /// </summary>
    public static string AlternateVoltagesEnabled = "AlternateVoltagesEnabled";
    /// <summary>
    /// Returns 'GalaxyInputModeDisplay'
    /// </summary>
    public static string GalaxyInputModeDisplay = "GalaxyInputModeDisplay";
    /// <summary>
    /// Returns 'GalaxyInputModeCode'
    /// </summary>
    public static string GalaxyInputModeCode = "GalaxyInputModeCode";
    /// <summary>
    /// Returns 'GalaxyInputDelayTypeDisplay'
    /// </summary>
    public static string GalaxyInputDelayTypeDisplay = "GalaxyInputDelayTypeDisplay";
    /// <summary>
    /// Returns 'GalaxyInputDelayTypeCode'
    /// </summary>
    public static string GalaxyInputDelayTypeCode = "GalaxyInputDelayTypeCode";
    /// <summary>
    /// Returns 'MainIOGroupTag'
    /// </summary>
    public static string MainIOGroupTag = "MainIOGroupTag";
    /// <summary>
    /// Returns 'MainIOGroupDisplay'
    /// </summary>
    public static string MainIOGroupDisplay = "MainIOGroupDisplay";
    /// <summary>
    /// Returns 'MainIOGroupNumber'
    /// </summary>
    public static string MainIOGroupNumber = "MainIOGroupNumber";
    /// <summary>
    /// Returns 'MainIOGroupIsLocal'
    /// </summary>
    public static string MainIOGroupIsLocal = "MainIOGroupIsLocal";
    /// <summary>
    /// Returns 'MainIOGroupOffset'
    /// </summary>
    public static string MainIOGroupOffset = "MainIOGroupOffset";
    /// <summary>
    /// Returns 'DelayDuration'
    /// </summary>
    public static string DelayDuration = "DelayDuration";
    /// <summary>
    /// Returns 'DisableDisarmedOnOffLogEvents'
    /// </summary>
    public static string DisableDisarmedOnOffLogEvents = "DisableDisarmedOnOffLogEvents";
    /// <summary>
    /// Returns 'ArmControlScheduleDisplay'
    /// </summary>
    public static string ArmControlScheduleDisplay = "ArmControlScheduleDisplay";
    /// <summary>
    /// Returns 'GalaxyInputDevicePropertiesLastUpdated'
    /// </summary>
    public static string GalaxyInputDevicePropertiesLastUpdated = "GalaxyInputDevicePropertiesLastUpdated";
    /// <summary>
    /// Returns 'MainIOGroupLastUpdated'
    /// </summary>
    public static string MainIOGroupLastUpdated = "MainIOGroupLastUpdated";
    /// <summary>
    /// Returns 'ArmingIOGroup1LastUpdated'
    /// </summary>
    public static string ArmingIOGroup1LastUpdated = "ArmingIOGroup1LastUpdated";
    /// <summary>
    /// Returns 'ArmingIOGroup2LastUpdated'
    /// </summary>
    public static string ArmingIOGroup2LastUpdated = "ArmingIOGroup2LastUpdated";
    /// <summary>
    /// Returns 'ArmControlScheduleNumber'
    /// </summary>
    public static string ArmControlScheduleNumber = "ArmControlScheduleNumber";
    /// <summary>
    /// Returns 'ArmingIOGroup3LastUpdated'
    /// </summary>
    public static string ArmingIOGroup3LastUpdated = "ArmingIOGroup3LastUpdated";
    /// <summary>
    /// Returns 'ArmingIOGroup4LastUpdated'
    /// </summary>
    public static string ArmingIOGroup4LastUpdated = "ArmingIOGroup4LastUpdated";
    /// <summary>
    /// Returns 'MainScheduleLastUpdated'
    /// </summary>
    public static string MainScheduleLastUpdated = "MainScheduleLastUpdated";
    /// <summary>
    /// Returns 'ArmingIOGroup1Display'
    /// </summary>
    public static string ArmingIOGroup1Display = "ArmingIOGroup1Display";
    /// <summary>
    /// Returns 'ArmingIOGroupNumber1'
    /// </summary>
    public static string ArmingIOGroupNumber1 = "ArmingIOGroupNumber1";
    /// <summary>
    /// Returns 'ArmingIOGroup1IsLocal'
    /// </summary>
    public static string ArmingIOGroup1IsLocal = "ArmingIOGroup1IsLocal";
    /// <summary>
    /// Returns 'ArmingIOGroup2Display'
    /// </summary>
    public static string ArmingIOGroup2Display = "ArmingIOGroup2Display";
    /// <summary>
    /// Returns 'ArmingIOGroupNumber2'
    /// </summary>
    public static string ArmingIOGroupNumber2 = "ArmingIOGroupNumber2";
    /// <summary>
    /// Returns 'ArmingIOGroup2IsLocal'
    /// </summary>
    public static string ArmingIOGroup2IsLocal = "ArmingIOGroup2IsLocal";
    /// <summary>
    /// Returns 'ArmingIOGroup3Display'
    /// </summary>
    public static string ArmingIOGroup3Display = "ArmingIOGroup3Display";
    /// <summary>
    /// Returns 'ArmingIOGroupNumber3'
    /// </summary>
    public static string ArmingIOGroupNumber3 = "ArmingIOGroupNumber3";
    /// <summary>
    /// Returns 'ArmingIOGroup3IsLocal'
    /// </summary>
    public static string ArmingIOGroup3IsLocal = "ArmingIOGroup3IsLocal";
    /// <summary>
    /// Returns 'ArmingIOGroup4Display'
    /// </summary>
    public static string ArmingIOGroup4Display = "ArmingIOGroup4Display";
    /// <summary>
    /// Returns 'ArmingIOGroupNumber4'
    /// </summary>
    public static string ArmingIOGroupNumber4 = "ArmingIOGroupNumber4";
    /// <summary>
    /// Returns 'ArmingIOGroup4IsLocal'
    /// </summary>
    public static string ArmingIOGroup4IsLocal = "ArmingIOGroup4IsLocal";
    /// <summary>
    /// Returns 'CpuNumber'
    /// </summary>
    public static string CpuNumber = "CpuNumber";
    /// <summary>
    /// Returns 'CpuUid'
    /// </summary>
    public static string CpuUid = "CpuUid";
    /// <summary>
    /// Returns 'ServerAddress'
    /// </summary>
    public static string ServerAddress = "ServerAddress";
    /// <summary>
    /// Returns 'IsConnected'
    /// </summary>
    public static string IsConnected = "IsConnected";
    }
    #endregion
  }
}
