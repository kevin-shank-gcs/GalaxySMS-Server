using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Add/Edit/Delete/Select data from the InputDevicePDSA table.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class InputDevicePDSAData : PDSADataClassTable
  {
    #region Constructors
    /// <summary>
    /// Constructor for the InputDevicePDSAData class
    /// </summary>
    public InputDevicePDSAData() : base()
    {
      Entity = new InputDevicePDSA();
      ValidatorObject = new InputDevicePDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the InputDevicePDSAData class
    /// </summary>
    /// <param name="entity">An instance of a InputDevicePDSA</param>
    public InputDevicePDSAData(InputDevicePDSA entity) : base(entity)
    {
      Entity = entity;
      ValidatorObject = new InputDevicePDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the InputDevicePDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a InputDevicePDSA</param>
    public InputDevicePDSAData(PDSADataProvider dataProvider,
      InputDevicePDSA entity)
      : base(dataProvider, entity)
    {
      Entity = entity;
      ValidatorObject = new InputDevicePDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the InputDevicePDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a InputDevicePDSA</param>
    /// <param name="validator">An instance of a InputDevicePDSAValidator</param>
    public InputDevicePDSAData(PDSADataProvider dataProvider,
      InputDevicePDSA entity, InputDevicePDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'ByBinaryResourceUid' SelectFilter
      /// </summary>
      ByBinaryResourceUid
      ,
      /// <summary>
      /// 'ByClusterUid' SelectFilter
      /// </summary>
      ByClusterUid
      ,
      /// <summary>
      /// 'ByEntityId' SelectFilter
      /// </summary>
      ByEntityId
      ,
      /// <summary>
      /// 'ByGalaxyPanelAddress' SelectFilter
      /// </summary>
      ByGalaxyPanelAddress
      ,
      /// <summary>
      /// 'ByGalaxyPanelUid' SelectFilter
      /// </summary>
      ByGalaxyPanelUid
      ,
      /// <summary>
      /// 'ByHardwareAddress' SelectFilter
      /// </summary>
      ByHardwareAddress
      ,
      /// <summary>
      /// 'ByName' SelectFilter
      /// </summary>
      ByName
      ,
      /// <summary>
      /// 'ByNameOrComments' SelectFilter
      /// </summary>
      ByNameOrComments
      ,
      /// <summary>
      /// 'ByRegionUid' SelectFilter
      /// </summary>
      ByRegionUid
      ,
      /// <summary>
      /// 'BySiteUid' SelectFilter
      /// </summary>
      BySiteUid
      ,
      /// <summary>
      /// 'ListBox' SelectFilter
      /// </summary>
      ListBox
      ,
      /// <summary>
      /// 'ListBoxByClusterUid' SelectFilter
      /// </summary>
      ListBoxByClusterUid
      ,
      /// <summary>
      /// 'ListBoxByGalaxyPanelAddress' SelectFilter
      /// </summary>
      ListBoxByGalaxyPanelAddress
      ,
      /// <summary>
      /// 'ListBoxByGalaxyPanelUid' SelectFilter
      /// </summary>
      ListBoxByGalaxyPanelUid
      ,
      /// <summary>
      /// 'ListBoxByName' SelectFilter
      /// </summary>
      ListBoxByName
      ,
      /// <summary>
      /// 'ListBoxByNameOrComments' SelectFilter
      /// </summary>
      ListBoxByNameOrComments
      ,
      /// <summary>
      /// 'ListBoxByPrimaryKey' SelectFilter
      /// </summary>
      ListBoxByPrimaryKey
      ,
      /// <summary>
      /// 'PrimaryKey' SelectFilter
      /// </summary>
      PrimaryKey
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// 'ListBySiteUidAndName' SelectFilter
      /// </summary>
      ListBySiteUidAndName
      ,
      /// <summary>
      /// A Custom Select Filter
      /// </summary>
      Custom
    }


    /// <summary>
    /// Enumeration for selecting an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
    /// </summary>
    public enum InsertFilters
    {
      
      /// <summary>
      /// 'All' InsertFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom InsertFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
    /// </summary>
    public enum UpdateFilters
    {
      
      /// <summary>
      /// 'PrimaryKey' UpdateFilter
      /// </summary>
      PrimaryKey
      ,
      /// <summary>
      /// 'UpdateConcurrency' UpdateFilter
      /// </summary>
      UpdateConcurrency
      ,
      /// <summary>
      /// A Custom UpdateFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a DELETE statement or DELETE stored procedure to execute when calling the Delete() method.
    /// </summary>
    public enum DeleteFilters
    {
      
      /// <summary>
      /// 'DeleteByPK' DeleteFilter
      /// </summary>
      DeleteByPK
      ,
      /// <summary>
      /// A Custom DeleteFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom RowCountFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL or Stored Procedure to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }

    
    /// <summary>
    /// Get/Set an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
    /// </summary>
    public InsertFilters InsertFilter { get; set; }

    private UpdateFilters mUpdateFilter;
    /// <summary>
    /// Get/Set an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
    /// </summary>
    public UpdateFilters UpdateFilter
    {
      get { return mUpdateFilter; }
      set
      {
        mUpdateFilter = value;
        if (mUpdateFilter == UpdateFilters.Custom)
          PerformValidation = false;
      }
    }
    /// <summary>
    /// Get/Set a DELETE statement or DELETE stored procedure to execute when calling the Delete() method. You might need to set a WhereFilter as well.
    /// </summary>
    public DeleteFilters DeleteFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Entity Property
    private InputDevicePDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public InputDevicePDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "InputDevicePDSAData";
      DBObjectName = "GCS.InputDevice";
      SchemaName = "GCS";
      PrimaryKeyType = PDSAPrimaryKeyType.GUID;
      PrimaryKeyGenerate = false;
      UseAuditTracking = DataProvider.UseDBAuditTracking;
      UseStoredProcs = DataProvider.UseStoredProcedures;
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;

      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Use this area to initialize any starting values for data in the Properties collection for each Entity property.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InputDeviceUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = true;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.EntityId);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SiteUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.BinaryResourceUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InputName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.Location);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ServiceComment);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.CriticalityComment);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.Comment);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.EMailEventsEnabled);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.TransmitEventsEnabled);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.FileOutputEnabled);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsTemplate);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InsertName);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InsertDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.UpdateName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.UpdateDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ConcurrencyValue);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsActive);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.RegionUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsBoundToHardware);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.RegionName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlChars.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SiteName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlChars.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterGroupId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.PanelNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.BoardNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SectionNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ModuleNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.NodeNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterTypeUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.TypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlChars.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyPanelModelUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyPanelTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlChars.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardTypeUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardModel);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlChars.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardSectionModeUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardSectionModeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ModuleTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsNodeActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyPanelUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.PageNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.PageSize);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.TotalRowCount);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SortColumn);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlChars.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.DescendingOrder);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InputDeviceUid).Value = Entity.InputDeviceUid;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InputDeviceUid).SetAsNull == true)
        Entity.InputDeviceUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.EntityId).Value = Entity.EntityId;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.EntityId).SetAsNull == true)
        Entity.EntityId = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SiteUid).Value = Entity.SiteUid;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SiteUid).SetAsNull == true)
        Entity.SiteUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.BinaryResourceUid).Value = Entity.BinaryResourceUid;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.BinaryResourceUid).SetAsNull == true)
        Entity.BinaryResourceUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InputName).Value = Entity.InputName;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InputName).SetAsNull == true)
        Entity.InputName = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.Location).Value = Entity.Location;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.Location).SetAsNull == true)
        Entity.Location = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ServiceComment).Value = Entity.ServiceComment;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ServiceComment).SetAsNull == true)
        Entity.ServiceComment = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.CriticalityComment).Value = Entity.CriticalityComment;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.CriticalityComment).SetAsNull == true)
        Entity.CriticalityComment = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.Comment).Value = Entity.Comment;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.Comment).SetAsNull == true)
        Entity.Comment = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.EMailEventsEnabled).Value = Entity.EMailEventsEnabled;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.EMailEventsEnabled).SetAsNull == true)
        Entity.EMailEventsEnabled = false;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.TransmitEventsEnabled).Value = Entity.TransmitEventsEnabled;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.TransmitEventsEnabled).SetAsNull == true)
        Entity.TransmitEventsEnabled = false;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.FileOutputEnabled).Value = Entity.FileOutputEnabled;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.FileOutputEnabled).SetAsNull == true)
        Entity.FileOutputEnabled = false;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsTemplate).Value = Entity.IsTemplate;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsTemplate).SetAsNull == true)
        Entity.IsTemplate = false;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InsertName).SetAsNull == true)
        Entity.InsertName = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InsertDate).SetAsNull == true)
        Entity.InsertDate = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.UpdateName).SetAsNull == true)
        Entity.UpdateName = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.UpdateDate).SetAsNull == true)
        Entity.UpdateDate = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull == true)
        Entity.ConcurrencyValue = 0;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsActive).Value = Entity.IsActive;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsActive).SetAsNull == true)
        Entity.IsActive = false;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.RegionUid).Value = Entity.RegionUid;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.RegionUid).SetAsNull == true)
        Entity.RegionUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsBoundToHardware).Value = Entity.IsBoundToHardware;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsBoundToHardware).SetAsNull == true)
        Entity.IsBoundToHardware = false;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.RegionName).Value = Entity.RegionName;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.RegionName).SetAsNull == true)
        Entity.RegionName = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SiteName).Value = Entity.SiteName;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SiteName).SetAsNull == true)
        Entity.SiteName = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterGroupId).Value = Entity.ClusterGroupId;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterGroupId).SetAsNull == true)
        Entity.ClusterGroupId = 0;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterNumber).Value = Entity.ClusterNumber;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterNumber).SetAsNull == true)
        Entity.ClusterNumber = 0;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.PanelNumber).Value = Entity.PanelNumber;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.PanelNumber).SetAsNull == true)
        Entity.PanelNumber = 0;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.BoardNumber).Value = Entity.BoardNumber;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.BoardNumber).SetAsNull == true)
        Entity.BoardNumber = 0;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SectionNumber).Value = Entity.SectionNumber;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SectionNumber).SetAsNull == true)
        Entity.SectionNumber = 0;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ModuleNumber).Value = Entity.ModuleNumber;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ModuleNumber).SetAsNull == true)
        Entity.ModuleNumber = 0;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.NodeNumber).Value = Entity.NodeNumber;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.NodeNumber).SetAsNull == true)
        Entity.NodeNumber = 0;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterTypeUid).Value = Entity.ClusterTypeUid;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterTypeUid).SetAsNull == true)
        Entity.ClusterTypeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.TypeCode).Value = Entity.TypeCode;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.TypeCode).SetAsNull == true)
        Entity.TypeCode = 0;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterTypeCode).Value = Entity.ClusterTypeCode;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterTypeCode).SetAsNull == true)
        Entity.ClusterTypeCode = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyPanelModelUid).Value = Entity.GalaxyPanelModelUid;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyPanelModelUid).SetAsNull == true)
        Entity.GalaxyPanelModelUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyPanelTypeCode).Value = Entity.GalaxyPanelTypeCode;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyPanelTypeCode).SetAsNull == true)
        Entity.GalaxyPanelTypeCode = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardTypeUid).Value = Entity.InterfaceBoardTypeUid;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardTypeUid).SetAsNull == true)
        Entity.InterfaceBoardTypeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardTypeCode).Value = Entity.InterfaceBoardTypeCode;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardTypeCode).SetAsNull == true)
        Entity.InterfaceBoardTypeCode = 0;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardModel).Value = Entity.InterfaceBoardModel;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardModel).SetAsNull == true)
        Entity.InterfaceBoardModel = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardSectionModeUid).Value = Entity.InterfaceBoardSectionModeUid;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardSectionModeUid).SetAsNull == true)
        Entity.InterfaceBoardSectionModeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardSectionModeCode).Value = Entity.InterfaceBoardSectionModeCode;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardSectionModeCode).SetAsNull == true)
        Entity.InterfaceBoardSectionModeCode = 0;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid).Value = Entity.GalaxyHardwareModuleTypeUid;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid).SetAsNull == true)
        Entity.GalaxyHardwareModuleTypeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ModuleTypeCode).Value = Entity.ModuleTypeCode;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ModuleTypeCode).SetAsNull == true)
        Entity.ModuleTypeCode = 0;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsNodeActive).Value = Entity.IsNodeActive;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsNodeActive).SetAsNull == true)
        Entity.IsNodeActive = false;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterUid).Value = Entity.ClusterUid;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterUid).SetAsNull == true)
        Entity.ClusterUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyPanelUid).Value = Entity.GalaxyPanelUid;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyPanelUid).SetAsNull == true)
        Entity.GalaxyPanelUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.PageNumber).Value = Entity.PageNumber;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.PageNumber).SetAsNull == true)
        Entity.PageNumber = 0;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.PageSize).Value = Entity.PageSize;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.PageSize).SetAsNull == true)
        Entity.PageSize = 0;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.TotalRowCount).Value = Entity.TotalRowCount;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.TotalRowCount).SetAsNull == true)
        Entity.TotalRowCount = 0;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SortColumn).Value = Entity.SortColumn;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SortColumn).SetAsNull == true)
        Entity.SortColumn = string.Empty;
      ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.DescendingOrder).Value = Entity.DescendingOrder;
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.DescendingOrder).SetAsNull == true)
        Entity.DescendingOrder = false;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InputDeviceUid).IsNull == false)
        Entity.InputDeviceUid = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InputDeviceUid).GetAsGuid();
      else
        Entity.InputDeviceUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.InputDeviceUid, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InputDeviceUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.EntityId).IsNull == false)
        Entity.EntityId = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.EntityId).GetAsGuid();
      else
        Entity.EntityId = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.EntityId, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.EntityId).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SiteUid).IsNull == false)
        Entity.SiteUid = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SiteUid).GetAsGuid();
      else
        Entity.SiteUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.SiteUid, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SiteUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.BinaryResourceUid).IsNull == false)
        Entity.BinaryResourceUid = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.BinaryResourceUid).GetAsGuid();
      else
        Entity.BinaryResourceUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.BinaryResourceUid, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.BinaryResourceUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InputName).IsNull == false)
        Entity.InputName = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InputName).GetAsString();
      else
        Entity.InputName = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.InputName, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InputName).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.Location).IsNull == false)
        Entity.Location = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.Location).GetAsString();
      else
        Entity.Location = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.Location, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.Location).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ServiceComment).IsNull == false)
        Entity.ServiceComment = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ServiceComment).GetAsString();
      else
        Entity.ServiceComment = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.ServiceComment, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ServiceComment).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.CriticalityComment).IsNull == false)
        Entity.CriticalityComment = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.CriticalityComment).GetAsString();
      else
        Entity.CriticalityComment = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.CriticalityComment, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.CriticalityComment).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.Comment).IsNull == false)
        Entity.Comment = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.Comment).GetAsString();
      else
        Entity.Comment = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.Comment, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.Comment).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.EMailEventsEnabled).IsNull == false)
        Entity.EMailEventsEnabled = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.EMailEventsEnabled).GetAsBool();
      else
        Entity.EMailEventsEnabled = false;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.EMailEventsEnabled, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.EMailEventsEnabled).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.TransmitEventsEnabled).IsNull == false)
        Entity.TransmitEventsEnabled = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.TransmitEventsEnabled).GetAsBool();
      else
        Entity.TransmitEventsEnabled = false;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.TransmitEventsEnabled, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.TransmitEventsEnabled).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.FileOutputEnabled).IsNull == false)
        Entity.FileOutputEnabled = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.FileOutputEnabled).GetAsBool();
      else
        Entity.FileOutputEnabled = false;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.FileOutputEnabled, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.FileOutputEnabled).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsTemplate).IsNull == false)
        Entity.IsTemplate = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsTemplate).GetAsBool();
      else
        Entity.IsTemplate = false;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.IsTemplate, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsTemplate).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InsertName).GetAsString();
      else
        Entity.InsertName = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.InsertName, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InsertName).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
      else
        Entity.InsertDate = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.InsertDate, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InsertDate).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.UpdateName).GetAsString();
      else
        Entity.UpdateName = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.UpdateName, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.UpdateName).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.UpdateDate).GetAsDateTimeOffset();
      else
        Entity.UpdateDate = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.UpdateDate, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.UpdateDate).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
      else
        Entity.ConcurrencyValue = 0;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.ConcurrencyValue, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ConcurrencyValue).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsActive).IsNull == false)
        Entity.IsActive = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsActive).GetAsBool();
      else
        Entity.IsActive = false;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.IsActive, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsActive).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.RegionUid).IsNull == false)
        Entity.RegionUid = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.RegionUid).GetAsGuid();
      else
        Entity.RegionUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.RegionUid, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.RegionUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsBoundToHardware).IsNull == false)
        Entity.IsBoundToHardware = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsBoundToHardware).GetAsBool();
      else
        Entity.IsBoundToHardware = false;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.IsBoundToHardware, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsBoundToHardware).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.RegionName).IsNull == false)
        Entity.RegionName = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.RegionName).GetAsString();
      else
        Entity.RegionName = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.RegionName, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.RegionName).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SiteName).IsNull == false)
        Entity.SiteName = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SiteName).GetAsString();
      else
        Entity.SiteName = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.SiteName, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SiteName).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterGroupId).IsNull == false)
        Entity.ClusterGroupId = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterGroupId).GetAsInteger();
      else
        Entity.ClusterGroupId = 0;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.ClusterGroupId, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterGroupId).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterNumber).IsNull == false)
        Entity.ClusterNumber = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterNumber).GetAsInteger();
      else
        Entity.ClusterNumber = 0;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.ClusterNumber, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterNumber).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.PanelNumber).IsNull == false)
        Entity.PanelNumber = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.PanelNumber).GetAsInteger();
      else
        Entity.PanelNumber = 0;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.PanelNumber, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.PanelNumber).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.BoardNumber).IsNull == false)
        Entity.BoardNumber = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.BoardNumber).GetAsShort();
      else
        Entity.BoardNumber = 0;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.BoardNumber, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.BoardNumber).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SectionNumber).IsNull == false)
        Entity.SectionNumber = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SectionNumber).GetAsShort();
      else
        Entity.SectionNumber = 0;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.SectionNumber, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SectionNumber).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ModuleNumber).IsNull == false)
        Entity.ModuleNumber = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ModuleNumber).GetAsShort();
      else
        Entity.ModuleNumber = 0;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.ModuleNumber, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ModuleNumber).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.NodeNumber).IsNull == false)
        Entity.NodeNumber = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.NodeNumber).GetAsShort();
      else
        Entity.NodeNumber = 0;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.NodeNumber, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.NodeNumber).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterTypeUid).IsNull == false)
        Entity.ClusterTypeUid = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterTypeUid).GetAsGuid();
      else
        Entity.ClusterTypeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.ClusterTypeUid, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterTypeUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.TypeCode).IsNull == false)
        Entity.TypeCode = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.TypeCode).GetAsInteger();
      else
        Entity.TypeCode = 0;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.TypeCode, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.TypeCode).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterTypeCode).IsNull == false)
        Entity.ClusterTypeCode = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterTypeCode).GetAsString();
      else
        Entity.ClusterTypeCode = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.ClusterTypeCode, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyPanelModelUid).IsNull == false)
        Entity.GalaxyPanelModelUid = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyPanelModelUid).GetAsGuid();
      else
        Entity.GalaxyPanelModelUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.GalaxyPanelModelUid, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyPanelModelUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyPanelTypeCode).IsNull == false)
        Entity.GalaxyPanelTypeCode = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyPanelTypeCode).GetAsString();
      else
        Entity.GalaxyPanelTypeCode = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.GalaxyPanelTypeCode, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyPanelTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardTypeUid).IsNull == false)
        Entity.InterfaceBoardTypeUid = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardTypeUid).GetAsGuid();
      else
        Entity.InterfaceBoardTypeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.InterfaceBoardTypeUid, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardTypeUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardTypeCode).IsNull == false)
        Entity.InterfaceBoardTypeCode = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardTypeCode).GetAsShort();
      else
        Entity.InterfaceBoardTypeCode = 0;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.InterfaceBoardTypeCode, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardModel).IsNull == false)
        Entity.InterfaceBoardModel = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardModel).GetAsString();
      else
        Entity.InterfaceBoardModel = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.InterfaceBoardModel, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardModel).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardSectionModeUid).IsNull == false)
        Entity.InterfaceBoardSectionModeUid = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardSectionModeUid).GetAsGuid();
      else
        Entity.InterfaceBoardSectionModeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.InterfaceBoardSectionModeUid, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardSectionModeUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardSectionModeCode).IsNull == false)
        Entity.InterfaceBoardSectionModeCode = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardSectionModeCode).GetAsShort();
      else
        Entity.InterfaceBoardSectionModeCode = 0;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.InterfaceBoardSectionModeCode, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InterfaceBoardSectionModeCode).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid).IsNull == false)
        Entity.GalaxyHardwareModuleTypeUid = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid).GetAsGuid();
      else
        Entity.GalaxyHardwareModuleTypeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ModuleTypeCode).IsNull == false)
        Entity.ModuleTypeCode = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ModuleTypeCode).GetAsShort();
      else
        Entity.ModuleTypeCode = 0;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.ModuleTypeCode, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ModuleTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsNodeActive).IsNull == false)
        Entity.IsNodeActive = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsNodeActive).GetAsBool();
      else
        Entity.IsNodeActive = false;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.IsNodeActive, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsNodeActive).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterUid).IsNull == false)
        Entity.ClusterUid = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterUid).GetAsGuid();
      else
        Entity.ClusterUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.ClusterUid, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ClusterUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyPanelUid).IsNull == false)
        Entity.GalaxyPanelUid = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyPanelUid).GetAsGuid();
      else
        Entity.GalaxyPanelUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.GalaxyPanelUid, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.GalaxyPanelUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.PageNumber).IsNull == false)
        Entity.PageNumber = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.PageNumber).GetAsInteger();
      else
        Entity.PageNumber = 0;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.PageNumber, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.PageNumber).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.PageSize).IsNull == false)
        Entity.PageSize = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.PageSize).GetAsInteger();
      else
        Entity.PageSize = 0;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.PageSize, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.PageSize).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.TotalRowCount).IsNull == false)
        Entity.TotalRowCount = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.TotalRowCount).GetAsInteger();
      else
        Entity.TotalRowCount = 0;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.TotalRowCount, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.TotalRowCount).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SortColumn).IsNull == false)
        Entity.SortColumn = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SortColumn).GetAsString();
      else
        Entity.SortColumn = string.Empty;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.SortColumn, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SortColumn).Value);

      if (ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.DescendingOrder).IsNull == false)
        Entity.DescendingOrder = ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.DescendingOrder).GetAsBool();
      else
        Entity.DescendingOrder = false;
      Entity.SetOriginalValueForProperty(InputDevicePDSAValidator.ColumnNames.DescendingOrder, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.DescendingOrder).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>InputDevicePDSA</returns>
    public InputDevicePDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new InputDevicePDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement, or SELECT stored procedure based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_SelectAll");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByBinaryResourceUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_ByBinaryResourceUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByClusterUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_ByClusterUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByEntityId:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_ByEntityId");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByGalaxyPanelAddress:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_ByGalaxyPanelAddress");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByGalaxyPanelUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_ByGalaxyPanelUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByHardwareAddress:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_ByHardwareAddress");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByName:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_ByName");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByNameOrComments:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_ByNameOrComments");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByRegionUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_ByRegionUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.BySiteUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_BySiteUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ListBox:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_SelectListBox");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ListBoxByClusterUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_ListBoxByClusterUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ListBoxByGalaxyPanelAddress:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_ListBoxByGalaxyPanelAddress");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ListBoxByGalaxyPanelUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_ListBoxByGalaxyPanelUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ListBoxByName:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_ListBoxByName");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ListBoxByNameOrComments:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_ListBoxByNameOrComments");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ListBoxByPrimaryKey:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_ListBoxByPrimaryKey");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.PrimaryKey:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_SelectByPK");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.Search:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_SelectSearch");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ListBySiteUidAndName:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_ListBySiteUidAndName");
          }
          else
          {
            
          }
          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region InsertSQL Method
    /// <summary>
    /// Builds the SQL for the INSERT statement, or INSERT stored procedure based on the InsertFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string InsertSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (InsertFilter)
      {
        case InsertFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_Insert");
          }
          else
          {
            
          }
            
          break;
        
        case InsertFilters.Custom:
          sb.Append(InsertCustom);
          
          break;
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region UpdateSQL Method
    /// <summary>
    /// Builds the SQL for the UPDATE statement, or UPDATE stored procedure based on the UpdateFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string UpdateSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (UpdateFilter)
      {
        case UpdateFilters.PrimaryKey:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_Update");
          }
          else
          {
            
          }
          
          break;
        case UpdateFilters.UpdateConcurrency:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_UpdateConcurrency");
          }
          else
          {
            
          }
          
          break;
        
        case UpdateFilters.Custom:
          sb.Append(UpdateCustom);
          
          break;
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region DeleteByPK Method
    /// <summary>
    /// Delete a record from the table based on the primary key value that is passed in.
    /// </summary>
    /// <param name="inputDeviceUid">The value of the primary key of the row to delete</param>
    /// <returns>int</returns>
    public int DeleteByPK(Guid inputDeviceUid)
    {
      DeleteFilter = DeleteFilters.DeleteByPK;
      Entity.InputDeviceUid = inputDeviceUid;      
      
      // If using Audit Tracking, need to load the record first
      if (UseAuditTracking)
        LoadByPK(inputDeviceUid);

      RowsAffected = Delete();

      return RowsAffected;
    }
    #endregion

    #region DeleteSQL Method
    /// <summary>
    /// Builds the SQL for the DELETE statement, or DELETE stored procedure. You can set the WhereFilter property to selectively delete rows from the table.
    /// </summary>
    /// <returns>string</returns>
    public override string DeleteSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (DeleteFilter)
      {
        case DeleteFilters.DeleteByPK:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_DeleteByPK");
          }
          else
          {
            
          }
          
          break;

        case DeleteFilters.Custom:
          sb.Append(DeleteCustom);

          break;          
      }

      if(!UseStoredProcs)
      {
        sb.Append(WhereClauseSQL());
      }
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL, or the name of the stored procedure, that will count the number of rows.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.InputDevicePDSA_RowCount");
          }
          else
          {
            
          }
          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      if(!UseStoredProcs)
      {
        sb.Append(WhereClauseSQL());
      }
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region LoadByPK Method
    /// <summary>
    /// Load a row of data in the Entity properties. Returns a value greater than 0 if it finds the record.
    /// </summary>
    /// <param name="inputDeviceUid">The value of the primary key of the row to load</param>
    /// <returns>Int32</returns>
    public int LoadByPK(Guid inputDeviceUid)
    {
      SelectFilter = SelectFilters.PrimaryKey;
      Entity.InputDeviceUid = inputDeviceUid;      

      // Load Data into Properties
      RowsAffected = Load();

      // Reset all Collection Properties
      ResetCollectionProperties();
      
      return RowsAffected;
    }
    #endregion
    
    
    #region Updated Method
    /// <summary>
    /// This method is called after a successful update
    /// </summary>
    protected override void Updated()
    {
      Entity.ConcurrencyValue += Convert.ToInt16(1);
    }
    #endregion

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
         
          break;
        case SelectFilters.ByBinaryResourceUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@BinaryResourceUid", DbType.Guid, Entity.BinaryResourceUid));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@IsNodeActive", DbType.Boolean, Entity.IsNodeActive));
         
          break;
        case SelectFilters.ByClusterUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ClusterUid", DbType.Guid, Entity.ClusterUid));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@IsNodeActive", DbType.Boolean, Entity.IsNodeActive));
         
          break;
        case SelectFilters.ByEntityId:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@EntityId", DbType.Guid, Entity.EntityId));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@IsNodeActive", DbType.Boolean, Entity.IsNodeActive));
         
          break;
        case SelectFilters.ByGalaxyPanelAddress:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ClusterGroupId", DbType.Int32, Entity.ClusterGroupId));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ClusterNumber", DbType.Int32, Entity.ClusterNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PanelNumber", DbType.Int32, Entity.PanelNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@IsNodeActive", DbType.Boolean, Entity.IsNodeActive));
         
          break;
        case SelectFilters.ByGalaxyPanelUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@GalaxyPanelUid", DbType.Guid, Entity.GalaxyPanelUid));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@IsNodeActive", DbType.Boolean, Entity.IsNodeActive));
         
          break;
        case SelectFilters.ByHardwareAddress:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ClusterGroupId", DbType.Int32, Entity.ClusterGroupId));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ClusterNumber", DbType.Int32, Entity.ClusterNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PanelNumber", DbType.Int32, Entity.PanelNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@BoardNumber", DbType.Int16, Entity.BoardNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SectionNumber", DbType.Int16, Entity.SectionNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ModuleNumber", DbType.Int16, Entity.ModuleNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@NodeNumber", DbType.Int16, Entity.NodeNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@IsNodeActive", DbType.Boolean, Entity.IsNodeActive));
         
          break;
        case SelectFilters.ByName:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@InputName", DbType.String, Entity.InputName));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@EntityId", DbType.Guid, Entity.EntityId));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
         
          break;
        case SelectFilters.ByNameOrComments:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@InputName", DbType.String, Entity.InputName));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@EntityId", DbType.Guid, Entity.EntityId));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
         
          break;
        case SelectFilters.ByRegionUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@RegionUid", DbType.Guid, Entity.RegionUid));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@IsNodeActive", DbType.Boolean, Entity.IsNodeActive));
         
          break;
        case SelectFilters.BySiteUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SiteUid", DbType.Guid, Entity.SiteUid));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@IsNodeActive", DbType.Boolean, Entity.IsNodeActive));
         
          break;
        case SelectFilters.ListBox:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
         
          break;
        case SelectFilters.ListBoxByClusterUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ClusterUid", DbType.Guid, Entity.ClusterUid));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@IsNodeActive", DbType.Boolean, Entity.IsNodeActive));
         
          break;
        case SelectFilters.ListBoxByGalaxyPanelAddress:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ClusterGroupId", DbType.Int32, Entity.ClusterGroupId));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ClusterNumber", DbType.Int32, Entity.ClusterNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PanelNumber", DbType.Int32, Entity.PanelNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@IsNodeActive", DbType.Boolean, Entity.IsNodeActive));
         
          break;
        case SelectFilters.ListBoxByGalaxyPanelUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@GalaxyPanelUid", DbType.Guid, Entity.GalaxyPanelUid));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@IsNodeActive", DbType.Boolean, Entity.IsNodeActive));
         
          break;
        case SelectFilters.ListBoxByName:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@InputName", DbType.String, Entity.InputName));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@EntityId", DbType.Guid, Entity.EntityId));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
         
          break;
        case SelectFilters.ListBoxByNameOrComments:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@InputName", DbType.String, Entity.InputName));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@EntityId", DbType.Guid, Entity.EntityId));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
         
          break;
        case SelectFilters.ListBoxByPrimaryKey:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@InputDeviceUid", DbType.Guid, Entity.InputDeviceUid));
         
          break;
        case SelectFilters.PrimaryKey:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@InputDeviceUid", DbType.Guid, Entity.InputDeviceUid));
         
          break;
        case SelectFilters.Search:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@InputName", DbType.String, Entity.InputName));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@IsNodeActive", DbType.Boolean, Entity.IsNodeActive));
         
          break;
        case SelectFilters.ListBySiteUidAndName:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@InputName", DbType.String, Entity.InputName));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SiteUid", DbType.Guid, Entity.SiteUid));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion


    #region SetModificationCommandParameters Method
    /// <summary>
    /// Called to build any parameters prior to submitting an INSERT, UPDATE, or DELETE statement.
    /// </summary>
    protected override void SetModificationCommandParameters()
    {    
      switch (DataModificationAction)
      {
        case PDSADataModificationState.Delete:
          switch (DeleteFilter)
          {
            case DeleteFilters.DeleteByPK:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InputDeviceUid", DbType.Guid, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InputDeviceUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
          }

          break;

        case PDSADataModificationState.Insert:
          if (PrimaryKeyType == PDSAPrimaryKeyType.PDSA)
          {
            if (PrimaryKeyGenerate == true)
            {
              //  Get New Primary Key from pdsaTableIds
              PrimaryKeySet(PKGetFromPDSATableIds(PDSALoginName));
            }
          }

          switch (InsertFilter)
          {
            case InsertFilters.All:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InputDeviceUid", DbType.Guid, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InputDeviceUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@EntityId", DbType.Guid, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.EntityId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SiteUid", DbType.Guid, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SiteUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@BinaryResourceUid", DbType.Guid, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.BinaryResourceUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InputName", DbType.String, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InputName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@Location", DbType.String, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.Location).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ServiceComment", DbType.String, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ServiceComment).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CriticalityComment", DbType.String, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.CriticalityComment).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@Comment", DbType.String, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.Comment).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@EMailEventsEnabled", DbType.Boolean, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.EMailEventsEnabled).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@TransmitEventsEnabled", DbType.Boolean, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.TransmitEventsEnabled).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@FileOutputEnabled", DbType.Boolean, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.FileOutputEnabled).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@IsActive", DbType.Boolean, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsActive).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@IsTemplate", DbType.Boolean, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsTemplate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InsertName", DbType.String, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InsertName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InsertDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InsertDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateName", DbType.String, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.UpdateName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.UpdateDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
          }

          break;

        case PDSADataModificationState.Update:
          switch (UpdateFilter)
          {
            case UpdateFilters.PrimaryKey:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InputDeviceUid", DbType.Guid, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InputDeviceUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@EntityId", DbType.Guid, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.EntityId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SiteUid", DbType.Guid, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.SiteUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@BinaryResourceUid", DbType.Guid, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.BinaryResourceUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InputName", DbType.String, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InputName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@Location", DbType.String, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.Location).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ServiceComment", DbType.String, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ServiceComment).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CriticalityComment", DbType.String, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.CriticalityComment).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@Comment", DbType.String, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.Comment).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@EMailEventsEnabled", DbType.Boolean, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.EMailEventsEnabled).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@TransmitEventsEnabled", DbType.Boolean, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.TransmitEventsEnabled).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@FileOutputEnabled", DbType.Boolean, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.FileOutputEnabled).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@IsActive", DbType.Boolean, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsActive).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@IsTemplate", DbType.Boolean, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.IsTemplate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateName", DbType.String, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.UpdateName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.UpdateDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
            case UpdateFilters.UpdateConcurrency:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InputDeviceUid", DbType.Guid, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.InputDeviceUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(InputDevicePDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
          }
          break;
      }
    }
    #endregion
  }
}
