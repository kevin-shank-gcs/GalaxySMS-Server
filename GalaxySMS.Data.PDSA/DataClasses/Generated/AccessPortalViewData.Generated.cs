using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Select data from the AccessPortalViewPDSA view.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class AccessPortalViewPDSAData : PDSADataClassReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the AccessPortalViewPDSAData class
    /// </summary>
    public AccessPortalViewPDSAData() : base()
    {
      Entity = new AccessPortalViewPDSA();
      ValidatorObject = new AccessPortalViewPDSAValidator(Entity);

      Init();
    }
    
    /// <summary>
    /// Constructor for the AccessPortalViewPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a AccessPortalViewPDSA</param>
    public AccessPortalViewPDSAData(PDSADataProvider dataProvider,
      AccessPortalViewPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new AccessPortalViewPDSAValidator(Entity);

      Init();
    }
     
    /// <summary>
    /// Constructor for the AccessPortalViewPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a AccessPortalViewPDSA</param>
    /// <param name="validator">An instance of a AccessPortalViewPDSAValidator</param>
    public AccessPortalViewPDSAData(PDSADataProvider dataProvider,
      AccessPortalViewPDSA entity, AccessPortalViewPDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// A Custom SelectFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a WHERE statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum WhereFilters
    {
      /// <summary>
      /// No WhereFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom WhereFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'LikePortalName' WhereFilter
      /// </summary>
      LikePortalName
      ,
      /// <summary>
      /// 'PortalName' WhereFilter
      /// </summary>
      PortalName
    }

    /// <summary>
    /// Enumeration for selecting an ORDER BY statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum OrderByFilters
    {
      /// <summary>
      /// No OrderByFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'PortalName' OrderByFilter
      /// </summary>
      PortalName
    }
    
    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }
    /// <summary>
    /// Get/Set a WHERE clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public WhereFilters WhereFilter { get; set; }
    /// <summary>
    /// Get/Set a ORDER BY clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public OrderByFilters OrderByFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Public Property Entity Class
        private AccessPortalViewPDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public AccessPortalViewPDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "AccessPortalViewPDSAData";
      DBObjectName = "GCS.AccessPortalView";
      SchemaName = "GCS";
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;
      
      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes all of the Data Columns with valid data for each field in the table.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.AccessPortalUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.AccessPortalTypeUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.BinaryResourceUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.SiteUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.EntityId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.PortalName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.Location);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ServiceComment);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.CriticalityComment);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.Comment);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.IsTemplate);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.IsEnabled);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InsertName);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InsertDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.UpdateName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.UpdateDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ConcurrencyValue);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.RegionUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.SiteName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.RegionName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterGroupId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.PanelNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.BoardNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.SectionNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ModuleNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.NodeNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterTypeUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyPanelModelUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyPanelTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardTypeUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardModel);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ModuleTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.IsNodeActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.DoorNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyHardwareModuleUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyPanelUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.PanelName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.LastEventTime);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = null;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.LastAccessGrantedTime);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = null;

      prop = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.TotalRowCount);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.AccessPortalUid).Value = Entity.AccessPortalUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.AccessPortalUid).SetAsNull == true)
        Entity.AccessPortalUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.AccessPortalTypeUid).Value = Entity.AccessPortalTypeUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.AccessPortalTypeUid).SetAsNull == true)
        Entity.AccessPortalTypeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.BinaryResourceUid).Value = Entity.BinaryResourceUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.BinaryResourceUid).SetAsNull == true)
        Entity.BinaryResourceUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.SiteUid).Value = Entity.SiteUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.SiteUid).SetAsNull == true)
        Entity.SiteUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.EntityId).Value = Entity.EntityId;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.EntityId).SetAsNull == true)
        Entity.EntityId = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.PortalName).Value = Entity.PortalName;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.PortalName).SetAsNull == true)
        Entity.PortalName = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.Location).Value = Entity.Location;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.Location).SetAsNull == true)
        Entity.Location = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ServiceComment).Value = Entity.ServiceComment;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ServiceComment).SetAsNull == true)
        Entity.ServiceComment = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.CriticalityComment).Value = Entity.CriticalityComment;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.CriticalityComment).SetAsNull == true)
        Entity.CriticalityComment = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.Comment).Value = Entity.Comment;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.Comment).SetAsNull == true)
        Entity.Comment = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.IsTemplate).Value = Entity.IsTemplate;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.IsTemplate).SetAsNull == true)
        Entity.IsTemplate = false;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.IsEnabled).Value = Entity.IsEnabled;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.IsEnabled).SetAsNull == true)
        Entity.IsEnabled = false;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InsertName).SetAsNull == true)
        Entity.InsertName = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InsertDate).SetAsNull == true)
        Entity.InsertDate = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.UpdateName).SetAsNull == true)
        Entity.UpdateName = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.UpdateDate).SetAsNull == true)
        Entity.UpdateDate = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull == true)
        Entity.ConcurrencyValue = 0;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.RegionUid).Value = Entity.RegionUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.RegionUid).SetAsNull == true)
        Entity.RegionUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.SiteName).Value = Entity.SiteName;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.SiteName).SetAsNull == true)
        Entity.SiteName = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.RegionName).Value = Entity.RegionName;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.RegionName).SetAsNull == true)
        Entity.RegionName = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterGroupId).Value = Entity.ClusterGroupId;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterGroupId).SetAsNull == true)
        Entity.ClusterGroupId = 0;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterNumber).Value = Entity.ClusterNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterNumber).SetAsNull == true)
        Entity.ClusterNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.PanelNumber).Value = Entity.PanelNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.PanelNumber).SetAsNull == true)
        Entity.PanelNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.BoardNumber).Value = Entity.BoardNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.BoardNumber).SetAsNull == true)
        Entity.BoardNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.SectionNumber).Value = Entity.SectionNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.SectionNumber).SetAsNull == true)
        Entity.SectionNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ModuleNumber).Value = Entity.ModuleNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ModuleNumber).SetAsNull == true)
        Entity.ModuleNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.NodeNumber).Value = Entity.NodeNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.NodeNumber).SetAsNull == true)
        Entity.NodeNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterTypeUid).Value = Entity.ClusterTypeUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterTypeUid).SetAsNull == true)
        Entity.ClusterTypeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterTypeCode).Value = Entity.ClusterTypeCode;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterTypeCode).SetAsNull == true)
        Entity.ClusterTypeCode = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyPanelModelUid).Value = Entity.GalaxyPanelModelUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyPanelModelUid).SetAsNull == true)
        Entity.GalaxyPanelModelUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyPanelTypeCode).Value = Entity.GalaxyPanelTypeCode;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyPanelTypeCode).SetAsNull == true)
        Entity.GalaxyPanelTypeCode = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardTypeUid).Value = Entity.InterfaceBoardTypeUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardTypeUid).SetAsNull == true)
        Entity.InterfaceBoardTypeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardTypeCode).Value = Entity.InterfaceBoardTypeCode;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardTypeCode).SetAsNull == true)
        Entity.InterfaceBoardTypeCode = 0;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardModel).Value = Entity.InterfaceBoardModel;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardModel).SetAsNull == true)
        Entity.InterfaceBoardModel = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeUid).Value = Entity.InterfaceBoardSectionModeUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeUid).SetAsNull == true)
        Entity.InterfaceBoardSectionModeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeCode).Value = Entity.InterfaceBoardSectionModeCode;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeCode).SetAsNull == true)
        Entity.InterfaceBoardSectionModeCode = 0;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid).Value = Entity.GalaxyHardwareModuleTypeUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid).SetAsNull == true)
        Entity.GalaxyHardwareModuleTypeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ModuleTypeCode).Value = Entity.ModuleTypeCode;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ModuleTypeCode).SetAsNull == true)
        Entity.ModuleTypeCode = 0;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.IsNodeActive).Value = Entity.IsNodeActive;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.IsNodeActive).SetAsNull == true)
        Entity.IsNodeActive = false;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.DoorNumber).Value = Entity.DoorNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.DoorNumber).SetAsNull == true)
        Entity.DoorNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).Value = Entity.GalaxyInterfaceBoardSectionNodeUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).SetAsNull == true)
        Entity.GalaxyInterfaceBoardSectionNodeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).Value = Entity.GalaxyHardwareModuleUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).SetAsNull == true)
        Entity.GalaxyHardwareModuleUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).Value = Entity.GalaxyInterfaceBoardSectionUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).SetAsNull == true)
        Entity.GalaxyInterfaceBoardSectionUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).Value = Entity.GalaxyInterfaceBoardUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).SetAsNull == true)
        Entity.GalaxyInterfaceBoardUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyPanelUid).Value = Entity.GalaxyPanelUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyPanelUid).SetAsNull == true)
        Entity.GalaxyPanelUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.PanelName).Value = Entity.PanelName;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.PanelName).SetAsNull == true)
        Entity.PanelName = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterUid).Value = Entity.ClusterUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterUid).SetAsNull == true)
        Entity.ClusterUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterName).Value = Entity.ClusterName;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterName).SetAsNull == true)
        Entity.ClusterName = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.LastEventTime).Value = Entity.LastEventTime;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.LastEventTime).SetAsNull == true)
        Entity.LastEventTime = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.LastAccessGrantedTime).Value = Entity.LastAccessGrantedTime;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.LastAccessGrantedTime).SetAsNull == true)
        Entity.LastAccessGrantedTime = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.TotalRowCount).Value = Entity.TotalRowCount;
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.TotalRowCount).SetAsNull == true)
        Entity.TotalRowCount = 0;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.AccessPortalUid).IsNull == false)
        Entity.AccessPortalUid = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.AccessPortalUid).GetAsGuid();
      else
        Entity.AccessPortalUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.AccessPortalUid, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.AccessPortalUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.AccessPortalTypeUid).IsNull == false)
        Entity.AccessPortalTypeUid = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.AccessPortalTypeUid).GetAsGuid();
      else
        Entity.AccessPortalTypeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.AccessPortalTypeUid, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.AccessPortalTypeUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.BinaryResourceUid).IsNull == false)
        Entity.BinaryResourceUid = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.BinaryResourceUid).GetAsGuid();
      else
        Entity.BinaryResourceUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.BinaryResourceUid, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.BinaryResourceUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.SiteUid).IsNull == false)
        Entity.SiteUid = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.SiteUid).GetAsGuid();
      else
        Entity.SiteUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.SiteUid, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.SiteUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.EntityId).IsNull == false)
        Entity.EntityId = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.EntityId).GetAsGuid();
      else
        Entity.EntityId = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.EntityId, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.EntityId).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.PortalName).IsNull == false)
        Entity.PortalName = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.PortalName).GetAsString();
      else
        Entity.PortalName = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.PortalName, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.PortalName).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.Location).IsNull == false)
        Entity.Location = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.Location).GetAsString();
      else
        Entity.Location = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.Location, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.Location).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ServiceComment).IsNull == false)
        Entity.ServiceComment = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ServiceComment).GetAsString();
      else
        Entity.ServiceComment = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.ServiceComment, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ServiceComment).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.CriticalityComment).IsNull == false)
        Entity.CriticalityComment = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.CriticalityComment).GetAsString();
      else
        Entity.CriticalityComment = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.CriticalityComment, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.CriticalityComment).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.Comment).IsNull == false)
        Entity.Comment = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.Comment).GetAsString();
      else
        Entity.Comment = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.Comment, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.Comment).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.IsTemplate).IsNull == false)
        Entity.IsTemplate = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.IsTemplate).GetAsBool();
      else
        Entity.IsTemplate = false;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.IsTemplate, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.IsTemplate).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.IsEnabled).IsNull == false)
        Entity.IsEnabled = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.IsEnabled).GetAsBool();
      else
        Entity.IsEnabled = false;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.IsEnabled, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.IsEnabled).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InsertName).GetAsString();
      else
        Entity.InsertName = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.InsertName, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InsertName).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
      else
        Entity.InsertDate = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.InsertDate, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InsertDate).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.UpdateName).GetAsString();
      else
        Entity.UpdateName = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.UpdateName, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.UpdateName).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.UpdateDate).GetAsDateTimeOffset();
      else
        Entity.UpdateDate = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.UpdateDate, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.UpdateDate).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
      else
        Entity.ConcurrencyValue = 0;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.ConcurrencyValue, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ConcurrencyValue).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.RegionUid).IsNull == false)
        Entity.RegionUid = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.RegionUid).GetAsGuid();
      else
        Entity.RegionUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.RegionUid, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.RegionUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.SiteName).IsNull == false)
        Entity.SiteName = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.SiteName).GetAsString();
      else
        Entity.SiteName = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.SiteName, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.SiteName).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.RegionName).IsNull == false)
        Entity.RegionName = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.RegionName).GetAsString();
      else
        Entity.RegionName = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.RegionName, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.RegionName).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterGroupId).IsNull == false)
        Entity.ClusterGroupId = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterGroupId).GetAsInteger();
      else
        Entity.ClusterGroupId = 0;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.ClusterGroupId, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterGroupId).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterNumber).IsNull == false)
        Entity.ClusterNumber = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterNumber).GetAsInteger();
      else
        Entity.ClusterNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.ClusterNumber, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.PanelNumber).IsNull == false)
        Entity.PanelNumber = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.PanelNumber).GetAsInteger();
      else
        Entity.PanelNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.PanelNumber, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.PanelNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.BoardNumber).IsNull == false)
        Entity.BoardNumber = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.BoardNumber).GetAsShort();
      else
        Entity.BoardNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.BoardNumber, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.BoardNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.SectionNumber).IsNull == false)
        Entity.SectionNumber = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.SectionNumber).GetAsShort();
      else
        Entity.SectionNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.SectionNumber, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.SectionNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ModuleNumber).IsNull == false)
        Entity.ModuleNumber = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ModuleNumber).GetAsShort();
      else
        Entity.ModuleNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.ModuleNumber, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ModuleNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.NodeNumber).IsNull == false)
        Entity.NodeNumber = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.NodeNumber).GetAsShort();
      else
        Entity.NodeNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.NodeNumber, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.NodeNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterTypeUid).IsNull == false)
        Entity.ClusterTypeUid = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterTypeUid).GetAsGuid();
      else
        Entity.ClusterTypeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.ClusterTypeUid, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterTypeUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterTypeCode).IsNull == false)
        Entity.ClusterTypeCode = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterTypeCode).GetAsString();
      else
        Entity.ClusterTypeCode = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.ClusterTypeCode, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyPanelModelUid).IsNull == false)
        Entity.GalaxyPanelModelUid = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyPanelModelUid).GetAsGuid();
      else
        Entity.GalaxyPanelModelUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.GalaxyPanelModelUid, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyPanelModelUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyPanelTypeCode).IsNull == false)
        Entity.GalaxyPanelTypeCode = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyPanelTypeCode).GetAsString();
      else
        Entity.GalaxyPanelTypeCode = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.GalaxyPanelTypeCode, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyPanelTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardTypeUid).IsNull == false)
        Entity.InterfaceBoardTypeUid = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardTypeUid).GetAsGuid();
      else
        Entity.InterfaceBoardTypeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardTypeUid, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardTypeUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardTypeCode).IsNull == false)
        Entity.InterfaceBoardTypeCode = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardTypeCode).GetAsShort();
      else
        Entity.InterfaceBoardTypeCode = 0;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardTypeCode, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardModel).IsNull == false)
        Entity.InterfaceBoardModel = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardModel).GetAsString();
      else
        Entity.InterfaceBoardModel = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardModel, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardModel).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeUid).IsNull == false)
        Entity.InterfaceBoardSectionModeUid = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeUid).GetAsGuid();
      else
        Entity.InterfaceBoardSectionModeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeUid, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeCode).IsNull == false)
        Entity.InterfaceBoardSectionModeCode = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeCode).GetAsShort();
      else
        Entity.InterfaceBoardSectionModeCode = 0;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeCode, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeCode).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid).IsNull == false)
        Entity.GalaxyHardwareModuleTypeUid = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid).GetAsGuid();
      else
        Entity.GalaxyHardwareModuleTypeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ModuleTypeCode).IsNull == false)
        Entity.ModuleTypeCode = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ModuleTypeCode).GetAsShort();
      else
        Entity.ModuleTypeCode = 0;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.ModuleTypeCode, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ModuleTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.IsNodeActive).IsNull == false)
        Entity.IsNodeActive = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.IsNodeActive).GetAsBool();
      else
        Entity.IsNodeActive = false;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.IsNodeActive, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.IsNodeActive).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.DoorNumber).IsNull == false)
        Entity.DoorNumber = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.DoorNumber).GetAsShort();
      else
        Entity.DoorNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.DoorNumber, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.DoorNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).IsNull == false)
        Entity.GalaxyInterfaceBoardSectionNodeUid = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).GetAsGuid();
      else
        Entity.GalaxyInterfaceBoardSectionNodeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).IsNull == false)
        Entity.GalaxyHardwareModuleUid = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).GetAsGuid();
      else
        Entity.GalaxyHardwareModuleUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.GalaxyHardwareModuleUid, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).IsNull == false)
        Entity.GalaxyInterfaceBoardSectionUid = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).GetAsGuid();
      else
        Entity.GalaxyInterfaceBoardSectionUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).IsNull == false)
        Entity.GalaxyInterfaceBoardUid = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).GetAsGuid();
      else
        Entity.GalaxyInterfaceBoardUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyPanelUid).IsNull == false)
        Entity.GalaxyPanelUid = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyPanelUid).GetAsGuid();
      else
        Entity.GalaxyPanelUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.GalaxyPanelUid, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.GalaxyPanelUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.PanelName).IsNull == false)
        Entity.PanelName = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.PanelName).GetAsString();
      else
        Entity.PanelName = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.PanelName, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.PanelName).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterUid).IsNull == false)
        Entity.ClusterUid = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterUid).GetAsGuid();
      else
        Entity.ClusterUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.ClusterUid, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterName).IsNull == false)
        Entity.ClusterName = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterName).GetAsString();
      else
        Entity.ClusterName = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.ClusterName, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.ClusterName).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.LastEventTime).IsNull == false)
        Entity.LastEventTime = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.LastEventTime).GetAsDateTimeOffset();
      else
        Entity.LastEventTime = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.LastEventTime, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.LastEventTime).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.LastAccessGrantedTime).IsNull == false)
        Entity.LastAccessGrantedTime = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.LastAccessGrantedTime).GetAsDateTimeOffset();
      else
        Entity.LastAccessGrantedTime = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.LastAccessGrantedTime, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.LastAccessGrantedTime).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.TotalRowCount).IsNull == false)
        Entity.TotalRowCount = ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.TotalRowCount).GetAsInteger();
      else
        Entity.TotalRowCount = 0;
      Entity.SetOriginalValueForProperty(AccessPortalViewPDSAValidator.ColumnNames.TotalRowCount, ValidatorObject.Properties.GetByName(AccessPortalViewPDSAValidator.ColumnNames.TotalRowCount).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>AccessPortalViewPDSA</returns>
    public AccessPortalViewPDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new AccessPortalViewPDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          
          
          break;
        case SelectFilters.Search:
          
          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL that will count the number of rows returned from this view.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          
          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      sb.Append(WhereClauseSQL());
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion
    
    #region WhereClauseSQL Method
    /// <summary>
    /// Builds the WHERE clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string WhereClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (WhereFilter)
      {
        case WhereFilters.Custom:
          sb.Append(" " + WhereCustom);

          break;

        case WhereFilters.None:
          //  Do nothing

          break;

        case WhereFilters.LikePortalName:
          
          
          break;
        case WhereFilters.PortalName:
          
          
          break;
      }
      
      return sb.ToString();
    }
    #endregion

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
         
          break;
        case SelectFilters.Search:
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion

    #region WhereClauseFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any WHERE clause parameters.
    /// </summary>
    protected override void WhereClauseFillInParameters()
    {
      switch (WhereFilter)
      {
        case WhereFilters.LikePortalName:
         
          break;
        case WhereFilters.PortalName:
         
          break;
      }
    }
    #endregion

    #region OrderByClauseSQL Method
    /// <summary>
    /// Builds the ORDER BY clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string OrderByClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (OrderByFilter)
      {
        case OrderByFilters.None:
          //  Do Nothing

          break;

        case OrderByFilters.Custom:
          sb.Append(" " + OrderByCustom);

          break;
          
        case OrderByFilters.PortalName:
          
          
          break;
      }

      return sb.ToString();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the AccessPortalViewPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'AccessPortalUid'
    /// </summary>
    public static string AccessPortalUid = "AccessPortalUid";
    /// <summary>
    /// Returns 'AccessPortalTypeUid'
    /// </summary>
    public static string AccessPortalTypeUid = "AccessPortalTypeUid";
    /// <summary>
    /// Returns 'BinaryResourceUid'
    /// </summary>
    public static string BinaryResourceUid = "BinaryResourceUid";
    /// <summary>
    /// Returns 'SiteUid'
    /// </summary>
    public static string SiteUid = "SiteUid";
    /// <summary>
    /// Returns 'EntityId'
    /// </summary>
    public static string EntityId = "EntityId";
    /// <summary>
    /// Returns 'PortalName'
    /// </summary>
    public static string PortalName = "PortalName";
    /// <summary>
    /// Returns 'Location'
    /// </summary>
    public static string Location = "Location";
    /// <summary>
    /// Returns 'ServiceComment'
    /// </summary>
    public static string ServiceComment = "ServiceComment";
    /// <summary>
    /// Returns 'CriticalityComment'
    /// </summary>
    public static string CriticalityComment = "CriticalityComment";
    /// <summary>
    /// Returns 'Comment'
    /// </summary>
    public static string Comment = "Comment";
    /// <summary>
    /// Returns 'IsTemplate'
    /// </summary>
    public static string IsTemplate = "IsTemplate";
    /// <summary>
    /// Returns 'IsEnabled'
    /// </summary>
    public static string IsEnabled = "IsEnabled";
    /// <summary>
    /// Returns 'InsertName'
    /// </summary>
    public static string InsertName = "InsertName";
    /// <summary>
    /// Returns 'InsertDate'
    /// </summary>
    public static string InsertDate = "InsertDate";
    /// <summary>
    /// Returns 'UpdateName'
    /// </summary>
    public static string UpdateName = "UpdateName";
    /// <summary>
    /// Returns 'UpdateDate'
    /// </summary>
    public static string UpdateDate = "UpdateDate";
    /// <summary>
    /// Returns 'ConcurrencyValue'
    /// </summary>
    public static string ConcurrencyValue = "ConcurrencyValue";
    /// <summary>
    /// Returns 'RegionUid'
    /// </summary>
    public static string RegionUid = "RegionUid";
    /// <summary>
    /// Returns 'SiteName'
    /// </summary>
    public static string SiteName = "SiteName";
    /// <summary>
    /// Returns 'RegionName'
    /// </summary>
    public static string RegionName = "RegionName";
    /// <summary>
    /// Returns 'ClusterGroupId'
    /// </summary>
    public static string ClusterGroupId = "ClusterGroupId";
    /// <summary>
    /// Returns 'ClusterNumber'
    /// </summary>
    public static string ClusterNumber = "ClusterNumber";
    /// <summary>
    /// Returns 'PanelNumber'
    /// </summary>
    public static string PanelNumber = "PanelNumber";
    /// <summary>
    /// Returns 'BoardNumber'
    /// </summary>
    public static string BoardNumber = "BoardNumber";
    /// <summary>
    /// Returns 'SectionNumber'
    /// </summary>
    public static string SectionNumber = "SectionNumber";
    /// <summary>
    /// Returns 'ModuleNumber'
    /// </summary>
    public static string ModuleNumber = "ModuleNumber";
    /// <summary>
    /// Returns 'NodeNumber'
    /// </summary>
    public static string NodeNumber = "NodeNumber";
    /// <summary>
    /// Returns 'ClusterTypeUid'
    /// </summary>
    public static string ClusterTypeUid = "ClusterTypeUid";
    /// <summary>
    /// Returns 'ClusterTypeCode'
    /// </summary>
    public static string ClusterTypeCode = "ClusterTypeCode";
    /// <summary>
    /// Returns 'GalaxyPanelModelUid'
    /// </summary>
    public static string GalaxyPanelModelUid = "GalaxyPanelModelUid";
    /// <summary>
    /// Returns 'GalaxyPanelTypeCode'
    /// </summary>
    public static string GalaxyPanelTypeCode = "GalaxyPanelTypeCode";
    /// <summary>
    /// Returns 'InterfaceBoardTypeUid'
    /// </summary>
    public static string InterfaceBoardTypeUid = "InterfaceBoardTypeUid";
    /// <summary>
    /// Returns 'InterfaceBoardTypeCode'
    /// </summary>
    public static string InterfaceBoardTypeCode = "InterfaceBoardTypeCode";
    /// <summary>
    /// Returns 'InterfaceBoardModel'
    /// </summary>
    public static string InterfaceBoardModel = "InterfaceBoardModel";
    /// <summary>
    /// Returns 'InterfaceBoardSectionModeUid'
    /// </summary>
    public static string InterfaceBoardSectionModeUid = "InterfaceBoardSectionModeUid";
    /// <summary>
    /// Returns 'InterfaceBoardSectionModeCode'
    /// </summary>
    public static string InterfaceBoardSectionModeCode = "InterfaceBoardSectionModeCode";
    /// <summary>
    /// Returns 'GalaxyHardwareModuleTypeUid'
    /// </summary>
    public static string GalaxyHardwareModuleTypeUid = "GalaxyHardwareModuleTypeUid";
    /// <summary>
    /// Returns 'ModuleTypeCode'
    /// </summary>
    public static string ModuleTypeCode = "ModuleTypeCode";
    /// <summary>
    /// Returns 'IsNodeActive'
    /// </summary>
    public static string IsNodeActive = "IsNodeActive";
    /// <summary>
    /// Returns 'DoorNumber'
    /// </summary>
    public static string DoorNumber = "DoorNumber";
    /// <summary>
    /// Returns 'GalaxyInterfaceBoardSectionNodeUid'
    /// </summary>
    public static string GalaxyInterfaceBoardSectionNodeUid = "GalaxyInterfaceBoardSectionNodeUid";
    /// <summary>
    /// Returns 'GalaxyHardwareModuleUid'
    /// </summary>
    public static string GalaxyHardwareModuleUid = "GalaxyHardwareModuleUid";
    /// <summary>
    /// Returns 'GalaxyInterfaceBoardSectionUid'
    /// </summary>
    public static string GalaxyInterfaceBoardSectionUid = "GalaxyInterfaceBoardSectionUid";
    /// <summary>
    /// Returns 'GalaxyInterfaceBoardUid'
    /// </summary>
    public static string GalaxyInterfaceBoardUid = "GalaxyInterfaceBoardUid";
    /// <summary>
    /// Returns 'GalaxyPanelUid'
    /// </summary>
    public static string GalaxyPanelUid = "GalaxyPanelUid";
    /// <summary>
    /// Returns 'PanelName'
    /// </summary>
    public static string PanelName = "PanelName";
    /// <summary>
    /// Returns 'ClusterUid'
    /// </summary>
    public static string ClusterUid = "ClusterUid";
    /// <summary>
    /// Returns 'ClusterName'
    /// </summary>
    public static string ClusterName = "ClusterName";
    /// <summary>
    /// Returns 'LastEventTime'
    /// </summary>
    public static string LastEventTime = "LastEventTime";
    /// <summary>
    /// Returns 'LastAccessGrantedTime'
    /// </summary>
    public static string LastAccessGrantedTime = "LastAccessGrantedTime";
    /// <summary>
    /// Returns 'TotalRowCount'
    /// </summary>
    public static string TotalRowCount = "TotalRowCount";
    }
    #endregion
  }
}
