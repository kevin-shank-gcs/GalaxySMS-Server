using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Select data from the InputDeviceGalaxyHardwareAddressViewPDSA view.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class InputDeviceGalaxyHardwareAddressViewPDSAData : PDSADataClassReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the InputDeviceGalaxyHardwareAddressViewPDSAData class
    /// </summary>
    public InputDeviceGalaxyHardwareAddressViewPDSAData() : base()
    {
      Entity = new InputDeviceGalaxyHardwareAddressViewPDSA();
      ValidatorObject = new InputDeviceGalaxyHardwareAddressViewPDSAValidator(Entity);

      Init();
    }
    
    /// <summary>
    /// Constructor for the InputDeviceGalaxyHardwareAddressViewPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a InputDeviceGalaxyHardwareAddressViewPDSA</param>
    public InputDeviceGalaxyHardwareAddressViewPDSAData(PDSADataProvider dataProvider,
      InputDeviceGalaxyHardwareAddressViewPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new InputDeviceGalaxyHardwareAddressViewPDSAValidator(Entity);

      Init();
    }
     
    /// <summary>
    /// Constructor for the InputDeviceGalaxyHardwareAddressViewPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a InputDeviceGalaxyHardwareAddressViewPDSA</param>
    /// <param name="validator">An instance of a InputDeviceGalaxyHardwareAddressViewPDSAValidator</param>
    public InputDeviceGalaxyHardwareAddressViewPDSAData(PDSADataProvider dataProvider,
      InputDeviceGalaxyHardwareAddressViewPDSA entity, InputDeviceGalaxyHardwareAddressViewPDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// 'InputDeviceUid' SelectFilter
      /// </summary>
      InputDeviceUid
      ,
      /// <summary>
      /// A Custom SelectFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a WHERE statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum WhereFilters
    {
      /// <summary>
      /// No WhereFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom WhereFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'InputName' WhereFilter
      /// </summary>
      InputName
      ,
      /// <summary>
      /// 'LikeInputName' WhereFilter
      /// </summary>
      LikeInputName
      ,
      /// <summary>
      /// 'InputDeviceUid' WhereFilter
      /// </summary>
      InputDeviceUid
      ,
      /// <summary>
      /// 'GalaxyPanelUid' WhereFilter
      /// </summary>
      GalaxyPanelUid
      ,
      /// <summary>
      /// 'GalaxyInterfaceBoardSectionUid' WhereFilter
      /// </summary>
      GalaxyInterfaceBoardSectionUid
      ,
      /// <summary>
      /// 'ClusterUid' WhereFilter
      /// </summary>
      ClusterUid
    }

    /// <summary>
    /// Enumeration for selecting an ORDER BY statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum OrderByFilters
    {
      /// <summary>
      /// No OrderByFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'InputName' OrderByFilter
      /// </summary>
      InputName
      ,
      /// <summary>
      /// 'PhysicalAddress' OrderByFilter
      /// </summary>
      PhysicalAddress
      ,
      /// <summary>
      /// 'NodeNumber' OrderByFilter
      /// </summary>
      NodeNumber
    }
    
    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }
    /// <summary>
    /// Get/Set a WHERE clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public WhereFilters WhereFilter { get; set; }
    /// <summary>
    /// Get/Set a ORDER BY clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public OrderByFilters OrderByFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Public Property Entity Class
        private InputDeviceGalaxyHardwareAddressViewPDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public InputDeviceGalaxyHardwareAddressViewPDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "InputDeviceGalaxyHardwareAddressViewPDSAData";
      DBObjectName = "GCS.InputDeviceGalaxyHardwareAddressView";
      SchemaName = "GCS";
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;
      
      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes all of the Data Columns with valid data for each field in the table.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InputName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InputDeviceUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterGroupId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelModelUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.PanelNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.BoardNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardModel);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.SectionNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.NodeNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InputName).Value = Entity.InputName;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InputName).SetAsNull == true)
        Entity.InputName = string.Empty;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InputDeviceUid).Value = Entity.InputDeviceUid;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InputDeviceUid).SetAsNull == true)
        Entity.InputDeviceUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterNumber).Value = Entity.ClusterNumber;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterNumber).SetAsNull == true)
        Entity.ClusterNumber = 0;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterGroupId).Value = Entity.ClusterGroupId;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterGroupId).SetAsNull == true)
        Entity.ClusterGroupId = 0;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeUid).Value = Entity.ClusterTypeUid;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeUid).SetAsNull == true)
        Entity.ClusterTypeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeCode).Value = Entity.ClusterTypeCode;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeCode).SetAsNull == true)
        Entity.ClusterTypeCode = string.Empty;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelModelUid).Value = Entity.GalaxyPanelModelUid;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelModelUid).SetAsNull == true)
        Entity.GalaxyPanelModelUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelTypeCode).Value = Entity.GalaxyPanelTypeCode;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelTypeCode).SetAsNull == true)
        Entity.GalaxyPanelTypeCode = string.Empty;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.PanelNumber).Value = Entity.PanelNumber;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.PanelNumber).SetAsNull == true)
        Entity.PanelNumber = 0;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.BoardNumber).Value = Entity.BoardNumber;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.BoardNumber).SetAsNull == true)
        Entity.BoardNumber = 0;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeUid).Value = Entity.InterfaceBoardTypeUid;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeUid).SetAsNull == true)
        Entity.InterfaceBoardTypeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeCode).Value = Entity.InterfaceBoardTypeCode;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeCode).SetAsNull == true)
        Entity.InterfaceBoardTypeCode = 0;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardModel).Value = Entity.InterfaceBoardModel;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardModel).SetAsNull == true)
        Entity.InterfaceBoardModel = string.Empty;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.SectionNumber).Value = Entity.SectionNumber;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.SectionNumber).SetAsNull == true)
        Entity.SectionNumber = 0;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeUid).Value = Entity.InterfaceBoardSectionModeUid;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeUid).SetAsNull == true)
        Entity.InterfaceBoardSectionModeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeCode).Value = Entity.InterfaceBoardSectionModeCode;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeCode).SetAsNull == true)
        Entity.InterfaceBoardSectionModeCode = 0;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleNumber).Value = Entity.ModuleNumber;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleNumber).SetAsNull == true)
        Entity.ModuleNumber = 0;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid).Value = Entity.GalaxyHardwareModuleTypeUid;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid).SetAsNull == true)
        Entity.GalaxyHardwareModuleTypeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleTypeCode).Value = Entity.ModuleTypeCode;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleTypeCode).SetAsNull == true)
        Entity.ModuleTypeCode = 0;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.NodeNumber).Value = Entity.NodeNumber;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.NodeNumber).SetAsNull == true)
        Entity.NodeNumber = 0;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterUid).Value = Entity.ClusterUid;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterUid).SetAsNull == true)
        Entity.ClusterUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelUid).Value = Entity.GalaxyPanelUid;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelUid).SetAsNull == true)
        Entity.GalaxyPanelUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).Value = Entity.GalaxyInterfaceBoardUid;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).SetAsNull == true)
        Entity.GalaxyInterfaceBoardUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).Value = Entity.GalaxyInterfaceBoardSectionUid;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).SetAsNull == true)
        Entity.GalaxyInterfaceBoardSectionUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).Value = Entity.GalaxyHardwareModuleUid;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).SetAsNull == true)
        Entity.GalaxyHardwareModuleUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).Value = Entity.GalaxyInterfaceBoardSectionNodeUid;
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).SetAsNull == true)
        Entity.GalaxyInterfaceBoardSectionNodeUid = Guid.Empty;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InputName).IsNull == false)
        Entity.InputName = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InputName).GetAsString();
      else
        Entity.InputName = string.Empty;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InputName, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InputName).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InputDeviceUid).IsNull == false)
        Entity.InputDeviceUid = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InputDeviceUid).GetAsGuid();
      else
        Entity.InputDeviceUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InputDeviceUid, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InputDeviceUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterNumber).IsNull == false)
        Entity.ClusterNumber = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterNumber).GetAsInteger();
      else
        Entity.ClusterNumber = 0;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterNumber, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterNumber).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterGroupId).IsNull == false)
        Entity.ClusterGroupId = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterGroupId).GetAsInteger();
      else
        Entity.ClusterGroupId = 0;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterGroupId, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterGroupId).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeUid).IsNull == false)
        Entity.ClusterTypeUid = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeUid).GetAsGuid();
      else
        Entity.ClusterTypeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeUid, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeCode).IsNull == false)
        Entity.ClusterTypeCode = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeCode).GetAsString();
      else
        Entity.ClusterTypeCode = string.Empty;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeCode, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelModelUid).IsNull == false)
        Entity.GalaxyPanelModelUid = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelModelUid).GetAsGuid();
      else
        Entity.GalaxyPanelModelUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelModelUid, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelModelUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelTypeCode).IsNull == false)
        Entity.GalaxyPanelTypeCode = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelTypeCode).GetAsString();
      else
        Entity.GalaxyPanelTypeCode = string.Empty;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelTypeCode, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.PanelNumber).IsNull == false)
        Entity.PanelNumber = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.PanelNumber).GetAsInteger();
      else
        Entity.PanelNumber = 0;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.PanelNumber, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.PanelNumber).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.BoardNumber).IsNull == false)
        Entity.BoardNumber = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.BoardNumber).GetAsShort();
      else
        Entity.BoardNumber = 0;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.BoardNumber, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.BoardNumber).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeUid).IsNull == false)
        Entity.InterfaceBoardTypeUid = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeUid).GetAsGuid();
      else
        Entity.InterfaceBoardTypeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeUid, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeCode).IsNull == false)
        Entity.InterfaceBoardTypeCode = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeCode).GetAsShort();
      else
        Entity.InterfaceBoardTypeCode = 0;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeCode, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardModel).IsNull == false)
        Entity.InterfaceBoardModel = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardModel).GetAsString();
      else
        Entity.InterfaceBoardModel = string.Empty;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardModel, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardModel).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.SectionNumber).IsNull == false)
        Entity.SectionNumber = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.SectionNumber).GetAsShort();
      else
        Entity.SectionNumber = 0;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.SectionNumber, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.SectionNumber).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeUid).IsNull == false)
        Entity.InterfaceBoardSectionModeUid = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeUid).GetAsGuid();
      else
        Entity.InterfaceBoardSectionModeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeUid, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeCode).IsNull == false)
        Entity.InterfaceBoardSectionModeCode = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeCode).GetAsShort();
      else
        Entity.InterfaceBoardSectionModeCode = 0;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeCode, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeCode).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleNumber).IsNull == false)
        Entity.ModuleNumber = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleNumber).GetAsShort();
      else
        Entity.ModuleNumber = 0;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleNumber, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleNumber).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid).IsNull == false)
        Entity.GalaxyHardwareModuleTypeUid = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid).GetAsGuid();
      else
        Entity.GalaxyHardwareModuleTypeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleTypeCode).IsNull == false)
        Entity.ModuleTypeCode = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleTypeCode).GetAsShort();
      else
        Entity.ModuleTypeCode = 0;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleTypeCode, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.NodeNumber).IsNull == false)
        Entity.NodeNumber = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.NodeNumber).GetAsShort();
      else
        Entity.NodeNumber = 0;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.NodeNumber, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.NodeNumber).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterUid).IsNull == false)
        Entity.ClusterUid = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterUid).GetAsGuid();
      else
        Entity.ClusterUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterUid, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelUid).IsNull == false)
        Entity.GalaxyPanelUid = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelUid).GetAsGuid();
      else
        Entity.GalaxyPanelUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelUid, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).IsNull == false)
        Entity.GalaxyInterfaceBoardUid = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).GetAsGuid();
      else
        Entity.GalaxyInterfaceBoardUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).IsNull == false)
        Entity.GalaxyInterfaceBoardSectionUid = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).GetAsGuid();
      else
        Entity.GalaxyInterfaceBoardSectionUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).IsNull == false)
        Entity.GalaxyHardwareModuleUid = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).GetAsGuid();
      else
        Entity.GalaxyHardwareModuleUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleUid, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).Value);

      if (ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).IsNull == false)
        Entity.GalaxyInterfaceBoardSectionNodeUid = ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).GetAsGuid();
      else
        Entity.GalaxyInterfaceBoardSectionNodeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid, ValidatorObject.Properties.GetByName(InputDeviceGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>InputDeviceGalaxyHardwareAddressViewPDSA</returns>
    public InputDeviceGalaxyHardwareAddressViewPDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new InputDeviceGalaxyHardwareAddressViewPDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          
          
          break;
        case SelectFilters.Search:
          
          
          break;
        case SelectFilters.InputDeviceUid:
          sb.Append(" SELECT InputDeviceUid");

          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL that will count the number of rows returned from this view.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          
          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      sb.Append(WhereClauseSQL());
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion
    
    #region WhereClauseSQL Method
    /// <summary>
    /// Builds the WHERE clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string WhereClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (WhereFilter)
      {
        case WhereFilters.Custom:
          sb.Append(" " + WhereCustom);

          break;

        case WhereFilters.None:
          //  Do nothing

          break;

        case WhereFilters.InputName:
          sb.Append(" WHERE InputName = @InputName");

          
          break;
        case WhereFilters.LikeInputName:
          sb.Append(" WHERE InputName LIKE @InputName + '%'");

          
          break;
        case WhereFilters.InputDeviceUid:
          sb.Append(" WHERE InputDeviceUid = @InputDeviceUid");

          
          break;
        case WhereFilters.GalaxyPanelUid:
          sb.Append(" WHERE GalaxyPanelUid = @GalaxyPanelUid");

          
          break;
        case WhereFilters.GalaxyInterfaceBoardSectionUid:
          sb.Append(" WHERE GalaxyInterfaceBoardSectionUid = @GalaxyInterfaceBoardSectionUid");

          
          break;
        case WhereFilters.ClusterUid:
          sb.Append(" WHERE ClusterUid = @ClusterUid");

          
          break;
      }
      
      return sb.ToString();
    }
    #endregion

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
         
          break;
        case SelectFilters.Search:
         
          break;
        case SelectFilters.InputDeviceUid:
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion

    #region WhereClauseFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any WHERE clause parameters.
    /// </summary>
    protected override void WhereClauseFillInParameters()
    {
      switch (WhereFilter)
      {
        case WhereFilters.InputName:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@InputName", DbType.String, Entity.InputName));
         
          break;
        case WhereFilters.LikeInputName:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@InputName", DbType.String, Entity.InputName));
         
          break;
        case WhereFilters.InputDeviceUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@InputDeviceUid", DbType.Guid, Entity.InputDeviceUid));
         
          break;
        case WhereFilters.GalaxyPanelUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@GalaxyPanelUid", DbType.Guid, Entity.GalaxyPanelUid));
         
          break;
        case WhereFilters.GalaxyInterfaceBoardSectionUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@GalaxyInterfaceBoardSectionUid", DbType.Guid, Entity.GalaxyInterfaceBoardSectionUid));
         
          break;
        case WhereFilters.ClusterUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ClusterUid", DbType.Guid, Entity.ClusterUid));
         
          break;
      }
    }
    #endregion

    #region OrderByClauseSQL Method
    /// <summary>
    /// Builds the ORDER BY clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string OrderByClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (OrderByFilter)
      {
        case OrderByFilters.None:
          //  Do Nothing

          break;

        case OrderByFilters.Custom:
          sb.Append(" " + OrderByCustom);

          break;
          
        case OrderByFilters.InputName:
          sb.Append(" ORDER BY InputName");

          
          break;
        case OrderByFilters.PhysicalAddress:
          sb.Append(" ORDER BY ClusterNumber, PanelNumber, BoardNumber, SectionNumber, ModuleNumber, NodeNumber");

          
          break;
        case OrderByFilters.NodeNumber:
          sb.Append(" ORDER BY NodeNumber");

          
          break;
      }

      return sb.ToString();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the InputDeviceGalaxyHardwareAddressViewPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'InputName'
    /// </summary>
    public static string InputName = "InputName";
    /// <summary>
    /// Returns 'InputDeviceUid'
    /// </summary>
    public static string InputDeviceUid = "InputDeviceUid";
    /// <summary>
    /// Returns 'ClusterNumber'
    /// </summary>
    public static string ClusterNumber = "ClusterNumber";
    /// <summary>
    /// Returns 'ClusterGroupId'
    /// </summary>
    public static string ClusterGroupId = "ClusterGroupId";
    /// <summary>
    /// Returns 'ClusterTypeUid'
    /// </summary>
    public static string ClusterTypeUid = "ClusterTypeUid";
    /// <summary>
    /// Returns 'ClusterTypeCode'
    /// </summary>
    public static string ClusterTypeCode = "ClusterTypeCode";
    /// <summary>
    /// Returns 'GalaxyPanelModelUid'
    /// </summary>
    public static string GalaxyPanelModelUid = "GalaxyPanelModelUid";
    /// <summary>
    /// Returns 'GalaxyPanelTypeCode'
    /// </summary>
    public static string GalaxyPanelTypeCode = "GalaxyPanelTypeCode";
    /// <summary>
    /// Returns 'PanelNumber'
    /// </summary>
    public static string PanelNumber = "PanelNumber";
    /// <summary>
    /// Returns 'BoardNumber'
    /// </summary>
    public static string BoardNumber = "BoardNumber";
    /// <summary>
    /// Returns 'InterfaceBoardTypeUid'
    /// </summary>
    public static string InterfaceBoardTypeUid = "InterfaceBoardTypeUid";
    /// <summary>
    /// Returns 'InterfaceBoardTypeCode'
    /// </summary>
    public static string InterfaceBoardTypeCode = "InterfaceBoardTypeCode";
    /// <summary>
    /// Returns 'InterfaceBoardModel'
    /// </summary>
    public static string InterfaceBoardModel = "InterfaceBoardModel";
    /// <summary>
    /// Returns 'SectionNumber'
    /// </summary>
    public static string SectionNumber = "SectionNumber";
    /// <summary>
    /// Returns 'InterfaceBoardSectionModeUid'
    /// </summary>
    public static string InterfaceBoardSectionModeUid = "InterfaceBoardSectionModeUid";
    /// <summary>
    /// Returns 'InterfaceBoardSectionModeCode'
    /// </summary>
    public static string InterfaceBoardSectionModeCode = "InterfaceBoardSectionModeCode";
    /// <summary>
    /// Returns 'ModuleNumber'
    /// </summary>
    public static string ModuleNumber = "ModuleNumber";
    /// <summary>
    /// Returns 'GalaxyHardwareModuleTypeUid'
    /// </summary>
    public static string GalaxyHardwareModuleTypeUid = "GalaxyHardwareModuleTypeUid";
    /// <summary>
    /// Returns 'ModuleTypeCode'
    /// </summary>
    public static string ModuleTypeCode = "ModuleTypeCode";
    /// <summary>
    /// Returns 'NodeNumber'
    /// </summary>
    public static string NodeNumber = "NodeNumber";
    /// <summary>
    /// Returns 'ClusterUid'
    /// </summary>
    public static string ClusterUid = "ClusterUid";
    /// <summary>
    /// Returns 'GalaxyPanelUid'
    /// </summary>
    public static string GalaxyPanelUid = "GalaxyPanelUid";
    /// <summary>
    /// Returns 'GalaxyInterfaceBoardUid'
    /// </summary>
    public static string GalaxyInterfaceBoardUid = "GalaxyInterfaceBoardUid";
    /// <summary>
    /// Returns 'GalaxyInterfaceBoardSectionUid'
    /// </summary>
    public static string GalaxyInterfaceBoardSectionUid = "GalaxyInterfaceBoardSectionUid";
    /// <summary>
    /// Returns 'GalaxyHardwareModuleUid'
    /// </summary>
    public static string GalaxyHardwareModuleUid = "GalaxyHardwareModuleUid";
    /// <summary>
    /// Returns 'GalaxyInterfaceBoardSectionNodeUid'
    /// </summary>
    public static string GalaxyInterfaceBoardSectionNodeUid = "GalaxyInterfaceBoardSectionNodeUid";
    }
    #endregion
  }
}
