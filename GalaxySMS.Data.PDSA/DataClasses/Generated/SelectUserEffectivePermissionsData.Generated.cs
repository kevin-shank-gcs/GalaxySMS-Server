using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// This class calls the stored procedure SelectUserEffectivePermissionsPDSA
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public class SelectUserEffectivePermissionsPDSAData : PDSAStoredProcReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the SelectUserEffectivePermissionsPDSAData class
    /// </summary>
    public SelectUserEffectivePermissionsPDSAData() : base()
    {
      Entity = new SelectUserEffectivePermissionsPDSA();
      ValidatorObject = new  SelectUserEffectivePermissionsPDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the SelectUserEffectivePermissionsPDSAData class
    /// </summary>
    /// <param name="entity">An instance of a SelectUserEffectivePermissionsPDSA</param>
    public SelectUserEffectivePermissionsPDSAData(SelectUserEffectivePermissionsPDSA entity) : base()
    {
      Entity = entity;
      ValidatorObject = new SelectUserEffectivePermissionsPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the SelectUserEffectivePermissionsPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a SelectUserEffectivePermissionsPDSA</param>
    public SelectUserEffectivePermissionsPDSAData(PDSADataProvider dataProvider,
      SelectUserEffectivePermissionsPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new  SelectUserEffectivePermissionsPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the SelectUserEffectivePermissionsPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a SelectUserEffectivePermissionsPDSA</param>
    /// <param name="validator">An instance of a SelectUserEffectivePermissionsPDSAValidator</param>
    public SelectUserEffectivePermissionsPDSAData(PDSADataProvider dataProvider,
      SelectUserEffectivePermissionsPDSA entity, SelectUserEffectivePermissionsPDSAValidator validator)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Public Property
    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public SelectUserEffectivePermissionsPDSA Entity { get; set; }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "SelectUserEffectivePermissionsPDSAData";
      StoredProcName = "SelectUserEffectivePermissions";
      SchemaName = "GCS";

      // Create Parameters
      InitParameters();

      // Create Data Columns
      InitDataColumns();
    }
    #endregion

   #region InitParameters Method
    /// <summary>
    /// Creates all the parameters for the stored procedure.
    /// </summary>
    protected override void InitParameters()
    {
      PDSADataParameter param;

      // Clear all parameters each time
      AllParameters.Clear();

      // Create each parameter object and add to Parameters Collection
      param = new PDSADataParameter();
      param.ParameterName = SelectUserEffectivePermissionsPDSAValidator.ParameterNames.entityId;
      param.DBType = DbType.Guid;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = SelectUserEffectivePermissionsPDSAValidator.ParameterNames.userId;
      param.DBType = DbType.Guid;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = SelectUserEffectivePermissionsPDSAValidator.ParameterNames.RETURNVALUE;
      param.DBType = DbType.Int32;
      param.ParamDirection = ParameterDirection.ReturnValue;
      param.IsRefCursor = false;
      AllParameters.Add(param);

  
      AddReturnValueParameterToCollection();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes the Data Columns Collection for each field returned from the stored procedure.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSADataColumn dc;

      // Create each data column
      dc = PDSADataColumn.CreateDataColumn(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.UserId, GetResourceMessage("GCS_SelectUserEffectivePermissionsPDSA_UserId_Header", "User Id"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityId, GetResourceMessage("GCS_SelectUserEffectivePermissionsPDSA_EntityId_Header", "Entity Id"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.ParentEntityId, GetResourceMessage("GCS_SelectUserEffectivePermissionsPDSA_ParentEntityId_Header", "Parent Entity Id"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityName, GetResourceMessage("GCS_SelectUserEffectivePermissionsPDSA_EntityName_Header", "Entity Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityDescription, GetResourceMessage("GCS_SelectUserEffectivePermissionsPDSA_EntityDescription_Header", "Entity Description"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.RoleId, GetResourceMessage("GCS_SelectUserEffectivePermissionsPDSA_RoleId_Header", "Role Id"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.RoleName, GetResourceMessage("GCS_SelectUserEffectivePermissionsPDSA_RoleName_Header", "Role Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.IsAdministratorRole, GetResourceMessage("GCS_SelectUserEffectivePermissionsPDSA_IsAdministratorRole_Header", "Is Administrator Role"), false, typeof(bool), DbType.Boolean);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionCategoryId, GetResourceMessage("GCS_SelectUserEffectivePermissionsPDSA_PermissionCategoryId_Header", "Permission Category Id"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.CategoryName, GetResourceMessage("GCS_SelectUserEffectivePermissionsPDSA_CategoryName_Header", "Category Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionId, GetResourceMessage("GCS_SelectUserEffectivePermissionsPDSA_PermissionId_Header", "Permission Id"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionName, GetResourceMessage("GCS_SelectUserEffectivePermissionsPDSA_PermissionName_Header", "Permission Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionCode, GetResourceMessage("GCS_SelectUserEffectivePermissionsPDSA_PermissionCode_Header", "Permission Code"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
    }
    #endregion

    #region EntityDataToParameterCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Parameters collection
    /// </summary>
    protected override void EntityDataToParameterCollection()
    {
      if (AllParameters.GetByName(SelectUserEffectivePermissionsPDSAValidator.ParameterNames.entityId).SetAsNull == false)
        AllParameters.GetByName(SelectUserEffectivePermissionsPDSAValidator.ParameterNames.entityId).Value = Entity.entityId;
      else
        AllParameters.GetByName(SelectUserEffectivePermissionsPDSAValidator.ParameterNames.entityId).Value = System.Data.SqlTypes.SqlGuid.Null;
      if (AllParameters.GetByName(SelectUserEffectivePermissionsPDSAValidator.ParameterNames.userId).SetAsNull == false)
        AllParameters.GetByName(SelectUserEffectivePermissionsPDSAValidator.ParameterNames.userId).Value = Entity.userId;
      else
        AllParameters.GetByName(SelectUserEffectivePermissionsPDSAValidator.ParameterNames.userId).Value = System.Data.SqlTypes.SqlGuid.Null;
    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.UserId).SetAsNull == false)
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.UserId).Value = Entity.UserId;
      else
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.UserId).Value = Guid.Empty;
     
      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityId).SetAsNull == false)
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityId).Value = Entity.EntityId;
      else
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityId).Value = Guid.Empty;
     
      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.ParentEntityId).SetAsNull == false)
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.ParentEntityId).Value = Entity.ParentEntityId;
      else
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.ParentEntityId).Value = Guid.Empty;
     
      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityName).SetAsNull == false)
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityName).Value = Entity.EntityName;
      else
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityName).Value = string.Empty;
     
      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityDescription).SetAsNull == false)
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityDescription).Value = Entity.EntityDescription;
      else
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityDescription).Value = string.Empty;
     
      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.RoleId).SetAsNull == false)
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.RoleId).Value = Entity.RoleId;
      else
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.RoleId).Value = Guid.Empty;
     
      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.RoleName).SetAsNull == false)
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.RoleName).Value = Entity.RoleName;
      else
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.RoleName).Value = string.Empty;
     
      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.IsAdministratorRole).SetAsNull == false)
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.IsAdministratorRole).Value = Entity.IsAdministratorRole;
      else
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.IsAdministratorRole).Value = false;
     
      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionCategoryId).SetAsNull == false)
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionCategoryId).Value = Entity.PermissionCategoryId;
      else
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionCategoryId).Value = Guid.Empty;
     
      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.CategoryName).SetAsNull == false)
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.CategoryName).Value = Entity.CategoryName;
      else
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.CategoryName).Value = string.Empty;
     
      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionId).SetAsNull == false)
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionId).Value = Entity.PermissionId;
      else
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionId).Value = Guid.Empty;
     
      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionName).SetAsNull == false)
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionName).Value = Entity.PermissionName;
      else
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionName).Value = string.Empty;
     
      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionCode).SetAsNull == false)
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionCode).Value = Entity.PermissionCode;
      else
        AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionCode).Value = string.Empty;
     
    }
    #endregion

    #region OutputParametersToEntityData Method
    /// <summary>
    /// Moves the output parameters from the Parameters collection into the Entity class.
    /// </summary>
    protected override void OutputParametersToEntityData()
    {
      if (AllParameters.GetByName(SelectUserEffectivePermissionsPDSAValidator.ParameterNames.RETURNVALUE).IsValueNull == false)
        Entity.RETURNVALUE = AllParameters.GetByName(SelectUserEffectivePermissionsPDSAValidator.ParameterNames.RETURNVALUE).GetAsInteger();
      else
        Entity.RETURNVALUE = 0;
    }
    #endregion
    
    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.UserId).IsNull == false)
        Entity.UserId = AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.UserId).GetAsGuid();
      else
        Entity.UserId = Guid.Empty;

      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityId).IsNull == false)
        Entity.EntityId = AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityId).GetAsGuid();
      else
        Entity.EntityId = Guid.Empty;

      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.ParentEntityId).IsNull == false)
        Entity.ParentEntityId = AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.ParentEntityId).GetAsGuid();
      else
        Entity.ParentEntityId = Guid.Empty;

      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityName).IsNull == false)
        Entity.EntityName = AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityName).GetAsString();
      else
        Entity.EntityName = string.Empty;

      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityDescription).IsNull == false)
        Entity.EntityDescription = AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityDescription).GetAsString();
      else
        Entity.EntityDescription = string.Empty;

      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.RoleId).IsNull == false)
        Entity.RoleId = AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.RoleId).GetAsGuid();
      else
        Entity.RoleId = Guid.Empty;

      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.RoleName).IsNull == false)
        Entity.RoleName = AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.RoleName).GetAsString();
      else
        Entity.RoleName = string.Empty;

      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.IsAdministratorRole).IsNull == false)
        Entity.IsAdministratorRole = AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.IsAdministratorRole).GetAsBool();
      else
        Entity.IsAdministratorRole = false;

      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionCategoryId).IsNull == false)
        Entity.PermissionCategoryId = AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionCategoryId).GetAsGuid();
      else
        Entity.PermissionCategoryId = Guid.Empty;

      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.CategoryName).IsNull == false)
        Entity.CategoryName = AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.CategoryName).GetAsString();
      else
        Entity.CategoryName = string.Empty;

      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionId).IsNull == false)
        Entity.PermissionId = AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionId).GetAsGuid();
      else
        Entity.PermissionId = Guid.Empty;

      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionName).IsNull == false)
        Entity.PermissionName = AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionName).GetAsString();
      else
        Entity.PermissionName = string.Empty;

      if (AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionCode).IsNull == false)
        Entity.PermissionCode = AllColumns.GetByName(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionCode).GetAsString();
      else
        Entity.PermissionCode = string.Empty;

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>SelectUserEffectivePermissionsPDSA</returns>
    public SelectUserEffectivePermissionsPDSA CreateEntityFromDataRow(DataRow dr)
    {
      SelectUserEffectivePermissionsPDSA entity = new SelectUserEffectivePermissionsPDSA();

      if (dr.Table.Columns.Contains(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.UserId))
      {
        if (dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.UserId] != DBNull.Value)
          entity.UserId = PDSAProperty.ConvertToGuid(dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.UserId]);
      }
      if (dr.Table.Columns.Contains(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityId))
      {
        if (dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityId] != DBNull.Value)
          entity.EntityId = PDSAProperty.ConvertToGuid(dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityId]);
      }
      if (dr.Table.Columns.Contains(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.ParentEntityId))
      {
        if (dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.ParentEntityId] != DBNull.Value)
          entity.ParentEntityId = PDSAProperty.ConvertToGuid(dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.ParentEntityId]);
      }
      if (dr.Table.Columns.Contains(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityName))
      {
        if (dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityName] != DBNull.Value)
          entity.EntityName = PDSAString.ConvertToStringTrim(dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityName]);
      }
      if (dr.Table.Columns.Contains(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityDescription))
      {
        if (dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityDescription] != DBNull.Value)
          entity.EntityDescription = PDSAString.ConvertToStringTrim(dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.EntityDescription]);
      }
      if (dr.Table.Columns.Contains(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.RoleId))
      {
        if (dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.RoleId] != DBNull.Value)
          entity.RoleId = PDSAProperty.ConvertToGuid(dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.RoleId]);
      }
      if (dr.Table.Columns.Contains(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.RoleName))
      {
        if (dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.RoleName] != DBNull.Value)
          entity.RoleName = PDSAString.ConvertToStringTrim(dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.RoleName]);
      }
      if (dr.Table.Columns.Contains(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.IsAdministratorRole))
      {
        if (dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.IsAdministratorRole] != DBNull.Value)
          entity.IsAdministratorRole = Convert.ToBoolean(dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.IsAdministratorRole]);
      }
      if (dr.Table.Columns.Contains(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionCategoryId))
      {
        if (dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionCategoryId] != DBNull.Value)
          entity.PermissionCategoryId = PDSAProperty.ConvertToGuid(dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionCategoryId]);
      }
      if (dr.Table.Columns.Contains(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.CategoryName))
      {
        if (dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.CategoryName] != DBNull.Value)
          entity.CategoryName = PDSAString.ConvertToStringTrim(dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.CategoryName]);
      }
      if (dr.Table.Columns.Contains(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionId))
      {
        if (dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionId] != DBNull.Value)
          entity.PermissionId = PDSAProperty.ConvertToGuid(dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionId]);
      }
      if (dr.Table.Columns.Contains(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionName))
      {
        if (dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionName] != DBNull.Value)
          entity.PermissionName = PDSAString.ConvertToStringTrim(dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionName]);
      }
      if (dr.Table.Columns.Contains(SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionCode))
      {
        if (dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionCode] != DBNull.Value)
          entity.PermissionCode = PDSAString.ConvertToStringTrim(dr[SelectUserEffectivePermissionsPDSAValidator.ColumnNames.PermissionCode]);
      }
      entity.IsDirty = false;

      return entity;
    }
    #endregion

    #region ParameterNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the SelectUserEffectivePermissionsPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ParameterNames
    {
    /// <summary>
    /// Returns '@entityId'
    /// </summary>
    public static string entityId = "@entityId";
    /// <summary>
    /// Returns '@userId'
    /// </summary>
    public static string userId = "@userId";
    /// <summary>
    /// Returns '@RETURN_VALUE'
    /// </summary>
    public static string RETURNVALUE = "@RETURN_VALUE";
    }
    #endregion
  }
}
