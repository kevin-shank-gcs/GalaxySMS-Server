using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// This class calls the stored procedure GetTableColumnInformationPDSA
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public class GetTableColumnInformationPDSAData : PDSAStoredProcReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the GetTableColumnInformationPDSAData class
    /// </summary>
    public GetTableColumnInformationPDSAData() : base()
    {
      Entity = new GetTableColumnInformationPDSA();
      ValidatorObject = new  GetTableColumnInformationPDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the GetTableColumnInformationPDSAData class
    /// </summary>
    /// <param name="entity">An instance of a GetTableColumnInformationPDSA</param>
    public GetTableColumnInformationPDSAData(GetTableColumnInformationPDSA entity) : base()
    {
      Entity = entity;
      ValidatorObject = new GetTableColumnInformationPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the GetTableColumnInformationPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a GetTableColumnInformationPDSA</param>
    public GetTableColumnInformationPDSAData(PDSADataProvider dataProvider,
      GetTableColumnInformationPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new  GetTableColumnInformationPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the GetTableColumnInformationPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a GetTableColumnInformationPDSA</param>
    /// <param name="validator">An instance of a GetTableColumnInformationPDSAValidator</param>
    public GetTableColumnInformationPDSAData(PDSADataProvider dataProvider,
      GetTableColumnInformationPDSA entity, GetTableColumnInformationPDSAValidator validator)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Public Property
    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public GetTableColumnInformationPDSA Entity { get; set; }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "GetTableColumnInformationPDSAData";
      StoredProcName = "GetTableColumnInformation";
      SchemaName = "GCS";

      // Create Parameters
      InitParameters();

      // Create Data Columns
      InitDataColumns();
    }
    #endregion

   #region InitParameters Method
    /// <summary>
    /// Creates all the parameters for the stored procedure.
    /// </summary>
    protected override void InitParameters()
    {
      PDSADataParameter param;

      // Clear all parameters each time
      AllParameters.Clear();

      // Create each parameter object and add to Parameters Collection
      param = new PDSADataParameter();
      param.ParameterName = GetTableColumnInformationPDSAValidator.ParameterNames.TableSchema;
      param.DBType = DbType.String;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = GetTableColumnInformationPDSAValidator.ParameterNames.TableName;
      param.DBType = DbType.String;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = GetTableColumnInformationPDSAValidator.ParameterNames.ColumnName;
      param.DBType = DbType.String;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = GetTableColumnInformationPDSAValidator.ParameterNames.RETURNVALUE;
      param.DBType = DbType.Int32;
      param.ParamDirection = ParameterDirection.ReturnValue;
      param.IsRefCursor = false;
      AllParameters.Add(param);

  
      AddReturnValueParameterToCollection();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes the Data Columns Collection for each field returned from the stored procedure.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSADataColumn dc;

      // Create each data column
      dc = PDSADataColumn.CreateDataColumn(GetTableColumnInformationPDSAValidator.ColumnNames.DatabaseName, GetResourceMessage("GCS_GetTableColumnInformationPDSA_DatabaseName_Header", "Database Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(GetTableColumnInformationPDSAValidator.ColumnNames.TableSchema, GetResourceMessage("GCS_GetTableColumnInformationPDSA_TableSchema_Header", "Table Schema"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(GetTableColumnInformationPDSAValidator.ColumnNames.TableName, GetResourceMessage("GCS_GetTableColumnInformationPDSA_TableName_Header", "Table Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(GetTableColumnInformationPDSAValidator.ColumnNames.ColumnName, GetResourceMessage("GCS_GetTableColumnInformationPDSA_ColumnName_Header", "Column Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(GetTableColumnInformationPDSAValidator.ColumnNames.IsNullable, GetResourceMessage("GCS_GetTableColumnInformationPDSA_IsNullable_Header", "Is Nullable"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(GetTableColumnInformationPDSAValidator.ColumnNames.ColumnOrdinalPosition, GetResourceMessage("GCS_GetTableColumnInformationPDSA_ColumnOrdinalPosition_Header", "Column Ordinal Position"), false, typeof(int), DbType.Int32);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(GetTableColumnInformationPDSAValidator.ColumnNames.DefaultValue, GetResourceMessage("GCS_GetTableColumnInformationPDSA_DefaultValue_Header", "Default Value"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(GetTableColumnInformationPDSAValidator.ColumnNames.DataType, GetResourceMessage("GCS_GetTableColumnInformationPDSA_DataType_Header", "Data Type"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(GetTableColumnInformationPDSAValidator.ColumnNames.CharacterMaximumLength, GetResourceMessage("GCS_GetTableColumnInformationPDSA_CharacterMaximumLength_Header", "Character Maximum Length"), false, typeof(int), DbType.Int32);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(GetTableColumnInformationPDSAValidator.ColumnNames.NumericPrecision, GetResourceMessage("GCS_GetTableColumnInformationPDSA_NumericPrecision_Header", "Numeric Precision"), false, typeof(byte[]), DbType.Binary);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(GetTableColumnInformationPDSAValidator.ColumnNames.NumericPrecisionRadix, GetResourceMessage("GCS_GetTableColumnInformationPDSA_NumericPrecisionRadix_Header", "Numeric Precision Radix"), false, typeof(short), DbType.Int16);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(GetTableColumnInformationPDSAValidator.ColumnNames.NumericScale, GetResourceMessage("GCS_GetTableColumnInformationPDSA_NumericScale_Header", "Numeric Scale"), false, typeof(int), DbType.Int32);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(GetTableColumnInformationPDSAValidator.ColumnNames.DateTimePrecision, GetResourceMessage("GCS_GetTableColumnInformationPDSA_DateTimePrecision_Header", "Date Time Precision"), false, typeof(short), DbType.Int16);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(GetTableColumnInformationPDSAValidator.ColumnNames.IsComputed, GetResourceMessage("GCS_GetTableColumnInformationPDSA_IsComputed_Header", "Is Computed"), false, typeof(int), DbType.Int32);
      AllColumns.Add(dc);
    }
    #endregion

    #region EntityDataToParameterCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Parameters collection
    /// </summary>
    protected override void EntityDataToParameterCollection()
    {
      if (AllParameters.GetByName(GetTableColumnInformationPDSAValidator.ParameterNames.TableSchema).SetAsNull == false)
        AllParameters.GetByName(GetTableColumnInformationPDSAValidator.ParameterNames.TableSchema).Value = Entity.TableSchema;
      else
        AllParameters.GetByName(GetTableColumnInformationPDSAValidator.ParameterNames.TableSchema).Value = System.Data.SqlTypes.SqlString.Null;
      if (AllParameters.GetByName(GetTableColumnInformationPDSAValidator.ParameterNames.TableName).SetAsNull == false)
        AllParameters.GetByName(GetTableColumnInformationPDSAValidator.ParameterNames.TableName).Value = Entity.TableName;
      else
        AllParameters.GetByName(GetTableColumnInformationPDSAValidator.ParameterNames.TableName).Value = System.Data.SqlTypes.SqlString.Null;
      if (AllParameters.GetByName(GetTableColumnInformationPDSAValidator.ParameterNames.ColumnName).SetAsNull == false)
        AllParameters.GetByName(GetTableColumnInformationPDSAValidator.ParameterNames.ColumnName).Value = Entity.ColumnName;
      else
        AllParameters.GetByName(GetTableColumnInformationPDSAValidator.ParameterNames.ColumnName).Value = System.Data.SqlTypes.SqlString.Null;
    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.DatabaseName).SetAsNull == false)
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.DatabaseName).Value = Entity.DatabaseName;
      else
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.DatabaseName).Value = string.Empty;
     
      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.TableSchema).SetAsNull == false)
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.TableSchema).Value = Entity.TableSchema;
      else
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.TableSchema).Value = string.Empty;
     
      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.TableName).SetAsNull == false)
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.TableName).Value = Entity.TableName;
      else
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.TableName).Value = string.Empty;
     
      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.ColumnName).SetAsNull == false)
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.ColumnName).Value = Entity.ColumnName;
      else
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.ColumnName).Value = string.Empty;
     
      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.IsNullable).SetAsNull == false)
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.IsNullable).Value = Entity.IsNullable;
      else
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.IsNullable).Value = string.Empty;
     
      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.ColumnOrdinalPosition).SetAsNull == false)
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.ColumnOrdinalPosition).Value = Entity.ColumnOrdinalPosition;
      else
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.ColumnOrdinalPosition).Value = 0;
     
      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.DefaultValue).SetAsNull == false)
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.DefaultValue).Value = Entity.DefaultValue;
      else
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.DefaultValue).Value = string.Empty;
     
      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.DataType).SetAsNull == false)
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.DataType).Value = Entity.DataType;
      else
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.DataType).Value = string.Empty;
     
      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.CharacterMaximumLength).SetAsNull == false)
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.CharacterMaximumLength).Value = Entity.CharacterMaximumLength;
      else
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.CharacterMaximumLength).Value = 0;
     
      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.NumericPrecision).SetAsNull == false)
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.NumericPrecision).Value = Entity.NumericPrecision;
      else
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.NumericPrecision).Value = null;
     
      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.NumericPrecisionRadix).SetAsNull == false)
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.NumericPrecisionRadix).Value = Entity.NumericPrecisionRadix;
      else
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.NumericPrecisionRadix).Value = 0;
     
      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.NumericScale).SetAsNull == false)
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.NumericScale).Value = Entity.NumericScale;
      else
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.NumericScale).Value = 0;
     
      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.DateTimePrecision).SetAsNull == false)
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.DateTimePrecision).Value = Entity.DateTimePrecision;
      else
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.DateTimePrecision).Value = 0;
     
      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.IsComputed).SetAsNull == false)
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.IsComputed).Value = Entity.IsComputed;
      else
        AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.IsComputed).Value = 0;
     
    }
    #endregion

    #region OutputParametersToEntityData Method
    /// <summary>
    /// Moves the output parameters from the Parameters collection into the Entity class.
    /// </summary>
    protected override void OutputParametersToEntityData()
    {
      if (AllParameters.GetByName(GetTableColumnInformationPDSAValidator.ParameterNames.RETURNVALUE).IsValueNull == false)
        Entity.RETURNVALUE = AllParameters.GetByName(GetTableColumnInformationPDSAValidator.ParameterNames.RETURNVALUE).GetAsInteger();
      else
        Entity.RETURNVALUE = 0;
    }
    #endregion
    
    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.DatabaseName).IsNull == false)
        Entity.DatabaseName = AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.DatabaseName).GetAsString();
      else
        Entity.DatabaseName = string.Empty;

      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.TableSchema).IsNull == false)
        Entity.TableSchema = AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.TableSchema).GetAsString();
      else
        Entity.TableSchema = string.Empty;

      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.TableName).IsNull == false)
        Entity.TableName = AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.TableName).GetAsString();
      else
        Entity.TableName = string.Empty;

      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.ColumnName).IsNull == false)
        Entity.ColumnName = AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.ColumnName).GetAsString();
      else
        Entity.ColumnName = string.Empty;

      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.IsNullable).IsNull == false)
        Entity.IsNullable = AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.IsNullable).GetAsString();
      else
        Entity.IsNullable = string.Empty;

      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.ColumnOrdinalPosition).IsNull == false)
        Entity.ColumnOrdinalPosition = AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.ColumnOrdinalPosition).GetAsInteger();
      else
        Entity.ColumnOrdinalPosition = 0;

      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.DefaultValue).IsNull == false)
        Entity.DefaultValue = AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.DefaultValue).GetAsString();
      else
        Entity.DefaultValue = string.Empty;

      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.DataType).IsNull == false)
        Entity.DataType = AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.DataType).GetAsString();
      else
        Entity.DataType = string.Empty;

      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.CharacterMaximumLength).IsNull == false)
        Entity.CharacterMaximumLength = AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.CharacterMaximumLength).GetAsInteger();
      else
        Entity.CharacterMaximumLength = 0;

      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.NumericPrecision).IsNull == false)
        Entity.NumericPrecision = AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.NumericPrecision).GetAsByteArray();
      else
        Entity.NumericPrecision = null;

      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.NumericPrecisionRadix).IsNull == false)
        Entity.NumericPrecisionRadix = AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.NumericPrecisionRadix).GetAsShort();
      else
        Entity.NumericPrecisionRadix = 0;

      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.NumericScale).IsNull == false)
        Entity.NumericScale = AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.NumericScale).GetAsInteger();
      else
        Entity.NumericScale = 0;

      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.DateTimePrecision).IsNull == false)
        Entity.DateTimePrecision = AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.DateTimePrecision).GetAsShort();
      else
        Entity.DateTimePrecision = 0;

      if (AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.IsComputed).IsNull == false)
        Entity.IsComputed = AllColumns.GetByName(GetTableColumnInformationPDSAValidator.ColumnNames.IsComputed).GetAsInteger();
      else
        Entity.IsComputed = 0;

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>GetTableColumnInformationPDSA</returns>
    public GetTableColumnInformationPDSA CreateEntityFromDataRow(DataRow dr)
    {
      GetTableColumnInformationPDSA entity = new GetTableColumnInformationPDSA();

      if (dr.Table.Columns.Contains(GetTableColumnInformationPDSAValidator.ColumnNames.DatabaseName))
      {
        if (dr[GetTableColumnInformationPDSAValidator.ColumnNames.DatabaseName] != DBNull.Value)
          entity.DatabaseName = PDSAString.ConvertToStringTrim(dr[GetTableColumnInformationPDSAValidator.ColumnNames.DatabaseName]);
      }
      if (dr.Table.Columns.Contains(GetTableColumnInformationPDSAValidator.ColumnNames.TableSchema))
      {
        if (dr[GetTableColumnInformationPDSAValidator.ColumnNames.TableSchema] != DBNull.Value)
          entity.TableSchema = PDSAString.ConvertToStringTrim(dr[GetTableColumnInformationPDSAValidator.ColumnNames.TableSchema]);
      }
      if (dr.Table.Columns.Contains(GetTableColumnInformationPDSAValidator.ColumnNames.TableName))
      {
        if (dr[GetTableColumnInformationPDSAValidator.ColumnNames.TableName] != DBNull.Value)
          entity.TableName = PDSAString.ConvertToStringTrim(dr[GetTableColumnInformationPDSAValidator.ColumnNames.TableName]);
      }
      if (dr.Table.Columns.Contains(GetTableColumnInformationPDSAValidator.ColumnNames.ColumnName))
      {
        if (dr[GetTableColumnInformationPDSAValidator.ColumnNames.ColumnName] != DBNull.Value)
          entity.ColumnName = PDSAString.ConvertToStringTrim(dr[GetTableColumnInformationPDSAValidator.ColumnNames.ColumnName]);
      }
      if (dr.Table.Columns.Contains(GetTableColumnInformationPDSAValidator.ColumnNames.IsNullable))
      {
        if (dr[GetTableColumnInformationPDSAValidator.ColumnNames.IsNullable] != DBNull.Value)
          entity.IsNullable = PDSAString.ConvertToStringTrim(dr[GetTableColumnInformationPDSAValidator.ColumnNames.IsNullable]);
      }
      if (dr.Table.Columns.Contains(GetTableColumnInformationPDSAValidator.ColumnNames.ColumnOrdinalPosition))
      {
        if (dr[GetTableColumnInformationPDSAValidator.ColumnNames.ColumnOrdinalPosition] != DBNull.Value)
          entity.ColumnOrdinalPosition = Convert.ToInt32(dr[GetTableColumnInformationPDSAValidator.ColumnNames.ColumnOrdinalPosition]);
      }
      if (dr.Table.Columns.Contains(GetTableColumnInformationPDSAValidator.ColumnNames.DefaultValue))
      {
        if (dr[GetTableColumnInformationPDSAValidator.ColumnNames.DefaultValue] != DBNull.Value)
          entity.DefaultValue = PDSAString.ConvertToStringTrim(dr[GetTableColumnInformationPDSAValidator.ColumnNames.DefaultValue]);
      }
      if (dr.Table.Columns.Contains(GetTableColumnInformationPDSAValidator.ColumnNames.DataType))
      {
        if (dr[GetTableColumnInformationPDSAValidator.ColumnNames.DataType] != DBNull.Value)
          entity.DataType = PDSAString.ConvertToStringTrim(dr[GetTableColumnInformationPDSAValidator.ColumnNames.DataType]);
      }
      if (dr.Table.Columns.Contains(GetTableColumnInformationPDSAValidator.ColumnNames.CharacterMaximumLength))
      {
        if (dr[GetTableColumnInformationPDSAValidator.ColumnNames.CharacterMaximumLength] != DBNull.Value)
          entity.CharacterMaximumLength = Convert.ToInt32(dr[GetTableColumnInformationPDSAValidator.ColumnNames.CharacterMaximumLength]);
      }
      if (dr.Table.Columns.Contains(GetTableColumnInformationPDSAValidator.ColumnNames.NumericPrecision))
      {
        if (dr[GetTableColumnInformationPDSAValidator.ColumnNames.NumericPrecision] != DBNull.Value)
          entity.NumericPrecision = PDSAProperty.ConvertToByteArray(dr[GetTableColumnInformationPDSAValidator.ColumnNames.NumericPrecision]);
      }
      if (dr.Table.Columns.Contains(GetTableColumnInformationPDSAValidator.ColumnNames.NumericPrecisionRadix))
      {
        if (dr[GetTableColumnInformationPDSAValidator.ColumnNames.NumericPrecisionRadix] != DBNull.Value)
          entity.NumericPrecisionRadix = Convert.ToInt16(dr[GetTableColumnInformationPDSAValidator.ColumnNames.NumericPrecisionRadix]);
      }
      if (dr.Table.Columns.Contains(GetTableColumnInformationPDSAValidator.ColumnNames.NumericScale))
      {
        if (dr[GetTableColumnInformationPDSAValidator.ColumnNames.NumericScale] != DBNull.Value)
          entity.NumericScale = Convert.ToInt32(dr[GetTableColumnInformationPDSAValidator.ColumnNames.NumericScale]);
      }
      if (dr.Table.Columns.Contains(GetTableColumnInformationPDSAValidator.ColumnNames.DateTimePrecision))
      {
        if (dr[GetTableColumnInformationPDSAValidator.ColumnNames.DateTimePrecision] != DBNull.Value)
          entity.DateTimePrecision = Convert.ToInt16(dr[GetTableColumnInformationPDSAValidator.ColumnNames.DateTimePrecision]);
      }
      if (dr.Table.Columns.Contains(GetTableColumnInformationPDSAValidator.ColumnNames.IsComputed))
      {
        if (dr[GetTableColumnInformationPDSAValidator.ColumnNames.IsComputed] != DBNull.Value)
          entity.IsComputed = Convert.ToInt32(dr[GetTableColumnInformationPDSAValidator.ColumnNames.IsComputed]);
      }
      entity.IsDirty = false;

      return entity;
    }
    #endregion

    #region ParameterNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the GetTableColumnInformationPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ParameterNames
    {
    /// <summary>
    /// Returns '@TableSchema'
    /// </summary>
    public static string TableSchema = "@TableSchema";
    /// <summary>
    /// Returns '@TableName'
    /// </summary>
    public static string TableName = "@TableName";
    /// <summary>
    /// Returns '@ColumnName'
    /// </summary>
    public static string ColumnName = "@ColumnName";
    /// <summary>
    /// Returns '@RETURN_VALUE'
    /// </summary>
    public static string RETURNVALUE = "@RETURN_VALUE";
    }
    #endregion
  }
}
