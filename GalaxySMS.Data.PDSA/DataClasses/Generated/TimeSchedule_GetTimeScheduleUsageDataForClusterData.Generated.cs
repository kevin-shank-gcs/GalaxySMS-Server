using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// This class calls the stored procedure TimeSchedule_GetTimeScheduleUsageDataForClusterPDSA
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public class TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAData : PDSAStoredProcReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAData class
    /// </summary>
    public TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAData() : base()
    {
      Entity = new TimeSchedule_GetTimeScheduleUsageDataForClusterPDSA();
      ValidatorObject = new  TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAData class
    /// </summary>
    /// <param name="entity">An instance of a TimeSchedule_GetTimeScheduleUsageDataForClusterPDSA</param>
    public TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAData(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSA entity) : base()
    {
      Entity = entity;
      ValidatorObject = new TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a TimeSchedule_GetTimeScheduleUsageDataForClusterPDSA</param>
    public TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAData(PDSADataProvider dataProvider,
      TimeSchedule_GetTimeScheduleUsageDataForClusterPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new  TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a TimeSchedule_GetTimeScheduleUsageDataForClusterPDSA</param>
    /// <param name="validator">An instance of a TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator</param>
    public TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAData(PDSADataProvider dataProvider,
      TimeSchedule_GetTimeScheduleUsageDataForClusterPDSA entity, TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator validator)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Public Property
    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public TimeSchedule_GetTimeScheduleUsageDataForClusterPDSA Entity { get; set; }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAData";
      StoredProcName = "TimeSchedule_GetTimeScheduleUsageDataForCluster";
      SchemaName = "GCS";

      // Create Parameters
      InitParameters();

      // Create Data Columns
      InitDataColumns();
    }
    #endregion

   #region InitParameters Method
    /// <summary>
    /// Creates all the parameters for the stored procedure.
    /// </summary>
    protected override void InitParameters()
    {
      PDSADataParameter param;

      // Clear all parameters each time
      AllParameters.Clear();

      // Create each parameter object and add to Parameters Collection
      param = new PDSADataParameter();
      param.ParameterName = TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ParameterNames.timeScheduleUid;
      param.DBType = DbType.Guid;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ParameterNames.clusterUid;
      param.DBType = DbType.Guid;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ParameterNames.RETURNVALUE;
      param.DBType = DbType.Int32;
      param.ParamDirection = ParameterDirection.ReturnValue;
      param.IsRefCursor = false;
      AllParameters.Add(param);

  
      AddReturnValueParameterToCollection();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes the Data Columns Collection for each field returned from the stored procedure.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSADataColumn dc;

      // Create each data column
      dc = PDSADataColumn.CreateDataColumn(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DataType, GetResourceMessage("GCS_TimeSchedule_GetTimeScheduleUsageDataForClusterPDSA_DataType_Header", "Data Type"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Id, GetResourceMessage("GCS_TimeSchedule_GetTimeScheduleUsageDataForClusterPDSA_Id_Header", "Id"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Name, GetResourceMessage("GCS_TimeSchedule_GetTimeScheduleUsageDataForClusterPDSA_Name_Header", "Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DeviceUid, GetResourceMessage("GCS_TimeSchedule_GetTimeScheduleUsageDataForClusterPDSA_DeviceUid_Header", "Device Uid"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DeviceName, GetResourceMessage("GCS_TimeSchedule_GetTimeScheduleUsageDataForClusterPDSA_DeviceName_Header", "Device Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Type_x, GetResourceMessage("GCS_TimeSchedule_GetTimeScheduleUsageDataForClusterPDSA_Type_x_Header", "Type"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
    }
    #endregion

    #region EntityDataToParameterCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Parameters collection
    /// </summary>
    protected override void EntityDataToParameterCollection()
    {
      if (AllParameters.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ParameterNames.timeScheduleUid).SetAsNull == false)
        AllParameters.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ParameterNames.timeScheduleUid).Value = Entity.timeScheduleUid;
      else
        AllParameters.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ParameterNames.timeScheduleUid).Value = System.Data.SqlTypes.SqlGuid.Null;
      if (AllParameters.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ParameterNames.clusterUid).SetAsNull == false)
        AllParameters.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ParameterNames.clusterUid).Value = Entity.clusterUid;
      else
        AllParameters.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ParameterNames.clusterUid).Value = System.Data.SqlTypes.SqlGuid.Null;
    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      if (AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DataType).SetAsNull == false)
        AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DataType).Value = Entity.DataType;
      else
        AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DataType).Value = string.Empty;
     
      if (AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Id).SetAsNull == false)
        AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Id).Value = Entity.Id;
      else
        AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Id).Value = Guid.Empty;
     
      if (AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Name).SetAsNull == false)
        AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Name).Value = Entity.Name;
      else
        AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Name).Value = string.Empty;
     
      if (AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DeviceUid).SetAsNull == false)
        AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DeviceUid).Value = Entity.DeviceUid;
      else
        AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DeviceUid).Value = Guid.Empty;
     
      if (AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DeviceName).SetAsNull == false)
        AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DeviceName).Value = Entity.DeviceName;
      else
        AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DeviceName).Value = string.Empty;
     
      if (AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Type_x).SetAsNull == false)
        AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Type_x).Value = Entity.Type_x;
      else
        AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Type_x).Value = string.Empty;
     
    }
    #endregion

    #region OutputParametersToEntityData Method
    /// <summary>
    /// Moves the output parameters from the Parameters collection into the Entity class.
    /// </summary>
    protected override void OutputParametersToEntityData()
    {
      if (AllParameters.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ParameterNames.RETURNVALUE).IsValueNull == false)
        Entity.RETURNVALUE = AllParameters.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ParameterNames.RETURNVALUE).GetAsInteger();
      else
        Entity.RETURNVALUE = 0;
    }
    #endregion
    
    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DataType).IsNull == false)
        Entity.DataType = AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DataType).GetAsString();
      else
        Entity.DataType = string.Empty;

      if (AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Id).IsNull == false)
        Entity.Id = AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Id).GetAsGuid();
      else
        Entity.Id = Guid.Empty;

      if (AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Name).IsNull == false)
        Entity.Name = AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Name).GetAsString();
      else
        Entity.Name = string.Empty;

      if (AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DeviceUid).IsNull == false)
        Entity.DeviceUid = AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DeviceUid).GetAsGuid();
      else
        Entity.DeviceUid = Guid.Empty;

      if (AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DeviceName).IsNull == false)
        Entity.DeviceName = AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DeviceName).GetAsString();
      else
        Entity.DeviceName = string.Empty;

      if (AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Type_x).IsNull == false)
        Entity.Type_x = AllColumns.GetByName(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Type_x).GetAsString();
      else
        Entity.Type_x = string.Empty;

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>TimeSchedule_GetTimeScheduleUsageDataForClusterPDSA</returns>
    public TimeSchedule_GetTimeScheduleUsageDataForClusterPDSA CreateEntityFromDataRow(DataRow dr)
    {
      TimeSchedule_GetTimeScheduleUsageDataForClusterPDSA entity = new TimeSchedule_GetTimeScheduleUsageDataForClusterPDSA();

      if (dr.Table.Columns.Contains(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DataType))
      {
        if (dr[TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DataType] != DBNull.Value)
          entity.DataType = PDSAString.ConvertToStringTrim(dr[TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DataType]);
      }
      if (dr.Table.Columns.Contains(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Id))
      {
        if (dr[TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Id] != DBNull.Value)
          entity.Id = PDSAProperty.ConvertToGuid(dr[TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Id]);
      }
      if (dr.Table.Columns.Contains(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Name))
      {
        if (dr[TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Name] != DBNull.Value)
          entity.Name = PDSAString.ConvertToStringTrim(dr[TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Name]);
      }
      if (dr.Table.Columns.Contains(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DeviceUid))
      {
        if (dr[TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DeviceUid] != DBNull.Value)
          entity.DeviceUid = PDSAProperty.ConvertToGuid(dr[TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DeviceUid]);
      }
      if (dr.Table.Columns.Contains(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DeviceName))
      {
        if (dr[TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DeviceName] != DBNull.Value)
          entity.DeviceName = PDSAString.ConvertToStringTrim(dr[TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.DeviceName]);
      }
      if (dr.Table.Columns.Contains(TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Type_x))
      {
        if (dr[TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Type_x] != DBNull.Value)
          entity.Type_x = PDSAString.ConvertToStringTrim(dr[TimeSchedule_GetTimeScheduleUsageDataForClusterPDSAValidator.ColumnNames.Type_x]);
      }
      entity.IsDirty = false;

      return entity;
    }
    #endregion

    #region ParameterNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the TimeSchedule_GetTimeScheduleUsageDataForClusterPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ParameterNames
    {
    /// <summary>
    /// Returns '@timeScheduleUid'
    /// </summary>
    public static string timeScheduleUid = "@timeScheduleUid";
    /// <summary>
    /// Returns '@clusterUid'
    /// </summary>
    public static string clusterUid = "@clusterUid";
    /// <summary>
    /// Returns '@RETURN_VALUE'
    /// </summary>
    public static string RETURNVALUE = "@RETURN_VALUE";
    }
    #endregion
  }
}
