using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// This class calls the stored procedure ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public class ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAData : PDSAStoredProcReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAData class
    /// </summary>
    public ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAData() : base()
    {
      Entity = new ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA();
      ValidatorObject = new  ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAData class
    /// </summary>
    /// <param name="entity">An instance of a ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA</param>
    public ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAData(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA entity) : base()
    {
      Entity = entity;
      ValidatorObject = new ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA</param>
    public ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAData(PDSADataProvider dataProvider,
      ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new  ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA</param>
    /// <param name="validator">An instance of a ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator</param>
    public ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAData(PDSADataProvider dataProvider,
      ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA entity, ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator validator)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Public Property
    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA Entity { get; set; }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAData";
      StoredProcName = "ActivityEventAcknowledgementPDSA_ByActivityEventUid";
      SchemaName = "GCS";

      // Create Parameters
      InitParameters();

      // Create Data Columns
      InitDataColumns();
    }
    #endregion

   #region InitParameters Method
    /// <summary>
    /// Creates all the parameters for the stored procedure.
    /// </summary>
    protected override void InitParameters()
    {
      PDSADataParameter param;

      // Clear all parameters each time
      AllParameters.Clear();

      // Create each parameter object and add to Parameters Collection
      param = new PDSADataParameter();
      param.ParameterName = ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ParameterNames.ActivityEventUid;
      param.DBType = DbType.Guid;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ParameterNames.RETURNVALUE;
      param.DBType = DbType.Int32;
      param.ParamDirection = ParameterDirection.ReturnValue;
      param.IsRefCursor = false;
      AllParameters.Add(param);

  
      AddReturnValueParameterToCollection();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes the Data Columns Collection for each field returned from the stored procedure.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSADataColumn dc;

      // Create each data column
      dc = PDSADataColumn.CreateDataColumn(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventAcknowledgementUid, GetResourceMessage("GCS_ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA_ActivityEventAcknowledgementUid_Header", "Activity Event Acknowledgement Uid"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventUid, GetResourceMessage("GCS_ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA_ActivityEventUid_Header", "Activity Event Uid"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.DeviceEntityId, GetResourceMessage("GCS_ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA_DeviceEntityId_Header", "Device Entity Id"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.DeviceUid, GetResourceMessage("GCS_ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA_DeviceUid_Header", "Device Uid"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventCategory, GetResourceMessage("GCS_ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA_ActivityEventCategory_Header", "Activity Event Category"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.Response, GetResourceMessage("GCS_ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA_Response_Header", "Response"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedByUserId, GetResourceMessage("GCS_ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA_AckedByUserId_Header", "Acked By User Id"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedByUserDisplayName, GetResourceMessage("GCS_ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA_AckedByUserDisplayName_Header", "Acked By User Display Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedDateTime, GetResourceMessage("GCS_ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA_AckedDateTime_Header", "Acked Date Time"), false, typeof(DateTimeOffset), DbType.DateTimeOffset);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedUpdatedDateTime, GetResourceMessage("GCS_ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA_AckedUpdatedDateTime_Header", "Acked Updated Date Time"), false, typeof(DateTimeOffset), DbType.DateTimeOffset);
      AllColumns.Add(dc);
    }
    #endregion

    #region EntityDataToParameterCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Parameters collection
    /// </summary>
    protected override void EntityDataToParameterCollection()
    {
      if (AllParameters.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ParameterNames.ActivityEventUid).SetAsNull == false)
        AllParameters.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ParameterNames.ActivityEventUid).Value = Entity.ActivityEventUid;
      else
        AllParameters.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ParameterNames.ActivityEventUid).Value = System.Data.SqlTypes.SqlGuid.Null;
    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      if (AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventAcknowledgementUid).SetAsNull == false)
        AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventAcknowledgementUid).Value = Entity.ActivityEventAcknowledgementUid;
      else
        AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventAcknowledgementUid).Value = Guid.Empty;
     
      if (AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventUid).SetAsNull == false)
        AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventUid).Value = Entity.ActivityEventUid;
      else
        AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventUid).Value = Guid.Empty;
     
      if (AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.DeviceEntityId).SetAsNull == false)
        AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.DeviceEntityId).Value = Entity.DeviceEntityId;
      else
        AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.DeviceEntityId).Value = Guid.Empty;
     
      if (AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.DeviceUid).SetAsNull == false)
        AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.DeviceUid).Value = Entity.DeviceUid;
      else
        AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.DeviceUid).Value = Guid.Empty;
     
      if (AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventCategory).SetAsNull == false)
        AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventCategory).Value = Entity.ActivityEventCategory;
      else
        AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventCategory).Value = string.Empty;
     
      if (AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.Response).SetAsNull == false)
        AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.Response).Value = Entity.Response;
      else
        AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.Response).Value = string.Empty;
     
      if (AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedByUserId).SetAsNull == false)
        AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedByUserId).Value = Entity.AckedByUserId;
      else
        AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedByUserId).Value = Guid.Empty;
     
      if (AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedByUserDisplayName).SetAsNull == false)
        AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedByUserDisplayName).Value = Entity.AckedByUserDisplayName;
      else
        AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedByUserDisplayName).Value = string.Empty;
     
      if (AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedDateTime).SetAsNull == false)
        AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedDateTime).Value = Entity.AckedDateTime;
      else
        AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedDateTime).Value = DateTimeOffset.Now;
     
      if (AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedUpdatedDateTime).SetAsNull == false)
        AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedUpdatedDateTime).Value = Entity.AckedUpdatedDateTime;
      else
        AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedUpdatedDateTime).Value = DateTimeOffset.Now;
     
    }
    #endregion

    #region OutputParametersToEntityData Method
    /// <summary>
    /// Moves the output parameters from the Parameters collection into the Entity class.
    /// </summary>
    protected override void OutputParametersToEntityData()
    {
      if (AllParameters.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ParameterNames.RETURNVALUE).IsValueNull == false)
        Entity.RETURNVALUE = AllParameters.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ParameterNames.RETURNVALUE).GetAsInteger();
      else
        Entity.RETURNVALUE = 0;
    }
    #endregion
    
    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventAcknowledgementUid).IsNull == false)
        Entity.ActivityEventAcknowledgementUid = AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventAcknowledgementUid).GetAsGuid();
      else
        Entity.ActivityEventAcknowledgementUid = Guid.Empty;

      if (AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventUid).IsNull == false)
        Entity.ActivityEventUid = AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventUid).GetAsGuid();
      else
        Entity.ActivityEventUid = Guid.Empty;

      if (AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.DeviceEntityId).IsNull == false)
        Entity.DeviceEntityId = AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.DeviceEntityId).GetAsGuid();
      else
        Entity.DeviceEntityId = Guid.Empty;

      if (AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.DeviceUid).IsNull == false)
        Entity.DeviceUid = AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.DeviceUid).GetAsGuid();
      else
        Entity.DeviceUid = Guid.Empty;

      if (AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventCategory).IsNull == false)
        Entity.ActivityEventCategory = AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventCategory).GetAsString();
      else
        Entity.ActivityEventCategory = string.Empty;

      if (AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.Response).IsNull == false)
        Entity.Response = AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.Response).GetAsString();
      else
        Entity.Response = string.Empty;

      if (AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedByUserId).IsNull == false)
        Entity.AckedByUserId = AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedByUserId).GetAsGuid();
      else
        Entity.AckedByUserId = Guid.Empty;

      if (AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedByUserDisplayName).IsNull == false)
        Entity.AckedByUserDisplayName = AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedByUserDisplayName).GetAsString();
      else
        Entity.AckedByUserDisplayName = string.Empty;

      if (AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedDateTime).IsNull == false)
        Entity.AckedDateTime = AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedDateTime).GetAsDateTimeOffset();
      else
        Entity.AckedDateTime = DateTimeOffset.Now;

      if (AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedUpdatedDateTime).IsNull == false)
        Entity.AckedUpdatedDateTime = AllColumns.GetByName(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedUpdatedDateTime).GetAsDateTimeOffset();
      else
        Entity.AckedUpdatedDateTime = DateTimeOffset.Now;

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA</returns>
    public ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA CreateEntityFromDataRow(DataRow dr)
    {
      ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA entity = new ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA();

      if (dr.Table.Columns.Contains(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventAcknowledgementUid))
      {
        if (dr[ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventAcknowledgementUid] != DBNull.Value)
          entity.ActivityEventAcknowledgementUid = PDSAProperty.ConvertToGuid(dr[ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventAcknowledgementUid]);
      }
      if (dr.Table.Columns.Contains(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventUid))
      {
        if (dr[ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventUid] != DBNull.Value)
          entity.ActivityEventUid = PDSAProperty.ConvertToGuid(dr[ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventUid]);
      }
      if (dr.Table.Columns.Contains(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.DeviceEntityId))
      {
        if (dr[ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.DeviceEntityId] != DBNull.Value)
          entity.DeviceEntityId = PDSAProperty.ConvertToGuid(dr[ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.DeviceEntityId]);
      }
      if (dr.Table.Columns.Contains(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.DeviceUid))
      {
        if (dr[ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.DeviceUid] != DBNull.Value)
          entity.DeviceUid = PDSAProperty.ConvertToGuid(dr[ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.DeviceUid]);
      }
      if (dr.Table.Columns.Contains(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventCategory))
      {
        if (dr[ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventCategory] != DBNull.Value)
          entity.ActivityEventCategory = PDSAString.ConvertToStringTrim(dr[ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.ActivityEventCategory]);
      }
      if (dr.Table.Columns.Contains(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.Response))
      {
        if (dr[ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.Response] != DBNull.Value)
          entity.Response = PDSAString.ConvertToStringTrim(dr[ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.Response]);
      }
      if (dr.Table.Columns.Contains(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedByUserId))
      {
        if (dr[ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedByUserId] != DBNull.Value)
          entity.AckedByUserId = PDSAProperty.ConvertToGuid(dr[ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedByUserId]);
      }
      if (dr.Table.Columns.Contains(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedByUserDisplayName))
      {
        if (dr[ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedByUserDisplayName] != DBNull.Value)
          entity.AckedByUserDisplayName = PDSAString.ConvertToStringTrim(dr[ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedByUserDisplayName]);
      }
      if (dr.Table.Columns.Contains(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedDateTime))
      {
        if (dr[ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedDateTime] != DBNull.Value)
          entity.AckedDateTime = PDSAProperty.ConvertToDateTimeOffset(dr[ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedDateTime]);
      }
      if (dr.Table.Columns.Contains(ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedUpdatedDateTime))
      {
        if (dr[ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedUpdatedDateTime] != DBNull.Value)
          entity.AckedUpdatedDateTime = PDSAProperty.ConvertToDateTimeOffset(dr[ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSAValidator.ColumnNames.AckedUpdatedDateTime]);
      }
      entity.IsDirty = false;

      return entity;
    }
    #endregion

    #region ParameterNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the ActivityEventAcknowledgementPDSA_ByActivityEventUidPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ParameterNames
    {
    /// <summary>
    /// Returns '@ActivityEventUid'
    /// </summary>
    public static string ActivityEventUid = "@ActivityEventUid";
    /// <summary>
    /// Returns '@RETURN_VALUE'
    /// </summary>
    public static string RETURNVALUE = "@RETURN_VALUE";
    }
    #endregion
  }
}
