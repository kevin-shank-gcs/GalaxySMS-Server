using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Add/Edit/Delete/Select data from the gcsApplicationAuditPDSA table.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class gcsApplicationAuditPDSAData : PDSADataClassTable
  {
    #region Constructors
    /// <summary>
    /// Constructor for the gcsApplicationAuditPDSAData class
    /// </summary>
    public gcsApplicationAuditPDSAData() : base()
    {
      Entity = new gcsApplicationAuditPDSA();
      ValidatorObject = new gcsApplicationAuditPDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the gcsApplicationAuditPDSAData class
    /// </summary>
    /// <param name="entity">An instance of a gcsApplicationAuditPDSA</param>
    public gcsApplicationAuditPDSAData(gcsApplicationAuditPDSA entity) : base(entity)
    {
      Entity = entity;
      ValidatorObject = new gcsApplicationAuditPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the gcsApplicationAuditPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a gcsApplicationAuditPDSA</param>
    public gcsApplicationAuditPDSAData(PDSADataProvider dataProvider,
      gcsApplicationAuditPDSA entity)
      : base(dataProvider, entity)
    {
      Entity = entity;
      ValidatorObject = new gcsApplicationAuditPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the gcsApplicationAuditPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a gcsApplicationAuditPDSA</param>
    /// <param name="validator">An instance of a gcsApplicationAuditPDSAValidator</param>
    public gcsApplicationAuditPDSAData(PDSADataProvider dataProvider,
      gcsApplicationAuditPDSA entity, gcsApplicationAuditPDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'ByApplicationAuditTypeId' SelectFilter
      /// </summary>
      ByApplicationAuditTypeId
      ,
      /// <summary>
      /// 'ListBox' SelectFilter
      /// </summary>
      ListBox
      ,
      /// <summary>
      /// 'PrimaryKey' SelectFilter
      /// </summary>
      PrimaryKey
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// A Custom Select Filter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a WHERE statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum WhereFilters
    {
      /// <summary>
      /// No WhereFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom WhereFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'ApplicationAuditTypeId' WhereFilter
      /// </summary>
      ApplicationAuditTypeId
      ,
      /// <summary>
      /// 'ApplicationName' WhereFilter
      /// </summary>
      ApplicationName
      ,
      /// <summary>
      /// 'LikeApplicationName' WhereFilter
      /// </summary>
      LikeApplicationName
      ,
      /// <summary>
      /// 'PrimaryKey' WhereFilter
      /// </summary>
      PrimaryKey
    }

    /// <summary>
    /// Enumeration for selecting an ORDER BY statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum OrderByFilters
    {
      /// <summary>
      /// No OrderByFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'ApplicationName' OrderByFilter
      /// </summary>
      ApplicationName
    }

    /// <summary>
    /// Enumeration for selecting an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
    /// </summary>
    public enum InsertFilters
    {
      
      /// <summary>
      /// 'All' InsertFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom InsertFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
    /// </summary>
    public enum UpdateFilters
    {
      
      /// <summary>
      /// 'PrimaryKey' UpdateFilter
      /// </summary>
      PrimaryKey
      ,
      /// <summary>
      /// A Custom UpdateFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a DELETE statement or DELETE stored procedure to execute when calling the Delete() method.
    /// </summary>
    public enum DeleteFilters
    {
      
      /// <summary>
      /// 'All' DeleteFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'DeleteByPK' DeleteFilter
      /// </summary>
      DeleteByPK
      ,
      /// <summary>
      /// A Custom DeleteFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom RowCountFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL or Stored Procedure to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }

    /// <summary>
    /// Get/Set a WHERE clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public WhereFilters WhereFilter { get; set; }
    /// <summary>
    /// Get/Set a ORDER BY clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public OrderByFilters OrderByFilter { get; set; }
    
    /// <summary>
    /// Get/Set an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
    /// </summary>
    public InsertFilters InsertFilter { get; set; }

    private UpdateFilters mUpdateFilter;
    /// <summary>
    /// Get/Set an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
    /// </summary>
    public UpdateFilters UpdateFilter
    {
      get { return mUpdateFilter; }
      set
      {
        mUpdateFilter = value;
        if (mUpdateFilter == UpdateFilters.Custom)
          PerformValidation = false;
      }
    }
    /// <summary>
    /// Get/Set a DELETE statement or DELETE stored procedure to execute when calling the Delete() method. You might need to set a WhereFilter as well.
    /// </summary>
    public DeleteFilters DeleteFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Entity Property
    private gcsApplicationAuditPDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public gcsApplicationAuditPDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "gcsApplicationAuditPDSAData";
      DBObjectName = "GCS.gcsApplicationAudit";
      SchemaName = "GCS";
      PrimaryKeyType = PDSAPrimaryKeyType.GUID;
      PrimaryKeyGenerate = false;
      UseAuditTracking = DataProvider.UseDBAuditTracking;
      UseStoredProcs = DataProvider.UseStoredProcedures;
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;

      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Use this area to initialize any starting values for data in the Properties collection for each Entity property.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditId);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = true;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationAuditTypeId);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.TransactionId);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationId);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.UserId);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationVersion);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.MachineName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.LoginName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.WindowsUserName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditDetails);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditXml);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlXml.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.InsertName);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.InsertDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditId).Value = Entity.AuditId;
      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditId).SetAsNull == true)
        Entity.AuditId = Guid.NewGuid();
      ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationAuditTypeId).Value = Entity.ApplicationAuditTypeId;
      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationAuditTypeId).SetAsNull == true)
        Entity.ApplicationAuditTypeId = Guid.NewGuid();
      ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.TransactionId).Value = Entity.TransactionId;
      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.TransactionId).SetAsNull == true)
        Entity.TransactionId = Guid.NewGuid();
      ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationId).Value = Entity.ApplicationId;
      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationId).SetAsNull == true)
        Entity.ApplicationId = Guid.NewGuid();
      ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.UserId).Value = Entity.UserId;
      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.UserId).SetAsNull == true)
        Entity.UserId = Guid.NewGuid();
      ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationName).Value = Entity.ApplicationName;
      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationName).SetAsNull == true)
        Entity.ApplicationName = string.Empty;
      ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationVersion).Value = Entity.ApplicationVersion;
      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationVersion).SetAsNull == true)
        Entity.ApplicationVersion = string.Empty;
      ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.MachineName).Value = Entity.MachineName;
      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.MachineName).SetAsNull == true)
        Entity.MachineName = string.Empty;
      ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.LoginName).Value = Entity.LoginName;
      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.LoginName).SetAsNull == true)
        Entity.LoginName = string.Empty;
      ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.WindowsUserName).Value = Entity.WindowsUserName;
      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.WindowsUserName).SetAsNull == true)
        Entity.WindowsUserName = string.Empty;
      ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditDetails).Value = Entity.AuditDetails;
      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditDetails).SetAsNull == true)
        Entity.AuditDetails = string.Empty;
      ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditXml).Value = Entity.AuditXml;
      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditXml).SetAsNull == true)
        Entity.AuditXml = string.Empty;
      ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.InsertName).SetAsNull == true)
        Entity.InsertName = string.Empty;
      ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.InsertDate).SetAsNull == true)
        Entity.InsertDate = DateTimeOffset.Now;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditId).IsNull == false)
        Entity.AuditId = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditId).GetAsGuid();
      else
        Entity.AuditId = Guid.Empty;
      Entity.SetOriginalValueForProperty(gcsApplicationAuditPDSAValidator.ColumnNames.AuditId, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditId).Value);

      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationAuditTypeId).IsNull == false)
        Entity.ApplicationAuditTypeId = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationAuditTypeId).GetAsGuid();
      else
        Entity.ApplicationAuditTypeId = Guid.Empty;
      Entity.SetOriginalValueForProperty(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationAuditTypeId, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationAuditTypeId).Value);

      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.TransactionId).IsNull == false)
        Entity.TransactionId = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.TransactionId).GetAsGuid();
      else
        Entity.TransactionId = Guid.Empty;
      Entity.SetOriginalValueForProperty(gcsApplicationAuditPDSAValidator.ColumnNames.TransactionId, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.TransactionId).Value);

      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationId).IsNull == false)
        Entity.ApplicationId = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationId).GetAsGuid();
      else
        Entity.ApplicationId = Guid.Empty;
      Entity.SetOriginalValueForProperty(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationId, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationId).Value);

      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.UserId).IsNull == false)
        Entity.UserId = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.UserId).GetAsGuid();
      else
        Entity.UserId = Guid.Empty;
      Entity.SetOriginalValueForProperty(gcsApplicationAuditPDSAValidator.ColumnNames.UserId, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.UserId).Value);

      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationName).IsNull == false)
        Entity.ApplicationName = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationName).GetAsString();
      else
        Entity.ApplicationName = string.Empty;
      Entity.SetOriginalValueForProperty(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationName, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationName).Value);

      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationVersion).IsNull == false)
        Entity.ApplicationVersion = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationVersion).GetAsString();
      else
        Entity.ApplicationVersion = string.Empty;
      Entity.SetOriginalValueForProperty(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationVersion, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationVersion).Value);

      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.MachineName).IsNull == false)
        Entity.MachineName = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.MachineName).GetAsString();
      else
        Entity.MachineName = string.Empty;
      Entity.SetOriginalValueForProperty(gcsApplicationAuditPDSAValidator.ColumnNames.MachineName, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.MachineName).Value);

      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.LoginName).IsNull == false)
        Entity.LoginName = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.LoginName).GetAsString();
      else
        Entity.LoginName = string.Empty;
      Entity.SetOriginalValueForProperty(gcsApplicationAuditPDSAValidator.ColumnNames.LoginName, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.LoginName).Value);

      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.WindowsUserName).IsNull == false)
        Entity.WindowsUserName = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.WindowsUserName).GetAsString();
      else
        Entity.WindowsUserName = string.Empty;
      Entity.SetOriginalValueForProperty(gcsApplicationAuditPDSAValidator.ColumnNames.WindowsUserName, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.WindowsUserName).Value);

      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditDetails).IsNull == false)
        Entity.AuditDetails = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditDetails).GetAsString();
      else
        Entity.AuditDetails = string.Empty;
      Entity.SetOriginalValueForProperty(gcsApplicationAuditPDSAValidator.ColumnNames.AuditDetails, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditDetails).Value);

      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditXml).IsNull == false)
        Entity.AuditXml = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditXml).GetAsString();
      else
        Entity.AuditXml = string.Empty;
      Entity.SetOriginalValueForProperty(gcsApplicationAuditPDSAValidator.ColumnNames.AuditXml, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditXml).Value);

      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.InsertName).GetAsString();
      else
        Entity.InsertName = string.Empty;
      Entity.SetOriginalValueForProperty(gcsApplicationAuditPDSAValidator.ColumnNames.InsertName, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.InsertName).Value);

      if (ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
      else
        Entity.InsertDate = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(gcsApplicationAuditPDSAValidator.ColumnNames.InsertDate, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.InsertDate).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>gcsApplicationAuditPDSA</returns>
    public gcsApplicationAuditPDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new gcsApplicationAuditPDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement, or SELECT stored procedure based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsApplicationAuditPDSA_SelectAll");
          }
          else
          {
            sb.Append(" SELECT AuditId, ApplicationAuditTypeId, TransactionId, ApplicationId, UserId, ApplicationName, ApplicationVersion, MachineName, LoginName, WindowsUserName, AuditDetails, AuditXml, InsertName, InsertDate FROM GCS.gcsApplicationAudit");

          }
          
          break;
        case SelectFilters.ByApplicationAuditTypeId:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsApplicationAuditPDSA_ByDescriptionResourceId");
          }
          else
          {
            sb.Append(" SELECT ");
sb.Append(" AuditId");
sb.Append(" ,ApplicationAuditTypeId");
sb.Append(" ,TransactionId");
sb.Append(" ,ApplicationId");
sb.Append(" ,UserId");
sb.Append(" ,ApplicationName");
sb.Append(" ,ApplicationVersion");
sb.Append(" ,MachineName");
sb.Append(" ,LoginName");
sb.Append(" ,WindowsUserName");
sb.Append(" ,AuditDetails");
sb.Append(" ,AuditXml");
sb.Append(" ,InsertName");
sb.Append(" ,InsertDate");
sb.Append(" FROM GCS.gcsApplicationAudit");
sb.Append(" WHERE ");
sb.Append(" ApplicationAuditTypeId = @ApplicationAuditTypeId");

          }
          
          break;
        case SelectFilters.ListBox:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsApplicationAuditPDSA_SelectListBox");
          }
          else
          {
            sb.Append(" SELECT AuditId, ApplicationName FROM GCS.gcsApplicationAudit");

          }
          
          break;
        case SelectFilters.PrimaryKey:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsApplicationAuditPDSA_SelectByPK");
          }
          else
          {
            sb.Append(" SELECT AuditId, ApplicationAuditTypeId, TransactionId, ApplicationId, UserId, ApplicationName, ApplicationVersion, MachineName, LoginName, WindowsUserName, AuditDetails, AuditXml, InsertName, InsertDate FROM GCS.gcsApplicationAudit WHERE AuditId = @AuditId");

          }
          
          break;
        case SelectFilters.Search:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsApplicationAuditPDSA_SelectSearch");
          }
          else
          {
            sb.Append(" SELECT AuditId, ApplicationAuditTypeId, TransactionId, ApplicationId, UserId, ApplicationName, ApplicationVersion, MachineName, LoginName, WindowsUserName, AuditDetails, AuditXml, InsertName, InsertDate FROM GCS.gcsApplicationAudit WHERE (@ApplicationName IS NULL OR ApplicationName LIKE @ApplicationName + '%')");

          }
          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region InsertSQL Method
    /// <summary>
    /// Builds the SQL for the INSERT statement, or INSERT stored procedure based on the InsertFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string InsertSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (InsertFilter)
      {
        case InsertFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsApplicationAuditPDSA_Insert");
          }
          else
          {
            sb.Append(" INSERT INTO GCS.gcsApplicationAudit ( AuditId, ApplicationAuditTypeId, TransactionId, ApplicationId, UserId, ApplicationName, ApplicationVersion, MachineName, LoginName, WindowsUserName, AuditDetails, AuditXml, InsertName, InsertDate ) VALUES ( @AuditId, @ApplicationAuditTypeId, @TransactionId, @ApplicationId, @UserId, @ApplicationName, @ApplicationVersion, @MachineName, @LoginName, @WindowsUserName, @AuditDetails, @AuditXml, @InsertName, @InsertDate )");

          }
            
          break;
        
        case InsertFilters.Custom:
          sb.Append(InsertCustom);
          
          break;
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region UpdateSQL Method
    /// <summary>
    /// Builds the SQL for the UPDATE statement, or UPDATE stored procedure based on the UpdateFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string UpdateSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (UpdateFilter)
      {
        case UpdateFilters.PrimaryKey:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsApplicationAuditPDSA_Update");
          }
          else
          {
            sb.Append(" UPDATE GCS.gcsApplicationAudit SET AuditId = @AuditId, ApplicationAuditTypeId = @ApplicationAuditTypeId, TransactionId = @TransactionId, ApplicationId = @ApplicationId, UserId = @UserId, ApplicationName = @ApplicationName, ApplicationVersion = @ApplicationVersion, MachineName = @MachineName, LoginName = @LoginName, WindowsUserName = @WindowsUserName, AuditDetails = @AuditDetails, AuditXml = @AuditXml WHERE AuditId = @AuditId");

          }
          
          break;
        
        case UpdateFilters.Custom:
          sb.Append(UpdateCustom);
          
          break;
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region DeleteByPK Method
    /// <summary>
    /// Delete a record from the table based on the primary key value that is passed in.
    /// </summary>
    /// <param name="auditId">The value of the primary key of the row to delete</param>
    /// <returns>int</returns>
    public int DeleteByPK(Guid auditId)
    {
      DeleteFilter = DeleteFilters.DeleteByPK;
      Entity.AuditId = auditId;      
      
      // If using Audit Tracking, need to load the record first
      if (UseAuditTracking)
        LoadByPK(auditId);

      // Set WhereFilter to None here, because it got set in LoadByPK
      WhereFilter = WhereFilters.None;
      RowsAffected = Delete();

      return RowsAffected;
    }
    #endregion

    #region DeleteSQL Method
    /// <summary>
    /// Builds the SQL for the DELETE statement, or DELETE stored procedure. You can set the WhereFilter property to selectively delete rows from the table.
    /// </summary>
    /// <returns>string</returns>
    public override string DeleteSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (DeleteFilter)
      {
        case DeleteFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("");
          }
          else
          {
            sb.Append(" DELETE FROM GCS.gcsApplicationAudit");

          }
          
          break;
        case DeleteFilters.DeleteByPK:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsApplicationAudit_DeleteByPK");
          }
          else
          {
            sb.Append(" DELETE FROM GCS.gcsApplicationAudit WHERE AuditId = @AuditId");

          }
          
          break;

        case DeleteFilters.Custom:
          sb.Append(DeleteCustom);

          break;          
      }

      if(!UseStoredProcs)
      {
        sb.Append(WhereClauseSQL());
      }
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL, or the name of the stored procedure, that will count the number of rows.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsApplicationAuditPDSA_RowCount");
          }
          else
          {
            sb.Append(" SELECT Count(*) As NumRecs FROM GCS.gcsApplicationAudit");

          }
          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      if(!UseStoredProcs)
      {
        sb.Append(WhereClauseSQL());
      }
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region LoadByPK Method
    /// <summary>
    /// Load a row of data in the Entity properties. Returns a value greater than 0 if it finds the record.
    /// </summary>
    /// <param name="auditId">The value of the primary key of the row to load</param>
    /// <returns>Int32</returns>
    public int LoadByPK(Guid auditId)
    {
      WhereFilter = WhereFilters.None;
      SelectFilter = SelectFilters.PrimaryKey;
      Entity.AuditId = auditId;      

      // Load Data into Properties
      RowsAffected = Load();

      // Reset all Collection Properties
      ResetCollectionProperties();
      
      return RowsAffected;
    }
    #endregion
    
    #region WhereClauseSQL Method
    /// <summary>
    /// Builds the WHERE clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string WhereClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (WhereFilter)
      {
        case WhereFilters.Custom:
          sb.Append(" " + WhereCustom);

          break;

        case WhereFilters.None:
          //  Do nothing

          break;

        case WhereFilters.ApplicationAuditTypeId:
          sb.Append(" WHERE ApplicationAuditTypeId = @ApplicationAuditTypeId");

          
          break;
        case WhereFilters.ApplicationName:
          sb.Append(" WHERE ApplicationName = @ApplicationName");

          
          break;
        case WhereFilters.LikeApplicationName:
          sb.Append(" WHERE ApplicationName LIKE @ApplicationName + '%'");

          
          break;
        case WhereFilters.PrimaryKey:
          sb.Append(" WHERE AuditId = @AuditId");

          
          break;
      }
      
      return sb.ToString();
    }
    #endregion

    #region WhereClauseFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any WHERE clause parameters.
    /// </summary>
    protected override void WhereClauseFillInParameters()
    {
      switch (WhereFilter)
      {

        case WhereFilters.ApplicationAuditTypeId:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ApplicationAuditTypeId", DbType.Guid, Entity.ApplicationAuditTypeId));
         
          break;
        case WhereFilters.ApplicationName:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ApplicationName", DbType.String, Entity.ApplicationName));
         
          break;
        case WhereFilters.LikeApplicationName:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ApplicationName", DbType.String, Entity.ApplicationName));
         
          break;
        case WhereFilters.PrimaryKey:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@AuditId", DbType.Guid, Entity.AuditId));
         
          break;
      }
    }
    #endregion

    #region OrderByClauseSQL Method
    /// <summary>
    /// Builds the ORDER BY clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string OrderByClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (OrderByFilter)
      {
        case OrderByFilters.None:
          //  Do Nothing

          break;

        case OrderByFilters.Custom:
          sb.Append(" " + OrderByCustom);

          break;
          
        case OrderByFilters.ApplicationName:
          sb.Append(" ORDER BY ApplicationName");

          
          break;
      }
      
      return sb.ToString();
    }
    #endregion
    

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
         
          break;
        case SelectFilters.ByApplicationAuditTypeId:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ApplicationAuditTypeId", DbType.Guid, Entity.ApplicationAuditTypeId));
         
          break;
        case SelectFilters.ListBox:
         
          break;
        case SelectFilters.PrimaryKey:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@AuditId", DbType.Guid, Entity.AuditId));
         
          break;
        case SelectFilters.Search:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ApplicationName", DbType.String, Entity.ApplicationName));
         
          break;
      }
    }
    #endregion


    #region SetModificationCommandParameters Method
    /// <summary>
    /// Called to build any parameters prior to submitting an INSERT, UPDATE, or DELETE statement.
    /// </summary>
    protected override void SetModificationCommandParameters()
    {    
      switch (DataModificationAction)
      {
        case PDSADataModificationState.Delete:
          switch (DeleteFilter)
          {
            case DeleteFilters.All:
             CommandObject.Parameters.Clear();
              
              break;
            case DeleteFilters.DeleteByPK:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AuditId", DbType.Guid, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditId).Value));
              
              break;
          }
          if (this.WhereFilter != WhereFilters.None)
            WhereClauseFillInParameters();

          break;

        case PDSADataModificationState.Insert:
          if (PrimaryKeyType == PDSAPrimaryKeyType.PDSA)
          {
            if (PrimaryKeyGenerate == true)
            {
              //  Get New Primary Key from pdsaTableIds
              PrimaryKeySet(PKGetFromPDSATableIds(PDSALoginName));
            }
          }
          // Clear any Where Filter when doing an INSERT
          this.WhereFilter = WhereFilters.None;

          switch (InsertFilter)
          {
            case InsertFilters.All:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AuditId", DbType.Guid, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ApplicationAuditTypeId", DbType.Guid, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationAuditTypeId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@TransactionId", DbType.Guid, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.TransactionId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ApplicationId", DbType.Guid, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UserId", DbType.Guid, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.UserId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ApplicationName", DbType.String, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ApplicationVersion", DbType.String, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationVersion).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@MachineName", DbType.String, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.MachineName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LoginName", DbType.String, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.LoginName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@WindowsUserName", DbType.String, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.WindowsUserName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AuditDetails", DbType.String, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditDetails).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AuditXml", DbType.Xml, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditXml).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InsertName", DbType.String, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.InsertName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InsertDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.InsertDate).Value));
              
              break;
          }

          break;

        case PDSADataModificationState.Update:
          switch (UpdateFilter)
          {
            case UpdateFilters.PrimaryKey:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AuditId", DbType.Guid, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ApplicationAuditTypeId", DbType.Guid, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationAuditTypeId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@TransactionId", DbType.Guid, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.TransactionId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ApplicationId", DbType.Guid, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UserId", DbType.Guid, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.UserId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ApplicationName", DbType.String, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ApplicationVersion", DbType.String, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationVersion).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@MachineName", DbType.String, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.MachineName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LoginName", DbType.String, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.LoginName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@WindowsUserName", DbType.String, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.WindowsUserName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AuditDetails", DbType.String, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditDetails).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AuditXml", DbType.Xml, ValidatorObject.Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditXml).Value));
              
              break;
          }
          break;
      }
    }
    #endregion
  }
}
