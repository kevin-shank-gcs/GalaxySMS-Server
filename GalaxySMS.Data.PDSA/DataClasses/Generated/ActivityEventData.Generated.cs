using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Add/Edit/Delete/Select data from the ActivityEventPDSA table.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class ActivityEventPDSAData : PDSADataClassTable
  {
    #region Constructors
    /// <summary>
    /// Constructor for the ActivityEventPDSAData class
    /// </summary>
    public ActivityEventPDSAData() : base()
    {
      Entity = new ActivityEventPDSA();
      ValidatorObject = new ActivityEventPDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the ActivityEventPDSAData class
    /// </summary>
    /// <param name="entity">An instance of a ActivityEventPDSA</param>
    public ActivityEventPDSAData(ActivityEventPDSA entity) : base(entity)
    {
      Entity = entity;
      ValidatorObject = new ActivityEventPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the ActivityEventPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a ActivityEventPDSA</param>
    public ActivityEventPDSAData(PDSADataProvider dataProvider,
      ActivityEventPDSA entity)
      : base(dataProvider, entity)
    {
      Entity = entity;
      ValidatorObject = new ActivityEventPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the ActivityEventPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a ActivityEventPDSA</param>
    /// <param name="validator">An instance of a ActivityEventPDSAValidator</param>
    public ActivityEventPDSAData(PDSADataProvider dataProvider,
      ActivityEventPDSA entity, ActivityEventPDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'ListBox' SelectFilter
      /// </summary>
      ListBox
      ,
      /// <summary>
      /// 'PrimaryKey' SelectFilter
      /// </summary>
      PrimaryKey
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// A Custom Select Filter
      /// </summary>
      Custom
    }


    /// <summary>
    /// Enumeration for selecting an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
    /// </summary>
    public enum InsertFilters
    {
      
      /// <summary>
      /// 'All' InsertFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom InsertFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
    /// </summary>
    public enum UpdateFilters
    {
      
      /// <summary>
      /// 'PrimaryKey' UpdateFilter
      /// </summary>
      PrimaryKey
      ,
      /// <summary>
      /// A Custom UpdateFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a DELETE statement or DELETE stored procedure to execute when calling the Delete() method.
    /// </summary>
    public enum DeleteFilters
    {
      
      /// <summary>
      /// 'DeleteByPK' DeleteFilter
      /// </summary>
      DeleteByPK
      ,
      /// <summary>
      /// A Custom DeleteFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom RowCountFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL or Stored Procedure to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }

    
    /// <summary>
    /// Get/Set an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
    /// </summary>
    public InsertFilters InsertFilter { get; set; }

    private UpdateFilters mUpdateFilter;
    /// <summary>
    /// Get/Set an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
    /// </summary>
    public UpdateFilters UpdateFilter
    {
      get { return mUpdateFilter; }
      set
      {
        mUpdateFilter = value;
        if (mUpdateFilter == UpdateFilters.Custom)
          PerformValidation = false;
      }
    }
    /// <summary>
    /// Get/Set a DELETE statement or DELETE stored procedure to execute when calling the Delete() method. You might need to set a WhereFilter as well.
    /// </summary>
    public DeleteFilters DeleteFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Entity Property
    private ActivityEventPDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public ActivityEventPDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "ActivityEventPDSAData";
      DBObjectName = "GCS.ActivityEvent";
      SchemaName = "GCS";
      PrimaryKeyType = PDSAPrimaryKeyType.GUID;
      PrimaryKeyGenerate = false;
      UseAuditTracking = DataProvider.UseDBAuditTracking;
      UseStoredProcs = DataProvider.UseStoredProcedures;
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;

      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Use this area to initialize any starting values for data in the Properties collection for each Entity property.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityEventUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = true;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityDateTime);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = null;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityDateTimeUTC);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = null;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EventTypeMessage);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ForeColor);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ForeColorHex);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.SiteName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityId);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EventTypeUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceType);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.LastName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.FirstName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.IsTraced);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialDescription);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.PersonUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterNumber);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterGroupId);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.PanelNumber);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.InputOutputGroupName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.InputOutputGroupNumber);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CpuNumber);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.BoardNumber);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.SectionNumber);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ModuleNumber);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.NodeNumber);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.AlarmPriority);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ResponseRequired);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityType);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.BufferIndex);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialBytes);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBinary.Null;
      //prop.ValueForNull = new byte[0];

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityEventUid).Value = Entity.ActivityEventUid;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityEventUid).SetAsNull == true)
        Entity.ActivityEventUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityDateTime).Value = Entity.ActivityDateTime;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityDateTime).SetAsNull == true)
        Entity.ActivityDateTime = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityDateTimeUTC).Value = Entity.ActivityDateTimeUTC;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityDateTimeUTC).SetAsNull == true)
        Entity.ActivityDateTimeUTC = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EventTypeMessage).Value = Entity.EventTypeMessage;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EventTypeMessage).SetAsNull == true)
        Entity.EventTypeMessage = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ForeColor).Value = Entity.ForeColor;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ForeColor).SetAsNull == true)
        Entity.ForeColor = 0;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ForeColorHex).Value = Entity.ForeColorHex;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ForeColorHex).SetAsNull == true)
        Entity.ForeColorHex = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceName).Value = Entity.DeviceName;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceName).SetAsNull == true)
        Entity.DeviceName = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.SiteName).Value = Entity.SiteName;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.SiteName).SetAsNull == true)
        Entity.SiteName = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityId).Value = Entity.EntityId;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityId).SetAsNull == true)
        Entity.EntityId = Guid.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceUid).Value = Entity.DeviceUid;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceUid).SetAsNull == true)
        Entity.DeviceUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EventTypeUid).Value = Entity.EventTypeUid;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EventTypeUid).SetAsNull == true)
        Entity.EventTypeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceType).Value = Entity.DeviceType;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceType).SetAsNull == true)
        Entity.DeviceType = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.LastName).Value = Entity.LastName;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.LastName).SetAsNull == true)
        Entity.LastName = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.FirstName).Value = Entity.FirstName;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.FirstName).SetAsNull == true)
        Entity.FirstName = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.IsTraced).Value = Entity.IsTraced;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.IsTraced).SetAsNull == true)
        Entity.IsTraced = false;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialDescription).Value = Entity.CredentialDescription;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialDescription).SetAsNull == true)
        Entity.CredentialDescription = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.PersonUid).Value = Entity.PersonUid;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.PersonUid).SetAsNull == true)
        Entity.PersonUid = null;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialUid).Value = Entity.CredentialUid;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialUid).SetAsNull == true)
        Entity.CredentialUid = null;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterUid).Value = Entity.ClusterUid;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterUid).SetAsNull == true)
        Entity.ClusterUid = null;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterNumber).Value = Entity.ClusterNumber;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterNumber).SetAsNull == true)
        Entity.ClusterNumber = null;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterName).Value = Entity.ClusterName;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterName).SetAsNull == true)
        Entity.ClusterName = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterGroupId).Value = Entity.ClusterGroupId;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterGroupId).SetAsNull == true)
        Entity.ClusterGroupId = null;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.PanelNumber).Value = Entity.PanelNumber;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.PanelNumber).SetAsNull == true)
        Entity.PanelNumber = null;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.InputOutputGroupName).Value = Entity.InputOutputGroupName;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.InputOutputGroupName).SetAsNull == true)
        Entity.InputOutputGroupName = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.InputOutputGroupNumber).Value = Entity.InputOutputGroupNumber;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.InputOutputGroupNumber).SetAsNull == true)
        Entity.InputOutputGroupNumber = null;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CpuNumber).Value = Entity.CpuNumber;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CpuNumber).SetAsNull == true)
        Entity.CpuNumber = null;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.BoardNumber).Value = Entity.BoardNumber;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.BoardNumber).SetAsNull == true)
        Entity.BoardNumber = null;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.SectionNumber).Value = Entity.SectionNumber;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.SectionNumber).SetAsNull == true)
        Entity.SectionNumber = null;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ModuleNumber).Value = Entity.ModuleNumber;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ModuleNumber).SetAsNull == true)
        Entity.ModuleNumber = null;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.NodeNumber).Value = Entity.NodeNumber;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.NodeNumber).SetAsNull == true)
        Entity.NodeNumber = null;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.AlarmPriority).Value = Entity.AlarmPriority;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.AlarmPriority).SetAsNull == true)
        Entity.AlarmPriority = null;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ResponseRequired).Value = Entity.ResponseRequired;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ResponseRequired).SetAsNull == true)
        Entity.ResponseRequired = null;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityName).Value = Entity.EntityName;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityName).SetAsNull == true)
        Entity.EntityName = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityType).Value = Entity.EntityType;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityType).SetAsNull == true)
        Entity.EntityType = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.BufferIndex).Value = Entity.BufferIndex;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.BufferIndex).SetAsNull == true)
        Entity.BufferIndex = 0;
      ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialBytes).Value = Entity.CredentialBytes;
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialBytes).SetAsNull == true)
        Entity.CredentialBytes = null;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityEventUid).IsNull == false)
        Entity.ActivityEventUid = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityEventUid).GetAsGuid();
      else
        Entity.ActivityEventUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.ActivityEventUid, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityEventUid).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityDateTime).IsNull == false)
        Entity.ActivityDateTime = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityDateTime).GetAsDateTimeOffset();
      else
        Entity.ActivityDateTime = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.ActivityDateTime, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityDateTime).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityDateTimeUTC).IsNull == false)
        Entity.ActivityDateTimeUTC = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityDateTimeUTC).GetAsDateTimeOffset();
      else
        Entity.ActivityDateTimeUTC = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.ActivityDateTimeUTC, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityDateTimeUTC).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EventTypeMessage).IsNull == false)
        Entity.EventTypeMessage = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EventTypeMessage).GetAsString();
      else
        Entity.EventTypeMessage = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.EventTypeMessage, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EventTypeMessage).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ForeColor).IsNull == false)
        Entity.ForeColor = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ForeColor).GetAsInteger();
      else
        Entity.ForeColor = 0;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.ForeColor, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ForeColor).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ForeColorHex).IsNull == false)
        Entity.ForeColorHex = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ForeColorHex).GetAsString();
      else
        Entity.ForeColorHex = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.ForeColorHex, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ForeColorHex).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceName).IsNull == false)
        Entity.DeviceName = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceName).GetAsString();
      else
        Entity.DeviceName = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.DeviceName, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceName).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.SiteName).IsNull == false)
        Entity.SiteName = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.SiteName).GetAsString();
      else
        Entity.SiteName = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.SiteName, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.SiteName).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityId).IsNull == false)
        Entity.EntityId = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityId).GetAsGuid();
      else
        Entity.EntityId = Guid.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.EntityId, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityId).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceUid).IsNull == false)
        Entity.DeviceUid = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceUid).GetAsGuid();
      else
        Entity.DeviceUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.DeviceUid, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceUid).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EventTypeUid).IsNull == false)
        Entity.EventTypeUid = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EventTypeUid).GetAsGuid();
      else
        Entity.EventTypeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.EventTypeUid, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EventTypeUid).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceType).IsNull == false)
        Entity.DeviceType = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceType).GetAsString();
      else
        Entity.DeviceType = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.DeviceType, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceType).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.LastName).IsNull == false)
        Entity.LastName = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.LastName).GetAsString();
      else
        Entity.LastName = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.LastName, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.LastName).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.FirstName).IsNull == false)
        Entity.FirstName = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.FirstName).GetAsString();
      else
        Entity.FirstName = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.FirstName, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.FirstName).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.IsTraced).IsNull == false)
        Entity.IsTraced = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.IsTraced).GetAsBool();
      else
        Entity.IsTraced = false;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.IsTraced, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.IsTraced).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialDescription).IsNull == false)
        Entity.CredentialDescription = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialDescription).GetAsString();
      else
        Entity.CredentialDescription = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.CredentialDescription, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialDescription).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.PersonUid).IsNull == false)
        Entity.PersonUid = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.PersonUid).GetAsGuid();
      else
        Entity.PersonUid = null;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.PersonUid, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.PersonUid).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialUid).IsNull == false)
        Entity.CredentialUid = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialUid).GetAsGuid();
      else
        Entity.CredentialUid = null;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.CredentialUid, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialUid).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterUid).IsNull == false)
        Entity.ClusterUid = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterUid).GetAsGuid();
      else
        Entity.ClusterUid = null;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.ClusterUid, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterUid).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterNumber).IsNull == false)
        Entity.ClusterNumber = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterNumber).GetAsInteger();
      else
        Entity.ClusterNumber = null;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.ClusterNumber, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterName).IsNull == false)
        Entity.ClusterName = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterName).GetAsString();
      else
        Entity.ClusterName = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.ClusterName, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterName).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterGroupId).IsNull == false)
        Entity.ClusterGroupId = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterGroupId).GetAsInteger();
      else
        Entity.ClusterGroupId = null;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.ClusterGroupId, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterGroupId).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.PanelNumber).IsNull == false)
        Entity.PanelNumber = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.PanelNumber).GetAsInteger();
      else
        Entity.PanelNumber = null;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.PanelNumber, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.PanelNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.InputOutputGroupName).IsNull == false)
        Entity.InputOutputGroupName = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.InputOutputGroupName).GetAsString();
      else
        Entity.InputOutputGroupName = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.InputOutputGroupName, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.InputOutputGroupName).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.InputOutputGroupNumber).IsNull == false)
        Entity.InputOutputGroupNumber = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.InputOutputGroupNumber).GetAsInteger();
      else
        Entity.InputOutputGroupNumber = null;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.InputOutputGroupNumber, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.InputOutputGroupNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CpuNumber).IsNull == false)
        Entity.CpuNumber = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CpuNumber).GetAsShort();
      else
        Entity.CpuNumber = null;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.CpuNumber, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CpuNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.BoardNumber).IsNull == false)
        Entity.BoardNumber = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.BoardNumber).GetAsShort();
      else
        Entity.BoardNumber = null;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.BoardNumber, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.BoardNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.SectionNumber).IsNull == false)
        Entity.SectionNumber = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.SectionNumber).GetAsShort();
      else
        Entity.SectionNumber = null;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.SectionNumber, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.SectionNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ModuleNumber).IsNull == false)
        Entity.ModuleNumber = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ModuleNumber).GetAsShort();
      else
        Entity.ModuleNumber = null;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.ModuleNumber, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ModuleNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.NodeNumber).IsNull == false)
        Entity.NodeNumber = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.NodeNumber).GetAsShort();
      else
        Entity.NodeNumber = null;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.NodeNumber, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.NodeNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.AlarmPriority).IsNull == false)
        Entity.AlarmPriority = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.AlarmPriority).GetAsInteger();
      else
        Entity.AlarmPriority = null;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.AlarmPriority, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.AlarmPriority).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ResponseRequired).IsNull == false)
        Entity.ResponseRequired = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ResponseRequired).GetAsBool();
      else
        Entity.ResponseRequired = null;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.ResponseRequired, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ResponseRequired).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityName).IsNull == false)
        Entity.EntityName = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityName).GetAsString();
      else
        Entity.EntityName = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.EntityName, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityName).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityType).IsNull == false)
        Entity.EntityType = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityType).GetAsString();
      else
        Entity.EntityType = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.EntityType, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityType).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.BufferIndex).IsNull == false)
        Entity.BufferIndex = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.BufferIndex).GetAsInteger();
      else
        Entity.BufferIndex = 0;
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.BufferIndex, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.BufferIndex).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialBytes).IsNull == false)
        Entity.CredentialBytes = ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialBytes).GetAsByteArray();
      else
        Entity.CredentialBytes = new byte[0];
      Entity.SetOriginalValueForProperty(ActivityEventPDSAValidator.ColumnNames.CredentialBytes, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialBytes).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>ActivityEventPDSA</returns>
    public ActivityEventPDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new ActivityEventPDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement, or SELECT stored procedure based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ActivityEventPDSA_SelectAll");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ListBox:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ActivityEventPDSA_SelectListBox");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.PrimaryKey:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ActivityEventPDSA_SelectByPK");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.Search:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ActivityEventPDSA_SelectSearch");
          }
          else
          {
            
          }
          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region InsertSQL Method
    /// <summary>
    /// Builds the SQL for the INSERT statement, or INSERT stored procedure based on the InsertFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string InsertSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (InsertFilter)
      {
        case InsertFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ActivityEventPDSA_Insert");
          }
          else
          {
            
          }
            
          break;
        
        case InsertFilters.Custom:
          sb.Append(InsertCustom);
          
          break;
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region UpdateSQL Method
    /// <summary>
    /// Builds the SQL for the UPDATE statement, or UPDATE stored procedure based on the UpdateFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string UpdateSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (UpdateFilter)
      {
        case UpdateFilters.PrimaryKey:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ActivityEventPDSA_Update");
          }
          else
          {
            
          }
          
          break;
        
        case UpdateFilters.Custom:
          sb.Append(UpdateCustom);
          
          break;
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region DeleteByPK Method
    /// <summary>
    /// Delete a record from the table based on the primary key value that is passed in.
    /// </summary>
    /// <param name="activityEventUid">The value of the primary key of the row to delete</param>
    /// <returns>int</returns>
    public int DeleteByPK(Guid activityEventUid)
    {
      DeleteFilter = DeleteFilters.DeleteByPK;
      Entity.ActivityEventUid = activityEventUid;      
      
      // If using Audit Tracking, need to load the record first
      if (UseAuditTracking)
        LoadByPK(activityEventUid);

      RowsAffected = Delete();

      return RowsAffected;
    }
    #endregion

    #region DeleteSQL Method
    /// <summary>
    /// Builds the SQL for the DELETE statement, or DELETE stored procedure. You can set the WhereFilter property to selectively delete rows from the table.
    /// </summary>
    /// <returns>string</returns>
    public override string DeleteSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (DeleteFilter)
      {
        case DeleteFilters.DeleteByPK:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ActivityEventPDSA_DeleteByPK");
          }
          else
          {
            
          }
          
          break;

        case DeleteFilters.Custom:
          sb.Append(DeleteCustom);

          break;          
      }

      if(!UseStoredProcs)
      {
        sb.Append(WhereClauseSQL());
      }
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL, or the name of the stored procedure, that will count the number of rows.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ActivityEventPDSA_RowCount");
          }
          else
          {
            
          }
          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      if(!UseStoredProcs)
      {
        sb.Append(WhereClauseSQL());
      }
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region LoadByPK Method
    /// <summary>
    /// Load a row of data in the Entity properties. Returns a value greater than 0 if it finds the record.
    /// </summary>
    /// <param name="activityEventUid">The value of the primary key of the row to load</param>
    /// <returns>Int32</returns>
    public int LoadByPK(Guid activityEventUid)
    {
      SelectFilter = SelectFilters.PrimaryKey;
      Entity.ActivityEventUid = activityEventUid;      

      // Load Data into Properties
      RowsAffected = Load();

      // Reset all Collection Properties
      ResetCollectionProperties();
      
      return RowsAffected;
    }
    #endregion
    
    

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
         
          break;
        case SelectFilters.ListBox:
         
          break;
        case SelectFilters.PrimaryKey:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ActivityEventUid", DbType.Guid, Entity.ActivityEventUid));
         
          break;
        case SelectFilters.Search:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ActivityDateTime", DbType.DateTimeOffset, Entity.ActivityDateTime));
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion


    #region SetModificationCommandParameters Method
    /// <summary>
    /// Called to build any parameters prior to submitting an INSERT, UPDATE, or DELETE statement.
    /// </summary>
    protected override void SetModificationCommandParameters()
    {    
      switch (DataModificationAction)
      {
        case PDSADataModificationState.Delete:
          switch (DeleteFilter)
          {
            case DeleteFilters.DeleteByPK:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ActivityEventUid", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityEventUid).Value));
              
              break;
          }

          break;

        case PDSADataModificationState.Insert:
          if (PrimaryKeyType == PDSAPrimaryKeyType.PDSA)
          {
            if (PrimaryKeyGenerate == true)
            {
              //  Get New Primary Key from pdsaTableIds
              PrimaryKeySet(PKGetFromPDSATableIds(PDSALoginName));
            }
          }

          switch (InsertFilter)
          {
            case InsertFilters.All:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ActivityEventUid", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityEventUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ActivityDateTime", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityDateTime).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@EventTypeMessage", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EventTypeMessage).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ForeColor", DbType.Int32, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ForeColor).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DeviceName", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SiteName", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.SiteName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@EntityId", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DeviceUid", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@EventTypeUid", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EventTypeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DeviceType", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceType).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LastName", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.LastName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@FirstName", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.FirstName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@IsTraced", DbType.Boolean, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.IsTraced).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CredentialDescription", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialDescription).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@PersonUid", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.PersonUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CredentialUid", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ClusterUid", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ClusterNumber", DbType.Int32, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ClusterName", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ClusterGroupId", DbType.Int32, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterGroupId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@PanelNumber", DbType.Int32, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.PanelNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InputOutputGroupName", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.InputOutputGroupName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InputOutputGroupNumber", DbType.Int32, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.InputOutputGroupNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CpuNumber", DbType.Int16, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CpuNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@BoardNumber", DbType.Int16, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.BoardNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SectionNumber", DbType.Int16, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.SectionNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ModuleNumber", DbType.Int16, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ModuleNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@NodeNumber", DbType.Int16, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.NodeNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AlarmPriority", DbType.Int32, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.AlarmPriority).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ResponseRequired", DbType.Boolean, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ResponseRequired).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@EntityName", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@EntityType", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityType).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@BufferIndex", DbType.Int32, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.BufferIndex).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CredentialBytes", DbType.Binary, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialBytes).Value));
              
              break;
          }

          break;

        case PDSADataModificationState.Update:
          switch (UpdateFilter)
          {
            case UpdateFilters.PrimaryKey:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ActivityEventUid", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityEventUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ActivityDateTime", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ActivityDateTime).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@EventTypeMessage", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EventTypeMessage).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ForeColor", DbType.Int32, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ForeColor).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DeviceName", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SiteName", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.SiteName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@EntityId", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DeviceUid", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@EventTypeUid", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EventTypeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DeviceType", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.DeviceType).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LastName", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.LastName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@FirstName", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.FirstName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@IsTraced", DbType.Boolean, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.IsTraced).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CredentialDescription", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialDescription).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@PersonUid", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.PersonUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CredentialUid", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ClusterUid", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ClusterNumber", DbType.Int32, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ClusterName", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ClusterGroupId", DbType.Int32, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ClusterGroupId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@PanelNumber", DbType.Int32, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.PanelNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InputOutputGroupName", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.InputOutputGroupName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InputOutputGroupNumber", DbType.Int32, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.InputOutputGroupNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CpuNumber", DbType.Int16, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CpuNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@BoardNumber", DbType.Int16, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.BoardNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SectionNumber", DbType.Int16, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.SectionNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ModuleNumber", DbType.Int16, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ModuleNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@NodeNumber", DbType.Int16, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.NodeNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AlarmPriority", DbType.Int32, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.AlarmPriority).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ResponseRequired", DbType.Boolean, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.ResponseRequired).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@EntityName", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@EntityType", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.EntityType).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@BufferIndex", DbType.Int32, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.BufferIndex).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CredentialBytes", DbType.Binary, ValidatorObject.Properties.GetByName(ActivityEventPDSAValidator.ColumnNames.CredentialBytes).Value));
              
              break;
          }
          break;
      }
    }
    #endregion
  }
}
