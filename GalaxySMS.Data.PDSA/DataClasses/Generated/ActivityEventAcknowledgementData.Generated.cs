using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
    /// <summary>
    /// Used to Add/Edit/Delete/Select data from the ActivityEventAcknowledgementPDSA table.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// You should NOT modify this class as it is intended to be re-generated.
    /// </summary>
    public partial class ActivityEventAcknowledgementPDSAData : PDSADataClassTable
    {
        #region Constructors
        /// <summary>
        /// Constructor for the ActivityEventAcknowledgementPDSAData class
        /// </summary>
        public ActivityEventAcknowledgementPDSAData() : base()
        {
            Entity = new ActivityEventAcknowledgementPDSA();
            ValidatorObject = new ActivityEventAcknowledgementPDSAValidator(Entity);

            Init();
        }

        /// <summary>
        /// Constructor for the ActivityEventAcknowledgementPDSAData class
        /// </summary>
        /// <param name="entity">An instance of a ActivityEventAcknowledgementPDSA</param>
        public ActivityEventAcknowledgementPDSAData(ActivityEventAcknowledgementPDSA entity) : base(entity)
        {
            Entity = entity;
            ValidatorObject = new ActivityEventAcknowledgementPDSAValidator(Entity);

            Init();
        }

        /// <summary>
        /// Constructor for the ActivityEventAcknowledgementPDSAData class
        /// </summary>
        /// <param name="dataProvider">An instance of a PDSADataProvider</param>
        /// <param name="entity">An instance of a ActivityEventAcknowledgementPDSA</param>
        public ActivityEventAcknowledgementPDSAData(PDSADataProvider dataProvider,
          ActivityEventAcknowledgementPDSA entity)
          : base(dataProvider, entity)
        {
            Entity = entity;
            ValidatorObject = new ActivityEventAcknowledgementPDSAValidator(Entity);

            Init();
        }

        /// <summary>
        /// Constructor for the ActivityEventAcknowledgementPDSAData class
        /// </summary>
        /// <param name="dataProvider">An instance of a PDSADataProvider</param>
        /// <param name="entity">An instance of a ActivityEventAcknowledgementPDSA</param>
        /// <param name="validator">An instance of a ActivityEventAcknowledgementPDSAValidator</param>
        public ActivityEventAcknowledgementPDSAData(PDSADataProvider dataProvider,
          ActivityEventAcknowledgementPDSA entity, ActivityEventAcknowledgementPDSAValidator validator)
          : base(dataProvider, entity, validator)
        {
            Entity = entity;
            ValidatorObject = validator;

            Init();
        }
        #endregion

        #region Filter Properties and Enumerations
        /// <summary>
        /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
        /// </summary>
        public enum SelectFilters
        {

            /// <summary>
            /// 'All' SelectFilter
            /// </summary>
            All
          ,
            /// <summary>
            /// 'ListBox' SelectFilter
            /// </summary>
            ListBox
          ,
            /// <summary>
            /// 'PrimaryKey' SelectFilter
            /// </summary>
            PrimaryKey
          ,
            /// <summary>
            /// 'Search' SelectFilter
            /// </summary>
            Search
          ,
            /// <summary>
            /// 'ByActivityEventUid' SelectFilter
            /// </summary>
            ByActivityEventUid
          ,
            /// <summary>
            /// A Custom Select Filter
            /// </summary>
            Custom
        }


        /// <summary>
        /// Enumeration for selecting an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
        /// </summary>
        public enum InsertFilters
        {

            /// <summary>
            /// 'All' InsertFilter
            /// </summary>
            All
          ,
            /// <summary>
            /// A Custom InsertFilter
            /// </summary>
            Custom
        }

        /// <summary>
        /// Enumeration for selecting an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
        /// </summary>
        public enum UpdateFilters
        {

            /// <summary>
            /// 'PrimaryKey' UpdateFilter
            /// </summary>
            PrimaryKey
          ,
            /// <summary>
            /// A Custom UpdateFilter
            /// </summary>
            Custom
        }

        /// <summary>
        /// Enumeration for selecting a DELETE statement or DELETE stored procedure to execute when calling the Delete() method.
        /// </summary>
        public enum DeleteFilters
        {

            /// <summary>
            /// 'DeleteByPK' DeleteFilter
            /// </summary>
            DeleteByPK
          ,
            /// <summary>
            /// A Custom DeleteFilter
            /// </summary>
            Custom
        }

        /// <summary>
        /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
        /// </summary>
        public enum RowCountFilters
        {

            /// <summary>
            /// 'All' RowCountFilter
            /// </summary>
            All
          ,
            /// <summary>
            /// A Custom RowCountFilter
            /// </summary>
            Custom
        }

        /// <summary>
        /// Get/Set a Dynamic SQL or Stored Procedure to execute to return data.
        /// </summary>
        public SelectFilters SelectFilter { get; set; }


        /// <summary>
        /// Get/Set an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
        /// </summary>
        public InsertFilters InsertFilter { get; set; }

        private UpdateFilters mUpdateFilter;
        /// <summary>
        /// Get/Set an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
        /// </summary>
        public UpdateFilters UpdateFilter
        {
            get { return mUpdateFilter; }
            set
            {
                mUpdateFilter = value;
                if (mUpdateFilter == UpdateFilters.Custom)
                    PerformValidation = false;
            }
        }
        /// <summary>
        /// Get/Set a DELETE statement or DELETE stored procedure to execute when calling the Delete() method. You might need to set a WhereFilter as well.
        /// </summary>
        public DeleteFilters DeleteFilter { get; set; }
        /// <summary>
        /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
        /// </summary>
        public RowCountFilters RowCountFilter { get; set; }
        #endregion

        #region Entity Property
        private ActivityEventAcknowledgementPDSA _EntityObject = null;

        /// <summary>
        /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
        /// </summary>
        public ActivityEventAcknowledgementPDSA Entity
        {
            get { return _EntityObject; }
            set
            {
                _EntityObject = value;
                base.EntityObject = _EntityObject;
            }
        }
        #endregion

        #region Init Method
        /// <summary>
        /// Initializes this class to a valid start state.
        /// </summary>
        protected override void Init()
        {
            ClassName = "ActivityEventAcknowledgementPDSAData";
            DBObjectName = "GCS.ActivityEventAcknowledgement";
            SchemaName = "GCS";
            PrimaryKeyType = PDSAPrimaryKeyType.GUID;
            PrimaryKeyGenerate = false;
            UseAuditTracking = DataProvider.UseDBAuditTracking;
            UseStoredProcs = DataProvider.UseStoredProcedures;
            base.EntityObject = Entity;
            base.ValidatorObject = ValidatorObject;

            // Set Reference to ValidatorObject Properties Collection
            AllColumns = ValidatorObject.Properties;

            // Set any Initial Starting values for data columns
            InitDataColumns();
        }
        #endregion

        #region InitDataColumns Method
        /// <summary>
        /// Use this area to initialize any starting values for data in the Properties collection for each Entity property.
        /// </summary>
        protected override void InitDataColumns()
        {
            PDSAProperty prop;

            // Fill in Column Properties
            prop = ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventAcknowledgementUid);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = true;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
            //prop.ValueForNull = Guid.Empty;

            prop = ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventUid);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
            //prop.ValueForNull = Guid.Empty;

            prop = ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.DeviceEntityId);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
            //prop.ValueForNull = Guid.Empty;

            prop = ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.DeviceUid);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
            //prop.ValueForNull = Guid.Empty;

            prop = ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventCategory);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
            //prop.ValueForNull = string.Empty;

            prop = ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.Response);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
            //prop.ValueForNull = string.Empty;

            prop = ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedByUserId);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
            //prop.ValueForNull = Guid.Empty;

            prop = ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedByUserDisplayName);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
            //prop.ValueForNull = string.Empty;

            prop = ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedDateTime);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
            //prop.ValueForNull = null;

            prop = ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedUpdatedDateTime);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
            //prop.ValueForNull = null;

        }
        #endregion

        #region EntityDataToColumnCollection Method
        /// <summary>
        /// Moves the data from the Entity class into the Columns collection
        /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
        /// </summary>
        protected override void EntityDataToColumnCollection()
        {
            // Move all Entity Values into Properties Collection
            ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventAcknowledgementUid).Value = Entity.ActivityEventAcknowledgementUid;
            if (ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventAcknowledgementUid).SetAsNull == true)
                Entity.ActivityEventAcknowledgementUid = Guid.Empty;
            ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventUid).Value = Entity.ActivityEventUid;
            if (ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventUid).SetAsNull == true)
                Entity.ActivityEventUid = Guid.Empty;
            ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.DeviceEntityId).Value = Entity.DeviceEntityId;
            if (ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.DeviceEntityId).SetAsNull == true)
                Entity.DeviceEntityId = Guid.Empty;
            ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.DeviceUid).Value = Entity.DeviceUid;
            if (ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.DeviceUid).SetAsNull == true)
                Entity.DeviceUid = Guid.Empty;
            ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventCategory).Value = Entity.ActivityEventCategory;
            if (ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventCategory).SetAsNull == true)
                Entity.ActivityEventCategory = string.Empty;
            ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.Response).Value = Entity.Response;
            if (ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.Response).SetAsNull == true)
                Entity.Response = string.Empty;
            ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedByUserId).Value = Entity.AckedByUserId;
            if (ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedByUserId).SetAsNull == true)
                Entity.AckedByUserId = Guid.Empty;
            ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedByUserDisplayName).Value = Entity.AckedByUserDisplayName;
            if (ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedByUserDisplayName).SetAsNull == true)
                Entity.AckedByUserDisplayName = string.Empty;
            ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedDateTime).Value = Entity.AckedDateTime;
            if (ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedDateTime).SetAsNull == true)
                Entity.AckedDateTime = DateTimeOffset.MinValue;
            ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedUpdatedDateTime).Value = Entity.AckedUpdatedDateTime;
            if (ValidatorObject.Properties
                    .GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedUpdatedDateTime).SetAsNull == true)
                Entity.AckedUpdatedDateTime = null;
        }
        #endregion

        #region ColumnCollectionToEntityData Method
        /// <summary>
        /// Moves the data from the Columns collection into the Entity class.
        /// This is called whenever you are reading data in from a database.
        ///   For example, from BuildCollection, Load, LoadByPK, etc.
        /// </summary>
        protected override void ColumnCollectionToEntityData()
        {
            if (ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventAcknowledgementUid).IsNull == false)
                Entity.ActivityEventAcknowledgementUid = ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventAcknowledgementUid).GetAsGuid();
            else
                Entity.ActivityEventAcknowledgementUid = Guid.Empty;
            Entity.SetOriginalValueForProperty(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventAcknowledgementUid, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventAcknowledgementUid).Value);

            if (ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventUid).IsNull == false)
                Entity.ActivityEventUid = ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventUid).GetAsGuid();
            else
                Entity.ActivityEventUid = Guid.Empty;
            Entity.SetOriginalValueForProperty(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventUid, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventUid).Value);

            if (ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.DeviceEntityId).IsNull == false)
                Entity.DeviceEntityId = ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.DeviceEntityId).GetAsGuid();
            else
                Entity.DeviceEntityId = Guid.Empty;
            Entity.SetOriginalValueForProperty(ActivityEventAcknowledgementPDSAValidator.ColumnNames.DeviceEntityId, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.DeviceEntityId).Value);

            if (ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.DeviceUid).IsNull == false)
                Entity.DeviceUid = ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.DeviceUid).GetAsGuid();
            else
                Entity.DeviceUid = Guid.Empty;
            Entity.SetOriginalValueForProperty(ActivityEventAcknowledgementPDSAValidator.ColumnNames.DeviceUid, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.DeviceUid).Value);

            if (ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventCategory).IsNull == false)
                Entity.ActivityEventCategory = ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventCategory).GetAsString();
            else
                Entity.ActivityEventCategory = string.Empty;
            Entity.SetOriginalValueForProperty(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventCategory, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventCategory).Value);

            if (ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.Response).IsNull == false)
                Entity.Response = ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.Response).GetAsString();
            else
                Entity.Response = string.Empty;
            Entity.SetOriginalValueForProperty(ActivityEventAcknowledgementPDSAValidator.ColumnNames.Response, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.Response).Value);

            if (ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedByUserId).IsNull == false)
                Entity.AckedByUserId = ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedByUserId).GetAsGuid();
            else
                Entity.AckedByUserId = Guid.Empty;
            Entity.SetOriginalValueForProperty(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedByUserId, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedByUserId).Value);

            if (ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedByUserDisplayName).IsNull == false)
                Entity.AckedByUserDisplayName = ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedByUserDisplayName).GetAsString();
            else
                Entity.AckedByUserDisplayName = string.Empty;
            Entity.SetOriginalValueForProperty(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedByUserDisplayName, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedByUserDisplayName).Value);

            if (ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedDateTime).IsNull == false)
                Entity.AckedDateTime = ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedDateTime).GetAsDateTimeOffset();
            else
                Entity.AckedDateTime = DateTimeOffset.MinValue;
            Entity.SetOriginalValueForProperty(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedDateTime, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedDateTime).Value);

            if (ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedUpdatedDateTime).IsNull == false)
                Entity.AckedUpdatedDateTime = ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedUpdatedDateTime).GetAsDateTimeOffset();
            else
                Entity.AckedUpdatedDateTime = null;
            Entity.SetOriginalValueForProperty(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedUpdatedDateTime, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedUpdatedDateTime).Value);

        }
        #endregion

        #region CreateEntityFromDataRow Method
        /// <summary>
        /// Creates an Entity object from a DataRow object.
        /// </summary>
        /// <param name="dr">DataRow object with all fields from the table in it.</param>
        /// <returns>ActivityEventAcknowledgementPDSA</returns>
        public ActivityEventAcknowledgementPDSA CreateEntityFromDataRow(DataRow dr)
        {
            // Create new Entity Object
            Entity = new ActivityEventAcknowledgementPDSA();

            // Move all data into Properties collection
            // This method calls the ColumnCollectionToEntityData method
            DataRowToProperties(dr);
            Entity.IsDirty = false;

            return Entity;
        }
        #endregion

        #region SelectSQL Method
        /// <summary>
        /// Builds the SQL for the SELECT statement, or SELECT stored procedure based on the SelectFilter property.
        /// </summary>
        /// <returns>string</returns>
        public override string SelectSQL()
        {
            StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

            switch (SelectFilter)
            {
                case SelectFilters.All:
                    if (UseStoredProcs)
                    {
                        sb.Append("GCS.ActivityEventAcknowledgementPDSA_SelectAll");
                    }
                    else
                    {

                    }

                    break;
                case SelectFilters.ListBox:
                    if (UseStoredProcs)
                    {
                        sb.Append("GCS.ActivityEventAcknowledgementPDSA_SelectListBox");
                    }
                    else
                    {

                    }

                    break;
                case SelectFilters.PrimaryKey:
                    if (UseStoredProcs)
                    {
                        sb.Append("GCS.ActivityEventAcknowledgementPDSA_SelectByPK");
                    }
                    else
                    {

                    }

                    break;
                case SelectFilters.Search:
                    if (UseStoredProcs)
                    {
                        sb.Append("GCS.ActivityEventAcknowledgementPDSA_SelectSearch");
                    }
                    else
                    {

                    }

                    break;
                case SelectFilters.ByActivityEventUid:
                    if (UseStoredProcs)
                    {
                        sb.Append("GCS.ActivityEventAcknowledgementPDSA_ByActivityEventUid");
                    }
                    else
                    {

                    }

                    break;

                case SelectFilters.Custom:
                    sb.Append(SelectCustom);

                    break;
            }

            SQL = sb.ToString();

            return SQL;
        }
        #endregion

        #region InsertSQL Method
        /// <summary>
        /// Builds the SQL for the INSERT statement, or INSERT stored procedure based on the InsertFilter property.
        /// </summary>
        /// <returns>string</returns>
        public override string InsertSQL()
        {
            StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

            switch (InsertFilter)
            {
                case InsertFilters.All:
                    if (UseStoredProcs)
                    {
                        sb.Append("GCS.ActivityEventAcknowledgementPDSA_Insert");
                    }
                    else
                    {

                    }

                    break;

                case InsertFilters.Custom:
                    sb.Append(InsertCustom);

                    break;
            }

            SQL = sb.ToString();

            return SQL;
        }
        #endregion

        #region UpdateSQL Method
        /// <summary>
        /// Builds the SQL for the UPDATE statement, or UPDATE stored procedure based on the UpdateFilter property.
        /// </summary>
        /// <returns>string</returns>
        public override string UpdateSQL()
        {
            StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

            switch (UpdateFilter)
            {
                case UpdateFilters.PrimaryKey:
                    if (UseStoredProcs)
                    {
                        sb.Append("GCS.ActivityEventAcknowledgementPDSA_Update");
                    }
                    else
                    {

                    }

                    break;

                case UpdateFilters.Custom:
                    sb.Append(UpdateCustom);

                    break;
            }

            SQL = sb.ToString();

            return SQL;
        }
        #endregion

        #region DeleteByPK Method
        /// <summary>
        /// Delete a record from the table based on the primary key value that is passed in.
        /// </summary>
        /// <param name="activityEventAcknowledgementUid">The value of the primary key of the row to delete</param>
        /// <returns>int</returns>
        public int DeleteByPK(Guid activityEventAcknowledgementUid)
        {
            DeleteFilter = DeleteFilters.DeleteByPK;
            Entity.ActivityEventAcknowledgementUid = activityEventAcknowledgementUid;

            // If using Audit Tracking, need to load the record first
            if (UseAuditTracking)
                LoadByPK(activityEventAcknowledgementUid);

            RowsAffected = Delete();

            return RowsAffected;
        }
        #endregion

        #region DeleteSQL Method
        /// <summary>
        /// Builds the SQL for the DELETE statement, or DELETE stored procedure. You can set the WhereFilter property to selectively delete rows from the table.
        /// </summary>
        /// <returns>string</returns>
        public override string DeleteSQL()
        {
            StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

            switch (DeleteFilter)
            {
                case DeleteFilters.DeleteByPK:
                    if (UseStoredProcs)
                    {
                        sb.Append("GCS.ActivityEventAcknowledgementPDSA_DeleteByPK");
                    }
                    else
                    {

                    }

                    break;

                case DeleteFilters.Custom:
                    sb.Append(DeleteCustom);

                    break;
            }

            if (!UseStoredProcs)
            {
                sb.Append(WhereClauseSQL());
            }

            SQL = sb.ToString();

            return SQL;
        }
        #endregion

        #region RowCountSQL Method
        /// <summary>
        /// Builds the SELECT Count(*) SQL, or the name of the stored procedure, that will count the number of rows.
        /// </summary>
        /// <returns>string</returns>
        public override string RowCountSQL()
        {
            StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

            switch (RowCountFilter)
            {
                case RowCountFilters.All:
                    if (UseStoredProcs)
                    {
                        sb.Append("GCS.ActivityEventAcknowledgementPDSA_RowCount");
                    }
                    else
                    {

                    }

                    break;

                case RowCountFilters.Custom:
                    sb.Append(RowCountCustom);

                    break;
            }

            if (!UseStoredProcs)
            {
                sb.Append(WhereClauseSQL());
            }

            SQL = sb.ToString();

            return SQL;
        }
        #endregion

        #region LoadByPK Method
        /// <summary>
        /// Load a row of data in the Entity properties. Returns a value greater than 0 if it finds the record.
        /// </summary>
        /// <param name="activityEventAcknowledgementUid">The value of the primary key of the row to load</param>
        /// <returns>Int32</returns>
        public int LoadByPK(Guid activityEventAcknowledgementUid)
        {
            SelectFilter = SelectFilters.PrimaryKey;
            Entity.ActivityEventAcknowledgementUid = activityEventAcknowledgementUid;

            // Load Data into Properties
            RowsAffected = Load();

            // Reset all Collection Properties
            ResetCollectionProperties();

            return RowsAffected;
        }
        #endregion



        #region SelectFillInParameters Method
        /// <summary>
        /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
        /// </summary>
        protected override void SelectFillInParameters()
        {
            switch (SelectFilter)
            {
                case SelectFilters.All:

                    break;
                case SelectFilters.ListBox:

                    break;
                case SelectFilters.PrimaryKey:
                    CommandObject.Parameters.Add(DataProvider.CreateParameter("@ActivityEventAcknowledgementUid", DbType.Guid, Entity.ActivityEventAcknowledgementUid));

                    break;
                case SelectFilters.Search:
                    CommandObject.Parameters.Add(DataProvider.CreateParameter("@ActivityEventCategory", DbType.String, Entity.ActivityEventCategory));

                    break;
                case SelectFilters.ByActivityEventUid:
                    CommandObject.Parameters.Add(DataProvider.CreateParameter("@ActivityEventUid", DbType.Guid, Entity.ActivityEventUid));

                    break;
            }

            // Add on paging parameters
            if (UsePaging)
            {
                PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
            }
        }
        #endregion


        #region SetModificationCommandParameters Method
        /// <summary>
        /// Called to build any parameters prior to submitting an INSERT, UPDATE, or DELETE statement.
        /// </summary>
        protected override void SetModificationCommandParameters()
        {
            switch (DataModificationAction)
            {
                case PDSADataModificationState.Delete:
                    switch (DeleteFilter)
                    {
                        case DeleteFilters.DeleteByPK:
                            CommandObject.Parameters.Clear();
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@ActivityEventAcknowledgementUid", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventAcknowledgementUid).Value));

                            break;
                    }

                    break;

                case PDSADataModificationState.Insert:
                    if (PrimaryKeyType == PDSAPrimaryKeyType.PDSA)
                    {
                        if (PrimaryKeyGenerate == true)
                        {
                            //  Get New Primary Key from pdsaTableIds
                            PrimaryKeySet(PKGetFromPDSATableIds(PDSALoginName));
                        }
                    }

                    switch (InsertFilter)
                    {
                        case InsertFilters.All:
                            CommandObject.Parameters.Clear();
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@ActivityEventAcknowledgementUid", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventAcknowledgementUid).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@ActivityEventUid", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventUid).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@DeviceEntityId", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.DeviceEntityId).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@DeviceUid", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.DeviceUid).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@ActivityEventCategory", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventCategory).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@Response", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.Response).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@AckedByUserId", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedByUserId).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@AckedByUserDisplayName", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedByUserDisplayName).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@AckedDateTime", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedDateTime).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@AckedUpdatedDateTime", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedUpdatedDateTime).Value));

                            break;
                    }

                    break;

                case PDSADataModificationState.Update:
                    switch (UpdateFilter)
                    {
                        case UpdateFilters.PrimaryKey:
                            CommandObject.Parameters.Clear();
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@ActivityEventAcknowledgementUid", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventAcknowledgementUid).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@ActivityEventUid", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventUid).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@DeviceEntityId", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.DeviceEntityId).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@DeviceUid", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.DeviceUid).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@ActivityEventCategory", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.ActivityEventCategory).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@Response", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.Response).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@AckedByUserId", DbType.Guid, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedByUserId).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@AckedByUserDisplayName", DbType.String, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedByUserDisplayName).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@AckedDateTime", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedDateTime).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@AckedUpdatedDateTime", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(ActivityEventAcknowledgementPDSAValidator.ColumnNames.AckedUpdatedDateTime).Value));

                            break;
                    }
                    break;
            }
        }
        #endregion
    }
}
