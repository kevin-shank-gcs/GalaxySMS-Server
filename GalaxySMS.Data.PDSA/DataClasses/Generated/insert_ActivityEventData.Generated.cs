using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// This class calls the stored procedure insert_ActivityEventPDSAData
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public class insert_ActivityEventPDSAData : PDSAStoredProcExecute
  {
    #region Constructors
    /// <summary>
    /// Constructor for the insert_ActivityEventPDSAData class
    /// </summary>
    public insert_ActivityEventPDSAData() : base()
    {
      Entity = new insert_ActivityEventPDSA();
      ValidatorObject = new  insert_ActivityEventPDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the insert_ActivityEventPDSAData class
    /// </summary>
    /// <param name="entity">An instance of a insert_ActivityEventPDSA</param>
    public insert_ActivityEventPDSAData(insert_ActivityEventPDSA entity) : base()
    {
      Entity = entity;
      ValidatorObject = new insert_ActivityEventPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the insert_ActivityEventPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a insert_ActivityEventPDSA</param>
    public insert_ActivityEventPDSAData(PDSADataProvider dataProvider,
      insert_ActivityEventPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new  insert_ActivityEventPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the insert_ActivityEventPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a insert_ActivityEventPDSA</param>
    /// <param name="validator">An instance of a insert_ActivityEventPDSAValidator</param>
    public insert_ActivityEventPDSAData(PDSADataProvider dataProvider,
      insert_ActivityEventPDSA entity, insert_ActivityEventPDSAValidator validator)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Public Property
    /// <summary>
    /// Get/Set the Entity class that will be used to get and set parameters and columns for this data class.
    /// </summary>
    public insert_ActivityEventPDSA Entity { get; set; }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "insert_ActivityEventPDSAData";
      StoredProcName = "insert_ActivityEvent";
      SchemaName = "GCS";

      // Move validator Properties collection into the Parameters collection
      PropertiesToParameters(ValidatorObject.Properties);

      // Create Parameters
      InitParameters();
    }
    #endregion
    
   #region InitParameters Method
    /// <summary>
    /// Creates all the parameters for the stored procedure.
    /// </summary>
    protected override void InitParameters()
    {
      PDSADataParameter param;

      // Clear all parameters each time
      AllParameters.Clear();

      // Create each parameter object and add to Parameters Collection
      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.ActivityEventUid;
      param.DBType = DbType.Guid;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.ActivityDateTime;
      param.DBType = DbType.DateTimeOffset;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.EventTypeMessage;
      param.DBType = DbType.String;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.ForeColor;
      param.DBType = DbType.Int32;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.DeviceName;
      param.DBType = DbType.String;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.SiteName;
      param.DBType = DbType.String;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.EntityId;
      param.DBType = DbType.Guid;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.DeviceUid;
      param.DBType = DbType.Guid;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.EventTypeUid;
      param.DBType = DbType.Guid;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.DeviceType;
      param.DBType = DbType.String;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.LastName;
      param.DBType = DbType.String;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.FirstName;
      param.DBType = DbType.String;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.IsTraced;
      param.DBType = DbType.Boolean;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.CredentialDescription;
      param.DBType = DbType.String;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.PersonUid;
      param.DBType = DbType.Guid;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.CredentialUid;
      param.DBType = DbType.Guid;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.ClusterUid;
      param.DBType = DbType.Guid;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.ClusterNumber;
      param.DBType = DbType.Int32;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.ClusterName;
      param.DBType = DbType.String;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.ClusterGroupId;
      param.DBType = DbType.Int32;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.PanelNumber;
      param.DBType = DbType.Int32;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.InputOutputGroupName;
      param.DBType = DbType.String;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.InputOutputGroupNumber;
      param.DBType = DbType.Int32;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.CpuNumber;
      param.DBType = DbType.Int16;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.BoardNumber;
      param.DBType = DbType.Int16;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.SectionNumber;
      param.DBType = DbType.Int16;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.ModuleNumber;
      param.DBType = DbType.Int16;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.NodeNumber;
      param.DBType = DbType.Int16;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.AlarmPriority;
      param.DBType = DbType.Int32;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.ResponseRequired;
      param.DBType = DbType.Boolean;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.EntityName;
      param.DBType = DbType.String;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.EntityType;
      param.DBType = DbType.String;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.BufferIndex;
      param.DBType = DbType.Int32;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.CredentialBytes;
      param.DBType = DbType.Binary;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.InsertDate;
      param.DBType = DbType.DateTimeOffset;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.IsAlarmEvent;
      param.DBType = DbType.Boolean;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.IsAccessGrantedEvent;
      param.DBType = DbType.Boolean;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_ActivityEventPDSAData.ParameterNames.RETURNVALUE;
      param.DBType = DbType.Int32;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.ReturnValue;
      AllParameters.Add(param);


      AddReturnValueParameterToCollection();
    }
    #endregion

    #region EntityDataToParameterCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Parameters collection
    /// </summary>
    protected override void EntityDataToParameterCollection()
    {
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ActivityEventUid).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ActivityEventUid).Value = Entity.ActivityEventUid;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ActivityEventUid).Value = System.Data.SqlTypes.SqlGuid.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ActivityDateTime).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ActivityDateTime).Value = Entity.ActivityDateTime;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ActivityDateTime).Value = System.Data.SqlTypes.SqlDateTime.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.EventTypeMessage).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.EventTypeMessage).Value = Entity.EventTypeMessage;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.EventTypeMessage).Value = System.Data.SqlTypes.SqlChars.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ForeColor).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ForeColor).Value = Entity.ForeColor;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ForeColor).Value = System.Data.SqlTypes.SqlInt32.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.DeviceName).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.DeviceName).Value = Entity.DeviceName;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.DeviceName).Value = System.Data.SqlTypes.SqlChars.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.SiteName).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.SiteName).Value = Entity.SiteName;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.SiteName).Value = System.Data.SqlTypes.SqlChars.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.EntityId).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.EntityId).Value = Entity.EntityId;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.EntityId).Value = System.Data.SqlTypes.SqlGuid.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.DeviceUid).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.DeviceUid).Value = Entity.DeviceUid;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.DeviceUid).Value = System.Data.SqlTypes.SqlGuid.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.EventTypeUid).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.EventTypeUid).Value = Entity.EventTypeUid;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.EventTypeUid).Value = System.Data.SqlTypes.SqlGuid.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.DeviceType).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.DeviceType).Value = Entity.DeviceType;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.DeviceType).Value = System.Data.SqlTypes.SqlChars.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.LastName).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.LastName).Value = Entity.LastName;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.LastName).Value = System.Data.SqlTypes.SqlChars.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.FirstName).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.FirstName).Value = Entity.FirstName;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.FirstName).Value = System.Data.SqlTypes.SqlChars.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.IsTraced).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.IsTraced).Value = Entity.IsTraced;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.IsTraced).Value = System.Data.SqlTypes.SqlBoolean.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.CredentialDescription).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.CredentialDescription).Value = Entity.CredentialDescription;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.CredentialDescription).Value = System.Data.SqlTypes.SqlChars.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.PersonUid).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.PersonUid).Value = Entity.PersonUid;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.PersonUid).Value = System.Data.SqlTypes.SqlGuid.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.CredentialUid).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.CredentialUid).Value = Entity.CredentialUid;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.CredentialUid).Value = System.Data.SqlTypes.SqlGuid.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ClusterUid).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ClusterUid).Value = Entity.ClusterUid;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ClusterUid).Value = System.Data.SqlTypes.SqlGuid.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ClusterNumber).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ClusterNumber).Value = Entity.ClusterNumber;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ClusterNumber).Value = System.Data.SqlTypes.SqlInt32.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ClusterName).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ClusterName).Value = Entity.ClusterName;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ClusterName).Value = System.Data.SqlTypes.SqlChars.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ClusterGroupId).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ClusterGroupId).Value = Entity.ClusterGroupId;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ClusterGroupId).Value = System.Data.SqlTypes.SqlInt32.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.PanelNumber).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.PanelNumber).Value = Entity.PanelNumber;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.PanelNumber).Value = System.Data.SqlTypes.SqlInt32.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.InputOutputGroupName).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.InputOutputGroupName).Value = Entity.InputOutputGroupName;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.InputOutputGroupName).Value = System.Data.SqlTypes.SqlChars.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.InputOutputGroupNumber).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.InputOutputGroupNumber).Value = Entity.InputOutputGroupNumber;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.InputOutputGroupNumber).Value = System.Data.SqlTypes.SqlInt32.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.CpuNumber).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.CpuNumber).Value = Entity.CpuNumber;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.CpuNumber).Value = System.Data.SqlTypes.SqlInt16.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.BoardNumber).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.BoardNumber).Value = Entity.BoardNumber;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.BoardNumber).Value = System.Data.SqlTypes.SqlInt16.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.SectionNumber).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.SectionNumber).Value = Entity.SectionNumber;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.SectionNumber).Value = System.Data.SqlTypes.SqlInt16.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ModuleNumber).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ModuleNumber).Value = Entity.ModuleNumber;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ModuleNumber).Value = System.Data.SqlTypes.SqlInt16.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.NodeNumber).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.NodeNumber).Value = Entity.NodeNumber;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.NodeNumber).Value = System.Data.SqlTypes.SqlInt16.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.AlarmPriority).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.AlarmPriority).Value = Entity.AlarmPriority;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.AlarmPriority).Value = System.Data.SqlTypes.SqlInt32.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ResponseRequired).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ResponseRequired).Value = Entity.ResponseRequired;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.ResponseRequired).Value = System.Data.SqlTypes.SqlBoolean.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.EntityName).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.EntityName).Value = Entity.EntityName;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.EntityName).Value = System.Data.SqlTypes.SqlChars.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.EntityType).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.EntityType).Value = Entity.EntityType;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.EntityType).Value = System.Data.SqlTypes.SqlChars.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.BufferIndex).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.BufferIndex).Value = Entity.BufferIndex;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.BufferIndex).Value = System.Data.SqlTypes.SqlInt32.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.CredentialBytes).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.CredentialBytes).Value = Entity.CredentialBytes;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.CredentialBytes).Value = System.Data.SqlTypes.SqlBinary.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.InsertDate).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.InsertDate).Value = Entity.InsertDate;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.InsertDate).Value = System.Data.SqlTypes.SqlDateTime.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.IsAlarmEvent).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.IsAlarmEvent).Value = Entity.IsAlarmEvent;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.IsAlarmEvent).Value = System.Data.SqlTypes.SqlBoolean.Null;
      if (AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.IsAccessGrantedEvent).SetAsNull == false)
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.IsAccessGrantedEvent).Value = Entity.IsAccessGrantedEvent;
      else
        AllParameters.GetByName(insert_ActivityEventPDSAValidator.ParameterNames.IsAccessGrantedEvent).Value = System.Data.SqlTypes.SqlBoolean.Null;
    }
    #endregion
    
    #region OutputParametersToEntityData Method
    /// <summary>
    /// Moves the output parameters from the Parameters collection into the Entity class.
    /// </summary>
    protected override void OutputParametersToEntityData()
    {
      if (AllParameters.GetByName(insert_ActivityEventPDSAData.ParameterNames.RETURNVALUE).IsValueNull == false)
        Entity.RETURNVALUE = AllParameters.GetByName(insert_ActivityEventPDSAData.ParameterNames.RETURNVALUE).GetAsInteger();
      else
        Entity.RETURNVALUE = 0;
    }
    #endregion
        
    #region SetDirtyFlag Methods
    /// <summary>
    /// This is called with a 'false' value after each successful Insert/Update method call.
    /// </summary>
    /// <param name="isDirty">Called with 'false' by default</param>
    protected override void SetDirtyFlag(bool isDirty)
    {
      Entity.IsDirty = isDirty;
    }
    #endregion
       
    #region ParameterNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the insert_ActivityEventPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ParameterNames
    {
    /// <summary>
    /// Returns '@ActivityEventUid'
    /// </summary>
    public static string ActivityEventUid = "@ActivityEventUid";
    /// <summary>
    /// Returns '@ActivityDateTime'
    /// </summary>
    public static string ActivityDateTime = "@ActivityDateTime";
    /// <summary>
    /// Returns '@EventTypeMessage'
    /// </summary>
    public static string EventTypeMessage = "@EventTypeMessage";
    /// <summary>
    /// Returns '@ForeColor'
    /// </summary>
    public static string ForeColor = "@ForeColor";
    /// <summary>
    /// Returns '@DeviceName'
    /// </summary>
    public static string DeviceName = "@DeviceName";
    /// <summary>
    /// Returns '@SiteName'
    /// </summary>
    public static string SiteName = "@SiteName";
    /// <summary>
    /// Returns '@EntityId'
    /// </summary>
    public static string EntityId = "@EntityId";
    /// <summary>
    /// Returns '@DeviceUid'
    /// </summary>
    public static string DeviceUid = "@DeviceUid";
    /// <summary>
    /// Returns '@EventTypeUid'
    /// </summary>
    public static string EventTypeUid = "@EventTypeUid";
    /// <summary>
    /// Returns '@DeviceType'
    /// </summary>
    public static string DeviceType = "@DeviceType";
    /// <summary>
    /// Returns '@LastName'
    /// </summary>
    public static string LastName = "@LastName";
    /// <summary>
    /// Returns '@FirstName'
    /// </summary>
    public static string FirstName = "@FirstName";
    /// <summary>
    /// Returns '@IsTraced'
    /// </summary>
    public static string IsTraced = "@IsTraced";
    /// <summary>
    /// Returns '@CredentialDescription'
    /// </summary>
    public static string CredentialDescription = "@CredentialDescription";
    /// <summary>
    /// Returns '@PersonUid'
    /// </summary>
    public static string PersonUid = "@PersonUid";
    /// <summary>
    /// Returns '@CredentialUid'
    /// </summary>
    public static string CredentialUid = "@CredentialUid";
    /// <summary>
    /// Returns '@ClusterUid'
    /// </summary>
    public static string ClusterUid = "@ClusterUid";
    /// <summary>
    /// Returns '@ClusterNumber'
    /// </summary>
    public static string ClusterNumber = "@ClusterNumber";
    /// <summary>
    /// Returns '@ClusterName'
    /// </summary>
    public static string ClusterName = "@ClusterName";
    /// <summary>
    /// Returns '@ClusterGroupId'
    /// </summary>
    public static string ClusterGroupId = "@ClusterGroupId";
    /// <summary>
    /// Returns '@PanelNumber'
    /// </summary>
    public static string PanelNumber = "@PanelNumber";
    /// <summary>
    /// Returns '@InputOutputGroupName'
    /// </summary>
    public static string InputOutputGroupName = "@InputOutputGroupName";
    /// <summary>
    /// Returns '@InputOutputGroupNumber'
    /// </summary>
    public static string InputOutputGroupNumber = "@InputOutputGroupNumber";
    /// <summary>
    /// Returns '@CpuNumber'
    /// </summary>
    public static string CpuNumber = "@CpuNumber";
    /// <summary>
    /// Returns '@BoardNumber'
    /// </summary>
    public static string BoardNumber = "@BoardNumber";
    /// <summary>
    /// Returns '@SectionNumber'
    /// </summary>
    public static string SectionNumber = "@SectionNumber";
    /// <summary>
    /// Returns '@ModuleNumber'
    /// </summary>
    public static string ModuleNumber = "@ModuleNumber";
    /// <summary>
    /// Returns '@NodeNumber'
    /// </summary>
    public static string NodeNumber = "@NodeNumber";
    /// <summary>
    /// Returns '@AlarmPriority'
    /// </summary>
    public static string AlarmPriority = "@AlarmPriority";
    /// <summary>
    /// Returns '@ResponseRequired'
    /// </summary>
    public static string ResponseRequired = "@ResponseRequired";
    /// <summary>
    /// Returns '@EntityName'
    /// </summary>
    public static string EntityName = "@EntityName";
    /// <summary>
    /// Returns '@EntityType'
    /// </summary>
    public static string EntityType = "@EntityType";
    /// <summary>
    /// Returns '@BufferIndex'
    /// </summary>
    public static string BufferIndex = "@BufferIndex";
    /// <summary>
    /// Returns '@CredentialBytes'
    /// </summary>
    public static string CredentialBytes = "@CredentialBytes";
    /// <summary>
    /// Returns '@InsertDate'
    /// </summary>
    public static string InsertDate = "@InsertDate";
    /// <summary>
    /// Returns '@IsAlarmEvent'
    /// </summary>
    public static string IsAlarmEvent = "@IsAlarmEvent";
    /// <summary>
    /// Returns '@IsAccessGrantedEvent'
    /// </summary>
    public static string IsAccessGrantedEvent = "@IsAccessGrantedEvent";
    /// <summary>
    /// Returns '@RETURN_VALUE'
    /// </summary>
    public static string RETURNVALUE = "@RETURN_VALUE";
    }
    #endregion
  }
}
