using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// This class calls the stored procedure OutputDeviceFilters_SelectForUserIdPDSA
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public class OutputDeviceFilters_SelectForUserIdPDSAData : PDSAStoredProcReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the OutputDeviceFilters_SelectForUserIdPDSAData class
    /// </summary>
    public OutputDeviceFilters_SelectForUserIdPDSAData() : base()
    {
      Entity = new OutputDeviceFilters_SelectForUserIdPDSA();
      ValidatorObject = new  OutputDeviceFilters_SelectForUserIdPDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the OutputDeviceFilters_SelectForUserIdPDSAData class
    /// </summary>
    /// <param name="entity">An instance of a OutputDeviceFilters_SelectForUserIdPDSA</param>
    public OutputDeviceFilters_SelectForUserIdPDSAData(OutputDeviceFilters_SelectForUserIdPDSA entity) : base()
    {
      Entity = entity;
      ValidatorObject = new OutputDeviceFilters_SelectForUserIdPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the OutputDeviceFilters_SelectForUserIdPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a OutputDeviceFilters_SelectForUserIdPDSA</param>
    public OutputDeviceFilters_SelectForUserIdPDSAData(PDSADataProvider dataProvider,
      OutputDeviceFilters_SelectForUserIdPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new  OutputDeviceFilters_SelectForUserIdPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the OutputDeviceFilters_SelectForUserIdPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a OutputDeviceFilters_SelectForUserIdPDSA</param>
    /// <param name="validator">An instance of a OutputDeviceFilters_SelectForUserIdPDSAValidator</param>
    public OutputDeviceFilters_SelectForUserIdPDSAData(PDSADataProvider dataProvider,
      OutputDeviceFilters_SelectForUserIdPDSA entity, OutputDeviceFilters_SelectForUserIdPDSAValidator validator)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Public Property
    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public OutputDeviceFilters_SelectForUserIdPDSA Entity { get; set; }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "OutputDeviceFilters_SelectForUserIdPDSAData";
      StoredProcName = "OutputDeviceFilters_SelectForUserId";
      SchemaName = "GCS";

      // Create Parameters
      InitParameters();

      // Create Data Columns
      InitDataColumns();
    }
    #endregion

   #region InitParameters Method
    /// <summary>
    /// Creates all the parameters for the stored procedure.
    /// </summary>
    protected override void InitParameters()
    {
      PDSADataParameter param;

      // Clear all parameters each time
      AllParameters.Clear();

      // Create each parameter object and add to Parameters Collection
      param = new PDSADataParameter();
      param.ParameterName = OutputDeviceFilters_SelectForUserIdPDSAValidator.ParameterNames.UserId;
      param.DBType = DbType.Guid;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = OutputDeviceFilters_SelectForUserIdPDSAValidator.ParameterNames.OutputDeviceUid;
      param.DBType = DbType.Guid;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = OutputDeviceFilters_SelectForUserIdPDSAValidator.ParameterNames.RETURNVALUE;
      param.DBType = DbType.Int32;
      param.ParamDirection = ParameterDirection.ReturnValue;
      param.IsRefCursor = false;
      AllParameters.Add(param);

  
      AddReturnValueParameterToCollection();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes the Data Columns Collection for each field returned from the stored procedure.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSADataColumn dc;

      // Create each data column
      dc = PDSADataColumn.CreateDataColumn(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.DisplayName, GetResourceMessage("GCS_OutputDeviceFilters_SelectForUserIdPDSA_DisplayName_Header", "Display Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.EntityName, GetResourceMessage("GCS_OutputDeviceFilters_SelectForUserIdPDSA_EntityName_Header", "Entity Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.ApplicationName, GetResourceMessage("GCS_OutputDeviceFilters_SelectForUserIdPDSA_ApplicationName_Header", "Application Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.RoleName, GetResourceMessage("GCS_OutputDeviceFilters_SelectForUserIdPDSA_RoleName_Header", "Role Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.PermissionName, GetResourceMessage("GCS_OutputDeviceFilters_SelectForUserIdPDSA_PermissionName_Header", "Permission Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.OutputDeviceUid, GetResourceMessage("GCS_OutputDeviceFilters_SelectForUserIdPDSA_OutputDeviceUid_Header", "Output Device Uid"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.OutputName, GetResourceMessage("GCS_OutputDeviceFilters_SelectForUserIdPDSA_OutputName_Header", "Output Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.PermissionId, GetResourceMessage("GCS_OutputDeviceFilters_SelectForUserIdPDSA_PermissionId_Header", "Permission Id"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
    }
    #endregion

    #region EntityDataToParameterCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Parameters collection
    /// </summary>
    protected override void EntityDataToParameterCollection()
    {
      if (AllParameters.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ParameterNames.UserId).SetAsNull == false)
        AllParameters.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ParameterNames.UserId).Value = Entity.UserId;
      else
        AllParameters.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ParameterNames.UserId).Value = System.Data.SqlTypes.SqlGuid.Null;
      if (AllParameters.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ParameterNames.OutputDeviceUid).SetAsNull == false)
        AllParameters.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ParameterNames.OutputDeviceUid).Value = Entity.OutputDeviceUid;
      else
        AllParameters.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ParameterNames.OutputDeviceUid).Value = System.Data.SqlTypes.SqlGuid.Null;
    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      if (AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.DisplayName).SetAsNull == false)
        AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.DisplayName).Value = Entity.DisplayName;
      else
        AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.DisplayName).Value = string.Empty;
     
      if (AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.EntityName).SetAsNull == false)
        AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.EntityName).Value = Entity.EntityName;
      else
        AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.EntityName).Value = string.Empty;
     
      if (AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.ApplicationName).SetAsNull == false)
        AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.ApplicationName).Value = Entity.ApplicationName;
      else
        AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.ApplicationName).Value = string.Empty;
     
      if (AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.RoleName).SetAsNull == false)
        AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.RoleName).Value = Entity.RoleName;
      else
        AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.RoleName).Value = string.Empty;
     
      if (AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.PermissionName).SetAsNull == false)
        AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.PermissionName).Value = Entity.PermissionName;
      else
        AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.PermissionName).Value = string.Empty;
     
      if (AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.OutputDeviceUid).SetAsNull == false)
        AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.OutputDeviceUid).Value = Entity.OutputDeviceUid;
      else
        AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.OutputDeviceUid).Value = Guid.Empty;
     
      if (AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.OutputName).SetAsNull == false)
        AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.OutputName).Value = Entity.OutputName;
      else
        AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.OutputName).Value = string.Empty;
     
      if (AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.PermissionId).SetAsNull == false)
        AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.PermissionId).Value = Entity.PermissionId;
      else
        AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.PermissionId).Value = Guid.Empty;
     
    }
    #endregion

    #region OutputParametersToEntityData Method
    /// <summary>
    /// Moves the output parameters from the Parameters collection into the Entity class.
    /// </summary>
    protected override void OutputParametersToEntityData()
    {
      if (AllParameters.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ParameterNames.RETURNVALUE).IsValueNull == false)
        Entity.RETURNVALUE = AllParameters.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ParameterNames.RETURNVALUE).GetAsInteger();
      else
        Entity.RETURNVALUE = 0;
    }
    #endregion
    
    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.DisplayName).IsNull == false)
        Entity.DisplayName = AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.DisplayName).GetAsString();
      else
        Entity.DisplayName = string.Empty;

      if (AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.EntityName).IsNull == false)
        Entity.EntityName = AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.EntityName).GetAsString();
      else
        Entity.EntityName = string.Empty;

      if (AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.ApplicationName).IsNull == false)
        Entity.ApplicationName = AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.ApplicationName).GetAsString();
      else
        Entity.ApplicationName = string.Empty;

      if (AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.RoleName).IsNull == false)
        Entity.RoleName = AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.RoleName).GetAsString();
      else
        Entity.RoleName = string.Empty;

      if (AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.PermissionName).IsNull == false)
        Entity.PermissionName = AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.PermissionName).GetAsString();
      else
        Entity.PermissionName = string.Empty;

      if (AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.OutputDeviceUid).IsNull == false)
        Entity.OutputDeviceUid = AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.OutputDeviceUid).GetAsGuid();
      else
        Entity.OutputDeviceUid = Guid.Empty;

      if (AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.OutputName).IsNull == false)
        Entity.OutputName = AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.OutputName).GetAsString();
      else
        Entity.OutputName = string.Empty;

      if (AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.PermissionId).IsNull == false)
        Entity.PermissionId = AllColumns.GetByName(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.PermissionId).GetAsGuid();
      else
        Entity.PermissionId = Guid.Empty;

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>OutputDeviceFilters_SelectForUserIdPDSA</returns>
    public OutputDeviceFilters_SelectForUserIdPDSA CreateEntityFromDataRow(DataRow dr)
    {
      OutputDeviceFilters_SelectForUserIdPDSA entity = new OutputDeviceFilters_SelectForUserIdPDSA();

      if (dr.Table.Columns.Contains(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.DisplayName))
      {
        if (dr[OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.DisplayName] != DBNull.Value)
          entity.DisplayName = PDSAString.ConvertToStringTrim(dr[OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.DisplayName]);
      }
      if (dr.Table.Columns.Contains(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.EntityName))
      {
        if (dr[OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.EntityName] != DBNull.Value)
          entity.EntityName = PDSAString.ConvertToStringTrim(dr[OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.EntityName]);
      }
      if (dr.Table.Columns.Contains(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.ApplicationName))
      {
        if (dr[OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.ApplicationName] != DBNull.Value)
          entity.ApplicationName = PDSAString.ConvertToStringTrim(dr[OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.ApplicationName]);
      }
      if (dr.Table.Columns.Contains(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.RoleName))
      {
        if (dr[OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.RoleName] != DBNull.Value)
          entity.RoleName = PDSAString.ConvertToStringTrim(dr[OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.RoleName]);
      }
      if (dr.Table.Columns.Contains(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.PermissionName))
      {
        if (dr[OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.PermissionName] != DBNull.Value)
          entity.PermissionName = PDSAString.ConvertToStringTrim(dr[OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.PermissionName]);
      }
      if (dr.Table.Columns.Contains(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.OutputDeviceUid))
      {
        if (dr[OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.OutputDeviceUid] != DBNull.Value)
          entity.OutputDeviceUid = PDSAProperty.ConvertToGuid(dr[OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.OutputDeviceUid]);
      }
      if (dr.Table.Columns.Contains(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.OutputName))
      {
        if (dr[OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.OutputName] != DBNull.Value)
          entity.OutputName = PDSAString.ConvertToStringTrim(dr[OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.OutputName]);
      }
      if (dr.Table.Columns.Contains(OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.PermissionId))
      {
        if (dr[OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.PermissionId] != DBNull.Value)
          entity.PermissionId = PDSAProperty.ConvertToGuid(dr[OutputDeviceFilters_SelectForUserIdPDSAValidator.ColumnNames.PermissionId]);
      }
      entity.IsDirty = false;

      return entity;
    }
    #endregion

    #region ParameterNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the OutputDeviceFilters_SelectForUserIdPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ParameterNames
    {
    /// <summary>
    /// Returns '@UserId'
    /// </summary>
    public static string UserId = "@UserId";
    /// <summary>
    /// Returns '@OutputDeviceUid'
    /// </summary>
    public static string OutputDeviceUid = "@OutputDeviceUid";
    /// <summary>
    /// Returns '@RETURN_VALUE'
    /// </summary>
    public static string RETURNVALUE = "@RETURN_VALUE";
    }
    #endregion
  }
}
