using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// This class calls the stored procedure ClusterPDSA_ByClusterNumberPDSA
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public class ClusterPDSA_ByClusterNumberPDSAData : PDSAStoredProcReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the ClusterPDSA_ByClusterNumberPDSAData class
    /// </summary>
    public ClusterPDSA_ByClusterNumberPDSAData() : base()
    {
      Entity = new ClusterPDSA_ByClusterNumberPDSA();
      ValidatorObject = new  ClusterPDSA_ByClusterNumberPDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the ClusterPDSA_ByClusterNumberPDSAData class
    /// </summary>
    /// <param name="entity">An instance of a ClusterPDSA_ByClusterNumberPDSA</param>
    public ClusterPDSA_ByClusterNumberPDSAData(ClusterPDSA_ByClusterNumberPDSA entity) : base()
    {
      Entity = entity;
      ValidatorObject = new ClusterPDSA_ByClusterNumberPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the ClusterPDSA_ByClusterNumberPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a ClusterPDSA_ByClusterNumberPDSA</param>
    public ClusterPDSA_ByClusterNumberPDSAData(PDSADataProvider dataProvider,
      ClusterPDSA_ByClusterNumberPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new  ClusterPDSA_ByClusterNumberPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the ClusterPDSA_ByClusterNumberPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a ClusterPDSA_ByClusterNumberPDSA</param>
    /// <param name="validator">An instance of a ClusterPDSA_ByClusterNumberPDSAValidator</param>
    public ClusterPDSA_ByClusterNumberPDSAData(PDSADataProvider dataProvider,
      ClusterPDSA_ByClusterNumberPDSA entity, ClusterPDSA_ByClusterNumberPDSAValidator validator)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Public Property
    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public ClusterPDSA_ByClusterNumberPDSA Entity { get; set; }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "ClusterPDSA_ByClusterNumberPDSAData";
      StoredProcName = "ClusterPDSA_ByClusterNumber";
      SchemaName = "GCS";

      // Create Parameters
      InitParameters();

      // Create Data Columns
      InitDataColumns();
    }
    #endregion

   #region InitParameters Method
    /// <summary>
    /// Creates all the parameters for the stored procedure.
    /// </summary>
    protected override void InitParameters()
    {
      PDSADataParameter param;

      // Clear all parameters each time
      AllParameters.Clear();

      // Create each parameter object and add to Parameters Collection
      param = new PDSADataParameter();
      param.ParameterName = ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.ClusterNumber;
      param.DBType = DbType.Int32;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.PageNumber;
      param.DBType = DbType.Int32;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.PageSize;
      param.DBType = DbType.Int32;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.SortColumn;
      param.DBType = DbType.String;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.DescendingOrder;
      param.DBType = DbType.Boolean;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.RETURNVALUE;
      param.DBType = DbType.Int32;
      param.ParamDirection = ParameterDirection.ReturnValue;
      param.IsRefCursor = false;
      AllParameters.Add(param);

  
      AddReturnValueParameterToCollection();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes the Data Columns Collection for each field returned from the stored procedure.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSADataColumn dc;

      // Create each data column
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterUid, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_ClusterUid_Header", "Cluster Uid"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterTypeUid, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_ClusterTypeUid_Header", "Cluster Type Uid"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterNumber, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_ClusterNumber_Header", "Cluster Number"), false, typeof(int), DbType.Int32);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterName, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_ClusterName_Header", "Cluster Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.InsertName, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_InsertName_Header", "Insert Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.InsertDate, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_InsertDate_Header", "Insert Date"), false, typeof(DateTimeOffset), DbType.DateTimeOffset);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UpdateName, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_UpdateName_Header", "Update Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UpdateDate, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_UpdateDate_Header", "Update Date"), false, typeof(DateTimeOffset), DbType.DateTimeOffset);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ConcurrencyValue, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_ConcurrencyValue_Header", "Concurrency Value"), false, typeof(short), DbType.Int16);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.EntityId, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_EntityId_Header", "Entity Id"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.SiteUid, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_SiteUid_Header", "Site Uid"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CredentialDataLengthUid, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_CredentialDataLengthUid_Header", "Credential Data Length Uid"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TimeScheduleTypeUid, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_TimeScheduleTypeUid_Header", "Time Schedule Type Uid"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.BinaryResourceUid, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_BinaryResourceUid_Header", "Binary Resource Uid"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.IsActive, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_IsActive_Header", "Is Active"), false, typeof(bool), DbType.Boolean);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaStartDigit, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_AbaStartDigit_Header", "Aba Start Digit"), false, typeof(short), DbType.Int16);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaStopDigit, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_AbaStopDigit_Header", "Aba Stop Digit"), false, typeof(short), DbType.Int16);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaFoldOption, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_AbaFoldOption_Header", "Aba Fold Option"), false, typeof(bool), DbType.Boolean);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaClipOption, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_AbaClipOption_Header", "Aba Clip Option"), false, typeof(bool), DbType.Boolean);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.WiegandStartBit, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_WiegandStartBit_Header", "Wiegand Start Bit"), false, typeof(short), DbType.Int16);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.WiegandStopBit, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_WiegandStopBit_Header", "Wiegand Stop Bit"), false, typeof(short), DbType.Int16);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CardaxStartBit, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_CardaxStartBit_Header", "Cardax Start Bit"), false, typeof(short), DbType.Int16);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CardaxStopBit, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_CardaxStopBit_Header", "Cardax Stop Bit"), false, typeof(short), DbType.Int16);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_LockoutAfterInvalidAttempts_Header", "Lockout After Invalid Attempts"), false, typeof(short), DbType.Int16);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.LockoutDurationSeconds, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_LockoutDurationSeconds_Header", "Lockout Duration Seconds"), false, typeof(int), DbType.Int32);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessRuleOverrideTimeout, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_AccessRuleOverrideTimeout_Header", "Access Rule Override Timeout"), false, typeof(int), DbType.Int32);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UnlimitedCredentialTimeout, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_UnlimitedCredentialTimeout_Header", "Unlimited Credential Timeout"), false, typeof(int), DbType.Int32);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TimeZoneId, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_TimeZoneId_Header", "Time Zone Id"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_CrisisActivateInputOutputGroupUid_Header", "Crisis Activate Input Output Group Uid"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_CrisisResetInputOutputGroupUid_Header", "Crisis Reset Input Output Group Uid"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_AccessPortalLockedLedBehaviorModeUid_Header", "Access Portal Locked Led Behavior Mode Uid"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_AccessPortalUnlockedLedBehaviorModeUid_Header", "Access Portal Unlocked Led Behavior Mode Uid"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalTypeUid, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_AccessPortalTypeUid_Header", "Access Portal Type Uid"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TemplateAccessPortalUid, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_TemplateAccessPortalUid_Header", "Template Access Portal Uid"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CurrentTimeForCluster, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_CurrentTimeForCluster_Header", "Current Time For Cluster"), false, typeof(DateTimeOffset), DbType.DateTimeOffset);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterGroupId, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_ClusterGroupId_Header", "Cluster Group Id"), false, typeof(int), DbType.Int32);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TotalRowCount, GetResourceMessage("GCS_ClusterPDSA_ByClusterNumberPDSA_TotalRowCount_Header", "Total Row Count"), false, typeof(int), DbType.Int32);
      AllColumns.Add(dc);
    }
    #endregion

    #region EntityDataToParameterCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Parameters collection
    /// </summary>
    protected override void EntityDataToParameterCollection()
    {
      if (AllParameters.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.ClusterNumber).SetAsNull == false)
        AllParameters.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.ClusterNumber).Value = Entity.ClusterNumber;
      else
        AllParameters.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.ClusterNumber).Value = System.Data.SqlTypes.SqlInt32.Null;
      if (AllParameters.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.PageNumber).SetAsNull == false)
        AllParameters.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.PageNumber).Value = Entity.PageNumber;
      else
        AllParameters.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.PageNumber).Value = System.Data.SqlTypes.SqlInt32.Null;
      if (AllParameters.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.PageSize).SetAsNull == false)
        AllParameters.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.PageSize).Value = Entity.PageSize;
      else
        AllParameters.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.PageSize).Value = System.Data.SqlTypes.SqlInt32.Null;
      if (AllParameters.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.SortColumn).SetAsNull == false)
        AllParameters.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.SortColumn).Value = Entity.SortColumn;
      else
        AllParameters.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.SortColumn).Value = System.Data.SqlTypes.SqlChars.Null;
      if (AllParameters.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.DescendingOrder).SetAsNull == false)
        AllParameters.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.DescendingOrder).Value = Entity.DescendingOrder;
      else
        AllParameters.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.DescendingOrder).Value = System.Data.SqlTypes.SqlBoolean.Null;
    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterUid).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterUid).Value = Entity.ClusterUid;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterUid).Value = Guid.Empty;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterTypeUid).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterTypeUid).Value = Entity.ClusterTypeUid;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterTypeUid).Value = Guid.Empty;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterNumber).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterNumber).Value = Entity.ClusterNumber;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterNumber).Value = 0;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterName).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterName).Value = Entity.ClusterName;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterName).Value = string.Empty;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.InsertName).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.InsertName).Value = string.Empty;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.InsertDate).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.InsertDate).Value = DateTimeOffset.Now;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UpdateName).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UpdateName).Value = string.Empty;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UpdateDate).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UpdateDate).Value = DateTimeOffset.Now;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ConcurrencyValue).Value = 0;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.EntityId).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.EntityId).Value = Entity.EntityId;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.EntityId).Value = Guid.Empty;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.SiteUid).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.SiteUid).Value = Entity.SiteUid;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.SiteUid).Value = Guid.Empty;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CredentialDataLengthUid).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CredentialDataLengthUid).Value = Entity.CredentialDataLengthUid;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CredentialDataLengthUid).Value = Guid.Empty;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TimeScheduleTypeUid).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TimeScheduleTypeUid).Value = Entity.TimeScheduleTypeUid;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TimeScheduleTypeUid).Value = Guid.Empty;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.BinaryResourceUid).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.BinaryResourceUid).Value = Entity.BinaryResourceUid;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.BinaryResourceUid).Value = Guid.Empty;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.IsActive).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.IsActive).Value = Entity.IsActive;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.IsActive).Value = false;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaStartDigit).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaStartDigit).Value = Entity.AbaStartDigit;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaStartDigit).Value = 0;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaStopDigit).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaStopDigit).Value = Entity.AbaStopDigit;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaStopDigit).Value = 0;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaFoldOption).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaFoldOption).Value = Entity.AbaFoldOption;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaFoldOption).Value = false;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaClipOption).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaClipOption).Value = Entity.AbaClipOption;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaClipOption).Value = false;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.WiegandStartBit).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.WiegandStartBit).Value = Entity.WiegandStartBit;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.WiegandStartBit).Value = 0;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.WiegandStopBit).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.WiegandStopBit).Value = Entity.WiegandStopBit;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.WiegandStopBit).Value = 0;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CardaxStartBit).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CardaxStartBit).Value = Entity.CardaxStartBit;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CardaxStartBit).Value = 0;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CardaxStopBit).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CardaxStopBit).Value = Entity.CardaxStopBit;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CardaxStopBit).Value = 0;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts).Value = Entity.LockoutAfterInvalidAttempts;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts).Value = 0;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.LockoutDurationSeconds).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.LockoutDurationSeconds).Value = Entity.LockoutDurationSeconds;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.LockoutDurationSeconds).Value = 0;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessRuleOverrideTimeout).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessRuleOverrideTimeout).Value = Entity.AccessRuleOverrideTimeout;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessRuleOverrideTimeout).Value = 0;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UnlimitedCredentialTimeout).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UnlimitedCredentialTimeout).Value = Entity.UnlimitedCredentialTimeout;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UnlimitedCredentialTimeout).Value = 0;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TimeZoneId).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TimeZoneId).Value = Entity.TimeZoneId;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TimeZoneId).Value = string.Empty;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid).Value = Entity.CrisisActivateInputOutputGroupUid;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid).Value = Guid.Empty;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid).Value = Entity.CrisisResetInputOutputGroupUid;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid).Value = Guid.Empty;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid).Value = Entity.AccessPortalLockedLedBehaviorModeUid;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid).Value = Guid.Empty;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid).Value = Entity.AccessPortalUnlockedLedBehaviorModeUid;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid).Value = Guid.Empty;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalTypeUid).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalTypeUid).Value = Entity.AccessPortalTypeUid;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalTypeUid).Value = Guid.Empty;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TemplateAccessPortalUid).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TemplateAccessPortalUid).Value = Entity.TemplateAccessPortalUid;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TemplateAccessPortalUid).Value = Guid.Empty;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CurrentTimeForCluster).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CurrentTimeForCluster).Value = Entity.CurrentTimeForCluster;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CurrentTimeForCluster).Value = DateTimeOffset.Now;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterGroupId).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterGroupId).Value = Entity.ClusterGroupId;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterGroupId).Value = 0;
     
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TotalRowCount).SetAsNull == false)
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TotalRowCount).Value = Entity.TotalRowCount;
      else
        AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TotalRowCount).Value = 0;
     
    }
    #endregion

    #region OutputParametersToEntityData Method
    /// <summary>
    /// Moves the output parameters from the Parameters collection into the Entity class.
    /// </summary>
    protected override void OutputParametersToEntityData()
    {
      if (AllParameters.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.RETURNVALUE).IsValueNull == false)
        Entity.RETURNVALUE = AllParameters.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ParameterNames.RETURNVALUE).GetAsInteger();
      else
        Entity.RETURNVALUE = 0;
    }
    #endregion
    
    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterUid).IsNull == false)
        Entity.ClusterUid = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterUid).GetAsGuid();
      else
        Entity.ClusterUid = Guid.Empty;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterTypeUid).IsNull == false)
        Entity.ClusterTypeUid = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterTypeUid).GetAsGuid();
      else
        Entity.ClusterTypeUid = Guid.Empty;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterNumber).IsNull == false)
        Entity.ClusterNumber = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterNumber).GetAsInteger();
      else
        Entity.ClusterNumber = 0;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterName).IsNull == false)
        Entity.ClusterName = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterName).GetAsString();
      else
        Entity.ClusterName = string.Empty;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.InsertName).GetAsString();
      else
        Entity.InsertName = string.Empty;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
      else
        Entity.InsertDate = DateTimeOffset.Now;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UpdateName).GetAsString();
      else
        Entity.UpdateName = string.Empty;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UpdateDate).GetAsDateTimeOffset();
      else
        Entity.UpdateDate = DateTimeOffset.Now;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
      else
        Entity.ConcurrencyValue = 0;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.EntityId).IsNull == false)
        Entity.EntityId = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.EntityId).GetAsGuid();
      else
        Entity.EntityId = Guid.Empty;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.SiteUid).IsNull == false)
        Entity.SiteUid = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.SiteUid).GetAsGuid();
      else
        Entity.SiteUid = Guid.Empty;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CredentialDataLengthUid).IsNull == false)
        Entity.CredentialDataLengthUid = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CredentialDataLengthUid).GetAsGuid();
      else
        Entity.CredentialDataLengthUid = Guid.Empty;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TimeScheduleTypeUid).IsNull == false)
        Entity.TimeScheduleTypeUid = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TimeScheduleTypeUid).GetAsGuid();
      else
        Entity.TimeScheduleTypeUid = Guid.Empty;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.BinaryResourceUid).IsNull == false)
        Entity.BinaryResourceUid = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.BinaryResourceUid).GetAsGuid();
      else
        Entity.BinaryResourceUid = Guid.Empty;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.IsActive).IsNull == false)
        Entity.IsActive = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.IsActive).GetAsBool();
      else
        Entity.IsActive = false;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaStartDigit).IsNull == false)
        Entity.AbaStartDigit = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaStartDigit).GetAsShort();
      else
        Entity.AbaStartDigit = 0;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaStopDigit).IsNull == false)
        Entity.AbaStopDigit = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaStopDigit).GetAsShort();
      else
        Entity.AbaStopDigit = 0;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaFoldOption).IsNull == false)
        Entity.AbaFoldOption = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaFoldOption).GetAsBool();
      else
        Entity.AbaFoldOption = false;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaClipOption).IsNull == false)
        Entity.AbaClipOption = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaClipOption).GetAsBool();
      else
        Entity.AbaClipOption = false;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.WiegandStartBit).IsNull == false)
        Entity.WiegandStartBit = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.WiegandStartBit).GetAsShort();
      else
        Entity.WiegandStartBit = 0;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.WiegandStopBit).IsNull == false)
        Entity.WiegandStopBit = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.WiegandStopBit).GetAsShort();
      else
        Entity.WiegandStopBit = 0;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CardaxStartBit).IsNull == false)
        Entity.CardaxStartBit = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CardaxStartBit).GetAsShort();
      else
        Entity.CardaxStartBit = 0;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CardaxStopBit).IsNull == false)
        Entity.CardaxStopBit = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CardaxStopBit).GetAsShort();
      else
        Entity.CardaxStopBit = 0;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts).IsNull == false)
        Entity.LockoutAfterInvalidAttempts = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts).GetAsShort();
      else
        Entity.LockoutAfterInvalidAttempts = 0;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.LockoutDurationSeconds).IsNull == false)
        Entity.LockoutDurationSeconds = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.LockoutDurationSeconds).GetAsInteger();
      else
        Entity.LockoutDurationSeconds = 0;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessRuleOverrideTimeout).IsNull == false)
        Entity.AccessRuleOverrideTimeout = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessRuleOverrideTimeout).GetAsInteger();
      else
        Entity.AccessRuleOverrideTimeout = 0;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UnlimitedCredentialTimeout).IsNull == false)
        Entity.UnlimitedCredentialTimeout = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UnlimitedCredentialTimeout).GetAsInteger();
      else
        Entity.UnlimitedCredentialTimeout = 0;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TimeZoneId).IsNull == false)
        Entity.TimeZoneId = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TimeZoneId).GetAsString();
      else
        Entity.TimeZoneId = string.Empty;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid).IsNull == false)
        Entity.CrisisActivateInputOutputGroupUid = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid).GetAsGuid();
      else
        Entity.CrisisActivateInputOutputGroupUid = Guid.Empty;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid).IsNull == false)
        Entity.CrisisResetInputOutputGroupUid = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid).GetAsGuid();
      else
        Entity.CrisisResetInputOutputGroupUid = Guid.Empty;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid).IsNull == false)
        Entity.AccessPortalLockedLedBehaviorModeUid = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid).GetAsGuid();
      else
        Entity.AccessPortalLockedLedBehaviorModeUid = Guid.Empty;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid).IsNull == false)
        Entity.AccessPortalUnlockedLedBehaviorModeUid = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid).GetAsGuid();
      else
        Entity.AccessPortalUnlockedLedBehaviorModeUid = Guid.Empty;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalTypeUid).IsNull == false)
        Entity.AccessPortalTypeUid = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalTypeUid).GetAsGuid();
      else
        Entity.AccessPortalTypeUid = Guid.Empty;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TemplateAccessPortalUid).IsNull == false)
        Entity.TemplateAccessPortalUid = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TemplateAccessPortalUid).GetAsGuid();
      else
        Entity.TemplateAccessPortalUid = Guid.Empty;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CurrentTimeForCluster).IsNull == false)
        Entity.CurrentTimeForCluster = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CurrentTimeForCluster).GetAsDateTimeOffset();
      else
        Entity.CurrentTimeForCluster = DateTimeOffset.Now;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterGroupId).IsNull == false)
        Entity.ClusterGroupId = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterGroupId).GetAsInteger();
      else
        Entity.ClusterGroupId = 0;

      if (AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TotalRowCount).IsNull == false)
        Entity.TotalRowCount = AllColumns.GetByName(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TotalRowCount).GetAsInteger();
      else
        Entity.TotalRowCount = 0;

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>ClusterPDSA_ByClusterNumberPDSA</returns>
    public ClusterPDSA_ByClusterNumberPDSA CreateEntityFromDataRow(DataRow dr)
    {
      ClusterPDSA_ByClusterNumberPDSA entity = new ClusterPDSA_ByClusterNumberPDSA();

      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterUid))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterUid] != DBNull.Value)
          entity.ClusterUid = PDSAProperty.ConvertToGuid(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterUid]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterTypeUid))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterTypeUid] != DBNull.Value)
          entity.ClusterTypeUid = PDSAProperty.ConvertToGuid(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterTypeUid]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterNumber))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterNumber] != DBNull.Value)
          entity.ClusterNumber = Convert.ToInt32(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterNumber]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterName))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterName] != DBNull.Value)
          entity.ClusterName = PDSAString.ConvertToStringTrim(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterName]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.InsertName))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.InsertName] != DBNull.Value)
          entity.InsertName = PDSAString.ConvertToStringTrim(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.InsertName]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.InsertDate))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.InsertDate] != DBNull.Value)
          entity.InsertDate = GCS.Core.Common.Extensions.DateTimeExtensions.ToDateTimeOffset(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.InsertDate]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UpdateName))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UpdateName] != DBNull.Value)
          entity.UpdateName = PDSAString.ConvertToStringTrim(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UpdateName]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UpdateDate))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UpdateDate] != DBNull.Value)
          entity.UpdateDate = GCS.Core.Common.Extensions.DateTimeExtensions.ToDateTimeOffset(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UpdateDate]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ConcurrencyValue))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ConcurrencyValue] != DBNull.Value)
          entity.ConcurrencyValue = Convert.ToInt16(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ConcurrencyValue]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.EntityId))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.EntityId] != DBNull.Value)
          entity.EntityId = PDSAProperty.ConvertToGuid(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.EntityId]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.SiteUid))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.SiteUid] != DBNull.Value)
          entity.SiteUid = PDSAProperty.ConvertToGuid(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.SiteUid]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CredentialDataLengthUid))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CredentialDataLengthUid] != DBNull.Value)
          entity.CredentialDataLengthUid = PDSAProperty.ConvertToGuid(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CredentialDataLengthUid]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TimeScheduleTypeUid))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TimeScheduleTypeUid] != DBNull.Value)
          entity.TimeScheduleTypeUid = PDSAProperty.ConvertToGuid(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TimeScheduleTypeUid]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.BinaryResourceUid))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.BinaryResourceUid] != DBNull.Value)
          entity.BinaryResourceUid = PDSAProperty.ConvertToGuid(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.BinaryResourceUid]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.IsActive))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.IsActive] != DBNull.Value)
          entity.IsActive = Convert.ToBoolean(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.IsActive]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaStartDigit))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaStartDigit] != DBNull.Value)
          entity.AbaStartDigit = Convert.ToInt16(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaStartDigit]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaStopDigit))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaStopDigit] != DBNull.Value)
          entity.AbaStopDigit = Convert.ToInt16(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaStopDigit]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaFoldOption))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaFoldOption] != DBNull.Value)
          entity.AbaFoldOption = Convert.ToBoolean(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaFoldOption]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaClipOption))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaClipOption] != DBNull.Value)
          entity.AbaClipOption = Convert.ToBoolean(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AbaClipOption]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.WiegandStartBit))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.WiegandStartBit] != DBNull.Value)
          entity.WiegandStartBit = Convert.ToInt16(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.WiegandStartBit]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.WiegandStopBit))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.WiegandStopBit] != DBNull.Value)
          entity.WiegandStopBit = Convert.ToInt16(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.WiegandStopBit]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CardaxStartBit))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CardaxStartBit] != DBNull.Value)
          entity.CardaxStartBit = Convert.ToInt16(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CardaxStartBit]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CardaxStopBit))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CardaxStopBit] != DBNull.Value)
          entity.CardaxStopBit = Convert.ToInt16(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CardaxStopBit]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts] != DBNull.Value)
          entity.LockoutAfterInvalidAttempts = Convert.ToInt16(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.LockoutDurationSeconds))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.LockoutDurationSeconds] != DBNull.Value)
          entity.LockoutDurationSeconds = Convert.ToInt32(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.LockoutDurationSeconds]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessRuleOverrideTimeout))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessRuleOverrideTimeout] != DBNull.Value)
          entity.AccessRuleOverrideTimeout = Convert.ToInt32(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessRuleOverrideTimeout]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UnlimitedCredentialTimeout))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UnlimitedCredentialTimeout] != DBNull.Value)
          entity.UnlimitedCredentialTimeout = Convert.ToInt32(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.UnlimitedCredentialTimeout]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TimeZoneId))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TimeZoneId] != DBNull.Value)
          entity.TimeZoneId = PDSAString.ConvertToStringTrim(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TimeZoneId]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid] != DBNull.Value)
          entity.CrisisActivateInputOutputGroupUid = PDSAProperty.ConvertToGuid(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid] != DBNull.Value)
          entity.CrisisResetInputOutputGroupUid = PDSAProperty.ConvertToGuid(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid] != DBNull.Value)
          entity.AccessPortalLockedLedBehaviorModeUid = PDSAProperty.ConvertToGuid(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid] != DBNull.Value)
          entity.AccessPortalUnlockedLedBehaviorModeUid = PDSAProperty.ConvertToGuid(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalTypeUid))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalTypeUid] != DBNull.Value)
          entity.AccessPortalTypeUid = PDSAProperty.ConvertToGuid(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.AccessPortalTypeUid]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TemplateAccessPortalUid))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TemplateAccessPortalUid] != DBNull.Value)
          entity.TemplateAccessPortalUid = PDSAProperty.ConvertToGuid(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TemplateAccessPortalUid]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CurrentTimeForCluster))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CurrentTimeForCluster] != DBNull.Value)
          entity.CurrentTimeForCluster = GCS.Core.Common.Extensions.DateTimeExtensions.ToDateTimeOffset(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.CurrentTimeForCluster]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterGroupId))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterGroupId] != DBNull.Value)
          entity.ClusterGroupId = Convert.ToInt32(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.ClusterGroupId]);
      }
      if (dr.Table.Columns.Contains(ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TotalRowCount))
      {
        if (dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TotalRowCount] != DBNull.Value)
          entity.TotalRowCount = Convert.ToInt32(dr[ClusterPDSA_ByClusterNumberPDSAValidator.ColumnNames.TotalRowCount]);
      }
      entity.IsDirty = false;

      return entity;
    }
    #endregion

    #region ParameterNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the ClusterPDSA_ByClusterNumberPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ParameterNames
    {
    /// <summary>
    /// Returns '@ClusterNumber'
    /// </summary>
    public static string ClusterNumber = "@ClusterNumber";
    /// <summary>
    /// Returns '@PageNumber'
    /// </summary>
    public static string PageNumber = "@PageNumber";
    /// <summary>
    /// Returns '@PageSize'
    /// </summary>
    public static string PageSize = "@PageSize";
    /// <summary>
    /// Returns '@SortColumn'
    /// </summary>
    public static string SortColumn = "@SortColumn";
    /// <summary>
    /// Returns '@DescendingOrder'
    /// </summary>
    public static string DescendingOrder = "@DescendingOrder";
    /// <summary>
    /// Returns '@RETURN_VALUE'
    /// </summary>
    public static string RETURNVALUE = "@RETURN_VALUE";
    }
    #endregion
  }
}
