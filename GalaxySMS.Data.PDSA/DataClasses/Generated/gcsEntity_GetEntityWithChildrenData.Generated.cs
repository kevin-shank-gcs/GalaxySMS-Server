using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// This class calls the stored procedure gcsEntity_GetEntityWithChildrenPDSA
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public class gcsEntity_GetEntityWithChildrenPDSAData : PDSAStoredProcReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the gcsEntity_GetEntityWithChildrenPDSAData class
    /// </summary>
    public gcsEntity_GetEntityWithChildrenPDSAData() : base()
    {
      Entity = new gcsEntity_GetEntityWithChildrenPDSA();
      ValidatorObject = new  gcsEntity_GetEntityWithChildrenPDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the gcsEntity_GetEntityWithChildrenPDSAData class
    /// </summary>
    /// <param name="entity">An instance of a gcsEntity_GetEntityWithChildrenPDSA</param>
    public gcsEntity_GetEntityWithChildrenPDSAData(gcsEntity_GetEntityWithChildrenPDSA entity) : base()
    {
      Entity = entity;
      ValidatorObject = new gcsEntity_GetEntityWithChildrenPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the gcsEntity_GetEntityWithChildrenPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a gcsEntity_GetEntityWithChildrenPDSA</param>
    public gcsEntity_GetEntityWithChildrenPDSAData(PDSADataProvider dataProvider,
      gcsEntity_GetEntityWithChildrenPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new  gcsEntity_GetEntityWithChildrenPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the gcsEntity_GetEntityWithChildrenPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a gcsEntity_GetEntityWithChildrenPDSA</param>
    /// <param name="validator">An instance of a gcsEntity_GetEntityWithChildrenPDSAValidator</param>
    public gcsEntity_GetEntityWithChildrenPDSAData(PDSADataProvider dataProvider,
      gcsEntity_GetEntityWithChildrenPDSA entity, gcsEntity_GetEntityWithChildrenPDSAValidator validator)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Public Property
    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public gcsEntity_GetEntityWithChildrenPDSA Entity { get; set; }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "gcsEntity_GetEntityWithChildrenPDSAData";
      StoredProcName = "gcsEntity_GetEntityWithChildren";
      SchemaName = "GCS";

      // Create Parameters
      InitParameters();

      // Create Data Columns
      InitDataColumns();
    }
    #endregion

   #region InitParameters Method
    /// <summary>
    /// Creates all the parameters for the stored procedure.
    /// </summary>
    protected override void InitParameters()
    {
      PDSADataParameter param;

      // Clear all parameters each time
      AllParameters.Clear();

      // Create each parameter object and add to Parameters Collection
      param = new PDSADataParameter();
      param.ParameterName = gcsEntity_GetEntityWithChildrenPDSAValidator.ParameterNames.EntityId;
      param.DBType = DbType.Guid;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = gcsEntity_GetEntityWithChildrenPDSAValidator.ParameterNames.RETURNVALUE;
      param.DBType = DbType.Int32;
      param.ParamDirection = ParameterDirection.ReturnValue;
      param.IsRefCursor = false;
      AllParameters.Add(param);

  
      AddReturnValueParameterToCollection();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes the Data Columns Collection for each field returned from the stored procedure.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSADataColumn dc;

      // Create each data column
      dc = PDSADataColumn.CreateDataColumn(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.ParentEntityId, GetResourceMessage("GCS_gcsEntity_GetEntityWithChildrenPDSA_ParentEntityId_Header", "Parent Entity Id"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityId, GetResourceMessage("GCS_gcsEntity_GetEntityWithChildrenPDSA_EntityId_Header", "Entity Id"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityName, GetResourceMessage("GCS_gcsEntity_GetEntityWithChildrenPDSA_EntityName_Header", "Entity Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityDescription, GetResourceMessage("GCS_gcsEntity_GetEntityWithChildrenPDSA_EntityDescription_Header", "Entity Description"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityKey, GetResourceMessage("GCS_gcsEntity_GetEntityWithChildrenPDSA_EntityKey_Header", "Entity Key"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.IsDefault, GetResourceMessage("GCS_gcsEntity_GetEntityWithChildrenPDSA_IsDefault_Header", "Is Default"), false, typeof(bool), DbType.Boolean);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.IsActive, GetResourceMessage("GCS_gcsEntity_GetEntityWithChildrenPDSA_IsActive_Header", "Is Active"), false, typeof(bool), DbType.Boolean);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.InsertName, GetResourceMessage("GCS_gcsEntity_GetEntityWithChildrenPDSA_InsertName_Header", "Insert Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.InsertDate, GetResourceMessage("GCS_gcsEntity_GetEntityWithChildrenPDSA_InsertDate_Header", "Insert Date"), false, typeof(DateTimeOffset), DbType.DateTimeOffset);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.UpdateName, GetResourceMessage("GCS_gcsEntity_GetEntityWithChildrenPDSA_UpdateName_Header", "Update Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.UpdateDate, GetResourceMessage("GCS_gcsEntity_GetEntityWithChildrenPDSA_UpdateDate_Header", "Update Date"), false, typeof(DateTimeOffset), DbType.DateTimeOffset);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.ConcurrencyValue, GetResourceMessage("GCS_gcsEntity_GetEntityWithChildrenPDSA_ConcurrencyValue_Header", "Concurrency Value"), false, typeof(short), DbType.Int16);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.BinaryResourceUid, GetResourceMessage("GCS_gcsEntity_GetEntityWithChildrenPDSA_BinaryResourceUid_Header", "Binary Resource Uid"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.License, GetResourceMessage("GCS_gcsEntity_GetEntityWithChildrenPDSA_License_Header", "License"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.PublicKey, GetResourceMessage("GCS_gcsEntity_GetEntityWithChildrenPDSA_PublicKey_Header", "Public Key"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityType, GetResourceMessage("GCS_gcsEntity_GetEntityWithChildrenPDSA_EntityType_Header", "Entity Type"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.AutoMapTimeSchedules, GetResourceMessage("GCS_gcsEntity_GetEntityWithChildrenPDSA_AutoMapTimeSchedules_Header", "Auto Map Time Schedules"), false, typeof(bool), DbType.Boolean);
      AllColumns.Add(dc);
    }
    #endregion

    #region EntityDataToParameterCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Parameters collection
    /// </summary>
    protected override void EntityDataToParameterCollection()
    {
      if (AllParameters.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ParameterNames.EntityId).SetAsNull == false)
        AllParameters.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ParameterNames.EntityId).Value = Entity.EntityId;
      else
        AllParameters.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ParameterNames.EntityId).Value = System.Data.SqlTypes.SqlGuid.Null;
    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.ParentEntityId).SetAsNull == false)
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.ParentEntityId).Value = Entity.ParentEntityId;
      else
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.ParentEntityId).Value = Guid.Empty;
     
      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityId).SetAsNull == false)
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityId).Value = Entity.EntityId;
      else
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityId).Value = Guid.Empty;
     
      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityName).SetAsNull == false)
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityName).Value = Entity.EntityName;
      else
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityName).Value = string.Empty;
     
      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityDescription).SetAsNull == false)
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityDescription).Value = Entity.EntityDescription;
      else
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityDescription).Value = string.Empty;
     
      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityKey).SetAsNull == false)
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityKey).Value = Entity.EntityKey;
      else
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityKey).Value = string.Empty;
     
      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.IsDefault).SetAsNull == false)
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.IsDefault).Value = Entity.IsDefault;
      else
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.IsDefault).Value = false;
     
      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.IsActive).SetAsNull == false)
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.IsActive).Value = Entity.IsActive;
      else
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.IsActive).Value = false;
     
      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.InsertName).SetAsNull == false)
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      else
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.InsertName).Value = string.Empty;
     
      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.InsertDate).SetAsNull == false)
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      else
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.InsertDate).Value = DateTimeOffset.Now;
     
      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.UpdateName).SetAsNull == false)
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      else
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.UpdateName).Value = string.Empty;
     
      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.UpdateDate).SetAsNull == false)
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      else
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.UpdateDate).Value = DateTimeOffset.Now;
     
      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull == false)
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
      else
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.ConcurrencyValue).Value = 0;
     
      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.BinaryResourceUid).SetAsNull == false)
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.BinaryResourceUid).Value = Entity.BinaryResourceUid;
      else
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.BinaryResourceUid).Value = Guid.Empty;
     
      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.License).SetAsNull == false)
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.License).Value = Entity.License;
      else
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.License).Value = string.Empty;
     
      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.PublicKey).SetAsNull == false)
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.PublicKey).Value = Entity.PublicKey;
      else
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.PublicKey).Value = string.Empty;
     
      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityType).SetAsNull == false)
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityType).Value = Entity.EntityType;
      else
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityType).Value = string.Empty;
     
      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.AutoMapTimeSchedules).SetAsNull == false)
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.AutoMapTimeSchedules).Value = Entity.AutoMapTimeSchedules;
      else
        AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.AutoMapTimeSchedules).Value = false;
     
    }
    #endregion

    #region OutputParametersToEntityData Method
    /// <summary>
    /// Moves the output parameters from the Parameters collection into the Entity class.
    /// </summary>
    protected override void OutputParametersToEntityData()
    {
      if (AllParameters.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ParameterNames.RETURNVALUE).IsValueNull == false)
        Entity.RETURNVALUE = AllParameters.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ParameterNames.RETURNVALUE).GetAsInteger();
      else
        Entity.RETURNVALUE = 0;
    }
    #endregion
    
    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.ParentEntityId).IsNull == false)
        Entity.ParentEntityId = AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.ParentEntityId).GetAsGuid();
      else
        Entity.ParentEntityId = Guid.Empty;

      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityId).IsNull == false)
        Entity.EntityId = AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityId).GetAsGuid();
      else
        Entity.EntityId = Guid.Empty;

      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityName).IsNull == false)
        Entity.EntityName = AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityName).GetAsString();
      else
        Entity.EntityName = string.Empty;

      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityDescription).IsNull == false)
        Entity.EntityDescription = AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityDescription).GetAsString();
      else
        Entity.EntityDescription = string.Empty;

      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityKey).IsNull == false)
        Entity.EntityKey = AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityKey).GetAsString();
      else
        Entity.EntityKey = string.Empty;

      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.IsDefault).IsNull == false)
        Entity.IsDefault = AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.IsDefault).GetAsBool();
      else
        Entity.IsDefault = false;

      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.IsActive).IsNull == false)
        Entity.IsActive = AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.IsActive).GetAsBool();
      else
        Entity.IsActive = false;

      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.InsertName).GetAsString();
      else
        Entity.InsertName = string.Empty;

      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
      else
        Entity.InsertDate = DateTimeOffset.Now;

      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.UpdateName).GetAsString();
      else
        Entity.UpdateName = string.Empty;

      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.UpdateDate).GetAsDateTimeOffset();
      else
        Entity.UpdateDate = DateTimeOffset.Now;

      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
      else
        Entity.ConcurrencyValue = 0;

      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.BinaryResourceUid).IsNull == false)
        Entity.BinaryResourceUid = AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.BinaryResourceUid).GetAsGuid();
      else
        Entity.BinaryResourceUid = Guid.Empty;

      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.License).IsNull == false)
        Entity.License = AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.License).GetAsString();
      else
        Entity.License = string.Empty;

      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.PublicKey).IsNull == false)
        Entity.PublicKey = AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.PublicKey).GetAsString();
      else
        Entity.PublicKey = string.Empty;

      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityType).IsNull == false)
        Entity.EntityType = AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityType).GetAsString();
      else
        Entity.EntityType = string.Empty;

      if (AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.AutoMapTimeSchedules).IsNull == false)
        Entity.AutoMapTimeSchedules = AllColumns.GetByName(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.AutoMapTimeSchedules).GetAsBool();
      else
        Entity.AutoMapTimeSchedules = false;

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>gcsEntity_GetEntityWithChildrenPDSA</returns>
    public gcsEntity_GetEntityWithChildrenPDSA CreateEntityFromDataRow(DataRow dr)
    {
      gcsEntity_GetEntityWithChildrenPDSA entity = new gcsEntity_GetEntityWithChildrenPDSA();

      if (dr.Table.Columns.Contains(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.ParentEntityId))
      {
        if (dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.ParentEntityId] != DBNull.Value)
          entity.ParentEntityId = PDSAProperty.ConvertToGuid(dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.ParentEntityId]);
      }
      if (dr.Table.Columns.Contains(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityId))
      {
        if (dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityId] != DBNull.Value)
          entity.EntityId = PDSAProperty.ConvertToGuid(dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityId]);
      }
      if (dr.Table.Columns.Contains(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityName))
      {
        if (dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityName] != DBNull.Value)
          entity.EntityName = PDSAString.ConvertToStringTrim(dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityName]);
      }
      if (dr.Table.Columns.Contains(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityDescription))
      {
        if (dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityDescription] != DBNull.Value)
          entity.EntityDescription = PDSAString.ConvertToStringTrim(dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityDescription]);
      }
      if (dr.Table.Columns.Contains(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityKey))
      {
        if (dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityKey] != DBNull.Value)
          entity.EntityKey = PDSAString.ConvertToStringTrim(dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityKey]);
      }
      if (dr.Table.Columns.Contains(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.IsDefault))
      {
        if (dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.IsDefault] != DBNull.Value)
          entity.IsDefault = Convert.ToBoolean(dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.IsDefault]);
      }
      if (dr.Table.Columns.Contains(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.IsActive))
      {
        if (dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.IsActive] != DBNull.Value)
          entity.IsActive = Convert.ToBoolean(dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.IsActive]);
      }
      if (dr.Table.Columns.Contains(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.InsertName))
      {
        if (dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.InsertName] != DBNull.Value)
          entity.InsertName = PDSAString.ConvertToStringTrim(dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.InsertName]);
      }
      if (dr.Table.Columns.Contains(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.InsertDate))
      {
        if (dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.InsertDate] != DBNull.Value)
          entity.InsertDate = GCS.Core.Common.Extensions.DateTimeExtensions.ToDateTimeOffset(dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.InsertDate]);
      }
      if (dr.Table.Columns.Contains(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.UpdateName))
      {
        if (dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.UpdateName] != DBNull.Value)
          entity.UpdateName = PDSAString.ConvertToStringTrim(dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.UpdateName]);
      }
      if (dr.Table.Columns.Contains(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.UpdateDate))
      {
        if (dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.UpdateDate] != DBNull.Value)
          entity.UpdateDate = GCS.Core.Common.Extensions.DateTimeExtensions.ToDateTimeOffset(dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.UpdateDate]);
      }
      if (dr.Table.Columns.Contains(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.ConcurrencyValue))
      {
        if (dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.ConcurrencyValue] != DBNull.Value)
          entity.ConcurrencyValue = Convert.ToInt16(dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.ConcurrencyValue]);
      }
      if (dr.Table.Columns.Contains(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.BinaryResourceUid))
      {
        if (dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.BinaryResourceUid] != DBNull.Value)
          entity.BinaryResourceUid = PDSAProperty.ConvertToGuid(dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.BinaryResourceUid]);
      }
      if (dr.Table.Columns.Contains(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.License))
      {
        if (dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.License] != DBNull.Value)
          entity.License = PDSAString.ConvertToStringTrim(dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.License]);
      }
      if (dr.Table.Columns.Contains(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.PublicKey))
      {
        if (dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.PublicKey] != DBNull.Value)
          entity.PublicKey = PDSAString.ConvertToStringTrim(dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.PublicKey]);
      }
      if (dr.Table.Columns.Contains(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityType))
      {
        if (dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityType] != DBNull.Value)
          entity.EntityType = PDSAString.ConvertToStringTrim(dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.EntityType]);
      }
      if (dr.Table.Columns.Contains(gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.AutoMapTimeSchedules))
      {
        if (dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.AutoMapTimeSchedules] != DBNull.Value)
          entity.AutoMapTimeSchedules = Convert.ToBoolean(dr[gcsEntity_GetEntityWithChildrenPDSAValidator.ColumnNames.AutoMapTimeSchedules]);
      }
      entity.IsDirty = false;

      return entity;
    }
    #endregion

    #region ParameterNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the gcsEntity_GetEntityWithChildrenPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ParameterNames
    {
    /// <summary>
    /// Returns '@EntityId'
    /// </summary>
    public static string EntityId = "@EntityId";
    /// <summary>
    /// Returns '@RETURN_VALUE'
    /// </summary>
    public static string RETURNVALUE = "@RETURN_VALUE";
    }
    #endregion
  }
}
