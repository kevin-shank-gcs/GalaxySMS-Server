using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Select data from the AccessPortal_PanelLoadDataPDSA view.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class AccessPortal_PanelLoadDataPDSAData : PDSADataClassReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the AccessPortal_PanelLoadDataPDSAData class
    /// </summary>
    public AccessPortal_PanelLoadDataPDSAData() : base()
    {
      Entity = new AccessPortal_PanelLoadDataPDSA();
      ValidatorObject = new AccessPortal_PanelLoadDataPDSAValidator(Entity);

      Init();
    }
    
    /// <summary>
    /// Constructor for the AccessPortal_PanelLoadDataPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a AccessPortal_PanelLoadDataPDSA</param>
    public AccessPortal_PanelLoadDataPDSAData(PDSADataProvider dataProvider,
      AccessPortal_PanelLoadDataPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new AccessPortal_PanelLoadDataPDSAValidator(Entity);

      Init();
    }
     
    /// <summary>
    /// Constructor for the AccessPortal_PanelLoadDataPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a AccessPortal_PanelLoadDataPDSA</param>
    /// <param name="validator">An instance of a AccessPortal_PanelLoadDataPDSAValidator</param>
    public AccessPortal_PanelLoadDataPDSAData(PDSADataProvider dataProvider,
      AccessPortal_PanelLoadDataPDSA entity, AccessPortal_PanelLoadDataPDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// A Custom SelectFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a WHERE statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum WhereFilters
    {
      /// <summary>
      /// No WhereFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom WhereFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'AccessPortalUid' WhereFilter
      /// </summary>
      AccessPortalUid
      ,
      /// <summary>
      /// 'ClusterUid' WhereFilter
      /// </summary>
      ClusterUid
      ,
      /// <summary>
      /// 'GalaxyHardwareModuleUid' WhereFilter
      /// </summary>
      GalaxyHardwareModuleUid
      ,
      /// <summary>
      /// 'GalaxyInterfaceBoardSectionNodeUid' WhereFilter
      /// </summary>
      GalaxyInterfaceBoardSectionNodeUid
      ,
      /// <summary>
      /// 'GalaxyInterfaceBoardSectionUid' WhereFilter
      /// </summary>
      GalaxyInterfaceBoardSectionUid
      ,
      /// <summary>
      /// 'GalaxyInterfaceBoardUid' WhereFilter
      /// </summary>
      GalaxyInterfaceBoardUid
      ,
      /// <summary>
      /// 'GalaxyPanelUid' WhereFilter
      /// </summary>
      GalaxyPanelUid
      ,
      /// <summary>
      /// 'LikePortalName' WhereFilter
      /// </summary>
      LikePortalName
      ,
      /// <summary>
      /// 'PortalName' WhereFilter
      /// </summary>
      PortalName
    }

    /// <summary>
    /// Enumeration for selecting an ORDER BY statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum OrderByFilters
    {
      /// <summary>
      /// No OrderByFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'HardwareAddress' OrderByFilter
      /// </summary>
      HardwareAddress
      ,
      /// <summary>
      /// 'PortalName' OrderByFilter
      /// </summary>
      PortalName
    }
    
    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }
    /// <summary>
    /// Get/Set a WHERE clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public WhereFilters WhereFilter { get; set; }
    /// <summary>
    /// Get/Set a ORDER BY clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public OrderByFilters OrderByFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Public Property Entity Class
        private AccessPortal_PanelLoadDataPDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public AccessPortal_PanelLoadDataPDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "AccessPortal_PanelLoadDataPDSAData";
      DBObjectName = "GCS.AccessPortal_PanelLoadData";
      SchemaName = "GCS";
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;
      
      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes all of the Data Columns with valid data for each field in the table.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyHardwareModuleUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PortalName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalTypeDescription);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ReaderTypeName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelDataFormatCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DataFormatName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardSectionMode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardSectionModeDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalPanelModelTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalCpuTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeModel);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockDelay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockDuration);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RecloseDuration);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AllowPassbackAccess);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RequireTwoValidCredentials);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockOnREX);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressIllegalOpenLog);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressOpenTooLongLog);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressClosedLog);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressREXLog);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockWhenDoorCloses);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.EnableDuress);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupNotify);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupCanDisable);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IgnoreNotInSystem);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ReaderSendsHeartbeat);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsEnabled);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PropertiesLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AutoForgivePassbackCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AutoForgivePassbackDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredModeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredModeDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ContactSupervisionCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ContactSupervisionDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DeferToServerCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DeferToServerDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NoServerReplyCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NoServerReplyDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockPushButtonCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockPushButtonDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MultiFactorMode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MultiFactorModeDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorControlTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorControlTypeDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorRelayBoardNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorRelaySectionNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackIntoAreaNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackFromAreaNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.FreeAccessScheduleNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.FreeAccessScheduleDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CrisisFreeAccessScheduleNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CrisisFreeAccessScheduleDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredScheduleNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredScheduleDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableForcedOpenScheduleNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableForcedOpenScheduleDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableOpenTooLongScheduleNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableOpenTooLongScheduleDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxiliaryOutputScheduleNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxiliaryOutputScheduleDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ActivationDelay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ActivationDuration);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerAccessGranted);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerDuress);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerForcedOpen);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerInvalidAttempt);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerOpenTooLong);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerPassbackViolation);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ModeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ModeDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ScheduleNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ScheduleDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenIOGroupNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenIOGroupOffset);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongIOGroupNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongIOGroupOffset);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptIOGroupNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptIOGroupOffset);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationIOGroupNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationIOGroupOffset);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressIOGroupNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressIOGroupOffset);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatIOGroupNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatIOGroupOffset);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedIOGroupNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedIOGroupOffset);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupIOGroupNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupIOGroupOffset);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockedByIOGroupNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockedByIOGroupNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber1);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber2);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber3);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.HardwareAddressLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber4);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackIntoAreaLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackFromAreaLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.FreeAccessSchLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CrisisFreeAccessSchLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredSchLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableForcedOpenSchLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableOpenTooLongSchLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxOutputSchLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxOutputLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2SchLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenAlertLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongAlertLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptAlertLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationAlertLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressAlertLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatAlertLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedAlertLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupAlertLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockedByIogLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockedByIogLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog1LastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog2LastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog3LastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog4LastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsConnected);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenAlertEventIsActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongAlertEventIsActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptAlertEventIsActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationAlertEventIsActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressAlertEventIsActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatAlertEventIsActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedAlertEventIsActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupAlertEventIsActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockedByAlertEventIsActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockedByAlertEventIsActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm1AlertEventIsActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm2AlertEventIsActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm3AlertEventIsActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm4AlertEventIsActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalUid).Value = Entity.AccessPortalUid;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalUid).SetAsNull == true)
        Entity.AccessPortalUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid).Value = Entity.ClusterUid;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid).SetAsNull == true)
        Entity.ClusterUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid).Value = Entity.GalaxyPanelUid;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid).SetAsNull == true)
        Entity.GalaxyPanelUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).Value = Entity.GalaxyInterfaceBoardUid;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).SetAsNull == true)
        Entity.GalaxyInterfaceBoardUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).Value = Entity.GalaxyInterfaceBoardSectionUid;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).SetAsNull == true)
        Entity.GalaxyInterfaceBoardSectionUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).Value = Entity.GalaxyHardwareModuleUid;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).SetAsNull == true)
        Entity.GalaxyHardwareModuleUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).Value = Entity.GalaxyInterfaceBoardSectionNodeUid;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).SetAsNull == true)
        Entity.GalaxyInterfaceBoardSectionNodeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PortalName).Value = Entity.PortalName;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PortalName).SetAsNull == true)
        Entity.PortalName = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId).Value = Entity.ClusterGroupId;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId).SetAsNull == true)
        Entity.ClusterGroupId = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber).Value = Entity.ClusterNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber).SetAsNull == true)
        Entity.ClusterNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber).Value = Entity.PanelNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber).SetAsNull == true)
        Entity.PanelNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber).Value = Entity.BoardNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber).SetAsNull == true)
        Entity.BoardNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber).Value = Entity.SectionNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber).SetAsNull == true)
        Entity.SectionNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber).Value = Entity.ModuleNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber).SetAsNull == true)
        Entity.ModuleNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber).Value = Entity.NodeNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber).SetAsNull == true)
        Entity.NodeNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorNumber).Value = Entity.DoorNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorNumber).SetAsNull == true)
        Entity.DoorNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalTypeDescription).Value = Entity.AccessPortalTypeDescription;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalTypeDescription).SetAsNull == true)
        Entity.AccessPortalTypeDescription = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ReaderTypeName).Value = Entity.ReaderTypeName;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ReaderTypeName).SetAsNull == true)
        Entity.ReaderTypeName = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelDataFormatCode).Value = Entity.PanelDataFormatCode;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelDataFormatCode).SetAsNull == true)
        Entity.PanelDataFormatCode = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DataFormatName).Value = Entity.DataFormatName;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DataFormatName).SetAsNull == true)
        Entity.DataFormatName = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardSectionMode).Value = Entity.AccessPortalBoardSectionMode;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardSectionMode).SetAsNull == true)
        Entity.AccessPortalBoardSectionMode = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardSectionModeDisplay).Value = Entity.AccessPortalBoardSectionModeDisplay;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardSectionModeDisplay).SetAsNull == true)
        Entity.AccessPortalBoardSectionModeDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalPanelModelTypeCode).Value = Entity.AccessPortalPanelModelTypeCode;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalPanelModelTypeCode).SetAsNull == true)
        Entity.AccessPortalPanelModelTypeCode = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalCpuTypeCode).Value = Entity.AccessPortalCpuTypeCode;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalCpuTypeCode).SetAsNull == true)
        Entity.AccessPortalCpuTypeCode = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeModel).Value = Entity.AccessPortalBoardTypeModel;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeModel).SetAsNull == true)
        Entity.AccessPortalBoardTypeModel = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeTypeCode).Value = Entity.AccessPortalBoardTypeTypeCode;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeTypeCode).SetAsNull == true)
        Entity.AccessPortalBoardTypeTypeCode = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeDisplay).Value = Entity.AccessPortalBoardTypeDisplay;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeDisplay).SetAsNull == true)
        Entity.AccessPortalBoardTypeDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockDelay).Value = Entity.UnlockDelay;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockDelay).SetAsNull == true)
        Entity.UnlockDelay = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockDuration).Value = Entity.UnlockDuration;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockDuration).SetAsNull == true)
        Entity.UnlockDuration = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RecloseDuration).Value = Entity.RecloseDuration;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RecloseDuration).SetAsNull == true)
        Entity.RecloseDuration = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AllowPassbackAccess).Value = Entity.AllowPassbackAccess;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AllowPassbackAccess).SetAsNull == true)
        Entity.AllowPassbackAccess = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RequireTwoValidCredentials).Value = Entity.RequireTwoValidCredentials;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RequireTwoValidCredentials).SetAsNull == true)
        Entity.RequireTwoValidCredentials = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockOnREX).Value = Entity.UnlockOnREX;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockOnREX).SetAsNull == true)
        Entity.UnlockOnREX = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressIllegalOpenLog).Value = Entity.SuppressIllegalOpenLog;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressIllegalOpenLog).SetAsNull == true)
        Entity.SuppressIllegalOpenLog = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressOpenTooLongLog).Value = Entity.SuppressOpenTooLongLog;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressOpenTooLongLog).SetAsNull == true)
        Entity.SuppressOpenTooLongLog = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressClosedLog).Value = Entity.SuppressClosedLog;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressClosedLog).SetAsNull == true)
        Entity.SuppressClosedLog = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressREXLog).Value = Entity.SuppressREXLog;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressREXLog).SetAsNull == true)
        Entity.SuppressREXLog = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs).Value = Entity.GenerateDoorContactChangeLogs;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs).SetAsNull == true)
        Entity.GenerateDoorContactChangeLogs = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockWhenDoorCloses).Value = Entity.LockWhenDoorCloses;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockWhenDoorCloses).SetAsNull == true)
        Entity.LockWhenDoorCloses = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.EnableDuress).Value = Entity.EnableDuress;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.EnableDuress).SetAsNull == true)
        Entity.EnableDuress = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupNotify).Value = Entity.DoorGroupNotify;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupNotify).SetAsNull == true)
        Entity.DoorGroupNotify = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupCanDisable).Value = Entity.DoorGroupCanDisable;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupCanDisable).SetAsNull == true)
        Entity.DoorGroupCanDisable = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay).Value = Entity.RelayOneOnDuringArmDelay;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay).SetAsNull == true)
        Entity.RelayOneOnDuringArmDelay = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock).Value = Entity.RequireValidAccessForAutoUnlock;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock).SetAsNull == true)
        Entity.RequireValidAccessForAutoUnlock = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen).Value = Entity.ValidAccessRequiresDoorOpen;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen).SetAsNull == true)
        Entity.ValidAccessRequiresDoorOpen = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount).Value = Entity.DontDecrementLimitedSwipeExpireCount;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount).SetAsNull == true)
        Entity.DontDecrementLimitedSwipeExpireCount = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IgnoreNotInSystem).Value = Entity.IgnoreNotInSystem;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IgnoreNotInSystem).SetAsNull == true)
        Entity.IgnoreNotInSystem = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ReaderSendsHeartbeat).Value = Entity.ReaderSendsHeartbeat;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ReaderSendsHeartbeat).SetAsNull == true)
        Entity.ReaderSendsHeartbeat = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsEnabled).Value = Entity.IsEnabled;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsEnabled).SetAsNull == true)
        Entity.IsEnabled = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PropertiesLastUpdated).Value = Entity.PropertiesLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PropertiesLastUpdated).SetAsNull == true)
        Entity.PropertiesLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AutoForgivePassbackCode).Value = Entity.AutoForgivePassbackCode;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AutoForgivePassbackCode).SetAsNull == true)
        Entity.AutoForgivePassbackCode = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AutoForgivePassbackDisplay).Value = Entity.AutoForgivePassbackDisplay;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AutoForgivePassbackDisplay).SetAsNull == true)
        Entity.AutoForgivePassbackDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredModeCode).Value = Entity.PinRequiredModeCode;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredModeCode).SetAsNull == true)
        Entity.PinRequiredModeCode = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredModeDisplay).Value = Entity.PinRequiredModeDisplay;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredModeDisplay).SetAsNull == true)
        Entity.PinRequiredModeDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ContactSupervisionCode).Value = Entity.ContactSupervisionCode;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ContactSupervisionCode).SetAsNull == true)
        Entity.ContactSupervisionCode = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ContactSupervisionDisplay).Value = Entity.ContactSupervisionDisplay;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ContactSupervisionDisplay).SetAsNull == true)
        Entity.ContactSupervisionDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DeferToServerCode).Value = Entity.DeferToServerCode;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DeferToServerCode).SetAsNull == true)
        Entity.DeferToServerCode = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DeferToServerDisplay).Value = Entity.DeferToServerDisplay;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DeferToServerDisplay).SetAsNull == true)
        Entity.DeferToServerDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NoServerReplyCode).Value = Entity.NoServerReplyCode;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NoServerReplyCode).SetAsNull == true)
        Entity.NoServerReplyCode = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NoServerReplyDisplay).Value = Entity.NoServerReplyDisplay;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NoServerReplyDisplay).SetAsNull == true)
        Entity.NoServerReplyDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockPushButtonCode).Value = Entity.LockPushButtonCode;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockPushButtonCode).SetAsNull == true)
        Entity.LockPushButtonCode = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockPushButtonDisplay).Value = Entity.LockPushButtonDisplay;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockPushButtonDisplay).SetAsNull == true)
        Entity.LockPushButtonDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MultiFactorMode).Value = Entity.MultiFactorMode;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MultiFactorMode).SetAsNull == true)
        Entity.MultiFactorMode = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MultiFactorModeDisplay).Value = Entity.MultiFactorModeDisplay;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MultiFactorModeDisplay).SetAsNull == true)
        Entity.MultiFactorModeDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorControlTypeCode).Value = Entity.ElevatorControlTypeCode;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorControlTypeCode).SetAsNull == true)
        Entity.ElevatorControlTypeCode = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorControlTypeDisplay).Value = Entity.ElevatorControlTypeDisplay;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorControlTypeDisplay).SetAsNull == true)
        Entity.ElevatorControlTypeDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorRelayBoardNumber).Value = Entity.ElevatorRelayBoardNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorRelayBoardNumber).SetAsNull == true)
        Entity.ElevatorRelayBoardNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorRelaySectionNumber).Value = Entity.ElevatorRelaySectionNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorRelaySectionNumber).SetAsNull == true)
        Entity.ElevatorRelaySectionNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackIntoAreaNumber).Value = Entity.PassbackIntoAreaNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackIntoAreaNumber).SetAsNull == true)
        Entity.PassbackIntoAreaNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackFromAreaNumber).Value = Entity.PassbackFromAreaNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackFromAreaNumber).SetAsNull == true)
        Entity.PassbackFromAreaNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.FreeAccessScheduleNumber).Value = Entity.FreeAccessScheduleNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.FreeAccessScheduleNumber).SetAsNull == true)
        Entity.FreeAccessScheduleNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.FreeAccessScheduleDisplay).Value = Entity.FreeAccessScheduleDisplay;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.FreeAccessScheduleDisplay).SetAsNull == true)
        Entity.FreeAccessScheduleDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CrisisFreeAccessScheduleNumber).Value = Entity.CrisisFreeAccessScheduleNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CrisisFreeAccessScheduleNumber).SetAsNull == true)
        Entity.CrisisFreeAccessScheduleNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CrisisFreeAccessScheduleDisplay).Value = Entity.CrisisFreeAccessScheduleDisplay;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CrisisFreeAccessScheduleDisplay).SetAsNull == true)
        Entity.CrisisFreeAccessScheduleDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredScheduleNumber).Value = Entity.PinRequiredScheduleNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredScheduleNumber).SetAsNull == true)
        Entity.PinRequiredScheduleNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredScheduleDisplay).Value = Entity.PinRequiredScheduleDisplay;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredScheduleDisplay).SetAsNull == true)
        Entity.PinRequiredScheduleDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableForcedOpenScheduleNumber).Value = Entity.DisableForcedOpenScheduleNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableForcedOpenScheduleNumber).SetAsNull == true)
        Entity.DisableForcedOpenScheduleNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableForcedOpenScheduleDisplay).Value = Entity.DisableForcedOpenScheduleDisplay;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableForcedOpenScheduleDisplay).SetAsNull == true)
        Entity.DisableForcedOpenScheduleDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableOpenTooLongScheduleNumber).Value = Entity.DisableOpenTooLongScheduleNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableOpenTooLongScheduleNumber).SetAsNull == true)
        Entity.DisableOpenTooLongScheduleNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableOpenTooLongScheduleDisplay).Value = Entity.DisableOpenTooLongScheduleDisplay;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableOpenTooLongScheduleDisplay).SetAsNull == true)
        Entity.DisableOpenTooLongScheduleDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxiliaryOutputScheduleNumber).Value = Entity.AuxiliaryOutputScheduleNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxiliaryOutputScheduleNumber).SetAsNull == true)
        Entity.AuxiliaryOutputScheduleNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxiliaryOutputScheduleDisplay).Value = Entity.AuxiliaryOutputScheduleDisplay;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxiliaryOutputScheduleDisplay).SetAsNull == true)
        Entity.AuxiliaryOutputScheduleDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ActivationDelay).Value = Entity.Relay2ActivationDelay;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ActivationDelay).SetAsNull == true)
        Entity.Relay2ActivationDelay = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ActivationDuration).Value = Entity.Relay2ActivationDuration;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ActivationDuration).SetAsNull == true)
        Entity.Relay2ActivationDuration = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerAccessGranted).Value = Entity.Relay2TriggerAccessGranted;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerAccessGranted).SetAsNull == true)
        Entity.Relay2TriggerAccessGranted = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerDuress).Value = Entity.Relay2TriggerDuress;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerDuress).SetAsNull == true)
        Entity.Relay2TriggerDuress = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerForcedOpen).Value = Entity.Relay2TriggerForcedOpen;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerForcedOpen).SetAsNull == true)
        Entity.Relay2TriggerForcedOpen = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerInvalidAttempt).Value = Entity.Relay2TriggerInvalidAttempt;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerInvalidAttempt).SetAsNull == true)
        Entity.Relay2TriggerInvalidAttempt = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerOpenTooLong).Value = Entity.Relay2TriggerOpenTooLong;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerOpenTooLong).SetAsNull == true)
        Entity.Relay2TriggerOpenTooLong = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerPassbackViolation).Value = Entity.Relay2TriggerPassbackViolation;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerPassbackViolation).SetAsNull == true)
        Entity.Relay2TriggerPassbackViolation = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ModeCode).Value = Entity.Relay2ModeCode;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ModeCode).SetAsNull == true)
        Entity.Relay2ModeCode = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ModeDisplay).Value = Entity.Relay2ModeDisplay;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ModeDisplay).SetAsNull == true)
        Entity.Relay2ModeDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ScheduleNumber).Value = Entity.Relay2ScheduleNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ScheduleNumber).SetAsNull == true)
        Entity.Relay2ScheduleNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ScheduleDisplay).Value = Entity.Relay2ScheduleDisplay;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ScheduleDisplay).SetAsNull == true)
        Entity.Relay2ScheduleDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenIOGroupNumber).Value = Entity.ForcedOpenIOGroupNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenIOGroupNumber).SetAsNull == true)
        Entity.ForcedOpenIOGroupNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenIOGroupOffset).Value = Entity.ForcedOpenIOGroupOffset;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenIOGroupOffset).SetAsNull == true)
        Entity.ForcedOpenIOGroupOffset = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongIOGroupNumber).Value = Entity.OpenTooLongIOGroupNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongIOGroupNumber).SetAsNull == true)
        Entity.OpenTooLongIOGroupNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongIOGroupOffset).Value = Entity.OpenTooLongIOGroupOffset;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongIOGroupOffset).SetAsNull == true)
        Entity.OpenTooLongIOGroupOffset = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptIOGroupNumber).Value = Entity.InvalidAccessAttemptIOGroupNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptIOGroupNumber).SetAsNull == true)
        Entity.InvalidAccessAttemptIOGroupNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptIOGroupOffset).Value = Entity.InvalidAccessAttemptIOGroupOffset;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptIOGroupOffset).SetAsNull == true)
        Entity.InvalidAccessAttemptIOGroupOffset = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationIOGroupNumber).Value = Entity.PassbackViolationIOGroupNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationIOGroupNumber).SetAsNull == true)
        Entity.PassbackViolationIOGroupNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationIOGroupOffset).Value = Entity.PassbackViolationIOGroupOffset;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationIOGroupOffset).SetAsNull == true)
        Entity.PassbackViolationIOGroupOffset = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressIOGroupNumber).Value = Entity.DuressIOGroupNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressIOGroupNumber).SetAsNull == true)
        Entity.DuressIOGroupNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressIOGroupOffset).Value = Entity.DuressIOGroupOffset;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressIOGroupOffset).SetAsNull == true)
        Entity.DuressIOGroupOffset = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatIOGroupNumber).Value = Entity.MissedHeartbeatIOGroupNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatIOGroupNumber).SetAsNull == true)
        Entity.MissedHeartbeatIOGroupNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatIOGroupOffset).Value = Entity.MissedHeartbeatIOGroupOffset;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatIOGroupOffset).SetAsNull == true)
        Entity.MissedHeartbeatIOGroupOffset = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedIOGroupNumber).Value = Entity.AccessGrantedIOGroupNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedIOGroupNumber).SetAsNull == true)
        Entity.AccessGrantedIOGroupNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedIOGroupOffset).Value = Entity.AccessGrantedIOGroupOffset;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedIOGroupOffset).SetAsNull == true)
        Entity.AccessGrantedIOGroupOffset = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupIOGroupNumber).Value = Entity.DoorGroupIOGroupNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupIOGroupNumber).SetAsNull == true)
        Entity.DoorGroupIOGroupNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupIOGroupOffset).Value = Entity.DoorGroupIOGroupOffset;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupIOGroupOffset).SetAsNull == true)
        Entity.DoorGroupIOGroupOffset = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockedByIOGroupNumber).Value = Entity.LockedByIOGroupNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockedByIOGroupNumber).SetAsNull == true)
        Entity.LockedByIOGroupNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockedByIOGroupNumber).Value = Entity.UnlockedByIOGroupNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockedByIOGroupNumber).SetAsNull == true)
        Entity.UnlockedByIOGroupNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber1).Value = Entity.DisarmIOGroupNumber1;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber1).SetAsNull == true)
        Entity.DisarmIOGroupNumber1 = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber2).Value = Entity.DisarmIOGroupNumber2;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber2).SetAsNull == true)
        Entity.DisarmIOGroupNumber2 = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber3).Value = Entity.DisarmIOGroupNumber3;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber3).SetAsNull == true)
        Entity.DisarmIOGroupNumber3 = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.HardwareAddressLastUpdated).Value = Entity.HardwareAddressLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.HardwareAddressLastUpdated).SetAsNull == true)
        Entity.HardwareAddressLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber4).Value = Entity.DisarmIOGroupNumber4;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber4).SetAsNull == true)
        Entity.DisarmIOGroupNumber4 = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackIntoAreaLastUpdated).Value = Entity.PassbackIntoAreaLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackIntoAreaLastUpdated).SetAsNull == true)
        Entity.PassbackIntoAreaLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalLastUpdated).Value = Entity.AccessPortalLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalLastUpdated).SetAsNull == true)
        Entity.AccessPortalLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackFromAreaLastUpdated).Value = Entity.PassbackFromAreaLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackFromAreaLastUpdated).SetAsNull == true)
        Entity.PassbackFromAreaLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.FreeAccessSchLastUpdated).Value = Entity.FreeAccessSchLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.FreeAccessSchLastUpdated).SetAsNull == true)
        Entity.FreeAccessSchLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CrisisFreeAccessSchLastUpdated).Value = Entity.CrisisFreeAccessSchLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CrisisFreeAccessSchLastUpdated).SetAsNull == true)
        Entity.CrisisFreeAccessSchLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredSchLastUpdated).Value = Entity.PinRequiredSchLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredSchLastUpdated).SetAsNull == true)
        Entity.PinRequiredSchLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableForcedOpenSchLastUpdated).Value = Entity.DisableForcedOpenSchLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableForcedOpenSchLastUpdated).SetAsNull == true)
        Entity.DisableForcedOpenSchLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableOpenTooLongSchLastUpdated).Value = Entity.DisableOpenTooLongSchLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableOpenTooLongSchLastUpdated).SetAsNull == true)
        Entity.DisableOpenTooLongSchLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxOutputSchLastUpdated).Value = Entity.AuxOutputSchLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxOutputSchLastUpdated).SetAsNull == true)
        Entity.AuxOutputSchLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxOutputLastUpdated).Value = Entity.AuxOutputLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxOutputLastUpdated).SetAsNull == true)
        Entity.AuxOutputLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2SchLastUpdated).Value = Entity.Relay2SchLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2SchLastUpdated).SetAsNull == true)
        Entity.Relay2SchLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenAlertLastUpdated).Value = Entity.ForcedOpenAlertLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenAlertLastUpdated).SetAsNull == true)
        Entity.ForcedOpenAlertLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongAlertLastUpdated).Value = Entity.OpenTooLongAlertLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongAlertLastUpdated).SetAsNull == true)
        Entity.OpenTooLongAlertLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptAlertLastUpdated).Value = Entity.InvalidAccessAttemptAlertLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptAlertLastUpdated).SetAsNull == true)
        Entity.InvalidAccessAttemptAlertLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationAlertLastUpdated).Value = Entity.PassbackViolationAlertLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationAlertLastUpdated).SetAsNull == true)
        Entity.PassbackViolationAlertLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressAlertLastUpdated).Value = Entity.DuressAlertLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressAlertLastUpdated).SetAsNull == true)
        Entity.DuressAlertLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatAlertLastUpdated).Value = Entity.MissedHeartbeatAlertLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatAlertLastUpdated).SetAsNull == true)
        Entity.MissedHeartbeatAlertLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedAlertLastUpdated).Value = Entity.AccessGrantedAlertLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedAlertLastUpdated).SetAsNull == true)
        Entity.AccessGrantedAlertLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupAlertLastUpdated).Value = Entity.DoorGroupAlertLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupAlertLastUpdated).SetAsNull == true)
        Entity.DoorGroupAlertLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockedByIogLastUpdated).Value = Entity.UnlockedByIogLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockedByIogLastUpdated).SetAsNull == true)
        Entity.UnlockedByIogLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockedByIogLastUpdated).Value = Entity.LockedByIogLastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockedByIogLastUpdated).SetAsNull == true)
        Entity.LockedByIogLastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog1LastUpdated).Value = Entity.DisarmIog1LastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog1LastUpdated).SetAsNull == true)
        Entity.DisarmIog1LastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog2LastUpdated).Value = Entity.DisarmIog2LastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog2LastUpdated).SetAsNull == true)
        Entity.DisarmIog2LastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog3LastUpdated).Value = Entity.DisarmIog3LastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog3LastUpdated).SetAsNull == true)
        Entity.DisarmIog3LastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog4LastUpdated).Value = Entity.DisarmIog4LastUpdated;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog4LastUpdated).SetAsNull == true)
        Entity.DisarmIog4LastUpdated = null;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber).Value = Entity.CpuNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber).SetAsNull == true)
        Entity.CpuNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuUid).Value = Entity.CpuUid;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuUid).SetAsNull == true)
        Entity.CpuUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress).Value = Entity.ServerAddress;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress).SetAsNull == true)
        Entity.ServerAddress = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsConnected).Value = Entity.IsConnected;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsConnected).SetAsNull == true)
        Entity.IsConnected = 0;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenAlertEventIsActive).Value = Entity.ForcedOpenAlertEventIsActive;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenAlertEventIsActive).SetAsNull == true)
        Entity.ForcedOpenAlertEventIsActive = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongAlertEventIsActive).Value = Entity.OpenTooLongAlertEventIsActive;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongAlertEventIsActive).SetAsNull == true)
        Entity.OpenTooLongAlertEventIsActive = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptAlertEventIsActive).Value = Entity.InvalidAccessAttemptAlertEventIsActive;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptAlertEventIsActive).SetAsNull == true)
        Entity.InvalidAccessAttemptAlertEventIsActive = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationAlertEventIsActive).Value = Entity.PassbackViolationAlertEventIsActive;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationAlertEventIsActive).SetAsNull == true)
        Entity.PassbackViolationAlertEventIsActive = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressAlertEventIsActive).Value = Entity.DuressAlertEventIsActive;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressAlertEventIsActive).SetAsNull == true)
        Entity.DuressAlertEventIsActive = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatAlertEventIsActive).Value = Entity.MissedHeartbeatAlertEventIsActive;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatAlertEventIsActive).SetAsNull == true)
        Entity.MissedHeartbeatAlertEventIsActive = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedAlertEventIsActive).Value = Entity.AccessGrantedAlertEventIsActive;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedAlertEventIsActive).SetAsNull == true)
        Entity.AccessGrantedAlertEventIsActive = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupAlertEventIsActive).Value = Entity.DoorGroupAlertEventIsActive;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupAlertEventIsActive).SetAsNull == true)
        Entity.DoorGroupAlertEventIsActive = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockedByAlertEventIsActive).Value = Entity.UnlockedByAlertEventIsActive;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockedByAlertEventIsActive).SetAsNull == true)
        Entity.UnlockedByAlertEventIsActive = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockedByAlertEventIsActive).Value = Entity.LockedByAlertEventIsActive;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockedByAlertEventIsActive).SetAsNull == true)
        Entity.LockedByAlertEventIsActive = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm1AlertEventIsActive).Value = Entity.Disarm1AlertEventIsActive;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm1AlertEventIsActive).SetAsNull == true)
        Entity.Disarm1AlertEventIsActive = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm2AlertEventIsActive).Value = Entity.Disarm2AlertEventIsActive;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm2AlertEventIsActive).SetAsNull == true)
        Entity.Disarm2AlertEventIsActive = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm3AlertEventIsActive).Value = Entity.Disarm3AlertEventIsActive;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm3AlertEventIsActive).SetAsNull == true)
        Entity.Disarm3AlertEventIsActive = false;
      ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm4AlertEventIsActive).Value = Entity.Disarm4AlertEventIsActive;
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm4AlertEventIsActive).SetAsNull == true)
        Entity.Disarm4AlertEventIsActive = false;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalUid).IsNull == false)
        Entity.AccessPortalUid = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalUid).GetAsGuid();
      else
        Entity.AccessPortalUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalUid, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid).IsNull == false)
        Entity.ClusterUid = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid).GetAsGuid();
      else
        Entity.ClusterUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid).IsNull == false)
        Entity.GalaxyPanelUid = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid).GetAsGuid();
      else
        Entity.GalaxyPanelUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).IsNull == false)
        Entity.GalaxyInterfaceBoardUid = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).GetAsGuid();
      else
        Entity.GalaxyInterfaceBoardUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).IsNull == false)
        Entity.GalaxyInterfaceBoardSectionUid = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).GetAsGuid();
      else
        Entity.GalaxyInterfaceBoardSectionUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).IsNull == false)
        Entity.GalaxyHardwareModuleUid = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).GetAsGuid();
      else
        Entity.GalaxyHardwareModuleUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyHardwareModuleUid, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).IsNull == false)
        Entity.GalaxyInterfaceBoardSectionNodeUid = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).GetAsGuid();
      else
        Entity.GalaxyInterfaceBoardSectionNodeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PortalName).IsNull == false)
        Entity.PortalName = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PortalName).GetAsString();
      else
        Entity.PortalName = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PortalName, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PortalName).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId).IsNull == false)
        Entity.ClusterGroupId = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId).GetAsInteger();
      else
        Entity.ClusterGroupId = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber).IsNull == false)
        Entity.ClusterNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber).GetAsInteger();
      else
        Entity.ClusterNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber).IsNull == false)
        Entity.PanelNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber).GetAsInteger();
      else
        Entity.PanelNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber).IsNull == false)
        Entity.BoardNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber).GetAsShort();
      else
        Entity.BoardNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber).IsNull == false)
        Entity.SectionNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber).GetAsShort();
      else
        Entity.SectionNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber).IsNull == false)
        Entity.ModuleNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber).GetAsShort();
      else
        Entity.ModuleNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber).IsNull == false)
        Entity.NodeNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber).GetAsShort();
      else
        Entity.NodeNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorNumber).IsNull == false)
        Entity.DoorNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorNumber).GetAsShort();
      else
        Entity.DoorNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalTypeDescription).IsNull == false)
        Entity.AccessPortalTypeDescription = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalTypeDescription).GetAsString();
      else
        Entity.AccessPortalTypeDescription = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalTypeDescription, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalTypeDescription).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ReaderTypeName).IsNull == false)
        Entity.ReaderTypeName = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ReaderTypeName).GetAsString();
      else
        Entity.ReaderTypeName = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ReaderTypeName, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ReaderTypeName).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelDataFormatCode).IsNull == false)
        Entity.PanelDataFormatCode = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelDataFormatCode).GetAsInteger();
      else
        Entity.PanelDataFormatCode = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelDataFormatCode, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PanelDataFormatCode).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DataFormatName).IsNull == false)
        Entity.DataFormatName = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DataFormatName).GetAsString();
      else
        Entity.DataFormatName = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DataFormatName, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DataFormatName).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardSectionMode).IsNull == false)
        Entity.AccessPortalBoardSectionMode = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardSectionMode).GetAsShort();
      else
        Entity.AccessPortalBoardSectionMode = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardSectionMode, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardSectionMode).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardSectionModeDisplay).IsNull == false)
        Entity.AccessPortalBoardSectionModeDisplay = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardSectionModeDisplay).GetAsString();
      else
        Entity.AccessPortalBoardSectionModeDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardSectionModeDisplay, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardSectionModeDisplay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalPanelModelTypeCode).IsNull == false)
        Entity.AccessPortalPanelModelTypeCode = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalPanelModelTypeCode).GetAsString();
      else
        Entity.AccessPortalPanelModelTypeCode = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalPanelModelTypeCode, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalPanelModelTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalCpuTypeCode).IsNull == false)
        Entity.AccessPortalCpuTypeCode = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalCpuTypeCode).GetAsString();
      else
        Entity.AccessPortalCpuTypeCode = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalCpuTypeCode, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalCpuTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeModel).IsNull == false)
        Entity.AccessPortalBoardTypeModel = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeModel).GetAsString();
      else
        Entity.AccessPortalBoardTypeModel = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeModel, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeModel).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeTypeCode).IsNull == false)
        Entity.AccessPortalBoardTypeTypeCode = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeTypeCode).GetAsShort();
      else
        Entity.AccessPortalBoardTypeTypeCode = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeTypeCode, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeDisplay).IsNull == false)
        Entity.AccessPortalBoardTypeDisplay = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeDisplay).GetAsString();
      else
        Entity.AccessPortalBoardTypeDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeDisplay, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalBoardTypeDisplay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockDelay).IsNull == false)
        Entity.UnlockDelay = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockDelay).GetAsInteger();
      else
        Entity.UnlockDelay = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockDelay, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockDelay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockDuration).IsNull == false)
        Entity.UnlockDuration = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockDuration).GetAsInteger();
      else
        Entity.UnlockDuration = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockDuration, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockDuration).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RecloseDuration).IsNull == false)
        Entity.RecloseDuration = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RecloseDuration).GetAsInteger();
      else
        Entity.RecloseDuration = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RecloseDuration, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RecloseDuration).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AllowPassbackAccess).IsNull == false)
        Entity.AllowPassbackAccess = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AllowPassbackAccess).GetAsBool();
      else
        Entity.AllowPassbackAccess = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AllowPassbackAccess, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AllowPassbackAccess).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RequireTwoValidCredentials).IsNull == false)
        Entity.RequireTwoValidCredentials = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RequireTwoValidCredentials).GetAsBool();
      else
        Entity.RequireTwoValidCredentials = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RequireTwoValidCredentials, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RequireTwoValidCredentials).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockOnREX).IsNull == false)
        Entity.UnlockOnREX = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockOnREX).GetAsBool();
      else
        Entity.UnlockOnREX = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockOnREX, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockOnREX).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressIllegalOpenLog).IsNull == false)
        Entity.SuppressIllegalOpenLog = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressIllegalOpenLog).GetAsBool();
      else
        Entity.SuppressIllegalOpenLog = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressIllegalOpenLog, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressIllegalOpenLog).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressOpenTooLongLog).IsNull == false)
        Entity.SuppressOpenTooLongLog = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressOpenTooLongLog).GetAsBool();
      else
        Entity.SuppressOpenTooLongLog = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressOpenTooLongLog, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressOpenTooLongLog).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressClosedLog).IsNull == false)
        Entity.SuppressClosedLog = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressClosedLog).GetAsBool();
      else
        Entity.SuppressClosedLog = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressClosedLog, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressClosedLog).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressREXLog).IsNull == false)
        Entity.SuppressREXLog = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressREXLog).GetAsBool();
      else
        Entity.SuppressREXLog = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressREXLog, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.SuppressREXLog).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs).IsNull == false)
        Entity.GenerateDoorContactChangeLogs = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs).GetAsBool();
      else
        Entity.GenerateDoorContactChangeLogs = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockWhenDoorCloses).IsNull == false)
        Entity.LockWhenDoorCloses = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockWhenDoorCloses).GetAsBool();
      else
        Entity.LockWhenDoorCloses = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockWhenDoorCloses, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockWhenDoorCloses).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.EnableDuress).IsNull == false)
        Entity.EnableDuress = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.EnableDuress).GetAsBool();
      else
        Entity.EnableDuress = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.EnableDuress, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.EnableDuress).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupNotify).IsNull == false)
        Entity.DoorGroupNotify = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupNotify).GetAsBool();
      else
        Entity.DoorGroupNotify = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupNotify, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupNotify).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupCanDisable).IsNull == false)
        Entity.DoorGroupCanDisable = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupCanDisable).GetAsBool();
      else
        Entity.DoorGroupCanDisable = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupCanDisable, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupCanDisable).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay).IsNull == false)
        Entity.RelayOneOnDuringArmDelay = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay).GetAsBool();
      else
        Entity.RelayOneOnDuringArmDelay = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock).IsNull == false)
        Entity.RequireValidAccessForAutoUnlock = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock).GetAsBool();
      else
        Entity.RequireValidAccessForAutoUnlock = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen).IsNull == false)
        Entity.ValidAccessRequiresDoorOpen = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen).GetAsBool();
      else
        Entity.ValidAccessRequiresDoorOpen = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount).IsNull == false)
        Entity.DontDecrementLimitedSwipeExpireCount = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount).GetAsBool();
      else
        Entity.DontDecrementLimitedSwipeExpireCount = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IgnoreNotInSystem).IsNull == false)
        Entity.IgnoreNotInSystem = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IgnoreNotInSystem).GetAsBool();
      else
        Entity.IgnoreNotInSystem = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IgnoreNotInSystem, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IgnoreNotInSystem).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ReaderSendsHeartbeat).IsNull == false)
        Entity.ReaderSendsHeartbeat = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ReaderSendsHeartbeat).GetAsBool();
      else
        Entity.ReaderSendsHeartbeat = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ReaderSendsHeartbeat, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ReaderSendsHeartbeat).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsEnabled).IsNull == false)
        Entity.IsEnabled = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsEnabled).GetAsBool();
      else
        Entity.IsEnabled = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsEnabled, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsEnabled).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PropertiesLastUpdated).IsNull == false)
        Entity.PropertiesLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PropertiesLastUpdated).GetAsDateTimeOffset();
      else
        Entity.PropertiesLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PropertiesLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PropertiesLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AutoForgivePassbackCode).IsNull == false)
        Entity.AutoForgivePassbackCode = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AutoForgivePassbackCode).GetAsShort();
      else
        Entity.AutoForgivePassbackCode = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AutoForgivePassbackCode, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AutoForgivePassbackCode).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AutoForgivePassbackDisplay).IsNull == false)
        Entity.AutoForgivePassbackDisplay = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AutoForgivePassbackDisplay).GetAsString();
      else
        Entity.AutoForgivePassbackDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AutoForgivePassbackDisplay, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AutoForgivePassbackDisplay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredModeCode).IsNull == false)
        Entity.PinRequiredModeCode = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredModeCode).GetAsShort();
      else
        Entity.PinRequiredModeCode = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredModeCode, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredModeCode).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredModeDisplay).IsNull == false)
        Entity.PinRequiredModeDisplay = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredModeDisplay).GetAsString();
      else
        Entity.PinRequiredModeDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredModeDisplay, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredModeDisplay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ContactSupervisionCode).IsNull == false)
        Entity.ContactSupervisionCode = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ContactSupervisionCode).GetAsShort();
      else
        Entity.ContactSupervisionCode = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ContactSupervisionCode, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ContactSupervisionCode).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ContactSupervisionDisplay).IsNull == false)
        Entity.ContactSupervisionDisplay = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ContactSupervisionDisplay).GetAsString();
      else
        Entity.ContactSupervisionDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ContactSupervisionDisplay, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ContactSupervisionDisplay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DeferToServerCode).IsNull == false)
        Entity.DeferToServerCode = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DeferToServerCode).GetAsShort();
      else
        Entity.DeferToServerCode = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DeferToServerCode, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DeferToServerCode).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DeferToServerDisplay).IsNull == false)
        Entity.DeferToServerDisplay = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DeferToServerDisplay).GetAsString();
      else
        Entity.DeferToServerDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DeferToServerDisplay, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DeferToServerDisplay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NoServerReplyCode).IsNull == false)
        Entity.NoServerReplyCode = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NoServerReplyCode).GetAsShort();
      else
        Entity.NoServerReplyCode = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NoServerReplyCode, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NoServerReplyCode).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NoServerReplyDisplay).IsNull == false)
        Entity.NoServerReplyDisplay = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NoServerReplyDisplay).GetAsString();
      else
        Entity.NoServerReplyDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NoServerReplyDisplay, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.NoServerReplyDisplay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockPushButtonCode).IsNull == false)
        Entity.LockPushButtonCode = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockPushButtonCode).GetAsShort();
      else
        Entity.LockPushButtonCode = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockPushButtonCode, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockPushButtonCode).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockPushButtonDisplay).IsNull == false)
        Entity.LockPushButtonDisplay = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockPushButtonDisplay).GetAsString();
      else
        Entity.LockPushButtonDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockPushButtonDisplay, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockPushButtonDisplay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MultiFactorMode).IsNull == false)
        Entity.MultiFactorMode = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MultiFactorMode).GetAsShort();
      else
        Entity.MultiFactorMode = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MultiFactorMode, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MultiFactorMode).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MultiFactorModeDisplay).IsNull == false)
        Entity.MultiFactorModeDisplay = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MultiFactorModeDisplay).GetAsString();
      else
        Entity.MultiFactorModeDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MultiFactorModeDisplay, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MultiFactorModeDisplay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorControlTypeCode).IsNull == false)
        Entity.ElevatorControlTypeCode = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorControlTypeCode).GetAsShort();
      else
        Entity.ElevatorControlTypeCode = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorControlTypeCode, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorControlTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorControlTypeDisplay).IsNull == false)
        Entity.ElevatorControlTypeDisplay = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorControlTypeDisplay).GetAsString();
      else
        Entity.ElevatorControlTypeDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorControlTypeDisplay, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorControlTypeDisplay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorRelayBoardNumber).IsNull == false)
        Entity.ElevatorRelayBoardNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorRelayBoardNumber).GetAsShort();
      else
        Entity.ElevatorRelayBoardNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorRelayBoardNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorRelayBoardNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorRelaySectionNumber).IsNull == false)
        Entity.ElevatorRelaySectionNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorRelaySectionNumber).GetAsShort();
      else
        Entity.ElevatorRelaySectionNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorRelaySectionNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ElevatorRelaySectionNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackIntoAreaNumber).IsNull == false)
        Entity.PassbackIntoAreaNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackIntoAreaNumber).GetAsInteger();
      else
        Entity.PassbackIntoAreaNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackIntoAreaNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackIntoAreaNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackFromAreaNumber).IsNull == false)
        Entity.PassbackFromAreaNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackFromAreaNumber).GetAsInteger();
      else
        Entity.PassbackFromAreaNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackFromAreaNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackFromAreaNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.FreeAccessScheduleNumber).IsNull == false)
        Entity.FreeAccessScheduleNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.FreeAccessScheduleNumber).GetAsInteger();
      else
        Entity.FreeAccessScheduleNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.FreeAccessScheduleNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.FreeAccessScheduleNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.FreeAccessScheduleDisplay).IsNull == false)
        Entity.FreeAccessScheduleDisplay = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.FreeAccessScheduleDisplay).GetAsString();
      else
        Entity.FreeAccessScheduleDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.FreeAccessScheduleDisplay, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.FreeAccessScheduleDisplay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CrisisFreeAccessScheduleNumber).IsNull == false)
        Entity.CrisisFreeAccessScheduleNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CrisisFreeAccessScheduleNumber).GetAsInteger();
      else
        Entity.CrisisFreeAccessScheduleNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CrisisFreeAccessScheduleNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CrisisFreeAccessScheduleNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CrisisFreeAccessScheduleDisplay).IsNull == false)
        Entity.CrisisFreeAccessScheduleDisplay = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CrisisFreeAccessScheduleDisplay).GetAsString();
      else
        Entity.CrisisFreeAccessScheduleDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CrisisFreeAccessScheduleDisplay, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CrisisFreeAccessScheduleDisplay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredScheduleNumber).IsNull == false)
        Entity.PinRequiredScheduleNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredScheduleNumber).GetAsInteger();
      else
        Entity.PinRequiredScheduleNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredScheduleNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredScheduleNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredScheduleDisplay).IsNull == false)
        Entity.PinRequiredScheduleDisplay = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredScheduleDisplay).GetAsString();
      else
        Entity.PinRequiredScheduleDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredScheduleDisplay, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredScheduleDisplay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableForcedOpenScheduleNumber).IsNull == false)
        Entity.DisableForcedOpenScheduleNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableForcedOpenScheduleNumber).GetAsInteger();
      else
        Entity.DisableForcedOpenScheduleNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableForcedOpenScheduleNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableForcedOpenScheduleNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableForcedOpenScheduleDisplay).IsNull == false)
        Entity.DisableForcedOpenScheduleDisplay = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableForcedOpenScheduleDisplay).GetAsString();
      else
        Entity.DisableForcedOpenScheduleDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableForcedOpenScheduleDisplay, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableForcedOpenScheduleDisplay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableOpenTooLongScheduleNumber).IsNull == false)
        Entity.DisableOpenTooLongScheduleNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableOpenTooLongScheduleNumber).GetAsInteger();
      else
        Entity.DisableOpenTooLongScheduleNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableOpenTooLongScheduleNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableOpenTooLongScheduleNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableOpenTooLongScheduleDisplay).IsNull == false)
        Entity.DisableOpenTooLongScheduleDisplay = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableOpenTooLongScheduleDisplay).GetAsString();
      else
        Entity.DisableOpenTooLongScheduleDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableOpenTooLongScheduleDisplay, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableOpenTooLongScheduleDisplay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxiliaryOutputScheduleNumber).IsNull == false)
        Entity.AuxiliaryOutputScheduleNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxiliaryOutputScheduleNumber).GetAsInteger();
      else
        Entity.AuxiliaryOutputScheduleNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxiliaryOutputScheduleNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxiliaryOutputScheduleNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxiliaryOutputScheduleDisplay).IsNull == false)
        Entity.AuxiliaryOutputScheduleDisplay = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxiliaryOutputScheduleDisplay).GetAsString();
      else
        Entity.AuxiliaryOutputScheduleDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxiliaryOutputScheduleDisplay, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxiliaryOutputScheduleDisplay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ActivationDelay).IsNull == false)
        Entity.Relay2ActivationDelay = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ActivationDelay).GetAsInteger();
      else
        Entity.Relay2ActivationDelay = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ActivationDelay, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ActivationDelay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ActivationDuration).IsNull == false)
        Entity.Relay2ActivationDuration = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ActivationDuration).GetAsInteger();
      else
        Entity.Relay2ActivationDuration = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ActivationDuration, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ActivationDuration).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerAccessGranted).IsNull == false)
        Entity.Relay2TriggerAccessGranted = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerAccessGranted).GetAsBool();
      else
        Entity.Relay2TriggerAccessGranted = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerAccessGranted, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerAccessGranted).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerDuress).IsNull == false)
        Entity.Relay2TriggerDuress = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerDuress).GetAsBool();
      else
        Entity.Relay2TriggerDuress = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerDuress, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerDuress).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerForcedOpen).IsNull == false)
        Entity.Relay2TriggerForcedOpen = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerForcedOpen).GetAsBool();
      else
        Entity.Relay2TriggerForcedOpen = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerForcedOpen, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerForcedOpen).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerInvalidAttempt).IsNull == false)
        Entity.Relay2TriggerInvalidAttempt = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerInvalidAttempt).GetAsBool();
      else
        Entity.Relay2TriggerInvalidAttempt = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerInvalidAttempt, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerInvalidAttempt).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerOpenTooLong).IsNull == false)
        Entity.Relay2TriggerOpenTooLong = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerOpenTooLong).GetAsBool();
      else
        Entity.Relay2TriggerOpenTooLong = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerOpenTooLong, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerOpenTooLong).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerPassbackViolation).IsNull == false)
        Entity.Relay2TriggerPassbackViolation = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerPassbackViolation).GetAsBool();
      else
        Entity.Relay2TriggerPassbackViolation = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerPassbackViolation, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2TriggerPassbackViolation).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ModeCode).IsNull == false)
        Entity.Relay2ModeCode = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ModeCode).GetAsShort();
      else
        Entity.Relay2ModeCode = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ModeCode, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ModeCode).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ModeDisplay).IsNull == false)
        Entity.Relay2ModeDisplay = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ModeDisplay).GetAsString();
      else
        Entity.Relay2ModeDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ModeDisplay, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ModeDisplay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ScheduleNumber).IsNull == false)
        Entity.Relay2ScheduleNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ScheduleNumber).GetAsInteger();
      else
        Entity.Relay2ScheduleNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ScheduleNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ScheduleNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ScheduleDisplay).IsNull == false)
        Entity.Relay2ScheduleDisplay = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ScheduleDisplay).GetAsString();
      else
        Entity.Relay2ScheduleDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ScheduleDisplay, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2ScheduleDisplay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenIOGroupNumber).IsNull == false)
        Entity.ForcedOpenIOGroupNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenIOGroupNumber).GetAsInteger();
      else
        Entity.ForcedOpenIOGroupNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenIOGroupNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenIOGroupNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenIOGroupOffset).IsNull == false)
        Entity.ForcedOpenIOGroupOffset = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenIOGroupOffset).GetAsShort();
      else
        Entity.ForcedOpenIOGroupOffset = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenIOGroupOffset, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenIOGroupOffset).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongIOGroupNumber).IsNull == false)
        Entity.OpenTooLongIOGroupNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongIOGroupNumber).GetAsInteger();
      else
        Entity.OpenTooLongIOGroupNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongIOGroupNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongIOGroupNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongIOGroupOffset).IsNull == false)
        Entity.OpenTooLongIOGroupOffset = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongIOGroupOffset).GetAsShort();
      else
        Entity.OpenTooLongIOGroupOffset = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongIOGroupOffset, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongIOGroupOffset).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptIOGroupNumber).IsNull == false)
        Entity.InvalidAccessAttemptIOGroupNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptIOGroupNumber).GetAsInteger();
      else
        Entity.InvalidAccessAttemptIOGroupNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptIOGroupNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptIOGroupNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptIOGroupOffset).IsNull == false)
        Entity.InvalidAccessAttemptIOGroupOffset = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptIOGroupOffset).GetAsShort();
      else
        Entity.InvalidAccessAttemptIOGroupOffset = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptIOGroupOffset, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptIOGroupOffset).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationIOGroupNumber).IsNull == false)
        Entity.PassbackViolationIOGroupNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationIOGroupNumber).GetAsInteger();
      else
        Entity.PassbackViolationIOGroupNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationIOGroupNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationIOGroupNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationIOGroupOffset).IsNull == false)
        Entity.PassbackViolationIOGroupOffset = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationIOGroupOffset).GetAsShort();
      else
        Entity.PassbackViolationIOGroupOffset = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationIOGroupOffset, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationIOGroupOffset).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressIOGroupNumber).IsNull == false)
        Entity.DuressIOGroupNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressIOGroupNumber).GetAsInteger();
      else
        Entity.DuressIOGroupNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressIOGroupNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressIOGroupNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressIOGroupOffset).IsNull == false)
        Entity.DuressIOGroupOffset = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressIOGroupOffset).GetAsShort();
      else
        Entity.DuressIOGroupOffset = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressIOGroupOffset, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressIOGroupOffset).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatIOGroupNumber).IsNull == false)
        Entity.MissedHeartbeatIOGroupNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatIOGroupNumber).GetAsInteger();
      else
        Entity.MissedHeartbeatIOGroupNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatIOGroupNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatIOGroupNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatIOGroupOffset).IsNull == false)
        Entity.MissedHeartbeatIOGroupOffset = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatIOGroupOffset).GetAsShort();
      else
        Entity.MissedHeartbeatIOGroupOffset = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatIOGroupOffset, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatIOGroupOffset).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedIOGroupNumber).IsNull == false)
        Entity.AccessGrantedIOGroupNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedIOGroupNumber).GetAsInteger();
      else
        Entity.AccessGrantedIOGroupNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedIOGroupNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedIOGroupNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedIOGroupOffset).IsNull == false)
        Entity.AccessGrantedIOGroupOffset = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedIOGroupOffset).GetAsShort();
      else
        Entity.AccessGrantedIOGroupOffset = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedIOGroupOffset, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedIOGroupOffset).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupIOGroupNumber).IsNull == false)
        Entity.DoorGroupIOGroupNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupIOGroupNumber).GetAsInteger();
      else
        Entity.DoorGroupIOGroupNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupIOGroupNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupIOGroupNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupIOGroupOffset).IsNull == false)
        Entity.DoorGroupIOGroupOffset = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupIOGroupOffset).GetAsShort();
      else
        Entity.DoorGroupIOGroupOffset = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupIOGroupOffset, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupIOGroupOffset).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockedByIOGroupNumber).IsNull == false)
        Entity.LockedByIOGroupNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockedByIOGroupNumber).GetAsInteger();
      else
        Entity.LockedByIOGroupNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockedByIOGroupNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockedByIOGroupNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockedByIOGroupNumber).IsNull == false)
        Entity.UnlockedByIOGroupNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockedByIOGroupNumber).GetAsInteger();
      else
        Entity.UnlockedByIOGroupNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockedByIOGroupNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockedByIOGroupNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber1).IsNull == false)
        Entity.DisarmIOGroupNumber1 = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber1).GetAsInteger();
      else
        Entity.DisarmIOGroupNumber1 = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber1, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber1).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber2).IsNull == false)
        Entity.DisarmIOGroupNumber2 = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber2).GetAsInteger();
      else
        Entity.DisarmIOGroupNumber2 = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber2, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber2).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber3).IsNull == false)
        Entity.DisarmIOGroupNumber3 = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber3).GetAsInteger();
      else
        Entity.DisarmIOGroupNumber3 = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber3, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber3).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.HardwareAddressLastUpdated).IsNull == false)
        Entity.HardwareAddressLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.HardwareAddressLastUpdated).GetAsDateTimeOffset();
      else
        Entity.HardwareAddressLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.HardwareAddressLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.HardwareAddressLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber4).IsNull == false)
        Entity.DisarmIOGroupNumber4 = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber4).GetAsInteger();
      else
        Entity.DisarmIOGroupNumber4 = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber4, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIOGroupNumber4).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackIntoAreaLastUpdated).IsNull == false)
        Entity.PassbackIntoAreaLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackIntoAreaLastUpdated).GetAsDateTimeOffset();
      else
        Entity.PassbackIntoAreaLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackIntoAreaLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackIntoAreaLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalLastUpdated).IsNull == false)
        Entity.AccessPortalLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalLastUpdated).GetAsDateTimeOffset();
      else
        Entity.AccessPortalLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessPortalLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackFromAreaLastUpdated).IsNull == false)
        Entity.PassbackFromAreaLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackFromAreaLastUpdated).GetAsDateTimeOffset();
      else
        Entity.PassbackFromAreaLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackFromAreaLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackFromAreaLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.FreeAccessSchLastUpdated).IsNull == false)
        Entity.FreeAccessSchLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.FreeAccessSchLastUpdated).GetAsDateTimeOffset();
      else
        Entity.FreeAccessSchLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.FreeAccessSchLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.FreeAccessSchLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CrisisFreeAccessSchLastUpdated).IsNull == false)
        Entity.CrisisFreeAccessSchLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CrisisFreeAccessSchLastUpdated).GetAsDateTimeOffset();
      else
        Entity.CrisisFreeAccessSchLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CrisisFreeAccessSchLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CrisisFreeAccessSchLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredSchLastUpdated).IsNull == false)
        Entity.PinRequiredSchLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredSchLastUpdated).GetAsDateTimeOffset();
      else
        Entity.PinRequiredSchLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredSchLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PinRequiredSchLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableForcedOpenSchLastUpdated).IsNull == false)
        Entity.DisableForcedOpenSchLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableForcedOpenSchLastUpdated).GetAsDateTimeOffset();
      else
        Entity.DisableForcedOpenSchLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableForcedOpenSchLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableForcedOpenSchLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableOpenTooLongSchLastUpdated).IsNull == false)
        Entity.DisableOpenTooLongSchLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableOpenTooLongSchLastUpdated).GetAsDateTimeOffset();
      else
        Entity.DisableOpenTooLongSchLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableOpenTooLongSchLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisableOpenTooLongSchLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxOutputSchLastUpdated).IsNull == false)
        Entity.AuxOutputSchLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxOutputSchLastUpdated).GetAsDateTimeOffset();
      else
        Entity.AuxOutputSchLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxOutputSchLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxOutputSchLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxOutputLastUpdated).IsNull == false)
        Entity.AuxOutputLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxOutputLastUpdated).GetAsDateTimeOffset();
      else
        Entity.AuxOutputLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxOutputLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AuxOutputLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2SchLastUpdated).IsNull == false)
        Entity.Relay2SchLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2SchLastUpdated).GetAsDateTimeOffset();
      else
        Entity.Relay2SchLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2SchLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Relay2SchLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenAlertLastUpdated).IsNull == false)
        Entity.ForcedOpenAlertLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenAlertLastUpdated).GetAsDateTimeOffset();
      else
        Entity.ForcedOpenAlertLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenAlertLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenAlertLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongAlertLastUpdated).IsNull == false)
        Entity.OpenTooLongAlertLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongAlertLastUpdated).GetAsDateTimeOffset();
      else
        Entity.OpenTooLongAlertLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongAlertLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongAlertLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptAlertLastUpdated).IsNull == false)
        Entity.InvalidAccessAttemptAlertLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptAlertLastUpdated).GetAsDateTimeOffset();
      else
        Entity.InvalidAccessAttemptAlertLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptAlertLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptAlertLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationAlertLastUpdated).IsNull == false)
        Entity.PassbackViolationAlertLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationAlertLastUpdated).GetAsDateTimeOffset();
      else
        Entity.PassbackViolationAlertLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationAlertLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationAlertLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressAlertLastUpdated).IsNull == false)
        Entity.DuressAlertLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressAlertLastUpdated).GetAsDateTimeOffset();
      else
        Entity.DuressAlertLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressAlertLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressAlertLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatAlertLastUpdated).IsNull == false)
        Entity.MissedHeartbeatAlertLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatAlertLastUpdated).GetAsDateTimeOffset();
      else
        Entity.MissedHeartbeatAlertLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatAlertLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatAlertLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedAlertLastUpdated).IsNull == false)
        Entity.AccessGrantedAlertLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedAlertLastUpdated).GetAsDateTimeOffset();
      else
        Entity.AccessGrantedAlertLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedAlertLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedAlertLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupAlertLastUpdated).IsNull == false)
        Entity.DoorGroupAlertLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupAlertLastUpdated).GetAsDateTimeOffset();
      else
        Entity.DoorGroupAlertLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupAlertLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupAlertLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockedByIogLastUpdated).IsNull == false)
        Entity.UnlockedByIogLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockedByIogLastUpdated).GetAsDateTimeOffset();
      else
        Entity.UnlockedByIogLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockedByIogLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockedByIogLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockedByIogLastUpdated).IsNull == false)
        Entity.LockedByIogLastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockedByIogLastUpdated).GetAsDateTimeOffset();
      else
        Entity.LockedByIogLastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockedByIogLastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockedByIogLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog1LastUpdated).IsNull == false)
        Entity.DisarmIog1LastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog1LastUpdated).GetAsDateTimeOffset();
      else
        Entity.DisarmIog1LastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog1LastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog1LastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog2LastUpdated).IsNull == false)
        Entity.DisarmIog2LastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog2LastUpdated).GetAsDateTimeOffset();
      else
        Entity.DisarmIog2LastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog2LastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog2LastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog3LastUpdated).IsNull == false)
        Entity.DisarmIog3LastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog3LastUpdated).GetAsDateTimeOffset();
      else
        Entity.DisarmIog3LastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog3LastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog3LastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog4LastUpdated).IsNull == false)
        Entity.DisarmIog4LastUpdated = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog4LastUpdated).GetAsDateTimeOffset();
      else
        Entity.DisarmIog4LastUpdated = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog4LastUpdated, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DisarmIog4LastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber).IsNull == false)
        Entity.CpuNumber = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber).GetAsInteger();
      else
        Entity.CpuNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuUid).IsNull == false)
        Entity.CpuUid = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuUid).GetAsGuid();
      else
        Entity.CpuUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuUid, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.CpuUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress).IsNull == false)
        Entity.ServerAddress = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress).GetAsString();
      else
        Entity.ServerAddress = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsConnected).IsNull == false)
        Entity.IsConnected = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsConnected).GetAsInteger();
      else
        Entity.IsConnected = 0;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsConnected, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.IsConnected).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenAlertEventIsActive).IsNull == false)
        Entity.ForcedOpenAlertEventIsActive = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenAlertEventIsActive).GetAsBool();
      else
        Entity.ForcedOpenAlertEventIsActive = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenAlertEventIsActive, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.ForcedOpenAlertEventIsActive).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongAlertEventIsActive).IsNull == false)
        Entity.OpenTooLongAlertEventIsActive = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongAlertEventIsActive).GetAsBool();
      else
        Entity.OpenTooLongAlertEventIsActive = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongAlertEventIsActive, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.OpenTooLongAlertEventIsActive).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptAlertEventIsActive).IsNull == false)
        Entity.InvalidAccessAttemptAlertEventIsActive = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptAlertEventIsActive).GetAsBool();
      else
        Entity.InvalidAccessAttemptAlertEventIsActive = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptAlertEventIsActive, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.InvalidAccessAttemptAlertEventIsActive).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationAlertEventIsActive).IsNull == false)
        Entity.PassbackViolationAlertEventIsActive = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationAlertEventIsActive).GetAsBool();
      else
        Entity.PassbackViolationAlertEventIsActive = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationAlertEventIsActive, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.PassbackViolationAlertEventIsActive).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressAlertEventIsActive).IsNull == false)
        Entity.DuressAlertEventIsActive = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressAlertEventIsActive).GetAsBool();
      else
        Entity.DuressAlertEventIsActive = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressAlertEventIsActive, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DuressAlertEventIsActive).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatAlertEventIsActive).IsNull == false)
        Entity.MissedHeartbeatAlertEventIsActive = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatAlertEventIsActive).GetAsBool();
      else
        Entity.MissedHeartbeatAlertEventIsActive = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatAlertEventIsActive, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.MissedHeartbeatAlertEventIsActive).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedAlertEventIsActive).IsNull == false)
        Entity.AccessGrantedAlertEventIsActive = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedAlertEventIsActive).GetAsBool();
      else
        Entity.AccessGrantedAlertEventIsActive = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedAlertEventIsActive, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.AccessGrantedAlertEventIsActive).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupAlertEventIsActive).IsNull == false)
        Entity.DoorGroupAlertEventIsActive = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupAlertEventIsActive).GetAsBool();
      else
        Entity.DoorGroupAlertEventIsActive = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupAlertEventIsActive, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.DoorGroupAlertEventIsActive).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockedByAlertEventIsActive).IsNull == false)
        Entity.UnlockedByAlertEventIsActive = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockedByAlertEventIsActive).GetAsBool();
      else
        Entity.UnlockedByAlertEventIsActive = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockedByAlertEventIsActive, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.UnlockedByAlertEventIsActive).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockedByAlertEventIsActive).IsNull == false)
        Entity.LockedByAlertEventIsActive = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockedByAlertEventIsActive).GetAsBool();
      else
        Entity.LockedByAlertEventIsActive = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockedByAlertEventIsActive, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.LockedByAlertEventIsActive).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm1AlertEventIsActive).IsNull == false)
        Entity.Disarm1AlertEventIsActive = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm1AlertEventIsActive).GetAsBool();
      else
        Entity.Disarm1AlertEventIsActive = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm1AlertEventIsActive, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm1AlertEventIsActive).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm2AlertEventIsActive).IsNull == false)
        Entity.Disarm2AlertEventIsActive = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm2AlertEventIsActive).GetAsBool();
      else
        Entity.Disarm2AlertEventIsActive = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm2AlertEventIsActive, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm2AlertEventIsActive).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm3AlertEventIsActive).IsNull == false)
        Entity.Disarm3AlertEventIsActive = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm3AlertEventIsActive).GetAsBool();
      else
        Entity.Disarm3AlertEventIsActive = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm3AlertEventIsActive, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm3AlertEventIsActive).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm4AlertEventIsActive).IsNull == false)
        Entity.Disarm4AlertEventIsActive = ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm4AlertEventIsActive).GetAsBool();
      else
        Entity.Disarm4AlertEventIsActive = false;
      Entity.SetOriginalValueForProperty(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm4AlertEventIsActive, ValidatorObject.Properties.GetByName(AccessPortal_PanelLoadDataPDSAValidator.ColumnNames.Disarm4AlertEventIsActive).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>AccessPortal_PanelLoadDataPDSA</returns>
    public AccessPortal_PanelLoadDataPDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new AccessPortal_PanelLoadDataPDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          
          
          break;
        case SelectFilters.Search:
          
          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL that will count the number of rows returned from this view.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          
          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      sb.Append(WhereClauseSQL());
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion
    
    #region WhereClauseSQL Method
    /// <summary>
    /// Builds the WHERE clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string WhereClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (WhereFilter)
      {
        case WhereFilters.Custom:
          sb.Append(" " + WhereCustom);

          break;

        case WhereFilters.None:
          //  Do nothing

          break;

        case WhereFilters.AccessPortalUid:
          
          
          break;
        case WhereFilters.ClusterUid:
          
          
          break;
        case WhereFilters.GalaxyHardwareModuleUid:
          
          
          break;
        case WhereFilters.GalaxyInterfaceBoardSectionNodeUid:
          
          
          break;
        case WhereFilters.GalaxyInterfaceBoardSectionUid:
          
          
          break;
        case WhereFilters.GalaxyInterfaceBoardUid:
          
          
          break;
        case WhereFilters.GalaxyPanelUid:
          
          
          break;
        case WhereFilters.LikePortalName:
          
          
          break;
        case WhereFilters.PortalName:
          
          
          break;
      }
      
      return sb.ToString();
    }
    #endregion

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
         
          break;
        case SelectFilters.Search:
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion

    #region WhereClauseFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any WHERE clause parameters.
    /// </summary>
    protected override void WhereClauseFillInParameters()
    {
      switch (WhereFilter)
      {
        case WhereFilters.AccessPortalUid:
         
          break;
        case WhereFilters.ClusterUid:
         
          break;
        case WhereFilters.GalaxyHardwareModuleUid:
         
          break;
        case WhereFilters.GalaxyInterfaceBoardSectionNodeUid:
         
          break;
        case WhereFilters.GalaxyInterfaceBoardSectionUid:
         
          break;
        case WhereFilters.GalaxyInterfaceBoardUid:
         
          break;
        case WhereFilters.GalaxyPanelUid:
         
          break;
        case WhereFilters.LikePortalName:
         
          break;
        case WhereFilters.PortalName:
         
          break;
      }
    }
    #endregion

    #region OrderByClauseSQL Method
    /// <summary>
    /// Builds the ORDER BY clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string OrderByClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (OrderByFilter)
      {
        case OrderByFilters.None:
          //  Do Nothing

          break;

        case OrderByFilters.Custom:
          sb.Append(" " + OrderByCustom);

          break;
          
        case OrderByFilters.HardwareAddress:
          
          
          break;
        case OrderByFilters.PortalName:
          
          
          break;
      }

      return sb.ToString();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the AccessPortal_PanelLoadDataPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'AccessPortalUid'
    /// </summary>
    public static string AccessPortalUid = "AccessPortalUid";
    /// <summary>
    /// Returns 'ClusterUid'
    /// </summary>
    public static string ClusterUid = "ClusterUid";
    /// <summary>
    /// Returns 'GalaxyPanelUid'
    /// </summary>
    public static string GalaxyPanelUid = "GalaxyPanelUid";
    /// <summary>
    /// Returns 'GalaxyInterfaceBoardUid'
    /// </summary>
    public static string GalaxyInterfaceBoardUid = "GalaxyInterfaceBoardUid";
    /// <summary>
    /// Returns 'GalaxyInterfaceBoardSectionUid'
    /// </summary>
    public static string GalaxyInterfaceBoardSectionUid = "GalaxyInterfaceBoardSectionUid";
    /// <summary>
    /// Returns 'GalaxyHardwareModuleUid'
    /// </summary>
    public static string GalaxyHardwareModuleUid = "GalaxyHardwareModuleUid";
    /// <summary>
    /// Returns 'GalaxyInterfaceBoardSectionNodeUid'
    /// </summary>
    public static string GalaxyInterfaceBoardSectionNodeUid = "GalaxyInterfaceBoardSectionNodeUid";
    /// <summary>
    /// Returns 'PortalName'
    /// </summary>
    public static string PortalName = "PortalName";
    /// <summary>
    /// Returns 'ClusterGroupId'
    /// </summary>
    public static string ClusterGroupId = "ClusterGroupId";
    /// <summary>
    /// Returns 'ClusterNumber'
    /// </summary>
    public static string ClusterNumber = "ClusterNumber";
    /// <summary>
    /// Returns 'PanelNumber'
    /// </summary>
    public static string PanelNumber = "PanelNumber";
    /// <summary>
    /// Returns 'BoardNumber'
    /// </summary>
    public static string BoardNumber = "BoardNumber";
    /// <summary>
    /// Returns 'SectionNumber'
    /// </summary>
    public static string SectionNumber = "SectionNumber";
    /// <summary>
    /// Returns 'ModuleNumber'
    /// </summary>
    public static string ModuleNumber = "ModuleNumber";
    /// <summary>
    /// Returns 'NodeNumber'
    /// </summary>
    public static string NodeNumber = "NodeNumber";
    /// <summary>
    /// Returns 'DoorNumber'
    /// </summary>
    public static string DoorNumber = "DoorNumber";
    /// <summary>
    /// Returns 'AccessPortalTypeDescription'
    /// </summary>
    public static string AccessPortalTypeDescription = "AccessPortalTypeDescription";
    /// <summary>
    /// Returns 'ReaderTypeName'
    /// </summary>
    public static string ReaderTypeName = "ReaderTypeName";
    /// <summary>
    /// Returns 'PanelDataFormatCode'
    /// </summary>
    public static string PanelDataFormatCode = "PanelDataFormatCode";
    /// <summary>
    /// Returns 'DataFormatName'
    /// </summary>
    public static string DataFormatName = "DataFormatName";
    /// <summary>
    /// Returns 'AccessPortalBoardSectionMode'
    /// </summary>
    public static string AccessPortalBoardSectionMode = "AccessPortalBoardSectionMode";
    /// <summary>
    /// Returns 'AccessPortalBoardSectionModeDisplay'
    /// </summary>
    public static string AccessPortalBoardSectionModeDisplay = "AccessPortalBoardSectionModeDisplay";
    /// <summary>
    /// Returns 'AccessPortalPanelModelTypeCode'
    /// </summary>
    public static string AccessPortalPanelModelTypeCode = "AccessPortalPanelModelTypeCode";
    /// <summary>
    /// Returns 'AccessPortalCpuTypeCode'
    /// </summary>
    public static string AccessPortalCpuTypeCode = "AccessPortalCpuTypeCode";
    /// <summary>
    /// Returns 'AccessPortalBoardTypeModel'
    /// </summary>
    public static string AccessPortalBoardTypeModel = "AccessPortalBoardTypeModel";
    /// <summary>
    /// Returns 'AccessPortalBoardTypeTypeCode'
    /// </summary>
    public static string AccessPortalBoardTypeTypeCode = "AccessPortalBoardTypeTypeCode";
    /// <summary>
    /// Returns 'AccessPortalBoardTypeDisplay'
    /// </summary>
    public static string AccessPortalBoardTypeDisplay = "AccessPortalBoardTypeDisplay";
    /// <summary>
    /// Returns 'UnlockDelay'
    /// </summary>
    public static string UnlockDelay = "UnlockDelay";
    /// <summary>
    /// Returns 'UnlockDuration'
    /// </summary>
    public static string UnlockDuration = "UnlockDuration";
    /// <summary>
    /// Returns 'RecloseDuration'
    /// </summary>
    public static string RecloseDuration = "RecloseDuration";
    /// <summary>
    /// Returns 'AllowPassbackAccess'
    /// </summary>
    public static string AllowPassbackAccess = "AllowPassbackAccess";
    /// <summary>
    /// Returns 'RequireTwoValidCredentials'
    /// </summary>
    public static string RequireTwoValidCredentials = "RequireTwoValidCredentials";
    /// <summary>
    /// Returns 'UnlockOnREX'
    /// </summary>
    public static string UnlockOnREX = "UnlockOnREX";
    /// <summary>
    /// Returns 'SuppressIllegalOpenLog'
    /// </summary>
    public static string SuppressIllegalOpenLog = "SuppressIllegalOpenLog";
    /// <summary>
    /// Returns 'SuppressOpenTooLongLog'
    /// </summary>
    public static string SuppressOpenTooLongLog = "SuppressOpenTooLongLog";
    /// <summary>
    /// Returns 'SuppressClosedLog'
    /// </summary>
    public static string SuppressClosedLog = "SuppressClosedLog";
    /// <summary>
    /// Returns 'SuppressREXLog'
    /// </summary>
    public static string SuppressREXLog = "SuppressREXLog";
    /// <summary>
    /// Returns 'GenerateDoorContactChangeLogs'
    /// </summary>
    public static string GenerateDoorContactChangeLogs = "GenerateDoorContactChangeLogs";
    /// <summary>
    /// Returns 'LockWhenDoorCloses'
    /// </summary>
    public static string LockWhenDoorCloses = "LockWhenDoorCloses";
    /// <summary>
    /// Returns 'EnableDuress'
    /// </summary>
    public static string EnableDuress = "EnableDuress";
    /// <summary>
    /// Returns 'DoorGroupNotify'
    /// </summary>
    public static string DoorGroupNotify = "DoorGroupNotify";
    /// <summary>
    /// Returns 'DoorGroupCanDisable'
    /// </summary>
    public static string DoorGroupCanDisable = "DoorGroupCanDisable";
    /// <summary>
    /// Returns 'RelayOneOnDuringArmDelay'
    /// </summary>
    public static string RelayOneOnDuringArmDelay = "RelayOneOnDuringArmDelay";
    /// <summary>
    /// Returns 'RequireValidAccessForAutoUnlock'
    /// </summary>
    public static string RequireValidAccessForAutoUnlock = "RequireValidAccessForAutoUnlock";
    /// <summary>
    /// Returns 'ValidAccessRequiresDoorOpen'
    /// </summary>
    public static string ValidAccessRequiresDoorOpen = "ValidAccessRequiresDoorOpen";
    /// <summary>
    /// Returns 'DontDecrementLimitedSwipeExpireCount'
    /// </summary>
    public static string DontDecrementLimitedSwipeExpireCount = "DontDecrementLimitedSwipeExpireCount";
    /// <summary>
    /// Returns 'IgnoreNotInSystem'
    /// </summary>
    public static string IgnoreNotInSystem = "IgnoreNotInSystem";
    /// <summary>
    /// Returns 'ReaderSendsHeartbeat'
    /// </summary>
    public static string ReaderSendsHeartbeat = "ReaderSendsHeartbeat";
    /// <summary>
    /// Returns 'IsEnabled'
    /// </summary>
    public static string IsEnabled = "IsEnabled";
    /// <summary>
    /// Returns 'PropertiesLastUpdated'
    /// </summary>
    public static string PropertiesLastUpdated = "PropertiesLastUpdated";
    /// <summary>
    /// Returns 'AutoForgivePassbackCode'
    /// </summary>
    public static string AutoForgivePassbackCode = "AutoForgivePassbackCode";
    /// <summary>
    /// Returns 'AutoForgivePassbackDisplay'
    /// </summary>
    public static string AutoForgivePassbackDisplay = "AutoForgivePassbackDisplay";
    /// <summary>
    /// Returns 'PinRequiredModeCode'
    /// </summary>
    public static string PinRequiredModeCode = "PinRequiredModeCode";
    /// <summary>
    /// Returns 'PinRequiredModeDisplay'
    /// </summary>
    public static string PinRequiredModeDisplay = "PinRequiredModeDisplay";
    /// <summary>
    /// Returns 'ContactSupervisionCode'
    /// </summary>
    public static string ContactSupervisionCode = "ContactSupervisionCode";
    /// <summary>
    /// Returns 'ContactSupervisionDisplay'
    /// </summary>
    public static string ContactSupervisionDisplay = "ContactSupervisionDisplay";
    /// <summary>
    /// Returns 'DeferToServerCode'
    /// </summary>
    public static string DeferToServerCode = "DeferToServerCode";
    /// <summary>
    /// Returns 'DeferToServerDisplay'
    /// </summary>
    public static string DeferToServerDisplay = "DeferToServerDisplay";
    /// <summary>
    /// Returns 'NoServerReplyCode'
    /// </summary>
    public static string NoServerReplyCode = "NoServerReplyCode";
    /// <summary>
    /// Returns 'NoServerReplyDisplay'
    /// </summary>
    public static string NoServerReplyDisplay = "NoServerReplyDisplay";
    /// <summary>
    /// Returns 'LockPushButtonCode'
    /// </summary>
    public static string LockPushButtonCode = "LockPushButtonCode";
    /// <summary>
    /// Returns 'LockPushButtonDisplay'
    /// </summary>
    public static string LockPushButtonDisplay = "LockPushButtonDisplay";
    /// <summary>
    /// Returns 'MultiFactorMode'
    /// </summary>
    public static string MultiFactorMode = "MultiFactorMode";
    /// <summary>
    /// Returns 'MultiFactorModeDisplay'
    /// </summary>
    public static string MultiFactorModeDisplay = "MultiFactorModeDisplay";
    /// <summary>
    /// Returns 'ElevatorControlTypeCode'
    /// </summary>
    public static string ElevatorControlTypeCode = "ElevatorControlTypeCode";
    /// <summary>
    /// Returns 'ElevatorControlTypeDisplay'
    /// </summary>
    public static string ElevatorControlTypeDisplay = "ElevatorControlTypeDisplay";
    /// <summary>
    /// Returns 'ElevatorRelayBoardNumber'
    /// </summary>
    public static string ElevatorRelayBoardNumber = "ElevatorRelayBoardNumber";
    /// <summary>
    /// Returns 'ElevatorRelaySectionNumber'
    /// </summary>
    public static string ElevatorRelaySectionNumber = "ElevatorRelaySectionNumber";
    /// <summary>
    /// Returns 'PassbackIntoAreaNumber'
    /// </summary>
    public static string PassbackIntoAreaNumber = "PassbackIntoAreaNumber";
    /// <summary>
    /// Returns 'PassbackFromAreaNumber'
    /// </summary>
    public static string PassbackFromAreaNumber = "PassbackFromAreaNumber";
    /// <summary>
    /// Returns 'FreeAccessScheduleNumber'
    /// </summary>
    public static string FreeAccessScheduleNumber = "FreeAccessScheduleNumber";
    /// <summary>
    /// Returns 'FreeAccessScheduleDisplay'
    /// </summary>
    public static string FreeAccessScheduleDisplay = "FreeAccessScheduleDisplay";
    /// <summary>
    /// Returns 'CrisisFreeAccessScheduleNumber'
    /// </summary>
    public static string CrisisFreeAccessScheduleNumber = "CrisisFreeAccessScheduleNumber";
    /// <summary>
    /// Returns 'CrisisFreeAccessScheduleDisplay'
    /// </summary>
    public static string CrisisFreeAccessScheduleDisplay = "CrisisFreeAccessScheduleDisplay";
    /// <summary>
    /// Returns 'PinRequiredScheduleNumber'
    /// </summary>
    public static string PinRequiredScheduleNumber = "PinRequiredScheduleNumber";
    /// <summary>
    /// Returns 'PinRequiredScheduleDisplay'
    /// </summary>
    public static string PinRequiredScheduleDisplay = "PinRequiredScheduleDisplay";
    /// <summary>
    /// Returns 'DisableForcedOpenScheduleNumber'
    /// </summary>
    public static string DisableForcedOpenScheduleNumber = "DisableForcedOpenScheduleNumber";
    /// <summary>
    /// Returns 'DisableForcedOpenScheduleDisplay'
    /// </summary>
    public static string DisableForcedOpenScheduleDisplay = "DisableForcedOpenScheduleDisplay";
    /// <summary>
    /// Returns 'DisableOpenTooLongScheduleNumber'
    /// </summary>
    public static string DisableOpenTooLongScheduleNumber = "DisableOpenTooLongScheduleNumber";
    /// <summary>
    /// Returns 'DisableOpenTooLongScheduleDisplay'
    /// </summary>
    public static string DisableOpenTooLongScheduleDisplay = "DisableOpenTooLongScheduleDisplay";
    /// <summary>
    /// Returns 'AuxiliaryOutputScheduleNumber'
    /// </summary>
    public static string AuxiliaryOutputScheduleNumber = "AuxiliaryOutputScheduleNumber";
    /// <summary>
    /// Returns 'AuxiliaryOutputScheduleDisplay'
    /// </summary>
    public static string AuxiliaryOutputScheduleDisplay = "AuxiliaryOutputScheduleDisplay";
    /// <summary>
    /// Returns 'Relay2ActivationDelay'
    /// </summary>
    public static string Relay2ActivationDelay = "Relay2ActivationDelay";
    /// <summary>
    /// Returns 'Relay2ActivationDuration'
    /// </summary>
    public static string Relay2ActivationDuration = "Relay2ActivationDuration";
    /// <summary>
    /// Returns 'Relay2TriggerAccessGranted'
    /// </summary>
    public static string Relay2TriggerAccessGranted = "Relay2TriggerAccessGranted";
    /// <summary>
    /// Returns 'Relay2TriggerDuress'
    /// </summary>
    public static string Relay2TriggerDuress = "Relay2TriggerDuress";
    /// <summary>
    /// Returns 'Relay2TriggerForcedOpen'
    /// </summary>
    public static string Relay2TriggerForcedOpen = "Relay2TriggerForcedOpen";
    /// <summary>
    /// Returns 'Relay2TriggerInvalidAttempt'
    /// </summary>
    public static string Relay2TriggerInvalidAttempt = "Relay2TriggerInvalidAttempt";
    /// <summary>
    /// Returns 'Relay2TriggerOpenTooLong'
    /// </summary>
    public static string Relay2TriggerOpenTooLong = "Relay2TriggerOpenTooLong";
    /// <summary>
    /// Returns 'Relay2TriggerPassbackViolation'
    /// </summary>
    public static string Relay2TriggerPassbackViolation = "Relay2TriggerPassbackViolation";
    /// <summary>
    /// Returns 'Relay2ModeCode'
    /// </summary>
    public static string Relay2ModeCode = "Relay2ModeCode";
    /// <summary>
    /// Returns 'Relay2ModeDisplay'
    /// </summary>
    public static string Relay2ModeDisplay = "Relay2ModeDisplay";
    /// <summary>
    /// Returns 'Relay2ScheduleNumber'
    /// </summary>
    public static string Relay2ScheduleNumber = "Relay2ScheduleNumber";
    /// <summary>
    /// Returns 'Relay2ScheduleDisplay'
    /// </summary>
    public static string Relay2ScheduleDisplay = "Relay2ScheduleDisplay";
    /// <summary>
    /// Returns 'ForcedOpenIOGroupNumber'
    /// </summary>
    public static string ForcedOpenIOGroupNumber = "ForcedOpenIOGroupNumber";
    /// <summary>
    /// Returns 'ForcedOpenIOGroupOffset'
    /// </summary>
    public static string ForcedOpenIOGroupOffset = "ForcedOpenIOGroupOffset";
    /// <summary>
    /// Returns 'OpenTooLongIOGroupNumber'
    /// </summary>
    public static string OpenTooLongIOGroupNumber = "OpenTooLongIOGroupNumber";
    /// <summary>
    /// Returns 'OpenTooLongIOGroupOffset'
    /// </summary>
    public static string OpenTooLongIOGroupOffset = "OpenTooLongIOGroupOffset";
    /// <summary>
    /// Returns 'InvalidAccessAttemptIOGroupNumber'
    /// </summary>
    public static string InvalidAccessAttemptIOGroupNumber = "InvalidAccessAttemptIOGroupNumber";
    /// <summary>
    /// Returns 'InvalidAccessAttemptIOGroupOffset'
    /// </summary>
    public static string InvalidAccessAttemptIOGroupOffset = "InvalidAccessAttemptIOGroupOffset";
    /// <summary>
    /// Returns 'PassbackViolationIOGroupNumber'
    /// </summary>
    public static string PassbackViolationIOGroupNumber = "PassbackViolationIOGroupNumber";
    /// <summary>
    /// Returns 'PassbackViolationIOGroupOffset'
    /// </summary>
    public static string PassbackViolationIOGroupOffset = "PassbackViolationIOGroupOffset";
    /// <summary>
    /// Returns 'DuressIOGroupNumber'
    /// </summary>
    public static string DuressIOGroupNumber = "DuressIOGroupNumber";
    /// <summary>
    /// Returns 'DuressIOGroupOffset'
    /// </summary>
    public static string DuressIOGroupOffset = "DuressIOGroupOffset";
    /// <summary>
    /// Returns 'MissedHeartbeatIOGroupNumber'
    /// </summary>
    public static string MissedHeartbeatIOGroupNumber = "MissedHeartbeatIOGroupNumber";
    /// <summary>
    /// Returns 'MissedHeartbeatIOGroupOffset'
    /// </summary>
    public static string MissedHeartbeatIOGroupOffset = "MissedHeartbeatIOGroupOffset";
    /// <summary>
    /// Returns 'AccessGrantedIOGroupNumber'
    /// </summary>
    public static string AccessGrantedIOGroupNumber = "AccessGrantedIOGroupNumber";
    /// <summary>
    /// Returns 'AccessGrantedIOGroupOffset'
    /// </summary>
    public static string AccessGrantedIOGroupOffset = "AccessGrantedIOGroupOffset";
    /// <summary>
    /// Returns 'DoorGroupIOGroupNumber'
    /// </summary>
    public static string DoorGroupIOGroupNumber = "DoorGroupIOGroupNumber";
    /// <summary>
    /// Returns 'DoorGroupIOGroupOffset'
    /// </summary>
    public static string DoorGroupIOGroupOffset = "DoorGroupIOGroupOffset";
    /// <summary>
    /// Returns 'LockedByIOGroupNumber'
    /// </summary>
    public static string LockedByIOGroupNumber = "LockedByIOGroupNumber";
    /// <summary>
    /// Returns 'UnlockedByIOGroupNumber'
    /// </summary>
    public static string UnlockedByIOGroupNumber = "UnlockedByIOGroupNumber";
    /// <summary>
    /// Returns 'DisarmIOGroupNumber1'
    /// </summary>
    public static string DisarmIOGroupNumber1 = "DisarmIOGroupNumber1";
    /// <summary>
    /// Returns 'DisarmIOGroupNumber2'
    /// </summary>
    public static string DisarmIOGroupNumber2 = "DisarmIOGroupNumber2";
    /// <summary>
    /// Returns 'DisarmIOGroupNumber3'
    /// </summary>
    public static string DisarmIOGroupNumber3 = "DisarmIOGroupNumber3";
    /// <summary>
    /// Returns 'HardwareAddressLastUpdated'
    /// </summary>
    public static string HardwareAddressLastUpdated = "HardwareAddressLastUpdated";
    /// <summary>
    /// Returns 'DisarmIOGroupNumber4'
    /// </summary>
    public static string DisarmIOGroupNumber4 = "DisarmIOGroupNumber4";
    /// <summary>
    /// Returns 'PassbackIntoAreaLastUpdated'
    /// </summary>
    public static string PassbackIntoAreaLastUpdated = "PassbackIntoAreaLastUpdated";
    /// <summary>
    /// Returns 'AccessPortalLastUpdated'
    /// </summary>
    public static string AccessPortalLastUpdated = "AccessPortalLastUpdated";
    /// <summary>
    /// Returns 'PassbackFromAreaLastUpdated'
    /// </summary>
    public static string PassbackFromAreaLastUpdated = "PassbackFromAreaLastUpdated";
    /// <summary>
    /// Returns 'FreeAccessSchLastUpdated'
    /// </summary>
    public static string FreeAccessSchLastUpdated = "FreeAccessSchLastUpdated";
    /// <summary>
    /// Returns 'CrisisFreeAccessSchLastUpdated'
    /// </summary>
    public static string CrisisFreeAccessSchLastUpdated = "CrisisFreeAccessSchLastUpdated";
    /// <summary>
    /// Returns 'PinRequiredSchLastUpdated'
    /// </summary>
    public static string PinRequiredSchLastUpdated = "PinRequiredSchLastUpdated";
    /// <summary>
    /// Returns 'DisableForcedOpenSchLastUpdated'
    /// </summary>
    public static string DisableForcedOpenSchLastUpdated = "DisableForcedOpenSchLastUpdated";
    /// <summary>
    /// Returns 'DisableOpenTooLongSchLastUpdated'
    /// </summary>
    public static string DisableOpenTooLongSchLastUpdated = "DisableOpenTooLongSchLastUpdated";
    /// <summary>
    /// Returns 'AuxOutputSchLastUpdated'
    /// </summary>
    public static string AuxOutputSchLastUpdated = "AuxOutputSchLastUpdated";
    /// <summary>
    /// Returns 'AuxOutputLastUpdated'
    /// </summary>
    public static string AuxOutputLastUpdated = "AuxOutputLastUpdated";
    /// <summary>
    /// Returns 'Relay2SchLastUpdated'
    /// </summary>
    public static string Relay2SchLastUpdated = "Relay2SchLastUpdated";
    /// <summary>
    /// Returns 'ForcedOpenAlertLastUpdated'
    /// </summary>
    public static string ForcedOpenAlertLastUpdated = "ForcedOpenAlertLastUpdated";
    /// <summary>
    /// Returns 'OpenTooLongAlertLastUpdated'
    /// </summary>
    public static string OpenTooLongAlertLastUpdated = "OpenTooLongAlertLastUpdated";
    /// <summary>
    /// Returns 'InvalidAccessAttemptAlertLastUpdated'
    /// </summary>
    public static string InvalidAccessAttemptAlertLastUpdated = "InvalidAccessAttemptAlertLastUpdated";
    /// <summary>
    /// Returns 'PassbackViolationAlertLastUpdated'
    /// </summary>
    public static string PassbackViolationAlertLastUpdated = "PassbackViolationAlertLastUpdated";
    /// <summary>
    /// Returns 'DuressAlertLastUpdated'
    /// </summary>
    public static string DuressAlertLastUpdated = "DuressAlertLastUpdated";
    /// <summary>
    /// Returns 'MissedHeartbeatAlertLastUpdated'
    /// </summary>
    public static string MissedHeartbeatAlertLastUpdated = "MissedHeartbeatAlertLastUpdated";
    /// <summary>
    /// Returns 'AccessGrantedAlertLastUpdated'
    /// </summary>
    public static string AccessGrantedAlertLastUpdated = "AccessGrantedAlertLastUpdated";
    /// <summary>
    /// Returns 'DoorGroupAlertLastUpdated'
    /// </summary>
    public static string DoorGroupAlertLastUpdated = "DoorGroupAlertLastUpdated";
    /// <summary>
    /// Returns 'UnlockedByIogLastUpdated'
    /// </summary>
    public static string UnlockedByIogLastUpdated = "UnlockedByIogLastUpdated";
    /// <summary>
    /// Returns 'LockedByIogLastUpdated'
    /// </summary>
    public static string LockedByIogLastUpdated = "LockedByIogLastUpdated";
    /// <summary>
    /// Returns 'DisarmIog1LastUpdated'
    /// </summary>
    public static string DisarmIog1LastUpdated = "DisarmIog1LastUpdated";
    /// <summary>
    /// Returns 'DisarmIog2LastUpdated'
    /// </summary>
    public static string DisarmIog2LastUpdated = "DisarmIog2LastUpdated";
    /// <summary>
    /// Returns 'DisarmIog3LastUpdated'
    /// </summary>
    public static string DisarmIog3LastUpdated = "DisarmIog3LastUpdated";
    /// <summary>
    /// Returns 'DisarmIog4LastUpdated'
    /// </summary>
    public static string DisarmIog4LastUpdated = "DisarmIog4LastUpdated";
    /// <summary>
    /// Returns 'CpuNumber'
    /// </summary>
    public static string CpuNumber = "CpuNumber";
    /// <summary>
    /// Returns 'CpuUid'
    /// </summary>
    public static string CpuUid = "CpuUid";
    /// <summary>
    /// Returns 'ServerAddress'
    /// </summary>
    public static string ServerAddress = "ServerAddress";
    /// <summary>
    /// Returns 'IsConnected'
    /// </summary>
    public static string IsConnected = "IsConnected";
    /// <summary>
    /// Returns 'ForcedOpenAlertEventIsActive'
    /// </summary>
    public static string ForcedOpenAlertEventIsActive = "ForcedOpenAlertEventIsActive";
    /// <summary>
    /// Returns 'OpenTooLongAlertEventIsActive'
    /// </summary>
    public static string OpenTooLongAlertEventIsActive = "OpenTooLongAlertEventIsActive";
    /// <summary>
    /// Returns 'InvalidAccessAttemptAlertEventIsActive'
    /// </summary>
    public static string InvalidAccessAttemptAlertEventIsActive = "InvalidAccessAttemptAlertEventIsActive";
    /// <summary>
    /// Returns 'PassbackViolationAlertEventIsActive'
    /// </summary>
    public static string PassbackViolationAlertEventIsActive = "PassbackViolationAlertEventIsActive";
    /// <summary>
    /// Returns 'DuressAlertEventIsActive'
    /// </summary>
    public static string DuressAlertEventIsActive = "DuressAlertEventIsActive";
    /// <summary>
    /// Returns 'MissedHeartbeatAlertEventIsActive'
    /// </summary>
    public static string MissedHeartbeatAlertEventIsActive = "MissedHeartbeatAlertEventIsActive";
    /// <summary>
    /// Returns 'AccessGrantedAlertEventIsActive'
    /// </summary>
    public static string AccessGrantedAlertEventIsActive = "AccessGrantedAlertEventIsActive";
    /// <summary>
    /// Returns 'DoorGroupAlertEventIsActive'
    /// </summary>
    public static string DoorGroupAlertEventIsActive = "DoorGroupAlertEventIsActive";
    /// <summary>
    /// Returns 'UnlockedByAlertEventIsActive'
    /// </summary>
    public static string UnlockedByAlertEventIsActive = "UnlockedByAlertEventIsActive";
    /// <summary>
    /// Returns 'LockedByAlertEventIsActive'
    /// </summary>
    public static string LockedByAlertEventIsActive = "LockedByAlertEventIsActive";
    /// <summary>
    /// Returns 'Disarm1AlertEventIsActive'
    /// </summary>
    public static string Disarm1AlertEventIsActive = "Disarm1AlertEventIsActive";
    /// <summary>
    /// Returns 'Disarm2AlertEventIsActive'
    /// </summary>
    public static string Disarm2AlertEventIsActive = "Disarm2AlertEventIsActive";
    /// <summary>
    /// Returns 'Disarm3AlertEventIsActive'
    /// </summary>
    public static string Disarm3AlertEventIsActive = "Disarm3AlertEventIsActive";
    /// <summary>
    /// Returns 'Disarm4AlertEventIsActive'
    /// </summary>
    public static string Disarm4AlertEventIsActive = "Disarm4AlertEventIsActive";
    }
    #endregion
  }
}
