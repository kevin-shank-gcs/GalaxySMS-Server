using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Select data from the TableColumnInformationPDSA view.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class TableColumnInformationPDSAData : PDSADataClassReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the TableColumnInformationPDSAData class
    /// </summary>
    public TableColumnInformationPDSAData() : base()
    {
      Entity = new TableColumnInformationPDSA();
      ValidatorObject = new TableColumnInformationPDSAValidator(Entity);

      Init();
    }
    
    /// <summary>
    /// Constructor for the TableColumnInformationPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a TableColumnInformationPDSA</param>
    public TableColumnInformationPDSAData(PDSADataProvider dataProvider,
      TableColumnInformationPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new TableColumnInformationPDSAValidator(Entity);

      Init();
    }
     
    /// <summary>
    /// Constructor for the TableColumnInformationPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a TableColumnInformationPDSA</param>
    /// <param name="validator">An instance of a TableColumnInformationPDSAValidator</param>
    public TableColumnInformationPDSAData(PDSADataProvider dataProvider,
      TableColumnInformationPDSA entity, TableColumnInformationPDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// A Custom SelectFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a WHERE statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum WhereFilters
    {
      /// <summary>
      /// No WhereFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom WhereFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'DatabaseName' WhereFilter
      /// </summary>
      DatabaseName
      ,
      /// <summary>
      /// 'LikeDatabaseName' WhereFilter
      /// </summary>
      LikeDatabaseName
    }

    /// <summary>
    /// Enumeration for selecting an ORDER BY statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum OrderByFilters
    {
      /// <summary>
      /// No OrderByFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'DatabaseName' OrderByFilter
      /// </summary>
      DatabaseName
    }
    
    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }
    /// <summary>
    /// Get/Set a WHERE clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public WhereFilters WhereFilter { get; set; }
    /// <summary>
    /// Get/Set a ORDER BY clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public OrderByFilters OrderByFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Public Property Entity Class
        private TableColumnInformationPDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public TableColumnInformationPDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "TableColumnInformationPDSAData";
      DBObjectName = "GCS.TableColumnInformation";
      SchemaName = "GCS";
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;
      
      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes all of the Data Columns with valid data for each field in the table.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DatabaseName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.TableSchema);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.TableName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.ColumnName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.IsNullable);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.ColumnOrdinalPosition);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DefaultValue);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DataType);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.CharacterMaximumLength);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.NumericPrecision);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.NumericPrecisionRadix);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.NumericScale);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DateTimePrecision);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.IsComputed);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DatabaseName).Value = Entity.DatabaseName;
      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DatabaseName).SetAsNull == true)
        Entity.DatabaseName = string.Empty;
      ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.TableSchema).Value = Entity.TableSchema;
      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.TableSchema).SetAsNull == true)
        Entity.TableSchema = string.Empty;
      ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.TableName).Value = Entity.TableName;
      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.TableName).SetAsNull == true)
        Entity.TableName = string.Empty;
      ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.ColumnName).Value = Entity.ColumnName;
      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.ColumnName).SetAsNull == true)
        Entity.ColumnName = string.Empty;
      ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.IsNullable).Value = Entity.IsNullable;
      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.IsNullable).SetAsNull == true)
        Entity.IsNullable = string.Empty;
      ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.ColumnOrdinalPosition).Value = Entity.ColumnOrdinalPosition;
      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.ColumnOrdinalPosition).SetAsNull == true)
        Entity.ColumnOrdinalPosition = 0;
      ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DefaultValue).Value = Entity.DefaultValue;
      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DefaultValue).SetAsNull == true)
        Entity.DefaultValue = string.Empty;
      ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DataType).Value = Entity.DataType;
      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DataType).SetAsNull == true)
        Entity.DataType = string.Empty;
      ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.CharacterMaximumLength).Value = Entity.CharacterMaximumLength;
      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.CharacterMaximumLength).SetAsNull == true)
        Entity.CharacterMaximumLength = 0;
      ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.NumericPrecision).Value = Entity.NumericPrecision;
      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.NumericPrecision).SetAsNull == true)
        Entity.NumericPrecision = 0;
      ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.NumericPrecisionRadix).Value = Entity.NumericPrecisionRadix;
      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.NumericPrecisionRadix).SetAsNull == true)
        Entity.NumericPrecisionRadix = 0;
      ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.NumericScale).Value = Entity.NumericScale;
      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.NumericScale).SetAsNull == true)
        Entity.NumericScale = 0;
      ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DateTimePrecision).Value = Entity.DateTimePrecision;
      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DateTimePrecision).SetAsNull == true)
        Entity.DateTimePrecision = 0;
      ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.IsComputed).Value = Entity.IsComputed;
      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.IsComputed).SetAsNull == true)
        Entity.IsComputed = 0;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DatabaseName).IsNull == false)
        Entity.DatabaseName = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DatabaseName).GetAsString();
      else
        Entity.DatabaseName = string.Empty;
      Entity.SetOriginalValueForProperty(TableColumnInformationPDSAValidator.ColumnNames.DatabaseName, ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DatabaseName).Value);

      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.TableSchema).IsNull == false)
        Entity.TableSchema = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.TableSchema).GetAsString();
      else
        Entity.TableSchema = string.Empty;
      Entity.SetOriginalValueForProperty(TableColumnInformationPDSAValidator.ColumnNames.TableSchema, ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.TableSchema).Value);

      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.TableName).IsNull == false)
        Entity.TableName = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.TableName).GetAsString();
      else
        Entity.TableName = string.Empty;
      Entity.SetOriginalValueForProperty(TableColumnInformationPDSAValidator.ColumnNames.TableName, ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.TableName).Value);

      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.ColumnName).IsNull == false)
        Entity.ColumnName = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.ColumnName).GetAsString();
      else
        Entity.ColumnName = string.Empty;
      Entity.SetOriginalValueForProperty(TableColumnInformationPDSAValidator.ColumnNames.ColumnName, ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.ColumnName).Value);

      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.IsNullable).IsNull == false)
        Entity.IsNullable = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.IsNullable).GetAsString();
      else
        Entity.IsNullable = string.Empty;
      Entity.SetOriginalValueForProperty(TableColumnInformationPDSAValidator.ColumnNames.IsNullable, ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.IsNullable).Value);

      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.ColumnOrdinalPosition).IsNull == false)
        Entity.ColumnOrdinalPosition = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.ColumnOrdinalPosition).GetAsInteger();
      else
        Entity.ColumnOrdinalPosition = 0;
      Entity.SetOriginalValueForProperty(TableColumnInformationPDSAValidator.ColumnNames.ColumnOrdinalPosition, ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.ColumnOrdinalPosition).Value);

      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DefaultValue).IsNull == false)
        Entity.DefaultValue = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DefaultValue).GetAsString();
      else
        Entity.DefaultValue = string.Empty;
      Entity.SetOriginalValueForProperty(TableColumnInformationPDSAValidator.ColumnNames.DefaultValue, ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DefaultValue).Value);

      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DataType).IsNull == false)
        Entity.DataType = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DataType).GetAsString();
      else
        Entity.DataType = string.Empty;
      Entity.SetOriginalValueForProperty(TableColumnInformationPDSAValidator.ColumnNames.DataType, ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DataType).Value);

      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.CharacterMaximumLength).IsNull == false)
        Entity.CharacterMaximumLength = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.CharacterMaximumLength).GetAsInteger();
      else
        Entity.CharacterMaximumLength = 0;
      Entity.SetOriginalValueForProperty(TableColumnInformationPDSAValidator.ColumnNames.CharacterMaximumLength, ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.CharacterMaximumLength).Value);

      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.NumericPrecision).IsNull == false)
        Entity.NumericPrecision = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.NumericPrecision).GetAsShort();
      else
        Entity.NumericPrecision = 0;
      Entity.SetOriginalValueForProperty(TableColumnInformationPDSAValidator.ColumnNames.NumericPrecision, ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.NumericPrecision).Value);

      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.NumericPrecisionRadix).IsNull == false)
        Entity.NumericPrecisionRadix = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.NumericPrecisionRadix).GetAsShort();
      else
        Entity.NumericPrecisionRadix = 0;
      Entity.SetOriginalValueForProperty(TableColumnInformationPDSAValidator.ColumnNames.NumericPrecisionRadix, ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.NumericPrecisionRadix).Value);

      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.NumericScale).IsNull == false)
        Entity.NumericScale = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.NumericScale).GetAsInteger();
      else
        Entity.NumericScale = 0;
      Entity.SetOriginalValueForProperty(TableColumnInformationPDSAValidator.ColumnNames.NumericScale, ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.NumericScale).Value);

      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DateTimePrecision).IsNull == false)
        Entity.DateTimePrecision = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DateTimePrecision).GetAsShort();
      else
        Entity.DateTimePrecision = 0;
      Entity.SetOriginalValueForProperty(TableColumnInformationPDSAValidator.ColumnNames.DateTimePrecision, ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.DateTimePrecision).Value);

      if (ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.IsComputed).IsNull == false)
        Entity.IsComputed = ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.IsComputed).GetAsInteger();
      else
        Entity.IsComputed = 0;
      Entity.SetOriginalValueForProperty(TableColumnInformationPDSAValidator.ColumnNames.IsComputed, ValidatorObject.Properties.GetByName(TableColumnInformationPDSAValidator.ColumnNames.IsComputed).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>TableColumnInformationPDSA</returns>
    public TableColumnInformationPDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new TableColumnInformationPDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          sb.Append(" SELECT DatabaseName, TableSchema, TableName, ColumnName, IsNullable, ColumnOrdinalPosition, DefaultValue, DataType, CharacterMaximumLength, NumericPrecision, NumericPrecisionRadix, NumericScale, DateTimePrecision, IsComputed FROM GCS.TableColumnInformation");

          
          break;
        case SelectFilters.Search:
          sb.Append(" SELECT DatabaseName, TableSchema, TableName, ColumnName, IsNullable, ColumnOrdinalPosition, DefaultValue, DataType, CharacterMaximumLength, NumericPrecision, NumericPrecisionRadix, NumericScale, DateTimePrecision, IsComputed FROM GCS.TableColumnInformation WHERE (@DatabaseName IS NULL OR DatabaseName LIKE @DatabaseName + '%')");

          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL that will count the number of rows returned from this view.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          sb.Append(" SELECT Count(*) As NumRecs FROM GCS.TableColumnInformation");

          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      sb.Append(WhereClauseSQL());
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion
    
    #region WhereClauseSQL Method
    /// <summary>
    /// Builds the WHERE clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string WhereClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (WhereFilter)
      {
        case WhereFilters.Custom:
          sb.Append(" " + WhereCustom);

          break;

        case WhereFilters.None:
          //  Do nothing

          break;

        case WhereFilters.DatabaseName:
          sb.Append(" WHERE DatabaseName = @DatabaseName");

          
          break;
        case WhereFilters.LikeDatabaseName:
          sb.Append(" WHERE DatabaseName LIKE @DatabaseName + '%'");

          
          break;
      }
      
      return sb.ToString();
    }
    #endregion

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
         
          break;
        case SelectFilters.Search:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DatabaseName", DbType.String, Entity.DatabaseName));
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion

    #region WhereClauseFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any WHERE clause parameters.
    /// </summary>
    protected override void WhereClauseFillInParameters()
    {
      switch (WhereFilter)
      {
        case WhereFilters.DatabaseName:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DatabaseName", DbType.String, Entity.DatabaseName));
         
          break;
        case WhereFilters.LikeDatabaseName:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DatabaseName", DbType.String, Entity.DatabaseName));
         
          break;
      }
    }
    #endregion

    #region OrderByClauseSQL Method
    /// <summary>
    /// Builds the ORDER BY clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string OrderByClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (OrderByFilter)
      {
        case OrderByFilters.None:
          //  Do Nothing

          break;

        case OrderByFilters.Custom:
          sb.Append(" " + OrderByCustom);

          break;
          
        case OrderByFilters.DatabaseName:
          sb.Append(" ORDER BY DatabaseName");

          
          break;
      }

      return sb.ToString();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the TableColumnInformationPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'DatabaseName'
    /// </summary>
    public static string DatabaseName = "DatabaseName";
    /// <summary>
    /// Returns 'TableSchema'
    /// </summary>
    public static string TableSchema = "TableSchema";
    /// <summary>
    /// Returns 'TableName'
    /// </summary>
    public static string TableName = "TableName";
    /// <summary>
    /// Returns 'ColumnName'
    /// </summary>
    public static string ColumnName = "ColumnName";
    /// <summary>
    /// Returns 'IsNullable'
    /// </summary>
    public static string IsNullable = "IsNullable";
    /// <summary>
    /// Returns 'ColumnOrdinalPosition'
    /// </summary>
    public static string ColumnOrdinalPosition = "ColumnOrdinalPosition";
    /// <summary>
    /// Returns 'DefaultValue'
    /// </summary>
    public static string DefaultValue = "DefaultValue";
    /// <summary>
    /// Returns 'DataType'
    /// </summary>
    public static string DataType = "DataType";
    /// <summary>
    /// Returns 'CharacterMaximumLength'
    /// </summary>
    public static string CharacterMaximumLength = "CharacterMaximumLength";
    /// <summary>
    /// Returns 'NumericPrecision'
    /// </summary>
    public static string NumericPrecision = "NumericPrecision";
    /// <summary>
    /// Returns 'NumericPrecisionRadix'
    /// </summary>
    public static string NumericPrecisionRadix = "NumericPrecisionRadix";
    /// <summary>
    /// Returns 'NumericScale'
    /// </summary>
    public static string NumericScale = "NumericScale";
    /// <summary>
    /// Returns 'DateTimePrecision'
    /// </summary>
    public static string DateTimePrecision = "DateTimePrecision";
    /// <summary>
    /// Returns 'IsComputed'
    /// </summary>
    public static string IsComputed = "IsComputed";
    }
    #endregion
  }
}
