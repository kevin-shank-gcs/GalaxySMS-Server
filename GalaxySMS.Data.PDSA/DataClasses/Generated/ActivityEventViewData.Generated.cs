using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Select data from the ActivityEventViewPDSA view.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class ActivityEventViewPDSAData : PDSADataClassReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the ActivityEventViewPDSAData class
    /// </summary>
    public ActivityEventViewPDSAData() : base()
    {
      Entity = new ActivityEventViewPDSA();
      ValidatorObject = new ActivityEventViewPDSAValidator(Entity);

      Init();
    }
    
    /// <summary>
    /// Constructor for the ActivityEventViewPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a ActivityEventViewPDSA</param>
    public ActivityEventViewPDSAData(PDSADataProvider dataProvider,
      ActivityEventViewPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new ActivityEventViewPDSAValidator(Entity);

      Init();
    }
     
    /// <summary>
    /// Constructor for the ActivityEventViewPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a ActivityEventViewPDSA</param>
    /// <param name="validator">An instance of a ActivityEventViewPDSAValidator</param>
    public ActivityEventViewPDSAData(PDSADataProvider dataProvider,
      ActivityEventViewPDSA entity, ActivityEventViewPDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// A Custom SelectFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a WHERE statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum WhereFilters
    {
      /// <summary>
      /// No WhereFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom WhereFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'ActivityDateTime' WhereFilter
      /// </summary>
      ActivityDateTime
      ,
      /// <summary>
      /// 'LikeActivityDateTime' WhereFilter
      /// </summary>
      LikeActivityDateTime
    }

    /// <summary>
    /// Enumeration for selecting an ORDER BY statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum OrderByFilters
    {
      /// <summary>
      /// No OrderByFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'ActivityDateTime' OrderByFilter
      /// </summary>
      ActivityDateTime
    }
    
    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }
    /// <summary>
    /// Get/Set a WHERE clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public WhereFilters WhereFilter { get; set; }
    /// <summary>
    /// Get/Set a ORDER BY clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public OrderByFilters OrderByFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Public Property Entity Class
        private ActivityEventViewPDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public ActivityEventViewPDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "ActivityEventViewPDSAData";
      DBObjectName = "GCS.ActivityEventView";
      SchemaName = "GCS";
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;
      
      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes all of the Data Columns with valid data for each field in the table.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ActivityDateTime);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = null;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ActivityDateTimeUTC);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = null;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EventTypeMessage);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ForeColor);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ForeColorHex);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.DeviceName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.SiteName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EntityId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.DeviceUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EventTypeUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.DeviceType);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.LastName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.FirstName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.IsTraced);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.CredentialDescription);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PersonUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.CredentialUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterGroupId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PanelNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.InputOutputGroupName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.InputOutputGroupNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.CpuNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.BoardNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.SectionNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ModuleNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.NodeNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ActivityEventUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AlarmPriority);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ResponseRequired);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AcknowledgedTime);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = null;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AcknowledgeComment);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.IsAcknowledgeable);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.IsAcknowledged);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AcknowledgedByUser);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EntityName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EntityType);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AckCount);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.TotalRecordCount);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PageNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PageSize);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ActivityDateTime).Value = Entity.ActivityDateTime;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ActivityDateTime).SetAsNull == true)
        Entity.ActivityDateTime = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ActivityDateTimeUTC).Value = Entity.ActivityDateTimeUTC;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ActivityDateTimeUTC).SetAsNull == true)
        Entity.ActivityDateTimeUTC = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EventTypeMessage).Value = Entity.EventTypeMessage;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EventTypeMessage).SetAsNull == true)
        Entity.EventTypeMessage = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ForeColor).Value = Entity.ForeColor;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ForeColor).SetAsNull == true)
        Entity.ForeColor = 0;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ForeColorHex).Value = Entity.ForeColorHex;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ForeColorHex).SetAsNull == true)
        Entity.ForeColorHex = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.DeviceName).Value = Entity.DeviceName;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.DeviceName).SetAsNull == true)
        Entity.DeviceName = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.SiteName).Value = Entity.SiteName;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.SiteName).SetAsNull == true)
        Entity.SiteName = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EntityId).Value = Entity.EntityId;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EntityId).SetAsNull == true)
        Entity.EntityId = Guid.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.DeviceUid).Value = Entity.DeviceUid;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.DeviceUid).SetAsNull == true)
        Entity.DeviceUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EventTypeUid).Value = Entity.EventTypeUid;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EventTypeUid).SetAsNull == true)
        Entity.EventTypeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.DeviceType).Value = Entity.DeviceType;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.DeviceType).SetAsNull == true)
        Entity.DeviceType = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.LastName).Value = Entity.LastName;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.LastName).SetAsNull == true)
        Entity.LastName = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.FirstName).Value = Entity.FirstName;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.FirstName).SetAsNull == true)
        Entity.FirstName = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.IsTraced).Value = Entity.IsTraced;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.IsTraced).SetAsNull == true)
        Entity.IsTraced = false;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.CredentialDescription).Value = Entity.CredentialDescription;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.CredentialDescription).SetAsNull == true)
        Entity.CredentialDescription = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PersonUid).Value = Entity.PersonUid;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PersonUid).SetAsNull == true)
        Entity.PersonUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.CredentialUid).Value = Entity.CredentialUid;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.CredentialUid).SetAsNull == true)
        Entity.CredentialUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterUid).Value = Entity.ClusterUid;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterUid).SetAsNull == true)
        Entity.ClusterUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterNumber).Value = Entity.ClusterNumber;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterNumber).SetAsNull == true)
        Entity.ClusterNumber = 0;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterName).Value = Entity.ClusterName;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterName).SetAsNull == true)
        Entity.ClusterName = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterGroupId).Value = Entity.ClusterGroupId;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterGroupId).SetAsNull == true)
        Entity.ClusterGroupId = 0;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PanelNumber).Value = Entity.PanelNumber;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PanelNumber).SetAsNull == true)
        Entity.PanelNumber = 0;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.InputOutputGroupName).Value = Entity.InputOutputGroupName;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.InputOutputGroupName).SetAsNull == true)
        Entity.InputOutputGroupName = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.InputOutputGroupNumber).Value = Entity.InputOutputGroupNumber;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.InputOutputGroupNumber).SetAsNull == true)
        Entity.InputOutputGroupNumber = 0;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.CpuNumber).Value = Entity.CpuNumber;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.CpuNumber).SetAsNull == true)
        Entity.CpuNumber = 0;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.BoardNumber).Value = Entity.BoardNumber;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.BoardNumber).SetAsNull == true)
        Entity.BoardNumber = 0;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.SectionNumber).Value = Entity.SectionNumber;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.SectionNumber).SetAsNull == true)
        Entity.SectionNumber = 0;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ModuleNumber).Value = Entity.ModuleNumber;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ModuleNumber).SetAsNull == true)
        Entity.ModuleNumber = 0;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.NodeNumber).Value = Entity.NodeNumber;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.NodeNumber).SetAsNull == true)
        Entity.NodeNumber = 0;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ActivityEventUid).Value = Entity.ActivityEventUid;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ActivityEventUid).SetAsNull == true)
        Entity.ActivityEventUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AlarmPriority).Value = Entity.AlarmPriority;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AlarmPriority).SetAsNull == true)
        Entity.AlarmPriority = 0;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ResponseRequired).Value = Entity.ResponseRequired;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ResponseRequired).SetAsNull == true)
        Entity.ResponseRequired = false;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AcknowledgedTime).Value = Entity.AcknowledgedTime;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AcknowledgedTime).SetAsNull == true)
        Entity.AcknowledgedTime = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AcknowledgeComment).Value = Entity.AcknowledgeComment;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AcknowledgeComment).SetAsNull == true)
        Entity.AcknowledgeComment = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.IsAcknowledgeable).Value = Entity.IsAcknowledgeable;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.IsAcknowledgeable).SetAsNull == true)
        Entity.IsAcknowledgeable = 0;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.IsAcknowledged).Value = Entity.IsAcknowledged;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.IsAcknowledged).SetAsNull == true)
        Entity.IsAcknowledged = 0;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AcknowledgedByUser).Value = Entity.AcknowledgedByUser;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AcknowledgedByUser).SetAsNull == true)
        Entity.AcknowledgedByUser = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EntityName).Value = Entity.EntityName;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EntityName).SetAsNull == true)
        Entity.EntityName = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EntityType).Value = Entity.EntityType;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EntityType).SetAsNull == true)
        Entity.EntityType = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AckCount).Value = Entity.AckCount;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AckCount).SetAsNull == true)
        Entity.AckCount = 0;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.TotalRecordCount).Value = Entity.TotalRecordCount;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.TotalRecordCount).SetAsNull == true)
        Entity.TotalRecordCount = 0;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PageNumber).Value = Entity.PageNumber;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PageNumber).SetAsNull == true)
        Entity.PageNumber = 0;
      ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PageSize).Value = Entity.PageSize;
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PageSize).SetAsNull == true)
        Entity.PageSize = 0;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ActivityDateTime).IsNull == false)
        Entity.ActivityDateTime = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ActivityDateTime).GetAsDateTimeOffset();
      else
        Entity.ActivityDateTime = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.ActivityDateTime, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ActivityDateTime).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ActivityDateTimeUTC).IsNull == false)
        Entity.ActivityDateTimeUTC = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ActivityDateTimeUTC).GetAsDateTimeOffset();
      else
        Entity.ActivityDateTimeUTC = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.ActivityDateTimeUTC, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ActivityDateTimeUTC).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EventTypeMessage).IsNull == false)
        Entity.EventTypeMessage = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EventTypeMessage).GetAsString();
      else
        Entity.EventTypeMessage = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.EventTypeMessage, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EventTypeMessage).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ForeColor).IsNull == false)
        Entity.ForeColor = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ForeColor).GetAsInteger();
      else
        Entity.ForeColor = 0;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.ForeColor, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ForeColor).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ForeColorHex).IsNull == false)
        Entity.ForeColorHex = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ForeColorHex).GetAsString();
      else
        Entity.ForeColorHex = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.ForeColorHex, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ForeColorHex).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.DeviceName).IsNull == false)
        Entity.DeviceName = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.DeviceName).GetAsString();
      else
        Entity.DeviceName = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.DeviceName, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.DeviceName).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.SiteName).IsNull == false)
        Entity.SiteName = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.SiteName).GetAsString();
      else
        Entity.SiteName = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.SiteName, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.SiteName).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EntityId).IsNull == false)
        Entity.EntityId = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EntityId).GetAsGuid();
      else
        Entity.EntityId = Guid.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.EntityId, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EntityId).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.DeviceUid).IsNull == false)
        Entity.DeviceUid = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.DeviceUid).GetAsGuid();
      else
        Entity.DeviceUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.DeviceUid, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.DeviceUid).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EventTypeUid).IsNull == false)
        Entity.EventTypeUid = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EventTypeUid).GetAsGuid();
      else
        Entity.EventTypeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.EventTypeUid, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EventTypeUid).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.DeviceType).IsNull == false)
        Entity.DeviceType = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.DeviceType).GetAsString();
      else
        Entity.DeviceType = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.DeviceType, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.DeviceType).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.LastName).IsNull == false)
        Entity.LastName = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.LastName).GetAsString();
      else
        Entity.LastName = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.LastName, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.LastName).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.FirstName).IsNull == false)
        Entity.FirstName = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.FirstName).GetAsString();
      else
        Entity.FirstName = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.FirstName, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.FirstName).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.IsTraced).IsNull == false)
        Entity.IsTraced = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.IsTraced).GetAsBool();
      else
        Entity.IsTraced = false;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.IsTraced, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.IsTraced).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.CredentialDescription).IsNull == false)
        Entity.CredentialDescription = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.CredentialDescription).GetAsString();
      else
        Entity.CredentialDescription = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.CredentialDescription, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.CredentialDescription).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PersonUid).IsNull == false)
        Entity.PersonUid = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PersonUid).GetAsGuid();
      else
        Entity.PersonUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.PersonUid, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PersonUid).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.CredentialUid).IsNull == false)
        Entity.CredentialUid = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.CredentialUid).GetAsGuid();
      else
        Entity.CredentialUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.CredentialUid, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.CredentialUid).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterUid).IsNull == false)
        Entity.ClusterUid = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterUid).GetAsGuid();
      else
        Entity.ClusterUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.ClusterUid, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterUid).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterNumber).IsNull == false)
        Entity.ClusterNumber = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterNumber).GetAsInteger();
      else
        Entity.ClusterNumber = 0;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.ClusterNumber, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterName).IsNull == false)
        Entity.ClusterName = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterName).GetAsString();
      else
        Entity.ClusterName = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.ClusterName, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterName).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterGroupId).IsNull == false)
        Entity.ClusterGroupId = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterGroupId).GetAsInteger();
      else
        Entity.ClusterGroupId = 0;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.ClusterGroupId, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ClusterGroupId).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PanelNumber).IsNull == false)
        Entity.PanelNumber = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PanelNumber).GetAsInteger();
      else
        Entity.PanelNumber = 0;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.PanelNumber, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PanelNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.InputOutputGroupName).IsNull == false)
        Entity.InputOutputGroupName = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.InputOutputGroupName).GetAsString();
      else
        Entity.InputOutputGroupName = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.InputOutputGroupName, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.InputOutputGroupName).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.InputOutputGroupNumber).IsNull == false)
        Entity.InputOutputGroupNumber = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.InputOutputGroupNumber).GetAsInteger();
      else
        Entity.InputOutputGroupNumber = 0;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.InputOutputGroupNumber, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.InputOutputGroupNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.CpuNumber).IsNull == false)
        Entity.CpuNumber = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.CpuNumber).GetAsShort();
      else
        Entity.CpuNumber = 0;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.CpuNumber, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.CpuNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.BoardNumber).IsNull == false)
        Entity.BoardNumber = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.BoardNumber).GetAsShort();
      else
        Entity.BoardNumber = 0;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.BoardNumber, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.BoardNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.SectionNumber).IsNull == false)
        Entity.SectionNumber = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.SectionNumber).GetAsShort();
      else
        Entity.SectionNumber = 0;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.SectionNumber, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.SectionNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ModuleNumber).IsNull == false)
        Entity.ModuleNumber = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ModuleNumber).GetAsShort();
      else
        Entity.ModuleNumber = 0;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.ModuleNumber, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ModuleNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.NodeNumber).IsNull == false)
        Entity.NodeNumber = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.NodeNumber).GetAsShort();
      else
        Entity.NodeNumber = 0;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.NodeNumber, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.NodeNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ActivityEventUid).IsNull == false)
        Entity.ActivityEventUid = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ActivityEventUid).GetAsGuid();
      else
        Entity.ActivityEventUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.ActivityEventUid, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ActivityEventUid).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AlarmPriority).IsNull == false)
        Entity.AlarmPriority = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AlarmPriority).GetAsInteger();
      else
        Entity.AlarmPriority = 0;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.AlarmPriority, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AlarmPriority).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ResponseRequired).IsNull == false)
        Entity.ResponseRequired = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ResponseRequired).GetAsBool();
      else
        Entity.ResponseRequired = false;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.ResponseRequired, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.ResponseRequired).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AcknowledgedTime).IsNull == false)
        Entity.AcknowledgedTime = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AcknowledgedTime).GetAsDateTimeOffset();
      else
        Entity.AcknowledgedTime = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.AcknowledgedTime, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AcknowledgedTime).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AcknowledgeComment).IsNull == false)
        Entity.AcknowledgeComment = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AcknowledgeComment).GetAsString();
      else
        Entity.AcknowledgeComment = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.AcknowledgeComment, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AcknowledgeComment).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.IsAcknowledgeable).IsNull == false)
        Entity.IsAcknowledgeable = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.IsAcknowledgeable).GetAsInteger();
      else
        Entity.IsAcknowledgeable = 0;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.IsAcknowledgeable, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.IsAcknowledgeable).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.IsAcknowledged).IsNull == false)
        Entity.IsAcknowledged = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.IsAcknowledged).GetAsInteger();
      else
        Entity.IsAcknowledged = 0;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.IsAcknowledged, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.IsAcknowledged).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AcknowledgedByUser).IsNull == false)
        Entity.AcknowledgedByUser = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AcknowledgedByUser).GetAsString();
      else
        Entity.AcknowledgedByUser = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.AcknowledgedByUser, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AcknowledgedByUser).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EntityName).IsNull == false)
        Entity.EntityName = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EntityName).GetAsString();
      else
        Entity.EntityName = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.EntityName, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EntityName).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EntityType).IsNull == false)
        Entity.EntityType = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EntityType).GetAsString();
      else
        Entity.EntityType = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.EntityType, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.EntityType).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AckCount).IsNull == false)
        Entity.AckCount = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AckCount).GetAsInteger();
      else
        Entity.AckCount = 0;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.AckCount, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.AckCount).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.TotalRecordCount).IsNull == false)
        Entity.TotalRecordCount = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.TotalRecordCount).GetAsInteger();
      else
        Entity.TotalRecordCount = 0;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.TotalRecordCount, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.TotalRecordCount).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PageNumber).IsNull == false)
        Entity.PageNumber = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PageNumber).GetAsInteger();
      else
        Entity.PageNumber = 0;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.PageNumber, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PageNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PageSize).IsNull == false)
        Entity.PageSize = ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PageSize).GetAsInteger();
      else
        Entity.PageSize = 0;
      Entity.SetOriginalValueForProperty(ActivityEventViewPDSAValidator.ColumnNames.PageSize, ValidatorObject.Properties.GetByName(ActivityEventViewPDSAValidator.ColumnNames.PageSize).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>ActivityEventViewPDSA</returns>
    public ActivityEventViewPDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new ActivityEventViewPDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          sb.Append(" SELECT ActivityDateTime, ActivityDateTimeUTC, EventTypeMessage, ForeColor, ForeColorHex, DeviceName, SiteName, EntityId, DeviceUid, EventTypeUid, DeviceType, LastName, FirstName, IsTraced, CredentialDescription, PersonUid, CredentialUid, ClusterUid, ClusterNumber, ClusterName, ClusterGroupId, PanelNumber, InputOutputGroupName, InputOutputGroupNumber, CpuNumber, BoardNumber, SectionNumber, ModuleNumber, NodeNumber, ActivityEventUid, AlarmPriority, ResponseRequired, AcknowledgedTime, AcknowledgeComment, IsAcknowledgeable, IsAcknowledged, AcknowledgedByUser, EntityName, EntityType, AckCount, TotalRecordCount, PageNumber, PageSize FROM GCS.ActivityEventView");

          
          break;
        case SelectFilters.Search:
          sb.Append(" SELECT ActivityDateTime, ActivityDateTimeUTC, EventTypeMessage, ForeColor, ForeColorHex, DeviceName, SiteName, EntityId, DeviceUid, EventTypeUid, DeviceType, LastName, FirstName, IsTraced, CredentialDescription, PersonUid, CredentialUid, ClusterUid, ClusterNumber, ClusterName, ClusterGroupId, PanelNumber, InputOutputGroupName, InputOutputGroupNumber, CpuNumber, BoardNumber, SectionNumber, ModuleNumber, NodeNumber, ActivityEventUid, AlarmPriority, ResponseRequired, AcknowledgedTime, AcknowledgeComment, IsAcknowledgeable, IsAcknowledged, AcknowledgedByUser, EntityName, EntityType, AckCount, TotalRecordCount, PageNumber, PageSize FROM GCS.ActivityEventView WHERE (@ActivityDateTime IS NULL OR ActivityDateTime = @ActivityDateTime )");

          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL that will count the number of rows returned from this view.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          sb.Append(" SELECT Count(*) As NumRecs FROM GCS.ActivityEventView");

          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      sb.Append(WhereClauseSQL());
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion
    
    #region WhereClauseSQL Method
    /// <summary>
    /// Builds the WHERE clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string WhereClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (WhereFilter)
      {
        case WhereFilters.Custom:
          sb.Append(" " + WhereCustom);

          break;

        case WhereFilters.None:
          //  Do nothing

          break;

        case WhereFilters.ActivityDateTime:
          sb.Append(" WHERE ActivityDateTime = @ActivityDateTime");

          
          break;
        case WhereFilters.LikeActivityDateTime:
          sb.Append(" WHERE ActivityDateTime LIKE @ActivityDateTime + '%'");

          
          break;
      }
      
      return sb.ToString();
    }
    #endregion

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
         
          break;
        case SelectFilters.Search:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ActivityDateTime", DbType.DateTimeOffset, Entity.ActivityDateTime));
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion

    #region WhereClauseFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any WHERE clause parameters.
    /// </summary>
    protected override void WhereClauseFillInParameters()
    {
      switch (WhereFilter)
      {
        case WhereFilters.ActivityDateTime:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ActivityDateTime", DbType.DateTimeOffset, Entity.ActivityDateTime));
         
          break;
        case WhereFilters.LikeActivityDateTime:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ActivityDateTime", DbType.DateTimeOffset, Entity.ActivityDateTime));
         
          break;
      }
    }
    #endregion

    #region OrderByClauseSQL Method
    /// <summary>
    /// Builds the ORDER BY clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string OrderByClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (OrderByFilter)
      {
        case OrderByFilters.None:
          //  Do Nothing

          break;

        case OrderByFilters.Custom:
          sb.Append(" " + OrderByCustom);

          break;
          
        case OrderByFilters.ActivityDateTime:
          sb.Append(" ORDER BY ActivityDateTime");

          
          break;
      }

      return sb.ToString();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the ActivityEventViewPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'ActivityDateTime'
    /// </summary>
    public static string ActivityDateTime = "ActivityDateTime";
    /// <summary>
    /// Returns 'ActivityDateTimeUTC'
    /// </summary>
    public static string ActivityDateTimeUTC = "ActivityDateTimeUTC";
    /// <summary>
    /// Returns 'EventTypeMessage'
    /// </summary>
    public static string EventTypeMessage = "EventTypeMessage";
    /// <summary>
    /// Returns 'ForeColor'
    /// </summary>
    public static string ForeColor = "ForeColor";
    /// <summary>
    /// Returns 'ForeColorHex'
    /// </summary>
    public static string ForeColorHex = "ForeColorHex";
    /// <summary>
    /// Returns 'DeviceName'
    /// </summary>
    public static string DeviceName = "DeviceName";
    /// <summary>
    /// Returns 'SiteName'
    /// </summary>
    public static string SiteName = "SiteName";
    /// <summary>
    /// Returns 'EntityId'
    /// </summary>
    public static string EntityId = "EntityId";
    /// <summary>
    /// Returns 'DeviceUid'
    /// </summary>
    public static string DeviceUid = "DeviceUid";
    /// <summary>
    /// Returns 'EventTypeUid'
    /// </summary>
    public static string EventTypeUid = "EventTypeUid";
    /// <summary>
    /// Returns 'DeviceType'
    /// </summary>
    public static string DeviceType = "DeviceType";
    /// <summary>
    /// Returns 'LastName'
    /// </summary>
    public static string LastName = "LastName";
    /// <summary>
    /// Returns 'FirstName'
    /// </summary>
    public static string FirstName = "FirstName";
    /// <summary>
    /// Returns 'IsTraced'
    /// </summary>
    public static string IsTraced = "IsTraced";
    /// <summary>
    /// Returns 'CredentialDescription'
    /// </summary>
    public static string CredentialDescription = "CredentialDescription";
    /// <summary>
    /// Returns 'PersonUid'
    /// </summary>
    public static string PersonUid = "PersonUid";
    /// <summary>
    /// Returns 'CredentialUid'
    /// </summary>
    public static string CredentialUid = "CredentialUid";
    /// <summary>
    /// Returns 'ClusterUid'
    /// </summary>
    public static string ClusterUid = "ClusterUid";
    /// <summary>
    /// Returns 'ClusterNumber'
    /// </summary>
    public static string ClusterNumber = "ClusterNumber";
    /// <summary>
    /// Returns 'ClusterName'
    /// </summary>
    public static string ClusterName = "ClusterName";
    /// <summary>
    /// Returns 'ClusterGroupId'
    /// </summary>
    public static string ClusterGroupId = "ClusterGroupId";
    /// <summary>
    /// Returns 'PanelNumber'
    /// </summary>
    public static string PanelNumber = "PanelNumber";
    /// <summary>
    /// Returns 'InputOutputGroupName'
    /// </summary>
    public static string InputOutputGroupName = "InputOutputGroupName";
    /// <summary>
    /// Returns 'InputOutputGroupNumber'
    /// </summary>
    public static string InputOutputGroupNumber = "InputOutputGroupNumber";
    /// <summary>
    /// Returns 'CpuNumber'
    /// </summary>
    public static string CpuNumber = "CpuNumber";
    /// <summary>
    /// Returns 'BoardNumber'
    /// </summary>
    public static string BoardNumber = "BoardNumber";
    /// <summary>
    /// Returns 'SectionNumber'
    /// </summary>
    public static string SectionNumber = "SectionNumber";
    /// <summary>
    /// Returns 'ModuleNumber'
    /// </summary>
    public static string ModuleNumber = "ModuleNumber";
    /// <summary>
    /// Returns 'NodeNumber'
    /// </summary>
    public static string NodeNumber = "NodeNumber";
    /// <summary>
    /// Returns 'ActivityEventUid'
    /// </summary>
    public static string ActivityEventUid = "ActivityEventUid";
    /// <summary>
    /// Returns 'AlarmPriority'
    /// </summary>
    public static string AlarmPriority = "AlarmPriority";
    /// <summary>
    /// Returns 'ResponseRequired'
    /// </summary>
    public static string ResponseRequired = "ResponseRequired";
    /// <summary>
    /// Returns 'AcknowledgedTime'
    /// </summary>
    public static string AcknowledgedTime = "AcknowledgedTime";
    /// <summary>
    /// Returns 'AcknowledgeComment'
    /// </summary>
    public static string AcknowledgeComment = "AcknowledgeComment";
    /// <summary>
    /// Returns 'IsAcknowledgeable'
    /// </summary>
    public static string IsAcknowledgeable = "IsAcknowledgeable";
    /// <summary>
    /// Returns 'IsAcknowledged'
    /// </summary>
    public static string IsAcknowledged = "IsAcknowledged";
    /// <summary>
    /// Returns 'AcknowledgedByUser'
    /// </summary>
    public static string AcknowledgedByUser = "AcknowledgedByUser";
    /// <summary>
    /// Returns 'EntityName'
    /// </summary>
    public static string EntityName = "EntityName";
    /// <summary>
    /// Returns 'EntityType'
    /// </summary>
    public static string EntityType = "EntityType";
    /// <summary>
    /// Returns 'AckCount'
    /// </summary>
    public static string AckCount = "AckCount";
    /// <summary>
    /// Returns 'TotalRecordCount'
    /// </summary>
    public static string TotalRecordCount = "TotalRecordCount";
    /// <summary>
    /// Returns 'PageNumber'
    /// </summary>
    public static string PageNumber = "PageNumber";
    /// <summary>
    /// Returns 'PageSize'
    /// </summary>
    public static string PageSize = "PageSize";
    }
    #endregion
  }
}
