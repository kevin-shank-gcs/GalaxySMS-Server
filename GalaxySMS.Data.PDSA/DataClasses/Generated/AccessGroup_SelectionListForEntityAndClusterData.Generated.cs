using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// This class calls the stored procedure AccessGroup_SelectionListForEntityAndClusterPDSA
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public class AccessGroup_SelectionListForEntityAndClusterPDSAData : PDSAStoredProcReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the AccessGroup_SelectionListForEntityAndClusterPDSAData class
    /// </summary>
    public AccessGroup_SelectionListForEntityAndClusterPDSAData() : base()
    {
      Entity = new AccessGroup_SelectionListForEntityAndClusterPDSA();
      ValidatorObject = new  AccessGroup_SelectionListForEntityAndClusterPDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the AccessGroup_SelectionListForEntityAndClusterPDSAData class
    /// </summary>
    /// <param name="entity">An instance of a AccessGroup_SelectionListForEntityAndClusterPDSA</param>
    public AccessGroup_SelectionListForEntityAndClusterPDSAData(AccessGroup_SelectionListForEntityAndClusterPDSA entity) : base()
    {
      Entity = entity;
      ValidatorObject = new AccessGroup_SelectionListForEntityAndClusterPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the AccessGroup_SelectionListForEntityAndClusterPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a AccessGroup_SelectionListForEntityAndClusterPDSA</param>
    public AccessGroup_SelectionListForEntityAndClusterPDSAData(PDSADataProvider dataProvider,
      AccessGroup_SelectionListForEntityAndClusterPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new  AccessGroup_SelectionListForEntityAndClusterPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the AccessGroup_SelectionListForEntityAndClusterPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a AccessGroup_SelectionListForEntityAndClusterPDSA</param>
    /// <param name="validator">An instance of a AccessGroup_SelectionListForEntityAndClusterPDSAValidator</param>
    public AccessGroup_SelectionListForEntityAndClusterPDSAData(PDSADataProvider dataProvider,
      AccessGroup_SelectionListForEntityAndClusterPDSA entity, AccessGroup_SelectionListForEntityAndClusterPDSAValidator validator)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Public Property
    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public AccessGroup_SelectionListForEntityAndClusterPDSA Entity { get; set; }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "AccessGroup_SelectionListForEntityAndClusterPDSAData";
      StoredProcName = "AccessGroup_SelectionListForEntityAndCluster";
      SchemaName = "GCS";

      // Create Parameters
      InitParameters();

      // Create Data Columns
      InitDataColumns();
    }
    #endregion

   #region InitParameters Method
    /// <summary>
    /// Creates all the parameters for the stored procedure.
    /// </summary>
    protected override void InitParameters()
    {
      PDSADataParameter param;

      // Clear all parameters each time
      AllParameters.Clear();

      // Create each parameter object and add to Parameters Collection
      param = new PDSADataParameter();
      param.ParameterName = AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ParameterNames.EntityId;
      param.DBType = DbType.Guid;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ParameterNames.ClusterUid;
      param.DBType = DbType.Guid;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ParameterNames.CultureName;
      param.DBType = DbType.String;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ParameterNames.RETURNVALUE;
      param.DBType = DbType.Int32;
      param.ParamDirection = ParameterDirection.ReturnValue;
      param.IsRefCursor = false;
      AllParameters.Add(param);

  
      AddReturnValueParameterToCollection();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes the Data Columns Collection for each field returned from the stored procedure.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSADataColumn dc;

      // Create each data column
      dc = PDSADataColumn.CreateDataColumn(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupUid, GetResourceMessage("GCS_AccessGroup_SelectionListForEntityAndClusterPDSA_AccessGroupUid_Header", "Access Group Uid"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.ClusterUid, GetResourceMessage("GCS_AccessGroup_SelectionListForEntityAndClusterPDSA_ClusterUid_Header", "Cluster Uid"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.EntityId, GetResourceMessage("GCS_AccessGroup_SelectionListForEntityAndClusterPDSA_EntityId_Header", "Entity Id"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupNumber, GetResourceMessage("GCS_AccessGroup_SelectionListForEntityAndClusterPDSA_AccessGroupNumber_Header", "Access Group Number"), false, typeof(int), DbType.Int32);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupName, GetResourceMessage("GCS_AccessGroup_SelectionListForEntityAndClusterPDSA_AccessGroupName_Header", "Access Group Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.Description, GetResourceMessage("GCS_AccessGroup_SelectionListForEntityAndClusterPDSA_Description_Header", "Description"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
    }
    #endregion

    #region EntityDataToParameterCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Parameters collection
    /// </summary>
    protected override void EntityDataToParameterCollection()
    {
      if (AllParameters.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ParameterNames.EntityId).SetAsNull == false)
        AllParameters.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ParameterNames.EntityId).Value = Entity.EntityId;
      else
        AllParameters.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ParameterNames.EntityId).Value = System.Data.SqlTypes.SqlGuid.Null;
      if (AllParameters.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ParameterNames.ClusterUid).SetAsNull == false)
        AllParameters.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ParameterNames.ClusterUid).Value = Entity.ClusterUid;
      else
        AllParameters.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ParameterNames.ClusterUid).Value = System.Data.SqlTypes.SqlGuid.Null;
      if (AllParameters.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ParameterNames.CultureName).SetAsNull == false)
        AllParameters.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ParameterNames.CultureName).Value = Entity.CultureName;
      else
        AllParameters.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ParameterNames.CultureName).Value = System.Data.SqlTypes.SqlChars.Null;
    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      if (AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupUid).SetAsNull == false)
        AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupUid).Value = Entity.AccessGroupUid;
      else
        AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupUid).Value = Guid.Empty;
     
      if (AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.ClusterUid).SetAsNull == false)
        AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.ClusterUid).Value = Entity.ClusterUid;
      else
        AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.ClusterUid).Value = Guid.Empty;
     
      if (AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.EntityId).SetAsNull == false)
        AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.EntityId).Value = Entity.EntityId;
      else
        AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.EntityId).Value = Guid.Empty;
     
      if (AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupNumber).SetAsNull == false)
        AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupNumber).Value = Entity.AccessGroupNumber;
      else
        AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupNumber).Value = 0;
     
      if (AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupName).SetAsNull == false)
        AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupName).Value = Entity.AccessGroupName;
      else
        AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupName).Value = string.Empty;
     
      if (AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.Description).SetAsNull == false)
        AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.Description).Value = Entity.Description;
      else
        AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.Description).Value = string.Empty;
     
    }
    #endregion

    #region OutputParametersToEntityData Method
    /// <summary>
    /// Moves the output parameters from the Parameters collection into the Entity class.
    /// </summary>
    protected override void OutputParametersToEntityData()
    {
      if (AllParameters.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ParameterNames.RETURNVALUE).IsValueNull == false)
        Entity.RETURNVALUE = AllParameters.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ParameterNames.RETURNVALUE).GetAsInteger();
      else
        Entity.RETURNVALUE = 0;
    }
    #endregion
    
    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupUid).IsNull == false)
        Entity.AccessGroupUid = AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupUid).GetAsGuid();
      else
        Entity.AccessGroupUid = Guid.Empty;

      if (AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.ClusterUid).IsNull == false)
        Entity.ClusterUid = AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.ClusterUid).GetAsGuid();
      else
        Entity.ClusterUid = Guid.Empty;

      if (AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.EntityId).IsNull == false)
        Entity.EntityId = AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.EntityId).GetAsGuid();
      else
        Entity.EntityId = Guid.Empty;

      if (AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupNumber).IsNull == false)
        Entity.AccessGroupNumber = AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupNumber).GetAsInteger();
      else
        Entity.AccessGroupNumber = 0;

      if (AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupName).IsNull == false)
        Entity.AccessGroupName = AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupName).GetAsString();
      else
        Entity.AccessGroupName = string.Empty;

      if (AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.Description).IsNull == false)
        Entity.Description = AllColumns.GetByName(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.Description).GetAsString();
      else
        Entity.Description = string.Empty;

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>AccessGroup_SelectionListForEntityAndClusterPDSA</returns>
    public AccessGroup_SelectionListForEntityAndClusterPDSA CreateEntityFromDataRow(DataRow dr)
    {
      AccessGroup_SelectionListForEntityAndClusterPDSA entity = new AccessGroup_SelectionListForEntityAndClusterPDSA();

      if (dr.Table.Columns.Contains(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupUid))
      {
        if (dr[AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupUid] != DBNull.Value)
          entity.AccessGroupUid = PDSAProperty.ConvertToGuid(dr[AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupUid]);
      }
      if (dr.Table.Columns.Contains(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.ClusterUid))
      {
        if (dr[AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.ClusterUid] != DBNull.Value)
          entity.ClusterUid = PDSAProperty.ConvertToGuid(dr[AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.ClusterUid]);
      }
      if (dr.Table.Columns.Contains(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.EntityId))
      {
        if (dr[AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.EntityId] != DBNull.Value)
          entity.EntityId = PDSAProperty.ConvertToGuid(dr[AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.EntityId]);
      }
      if (dr.Table.Columns.Contains(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupNumber))
      {
        if (dr[AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupNumber] != DBNull.Value)
          entity.AccessGroupNumber = Convert.ToInt32(dr[AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupNumber]);
      }
      if (dr.Table.Columns.Contains(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupName))
      {
        if (dr[AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupName] != DBNull.Value)
          entity.AccessGroupName = PDSAString.ConvertToStringTrim(dr[AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.AccessGroupName]);
      }
      if (dr.Table.Columns.Contains(AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.Description))
      {
        if (dr[AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.Description] != DBNull.Value)
          entity.Description = PDSAString.ConvertToStringTrim(dr[AccessGroup_SelectionListForEntityAndClusterPDSAValidator.ColumnNames.Description]);
      }
      entity.IsDirty = false;

      return entity;
    }
    #endregion

    #region ParameterNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the AccessGroup_SelectionListForEntityAndClusterPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ParameterNames
    {
    /// <summary>
    /// Returns '@EntityId'
    /// </summary>
    public static string EntityId = "@EntityId";
    /// <summary>
    /// Returns '@ClusterUid'
    /// </summary>
    public static string ClusterUid = "@ClusterUid";
    /// <summary>
    /// Returns '@CultureName'
    /// </summary>
    public static string CultureName = "@CultureName";
    /// <summary>
    /// Returns '@RETURN_VALUE'
    /// </summary>
    public static string RETURNVALUE = "@RETURN_VALUE";
    }
    #endregion
  }
}
