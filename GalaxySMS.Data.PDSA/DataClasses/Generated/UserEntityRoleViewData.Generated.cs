using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Select data from the UserEntityRoleViewPDSA view.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class UserEntityRoleViewPDSAData : PDSADataClassReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the UserEntityRoleViewPDSAData class
    /// </summary>
    public UserEntityRoleViewPDSAData() : base()
    {
      Entity = new UserEntityRoleViewPDSA();
      ValidatorObject = new UserEntityRoleViewPDSAValidator(Entity);

      Init();
    }
    
    /// <summary>
    /// Constructor for the UserEntityRoleViewPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a UserEntityRoleViewPDSA</param>
    public UserEntityRoleViewPDSAData(PDSADataProvider dataProvider,
      UserEntityRoleViewPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new UserEntityRoleViewPDSAValidator(Entity);

      Init();
    }
     
    /// <summary>
    /// Constructor for the UserEntityRoleViewPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a UserEntityRoleViewPDSA</param>
    /// <param name="validator">An instance of a UserEntityRoleViewPDSAValidator</param>
    public UserEntityRoleViewPDSAData(PDSADataProvider dataProvider,
      UserEntityRoleViewPDSA entity, UserEntityRoleViewPDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// A Custom SelectFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a WHERE statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum WhereFilters
    {
      /// <summary>
      /// No WhereFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom WhereFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'LikeUserName' WhereFilter
      /// </summary>
      LikeUserName
      ,
      /// <summary>
      /// 'UserName' WhereFilter
      /// </summary>
      UserName
    }

    /// <summary>
    /// Enumeration for selecting an ORDER BY statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum OrderByFilters
    {
      /// <summary>
      /// No OrderByFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'UserName' OrderByFilter
      /// </summary>
      UserName
    }
    
    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }
    /// <summary>
    /// Get/Set a WHERE clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public WhereFilters WhereFilter { get; set; }
    /// <summary>
    /// Get/Set a ORDER BY clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public OrderByFilters OrderByFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Public Property Entity Class
        private UserEntityRoleViewPDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public UserEntityRoleViewPDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "UserEntityRoleViewPDSAData";
      DBObjectName = "GCS.UserEntityRoleView";
      SchemaName = "GCS";
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;
      
      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes all of the Data Columns with valid data for each field in the table.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.UserName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.EntityName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.RoleName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.UserId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.RoleId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.EntityId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.ParentEntityId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministrator);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.InheritParentRoles);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministratorRole);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllClusters);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllAccessPortals);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputOutputGroups);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputDevices);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllOutputDevices);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllSites);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllRegions);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.UserName).Value = Entity.UserName;
      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.UserName).SetAsNull == true)
        Entity.UserName = string.Empty;
      ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.EntityName).Value = Entity.EntityName;
      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.EntityName).SetAsNull == true)
        Entity.EntityName = string.Empty;
      ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.RoleName).Value = Entity.RoleName;
      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.RoleName).SetAsNull == true)
        Entity.RoleName = string.Empty;
      ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.UserId).Value = Entity.UserId;
      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.UserId).SetAsNull == true)
        Entity.UserId = Guid.Empty;
      ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.RoleId).Value = Entity.RoleId;
      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.RoleId).SetAsNull == true)
        Entity.RoleId = Guid.Empty;
      ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.EntityId).Value = Entity.EntityId;
      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.EntityId).SetAsNull == true)
        Entity.EntityId = Guid.Empty;
      ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.ParentEntityId).Value = Entity.ParentEntityId;
      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.ParentEntityId).SetAsNull == true)
        Entity.ParentEntityId = Guid.Empty;
      ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministrator).Value = Entity.IsAdministrator;
      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministrator).SetAsNull == true)
        Entity.IsAdministrator = false;
      ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.InheritParentRoles).Value = Entity.InheritParentRoles;
      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.InheritParentRoles).SetAsNull == true)
        Entity.InheritParentRoles = false;
      ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministratorRole).Value = Entity.IsAdministratorRole;
      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministratorRole).SetAsNull == true)
        Entity.IsAdministratorRole = false;
      ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllClusters).Value = Entity.IncludeAllClusters;
      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllClusters).SetAsNull == true)
        Entity.IncludeAllClusters = false;
      ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllAccessPortals).Value = Entity.IncludeAllAccessPortals;
      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllAccessPortals).SetAsNull == true)
        Entity.IncludeAllAccessPortals = false;
      ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputOutputGroups).Value = Entity.IncludeAllInputOutputGroups;
      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputOutputGroups).SetAsNull == true)
        Entity.IncludeAllInputOutputGroups = false;
      ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputDevices).Value = Entity.IncludeAllInputDevices;
      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputDevices).SetAsNull == true)
        Entity.IncludeAllInputDevices = false;
      ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllOutputDevices).Value = Entity.IncludeAllOutputDevices;
      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllOutputDevices).SetAsNull == true)
        Entity.IncludeAllOutputDevices = false;
      ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllSites).Value = Entity.IncludeAllSites;
      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllSites).SetAsNull == true)
        Entity.IncludeAllSites = false;
      ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllRegions).Value = Entity.IncludeAllRegions;
      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllRegions).SetAsNull == true)
        Entity.IncludeAllRegions = false;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.UserName).IsNull == false)
        Entity.UserName = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.UserName).GetAsString();
      else
        Entity.UserName = string.Empty;
      Entity.SetOriginalValueForProperty(UserEntityRoleViewPDSAValidator.ColumnNames.UserName, ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.UserName).Value);

      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.EntityName).IsNull == false)
        Entity.EntityName = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.EntityName).GetAsString();
      else
        Entity.EntityName = string.Empty;
      Entity.SetOriginalValueForProperty(UserEntityRoleViewPDSAValidator.ColumnNames.EntityName, ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.EntityName).Value);

      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.RoleName).IsNull == false)
        Entity.RoleName = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.RoleName).GetAsString();
      else
        Entity.RoleName = string.Empty;
      Entity.SetOriginalValueForProperty(UserEntityRoleViewPDSAValidator.ColumnNames.RoleName, ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.RoleName).Value);

      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.UserId).IsNull == false)
        Entity.UserId = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.UserId).GetAsGuid();
      else
        Entity.UserId = Guid.Empty;
      Entity.SetOriginalValueForProperty(UserEntityRoleViewPDSAValidator.ColumnNames.UserId, ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.UserId).Value);

      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.RoleId).IsNull == false)
        Entity.RoleId = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.RoleId).GetAsGuid();
      else
        Entity.RoleId = Guid.Empty;
      Entity.SetOriginalValueForProperty(UserEntityRoleViewPDSAValidator.ColumnNames.RoleId, ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.RoleId).Value);

      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.EntityId).IsNull == false)
        Entity.EntityId = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.EntityId).GetAsGuid();
      else
        Entity.EntityId = Guid.Empty;
      Entity.SetOriginalValueForProperty(UserEntityRoleViewPDSAValidator.ColumnNames.EntityId, ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.EntityId).Value);

      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.ParentEntityId).IsNull == false)
        Entity.ParentEntityId = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.ParentEntityId).GetAsGuid();
      else
        Entity.ParentEntityId = Guid.Empty;
      Entity.SetOriginalValueForProperty(UserEntityRoleViewPDSAValidator.ColumnNames.ParentEntityId, ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.ParentEntityId).Value);

      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministrator).IsNull == false)
        Entity.IsAdministrator = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministrator).GetAsBool();
      else
        Entity.IsAdministrator = false;
      Entity.SetOriginalValueForProperty(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministrator, ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministrator).Value);

      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.InheritParentRoles).IsNull == false)
        Entity.InheritParentRoles = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.InheritParentRoles).GetAsBool();
      else
        Entity.InheritParentRoles = false;
      Entity.SetOriginalValueForProperty(UserEntityRoleViewPDSAValidator.ColumnNames.InheritParentRoles, ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.InheritParentRoles).Value);

      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministratorRole).IsNull == false)
        Entity.IsAdministratorRole = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministratorRole).GetAsBool();
      else
        Entity.IsAdministratorRole = false;
      Entity.SetOriginalValueForProperty(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministratorRole, ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministratorRole).Value);

      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllClusters).IsNull == false)
        Entity.IncludeAllClusters = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllClusters).GetAsBool();
      else
        Entity.IncludeAllClusters = false;
      Entity.SetOriginalValueForProperty(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllClusters, ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllClusters).Value);

      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllAccessPortals).IsNull == false)
        Entity.IncludeAllAccessPortals = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllAccessPortals).GetAsBool();
      else
        Entity.IncludeAllAccessPortals = false;
      Entity.SetOriginalValueForProperty(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllAccessPortals, ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllAccessPortals).Value);

      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputOutputGroups).IsNull == false)
        Entity.IncludeAllInputOutputGroups = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputOutputGroups).GetAsBool();
      else
        Entity.IncludeAllInputOutputGroups = false;
      Entity.SetOriginalValueForProperty(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputOutputGroups, ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputOutputGroups).Value);

      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputDevices).IsNull == false)
        Entity.IncludeAllInputDevices = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputDevices).GetAsBool();
      else
        Entity.IncludeAllInputDevices = false;
      Entity.SetOriginalValueForProperty(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputDevices, ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputDevices).Value);

      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllOutputDevices).IsNull == false)
        Entity.IncludeAllOutputDevices = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllOutputDevices).GetAsBool();
      else
        Entity.IncludeAllOutputDevices = false;
      Entity.SetOriginalValueForProperty(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllOutputDevices, ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllOutputDevices).Value);

      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllSites).IsNull == false)
        Entity.IncludeAllSites = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllSites).GetAsBool();
      else
        Entity.IncludeAllSites = false;
      Entity.SetOriginalValueForProperty(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllSites, ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllSites).Value);

      if (ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllRegions).IsNull == false)
        Entity.IncludeAllRegions = ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllRegions).GetAsBool();
      else
        Entity.IncludeAllRegions = false;
      Entity.SetOriginalValueForProperty(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllRegions, ValidatorObject.Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllRegions).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>UserEntityRoleViewPDSA</returns>
    public UserEntityRoleViewPDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new UserEntityRoleViewPDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          
          
          break;
        case SelectFilters.Search:
          
          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL that will count the number of rows returned from this view.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          
          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      sb.Append(WhereClauseSQL());
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion
    
    #region WhereClauseSQL Method
    /// <summary>
    /// Builds the WHERE clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string WhereClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (WhereFilter)
      {
        case WhereFilters.Custom:
          sb.Append(" " + WhereCustom);

          break;

        case WhereFilters.None:
          //  Do nothing

          break;

        case WhereFilters.LikeUserName:
          
          
          break;
        case WhereFilters.UserName:
          
          
          break;
      }
      
      return sb.ToString();
    }
    #endregion

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
         
          break;
        case SelectFilters.Search:
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion

    #region WhereClauseFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any WHERE clause parameters.
    /// </summary>
    protected override void WhereClauseFillInParameters()
    {
      switch (WhereFilter)
      {
        case WhereFilters.LikeUserName:
         
          break;
        case WhereFilters.UserName:
         
          break;
      }
    }
    #endregion

    #region OrderByClauseSQL Method
    /// <summary>
    /// Builds the ORDER BY clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string OrderByClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (OrderByFilter)
      {
        case OrderByFilters.None:
          //  Do Nothing

          break;

        case OrderByFilters.Custom:
          sb.Append(" " + OrderByCustom);

          break;
          
        case OrderByFilters.UserName:
          
          
          break;
      }

      return sb.ToString();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the UserEntityRoleViewPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'UserName'
    /// </summary>
    public static string UserName = "UserName";
    /// <summary>
    /// Returns 'EntityName'
    /// </summary>
    public static string EntityName = "EntityName";
    /// <summary>
    /// Returns 'RoleName'
    /// </summary>
    public static string RoleName = "RoleName";
    /// <summary>
    /// Returns 'UserId'
    /// </summary>
    public static string UserId = "UserId";
    /// <summary>
    /// Returns 'RoleId'
    /// </summary>
    public static string RoleId = "RoleId";
    /// <summary>
    /// Returns 'EntityId'
    /// </summary>
    public static string EntityId = "EntityId";
    /// <summary>
    /// Returns 'ParentEntityId'
    /// </summary>
    public static string ParentEntityId = "ParentEntityId";
    /// <summary>
    /// Returns 'IsAdministrator'
    /// </summary>
    public static string IsAdministrator = "IsAdministrator";
    /// <summary>
    /// Returns 'InheritParentRoles'
    /// </summary>
    public static string InheritParentRoles = "InheritParentRoles";
    /// <summary>
    /// Returns 'IsAdministratorRole'
    /// </summary>
    public static string IsAdministratorRole = "IsAdministratorRole";
    /// <summary>
    /// Returns 'IncludeAllClusters'
    /// </summary>
    public static string IncludeAllClusters = "IncludeAllClusters";
    /// <summary>
    /// Returns 'IncludeAllAccessPortals'
    /// </summary>
    public static string IncludeAllAccessPortals = "IncludeAllAccessPortals";
    /// <summary>
    /// Returns 'IncludeAllInputOutputGroups'
    /// </summary>
    public static string IncludeAllInputOutputGroups = "IncludeAllInputOutputGroups";
    /// <summary>
    /// Returns 'IncludeAllInputDevices'
    /// </summary>
    public static string IncludeAllInputDevices = "IncludeAllInputDevices";
    /// <summary>
    /// Returns 'IncludeAllOutputDevices'
    /// </summary>
    public static string IncludeAllOutputDevices = "IncludeAllOutputDevices";
    /// <summary>
    /// Returns 'IncludeAllSites'
    /// </summary>
    public static string IncludeAllSites = "IncludeAllSites";
    /// <summary>
    /// Returns 'IncludeAllRegions'
    /// </summary>
    public static string IncludeAllRegions = "IncludeAllRegions";
    }
    #endregion
  }
}
