using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Select data from the CredentialToDelete_PanelLoadDataChangesForCpuPDSA view.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class CredentialToDelete_PanelLoadDataChangesForCpuPDSAData : PDSADataClassReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the CredentialToDelete_PanelLoadDataChangesForCpuPDSAData class
    /// </summary>
    public CredentialToDelete_PanelLoadDataChangesForCpuPDSAData() : base()
    {
      Entity = new CredentialToDelete_PanelLoadDataChangesForCpuPDSA();
      ValidatorObject = new CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator(Entity);

      Init();
    }
    
    /// <summary>
    /// Constructor for the CredentialToDelete_PanelLoadDataChangesForCpuPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a CredentialToDelete_PanelLoadDataChangesForCpuPDSA</param>
    public CredentialToDelete_PanelLoadDataChangesForCpuPDSAData(PDSADataProvider dataProvider,
      CredentialToDelete_PanelLoadDataChangesForCpuPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator(Entity);

      Init();
    }
     
    /// <summary>
    /// Constructor for the CredentialToDelete_PanelLoadDataChangesForCpuPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a CredentialToDelete_PanelLoadDataChangesForCpuPDSA</param>
    /// <param name="validator">An instance of a CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator</param>
    public CredentialToDelete_PanelLoadDataChangesForCpuPDSAData(PDSADataProvider dataProvider,
      CredentialToDelete_PanelLoadDataChangesForCpuPDSA entity, CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// A Custom SelectFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a WHERE statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum WhereFilters
    {
      /// <summary>
      /// No WhereFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom WhereFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'LikeServerAddress' WhereFilter
      /// </summary>
      LikeServerAddress
      ,
      /// <summary>
      /// 'ServerAddress' WhereFilter
      /// </summary>
      ServerAddress
    }

    /// <summary>
    /// Enumeration for selecting an ORDER BY statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum OrderByFilters
    {
      /// <summary>
      /// No OrderByFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'ServerAddress' OrderByFilter
      /// </summary>
      ServerAddress
    }
    
    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }
    /// <summary>
    /// Get/Set a WHERE clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public WhereFilters WhereFilter { get; set; }
    /// <summary>
    /// Get/Set a ORDER BY clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public OrderByFilters OrderByFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Public Property Entity Class
        private CredentialToDelete_PanelLoadDataChangesForCpuPDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public CredentialToDelete_PanelLoadDataChangesForCpuPDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "CredentialToDelete_PanelLoadDataChangesForCpuPDSAData";
      DBObjectName = "GCS.CredentialToDelete_PanelLoadDataChangesForCpu";
      SchemaName = "GCS";
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;
      
      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes all of the Data Columns with valid data for each field in the table.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CredentialToDeleteFromCpuUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CpuUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CardBinaryData);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBinary.Null;
      //prop.ValueForNull = new byte[0];

      prop = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.DeletedFromDatabaseDate);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);

      prop = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.DeletedFromCpuDate);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);

      prop = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.ClusterNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.PanelNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CpuNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.ClusterGroupId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.ServerAddress);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.IsConnected);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.DataLength);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.IsExtended);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CredentialToDeleteFromCpuUid).Value = Entity.CredentialToDeleteFromCpuUid;
      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CredentialToDeleteFromCpuUid).SetAsNull == true)
        Entity.CredentialToDeleteFromCpuUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CpuUid).Value = Entity.CpuUid;
      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CpuUid).SetAsNull == true)
        Entity.CpuUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CardBinaryData).Value = Entity.CardBinaryData;
      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CardBinaryData).SetAsNull == true)
        Entity.CardBinaryData = null;
      ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.DeletedFromDatabaseDate).Value = Entity.DeletedFromDatabaseDate;
      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.DeletedFromDatabaseDate).SetAsNull == true)
        Entity.DeletedFromDatabaseDate = DateTime.Now;
      ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.DeletedFromCpuDate).Value = Entity.DeletedFromCpuDate;
      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.DeletedFromCpuDate).SetAsNull == true)
        Entity.DeletedFromCpuDate = DateTime.Now;
      ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.ClusterNumber).Value = Entity.ClusterNumber;
      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.ClusterNumber).SetAsNull == true)
        Entity.ClusterNumber = 0;
      ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.PanelNumber).Value = Entity.PanelNumber;
      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.PanelNumber).SetAsNull == true)
        Entity.PanelNumber = 0;
      ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CpuNumber).Value = Entity.CpuNumber;
      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CpuNumber).SetAsNull == true)
        Entity.CpuNumber = 0;
      ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.ClusterGroupId).Value = Entity.ClusterGroupId;
      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.ClusterGroupId).SetAsNull == true)
        Entity.ClusterGroupId = 0;
      ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.ServerAddress).Value = Entity.ServerAddress;
      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.ServerAddress).SetAsNull == true)
        Entity.ServerAddress = string.Empty;
      ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.IsConnected).Value = Entity.IsConnected;
      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.IsConnected).SetAsNull == true)
        Entity.IsConnected = false;
      ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.DataLength).Value = Entity.DataLength;
      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.DataLength).SetAsNull == true)
        Entity.DataLength = 0;
      ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.IsExtended).Value = Entity.IsExtended;
      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.IsExtended).SetAsNull == true)
        Entity.IsExtended = false;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CredentialToDeleteFromCpuUid).IsNull == false)
        Entity.CredentialToDeleteFromCpuUid = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CredentialToDeleteFromCpuUid).GetAsGuid();
      else
        Entity.CredentialToDeleteFromCpuUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CredentialToDeleteFromCpuUid, ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CredentialToDeleteFromCpuUid).Value);

      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CpuUid).IsNull == false)
        Entity.CpuUid = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CpuUid).GetAsGuid();
      else
        Entity.CpuUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CpuUid, ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CpuUid).Value);

      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CardBinaryData).IsNull == false)
        Entity.CardBinaryData = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CardBinaryData).GetAsByteArray();
      else
        Entity.CardBinaryData = new byte[0];
      Entity.SetOriginalValueForProperty(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CardBinaryData, ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CardBinaryData).Value);

      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.DeletedFromDatabaseDate).IsNull == false)
        Entity.DeletedFromDatabaseDate = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.DeletedFromDatabaseDate).GetAsDate();
      else
        Entity.DeletedFromDatabaseDate = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);
      Entity.SetOriginalValueForProperty(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.DeletedFromDatabaseDate, ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.DeletedFromDatabaseDate).Value);

      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.DeletedFromCpuDate).IsNull == false)
        Entity.DeletedFromCpuDate = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.DeletedFromCpuDate).GetAsDate();
      else
        Entity.DeletedFromCpuDate = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);
      Entity.SetOriginalValueForProperty(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.DeletedFromCpuDate, ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.DeletedFromCpuDate).Value);

      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.ClusterNumber).IsNull == false)
        Entity.ClusterNumber = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.ClusterNumber).GetAsInteger();
      else
        Entity.ClusterNumber = 0;
      Entity.SetOriginalValueForProperty(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.ClusterNumber, ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.ClusterNumber).Value);

      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.PanelNumber).IsNull == false)
        Entity.PanelNumber = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.PanelNumber).GetAsInteger();
      else
        Entity.PanelNumber = 0;
      Entity.SetOriginalValueForProperty(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.PanelNumber, ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.PanelNumber).Value);

      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CpuNumber).IsNull == false)
        Entity.CpuNumber = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CpuNumber).GetAsShort();
      else
        Entity.CpuNumber = 0;
      Entity.SetOriginalValueForProperty(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CpuNumber, ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.CpuNumber).Value);

      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.ClusterGroupId).IsNull == false)
        Entity.ClusterGroupId = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.ClusterGroupId).GetAsInteger();
      else
        Entity.ClusterGroupId = 0;
      Entity.SetOriginalValueForProperty(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.ClusterGroupId, ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.ClusterGroupId).Value);

      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.ServerAddress).IsNull == false)
        Entity.ServerAddress = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.ServerAddress).GetAsString();
      else
        Entity.ServerAddress = string.Empty;
      Entity.SetOriginalValueForProperty(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.ServerAddress, ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.ServerAddress).Value);

      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.IsConnected).IsNull == false)
        Entity.IsConnected = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.IsConnected).GetAsBool();
      else
        Entity.IsConnected = false;
      Entity.SetOriginalValueForProperty(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.IsConnected, ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.IsConnected).Value);

      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.DataLength).IsNull == false)
        Entity.DataLength = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.DataLength).GetAsShort();
      else
        Entity.DataLength = 0;
      Entity.SetOriginalValueForProperty(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.DataLength, ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.DataLength).Value);

      if (ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.IsExtended).IsNull == false)
        Entity.IsExtended = ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.IsExtended).GetAsBool();
      else
        Entity.IsExtended = false;
      Entity.SetOriginalValueForProperty(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.IsExtended, ValidatorObject.Properties.GetByName(CredentialToDelete_PanelLoadDataChangesForCpuPDSAValidator.ColumnNames.IsExtended).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>CredentialToDelete_PanelLoadDataChangesForCpuPDSA</returns>
    public CredentialToDelete_PanelLoadDataChangesForCpuPDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new CredentialToDelete_PanelLoadDataChangesForCpuPDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          
          
          break;
        case SelectFilters.Search:
          
          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL that will count the number of rows returned from this view.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          
          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      sb.Append(WhereClauseSQL());
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion
    
    #region WhereClauseSQL Method
    /// <summary>
    /// Builds the WHERE clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string WhereClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (WhereFilter)
      {
        case WhereFilters.Custom:
          sb.Append(" " + WhereCustom);

          break;

        case WhereFilters.None:
          //  Do nothing

          break;

        case WhereFilters.LikeServerAddress:
          
          
          break;
        case WhereFilters.ServerAddress:
          
          
          break;
      }
      
      return sb.ToString();
    }
    #endregion

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
         
          break;
        case SelectFilters.Search:
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion

    #region WhereClauseFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any WHERE clause parameters.
    /// </summary>
    protected override void WhereClauseFillInParameters()
    {
      switch (WhereFilter)
      {
        case WhereFilters.LikeServerAddress:
         
          break;
        case WhereFilters.ServerAddress:
         
          break;
      }
    }
    #endregion

    #region OrderByClauseSQL Method
    /// <summary>
    /// Builds the ORDER BY clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string OrderByClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (OrderByFilter)
      {
        case OrderByFilters.None:
          //  Do Nothing

          break;

        case OrderByFilters.Custom:
          sb.Append(" " + OrderByCustom);

          break;
          
        case OrderByFilters.ServerAddress:
          
          
          break;
      }

      return sb.ToString();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the CredentialToDelete_PanelLoadDataChangesForCpuPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'CredentialToDeleteFromCpuUid'
    /// </summary>
    public static string CredentialToDeleteFromCpuUid = "CredentialToDeleteFromCpuUid";
    /// <summary>
    /// Returns 'CpuUid'
    /// </summary>
    public static string CpuUid = "CpuUid";
    /// <summary>
    /// Returns 'CardBinaryData'
    /// </summary>
    public static string CardBinaryData = "CardBinaryData";
    /// <summary>
    /// Returns 'DeletedFromDatabaseDate'
    /// </summary>
    public static string DeletedFromDatabaseDate = "DeletedFromDatabaseDate";
    /// <summary>
    /// Returns 'DeletedFromCpuDate'
    /// </summary>
    public static string DeletedFromCpuDate = "DeletedFromCpuDate";
    /// <summary>
    /// Returns 'ClusterNumber'
    /// </summary>
    public static string ClusterNumber = "ClusterNumber";
    /// <summary>
    /// Returns 'PanelNumber'
    /// </summary>
    public static string PanelNumber = "PanelNumber";
    /// <summary>
    /// Returns 'CpuNumber'
    /// </summary>
    public static string CpuNumber = "CpuNumber";
    /// <summary>
    /// Returns 'ClusterGroupId'
    /// </summary>
    public static string ClusterGroupId = "ClusterGroupId";
    /// <summary>
    /// Returns 'ServerAddress'
    /// </summary>
    public static string ServerAddress = "ServerAddress";
    /// <summary>
    /// Returns 'IsConnected'
    /// </summary>
    public static string IsConnected = "IsConnected";
    /// <summary>
    /// Returns 'DataLength'
    /// </summary>
    public static string DataLength = "DataLength";
    /// <summary>
    /// Returns 'IsExtended'
    /// </summary>
    public static string IsExtended = "IsExtended";
    }
    #endregion
  }
}
