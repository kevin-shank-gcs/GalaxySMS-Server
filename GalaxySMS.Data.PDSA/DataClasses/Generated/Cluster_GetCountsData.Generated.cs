using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// This class calls the stored procedure Cluster_GetCountsPDSA
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public class Cluster_GetCountsPDSAData : PDSAStoredProcReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the Cluster_GetCountsPDSAData class
    /// </summary>
    public Cluster_GetCountsPDSAData() : base()
    {
      Entity = new Cluster_GetCountsPDSA();
      ValidatorObject = new  Cluster_GetCountsPDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the Cluster_GetCountsPDSAData class
    /// </summary>
    /// <param name="entity">An instance of a Cluster_GetCountsPDSA</param>
    public Cluster_GetCountsPDSAData(Cluster_GetCountsPDSA entity) : base()
    {
      Entity = entity;
      ValidatorObject = new Cluster_GetCountsPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the Cluster_GetCountsPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a Cluster_GetCountsPDSA</param>
    public Cluster_GetCountsPDSAData(PDSADataProvider dataProvider,
      Cluster_GetCountsPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new  Cluster_GetCountsPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the Cluster_GetCountsPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a Cluster_GetCountsPDSA</param>
    /// <param name="validator">An instance of a Cluster_GetCountsPDSAValidator</param>
    public Cluster_GetCountsPDSAData(PDSADataProvider dataProvider,
      Cluster_GetCountsPDSA entity, Cluster_GetCountsPDSAValidator validator)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Public Property
    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public Cluster_GetCountsPDSA Entity { get; set; }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "Cluster_GetCountsPDSAData";
      StoredProcName = "Cluster_GetCounts";
      SchemaName = "GCS";

      // Create Parameters
      InitParameters();

      // Create Data Columns
      InitDataColumns();
    }
    #endregion

   #region InitParameters Method
    /// <summary>
    /// Creates all the parameters for the stored procedure.
    /// </summary>
    protected override void InitParameters()
    {
      PDSADataParameter param;

      // Clear all parameters each time
      AllParameters.Clear();

      // Create each parameter object and add to Parameters Collection
      param = new PDSADataParameter();
      param.ParameterName = Cluster_GetCountsPDSAValidator.ParameterNames.ClusterUid;
      param.DBType = DbType.Guid;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = Cluster_GetCountsPDSAValidator.ParameterNames.RETURNVALUE;
      param.DBType = DbType.Int32;
      param.ParamDirection = ParameterDirection.ReturnValue;
      param.IsRefCursor = false;
      AllParameters.Add(param);

  
      AddReturnValueParameterToCollection();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes the Data Columns Collection for each field returned from the stored procedure.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSADataColumn dc;

      // Create each data column
      dc = PDSADataColumn.CreateDataColumn(Cluster_GetCountsPDSAValidator.ColumnNames.PanelsCount, GetResourceMessage("GCS_Cluster_GetCountsPDSA_PanelsCount_Header", "Panels Count"), false, typeof(int), DbType.Int32);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(Cluster_GetCountsPDSAValidator.ColumnNames.BoardsCount, GetResourceMessage("GCS_Cluster_GetCountsPDSA_BoardsCount_Header", "Boards Count"), false, typeof(int), DbType.Int32);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(Cluster_GetCountsPDSAValidator.ColumnNames.AccessPortalsCount, GetResourceMessage("GCS_Cluster_GetCountsPDSA_AccessPortalsCount_Header", "Access Portals Count"), false, typeof(int), DbType.Int32);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(Cluster_GetCountsPDSAValidator.ColumnNames.InputDevicesCount, GetResourceMessage("GCS_Cluster_GetCountsPDSA_InputDevicesCount_Header", "Input Devices Count"), false, typeof(int), DbType.Int32);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(Cluster_GetCountsPDSAValidator.ColumnNames.OutputDevicesCount, GetResourceMessage("GCS_Cluster_GetCountsPDSA_OutputDevicesCount_Header", "Output Devices Count"), false, typeof(int), DbType.Int32);
      AllColumns.Add(dc);
    }
    #endregion

    #region EntityDataToParameterCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Parameters collection
    /// </summary>
    protected override void EntityDataToParameterCollection()
    {
      if (AllParameters.GetByName(Cluster_GetCountsPDSAValidator.ParameterNames.ClusterUid).SetAsNull == false)
        AllParameters.GetByName(Cluster_GetCountsPDSAValidator.ParameterNames.ClusterUid).Value = Entity.ClusterUid;
      else
        AllParameters.GetByName(Cluster_GetCountsPDSAValidator.ParameterNames.ClusterUid).Value = System.Data.SqlTypes.SqlGuid.Null;
    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      if (AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.PanelsCount).SetAsNull == false)
        AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.PanelsCount).Value = Entity.PanelsCount;
      else
        AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.PanelsCount).Value = 0;
     
      if (AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.BoardsCount).SetAsNull == false)
        AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.BoardsCount).Value = Entity.BoardsCount;
      else
        AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.BoardsCount).Value = 0;
     
      if (AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.AccessPortalsCount).SetAsNull == false)
        AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.AccessPortalsCount).Value = Entity.AccessPortalsCount;
      else
        AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.AccessPortalsCount).Value = 0;
     
      if (AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.InputDevicesCount).SetAsNull == false)
        AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.InputDevicesCount).Value = Entity.InputDevicesCount;
      else
        AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.InputDevicesCount).Value = 0;
     
      if (AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.OutputDevicesCount).SetAsNull == false)
        AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.OutputDevicesCount).Value = Entity.OutputDevicesCount;
      else
        AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.OutputDevicesCount).Value = 0;
     
    }
    #endregion

    #region OutputParametersToEntityData Method
    /// <summary>
    /// Moves the output parameters from the Parameters collection into the Entity class.
    /// </summary>
    protected override void OutputParametersToEntityData()
    {
      if (AllParameters.GetByName(Cluster_GetCountsPDSAValidator.ParameterNames.RETURNVALUE).IsValueNull == false)
        Entity.RETURNVALUE = AllParameters.GetByName(Cluster_GetCountsPDSAValidator.ParameterNames.RETURNVALUE).GetAsInteger();
      else
        Entity.RETURNVALUE = 0;
    }
    #endregion
    
    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.PanelsCount).IsNull == false)
        Entity.PanelsCount = AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.PanelsCount).GetAsInteger();
      else
        Entity.PanelsCount = 0;

      if (AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.BoardsCount).IsNull == false)
        Entity.BoardsCount = AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.BoardsCount).GetAsInteger();
      else
        Entity.BoardsCount = 0;

      if (AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.AccessPortalsCount).IsNull == false)
        Entity.AccessPortalsCount = AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.AccessPortalsCount).GetAsInteger();
      else
        Entity.AccessPortalsCount = 0;

      if (AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.InputDevicesCount).IsNull == false)
        Entity.InputDevicesCount = AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.InputDevicesCount).GetAsInteger();
      else
        Entity.InputDevicesCount = 0;

      if (AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.OutputDevicesCount).IsNull == false)
        Entity.OutputDevicesCount = AllColumns.GetByName(Cluster_GetCountsPDSAValidator.ColumnNames.OutputDevicesCount).GetAsInteger();
      else
        Entity.OutputDevicesCount = 0;

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>Cluster_GetCountsPDSA</returns>
    public Cluster_GetCountsPDSA CreateEntityFromDataRow(DataRow dr)
    {
      Cluster_GetCountsPDSA entity = new Cluster_GetCountsPDSA();

      if (dr.Table.Columns.Contains(Cluster_GetCountsPDSAValidator.ColumnNames.PanelsCount))
      {
        if (dr[Cluster_GetCountsPDSAValidator.ColumnNames.PanelsCount] != DBNull.Value)
          entity.PanelsCount = Convert.ToInt32(dr[Cluster_GetCountsPDSAValidator.ColumnNames.PanelsCount]);
      }
      if (dr.Table.Columns.Contains(Cluster_GetCountsPDSAValidator.ColumnNames.BoardsCount))
      {
        if (dr[Cluster_GetCountsPDSAValidator.ColumnNames.BoardsCount] != DBNull.Value)
          entity.BoardsCount = Convert.ToInt32(dr[Cluster_GetCountsPDSAValidator.ColumnNames.BoardsCount]);
      }
      if (dr.Table.Columns.Contains(Cluster_GetCountsPDSAValidator.ColumnNames.AccessPortalsCount))
      {
        if (dr[Cluster_GetCountsPDSAValidator.ColumnNames.AccessPortalsCount] != DBNull.Value)
          entity.AccessPortalsCount = Convert.ToInt32(dr[Cluster_GetCountsPDSAValidator.ColumnNames.AccessPortalsCount]);
      }
      if (dr.Table.Columns.Contains(Cluster_GetCountsPDSAValidator.ColumnNames.InputDevicesCount))
      {
        if (dr[Cluster_GetCountsPDSAValidator.ColumnNames.InputDevicesCount] != DBNull.Value)
          entity.InputDevicesCount = Convert.ToInt32(dr[Cluster_GetCountsPDSAValidator.ColumnNames.InputDevicesCount]);
      }
      if (dr.Table.Columns.Contains(Cluster_GetCountsPDSAValidator.ColumnNames.OutputDevicesCount))
      {
        if (dr[Cluster_GetCountsPDSAValidator.ColumnNames.OutputDevicesCount] != DBNull.Value)
          entity.OutputDevicesCount = Convert.ToInt32(dr[Cluster_GetCountsPDSAValidator.ColumnNames.OutputDevicesCount]);
      }
      entity.IsDirty = false;

      return entity;
    }
    #endregion

    #region ParameterNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the Cluster_GetCountsPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ParameterNames
    {
    /// <summary>
    /// Returns '@ClusterUid'
    /// </summary>
    public static string ClusterUid = "@ClusterUid";
    /// <summary>
    /// Returns '@RETURN_VALUE'
    /// </summary>
    public static string RETURNVALUE = "@RETURN_VALUE";
    }
    #endregion
  }
}
