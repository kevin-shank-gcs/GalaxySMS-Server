using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// This class calls the stored procedure gcsUser_GetPasswordResetInfoPDSA
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public class gcsUser_GetPasswordResetInfoPDSAData : PDSAStoredProcReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the gcsUser_GetPasswordResetInfoPDSAData class
    /// </summary>
    public gcsUser_GetPasswordResetInfoPDSAData() : base()
    {
      Entity = new gcsUser_GetPasswordResetInfoPDSA();
      ValidatorObject = new  gcsUser_GetPasswordResetInfoPDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the gcsUser_GetPasswordResetInfoPDSAData class
    /// </summary>
    /// <param name="entity">An instance of a gcsUser_GetPasswordResetInfoPDSA</param>
    public gcsUser_GetPasswordResetInfoPDSAData(gcsUser_GetPasswordResetInfoPDSA entity) : base()
    {
      Entity = entity;
      ValidatorObject = new gcsUser_GetPasswordResetInfoPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the gcsUser_GetPasswordResetInfoPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a gcsUser_GetPasswordResetInfoPDSA</param>
    public gcsUser_GetPasswordResetInfoPDSAData(PDSADataProvider dataProvider,
      gcsUser_GetPasswordResetInfoPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new  gcsUser_GetPasswordResetInfoPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the gcsUser_GetPasswordResetInfoPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a gcsUser_GetPasswordResetInfoPDSA</param>
    /// <param name="validator">An instance of a gcsUser_GetPasswordResetInfoPDSAValidator</param>
    public gcsUser_GetPasswordResetInfoPDSAData(PDSADataProvider dataProvider,
      gcsUser_GetPasswordResetInfoPDSA entity, gcsUser_GetPasswordResetInfoPDSAValidator validator)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Public Property
    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public gcsUser_GetPasswordResetInfoPDSA Entity { get; set; }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "gcsUser_GetPasswordResetInfoPDSAData";
      StoredProcName = "gcsUser_GetPasswordResetInfo";
      SchemaName = "GCS";

      // Create Parameters
      InitParameters();

      // Create Data Columns
      InitDataColumns();
    }
    #endregion

   #region InitParameters Method
    /// <summary>
    /// Creates all the parameters for the stored procedure.
    /// </summary>
    protected override void InitParameters()
    {
      PDSADataParameter param;

      // Clear all parameters each time
      AllParameters.Clear();

      // Create each parameter object and add to Parameters Collection
      param = new PDSADataParameter();
      param.ParameterName = gcsUser_GetPasswordResetInfoPDSAValidator.ParameterNames.UserId;
      param.DBType = DbType.Guid;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = gcsUser_GetPasswordResetInfoPDSAValidator.ParameterNames.UserName;
      param.DBType = DbType.String;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = gcsUser_GetPasswordResetInfoPDSAValidator.ParameterNames.Email;
      param.DBType = DbType.String;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = gcsUser_GetPasswordResetInfoPDSAValidator.ParameterNames.RETURNVALUE;
      param.DBType = DbType.Int32;
      param.ParamDirection = ParameterDirection.ReturnValue;
      param.IsRefCursor = false;
      AllParameters.Add(param);

  
      AddReturnValueParameterToCollection();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes the Data Columns Collection for each field returned from the stored procedure.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSADataColumn dc;

      // Create each data column
      dc = PDSADataColumn.CreateDataColumn(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.UserId, GetResourceMessage("GCS_gcsUser_GetPasswordResetInfoPDSA_UserId_Header", "User Id"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PrimaryEntityId, GetResourceMessage("GCS_gcsUser_GetPasswordResetInfoPDSA_PrimaryEntityId_Header", "Primary Entity Id"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.UserName, GetResourceMessage("GCS_gcsUser_GetPasswordResetInfoPDSA_UserName_Header", "User Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.Email, GetResourceMessage("GCS_gcsUser_GetPasswordResetInfoPDSA_Email_Header", "Email"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.ResetPasswordFlag, GetResourceMessage("GCS_gcsUser_GetPasswordResetInfoPDSA_ResetPasswordFlag_Header", "Reset Password Flag"), false, typeof(bool), DbType.Boolean);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.LastPasswordResetDate, GetResourceMessage("GCS_gcsUser_GetPasswordResetInfoPDSA_LastPasswordResetDate_Header", "Last Password Reset Date"), false, typeof(DateTimeOffset), DbType.DateTimeOffset);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PasswordResetToken, GetResourceMessage("GCS_gcsUser_GetPasswordResetInfoPDSA_PasswordResetToken_Header", "Password Reset Token"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PasswordResetTokenExpiration, GetResourceMessage("GCS_gcsUser_GetPasswordResetInfoPDSA_PasswordResetTokenExpiration_Header", "Password Reset Token Expiration"), false, typeof(DateTimeOffset), DbType.DateTimeOffset);
      AllColumns.Add(dc);
    }
    #endregion

    #region EntityDataToParameterCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Parameters collection
    /// </summary>
    protected override void EntityDataToParameterCollection()
    {
      if (AllParameters.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ParameterNames.UserId).SetAsNull == false)
        AllParameters.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ParameterNames.UserId).Value = Entity.UserId;
      else
        AllParameters.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ParameterNames.UserId).Value = System.Data.SqlTypes.SqlGuid.Null;
      if (AllParameters.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ParameterNames.UserName).SetAsNull == false)
        AllParameters.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ParameterNames.UserName).Value = Entity.UserName;
      else
        AllParameters.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ParameterNames.UserName).Value = System.Data.SqlTypes.SqlChars.Null;
      if (AllParameters.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ParameterNames.Email).SetAsNull == false)
        AllParameters.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ParameterNames.Email).Value = Entity.Email;
      else
        AllParameters.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ParameterNames.Email).Value = System.Data.SqlTypes.SqlChars.Null;
    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      if (AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.UserId).SetAsNull == false)
        AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.UserId).Value = Entity.UserId;
      else
        AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.UserId).Value = Guid.Empty;
     
      if (AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PrimaryEntityId).SetAsNull == false)
        AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PrimaryEntityId).Value = Entity.PrimaryEntityId;
      else
        AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PrimaryEntityId).Value = Guid.Empty;
     
      if (AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.UserName).SetAsNull == false)
        AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.UserName).Value = Entity.UserName;
      else
        AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.UserName).Value = string.Empty;
     
      if (AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.Email).SetAsNull == false)
        AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.Email).Value = Entity.Email;
      else
        AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.Email).Value = string.Empty;
     
      if (AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.ResetPasswordFlag).SetAsNull == false)
        AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.ResetPasswordFlag).Value = Entity.ResetPasswordFlag;
      else
        AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.ResetPasswordFlag).Value = false;
     
      if (AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.LastPasswordResetDate).SetAsNull == false)
        AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.LastPasswordResetDate).Value = Entity.LastPasswordResetDate;
      else
        AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.LastPasswordResetDate).Value = DateTimeOffset.Now;
     
      if (AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PasswordResetToken).SetAsNull == false)
        AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PasswordResetToken).Value = Entity.PasswordResetToken;
      else
        AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PasswordResetToken).Value = string.Empty;
     
      if (AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PasswordResetTokenExpiration).SetAsNull == false)
        AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PasswordResetTokenExpiration).Value = Entity.PasswordResetTokenExpiration;
      else
        AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PasswordResetTokenExpiration).Value = DateTimeOffset.Now;
     
    }
    #endregion

    #region OutputParametersToEntityData Method
    /// <summary>
    /// Moves the output parameters from the Parameters collection into the Entity class.
    /// </summary>
    protected override void OutputParametersToEntityData()
    {
      if (AllParameters.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ParameterNames.RETURNVALUE).IsValueNull == false)
        Entity.RETURNVALUE = AllParameters.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ParameterNames.RETURNVALUE).GetAsInteger();
      else
        Entity.RETURNVALUE = 0;
    }
    #endregion
    
    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.UserId).IsNull == false)
        Entity.UserId = AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.UserId).GetAsGuid();
      else
        Entity.UserId = Guid.Empty;

      if (AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PrimaryEntityId).IsNull == false)
        Entity.PrimaryEntityId = AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PrimaryEntityId).GetAsGuid();
      else
        Entity.PrimaryEntityId = Guid.Empty;

      if (AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.UserName).IsNull == false)
        Entity.UserName = AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.UserName).GetAsString();
      else
        Entity.UserName = string.Empty;

      if (AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.Email).IsNull == false)
        Entity.Email = AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.Email).GetAsString();
      else
        Entity.Email = string.Empty;

      if (AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.ResetPasswordFlag).IsNull == false)
        Entity.ResetPasswordFlag = AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.ResetPasswordFlag).GetAsBool();
      else
        Entity.ResetPasswordFlag = false;

      if (AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.LastPasswordResetDate).IsNull == false)
        Entity.LastPasswordResetDate = AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.LastPasswordResetDate).GetAsDateTimeOffset();
      else
        Entity.LastPasswordResetDate = null;

      if (AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PasswordResetToken).IsNull == false)
        Entity.PasswordResetToken = AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PasswordResetToken).GetAsString();
      else
        Entity.PasswordResetToken = string.Empty;

      if (AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PasswordResetTokenExpiration).IsNull == false)
        Entity.PasswordResetTokenExpiration = AllColumns.GetByName(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PasswordResetTokenExpiration).GetAsDateTimeOffset();
      else
        Entity.PasswordResetTokenExpiration = null;

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>gcsUser_GetPasswordResetInfoPDSA</returns>
    public gcsUser_GetPasswordResetInfoPDSA CreateEntityFromDataRow(DataRow dr)
    {
      gcsUser_GetPasswordResetInfoPDSA entity = new gcsUser_GetPasswordResetInfoPDSA();

      if (dr.Table.Columns.Contains(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.UserId))
      {
        if (dr[gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.UserId] != DBNull.Value)
          entity.UserId = PDSAProperty.ConvertToGuid(dr[gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.UserId]);
      }
      if (dr.Table.Columns.Contains(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PrimaryEntityId))
      {
        if (dr[gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PrimaryEntityId] != DBNull.Value)
          entity.PrimaryEntityId = PDSAProperty.ConvertToGuid(dr[gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PrimaryEntityId]);
      }
      if (dr.Table.Columns.Contains(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.UserName))
      {
        if (dr[gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.UserName] != DBNull.Value)
          entity.UserName = PDSAString.ConvertToStringTrim(dr[gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.UserName]);
      }
      if (dr.Table.Columns.Contains(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.Email))
      {
        if (dr[gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.Email] != DBNull.Value)
          entity.Email = PDSAString.ConvertToStringTrim(dr[gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.Email]);
      }
      if (dr.Table.Columns.Contains(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.ResetPasswordFlag))
      {
        if (dr[gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.ResetPasswordFlag] != DBNull.Value)
          entity.ResetPasswordFlag = Convert.ToBoolean(dr[gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.ResetPasswordFlag]);
      }
      if (dr.Table.Columns.Contains(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.LastPasswordResetDate))
      {
        if (dr[gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.LastPasswordResetDate] != DBNull.Value)
          entity.LastPasswordResetDate = GCS.Core.Common.Extensions.DateTimeExtensions.ToDateTimeOffset(dr[gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.LastPasswordResetDate]);
      }
      if (dr.Table.Columns.Contains(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PasswordResetToken))
      {
        if (dr[gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PasswordResetToken] != DBNull.Value)
          entity.PasswordResetToken = PDSAString.ConvertToStringTrim(dr[gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PasswordResetToken]);
      }
      if (dr.Table.Columns.Contains(gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PasswordResetTokenExpiration))
      {
        if (dr[gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PasswordResetTokenExpiration] != DBNull.Value)
          entity.PasswordResetTokenExpiration = GCS.Core.Common.Extensions.DateTimeExtensions.ToDateTimeOffset(dr[gcsUser_GetPasswordResetInfoPDSAValidator.ColumnNames.PasswordResetTokenExpiration]);
      }
      entity.IsDirty = false;

      return entity;
    }
    #endregion

    #region ParameterNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the gcsUser_GetPasswordResetInfoPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ParameterNames
    {
    /// <summary>
    /// Returns '@UserId'
    /// </summary>
    public static string UserId = "@UserId";
    /// <summary>
    /// Returns '@UserName'
    /// </summary>
    public static string UserName = "@UserName";
    /// <summary>
    /// Returns '@Email'
    /// </summary>
    public static string Email = "@Email";
    /// <summary>
    /// Returns '@RETURN_VALUE'
    /// </summary>
    public static string RETURNVALUE = "@RETURN_VALUE";
    }
    #endregion
  }
}
