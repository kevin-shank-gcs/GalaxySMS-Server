using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Select data from the PersonCredentialBadgeDataViewPDSA view.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class PersonCredentialBadgeDataViewPDSAData : PDSADataClassReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the PersonCredentialBadgeDataViewPDSAData class
    /// </summary>
    public PersonCredentialBadgeDataViewPDSAData() : base()
    {
      Entity = new PersonCredentialBadgeDataViewPDSA();
      ValidatorObject = new PersonCredentialBadgeDataViewPDSAValidator(Entity);

      Init();
    }
    
    /// <summary>
    /// Constructor for the PersonCredentialBadgeDataViewPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a PersonCredentialBadgeDataViewPDSA</param>
    public PersonCredentialBadgeDataViewPDSAData(PDSADataProvider dataProvider,
      PersonCredentialBadgeDataViewPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new PersonCredentialBadgeDataViewPDSAValidator(Entity);

      Init();
    }
     
    /// <summary>
    /// Constructor for the PersonCredentialBadgeDataViewPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a PersonCredentialBadgeDataViewPDSA</param>
    /// <param name="validator">An instance of a PersonCredentialBadgeDataViewPDSAValidator</param>
    public PersonCredentialBadgeDataViewPDSAData(PDSADataProvider dataProvider,
      PersonCredentialBadgeDataViewPDSA entity, PersonCredentialBadgeDataViewPDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// A Custom SelectFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a WHERE statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum WhereFilters
    {
      /// <summary>
      /// No WhereFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom WhereFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'Company' WhereFilter
      /// </summary>
      Company
      ,
      /// <summary>
      /// 'LikeCompany' WhereFilter
      /// </summary>
      LikeCompany
    }

    /// <summary>
    /// Enumeration for selecting an ORDER BY statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum OrderByFilters
    {
      /// <summary>
      /// No OrderByFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'Company' OrderByFilter
      /// </summary>
      Company
    }
    
    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }
    /// <summary>
    /// Get/Set a WHERE clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public WhereFilters WhereFilter { get; set; }
    /// <summary>
    /// Get/Set a ORDER BY clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public OrderByFilters OrderByFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Public Property Entity Class
        private PersonCredentialBadgeDataViewPDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public PersonCredentialBadgeDataViewPDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "PersonCredentialBadgeDataViewPDSAData";
      DBObjectName = "GCS.PersonCredentialBadgeDataView";
      SchemaName = "GCS";
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;
      
      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes all of the Data Columns with valid data for each field in the table.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonCredentialUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.ActivationDateTime);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Company);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.ConcurrencyValue);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CountryOfBirthUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DateOfBirth);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DepartmentUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.EmploymentDate);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.EntityId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Ethnicity);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.ExpirationDateTime);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.FirstName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.FullName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.GenderUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.HasPhysicalDisability);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.HasVertigo);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.HomeOfficeLocation);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Initials);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.InsertDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.InsertName);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.JobTitle);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.LastName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.LegalName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.MiddleName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.NationalIdentificationNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Nationality);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.NickName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.OriginId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonActiveStatusTypeUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonRecordTypeUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PreferredName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PrimaryLanguage);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Race);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.RowOrigin);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SecondaryLanguage);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SysGalEmployeeId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TerminationDate);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData1);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData2);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData3);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData4);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData5);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData6);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData7);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData8);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData9);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData10);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData11);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData12);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData13);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData14);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData15);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData16);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData17);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData18);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData19);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData20);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData21);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData22);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData23);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData24);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData25);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData26);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData27);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData28);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData29);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData30);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData31);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData32);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData33);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData34);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData35);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData36);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData37);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData38);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData39);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData40);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData41);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData42);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData43);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData44);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData45);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData46);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData47);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData48);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData49);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData50);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Trace);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.UpdateDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.UpdateName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.VeryImportantPerson);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonPhotoMainPhoto);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBinary.Null;
      //prop.ValueForNull = new byte[0];

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonPhotoAlternatePhoto);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBinary.Null;
      //prop.ValueForNull = new byte[0];

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.AccessProfileUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.AccessProfileName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialActivationDate);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialDescription);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialExpirationDateTime);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCardNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Credential26BitStandardFacilityCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Credential26BitStandardIdCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K35BitCompanyCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K35BitIdCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K48BitCompanyCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K48BitIdCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCypress37BitFacilityCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCypress37BitIdCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialH1030237BitIdCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt64.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialH1030437BitFacilityCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialH1030437BitIdCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialSoftwareHouse37BitFacilityCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialSoftwareHouse37BitSiteCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialSoftwareHouse37BitIdCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialXceedId40BitSiteCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialXceedId40BitIdCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CountryName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DepartmentName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.EntityName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Gender);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonActiveStatusType);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonRecordType);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Date1);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Date2);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem1);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem2);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem3);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem4);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem5);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem6);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem7);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem8);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem9);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem10);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CurrentDate);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CurrentDateTime);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.BadgeTemplateName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DossierTemplateName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonUid).Value = Entity.PersonUid;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonUid).SetAsNull == true)
        Entity.PersonUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonCredentialUid).Value = Entity.PersonCredentialUid;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonCredentialUid).SetAsNull == true)
        Entity.PersonCredentialUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.ActivationDateTime).Value = Entity.ActivationDateTime;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.ActivationDateTime).SetAsNull == true)
        Entity.ActivationDateTime = null;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Company).Value = Entity.Company;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Company).SetAsNull == true)
        Entity.Company = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull == true)
        Entity.ConcurrencyValue = 0;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CountryOfBirthUid).Value = Entity.CountryOfBirthUid;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CountryOfBirthUid).SetAsNull == true)
        Entity.CountryOfBirthUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DateOfBirth).Value = Entity.DateOfBirth;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DateOfBirth).SetAsNull == true)
        Entity.DateOfBirth = null;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DepartmentUid).Value = Entity.DepartmentUid;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DepartmentUid).SetAsNull == true)
        Entity.DepartmentUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.EmploymentDate).Value = Entity.EmploymentDate;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.EmploymentDate).SetAsNull == true)
        Entity.EmploymentDate = null;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.EntityId).Value = Entity.EntityId;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.EntityId).SetAsNull == true)
        Entity.EntityId = Guid.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Ethnicity).Value = Entity.Ethnicity;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Ethnicity).SetAsNull == true)
        Entity.Ethnicity = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.ExpirationDateTime).Value = Entity.ExpirationDateTime;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.ExpirationDateTime).SetAsNull == true)
        Entity.ExpirationDateTime = null;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.FirstName).Value = Entity.FirstName;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.FirstName).SetAsNull == true)
        Entity.FirstName = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.FullName).Value = Entity.FullName;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.FullName).SetAsNull == true)
        Entity.FullName = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.GenderUid).Value = Entity.GenderUid;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.GenderUid).SetAsNull == true)
        Entity.GenderUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.HasPhysicalDisability).Value = Entity.HasPhysicalDisability;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.HasPhysicalDisability).SetAsNull == true)
        Entity.HasPhysicalDisability = false;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.HasVertigo).Value = Entity.HasVertigo;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.HasVertigo).SetAsNull == true)
        Entity.HasVertigo = false;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.HomeOfficeLocation).Value = Entity.HomeOfficeLocation;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.HomeOfficeLocation).SetAsNull == true)
        Entity.HomeOfficeLocation = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Initials).Value = Entity.Initials;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Initials).SetAsNull == true)
        Entity.Initials = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.InsertDate).SetAsNull == true)
        Entity.InsertDate = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.InsertName).SetAsNull == true)
        Entity.InsertName = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.JobTitle).Value = Entity.JobTitle;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.JobTitle).SetAsNull == true)
        Entity.JobTitle = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.LastName).Value = Entity.LastName;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.LastName).SetAsNull == true)
        Entity.LastName = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.LegalName).Value = Entity.LegalName;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.LegalName).SetAsNull == true)
        Entity.LegalName = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.MiddleName).Value = Entity.MiddleName;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.MiddleName).SetAsNull == true)
        Entity.MiddleName = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.NationalIdentificationNumber).Value = Entity.NationalIdentificationNumber;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.NationalIdentificationNumber).SetAsNull == true)
        Entity.NationalIdentificationNumber = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Nationality).Value = Entity.Nationality;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Nationality).SetAsNull == true)
        Entity.Nationality = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.NickName).Value = Entity.NickName;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.NickName).SetAsNull == true)
        Entity.NickName = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.OriginId).Value = Entity.OriginId;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.OriginId).SetAsNull == true)
        Entity.OriginId = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonActiveStatusTypeUid).Value = Entity.PersonActiveStatusTypeUid;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonActiveStatusTypeUid).SetAsNull == true)
        Entity.PersonActiveStatusTypeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonId).Value = Entity.PersonId;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonId).SetAsNull == true)
        Entity.PersonId = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonRecordTypeUid).Value = Entity.PersonRecordTypeUid;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonRecordTypeUid).SetAsNull == true)
        Entity.PersonRecordTypeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PreferredName).Value = Entity.PreferredName;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PreferredName).SetAsNull == true)
        Entity.PreferredName = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PrimaryLanguage).Value = Entity.PrimaryLanguage;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PrimaryLanguage).SetAsNull == true)
        Entity.PrimaryLanguage = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Race).Value = Entity.Race;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Race).SetAsNull == true)
        Entity.Race = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.RowOrigin).Value = Entity.RowOrigin;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.RowOrigin).SetAsNull == true)
        Entity.RowOrigin = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SecondaryLanguage).Value = Entity.SecondaryLanguage;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SecondaryLanguage).SetAsNull == true)
        Entity.SecondaryLanguage = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SysGalEmployeeId).Value = Entity.SysGalEmployeeId;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SysGalEmployeeId).SetAsNull == true)
        Entity.SysGalEmployeeId = 0;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TerminationDate).Value = Entity.TerminationDate;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TerminationDate).SetAsNull == true)
        Entity.TerminationDate = null;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData1).Value = Entity.TextData1;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData1).SetAsNull == true)
        Entity.TextData1 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData2).Value = Entity.TextData2;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData2).SetAsNull == true)
        Entity.TextData2 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData3).Value = Entity.TextData3;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData3).SetAsNull == true)
        Entity.TextData3 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData4).Value = Entity.TextData4;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData4).SetAsNull == true)
        Entity.TextData4 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData5).Value = Entity.TextData5;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData5).SetAsNull == true)
        Entity.TextData5 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData6).Value = Entity.TextData6;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData6).SetAsNull == true)
        Entity.TextData6 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData7).Value = Entity.TextData7;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData7).SetAsNull == true)
        Entity.TextData7 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData8).Value = Entity.TextData8;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData8).SetAsNull == true)
        Entity.TextData8 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData9).Value = Entity.TextData9;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData9).SetAsNull == true)
        Entity.TextData9 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData10).Value = Entity.TextData10;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData10).SetAsNull == true)
        Entity.TextData10 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData11).Value = Entity.TextData11;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData11).SetAsNull == true)
        Entity.TextData11 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData12).Value = Entity.TextData12;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData12).SetAsNull == true)
        Entity.TextData12 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData13).Value = Entity.TextData13;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData13).SetAsNull == true)
        Entity.TextData13 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData14).Value = Entity.TextData14;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData14).SetAsNull == true)
        Entity.TextData14 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData15).Value = Entity.TextData15;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData15).SetAsNull == true)
        Entity.TextData15 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData16).Value = Entity.TextData16;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData16).SetAsNull == true)
        Entity.TextData16 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData17).Value = Entity.TextData17;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData17).SetAsNull == true)
        Entity.TextData17 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData18).Value = Entity.TextData18;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData18).SetAsNull == true)
        Entity.TextData18 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData19).Value = Entity.TextData19;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData19).SetAsNull == true)
        Entity.TextData19 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData20).Value = Entity.TextData20;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData20).SetAsNull == true)
        Entity.TextData20 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData21).Value = Entity.TextData21;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData21).SetAsNull == true)
        Entity.TextData21 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData22).Value = Entity.TextData22;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData22).SetAsNull == true)
        Entity.TextData22 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData23).Value = Entity.TextData23;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData23).SetAsNull == true)
        Entity.TextData23 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData24).Value = Entity.TextData24;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData24).SetAsNull == true)
        Entity.TextData24 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData25).Value = Entity.TextData25;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData25).SetAsNull == true)
        Entity.TextData25 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData26).Value = Entity.TextData26;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData26).SetAsNull == true)
        Entity.TextData26 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData27).Value = Entity.TextData27;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData27).SetAsNull == true)
        Entity.TextData27 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData28).Value = Entity.TextData28;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData28).SetAsNull == true)
        Entity.TextData28 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData29).Value = Entity.TextData29;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData29).SetAsNull == true)
        Entity.TextData29 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData30).Value = Entity.TextData30;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData30).SetAsNull == true)
        Entity.TextData30 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData31).Value = Entity.TextData31;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData31).SetAsNull == true)
        Entity.TextData31 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData32).Value = Entity.TextData32;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData32).SetAsNull == true)
        Entity.TextData32 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData33).Value = Entity.TextData33;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData33).SetAsNull == true)
        Entity.TextData33 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData34).Value = Entity.TextData34;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData34).SetAsNull == true)
        Entity.TextData34 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData35).Value = Entity.TextData35;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData35).SetAsNull == true)
        Entity.TextData35 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData36).Value = Entity.TextData36;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData36).SetAsNull == true)
        Entity.TextData36 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData37).Value = Entity.TextData37;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData37).SetAsNull == true)
        Entity.TextData37 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData38).Value = Entity.TextData38;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData38).SetAsNull == true)
        Entity.TextData38 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData39).Value = Entity.TextData39;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData39).SetAsNull == true)
        Entity.TextData39 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData40).Value = Entity.TextData40;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData40).SetAsNull == true)
        Entity.TextData40 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData41).Value = Entity.TextData41;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData41).SetAsNull == true)
        Entity.TextData41 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData42).Value = Entity.TextData42;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData42).SetAsNull == true)
        Entity.TextData42 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData43).Value = Entity.TextData43;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData43).SetAsNull == true)
        Entity.TextData43 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData44).Value = Entity.TextData44;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData44).SetAsNull == true)
        Entity.TextData44 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData45).Value = Entity.TextData45;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData45).SetAsNull == true)
        Entity.TextData45 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData46).Value = Entity.TextData46;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData46).SetAsNull == true)
        Entity.TextData46 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData47).Value = Entity.TextData47;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData47).SetAsNull == true)
        Entity.TextData47 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData48).Value = Entity.TextData48;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData48).SetAsNull == true)
        Entity.TextData48 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData49).Value = Entity.TextData49;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData49).SetAsNull == true)
        Entity.TextData49 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData50).Value = Entity.TextData50;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData50).SetAsNull == true)
        Entity.TextData50 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Trace).Value = Entity.Trace;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Trace).SetAsNull == true)
        Entity.Trace = false;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.UpdateDate).SetAsNull == true)
        Entity.UpdateDate = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.UpdateName).SetAsNull == true)
        Entity.UpdateName = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.VeryImportantPerson).Value = Entity.VeryImportantPerson;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.VeryImportantPerson).SetAsNull == true)
        Entity.VeryImportantPerson = false;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonPhotoMainPhoto).Value = Entity.PersonPhotoMainPhoto;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonPhotoMainPhoto).SetAsNull == true)
        Entity.PersonPhotoMainPhoto = null;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonPhotoAlternatePhoto).Value = Entity.PersonPhotoAlternatePhoto;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonPhotoAlternatePhoto).SetAsNull == true)
        Entity.PersonPhotoAlternatePhoto = null;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.AccessProfileUid).Value = Entity.AccessProfileUid;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.AccessProfileUid).SetAsNull == true)
        Entity.AccessProfileUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.AccessProfileName).Value = Entity.AccessProfileName;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.AccessProfileName).SetAsNull == true)
        Entity.AccessProfileName = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialActivationDate).Value = Entity.CredentialActivationDate;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialActivationDate).SetAsNull == true)
        Entity.CredentialActivationDate = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialDescription).Value = Entity.CredentialDescription;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialDescription).SetAsNull == true)
        Entity.CredentialDescription = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialExpirationDateTime).Value = Entity.CredentialExpirationDateTime;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialExpirationDateTime).SetAsNull == true)
        Entity.CredentialExpirationDateTime = null;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCardNumber).Value = Entity.CredentialCardNumber;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCardNumber).SetAsNull == true)
        Entity.CredentialCardNumber = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Credential26BitStandardFacilityCode).Value = Entity.Credential26BitStandardFacilityCode;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Credential26BitStandardFacilityCode).SetAsNull == true)
        Entity.Credential26BitStandardFacilityCode = 0;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Credential26BitStandardIdCode).Value = Entity.Credential26BitStandardIdCode;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Credential26BitStandardIdCode).SetAsNull == true)
        Entity.Credential26BitStandardIdCode = 0;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K35BitCompanyCode).Value = Entity.CredentialCorporate1K35BitCompanyCode;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K35BitCompanyCode).SetAsNull == true)
        Entity.CredentialCorporate1K35BitCompanyCode = 0;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K35BitIdCode).Value = Entity.CredentialCorporate1K35BitIdCode;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K35BitIdCode).SetAsNull == true)
        Entity.CredentialCorporate1K35BitIdCode = 0;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K48BitCompanyCode).Value = Entity.CredentialCorporate1K48BitCompanyCode;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K48BitCompanyCode).SetAsNull == true)
        Entity.CredentialCorporate1K48BitCompanyCode = 0;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K48BitIdCode).Value = Entity.CredentialCorporate1K48BitIdCode;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K48BitIdCode).SetAsNull == true)
        Entity.CredentialCorporate1K48BitIdCode = 0;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCypress37BitFacilityCode).Value = Entity.CredentialCypress37BitFacilityCode;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCypress37BitFacilityCode).SetAsNull == true)
        Entity.CredentialCypress37BitFacilityCode = 0;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCypress37BitIdCode).Value = Entity.CredentialCypress37BitIdCode;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCypress37BitIdCode).SetAsNull == true)
        Entity.CredentialCypress37BitIdCode = 0;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialH1030237BitIdCode).Value = Entity.CredentialH1030237BitIdCode;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialH1030237BitIdCode).SetAsNull == true)
        Entity.CredentialH1030237BitIdCode = 0;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialH1030437BitFacilityCode).Value = Entity.CredentialH1030437BitFacilityCode;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialH1030437BitFacilityCode).SetAsNull == true)
        Entity.CredentialH1030437BitFacilityCode = 0;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialH1030437BitIdCode).Value = Entity.CredentialH1030437BitIdCode;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialH1030437BitIdCode).SetAsNull == true)
        Entity.CredentialH1030437BitIdCode = 0;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialSoftwareHouse37BitFacilityCode).Value = Entity.CredentialSoftwareHouse37BitFacilityCode;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialSoftwareHouse37BitFacilityCode).SetAsNull == true)
        Entity.CredentialSoftwareHouse37BitFacilityCode = 0;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialSoftwareHouse37BitSiteCode).Value = Entity.CredentialSoftwareHouse37BitSiteCode;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialSoftwareHouse37BitSiteCode).SetAsNull == true)
        Entity.CredentialSoftwareHouse37BitSiteCode = 0;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialSoftwareHouse37BitIdCode).Value = Entity.CredentialSoftwareHouse37BitIdCode;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialSoftwareHouse37BitIdCode).SetAsNull == true)
        Entity.CredentialSoftwareHouse37BitIdCode = 0;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialXceedId40BitSiteCode).Value = Entity.CredentialXceedId40BitSiteCode;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialXceedId40BitSiteCode).SetAsNull == true)
        Entity.CredentialXceedId40BitSiteCode = 0;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialXceedId40BitIdCode).Value = Entity.CredentialXceedId40BitIdCode;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialXceedId40BitIdCode).SetAsNull == true)
        Entity.CredentialXceedId40BitIdCode = 0;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CountryName).Value = Entity.CountryName;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CountryName).SetAsNull == true)
        Entity.CountryName = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DepartmentName).Value = Entity.DepartmentName;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DepartmentName).SetAsNull == true)
        Entity.DepartmentName = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.EntityName).Value = Entity.EntityName;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.EntityName).SetAsNull == true)
        Entity.EntityName = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Gender).Value = Entity.Gender;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Gender).SetAsNull == true)
        Entity.Gender = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonActiveStatusType).Value = Entity.PersonActiveStatusType;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonActiveStatusType).SetAsNull == true)
        Entity.PersonActiveStatusType = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonRecordType).Value = Entity.PersonRecordType;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonRecordType).SetAsNull == true)
        Entity.PersonRecordType = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Date1).Value = Entity.Date1;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Date1).SetAsNull == true)
        Entity.Date1 = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Date2).Value = Entity.Date2;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Date2).SetAsNull == true)
        Entity.Date2 = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem1).Value = Entity.SelectItem1;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem1).SetAsNull == true)
        Entity.SelectItem1 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem2).Value = Entity.SelectItem2;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem2).SetAsNull == true)
        Entity.SelectItem2 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem3).Value = Entity.SelectItem3;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem3).SetAsNull == true)
        Entity.SelectItem3 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem4).Value = Entity.SelectItem4;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem4).SetAsNull == true)
        Entity.SelectItem4 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem5).Value = Entity.SelectItem5;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem5).SetAsNull == true)
        Entity.SelectItem5 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem6).Value = Entity.SelectItem6;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem6).SetAsNull == true)
        Entity.SelectItem6 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem7).Value = Entity.SelectItem7;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem7).SetAsNull == true)
        Entity.SelectItem7 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem8).Value = Entity.SelectItem8;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem8).SetAsNull == true)
        Entity.SelectItem8 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem9).Value = Entity.SelectItem9;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem9).SetAsNull == true)
        Entity.SelectItem9 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem10).Value = Entity.SelectItem10;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem10).SetAsNull == true)
        Entity.SelectItem10 = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CurrentDate).Value = Entity.CurrentDate;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CurrentDate).SetAsNull == true)
        Entity.CurrentDate = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CurrentDateTime).Value = Entity.CurrentDateTime;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CurrentDateTime).SetAsNull == true)
        Entity.CurrentDateTime = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.BadgeTemplateName).Value = Entity.BadgeTemplateName;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.BadgeTemplateName).SetAsNull == true)
        Entity.BadgeTemplateName = string.Empty;
      ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DossierTemplateName).Value = Entity.DossierTemplateName;
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DossierTemplateName).SetAsNull == true)
        Entity.DossierTemplateName = string.Empty;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonUid).IsNull == false)
        Entity.PersonUid = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonUid).GetAsGuid();
      else
        Entity.PersonUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonUid, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonUid).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonCredentialUid).IsNull == false)
        Entity.PersonCredentialUid = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonCredentialUid).GetAsGuid();
      else
        Entity.PersonCredentialUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonCredentialUid, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonCredentialUid).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.ActivationDateTime).IsNull == false)
        Entity.ActivationDateTime = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.ActivationDateTime).GetAsDateTimeOffset();
      else
        Entity.ActivationDateTime = null;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.ActivationDateTime, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.ActivationDateTime).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Company).IsNull == false)
        Entity.Company = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Company).GetAsString();
      else
        Entity.Company = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Company, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Company).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
      else
        Entity.ConcurrencyValue = 0;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.ConcurrencyValue, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.ConcurrencyValue).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CountryOfBirthUid).IsNull == false)
        Entity.CountryOfBirthUid = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CountryOfBirthUid).GetAsGuid();
      else
        Entity.CountryOfBirthUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CountryOfBirthUid, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CountryOfBirthUid).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DateOfBirth).IsNull == false)
        Entity.DateOfBirth = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DateOfBirth).GetAsDate();
      else
        Entity.DateOfBirth = null;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DateOfBirth, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DateOfBirth).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DepartmentUid).IsNull == false)
        Entity.DepartmentUid = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DepartmentUid).GetAsGuid();
      else
        Entity.DepartmentUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DepartmentUid, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DepartmentUid).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.EmploymentDate).IsNull == false)
        Entity.EmploymentDate = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.EmploymentDate).GetAsDate();
      else
        Entity.EmploymentDate = null;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.EmploymentDate, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.EmploymentDate).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.EntityId).IsNull == false)
        Entity.EntityId = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.EntityId).GetAsGuid();
      else
        Entity.EntityId = Guid.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.EntityId, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.EntityId).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Ethnicity).IsNull == false)
        Entity.Ethnicity = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Ethnicity).GetAsString();
      else
        Entity.Ethnicity = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Ethnicity, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Ethnicity).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.ExpirationDateTime).IsNull == false)
        Entity.ExpirationDateTime = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.ExpirationDateTime).GetAsDateTimeOffset();
      else
        Entity.ExpirationDateTime = null;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.ExpirationDateTime, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.ExpirationDateTime).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.FirstName).IsNull == false)
        Entity.FirstName = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.FirstName).GetAsString();
      else
        Entity.FirstName = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.FirstName, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.FirstName).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.FullName).IsNull == false)
        Entity.FullName = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.FullName).GetAsString();
      else
        Entity.FullName = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.FullName, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.FullName).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.GenderUid).IsNull == false)
        Entity.GenderUid = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.GenderUid).GetAsGuid();
      else
        Entity.GenderUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.GenderUid, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.GenderUid).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.HasPhysicalDisability).IsNull == false)
        Entity.HasPhysicalDisability = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.HasPhysicalDisability).GetAsBool();
      else
        Entity.HasPhysicalDisability = false;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.HasPhysicalDisability, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.HasPhysicalDisability).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.HasVertigo).IsNull == false)
        Entity.HasVertigo = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.HasVertigo).GetAsBool();
      else
        Entity.HasVertigo = false;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.HasVertigo, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.HasVertigo).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.HomeOfficeLocation).IsNull == false)
        Entity.HomeOfficeLocation = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.HomeOfficeLocation).GetAsString();
      else
        Entity.HomeOfficeLocation = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.HomeOfficeLocation, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.HomeOfficeLocation).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Initials).IsNull == false)
        Entity.Initials = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Initials).GetAsString();
      else
        Entity.Initials = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Initials, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Initials).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
      else
        Entity.InsertDate = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.InsertDate, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.InsertDate).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.InsertName).GetAsString();
      else
        Entity.InsertName = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.InsertName, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.InsertName).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.JobTitle).IsNull == false)
        Entity.JobTitle = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.JobTitle).GetAsString();
      else
        Entity.JobTitle = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.JobTitle, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.JobTitle).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.LastName).IsNull == false)
        Entity.LastName = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.LastName).GetAsString();
      else
        Entity.LastName = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.LastName, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.LastName).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.LegalName).IsNull == false)
        Entity.LegalName = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.LegalName).GetAsString();
      else
        Entity.LegalName = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.LegalName, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.LegalName).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.MiddleName).IsNull == false)
        Entity.MiddleName = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.MiddleName).GetAsString();
      else
        Entity.MiddleName = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.MiddleName, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.MiddleName).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.NationalIdentificationNumber).IsNull == false)
        Entity.NationalIdentificationNumber = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.NationalIdentificationNumber).GetAsString();
      else
        Entity.NationalIdentificationNumber = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.NationalIdentificationNumber, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.NationalIdentificationNumber).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Nationality).IsNull == false)
        Entity.Nationality = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Nationality).GetAsString();
      else
        Entity.Nationality = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Nationality, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Nationality).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.NickName).IsNull == false)
        Entity.NickName = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.NickName).GetAsString();
      else
        Entity.NickName = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.NickName, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.NickName).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.OriginId).IsNull == false)
        Entity.OriginId = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.OriginId).GetAsString();
      else
        Entity.OriginId = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.OriginId, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.OriginId).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonActiveStatusTypeUid).IsNull == false)
        Entity.PersonActiveStatusTypeUid = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonActiveStatusTypeUid).GetAsGuid();
      else
        Entity.PersonActiveStatusTypeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonActiveStatusTypeUid, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonActiveStatusTypeUid).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonId).IsNull == false)
        Entity.PersonId = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonId).GetAsString();
      else
        Entity.PersonId = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonId, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonId).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonRecordTypeUid).IsNull == false)
        Entity.PersonRecordTypeUid = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonRecordTypeUid).GetAsGuid();
      else
        Entity.PersonRecordTypeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonRecordTypeUid, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonRecordTypeUid).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PreferredName).IsNull == false)
        Entity.PreferredName = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PreferredName).GetAsString();
      else
        Entity.PreferredName = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PreferredName, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PreferredName).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PrimaryLanguage).IsNull == false)
        Entity.PrimaryLanguage = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PrimaryLanguage).GetAsString();
      else
        Entity.PrimaryLanguage = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PrimaryLanguage, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PrimaryLanguage).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Race).IsNull == false)
        Entity.Race = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Race).GetAsString();
      else
        Entity.Race = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Race, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Race).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.RowOrigin).IsNull == false)
        Entity.RowOrigin = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.RowOrigin).GetAsString();
      else
        Entity.RowOrigin = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.RowOrigin, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.RowOrigin).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SecondaryLanguage).IsNull == false)
        Entity.SecondaryLanguage = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SecondaryLanguage).GetAsString();
      else
        Entity.SecondaryLanguage = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SecondaryLanguage, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SecondaryLanguage).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SysGalEmployeeId).IsNull == false)
        Entity.SysGalEmployeeId = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SysGalEmployeeId).GetAsInteger();
      else
        Entity.SysGalEmployeeId = 0;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SysGalEmployeeId, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SysGalEmployeeId).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TerminationDate).IsNull == false)
        Entity.TerminationDate = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TerminationDate).GetAsDate();
      else
        Entity.TerminationDate = null;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TerminationDate, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TerminationDate).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData1).IsNull == false)
        Entity.TextData1 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData1).GetAsString();
      else
        Entity.TextData1 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData1, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData1).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData2).IsNull == false)
        Entity.TextData2 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData2).GetAsString();
      else
        Entity.TextData2 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData2, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData2).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData3).IsNull == false)
        Entity.TextData3 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData3).GetAsString();
      else
        Entity.TextData3 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData3, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData3).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData4).IsNull == false)
        Entity.TextData4 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData4).GetAsString();
      else
        Entity.TextData4 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData4, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData4).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData5).IsNull == false)
        Entity.TextData5 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData5).GetAsString();
      else
        Entity.TextData5 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData5, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData5).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData6).IsNull == false)
        Entity.TextData6 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData6).GetAsString();
      else
        Entity.TextData6 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData6, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData6).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData7).IsNull == false)
        Entity.TextData7 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData7).GetAsString();
      else
        Entity.TextData7 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData7, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData7).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData8).IsNull == false)
        Entity.TextData8 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData8).GetAsString();
      else
        Entity.TextData8 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData8, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData8).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData9).IsNull == false)
        Entity.TextData9 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData9).GetAsString();
      else
        Entity.TextData9 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData9, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData9).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData10).IsNull == false)
        Entity.TextData10 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData10).GetAsString();
      else
        Entity.TextData10 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData10, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData10).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData11).IsNull == false)
        Entity.TextData11 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData11).GetAsString();
      else
        Entity.TextData11 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData11, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData11).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData12).IsNull == false)
        Entity.TextData12 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData12).GetAsString();
      else
        Entity.TextData12 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData12, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData12).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData13).IsNull == false)
        Entity.TextData13 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData13).GetAsString();
      else
        Entity.TextData13 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData13, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData13).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData14).IsNull == false)
        Entity.TextData14 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData14).GetAsString();
      else
        Entity.TextData14 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData14, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData14).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData15).IsNull == false)
        Entity.TextData15 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData15).GetAsString();
      else
        Entity.TextData15 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData15, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData15).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData16).IsNull == false)
        Entity.TextData16 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData16).GetAsString();
      else
        Entity.TextData16 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData16, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData16).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData17).IsNull == false)
        Entity.TextData17 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData17).GetAsString();
      else
        Entity.TextData17 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData17, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData17).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData18).IsNull == false)
        Entity.TextData18 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData18).GetAsString();
      else
        Entity.TextData18 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData18, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData18).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData19).IsNull == false)
        Entity.TextData19 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData19).GetAsString();
      else
        Entity.TextData19 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData19, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData19).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData20).IsNull == false)
        Entity.TextData20 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData20).GetAsString();
      else
        Entity.TextData20 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData20, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData20).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData21).IsNull == false)
        Entity.TextData21 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData21).GetAsString();
      else
        Entity.TextData21 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData21, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData21).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData22).IsNull == false)
        Entity.TextData22 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData22).GetAsString();
      else
        Entity.TextData22 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData22, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData22).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData23).IsNull == false)
        Entity.TextData23 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData23).GetAsString();
      else
        Entity.TextData23 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData23, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData23).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData24).IsNull == false)
        Entity.TextData24 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData24).GetAsString();
      else
        Entity.TextData24 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData24, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData24).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData25).IsNull == false)
        Entity.TextData25 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData25).GetAsString();
      else
        Entity.TextData25 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData25, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData25).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData26).IsNull == false)
        Entity.TextData26 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData26).GetAsString();
      else
        Entity.TextData26 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData26, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData26).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData27).IsNull == false)
        Entity.TextData27 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData27).GetAsString();
      else
        Entity.TextData27 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData27, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData27).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData28).IsNull == false)
        Entity.TextData28 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData28).GetAsString();
      else
        Entity.TextData28 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData28, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData28).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData29).IsNull == false)
        Entity.TextData29 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData29).GetAsString();
      else
        Entity.TextData29 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData29, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData29).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData30).IsNull == false)
        Entity.TextData30 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData30).GetAsString();
      else
        Entity.TextData30 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData30, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData30).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData31).IsNull == false)
        Entity.TextData31 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData31).GetAsString();
      else
        Entity.TextData31 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData31, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData31).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData32).IsNull == false)
        Entity.TextData32 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData32).GetAsString();
      else
        Entity.TextData32 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData32, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData32).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData33).IsNull == false)
        Entity.TextData33 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData33).GetAsString();
      else
        Entity.TextData33 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData33, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData33).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData34).IsNull == false)
        Entity.TextData34 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData34).GetAsString();
      else
        Entity.TextData34 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData34, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData34).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData35).IsNull == false)
        Entity.TextData35 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData35).GetAsString();
      else
        Entity.TextData35 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData35, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData35).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData36).IsNull == false)
        Entity.TextData36 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData36).GetAsString();
      else
        Entity.TextData36 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData36, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData36).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData37).IsNull == false)
        Entity.TextData37 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData37).GetAsString();
      else
        Entity.TextData37 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData37, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData37).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData38).IsNull == false)
        Entity.TextData38 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData38).GetAsString();
      else
        Entity.TextData38 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData38, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData38).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData39).IsNull == false)
        Entity.TextData39 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData39).GetAsString();
      else
        Entity.TextData39 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData39, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData39).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData40).IsNull == false)
        Entity.TextData40 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData40).GetAsString();
      else
        Entity.TextData40 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData40, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData40).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData41).IsNull == false)
        Entity.TextData41 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData41).GetAsString();
      else
        Entity.TextData41 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData41, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData41).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData42).IsNull == false)
        Entity.TextData42 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData42).GetAsString();
      else
        Entity.TextData42 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData42, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData42).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData43).IsNull == false)
        Entity.TextData43 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData43).GetAsString();
      else
        Entity.TextData43 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData43, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData43).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData44).IsNull == false)
        Entity.TextData44 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData44).GetAsString();
      else
        Entity.TextData44 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData44, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData44).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData45).IsNull == false)
        Entity.TextData45 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData45).GetAsString();
      else
        Entity.TextData45 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData45, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData45).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData46).IsNull == false)
        Entity.TextData46 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData46).GetAsString();
      else
        Entity.TextData46 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData46, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData46).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData47).IsNull == false)
        Entity.TextData47 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData47).GetAsString();
      else
        Entity.TextData47 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData47, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData47).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData48).IsNull == false)
        Entity.TextData48 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData48).GetAsString();
      else
        Entity.TextData48 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData48, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData48).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData49).IsNull == false)
        Entity.TextData49 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData49).GetAsString();
      else
        Entity.TextData49 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData49, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData49).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData50).IsNull == false)
        Entity.TextData50 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData50).GetAsString();
      else
        Entity.TextData50 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData50, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.TextData50).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Trace).IsNull == false)
        Entity.Trace = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Trace).GetAsBool();
      else
        Entity.Trace = false;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Trace, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Trace).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.UpdateDate).GetAsDateTimeOffset();
      else
        Entity.UpdateDate = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.UpdateDate, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.UpdateDate).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.UpdateName).GetAsString();
      else
        Entity.UpdateName = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.UpdateName, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.UpdateName).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.VeryImportantPerson).IsNull == false)
        Entity.VeryImportantPerson = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.VeryImportantPerson).GetAsBool();
      else
        Entity.VeryImportantPerson = false;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.VeryImportantPerson, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.VeryImportantPerson).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonPhotoMainPhoto).IsNull == false)
        Entity.PersonPhotoMainPhoto = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonPhotoMainPhoto).GetAsByteArray();
      else
        Entity.PersonPhotoMainPhoto = new byte[0];
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonPhotoMainPhoto, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonPhotoMainPhoto).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonPhotoAlternatePhoto).IsNull == false)
        Entity.PersonPhotoAlternatePhoto = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonPhotoAlternatePhoto).GetAsByteArray();
      else
        Entity.PersonPhotoAlternatePhoto = new byte[0];
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonPhotoAlternatePhoto, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonPhotoAlternatePhoto).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.AccessProfileUid).IsNull == false)
        Entity.AccessProfileUid = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.AccessProfileUid).GetAsGuid();
      else
        Entity.AccessProfileUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.AccessProfileUid, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.AccessProfileUid).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.AccessProfileName).IsNull == false)
        Entity.AccessProfileName = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.AccessProfileName).GetAsString();
      else
        Entity.AccessProfileName = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.AccessProfileName, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.AccessProfileName).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialActivationDate).IsNull == false)
        Entity.CredentialActivationDate = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialActivationDate).GetAsDateTimeOffset();
      else
        Entity.CredentialActivationDate = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialActivationDate, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialActivationDate).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialDescription).IsNull == false)
        Entity.CredentialDescription = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialDescription).GetAsString();
      else
        Entity.CredentialDescription = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialDescription, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialDescription).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialExpirationDateTime).IsNull == false)
        Entity.CredentialExpirationDateTime = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialExpirationDateTime).GetAsDateTimeOffset();
      else
        Entity.CredentialExpirationDateTime = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialExpirationDateTime, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialExpirationDateTime).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCardNumber).IsNull == false)
        Entity.CredentialCardNumber = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCardNumber).GetAsString();
      else
        Entity.CredentialCardNumber = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCardNumber, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCardNumber).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Credential26BitStandardFacilityCode).IsNull == false)
        Entity.Credential26BitStandardFacilityCode = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Credential26BitStandardFacilityCode).GetAsShort();
      else
        Entity.Credential26BitStandardFacilityCode = 0;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Credential26BitStandardFacilityCode, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Credential26BitStandardFacilityCode).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Credential26BitStandardIdCode).IsNull == false)
        Entity.Credential26BitStandardIdCode = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Credential26BitStandardIdCode).GetAsInteger();
      else
        Entity.Credential26BitStandardIdCode = 0;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Credential26BitStandardIdCode, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Credential26BitStandardIdCode).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K35BitCompanyCode).IsNull == false)
        Entity.CredentialCorporate1K35BitCompanyCode = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K35BitCompanyCode).GetAsInteger();
      else
        Entity.CredentialCorporate1K35BitCompanyCode = 0;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K35BitCompanyCode, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K35BitCompanyCode).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K35BitIdCode).IsNull == false)
        Entity.CredentialCorporate1K35BitIdCode = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K35BitIdCode).GetAsInteger();
      else
        Entity.CredentialCorporate1K35BitIdCode = 0;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K35BitIdCode, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K35BitIdCode).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K48BitCompanyCode).IsNull == false)
        Entity.CredentialCorporate1K48BitCompanyCode = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K48BitCompanyCode).GetAsInteger();
      else
        Entity.CredentialCorporate1K48BitCompanyCode = 0;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K48BitCompanyCode, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K48BitCompanyCode).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K48BitIdCode).IsNull == false)
        Entity.CredentialCorporate1K48BitIdCode = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K48BitIdCode).GetAsInteger();
      else
        Entity.CredentialCorporate1K48BitIdCode = 0;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K48BitIdCode, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCorporate1K48BitIdCode).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCypress37BitFacilityCode).IsNull == false)
        Entity.CredentialCypress37BitFacilityCode = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCypress37BitFacilityCode).GetAsInteger();
      else
        Entity.CredentialCypress37BitFacilityCode = 0;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCypress37BitFacilityCode, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCypress37BitFacilityCode).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCypress37BitIdCode).IsNull == false)
        Entity.CredentialCypress37BitIdCode = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCypress37BitIdCode).GetAsInteger();
      else
        Entity.CredentialCypress37BitIdCode = 0;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCypress37BitIdCode, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialCypress37BitIdCode).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialH1030237BitIdCode).IsNull == false)
        Entity.CredentialH1030237BitIdCode = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialH1030237BitIdCode).GetAsLong();
      else
        Entity.CredentialH1030237BitIdCode = 0;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialH1030237BitIdCode, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialH1030237BitIdCode).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialH1030437BitFacilityCode).IsNull == false)
        Entity.CredentialH1030437BitFacilityCode = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialH1030437BitFacilityCode).GetAsInteger();
      else
        Entity.CredentialH1030437BitFacilityCode = 0;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialH1030437BitFacilityCode, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialH1030437BitFacilityCode).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialH1030437BitIdCode).IsNull == false)
        Entity.CredentialH1030437BitIdCode = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialH1030437BitIdCode).GetAsInteger();
      else
        Entity.CredentialH1030437BitIdCode = 0;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialH1030437BitIdCode, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialH1030437BitIdCode).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialSoftwareHouse37BitFacilityCode).IsNull == false)
        Entity.CredentialSoftwareHouse37BitFacilityCode = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialSoftwareHouse37BitFacilityCode).GetAsInteger();
      else
        Entity.CredentialSoftwareHouse37BitFacilityCode = 0;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialSoftwareHouse37BitFacilityCode, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialSoftwareHouse37BitFacilityCode).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialSoftwareHouse37BitSiteCode).IsNull == false)
        Entity.CredentialSoftwareHouse37BitSiteCode = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialSoftwareHouse37BitSiteCode).GetAsShort();
      else
        Entity.CredentialSoftwareHouse37BitSiteCode = 0;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialSoftwareHouse37BitSiteCode, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialSoftwareHouse37BitSiteCode).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialSoftwareHouse37BitIdCode).IsNull == false)
        Entity.CredentialSoftwareHouse37BitIdCode = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialSoftwareHouse37BitIdCode).GetAsInteger();
      else
        Entity.CredentialSoftwareHouse37BitIdCode = 0;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialSoftwareHouse37BitIdCode, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialSoftwareHouse37BitIdCode).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialXceedId40BitSiteCode).IsNull == false)
        Entity.CredentialXceedId40BitSiteCode = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialXceedId40BitSiteCode).GetAsInteger();
      else
        Entity.CredentialXceedId40BitSiteCode = 0;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialXceedId40BitSiteCode, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialXceedId40BitSiteCode).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialXceedId40BitIdCode).IsNull == false)
        Entity.CredentialXceedId40BitIdCode = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialXceedId40BitIdCode).GetAsInteger();
      else
        Entity.CredentialXceedId40BitIdCode = 0;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialXceedId40BitIdCode, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CredentialXceedId40BitIdCode).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CountryName).IsNull == false)
        Entity.CountryName = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CountryName).GetAsString();
      else
        Entity.CountryName = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CountryName, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CountryName).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DepartmentName).IsNull == false)
        Entity.DepartmentName = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DepartmentName).GetAsString();
      else
        Entity.DepartmentName = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DepartmentName, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DepartmentName).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.EntityName).IsNull == false)
        Entity.EntityName = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.EntityName).GetAsString();
      else
        Entity.EntityName = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.EntityName, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.EntityName).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Gender).IsNull == false)
        Entity.Gender = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Gender).GetAsString();
      else
        Entity.Gender = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Gender, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Gender).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonActiveStatusType).IsNull == false)
        Entity.PersonActiveStatusType = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonActiveStatusType).GetAsString();
      else
        Entity.PersonActiveStatusType = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonActiveStatusType, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonActiveStatusType).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonRecordType).IsNull == false)
        Entity.PersonRecordType = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonRecordType).GetAsString();
      else
        Entity.PersonRecordType = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonRecordType, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.PersonRecordType).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Date1).IsNull == false)
        Entity.Date1 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Date1).GetAsDateTimeOffset();
      else
        Entity.Date1 = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Date1, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Date1).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Date2).IsNull == false)
        Entity.Date2 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Date2).GetAsDateTimeOffset();
      else
        Entity.Date2 = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Date2, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.Date2).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem1).IsNull == false)
        Entity.SelectItem1 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem1).GetAsString();
      else
        Entity.SelectItem1 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem1, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem1).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem2).IsNull == false)
        Entity.SelectItem2 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem2).GetAsString();
      else
        Entity.SelectItem2 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem2, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem2).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem3).IsNull == false)
        Entity.SelectItem3 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem3).GetAsString();
      else
        Entity.SelectItem3 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem3, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem3).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem4).IsNull == false)
        Entity.SelectItem4 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem4).GetAsString();
      else
        Entity.SelectItem4 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem4, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem4).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem5).IsNull == false)
        Entity.SelectItem5 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem5).GetAsString();
      else
        Entity.SelectItem5 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem5, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem5).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem6).IsNull == false)
        Entity.SelectItem6 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem6).GetAsString();
      else
        Entity.SelectItem6 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem6, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem6).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem7).IsNull == false)
        Entity.SelectItem7 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem7).GetAsString();
      else
        Entity.SelectItem7 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem7, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem7).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem8).IsNull == false)
        Entity.SelectItem8 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem8).GetAsString();
      else
        Entity.SelectItem8 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem8, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem8).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem9).IsNull == false)
        Entity.SelectItem9 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem9).GetAsString();
      else
        Entity.SelectItem9 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem9, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem9).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem10).IsNull == false)
        Entity.SelectItem10 = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem10).GetAsString();
      else
        Entity.SelectItem10 = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem10, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.SelectItem10).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CurrentDate).IsNull == false)
        Entity.CurrentDate = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CurrentDate).GetAsDateTimeOffset();
      else
        Entity.CurrentDate = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CurrentDate, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CurrentDate).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CurrentDateTime).IsNull == false)
        Entity.CurrentDateTime = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CurrentDateTime).GetAsDateTimeOffset();
      else
        Entity.CurrentDateTime = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CurrentDateTime, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.CurrentDateTime).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.BadgeTemplateName).IsNull == false)
        Entity.BadgeTemplateName = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.BadgeTemplateName).GetAsString();
      else
        Entity.BadgeTemplateName = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.BadgeTemplateName, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.BadgeTemplateName).Value);

      if (ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DossierTemplateName).IsNull == false)
        Entity.DossierTemplateName = ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DossierTemplateName).GetAsString();
      else
        Entity.DossierTemplateName = string.Empty;
      Entity.SetOriginalValueForProperty(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DossierTemplateName, ValidatorObject.Properties.GetByName(PersonCredentialBadgeDataViewPDSAValidator.ColumnNames.DossierTemplateName).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>PersonCredentialBadgeDataViewPDSA</returns>
    public PersonCredentialBadgeDataViewPDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new PersonCredentialBadgeDataViewPDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          sb.Append(" SELECT PersonUid, PersonCredentialUid, ActivationDateTime, Company, ConcurrencyValue, CountryOfBirthUid, DateOfBirth, DepartmentUid, EmploymentDate, EntityId, Ethnicity, ExpirationDateTime, FirstName, FullName, GenderUid, HasPhysicalDisability, HasVertigo, HomeOfficeLocation, Initials, InsertDate, InsertName, JobTitle, LastName, LegalName, MiddleName, NationalIdentificationNumber, Nationality, NickName, OriginId, PersonActiveStatusTypeUid, PersonId, PersonRecordTypeUid, PreferredName, PrimaryLanguage, Race, RowOrigin, SecondaryLanguage, SysGalEmployeeId, TerminationDate, TextData1, TextData2, TextData3, TextData4, TextData5, TextData6, TextData7, TextData8, TextData9, TextData10, TextData11, TextData12, TextData13, TextData14, TextData15, TextData16, TextData17, TextData18, TextData19, TextData20, TextData21, TextData22, TextData23, TextData24, TextData25, TextData26, TextData27, TextData28, TextData29, TextData30, TextData31, TextData32, TextData33, TextData34, TextData35, TextData36, TextData37, TextData38, TextData39, TextData40, TextData41, TextData42, TextData43, TextData44, TextData45, TextData46, TextData47, TextData48, TextData49, TextData50, Trace, UpdateDate, UpdateName, VeryImportantPerson, PersonPhotoMainPhoto, PersonPhotoAlternatePhoto, AccessProfileUid, AccessProfileName, CredentialActivationDate, CredentialDescription, CredentialExpirationDateTime, CredentialCardNumber, Credential26BitStandardFacilityCode, Credential26BitStandardIdCode, CredentialCorporate1K35BitCompanyCode, CredentialCorporate1K35BitIdCode, CredentialCorporate1K48BitCompanyCode, CredentialCorporate1K48BitIdCode, CredentialCypress37BitFacilityCode, CredentialCypress37BitIdCode, CredentialH1030237BitIdCode, CredentialH1030437BitFacilityCode, CredentialH1030437BitIdCode, CredentialSoftwareHouse37BitFacilityCode, CredentialSoftwareHouse37BitSiteCode, CredentialSoftwareHouse37BitIdCode, CredentialXceedId40BitSiteCode, CredentialXceedId40BitIdCode, CountryName, DepartmentName, EntityName, Gender, PersonActiveStatusType, PersonRecordType, Date1, Date2, SelectItem1, SelectItem2, SelectItem3, SelectItem4, SelectItem5, SelectItem6, SelectItem7, SelectItem8, SelectItem9, SelectItem10, CurrentDate, CurrentDateTime, BadgeTemplateName, DossierTemplateName FROM GCS.PersonCredentialBadgeDataView");

          
          break;
        case SelectFilters.Search:
          sb.Append(" SELECT PersonUid, PersonCredentialUid, ActivationDateTime, Company, ConcurrencyValue, CountryOfBirthUid, DateOfBirth, DepartmentUid, EmploymentDate, EntityId, Ethnicity, ExpirationDateTime, FirstName, FullName, GenderUid, HasPhysicalDisability, HasVertigo, HomeOfficeLocation, Initials, InsertDate, InsertName, JobTitle, LastName, LegalName, MiddleName, NationalIdentificationNumber, Nationality, NickName, OriginId, PersonActiveStatusTypeUid, PersonId, PersonRecordTypeUid, PreferredName, PrimaryLanguage, Race, RowOrigin, SecondaryLanguage, SysGalEmployeeId, TerminationDate, TextData1, TextData2, TextData3, TextData4, TextData5, TextData6, TextData7, TextData8, TextData9, TextData10, TextData11, TextData12, TextData13, TextData14, TextData15, TextData16, TextData17, TextData18, TextData19, TextData20, TextData21, TextData22, TextData23, TextData24, TextData25, TextData26, TextData27, TextData28, TextData29, TextData30, TextData31, TextData32, TextData33, TextData34, TextData35, TextData36, TextData37, TextData38, TextData39, TextData40, TextData41, TextData42, TextData43, TextData44, TextData45, TextData46, TextData47, TextData48, TextData49, TextData50, Trace, UpdateDate, UpdateName, VeryImportantPerson, PersonPhotoMainPhoto, PersonPhotoAlternatePhoto, AccessProfileUid, AccessProfileName, CredentialActivationDate, CredentialDescription, CredentialExpirationDateTime, CredentialCardNumber, Credential26BitStandardFacilityCode, Credential26BitStandardIdCode, CredentialCorporate1K35BitCompanyCode, CredentialCorporate1K35BitIdCode, CredentialCorporate1K48BitCompanyCode, CredentialCorporate1K48BitIdCode, CredentialCypress37BitFacilityCode, CredentialCypress37BitIdCode, CredentialH1030237BitIdCode, CredentialH1030437BitFacilityCode, CredentialH1030437BitIdCode, CredentialSoftwareHouse37BitFacilityCode, CredentialSoftwareHouse37BitSiteCode, CredentialSoftwareHouse37BitIdCode, CredentialXceedId40BitSiteCode, CredentialXceedId40BitIdCode, CountryName, DepartmentName, EntityName, Gender, PersonActiveStatusType, PersonRecordType, Date1, Date2, SelectItem1, SelectItem2, SelectItem3, SelectItem4, SelectItem5, SelectItem6, SelectItem7, SelectItem8, SelectItem9, SelectItem10, CurrentDate, CurrentDateTime, BadgeTemplateName, DossierTemplateName FROM GCS.PersonCredentialBadgeDataView WHERE (@Company IS NULL OR Company LIKE @Company + '%')");

          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL that will count the number of rows returned from this view.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          sb.Append(" SELECT Count(*) As NumRecs FROM GCS.PersonCredentialBadgeDataView");

          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      sb.Append(WhereClauseSQL());
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion
    
    #region WhereClauseSQL Method
    /// <summary>
    /// Builds the WHERE clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string WhereClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (WhereFilter)
      {
        case WhereFilters.Custom:
          sb.Append(" " + WhereCustom);

          break;

        case WhereFilters.None:
          //  Do nothing

          break;

        case WhereFilters.Company:
          sb.Append(" WHERE Company = @Company");

          
          break;
        case WhereFilters.LikeCompany:
          sb.Append(" WHERE Company LIKE @Company + '%'");

          
          break;
      }
      
      return sb.ToString();
    }
    #endregion

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
         
          break;
        case SelectFilters.Search:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@Company", DbType.String, Entity.Company));
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion

    #region WhereClauseFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any WHERE clause parameters.
    /// </summary>
    protected override void WhereClauseFillInParameters()
    {
      switch (WhereFilter)
      {
        case WhereFilters.Company:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@Company", DbType.String, Entity.Company));
         
          break;
        case WhereFilters.LikeCompany:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@Company", DbType.String, Entity.Company));
         
          break;
      }
    }
    #endregion

    #region OrderByClauseSQL Method
    /// <summary>
    /// Builds the ORDER BY clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string OrderByClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (OrderByFilter)
      {
        case OrderByFilters.None:
          //  Do Nothing

          break;

        case OrderByFilters.Custom:
          sb.Append(" " + OrderByCustom);

          break;
          
        case OrderByFilters.Company:
          sb.Append(" ORDER BY Company");

          
          break;
      }

      return sb.ToString();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the PersonCredentialBadgeDataViewPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'PersonUid'
    /// </summary>
    public static string PersonUid = "PersonUid";
    /// <summary>
    /// Returns 'PersonCredentialUid'
    /// </summary>
    public static string PersonCredentialUid = "PersonCredentialUid";
    /// <summary>
    /// Returns 'ActivationDateTime'
    /// </summary>
    public static string ActivationDateTime = "ActivationDateTime";
    /// <summary>
    /// Returns 'Company'
    /// </summary>
    public static string Company = "Company";
    /// <summary>
    /// Returns 'ConcurrencyValue'
    /// </summary>
    public static string ConcurrencyValue = "ConcurrencyValue";
    /// <summary>
    /// Returns 'CountryOfBirthUid'
    /// </summary>
    public static string CountryOfBirthUid = "CountryOfBirthUid";
    /// <summary>
    /// Returns 'DateOfBirth'
    /// </summary>
    public static string DateOfBirth = "DateOfBirth";
    /// <summary>
    /// Returns 'DepartmentUid'
    /// </summary>
    public static string DepartmentUid = "DepartmentUid";
    /// <summary>
    /// Returns 'EmploymentDate'
    /// </summary>
    public static string EmploymentDate = "EmploymentDate";
    /// <summary>
    /// Returns 'EntityId'
    /// </summary>
    public static string EntityId = "EntityId";
    /// <summary>
    /// Returns 'Ethnicity'
    /// </summary>
    public static string Ethnicity = "Ethnicity";
    /// <summary>
    /// Returns 'ExpirationDateTime'
    /// </summary>
    public static string ExpirationDateTime = "ExpirationDateTime";
    /// <summary>
    /// Returns 'FirstName'
    /// </summary>
    public static string FirstName = "FirstName";
    /// <summary>
    /// Returns 'FullName'
    /// </summary>
    public static string FullName = "FullName";
    /// <summary>
    /// Returns 'GenderUid'
    /// </summary>
    public static string GenderUid = "GenderUid";
    /// <summary>
    /// Returns 'HasPhysicalDisability'
    /// </summary>
    public static string HasPhysicalDisability = "HasPhysicalDisability";
    /// <summary>
    /// Returns 'HasVertigo'
    /// </summary>
    public static string HasVertigo = "HasVertigo";
    /// <summary>
    /// Returns 'HomeOfficeLocation'
    /// </summary>
    public static string HomeOfficeLocation = "HomeOfficeLocation";
    /// <summary>
    /// Returns 'Initials'
    /// </summary>
    public static string Initials = "Initials";
    /// <summary>
    /// Returns 'InsertDate'
    /// </summary>
    public static string InsertDate = "InsertDate";
    /// <summary>
    /// Returns 'InsertName'
    /// </summary>
    public static string InsertName = "InsertName";
    /// <summary>
    /// Returns 'JobTitle'
    /// </summary>
    public static string JobTitle = "JobTitle";
    /// <summary>
    /// Returns 'LastName'
    /// </summary>
    public static string LastName = "LastName";
    /// <summary>
    /// Returns 'LegalName'
    /// </summary>
    public static string LegalName = "LegalName";
    /// <summary>
    /// Returns 'MiddleName'
    /// </summary>
    public static string MiddleName = "MiddleName";
    /// <summary>
    /// Returns 'NationalIdentificationNumber'
    /// </summary>
    public static string NationalIdentificationNumber = "NationalIdentificationNumber";
    /// <summary>
    /// Returns 'Nationality'
    /// </summary>
    public static string Nationality = "Nationality";
    /// <summary>
    /// Returns 'NickName'
    /// </summary>
    public static string NickName = "NickName";
    /// <summary>
    /// Returns 'OriginId'
    /// </summary>
    public static string OriginId = "OriginId";
    /// <summary>
    /// Returns 'PersonActiveStatusTypeUid'
    /// </summary>
    public static string PersonActiveStatusTypeUid = "PersonActiveStatusTypeUid";
    /// <summary>
    /// Returns 'PersonId'
    /// </summary>
    public static string PersonId = "PersonId";
    /// <summary>
    /// Returns 'PersonRecordTypeUid'
    /// </summary>
    public static string PersonRecordTypeUid = "PersonRecordTypeUid";
    /// <summary>
    /// Returns 'PreferredName'
    /// </summary>
    public static string PreferredName = "PreferredName";
    /// <summary>
    /// Returns 'PrimaryLanguage'
    /// </summary>
    public static string PrimaryLanguage = "PrimaryLanguage";
    /// <summary>
    /// Returns 'Race'
    /// </summary>
    public static string Race = "Race";
    /// <summary>
    /// Returns 'RowOrigin'
    /// </summary>
    public static string RowOrigin = "RowOrigin";
    /// <summary>
    /// Returns 'SecondaryLanguage'
    /// </summary>
    public static string SecondaryLanguage = "SecondaryLanguage";
    /// <summary>
    /// Returns 'SysGalEmployeeId'
    /// </summary>
    public static string SysGalEmployeeId = "SysGalEmployeeId";
    /// <summary>
    /// Returns 'TerminationDate'
    /// </summary>
    public static string TerminationDate = "TerminationDate";
    /// <summary>
    /// Returns 'TextData1'
    /// </summary>
    public static string TextData1 = "TextData1";
    /// <summary>
    /// Returns 'TextData2'
    /// </summary>
    public static string TextData2 = "TextData2";
    /// <summary>
    /// Returns 'TextData3'
    /// </summary>
    public static string TextData3 = "TextData3";
    /// <summary>
    /// Returns 'TextData4'
    /// </summary>
    public static string TextData4 = "TextData4";
    /// <summary>
    /// Returns 'TextData5'
    /// </summary>
    public static string TextData5 = "TextData5";
    /// <summary>
    /// Returns 'TextData6'
    /// </summary>
    public static string TextData6 = "TextData6";
    /// <summary>
    /// Returns 'TextData7'
    /// </summary>
    public static string TextData7 = "TextData7";
    /// <summary>
    /// Returns 'TextData8'
    /// </summary>
    public static string TextData8 = "TextData8";
    /// <summary>
    /// Returns 'TextData9'
    /// </summary>
    public static string TextData9 = "TextData9";
    /// <summary>
    /// Returns 'TextData10'
    /// </summary>
    public static string TextData10 = "TextData10";
    /// <summary>
    /// Returns 'TextData11'
    /// </summary>
    public static string TextData11 = "TextData11";
    /// <summary>
    /// Returns 'TextData12'
    /// </summary>
    public static string TextData12 = "TextData12";
    /// <summary>
    /// Returns 'TextData13'
    /// </summary>
    public static string TextData13 = "TextData13";
    /// <summary>
    /// Returns 'TextData14'
    /// </summary>
    public static string TextData14 = "TextData14";
    /// <summary>
    /// Returns 'TextData15'
    /// </summary>
    public static string TextData15 = "TextData15";
    /// <summary>
    /// Returns 'TextData16'
    /// </summary>
    public static string TextData16 = "TextData16";
    /// <summary>
    /// Returns 'TextData17'
    /// </summary>
    public static string TextData17 = "TextData17";
    /// <summary>
    /// Returns 'TextData18'
    /// </summary>
    public static string TextData18 = "TextData18";
    /// <summary>
    /// Returns 'TextData19'
    /// </summary>
    public static string TextData19 = "TextData19";
    /// <summary>
    /// Returns 'TextData20'
    /// </summary>
    public static string TextData20 = "TextData20";
    /// <summary>
    /// Returns 'TextData21'
    /// </summary>
    public static string TextData21 = "TextData21";
    /// <summary>
    /// Returns 'TextData22'
    /// </summary>
    public static string TextData22 = "TextData22";
    /// <summary>
    /// Returns 'TextData23'
    /// </summary>
    public static string TextData23 = "TextData23";
    /// <summary>
    /// Returns 'TextData24'
    /// </summary>
    public static string TextData24 = "TextData24";
    /// <summary>
    /// Returns 'TextData25'
    /// </summary>
    public static string TextData25 = "TextData25";
    /// <summary>
    /// Returns 'TextData26'
    /// </summary>
    public static string TextData26 = "TextData26";
    /// <summary>
    /// Returns 'TextData27'
    /// </summary>
    public static string TextData27 = "TextData27";
    /// <summary>
    /// Returns 'TextData28'
    /// </summary>
    public static string TextData28 = "TextData28";
    /// <summary>
    /// Returns 'TextData29'
    /// </summary>
    public static string TextData29 = "TextData29";
    /// <summary>
    /// Returns 'TextData30'
    /// </summary>
    public static string TextData30 = "TextData30";
    /// <summary>
    /// Returns 'TextData31'
    /// </summary>
    public static string TextData31 = "TextData31";
    /// <summary>
    /// Returns 'TextData32'
    /// </summary>
    public static string TextData32 = "TextData32";
    /// <summary>
    /// Returns 'TextData33'
    /// </summary>
    public static string TextData33 = "TextData33";
    /// <summary>
    /// Returns 'TextData34'
    /// </summary>
    public static string TextData34 = "TextData34";
    /// <summary>
    /// Returns 'TextData35'
    /// </summary>
    public static string TextData35 = "TextData35";
    /// <summary>
    /// Returns 'TextData36'
    /// </summary>
    public static string TextData36 = "TextData36";
    /// <summary>
    /// Returns 'TextData37'
    /// </summary>
    public static string TextData37 = "TextData37";
    /// <summary>
    /// Returns 'TextData38'
    /// </summary>
    public static string TextData38 = "TextData38";
    /// <summary>
    /// Returns 'TextData39'
    /// </summary>
    public static string TextData39 = "TextData39";
    /// <summary>
    /// Returns 'TextData40'
    /// </summary>
    public static string TextData40 = "TextData40";
    /// <summary>
    /// Returns 'TextData41'
    /// </summary>
    public static string TextData41 = "TextData41";
    /// <summary>
    /// Returns 'TextData42'
    /// </summary>
    public static string TextData42 = "TextData42";
    /// <summary>
    /// Returns 'TextData43'
    /// </summary>
    public static string TextData43 = "TextData43";
    /// <summary>
    /// Returns 'TextData44'
    /// </summary>
    public static string TextData44 = "TextData44";
    /// <summary>
    /// Returns 'TextData45'
    /// </summary>
    public static string TextData45 = "TextData45";
    /// <summary>
    /// Returns 'TextData46'
    /// </summary>
    public static string TextData46 = "TextData46";
    /// <summary>
    /// Returns 'TextData47'
    /// </summary>
    public static string TextData47 = "TextData47";
    /// <summary>
    /// Returns 'TextData48'
    /// </summary>
    public static string TextData48 = "TextData48";
    /// <summary>
    /// Returns 'TextData49'
    /// </summary>
    public static string TextData49 = "TextData49";
    /// <summary>
    /// Returns 'TextData50'
    /// </summary>
    public static string TextData50 = "TextData50";
    /// <summary>
    /// Returns 'Trace'
    /// </summary>
    public static string Trace = "Trace";
    /// <summary>
    /// Returns 'UpdateDate'
    /// </summary>
    public static string UpdateDate = "UpdateDate";
    /// <summary>
    /// Returns 'UpdateName'
    /// </summary>
    public static string UpdateName = "UpdateName";
    /// <summary>
    /// Returns 'VeryImportantPerson'
    /// </summary>
    public static string VeryImportantPerson = "VeryImportantPerson";
    /// <summary>
    /// Returns 'PersonPhotoMainPhoto'
    /// </summary>
    public static string PersonPhotoMainPhoto = "PersonPhotoMainPhoto";
    /// <summary>
    /// Returns 'PersonPhotoAlternatePhoto'
    /// </summary>
    public static string PersonPhotoAlternatePhoto = "PersonPhotoAlternatePhoto";
    /// <summary>
    /// Returns 'AccessProfileUid'
    /// </summary>
    public static string AccessProfileUid = "AccessProfileUid";
    /// <summary>
    /// Returns 'AccessProfileName'
    /// </summary>
    public static string AccessProfileName = "AccessProfileName";
    /// <summary>
    /// Returns 'CredentialActivationDate'
    /// </summary>
    public static string CredentialActivationDate = "CredentialActivationDate";
    /// <summary>
    /// Returns 'CredentialDescription'
    /// </summary>
    public static string CredentialDescription = "CredentialDescription";
    /// <summary>
    /// Returns 'CredentialExpirationDateTime'
    /// </summary>
    public static string CredentialExpirationDateTime = "CredentialExpirationDateTime";
    /// <summary>
    /// Returns 'CredentialCardNumber'
    /// </summary>
    public static string CredentialCardNumber = "CredentialCardNumber";
    /// <summary>
    /// Returns 'Credential26BitStandardFacilityCode'
    /// </summary>
    public static string Credential26BitStandardFacilityCode = "Credential26BitStandardFacilityCode";
    /// <summary>
    /// Returns 'Credential26BitStandardIdCode'
    /// </summary>
    public static string Credential26BitStandardIdCode = "Credential26BitStandardIdCode";
    /// <summary>
    /// Returns 'CredentialCorporate1K35BitCompanyCode'
    /// </summary>
    public static string CredentialCorporate1K35BitCompanyCode = "CredentialCorporate1K35BitCompanyCode";
    /// <summary>
    /// Returns 'CredentialCorporate1K35BitIdCode'
    /// </summary>
    public static string CredentialCorporate1K35BitIdCode = "CredentialCorporate1K35BitIdCode";
    /// <summary>
    /// Returns 'CredentialCorporate1K48BitCompanyCode'
    /// </summary>
    public static string CredentialCorporate1K48BitCompanyCode = "CredentialCorporate1K48BitCompanyCode";
    /// <summary>
    /// Returns 'CredentialCorporate1K48BitIdCode'
    /// </summary>
    public static string CredentialCorporate1K48BitIdCode = "CredentialCorporate1K48BitIdCode";
    /// <summary>
    /// Returns 'CredentialCypress37BitFacilityCode'
    /// </summary>
    public static string CredentialCypress37BitFacilityCode = "CredentialCypress37BitFacilityCode";
    /// <summary>
    /// Returns 'CredentialCypress37BitIdCode'
    /// </summary>
    public static string CredentialCypress37BitIdCode = "CredentialCypress37BitIdCode";
    /// <summary>
    /// Returns 'CredentialH1030237BitIdCode'
    /// </summary>
    public static string CredentialH1030237BitIdCode = "CredentialH1030237BitIdCode";
    /// <summary>
    /// Returns 'CredentialH1030437BitFacilityCode'
    /// </summary>
    public static string CredentialH1030437BitFacilityCode = "CredentialH1030437BitFacilityCode";
    /// <summary>
    /// Returns 'CredentialH1030437BitIdCode'
    /// </summary>
    public static string CredentialH1030437BitIdCode = "CredentialH1030437BitIdCode";
    /// <summary>
    /// Returns 'CredentialSoftwareHouse37BitFacilityCode'
    /// </summary>
    public static string CredentialSoftwareHouse37BitFacilityCode = "CredentialSoftwareHouse37BitFacilityCode";
    /// <summary>
    /// Returns 'CredentialSoftwareHouse37BitSiteCode'
    /// </summary>
    public static string CredentialSoftwareHouse37BitSiteCode = "CredentialSoftwareHouse37BitSiteCode";
    /// <summary>
    /// Returns 'CredentialSoftwareHouse37BitIdCode'
    /// </summary>
    public static string CredentialSoftwareHouse37BitIdCode = "CredentialSoftwareHouse37BitIdCode";
    /// <summary>
    /// Returns 'CredentialXceedId40BitSiteCode'
    /// </summary>
    public static string CredentialXceedId40BitSiteCode = "CredentialXceedId40BitSiteCode";
    /// <summary>
    /// Returns 'CredentialXceedId40BitIdCode'
    /// </summary>
    public static string CredentialXceedId40BitIdCode = "CredentialXceedId40BitIdCode";
    /// <summary>
    /// Returns 'CountryName'
    /// </summary>
    public static string CountryName = "CountryName";
    /// <summary>
    /// Returns 'DepartmentName'
    /// </summary>
    public static string DepartmentName = "DepartmentName";
    /// <summary>
    /// Returns 'EntityName'
    /// </summary>
    public static string EntityName = "EntityName";
    /// <summary>
    /// Returns 'Gender'
    /// </summary>
    public static string Gender = "Gender";
    /// <summary>
    /// Returns 'PersonActiveStatusType'
    /// </summary>
    public static string PersonActiveStatusType = "PersonActiveStatusType";
    /// <summary>
    /// Returns 'PersonRecordType'
    /// </summary>
    public static string PersonRecordType = "PersonRecordType";
    /// <summary>
    /// Returns 'Date1'
    /// </summary>
    public static string Date1 = "Date1";
    /// <summary>
    /// Returns 'Date2'
    /// </summary>
    public static string Date2 = "Date2";
    /// <summary>
    /// Returns 'SelectItem1'
    /// </summary>
    public static string SelectItem1 = "SelectItem1";
    /// <summary>
    /// Returns 'SelectItem2'
    /// </summary>
    public static string SelectItem2 = "SelectItem2";
    /// <summary>
    /// Returns 'SelectItem3'
    /// </summary>
    public static string SelectItem3 = "SelectItem3";
    /// <summary>
    /// Returns 'SelectItem4'
    /// </summary>
    public static string SelectItem4 = "SelectItem4";
    /// <summary>
    /// Returns 'SelectItem5'
    /// </summary>
    public static string SelectItem5 = "SelectItem5";
    /// <summary>
    /// Returns 'SelectItem6'
    /// </summary>
    public static string SelectItem6 = "SelectItem6";
    /// <summary>
    /// Returns 'SelectItem7'
    /// </summary>
    public static string SelectItem7 = "SelectItem7";
    /// <summary>
    /// Returns 'SelectItem8'
    /// </summary>
    public static string SelectItem8 = "SelectItem8";
    /// <summary>
    /// Returns 'SelectItem9'
    /// </summary>
    public static string SelectItem9 = "SelectItem9";
    /// <summary>
    /// Returns 'SelectItem10'
    /// </summary>
    public static string SelectItem10 = "SelectItem10";
    /// <summary>
    /// Returns 'CurrentDate'
    /// </summary>
    public static string CurrentDate = "CurrentDate";
    /// <summary>
    /// Returns 'CurrentDateTime'
    /// </summary>
    public static string CurrentDateTime = "CurrentDateTime";
    /// <summary>
    /// Returns 'BadgeTemplateName'
    /// </summary>
    public static string BadgeTemplateName = "BadgeTemplateName";
    /// <summary>
    /// Returns 'DossierTemplateName'
    /// </summary>
    public static string DossierTemplateName = "DossierTemplateName";
    }
    #endregion
  }
}
