using System;
using System.Data;
using System.Data.SqlTypes;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Add/Edit/Delete/Select data from the gcsUserPDSA table.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class gcsUserPDSAData : PDSADataClassTable
  {
    #region Constructors
    /// <summary>
    /// Constructor for the gcsUserPDSAData class
    /// </summary>
    public gcsUserPDSAData() : base()
    {
      Entity = new gcsUserPDSA();
      ValidatorObject = new gcsUserPDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the gcsUserPDSAData class
    /// </summary>
    /// <param name="entity">An instance of a gcsUserPDSA</param>
    public gcsUserPDSAData(gcsUserPDSA entity) : base(entity)
    {
      Entity = entity;
      ValidatorObject = new gcsUserPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the gcsUserPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a gcsUserPDSA</param>
    public gcsUserPDSAData(PDSADataProvider dataProvider,
      gcsUserPDSA entity)
      : base(dataProvider, entity)
    {
      Entity = entity;
      ValidatorObject = new gcsUserPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the gcsUserPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a gcsUserPDSA</param>
    /// <param name="validator">An instance of a gcsUserPDSAValidator</param>
    public gcsUserPDSAData(PDSADataProvider dataProvider,
      gcsUserPDSA entity, gcsUserPDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'ByDisplayName' SelectFilter
      /// </summary>
      ByDisplayName
      ,
      /// <summary>
      /// 'ByEmail' SelectFilter
      /// </summary>
      ByEmail
      ,
      /// <summary>
      /// 'ByLanguageId' SelectFilter
      /// </summary>
      ByLanguageId
      ,
      /// <summary>
      /// 'ByPrimaryEntityId' SelectFilter
      /// </summary>
      ByPrimaryEntityId
      ,
      /// <summary>
      /// 'ByUserName' SelectFilter
      /// </summary>
      ByUserName
      ,
      /// <summary>
      /// 'ByUserNameOrEmail' SelectFilter
      /// </summary>
      ByUserNameOrEmail
      ,
      /// <summary>
      /// 'ByUserPassword' SelectFilter
      /// </summary>
      ByUserPassword
      ,
      /// <summary>
      /// 'ListBox' SelectFilter
      /// </summary>
      ListBox
      ,
      /// <summary>
      /// 'PasswordForUser' SelectFilter
      /// </summary>
      PasswordForUser
      ,
      /// <summary>
      /// 'PrimaryKey' SelectFilter
      /// </summary>
      PrimaryKey
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// A Custom Select Filter
      /// </summary>
      Custom
    }


    /// <summary>
    /// Enumeration for selecting an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
    /// </summary>
    public enum InsertFilters
    {
      
      /// <summary>
      /// 'All' InsertFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom InsertFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
    /// </summary>
    public enum UpdateFilters
    {
      
      /// <summary>
      /// 'PrimaryKey' UpdateFilter
      /// </summary>
      PrimaryKey
      ,
      /// <summary>
      /// 'UpdateConcurrency' UpdateFilter
      /// </summary>
      UpdateConcurrency
      ,
      /// <summary>
      /// 'UpdateLastLoginDate' UpdateFilter
      /// </summary>
      UpdateLastLoginDate
      ,
      /// <summary>
      /// 'UpdateIsLockedOut' UpdateFilter
      /// </summary>
      UpdateIsLockedOut
      ,
      /// <summary>
      /// A Custom UpdateFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a DELETE statement or DELETE stored procedure to execute when calling the Delete() method.
    /// </summary>
    public enum DeleteFilters
    {
      
      /// <summary>
      /// 'DeleteByPK' DeleteFilter
      /// </summary>
      DeleteByPK
      ,
      /// <summary>
      /// A Custom DeleteFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom RowCountFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL or Stored Procedure to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }

    
    /// <summary>
    /// Get/Set an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
    /// </summary>
    public InsertFilters InsertFilter { get; set; }

    private UpdateFilters mUpdateFilter;
    /// <summary>
    /// Get/Set an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
    /// </summary>
    public UpdateFilters UpdateFilter
    {
      get { return mUpdateFilter; }
      set
      {
        mUpdateFilter = value;
        if (mUpdateFilter == UpdateFilters.Custom)
          PerformValidation = false;
      }
    }
    /// <summary>
    /// Get/Set a DELETE statement or DELETE stored procedure to execute when calling the Delete() method. You might need to set a WhereFilter as well.
    /// </summary>
    public DeleteFilters DeleteFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Entity Property
    private gcsUserPDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public gcsUserPDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "gcsUserPDSAData";
      DBObjectName = "GCS.gcsUser";
      SchemaName = "GCS";
      PrimaryKeyType = PDSAPrimaryKeyType.GUID;
      PrimaryKeyGenerate = false;
      UseAuditTracking = DataProvider.UseDBAuditTracking;
      UseStoredProcs = DataProvider.UseStoredProcedures;
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;

      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Use this area to initialize any starting values for data in the Properties collection for each Entity property.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserId);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = true;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LanguageId);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.FirstName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserInitials);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.Email);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.DisplayName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserPassword);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastLoginDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserTheme);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOut);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsActive);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ResetPasswordFlag);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastPasswordResetDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserActivationDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserExpirationDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ImportedFromActiveDirectory);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityImage);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBinary.Null;
      //prop.ValueForNull = new byte[0];

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserImage);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBinary.Null;
      //prop.ValueForNull = new byte[0];

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.InsertName);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.InsertDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyValue);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ActiveDirectoryObjectGuid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PrimaryEntityId);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.AccessFailedCount);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyStamp);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.EmailConfirmed);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnabled);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnd);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = null;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedEmail);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedUserName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumber);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumberConfirmed);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityStamp);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.TwoFactorEnabled);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PasswordHash);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOutClearedDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = DateTimeOffset.MinValue;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PageNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PageSize);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SortColumn);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlChars.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.DescendingOrder);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.TotalRowCount);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LanguageName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlChars.Null;
      //prop.ValueForNull = string.Empty;

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserId).Value = Entity.UserId;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserId).SetAsNull == true)
        Entity.UserId = Guid.Empty;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LanguageId).Value = Entity.LanguageId;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LanguageId).SetAsNull == true)
        Entity.LanguageId = Guid.Empty;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.FirstName).Value = Entity.FirstName;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.FirstName).SetAsNull == true)
        Entity.FirstName = string.Empty;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastName).Value = Entity.LastName;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastName).SetAsNull == true)
        Entity.LastName = string.Empty;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserInitials).Value = Entity.UserInitials;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserInitials).SetAsNull == true)
        Entity.UserInitials = string.Empty;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.Email).Value = Entity.Email;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.Email).SetAsNull == true)
        Entity.Email = string.Empty;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserName).Value = Entity.UserName;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserName).SetAsNull == true)
        Entity.UserName = string.Empty;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.DisplayName).Value = Entity.DisplayName;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.DisplayName).SetAsNull == true)
        Entity.DisplayName = string.Empty;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserPassword).Value = Entity.UserPassword;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserPassword).SetAsNull == true)
        Entity.UserPassword = string.Empty;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastLoginDate).Value = Entity.LastLoginDate;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastLoginDate).SetAsNull == true)
        Entity.LastLoginDate = null;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserTheme).Value = Entity.UserTheme;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserTheme).SetAsNull == true)
        Entity.UserTheme = string.Empty;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOut).Value = Entity.IsLockedOut;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOut).SetAsNull == true)
        Entity.IsLockedOut = false;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsActive).Value = Entity.IsActive;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsActive).SetAsNull == true)
        Entity.IsActive = false;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ResetPasswordFlag).Value = Entity.ResetPasswordFlag;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ResetPasswordFlag).SetAsNull == true)
        Entity.ResetPasswordFlag = false;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastPasswordResetDate).Value = Entity.LastPasswordResetDate;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastPasswordResetDate).SetAsNull == true)
        Entity.LastPasswordResetDate = null;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserActivationDate).Value = Entity.UserActivationDate;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserActivationDate).SetAsNull == true)
        Entity.UserActivationDate = null;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserExpirationDate).Value = Entity.UserExpirationDate;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserExpirationDate).SetAsNull == true)
        Entity.UserExpirationDate = null;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ImportedFromActiveDirectory).Value = Entity.ImportedFromActiveDirectory;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ImportedFromActiveDirectory).SetAsNull == true)
        Entity.ImportedFromActiveDirectory = false;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityImage).Value = Entity.SecurityImage;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityImage).SetAsNull == true)
        Entity.SecurityImage = null;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserImage).Value = Entity.UserImage;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserImage).SetAsNull == true)
        Entity.UserImage = null;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.InsertName).SetAsNull == true)
        Entity.InsertName = string.Empty;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.InsertDate).SetAsNull == true)
        Entity.InsertDate = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateName).SetAsNull == true)
        Entity.UpdateName = string.Empty;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateDate).SetAsNull == true)
        Entity.UpdateDate = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull == true)
        Entity.ConcurrencyValue = 0;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ActiveDirectoryObjectGuid).Value = Entity.ActiveDirectoryObjectGuid;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ActiveDirectoryObjectGuid).SetAsNull == true)
        Entity.ActiveDirectoryObjectGuid = Guid.Empty;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PrimaryEntityId).Value = Entity.PrimaryEntityId;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PrimaryEntityId).SetAsNull == true)
        Entity.PrimaryEntityId = Guid.Empty;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.AccessFailedCount).Value = Entity.AccessFailedCount;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.AccessFailedCount).SetAsNull == true)
        Entity.AccessFailedCount = 0;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyStamp).Value = Entity.ConcurrencyStamp;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyStamp).SetAsNull == true)
        Entity.ConcurrencyStamp = string.Empty;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.EmailConfirmed).Value = Entity.EmailConfirmed;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.EmailConfirmed).SetAsNull == true)
        Entity.EmailConfirmed = false;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnabled).Value = Entity.LockoutEnabled;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnabled).SetAsNull == true)
        Entity.LockoutEnabled = false;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnd).Value = Entity.LockoutEnd;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnd).SetAsNull == true)
        Entity.LockoutEnd = null;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedEmail).Value = Entity.NormalizedEmail;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedEmail).SetAsNull == true)
        Entity.NormalizedEmail = string.Empty;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedUserName).Value = Entity.NormalizedUserName;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedUserName).SetAsNull == true)
        Entity.NormalizedUserName = string.Empty;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumber).Value = Entity.PhoneNumber;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumber).SetAsNull == true)
        Entity.PhoneNumber = string.Empty;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumberConfirmed).Value = Entity.PhoneNumberConfirmed;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumberConfirmed).SetAsNull == true)
        Entity.PhoneNumberConfirmed = false;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityStamp).Value = Entity.SecurityStamp;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityStamp).SetAsNull == true)
        Entity.SecurityStamp = string.Empty;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.TwoFactorEnabled).Value = Entity.TwoFactorEnabled;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.TwoFactorEnabled).SetAsNull == true)
        Entity.TwoFactorEnabled = false;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PasswordHash).Value = Entity.PasswordHash;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PasswordHash).SetAsNull == true)
        Entity.PasswordHash = string.Empty;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOutClearedDate).Value = Entity.IsLockedOutClearedDate;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOutClearedDate).SetAsNull == true)
        Entity.IsLockedOutClearedDate = null;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PageNumber).Value = Entity.PageNumber;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PageNumber).SetAsNull == true)
        Entity.PageNumber = 0;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PageSize).Value = Entity.PageSize;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PageSize).SetAsNull == true)
        Entity.PageSize = 0;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SortColumn).Value = Entity.SortColumn;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SortColumn).SetAsNull == true)
        Entity.SortColumn = string.Empty;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.DescendingOrder).Value = Entity.DescendingOrder;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.DescendingOrder).SetAsNull == true)
        Entity.DescendingOrder = false;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.TotalRowCount).Value = Entity.TotalRowCount;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.TotalRowCount).SetAsNull == true)
        Entity.TotalRowCount = 0;
      ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LanguageName).Value = Entity.LanguageName;
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LanguageName).SetAsNull == true)
        Entity.LanguageName = string.Empty;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserId).IsNull == false)
        Entity.UserId = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserId).GetAsGuid();
      else
        Entity.UserId = Guid.Empty;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.UserId, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserId).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LanguageId).IsNull == false)
        Entity.LanguageId = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LanguageId).GetAsGuid();
      else
        Entity.LanguageId = Guid.Empty;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.LanguageId, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LanguageId).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.FirstName).IsNull == false)
        Entity.FirstName = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.FirstName).GetAsString();
      else
        Entity.FirstName = string.Empty;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.FirstName, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.FirstName).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastName).IsNull == false)
        Entity.LastName = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastName).GetAsString();
      else
        Entity.LastName = string.Empty;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.LastName, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastName).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserInitials).IsNull == false)
        Entity.UserInitials = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserInitials).GetAsString();
      else
        Entity.UserInitials = string.Empty;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.UserInitials, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserInitials).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.Email).IsNull == false)
        Entity.Email = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.Email).GetAsString();
      else
        Entity.Email = string.Empty;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.Email, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.Email).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserName).IsNull == false)
        Entity.UserName = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserName).GetAsString();
      else
        Entity.UserName = string.Empty;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.UserName, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserName).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.DisplayName).IsNull == false)
        Entity.DisplayName = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.DisplayName).GetAsString();
      else
        Entity.DisplayName = string.Empty;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.DisplayName, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.DisplayName).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserPassword).IsNull == false)
        Entity.UserPassword = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserPassword).GetAsString();
      else
        Entity.UserPassword = string.Empty;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.UserPassword, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserPassword).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastLoginDate).IsNull == false)
        Entity.LastLoginDate = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastLoginDate).GetAsDateTimeOffset();
      else
        Entity.LastLoginDate = null;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.LastLoginDate, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastLoginDate).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserTheme).IsNull == false)
        Entity.UserTheme = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserTheme).GetAsString();
      else
        Entity.UserTheme = string.Empty;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.UserTheme, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserTheme).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOut).IsNull == false)
        Entity.IsLockedOut = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOut).GetAsBool();
      else
        Entity.IsLockedOut = false;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.IsLockedOut, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOut).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsActive).IsNull == false)
        Entity.IsActive = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsActive).GetAsBool();
      else
        Entity.IsActive = false;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.IsActive, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsActive).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ResetPasswordFlag).IsNull == false)
        Entity.ResetPasswordFlag = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ResetPasswordFlag).GetAsBool();
      else
        Entity.ResetPasswordFlag = false;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.ResetPasswordFlag, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ResetPasswordFlag).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastPasswordResetDate).IsNull == false)
        Entity.LastPasswordResetDate = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastPasswordResetDate).GetAsDateTimeOffset();
      else
        Entity.LastPasswordResetDate = null;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.LastPasswordResetDate, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastPasswordResetDate).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserActivationDate).IsNull == false)
        Entity.UserActivationDate = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserActivationDate).GetAsDate();
      else
        Entity.UserActivationDate = null;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.UserActivationDate, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserActivationDate).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserExpirationDate).IsNull == false)
        Entity.UserExpirationDate = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserExpirationDate).GetAsDate();
      else
        Entity.UserExpirationDate = null;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.UserExpirationDate, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserExpirationDate).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ImportedFromActiveDirectory).IsNull == false)
        Entity.ImportedFromActiveDirectory = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ImportedFromActiveDirectory).GetAsBool();
      else
        Entity.ImportedFromActiveDirectory = false;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.ImportedFromActiveDirectory, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ImportedFromActiveDirectory).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityImage).IsNull == false)
        Entity.SecurityImage = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityImage).GetAsByteArray();
      else
        Entity.SecurityImage = new byte[0];
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.SecurityImage, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityImage).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserImage).IsNull == false)
        Entity.UserImage = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserImage).GetAsByteArray();
      else
        Entity.UserImage = new byte[0];
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.UserImage, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserImage).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.InsertName).GetAsString();
      else
        Entity.InsertName = string.Empty;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.InsertName, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.InsertName).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
      else
        Entity.InsertDate = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.InsertDate, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.InsertDate).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateName).GetAsString();
      else
        Entity.UpdateName = string.Empty;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.UpdateName, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateName).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateDate).GetAsDateTimeOffset();
      else
        Entity.UpdateDate = DateTimeOffset.MinValue;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.UpdateDate, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateDate).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
      else
        Entity.ConcurrencyValue = 0;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.ConcurrencyValue, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyValue).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ActiveDirectoryObjectGuid).IsNull == false)
        Entity.ActiveDirectoryObjectGuid = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ActiveDirectoryObjectGuid).GetAsGuid();
      else
        Entity.ActiveDirectoryObjectGuid = Guid.Empty;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.ActiveDirectoryObjectGuid, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ActiveDirectoryObjectGuid).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PrimaryEntityId).IsNull == false)
        Entity.PrimaryEntityId = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PrimaryEntityId).GetAsGuid();
      else
        Entity.PrimaryEntityId = Guid.Empty;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.PrimaryEntityId, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PrimaryEntityId).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.AccessFailedCount).IsNull == false)
        Entity.AccessFailedCount = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.AccessFailedCount).GetAsInteger();
      else
        Entity.AccessFailedCount = 0;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.AccessFailedCount, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.AccessFailedCount).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyStamp).IsNull == false)
        Entity.ConcurrencyStamp = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyStamp).GetAsString();
      else
        Entity.ConcurrencyStamp = string.Empty;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.ConcurrencyStamp, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyStamp).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.EmailConfirmed).IsNull == false)
        Entity.EmailConfirmed = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.EmailConfirmed).GetAsBool();
      else
        Entity.EmailConfirmed = false;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.EmailConfirmed, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.EmailConfirmed).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnabled).IsNull == false)
        Entity.LockoutEnabled = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnabled).GetAsBool();
      else
        Entity.LockoutEnabled = false;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.LockoutEnabled, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnabled).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnd).IsNull == false)
        Entity.LockoutEnd = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnd).GetAsDateTimeOffset();
      else
        Entity.LockoutEnd = null;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.LockoutEnd, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnd).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedEmail).IsNull == false)
        Entity.NormalizedEmail = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedEmail).GetAsString();
      else
        Entity.NormalizedEmail = string.Empty;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.NormalizedEmail, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedEmail).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedUserName).IsNull == false)
        Entity.NormalizedUserName = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedUserName).GetAsString();
      else
        Entity.NormalizedUserName = string.Empty;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.NormalizedUserName, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedUserName).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumber).IsNull == false)
        Entity.PhoneNumber = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumber).GetAsString();
      else
        Entity.PhoneNumber = string.Empty;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.PhoneNumber, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumber).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumberConfirmed).IsNull == false)
        Entity.PhoneNumberConfirmed = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumberConfirmed).GetAsBool();
      else
        Entity.PhoneNumberConfirmed = false;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.PhoneNumberConfirmed, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumberConfirmed).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityStamp).IsNull == false)
        Entity.SecurityStamp = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityStamp).GetAsString();
      else
        Entity.SecurityStamp = string.Empty;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.SecurityStamp, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityStamp).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.TwoFactorEnabled).IsNull == false)
        Entity.TwoFactorEnabled = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.TwoFactorEnabled).GetAsBool();
      else
        Entity.TwoFactorEnabled = false;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.TwoFactorEnabled, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.TwoFactorEnabled).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PasswordHash).IsNull == false)
        Entity.PasswordHash = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PasswordHash).GetAsString();
      else
        Entity.PasswordHash = string.Empty;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.PasswordHash, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PasswordHash).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOutClearedDate).IsNull == false)
        Entity.IsLockedOutClearedDate = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOutClearedDate).GetAsDateTimeOffset();
      else
        Entity.IsLockedOutClearedDate = null;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.IsLockedOutClearedDate, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOutClearedDate).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PageNumber).IsNull == false)
        Entity.PageNumber = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PageNumber).GetAsInteger();
      else
        Entity.PageNumber = 0;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.PageNumber, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PageNumber).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PageSize).IsNull == false)
        Entity.PageSize = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PageSize).GetAsInteger();
      else
        Entity.PageSize = 0;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.PageSize, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PageSize).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SortColumn).IsNull == false)
        Entity.SortColumn = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SortColumn).GetAsString();
      else
        Entity.SortColumn = string.Empty;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.SortColumn, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SortColumn).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.DescendingOrder).IsNull == false)
        Entity.DescendingOrder = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.DescendingOrder).GetAsBool();
      else
        Entity.DescendingOrder = false;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.DescendingOrder, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.DescendingOrder).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.TotalRowCount).IsNull == false)
        Entity.TotalRowCount = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.TotalRowCount).GetAsInteger();
      else
        Entity.TotalRowCount = 0;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.TotalRowCount, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.TotalRowCount).Value);

      if (ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LanguageName).IsNull == false)
        Entity.LanguageName = ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LanguageName).GetAsString();
      else
        Entity.LanguageName = string.Empty;
      Entity.SetOriginalValueForProperty(gcsUserPDSAValidator.ColumnNames.LanguageName, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LanguageName).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>gcsUserPDSA</returns>
    public gcsUserPDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new gcsUserPDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement, or SELECT stored procedure based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsUserPDSA_SelectAll");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByDisplayName:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsUserPDSA_SelectByDisplayName");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByEmail:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsUserPDSA_SelectByEmail");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByLanguageId:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsUserPDSA_ByLanguageId");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByPrimaryEntityId:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsUserPDSA_ByPrimaryEntityId");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByUserName:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsUserPDSA_SelectByUserName");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByUserNameOrEmail:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsUserPDSA_SelectByUserNameOrEmail");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByUserPassword:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsUserPDSA_SelectByUserPassword");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ListBox:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsUserPDSA_SelectListBox");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.PasswordForUser:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsUserPDSA_SelectPasswordForUser");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.PrimaryKey:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsUserPDSA_SelectByPK");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.Search:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsUserPDSA_SelectSearch");
          }
          else
          {
            
          }
          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region InsertSQL Method
    /// <summary>
    /// Builds the SQL for the INSERT statement, or INSERT stored procedure based on the InsertFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string InsertSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (InsertFilter)
      {
        case InsertFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsUserPDSA_Insert");
          }
          else
          {
            
          }
            
          break;
        
        case InsertFilters.Custom:
          sb.Append(InsertCustom);
          
          break;
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region UpdateSQL Method
    /// <summary>
    /// Builds the SQL for the UPDATE statement, or UPDATE stored procedure based on the UpdateFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string UpdateSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (UpdateFilter)
      {
        case UpdateFilters.PrimaryKey:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsUserPDSA_Update");
          }
          else
          {
            
          }
          
          break;
        case UpdateFilters.UpdateConcurrency:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsUserPDSA_UpdateConcurrency");
          }
          else
          {
            
          }
          
          break;
        case UpdateFilters.UpdateLastLoginDate:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsUser_UpdateLastLoginDate");
          }
          else
          {
            
          }
          
          break;
        case UpdateFilters.UpdateIsLockedOut:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsUser_UpdateIsLockedOut");
          }
          else
          {
            
          }
          
          break;
        
        case UpdateFilters.Custom:
          sb.Append(UpdateCustom);
          
          break;
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region DeleteByPK Method
    /// <summary>
    /// Delete a record from the table based on the primary key value that is passed in.
    /// </summary>
    /// <param name="userId">The value of the primary key of the row to delete</param>
    /// <returns>int</returns>
    public int DeleteByPK(Guid userId)
    {
      DeleteFilter = DeleteFilters.DeleteByPK;
      Entity.UserId = userId;      
      
      // If using Audit Tracking, need to load the record first
      if (UseAuditTracking)
        LoadByPK(userId);

      RowsAffected = Delete();

      return RowsAffected;
    }
    #endregion

    #region DeleteSQL Method
    /// <summary>
    /// Builds the SQL for the DELETE statement, or DELETE stored procedure. You can set the WhereFilter property to selectively delete rows from the table.
    /// </summary>
    /// <returns>string</returns>
    public override string DeleteSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (DeleteFilter)
      {
        case DeleteFilters.DeleteByPK:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsUserPDSA_DeleteByPK");
          }
          else
          {
            
          }
          
          break;

        case DeleteFilters.Custom:
          sb.Append(DeleteCustom);

          break;          
      }

      if(!UseStoredProcs)
      {
        sb.Append(WhereClauseSQL());
      }
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL, or the name of the stored procedure, that will count the number of rows.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.gcsUserPDSA_RowCount");
          }
          else
          {
            
          }
          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      if(!UseStoredProcs)
      {
        sb.Append(WhereClauseSQL());
      }
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region LoadByPK Method
    /// <summary>
    /// Load a row of data in the Entity properties. Returns a value greater than 0 if it finds the record.
    /// </summary>
    /// <param name="userId">The value of the primary key of the row to load</param>
    /// <returns>Int32</returns>
    public int LoadByPK(Guid userId)
    {
      SelectFilter = SelectFilters.PrimaryKey;
      Entity.UserId = userId;      

      // Load Data into Properties
      RowsAffected = Load();

      // Reset all Collection Properties
      ResetCollectionProperties();
      
      return RowsAffected;
    }
    #endregion
    
    
    #region Updated Method
    /// <summary>
    /// This method is called after a successful update
    /// </summary>
    protected override void Updated()
    {
      Entity.ConcurrencyValue += Convert.ToInt16(1);
    }
    #endregion

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
         
          break;
        case SelectFilters.ByDisplayName:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DisplayName", DbType.String, Entity.DisplayName));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
         
          break;
        case SelectFilters.ByEmail:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@Email", DbType.String, Entity.Email));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
         
          break;
        case SelectFilters.ByLanguageId:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@LanguageId", DbType.Guid, Entity.LanguageId));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
         
          break;
        case SelectFilters.ByPrimaryEntityId:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PrimaryEntityId", DbType.Guid, Entity.PrimaryEntityId));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
         
          break;
        case SelectFilters.ByUserName:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@UserName", DbType.String, Entity.UserName));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
         
          break;
        case SelectFilters.ByUserNameOrEmail:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@UserName", DbType.String, Entity.UserName));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@Email", DbType.String, Entity.Email));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
         
          break;
        case SelectFilters.ByUserPassword:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@UserPassword", DbType.String, Entity.UserPassword));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
         
          break;
        case SelectFilters.ListBox:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
         
          break;
        case SelectFilters.PasswordForUser:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@UserId", DbType.Guid, Entity.UserId));
         
          break;
        case SelectFilters.PrimaryKey:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@UserId", DbType.Guid, Entity.UserId));
         
          break;
        case SelectFilters.Search:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@UserName", DbType.String, Entity.UserName));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageNumber", DbType.Int32, Entity.PageNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PageSize", DbType.Int32, Entity.PageSize));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SortColumn", DbType.String, Entity.SortColumn));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DescendingOrder", DbType.Boolean, Entity.DescendingOrder));
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion


    #region SetModificationCommandParameters Method
    /// <summary>
    /// Called to build any parameters prior to submitting an INSERT, UPDATE, or DELETE statement.
    /// </summary>
    protected override void SetModificationCommandParameters()
    {    
      switch (DataModificationAction)
      {
        case PDSADataModificationState.Delete:
          switch (DeleteFilter)
          {
            case DeleteFilters.DeleteByPK:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UserId", DbType.Guid, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
          }

          break;

        case PDSADataModificationState.Insert:
          if (PrimaryKeyType == PDSAPrimaryKeyType.PDSA)
          {
            if (PrimaryKeyGenerate == true)
            {
              //  Get New Primary Key from pdsaTableIds
              PrimaryKeySet(PKGetFromPDSATableIds(PDSALoginName));
            }
          }

          switch (InsertFilter)
          {
            case InsertFilters.All:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UserId", DbType.Guid, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LanguageId", DbType.Guid, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LanguageId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@FirstName", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.FirstName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LastName", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UserInitials", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserInitials).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@Email", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.Email).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UserName", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DisplayName", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.DisplayName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UserPassword", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserPassword).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LastLoginDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastLoginDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UserTheme", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserTheme).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@IsLockedOut", DbType.Boolean, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOut).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@IsLockedOutClearedDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOutClearedDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@IsActive", DbType.Boolean, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsActive).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ResetPasswordFlag", DbType.Boolean, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ResetPasswordFlag).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LastPasswordResetDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastPasswordResetDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UserActivationDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserActivationDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UserExpirationDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserExpirationDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ImportedFromActiveDirectory", DbType.Boolean, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ImportedFromActiveDirectory).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SecurityImage", DbType.Binary, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityImage).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UserImage", DbType.Binary, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserImage).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InsertName", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.InsertName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InsertDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.InsertDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateName", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyValue).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ActiveDirectoryObjectGuid", DbType.Guid, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ActiveDirectoryObjectGuid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@PrimaryEntityId", DbType.Guid, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PrimaryEntityId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessFailedCount", DbType.Int32, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.AccessFailedCount).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyStamp", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyStamp).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@EmailConfirmed", DbType.Boolean, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.EmailConfirmed).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LockoutEnabled", DbType.Boolean, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnabled).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LockoutEnd", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnd).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@NormalizedEmail", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedEmail).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@NormalizedUserName", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedUserName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@PhoneNumber", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@PhoneNumberConfirmed", DbType.Boolean, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumberConfirmed).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SecurityStamp", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityStamp).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@TwoFactorEnabled", DbType.Boolean, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.TwoFactorEnabled).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@PasswordHash", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PasswordHash).Value));
              
              break;
          }

          break;

        case PDSADataModificationState.Update:
          switch (UpdateFilter)
          {
            case UpdateFilters.PrimaryKey:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UserId", DbType.Guid, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LanguageId", DbType.Guid, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LanguageId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@FirstName", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.FirstName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LastName", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UserInitials", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserInitials).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@Email", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.Email).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UserName", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DisplayName", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.DisplayName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UserPassword", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserPassword).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LastLoginDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastLoginDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UserTheme", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserTheme).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@IsLockedOut", DbType.Boolean, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOut).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@IsLockedOutClearedDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOutClearedDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@IsActive", DbType.Boolean, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsActive).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ResetPasswordFlag", DbType.Boolean, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ResetPasswordFlag).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LastPasswordResetDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastPasswordResetDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UserActivationDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserActivationDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UserExpirationDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserExpirationDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ImportedFromActiveDirectory", DbType.Boolean, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ImportedFromActiveDirectory).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SecurityImage", DbType.Binary, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityImage).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UserImage", DbType.Binary, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserImage).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateName", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ActiveDirectoryObjectGuid", DbType.Guid, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ActiveDirectoryObjectGuid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@PrimaryEntityId", DbType.Guid, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PrimaryEntityId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessFailedCount", DbType.Int32, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.AccessFailedCount).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyStamp", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyStamp).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@EmailConfirmed", DbType.Boolean, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.EmailConfirmed).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LockoutEnabled", DbType.Boolean, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnabled).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LockoutEnd", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnd).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@NormalizedEmail", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedEmail).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@NormalizedUserName", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedUserName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@PhoneNumber", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@PhoneNumberConfirmed", DbType.Boolean, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumberConfirmed).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SecurityStamp", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityStamp).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@TwoFactorEnabled", DbType.Boolean, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.TwoFactorEnabled).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@PasswordHash", DbType.String, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PasswordHash).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
            case UpdateFilters.UpdateConcurrency:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UserId", DbType.Guid, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
            case UpdateFilters.UpdateLastLoginDate:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UserId", DbType.Guid, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LastLoginDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastLoginDate).Value));
              
              break;
            case UpdateFilters.UpdateIsLockedOut:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UserId", DbType.Guid, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@IsLockedOut", DbType.Boolean, ValidatorObject.Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOut).Value));
              
              break;
          }
          break;
      }
    }
    #endregion
  }
}
