using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// This class calls the stored procedure gcs_SelectEntitiesByUserIdPDSA
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public class gcs_SelectEntitiesByUserIdPDSAData : PDSAStoredProcReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the gcs_SelectEntitiesByUserIdPDSAData class
    /// </summary>
    public gcs_SelectEntitiesByUserIdPDSAData() : base()
    {
      Entity = new gcs_SelectEntitiesByUserIdPDSA();
      ValidatorObject = new  gcs_SelectEntitiesByUserIdPDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the gcs_SelectEntitiesByUserIdPDSAData class
    /// </summary>
    /// <param name="entity">An instance of a gcs_SelectEntitiesByUserIdPDSA</param>
    public gcs_SelectEntitiesByUserIdPDSAData(gcs_SelectEntitiesByUserIdPDSA entity) : base()
    {
      Entity = entity;
      ValidatorObject = new gcs_SelectEntitiesByUserIdPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the gcs_SelectEntitiesByUserIdPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a gcs_SelectEntitiesByUserIdPDSA</param>
    public gcs_SelectEntitiesByUserIdPDSAData(PDSADataProvider dataProvider,
      gcs_SelectEntitiesByUserIdPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new  gcs_SelectEntitiesByUserIdPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the gcs_SelectEntitiesByUserIdPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a gcs_SelectEntitiesByUserIdPDSA</param>
    /// <param name="validator">An instance of a gcs_SelectEntitiesByUserIdPDSAValidator</param>
    public gcs_SelectEntitiesByUserIdPDSAData(PDSADataProvider dataProvider,
      gcs_SelectEntitiesByUserIdPDSA entity, gcs_SelectEntitiesByUserIdPDSAValidator validator)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Public Property
    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public gcs_SelectEntitiesByUserIdPDSA Entity { get; set; }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "gcs_SelectEntitiesByUserIdPDSAData";
      StoredProcName = "gcs_SelectEntitiesByUserId";
      SchemaName = "GCS";

      // Create Parameters
      InitParameters();

      // Create Data Columns
      InitDataColumns();
    }
    #endregion

   #region InitParameters Method
    /// <summary>
    /// Creates all the parameters for the stored procedure.
    /// </summary>
    protected override void InitParameters()
    {
      PDSADataParameter param;

      // Clear all parameters each time
      AllParameters.Clear();

      // Create each parameter object and add to Parameters Collection
      param = new PDSADataParameter();
      param.ParameterName = gcs_SelectEntitiesByUserIdPDSAValidator.ParameterNames.UserId;
      param.DBType = DbType.Guid;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = gcs_SelectEntitiesByUserIdPDSAValidator.ParameterNames.PageNumber;
      param.DBType = DbType.Int32;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = gcs_SelectEntitiesByUserIdPDSAValidator.ParameterNames.PageSize;
      param.DBType = DbType.Int32;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = gcs_SelectEntitiesByUserIdPDSAValidator.ParameterNames.RETURNVALUE;
      param.DBType = DbType.Int32;
      param.ParamDirection = ParameterDirection.ReturnValue;
      param.IsRefCursor = false;
      AllParameters.Add(param);

  
      AddReturnValueParameterToCollection();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes the Data Columns Collection for each field returned from the stored procedure.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSADataColumn dc;

      // Create each data column
      dc = PDSADataColumn.CreateDataColumn(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityId, GetResourceMessage("GCS_gcs_SelectEntitiesByUserIdPDSA_EntityId_Header", "Entity Id"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityName, GetResourceMessage("GCS_gcs_SelectEntitiesByUserIdPDSA_EntityName_Header", "Entity Name"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityDescription, GetResourceMessage("GCS_gcs_SelectEntitiesByUserIdPDSA_EntityDescription_Header", "Entity Description"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityKey, GetResourceMessage("GCS_gcs_SelectEntitiesByUserIdPDSA_EntityKey_Header", "Entity Key"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.IsDefault, GetResourceMessage("GCS_gcs_SelectEntitiesByUserIdPDSA_IsDefault_Header", "Is Default"), false, typeof(bool), DbType.Boolean);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.IsActive, GetResourceMessage("GCS_gcs_SelectEntitiesByUserIdPDSA_IsActive_Header", "Is Active"), false, typeof(bool), DbType.Boolean);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.BinaryResourceUid, GetResourceMessage("GCS_gcs_SelectEntitiesByUserIdPDSA_BinaryResourceUid_Header", "Binary Resource Uid"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.License, GetResourceMessage("GCS_gcs_SelectEntitiesByUserIdPDSA_License_Header", "License"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.PublicKey, GetResourceMessage("GCS_gcs_SelectEntitiesByUserIdPDSA_PublicKey_Header", "Public Key"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.Photo, GetResourceMessage("GCS_gcs_SelectEntitiesByUserIdPDSA_Photo_Header", "Photo"), false, typeof(string), DbType.String);
      AllColumns.Add(dc);
      dc = PDSADataColumn.CreateDataColumn(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.TotalRowCount, GetResourceMessage("GCS_gcs_SelectEntitiesByUserIdPDSA_TotalRowCount_Header", "Total Row Count"), false, typeof(int), DbType.Int32);
      AllColumns.Add(dc);
    }
    #endregion

    #region EntityDataToParameterCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Parameters collection
    /// </summary>
    protected override void EntityDataToParameterCollection()
    {
      if (AllParameters.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ParameterNames.UserId).SetAsNull == false)
        AllParameters.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ParameterNames.UserId).Value = Entity.UserId;
      else
        AllParameters.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ParameterNames.UserId).Value = System.Data.SqlTypes.SqlGuid.Null;
      if (AllParameters.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ParameterNames.PageNumber).SetAsNull == false)
        AllParameters.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ParameterNames.PageNumber).Value = Entity.PageNumber;
      else
        AllParameters.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ParameterNames.PageNumber).Value = System.Data.SqlTypes.SqlInt32.Null;
      if (AllParameters.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ParameterNames.PageSize).SetAsNull == false)
        AllParameters.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ParameterNames.PageSize).Value = Entity.PageSize;
      else
        AllParameters.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ParameterNames.PageSize).Value = System.Data.SqlTypes.SqlInt32.Null;
    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      if (AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityId).SetAsNull == false)
        AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityId).Value = Entity.EntityId;
      else
        AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityId).Value = Guid.Empty;
     
      if (AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityName).SetAsNull == false)
        AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityName).Value = Entity.EntityName;
      else
        AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityName).Value = string.Empty;
     
      if (AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityDescription).SetAsNull == false)
        AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityDescription).Value = Entity.EntityDescription;
      else
        AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityDescription).Value = string.Empty;
     
      if (AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityKey).SetAsNull == false)
        AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityKey).Value = Entity.EntityKey;
      else
        AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityKey).Value = string.Empty;
     
      if (AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.IsDefault).SetAsNull == false)
        AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.IsDefault).Value = Entity.IsDefault;
      else
        AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.IsDefault).Value = false;
     
      if (AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.IsActive).SetAsNull == false)
        AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.IsActive).Value = Entity.IsActive;
      else
        AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.IsActive).Value = false;
     
      if (AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.BinaryResourceUid).SetAsNull == false)
        AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.BinaryResourceUid).Value = Entity.BinaryResourceUid;
      else
        AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.BinaryResourceUid).Value = Guid.Empty;
     
      if (AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.License).SetAsNull == false)
        AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.License).Value = Entity.License;
      else
        AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.License).Value = string.Empty;
     
      if (AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.PublicKey).SetAsNull == false)
        AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.PublicKey).Value = Entity.PublicKey;
      else
        AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.PublicKey).Value = string.Empty;
     
      if (AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.Photo).SetAsNull == false)
        AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.Photo).Value = Entity.Photo;
      else
        AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.Photo).Value = string.Empty;
     
      if (AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.TotalRowCount).SetAsNull == false)
        AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.TotalRowCount).Value = Entity.TotalRowCount;
      else
        AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.TotalRowCount).Value = 0;
     
    }
    #endregion

    #region OutputParametersToEntityData Method
    /// <summary>
    /// Moves the output parameters from the Parameters collection into the Entity class.
    /// </summary>
    protected override void OutputParametersToEntityData()
    {
      if (AllParameters.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ParameterNames.RETURNVALUE).IsValueNull == false)
        Entity.RETURNVALUE = AllParameters.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ParameterNames.RETURNVALUE).GetAsInteger();
      else
        Entity.RETURNVALUE = 0;
    }
    #endregion
    
    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityId).IsNull == false)
        Entity.EntityId = AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityId).GetAsGuid();
      else
        Entity.EntityId = Guid.Empty;

      if (AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityName).IsNull == false)
        Entity.EntityName = AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityName).GetAsString();
      else
        Entity.EntityName = string.Empty;

      if (AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityDescription).IsNull == false)
        Entity.EntityDescription = AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityDescription).GetAsString();
      else
        Entity.EntityDescription = string.Empty;

      if (AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityKey).IsNull == false)
        Entity.EntityKey = AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityKey).GetAsString();
      else
        Entity.EntityKey = string.Empty;

      if (AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.IsDefault).IsNull == false)
        Entity.IsDefault = AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.IsDefault).GetAsBool();
      else
        Entity.IsDefault = false;

      if (AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.IsActive).IsNull == false)
        Entity.IsActive = AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.IsActive).GetAsBool();
      else
        Entity.IsActive = false;

      if (AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.BinaryResourceUid).IsNull == false)
        Entity.BinaryResourceUid = AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.BinaryResourceUid).GetAsGuid();
      else
        Entity.BinaryResourceUid = Guid.Empty;

      if (AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.License).IsNull == false)
        Entity.License = AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.License).GetAsString();
      else
        Entity.License = string.Empty;

      if (AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.PublicKey).IsNull == false)
        Entity.PublicKey = AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.PublicKey).GetAsString();
      else
        Entity.PublicKey = string.Empty;

      if (AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.Photo).IsNull == false)
        Entity.Photo = AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.Photo).GetAsString();
      else
        Entity.Photo = string.Empty;

      if (AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.TotalRowCount).IsNull == false)
        Entity.TotalRowCount = AllColumns.GetByName(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.TotalRowCount).GetAsInteger();
      else
        Entity.TotalRowCount = 0;

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>gcs_SelectEntitiesByUserIdPDSA</returns>
    public gcs_SelectEntitiesByUserIdPDSA CreateEntityFromDataRow(DataRow dr)
    {
      gcs_SelectEntitiesByUserIdPDSA entity = new gcs_SelectEntitiesByUserIdPDSA();

      if (dr.Table.Columns.Contains(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityId))
      {
        if (dr[gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityId] != DBNull.Value)
          entity.EntityId = PDSAProperty.ConvertToGuid(dr[gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityId]);
      }
      if (dr.Table.Columns.Contains(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityName))
      {
        if (dr[gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityName] != DBNull.Value)
          entity.EntityName = PDSAString.ConvertToStringTrim(dr[gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityName]);
      }
      if (dr.Table.Columns.Contains(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityDescription))
      {
        if (dr[gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityDescription] != DBNull.Value)
          entity.EntityDescription = PDSAString.ConvertToStringTrim(dr[gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityDescription]);
      }
      if (dr.Table.Columns.Contains(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityKey))
      {
        if (dr[gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityKey] != DBNull.Value)
          entity.EntityKey = PDSAString.ConvertToStringTrim(dr[gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.EntityKey]);
      }
      if (dr.Table.Columns.Contains(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.IsDefault))
      {
        if (dr[gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.IsDefault] != DBNull.Value)
          entity.IsDefault = Convert.ToBoolean(dr[gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.IsDefault]);
      }
      if (dr.Table.Columns.Contains(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.IsActive))
      {
        if (dr[gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.IsActive] != DBNull.Value)
          entity.IsActive = Convert.ToBoolean(dr[gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.IsActive]);
      }
      if (dr.Table.Columns.Contains(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.BinaryResourceUid))
      {
        if (dr[gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.BinaryResourceUid] != DBNull.Value)
          entity.BinaryResourceUid = PDSAProperty.ConvertToGuid(dr[gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.BinaryResourceUid]);
      }
      if (dr.Table.Columns.Contains(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.License))
      {
        if (dr[gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.License] != DBNull.Value)
          entity.License = PDSAString.ConvertToStringTrim(dr[gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.License]);
      }
      if (dr.Table.Columns.Contains(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.PublicKey))
      {
        if (dr[gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.PublicKey] != DBNull.Value)
          entity.PublicKey = PDSAString.ConvertToStringTrim(dr[gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.PublicKey]);
      }
      if (dr.Table.Columns.Contains(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.Photo))
      {
        if (dr[gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.Photo] != DBNull.Value)
          entity.Photo = PDSAString.ConvertToStringTrim(dr[gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.Photo]);
      }
      if (dr.Table.Columns.Contains(gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.TotalRowCount))
      {
        if (dr[gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.TotalRowCount] != DBNull.Value)
          entity.TotalRowCount = Convert.ToInt32(dr[gcs_SelectEntitiesByUserIdPDSAValidator.ColumnNames.TotalRowCount]);
      }
      entity.IsDirty = false;

      return entity;
    }
    #endregion

    #region ParameterNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the gcs_SelectEntitiesByUserIdPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ParameterNames
    {
    /// <summary>
    /// Returns '@UserId'
    /// </summary>
    public static string UserId = "@UserId";
    /// <summary>
    /// Returns '@PageNumber'
    /// </summary>
    public static string PageNumber = "@PageNumber";
    /// <summary>
    /// Returns '@PageSize'
    /// </summary>
    public static string PageSize = "@PageSize";
    /// <summary>
    /// Returns '@RETURN_VALUE'
    /// </summary>
    public static string RETURNVALUE = "@RETURN_VALUE";
    }
    #endregion
  }
}
