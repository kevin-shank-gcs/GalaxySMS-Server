using System;
using System.Collections.Generic;
using System.Data;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;


using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;
using GalaxySMS.DataLayer;
using GCS.Core.Common.Logger;

namespace GalaxySMS.BusinessLayer
{
  /// <summary>
  /// This class is used when you need to add, edit, delete, select and validate data for the DateTypeDefaultBehaviorPDSA table.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// DO NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class DateTypeDefaultBehaviorPDSAManager : PDSADataClassManagerBase
  {
    #region Constructors
    /// <summary>
    /// Constructor for the DateTypeDefaultBehaviorPDSAManager class
    /// </summary>
    public DateTypeDefaultBehaviorPDSAManager() : base()
    {
      // The base constructor calls the Init() method
    }

    /// <summary>
    /// Constructor for the DateTypeDefaultBehaviorPDSAManager class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    public DateTypeDefaultBehaviorPDSAManager(PDSADataProvider dataProvider) : base(dataProvider)
    {
      // The base constructor calls the Init() method
    }

    /// <summary>
    /// Constructor for the DateTypeDefaultBehaviorPDSAManager class
    /// </summary>
    /// <param name="dataProviderName">The name of the DataProvider to use for all data access</param>
    public DateTypeDefaultBehaviorPDSAManager(string dataProviderName) : base(dataProviderName)
    {
      // The base constructor calls the Init() method
    }
    #endregion
    
    #region Private variables
    private DateTypeDefaultBehaviorPDSA _Entity = null;
    private DateTypeDefaultBehaviorPDSA _SearchEntity = null;
    #endregion

    #region Public Properties
    /// <summary>
    /// Get/Set the entity class. This is the class that contains one property for each column in the table.
    /// </summary>
    public DateTypeDefaultBehaviorPDSA Entity
    {
      get { return _Entity; }
      set
      {
        _Entity = value;
        if (Validator != null)
          Validator.Entity = value;
        if (DataObject != null)
          DataObject.Entity = value;
      }
    }
    
    /// <summary>
    /// Get/Set the Entity class used for searching
    /// </summary>
    public DateTypeDefaultBehaviorPDSA SearchEntity
    {
      get
      {
        // Create Search Entity Class if not created
        if (_SearchEntity == null)
        {
          _SearchEntity = new DateTypeDefaultBehaviorPDSA();
          InitSearchFilter();
        }

        return _SearchEntity;
      }
      set { _SearchEntity = value; }
    }

    /// <summary>
    /// Get/Set the validator class. This is the class that contains the business rules for the Entity class.
    /// </summary>
    public DateTypeDefaultBehaviorPDSAValidator Validator { get; set; }
    /// <summary>
    /// Get/Set the data class that contains the CRUD logic for loading the Entity class
    /// </summary>
    public DateTypeDefaultBehaviorPDSAData DataObject { get; set; }
    #endregion

    #region Init Method
    /// <summary>
    /// Initialize this class to a valid start state
    /// </summary>
    protected override void Init()
    {
      // Create Entity Class if not created
      if(Entity == null)
      {
        Entity = new DateTypeDefaultBehaviorPDSA();

        // Set any default values on the Entity object
        InitEntityObject();
      }

      // Create Validator Class
      if(Validator == null)
        Validator = new DateTypeDefaultBehaviorPDSAValidator(Entity);

      // Create Data Class if not created
      if(DataObject == null)
        DataObject = new DateTypeDefaultBehaviorPDSAData(DataProvider, Entity, Validator);
      else
      {
        DataObject.DataProvider = DataProvider;
        DataObject.ValidatorObject = Validator;
        DataObject.Entity = Entity;
      }
        
      DataObject.CommandTimeout = Globals.Instance.SqlCommandTimeout;

      ClassName = "DateTypeDefaultBehaviorPDSAManager";
    }
    #endregion
    
    #region DictionaryToEntity Method
    /// <summary>
    /// Takes the filled Dictionary object and puts the values into the Entity object
    /// </summary>
    /// <param name="values">A Dictionary object</param>
    /// <returns>An EmployeeType object</returns>
    public DateTypeDefaultBehaviorPDSA DictionaryToEntity(Dictionary<string, string> values)
    {
      DateTypeDefaultBehaviorPDSA ret = new DateTypeDefaultBehaviorPDSA();

      // Initialize Entity Object
      InitEntityObject(ret);

      if (values.ContainsKey(DateTypeDefaultBehaviorPDSAValidator.ColumnNames.EntityId))
        ret.EntityId = PDSAProperty.ConvertToGuid(values[DateTypeDefaultBehaviorPDSAValidator.ColumnNames.EntityId]);

      if (values.ContainsKey(DateTypeDefaultBehaviorPDSAValidator.ColumnNames.SundayDayTypeUid))
        ret.SundayDayTypeUid = PDSAProperty.ConvertToGuid(values[DateTypeDefaultBehaviorPDSAValidator.ColumnNames.SundayDayTypeUid]);

      if (values.ContainsKey(DateTypeDefaultBehaviorPDSAValidator.ColumnNames.MondayDayTypeUid))
        ret.MondayDayTypeUid = PDSAProperty.ConvertToGuid(values[DateTypeDefaultBehaviorPDSAValidator.ColumnNames.MondayDayTypeUid]);

      if (values.ContainsKey(DateTypeDefaultBehaviorPDSAValidator.ColumnNames.TuesdayDayTypeUid))
        ret.TuesdayDayTypeUid = PDSAProperty.ConvertToGuid(values[DateTypeDefaultBehaviorPDSAValidator.ColumnNames.TuesdayDayTypeUid]);

      if (values.ContainsKey(DateTypeDefaultBehaviorPDSAValidator.ColumnNames.WednesdayDayTypeUid))
        ret.WednesdayDayTypeUid = PDSAProperty.ConvertToGuid(values[DateTypeDefaultBehaviorPDSAValidator.ColumnNames.WednesdayDayTypeUid]);

      if (values.ContainsKey(DateTypeDefaultBehaviorPDSAValidator.ColumnNames.ThursdayDayTypeUid))
        ret.ThursdayDayTypeUid = PDSAProperty.ConvertToGuid(values[DateTypeDefaultBehaviorPDSAValidator.ColumnNames.ThursdayDayTypeUid]);

      if (values.ContainsKey(DateTypeDefaultBehaviorPDSAValidator.ColumnNames.FridayDayTypeUid))
        ret.FridayDayTypeUid = PDSAProperty.ConvertToGuid(values[DateTypeDefaultBehaviorPDSAValidator.ColumnNames.FridayDayTypeUid]);

      if (values.ContainsKey(DateTypeDefaultBehaviorPDSAValidator.ColumnNames.SaturdayDayTypeUid))
        ret.SaturdayDayTypeUid = PDSAProperty.ConvertToGuid(values[DateTypeDefaultBehaviorPDSAValidator.ColumnNames.SaturdayDayTypeUid]);

      if (values.ContainsKey(DateTypeDefaultBehaviorPDSAValidator.ColumnNames.InsertName))
        ret.InsertName = PDSAString.ConvertToStringTrim(values[DateTypeDefaultBehaviorPDSAValidator.ColumnNames.InsertName]);

      if (values.ContainsKey(DateTypeDefaultBehaviorPDSAValidator.ColumnNames.InsertDate))
        ret.InsertDate = GCS.Core.Common.Extensions.DateTimeExtensions.ToDateTimeOffset(values[DateTypeDefaultBehaviorPDSAValidator.ColumnNames.InsertDate]);

      if (values.ContainsKey(DateTypeDefaultBehaviorPDSAValidator.ColumnNames.UpdateName))
        ret.UpdateName = PDSAString.ConvertToStringTrim(values[DateTypeDefaultBehaviorPDSAValidator.ColumnNames.UpdateName]);

      if (values.ContainsKey(DateTypeDefaultBehaviorPDSAValidator.ColumnNames.UpdateDate))
        ret.UpdateDate = GCS.Core.Common.Extensions.DateTimeExtensions.ToDateTimeOffset(values[DateTypeDefaultBehaviorPDSAValidator.ColumnNames.UpdateDate]);

      if (values.ContainsKey(DateTypeDefaultBehaviorPDSAValidator.ColumnNames.ConcurrencyValue))
        ret.ConcurrencyValue = Convert.ToInt16(values[DateTypeDefaultBehaviorPDSAValidator.ColumnNames.ConcurrencyValue]);

      return ret;
    }
    #endregion
    
    #region BuildCollection Method
    /// <summary>
    /// Returns a collection of DateTypeDefaultBehaviorPDSA classes based on the filters set
    /// You can set the SearchEntity object with values to search on partial data
    /// prior to calling this method to filter the results
    /// </summary>
    /// <returns>DateTypeDefaultBehaviorPDSACollection</returns>
    public DateTypeDefaultBehaviorPDSACollection BuildCollection()
    {
      DateTypeDefaultBehaviorPDSACollection coll = new DateTypeDefaultBehaviorPDSACollection();
      DateTypeDefaultBehaviorPDSA entity = null;
      DataSet ds;

      try
      {
        DataObject.Entity = Entity;
        ds = DataObject.GetDataSet();

        if (ds.Tables.Count > 0)
        {
          foreach (DataRow dr in ds.Tables[ds.Tables.Count - 1].Rows)
          {
            entity = DataObject.CreateEntityFromDataRow(dr);
          
            // You can set any additional properties here
          
            coll.Add(entity);
          }
        }
      }
      catch (Exception ex)
      {
#if BuildCollection_LogFullException
          System.Diagnostics.Debug.WriteLine($"Exception in {System.Reflection.MethodBase.GetCurrentMethod().DeclaringType?.FullName}=>{System.Reflection.MethodBase.GetCurrentMethod().Name}:{ex}");
#else
          //System.Diagnostics.Debug.WriteLine(ex.Message);
          this.Log().Error($"Exception in {System.Reflection.MethodBase.GetCurrentMethod().DeclaringType?.FullName}=>{System.Reflection.MethodBase.GetCurrentMethod().Name}:{ex}", ex);
          var innerEx = ex.InnerException;
          while (innerEx != null)
          {
            this.Log().Error($"InnerException in {System.Reflection.MethodBase.GetCurrentMethod().DeclaringType?.FullName}=>{System.Reflection.MethodBase.GetCurrentMethod().Name}:{innerEx}", innerEx);
           //System.Diagnostics.Debug.WriteLine(innerEx.Message);
            innerEx = innerEx.InnerException;
          }
#endif
	}
      return coll;
    }

    /// <summary>
    /// Build collection from a DataSet returned from a stored procedure
    /// </summary>
    /// <param name="ds">A DataSet</param>
    /// <returns>A collection of DateTypeDefaultBehaviorPDSA objects</returns>
    public DateTypeDefaultBehaviorPDSACollection BuildCollection(DataSet ds)
    {
      DateTypeDefaultBehaviorPDSACollection coll = new DateTypeDefaultBehaviorPDSACollection();

      if (ds != null)
      {
        if (ds.Tables.Count > 0)
        {
          foreach (DataRow item in ds.Tables[0].Rows)
          {
            coll.Add(DataObject.CreateEntityFromDataRow(item));
          }
        }
      }

      return coll;
    }
    
    /// <summary>
    /// Build collection from a DataTable returned from a stored procedure
    /// </summary>
    /// <param name="dt">A DataTable</param>
    /// <returns>A collection of DateTypeDefaultBehaviorPDSA objects</returns>
    public DateTypeDefaultBehaviorPDSACollection BuildCollection(DataTable dt)
    {
      DataSet ds = new DataSet();

      ds.Tables.Add(dt);

      return BuildCollection(ds);
    }
    #endregion

    #region GetCollectionAsJSON Method
    /// <summary>
    /// Returns a collection of DateTypeDefaultBehaviorPDSA objects as a JSON formatted string
    /// </summary>
    /// <returns>A JSON formatted string</returns>
    public string GetCollectionAsJSON()
    {
      return PDSAString.GetAsJSON(typeof(DateTypeDefaultBehaviorPDSACollection), BuildCollection());
    }
    #endregion

    #region GetDataSet Methods
    /// <summary>
    /// Get DataSet with all rows or with any filters you have set
    /// </summary>
    /// <returns>A DatSet object</returns>
    public DataSet GetDataSet()
    {
      return DataObject.GetDataSet();
    }

    /// <summary>
    /// Get DataSet using the SearchEntity object
    /// </summary>
    /// <returns>A DatSet object</returns>
    public DataSet GetDataSetUsingSearchFilters()
    {
      DataObject.SelectFilter = DateTypeDefaultBehaviorPDSAData.SelectFilters.Search;

      // Create connection
      DataObject.CommandObject.Connection = DataProvider.CreateConnection(DataProvider.ConnectString);

      return DataProvider.GetDataSet(DataObject.CommandObject);
    }
    #endregion

    #region InitSearchFilter Method
    /// <summary>
    /// Re-Initialize a 'SearchEntity' property
    /// </summary>
    public void InitSearchFilter()
    {
      // Initialize Search Entity
      SearchEntity = InitSearchFilter(SearchEntity);
    }

    /// <summary>
    /// Re-Initialize a Search Entity object
    /// Usually you will use this to set the SearchEntity object
    /// 
    /// DateTypeDefaultBehaviorPDSA.SearchEntity = mgr.InitSearchFilter(DateTypeDefaultBehaviorPDSA.SearchEntity);
    /// </summary>
    /// <param name="searchEntity">A DateTypeDefaultBehaviorPDSA object</param>
    /// <returns>An DateTypeDefaultBehaviorPDSA object</returns>
    public DateTypeDefaultBehaviorPDSA InitSearchFilter(DateTypeDefaultBehaviorPDSA searchEntity)
    {
      searchEntity.InsertName  = string.Empty;

      searchEntity.IsDirty = false;

      DataObject.SelectFilter = DateTypeDefaultBehaviorPDSAData.SelectFilters.All;
     
      return searchEntity;
    }
    #endregion

    #region Insert Method
    /// <summary>
    /// Insert a new entity into the GCS.DateTypeDefaultBehavior table
    /// </summary>
    /// <param name="entity">An DateTypeDefaultBehaviorPDSA entity object</param>
    /// <returns>Number of rows affected by the Insert</returns>
    public int Insert(DateTypeDefaultBehaviorPDSA entity)
    {
      int ret = 0;

      Entity = entity;
      DataObject.Entity = entity;
      ret = DataObject.Insert();
      if(ret >= 1)
        TrackChanges("Insert");

      return ret;
    }
    #endregion

    #region Update Method
    /// <summary>
    /// Updates an entity in the GCS.DateTypeDefaultBehavior table
    /// </summary>
    /// <param name="entity">An DateTypeDefaultBehaviorPDSA entity object</param>
    /// <returns>Number of rows affected by the Update</returns>
    public int Update(DateTypeDefaultBehaviorPDSA entity)
    {
      int ret = 0;

      Entity = entity;
      DataObject.Entity = entity;
      ret = DataObject.Update();
      if(ret >= 1)
        TrackChanges("Update");

      return ret;
    }
    #endregion

    #region Delete Method
    /// <summary>
    /// Deletes an entity from the GCS.DateTypeDefaultBehavior table
    /// </summary>
    /// <param name="entity">An DateTypeDefaultBehaviorPDSA entity object</param>
    /// <returns>Number of rows affected by the Delete</returns>
    public int Delete(DateTypeDefaultBehaviorPDSA entity)
    {
      int ret = 0;

      Entity = entity;
      DataObject.Entity = entity;
      ret = DataObject.DeleteByPK(entity.EntityId);
      if(ret >= 1)
        TrackChanges("Delete");

      return ret;
    }
    #endregion
  
    
    
    //#region GetDateTypeDefaultBehaviorPDSAsByFK_DateTypeDefaultBehaviorEntityEntity Method
    //public DateTypeDefaultBehaviorPDSACollection GetDateTypeDefaultBehaviorPDSAsByFK_DateTypeDefaultBehaviorEntityEntity(gcsEntityPDSA entity)
    //{
    //  if (entity != null)
    //  {
    //     try
    //     {
    //       if(DataObject.UseStoredProcs)
    //       {
    //         DataObject.SelectFilter = DateTypeDefaultBehaviorPDSAData.SelectFilters.PrimaryKey;
    //       }
    //       else
    //       {
    //       }
           
    //       Entity.EntityId = entity.EntityId;
    //     }
    //     catch (Exception ex)
    //     {
    //        // This is here for design time exceptions
    //        System.Diagnostics.Debug.WriteLine(ex.Message);
    //        var innerEx = ex.InnerException;
    //        while( innerEx != null)
    //        {
    //            System.Diagnostics.Debug.WriteLine(innerEx.Message);
    //            innerEx = innerEx.InnerException;
    //        }
    //     }
            
    //     return BuildCollection();
    //  }
    //  else
    //    return new DateTypeDefaultBehaviorPDSACollection();
    //}
    //#endregion

    //#region GetDateTypeDefaultBehaviorPDSAsByFK_DateTypeDefaultBehaviorEntity Method
    //public DateTypeDefaultBehaviorPDSACollection GetDateTypeDefaultBehaviorPDSAsByFK_DateTypeDefaultBehaviorEntity(Guid entityId)
    //{
    //  try
    //  {
    //    if(DataObject.UseStoredProcs)
    //    {
    //      DataObject.SelectFilter = DateTypeDefaultBehaviorPDSAData.SelectFilters.PrimaryKey;
    //    }
    //    else
    //    {
    //    }
        
    //    Entity.EntityId = entityId;
    //  }
    //  catch (Exception ex)
    //  {
    //    // This is here for design time exceptions
    //    System.Diagnostics.Debug.WriteLine(ex.Message);
    //    var innerEx = ex.InnerException;
    //    while( innerEx != null)
    //    {
    //        System.Diagnostics.Debug.WriteLine(innerEx.Message);
    //        innerEx = innerEx.InnerException;
    //    }
    //  }
            
    //  return BuildCollection();
    //}
    //#endregion
    
  }
}

