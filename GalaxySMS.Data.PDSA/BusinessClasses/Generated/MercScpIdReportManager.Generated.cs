using System;
using System.Collections.Generic;
using System.Data;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;


using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;
using GalaxySMS.DataLayer;
using GCS.Core.Common.Logger;

namespace GalaxySMS.BusinessLayer
{
  /// <summary>
  /// This class is used when you need to add, edit, delete, select and validate data for the MercScpIdReportPDSA table.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// DO NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class MercScpIdReportPDSAManager : PDSADataClassManagerBase
  {
    #region Constructors
    /// <summary>
    /// Constructor for the MercScpIdReportPDSAManager class
    /// </summary>
    public MercScpIdReportPDSAManager() : base()
    {
      // The base constructor calls the Init() method
    }

    /// <summary>
    /// Constructor for the MercScpIdReportPDSAManager class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    public MercScpIdReportPDSAManager(PDSADataProvider dataProvider) : base(dataProvider)
    {
      // The base constructor calls the Init() method
    }

    /// <summary>
    /// Constructor for the MercScpIdReportPDSAManager class
    /// </summary>
    /// <param name="dataProviderName">The name of the DataProvider to use for all data access</param>
    public MercScpIdReportPDSAManager(string dataProviderName) : base(dataProviderName)
    {
      // The base constructor calls the Init() method
    }
    #endregion
    
    #region Private variables
    private MercScpIdReportPDSA _Entity = null;
    private MercScpIdReportPDSA _SearchEntity = null;
    #endregion

    #region Public Properties
    /// <summary>
    /// Get/Set the entity class. This is the class that contains one property for each column in the table.
    /// </summary>
    public MercScpIdReportPDSA Entity
    {
      get { return _Entity; }
      set
      {
        _Entity = value;
        if (Validator != null)
          Validator.Entity = value;
        if (DataObject != null)
          DataObject.Entity = value;
      }
    }
    
    /// <summary>
    /// Get/Set the Entity class used for searching
    /// </summary>
    public MercScpIdReportPDSA SearchEntity
    {
      get
      {
        // Create Search Entity Class if not created
        if (_SearchEntity == null)
        {
          _SearchEntity = new MercScpIdReportPDSA();
          InitSearchFilter();
        }

        return _SearchEntity;
      }
      set { _SearchEntity = value; }
    }

    /// <summary>
    /// Get/Set the validator class. This is the class that contains the business rules for the Entity class.
    /// </summary>
    public MercScpIdReportPDSAValidator Validator { get; set; }
    /// <summary>
    /// Get/Set the data class that contains the CRUD logic for loading the Entity class
    /// </summary>
    public MercScpIdReportPDSAData DataObject { get; set; }
    #endregion

    #region Init Method
    /// <summary>
    /// Initialize this class to a valid start state
    /// </summary>
    protected override void Init()
    {
      // Create Entity Class if not created
      if(Entity == null)
      {
        Entity = new MercScpIdReportPDSA();

        // Set any default values on the Entity object
        InitEntityObject();
      }

      // Create Validator Class
      if(Validator == null)
        Validator = new MercScpIdReportPDSAValidator(Entity);

      // Create Data Class if not created
      if(DataObject == null)
        DataObject = new MercScpIdReportPDSAData(DataProvider, Entity, Validator);
      else
      {
        DataObject.DataProvider = DataProvider;
        DataObject.ValidatorObject = Validator;
        DataObject.Entity = Entity;
      }
        
      DataObject.CommandTimeout = Globals.Instance.SqlCommandTimeout;

      ClassName = "MercScpIdReportPDSAManager";
    }
    #endregion
    
    #region DictionaryToEntity Method
    /// <summary>
    /// Takes the filled Dictionary object and puts the values into the Entity object
    /// </summary>
    /// <param name="values">A Dictionary object</param>
    /// <returns>An EmployeeType object</returns>
    public MercScpIdReportPDSA DictionaryToEntity(Dictionary<string, string> values)
    {
      MercScpIdReportPDSA ret = new MercScpIdReportPDSA();

      // Initialize Entity Object
      InitEntityObject(ret);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.MercScpIdReportUid))
        ret.MercScpIdReportUid = PDSAProperty.ConvertToGuid(values[MercScpIdReportPDSAValidator.ColumnNames.MercScpIdReportUid]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.MacAddress))
        ret.MacAddress = PDSAString.ConvertToStringTrim(values[MercScpIdReportPDSAValidator.ColumnNames.MacAddress]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.DriverSpcId))
        ret.DriverSpcId = Convert.ToInt32(values[MercScpIdReportPDSAValidator.ColumnNames.DriverSpcId]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.ScpId))
        ret.ScpId = Convert.ToInt32(values[MercScpIdReportPDSAValidator.ColumnNames.ScpId]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.SerialNumber))
        ret.SerialNumber = PDSAString.ConvertToStringTrim(values[MercScpIdReportPDSAValidator.ColumnNames.SerialNumber]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.DeviceId))
        ret.DeviceId = PDSAString.ConvertToStringTrim(values[MercScpIdReportPDSAValidator.ColumnNames.DeviceId]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.DeviceVersion))
        ret.DeviceVersion = PDSAString.ConvertToStringTrim(values[MercScpIdReportPDSAValidator.ColumnNames.DeviceVersion]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMajor))
        ret.SoftwareRevisionMajor = Convert.ToInt32(values[MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMajor]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMinor))
        ret.SoftwareRevisionMinor = Convert.ToInt32(values[MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMinor]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.CumulativeBuildCount))
        ret.CumulativeBuildCount = Convert.ToInt32(values[MercScpIdReportPDSAValidator.ColumnNames.CumulativeBuildCount]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.NeedsConfiguration))
        ret.NeedsConfiguration = Convert.ToBoolean(values[MercScpIdReportPDSAValidator.ColumnNames.NeedsConfiguration]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.TlsStatus))
        ret.TlsStatus = PDSAString.ConvertToStringTrim(values[MercScpIdReportPDSAValidator.ColumnNames.TlsStatus]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.OemCode))
        ret.OemCode = Convert.ToInt32(values[MercScpIdReportPDSAValidator.ColumnNames.OemCode]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.CurrentOperatingMode))
        ret.CurrentOperatingMode = Convert.ToInt16(values[MercScpIdReportPDSAValidator.ColumnNames.CurrentOperatingMode]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.Input1State))
        ret.Input1State = Convert.ToInt16(values[MercScpIdReportPDSAValidator.ColumnNames.Input1State]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.Input2State))
        ret.Input2State = Convert.ToInt16(values[MercScpIdReportPDSAValidator.ColumnNames.Input2State]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.Input3State))
        ret.Input3State = Convert.ToInt16(values[MercScpIdReportPDSAValidator.ColumnNames.Input3State]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Active))
        ret.BioDb1Active = Convert.ToInt32(values[MercScpIdReportPDSAValidator.ColumnNames.BioDb1Active]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Max))
        ret.BioDb1Max = Convert.ToInt32(values[MercScpIdReportPDSAValidator.ColumnNames.BioDb1Max]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Active))
        ret.BioDb2Active = Convert.ToInt32(values[MercScpIdReportPDSAValidator.ColumnNames.BioDb2Active]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Max))
        ret.BioDb2Max = Convert.ToInt32(values[MercScpIdReportPDSAValidator.ColumnNames.BioDb2Max]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.AssetDbActive))
        ret.AssetDbActive = Convert.ToInt32(values[MercScpIdReportPDSAValidator.ColumnNames.AssetDbActive]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.AssetDbMax))
        ret.AssetDbMax = Convert.ToInt32(values[MercScpIdReportPDSAValidator.ColumnNames.AssetDbMax]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.FirmwareAdvisory))
        ret.FirmwareAdvisory = PDSAString.ConvertToStringTrim(values[MercScpIdReportPDSAValidator.ColumnNames.FirmwareAdvisory]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchCurrent))
        ret.DipSwitchCurrent = Convert.ToInt16(values[MercScpIdReportPDSAValidator.ColumnNames.DipSwitchCurrent]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchPowerUp))
        ret.DipSwitchPowerUp = Convert.ToInt16(values[MercScpIdReportPDSAValidator.ColumnNames.DipSwitchPowerUp]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.DbActiveRecords))
        ret.DbActiveRecords = Convert.ToInt32(values[MercScpIdReportPDSAValidator.ColumnNames.DbActiveRecords]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.DbMaxSize))
        ret.DbMaxSize = Convert.ToInt32(values[MercScpIdReportPDSAValidator.ColumnNames.DbMaxSize]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.CurrentClock))
        ret.CurrentClock = Convert.ToInt64(values[MercScpIdReportPDSAValidator.ColumnNames.CurrentClock]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.RamFree))
        ret.RamFree = Convert.ToInt32(values[MercScpIdReportPDSAValidator.ColumnNames.RamFree]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.RamSize))
        ret.RamSize = Convert.ToInt32(values[MercScpIdReportPDSAValidator.ColumnNames.RamSize]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.InsertName))
        ret.InsertName = PDSAString.ConvertToStringTrim(values[MercScpIdReportPDSAValidator.ColumnNames.InsertName]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.InsertDate))
        ret.InsertDate = GCS.Core.Common.Extensions.DateTimeExtensions.ToDateTimeOffset(values[MercScpIdReportPDSAValidator.ColumnNames.InsertDate]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.UpdateName))
        ret.UpdateName = PDSAString.ConvertToStringTrim(values[MercScpIdReportPDSAValidator.ColumnNames.UpdateName]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.UpdateDate))
        ret.UpdateDate = GCS.Core.Common.Extensions.DateTimeExtensions.ToDateTimeOffset(values[MercScpIdReportPDSAValidator.ColumnNames.UpdateDate]);

      if (values.ContainsKey(MercScpIdReportPDSAValidator.ColumnNames.ConcurrencyValue))
        ret.ConcurrencyValue = Convert.ToInt16(values[MercScpIdReportPDSAValidator.ColumnNames.ConcurrencyValue]);

      return ret;
    }
    #endregion
    
    #region BuildCollection Method
    /// <summary>
    /// Returns a collection of MercScpIdReportPDSA classes based on the filters set
    /// You can set the SearchEntity object with values to search on partial data
    /// prior to calling this method to filter the results
    /// </summary>
    /// <returns>MercScpIdReportPDSACollection</returns>
    public MercScpIdReportPDSACollection BuildCollection()
    {
      MercScpIdReportPDSACollection coll = new MercScpIdReportPDSACollection();
      MercScpIdReportPDSA entity = null;
      DataSet ds;

      try
      {
        DataObject.Entity = Entity;
        ds = DataObject.GetDataSet();

        if (ds.Tables.Count > 0)
        {
          foreach (DataRow dr in ds.Tables[ds.Tables.Count - 1].Rows)
          {
            entity = DataObject.CreateEntityFromDataRow(dr);
          
            // You can set any additional properties here
          
            coll.Add(entity);
          }
        }
      }
      catch (Exception ex)
      {
#if BuildCollection_LogFullException
          System.Diagnostics.Debug.WriteLine($"Exception in {System.Reflection.MethodBase.GetCurrentMethod()?.DeclaringType?.FullName}=>{System.Reflection.MethodBase.GetCurrentMethod()?.Name}:{ex}");
#else
                //System.Diagnostics.Debug.WriteLine(ex.Message);
                this.Log().Error($"Exception in {System.Reflection.MethodBase.GetCurrentMethod().DeclaringType?.FullName}=>{System.Reflection.MethodBase.GetCurrentMethod().Name}:{ex}", ex);
                var innerEx = ex.InnerException;
                while (innerEx != null)
                {
                    this.Log().Error($"InnerException in {System.Reflection.MethodBase.GetCurrentMethod().DeclaringType?.FullName}=>{System.Reflection.MethodBase.GetCurrentMethod().Name}:{innerEx}", innerEx);
                    //System.Diagnostics.Debug.WriteLine(innerEx.Message);
                    innerEx = innerEx.InnerException;
                }
#endif
	}
      return coll;
    }

    /// <summary>
    /// Build collection from a DataSet returned from a stored procedure
    /// </summary>
    /// <param name="ds">A DataSet</param>
    /// <returns>A collection of MercScpIdReportPDSA objects</returns>
    public MercScpIdReportPDSACollection BuildCollection(DataSet ds)
    {
      MercScpIdReportPDSACollection coll = new MercScpIdReportPDSACollection();

      if (ds != null)
      {
        if (ds.Tables.Count > 0)
        {
          foreach (DataRow item in ds.Tables[0].Rows)
          {
            coll.Add(DataObject.CreateEntityFromDataRow(item));
          }
        }
      }

      return coll;
    }
    
    /// <summary>
    /// Build collection from a DataTable returned from a stored procedure
    /// </summary>
    /// <param name="dt">A DataTable</param>
    /// <returns>A collection of MercScpIdReportPDSA objects</returns>
    public MercScpIdReportPDSACollection BuildCollection(DataTable dt)
    {
      DataSet ds = new DataSet();

      ds.Tables.Add(dt);

      return BuildCollection(ds);
    }
    #endregion

    #region GetCollectionAsJSON Method
    /// <summary>
    /// Returns a collection of MercScpIdReportPDSA objects as a JSON formatted string
    /// </summary>
    /// <returns>A JSON formatted string</returns>
    public string GetCollectionAsJSON()
    {
      return PDSAString.GetAsJSON(typeof(MercScpIdReportPDSACollection), BuildCollection());
    }
    #endregion

    #region GetDataSet Methods
    /// <summary>
    /// Get DataSet with all rows or with any filters you have set
    /// </summary>
    /// <returns>A DatSet object</returns>
    public DataSet GetDataSet()
    {
      return DataObject.GetDataSet();
    }

    /// <summary>
    /// Get DataSet using the SearchEntity object
    /// </summary>
    /// <returns>A DatSet object</returns>
    public DataSet GetDataSetUsingSearchFilters()
    {
      DataObject.SelectFilter = MercScpIdReportPDSAData.SelectFilters.Search;

      // Create connection
      DataObject.CommandObject.Connection = DataProvider.CreateConnection(DataProvider.ConnectString);

      return DataProvider.GetDataSet(DataObject.CommandObject);
    }
    #endregion

    #region InitSearchFilter Method
    /// <summary>
    /// Re-Initialize a 'SearchEntity' property
    /// </summary>
    public void InitSearchFilter()
    {
      // Initialize Search Entity
      SearchEntity = InitSearchFilter(SearchEntity);
    }

    /// <summary>
    /// Re-Initialize a Search Entity object
    /// Usually you will use this to set the SearchEntity object
    /// 
    /// MercScpIdReportPDSA.SearchEntity = mgr.InitSearchFilter(MercScpIdReportPDSA.SearchEntity);
    /// </summary>
    /// <param name="searchEntity">A MercScpIdReportPDSA object</param>
    /// <returns>An MercScpIdReportPDSA object</returns>
    public MercScpIdReportPDSA InitSearchFilter(MercScpIdReportPDSA searchEntity)
    {
      searchEntity.MacAddress  = string.Empty;

      searchEntity.IsDirty = false;

      DataObject.SelectFilter = MercScpIdReportPDSAData.SelectFilters.All;
     
      return searchEntity;
    }
    #endregion

    #region Insert Method
    /// <summary>
    /// Insert a new entity into the GCS.MercScpIdReport table
    /// </summary>
    /// <param name="entity">An MercScpIdReportPDSA entity object</param>
    /// <returns>Number of rows affected by the Insert</returns>
    public int Insert(MercScpIdReportPDSA entity)
    {
      int ret = 0;

      Entity = entity;
      DataObject.Entity = entity;
      ret = DataObject.Insert();
      if(ret >= 1)
        TrackChanges("Insert");

      return ret;
    }
    #endregion

    #region Update Method
    /// <summary>
    /// Updates an entity in the GCS.MercScpIdReport table
    /// </summary>
    /// <param name="entity">An MercScpIdReportPDSA entity object</param>
    /// <returns>Number of rows affected by the Update</returns>
    public int Update(MercScpIdReportPDSA entity)
    {
      int ret = 0;

      Entity = entity;
      DataObject.Entity = entity;
      ret = DataObject.Update();
      if(ret >= 1)
        TrackChanges("Update");

      return ret;
    }
    #endregion

    #region Delete Method
    /// <summary>
    /// Deletes an entity from the GCS.MercScpIdReport table
    /// </summary>
    /// <param name="entity">An MercScpIdReportPDSA entity object</param>
    /// <returns>Number of rows affected by the Delete</returns>
    public int Delete(MercScpIdReportPDSA entity)
    {
      int ret = 0;

      Entity = entity;
      DataObject.Entity = entity;
      ret = DataObject.DeleteByPK(entity.MercScpIdReportUid);
      if(ret >= 1)
        TrackChanges("Delete");

      return ret;
    }
    #endregion
  
    
    
  }
}

