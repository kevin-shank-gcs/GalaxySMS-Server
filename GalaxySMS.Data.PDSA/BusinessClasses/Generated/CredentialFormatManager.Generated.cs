using System;
using System.Collections.Generic;
using System.Data;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;


using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;
using GalaxySMS.DataLayer;
using GCS.Core.Common.Logger;

namespace GalaxySMS.BusinessLayer
{
  /// <summary>
  /// This class is used when you need to add, edit, delete, select and validate data for the CredentialFormatPDSA table.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// DO NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class CredentialFormatPDSAManager : PDSADataClassManagerBase
  {
	#region Constructors
	/// <summary>
	/// Constructor for the CredentialFormatPDSAManager class
	/// </summary>
	public CredentialFormatPDSAManager() : base()
	{
	  // The base constructor calls the Init() method
	}

	/// <summary>
	/// Constructor for the CredentialFormatPDSAManager class
	/// </summary>
	/// <param name="dataProvider">An instance of a PDSADataProvider</param>
	public CredentialFormatPDSAManager(PDSADataProvider dataProvider) : base(dataProvider)
	{
	  // The base constructor calls the Init() method
	}

	/// <summary>
	/// Constructor for the CredentialFormatPDSAManager class
	/// </summary>
	/// <param name="dataProviderName">The name of the DataProvider to use for all data access</param>
	public CredentialFormatPDSAManager(string dataProviderName) : base(dataProviderName)
	{
	  // The base constructor calls the Init() method
	}
	#endregion
	
	#region Private variables
	private CredentialFormatPDSA _Entity = null;
	private CredentialFormatPDSA _SearchEntity = null;
	#endregion

	#region Public Properties
	/// <summary>
	/// Get/Set the entity class. This is the class that contains one property for each column in the table.
	/// </summary>
	public CredentialFormatPDSA Entity
	{
	  get { return _Entity; }
	  set
	  {
		_Entity = value;
		if (Validator != null)
		  Validator.Entity = value;
		if (DataObject != null)
		  DataObject.Entity = value;
	  }
	}
	
	/// <summary>
	/// Get/Set the Entity class used for searching
	/// </summary>
	public CredentialFormatPDSA SearchEntity
	{
	  get
	  {
		// Create Search Entity Class if not created
		if (_SearchEntity == null)
		{
		  _SearchEntity = new CredentialFormatPDSA();
		  InitSearchFilter();
		}

		return _SearchEntity;
	  }
	  set { _SearchEntity = value; }
	}

	/// <summary>
	/// Get/Set the validator class. This is the class that contains the business rules for the Entity class.
	/// </summary>
	public CredentialFormatPDSAValidator Validator { get; set; }
	/// <summary>
	/// Get/Set the data class that contains the CRUD logic for loading the Entity class
	/// </summary>
	public CredentialFormatPDSAData DataObject { get; set; }
	#endregion

	#region Init Method
	/// <summary>
	/// Initialize this class to a valid start state
	/// </summary>
	protected override void Init()
	{
	  // Create Entity Class if not created
	  if(Entity == null)
	  {
		Entity = new CredentialFormatPDSA();

		// Set any default values on the Entity object
		InitEntityObject();
	  }

	  // Create Validator Class
	  if(Validator == null)
		Validator = new CredentialFormatPDSAValidator(Entity);

	  // Create Data Class if not created
	  if(DataObject == null)
		DataObject = new CredentialFormatPDSAData(DataProvider, Entity, Validator);
	  else
	  {
		DataObject.DataProvider = DataProvider;
		DataObject.ValidatorObject = Validator;
		DataObject.Entity = Entity;
	  }
		
	  DataObject.CommandTimeout = Globals.Instance.SqlCommandTimeout;

	  ClassName = "CredentialFormatPDSAManager";
	}
	#endregion
	
	#region DictionaryToEntity Method
	/// <summary>
	/// Takes the filled Dictionary object and puts the values into the Entity object
	/// </summary>
	/// <param name="values">A Dictionary object</param>
	/// <returns>An EmployeeType object</returns>
	public CredentialFormatPDSA DictionaryToEntity(Dictionary<string, string> values)
	{
	  CredentialFormatPDSA ret = new CredentialFormatPDSA();

	  // Initialize Entity Object
	  InitEntityObject(ret);

	  if (values.ContainsKey(CredentialFormatPDSAValidator.ColumnNames.CredentialFormatUid))
		ret.CredentialFormatUid = PDSAProperty.ConvertToGuid(values[CredentialFormatPDSAValidator.ColumnNames.CredentialFormatUid]);

	  if (values.ContainsKey(CredentialFormatPDSAValidator.ColumnNames.DisplayResourceKey))
		ret.DisplayResourceKey = PDSAProperty.ConvertToGuid(values[CredentialFormatPDSAValidator.ColumnNames.DisplayResourceKey]);

	  if (values.ContainsKey(CredentialFormatPDSAValidator.ColumnNames.DescriptionResourceKey))
		ret.DescriptionResourceKey = PDSAProperty.ConvertToGuid(values[CredentialFormatPDSAValidator.ColumnNames.DescriptionResourceKey]);

	  if (values.ContainsKey(CredentialFormatPDSAValidator.ColumnNames.Display))
		ret.Display = PDSAString.ConvertToStringTrim(values[CredentialFormatPDSAValidator.ColumnNames.Display]);

	  if (values.ContainsKey(CredentialFormatPDSAValidator.ColumnNames.Description))
		ret.Description = PDSAString.ConvertToStringTrim(values[CredentialFormatPDSAValidator.ColumnNames.Description]);

	  if (values.ContainsKey(CredentialFormatPDSAValidator.ColumnNames.CredentialFormatCode))
		ret.CredentialFormatCode = Convert.ToInt16(values[CredentialFormatPDSAValidator.ColumnNames.CredentialFormatCode]);

	  if (values.ContainsKey(CredentialFormatPDSAValidator.ColumnNames.BitLength))
		ret.BitLength = Convert.ToInt16(values[CredentialFormatPDSAValidator.ColumnNames.BitLength]);

	  if (values.ContainsKey(CredentialFormatPDSAValidator.ColumnNames.IsEnabled))
		ret.IsEnabled = Convert.ToBoolean(values[CredentialFormatPDSAValidator.ColumnNames.IsEnabled]);

	  if (values.ContainsKey(CredentialFormatPDSAValidator.ColumnNames.BiometricEnrollmentSupported))
		ret.BiometricEnrollmentSupported = Convert.ToBoolean(values[CredentialFormatPDSAValidator.ColumnNames.BiometricEnrollmentSupported]);

	  if (values.ContainsKey(CredentialFormatPDSAValidator.ColumnNames.BiometricIdField))
		ret.BiometricIdField = Convert.ToInt16(values[CredentialFormatPDSAValidator.ColumnNames.BiometricIdField]);

	  if (values.ContainsKey(CredentialFormatPDSAValidator.ColumnNames.UseCardNumber))
		ret.UseCardNumber = Convert.ToBoolean(values[CredentialFormatPDSAValidator.ColumnNames.UseCardNumber]);

	  if (values.ContainsKey(CredentialFormatPDSAValidator.ColumnNames.BatchLoadSupported))
		ret.BatchLoadSupported = Convert.ToBoolean(values[CredentialFormatPDSAValidator.ColumnNames.BatchLoadSupported]);

	  if (values.ContainsKey(CredentialFormatPDSAValidator.ColumnNames.BatchLoadIncrementField))
		ret.BatchLoadIncrementField = Convert.ToInt16(values[CredentialFormatPDSAValidator.ColumnNames.BatchLoadIncrementField]);

	  if (values.ContainsKey(CredentialFormatPDSAValidator.ColumnNames.InsertName))
		ret.InsertName = PDSAString.ConvertToStringTrim(values[CredentialFormatPDSAValidator.ColumnNames.InsertName]);

	  if (values.ContainsKey(CredentialFormatPDSAValidator.ColumnNames.InsertDate))
		ret.InsertDate = GCS.Core.Common.Extensions.DateTimeExtensions.ToDateTimeOffset(values[CredentialFormatPDSAValidator.ColumnNames.InsertDate]);

	  if (values.ContainsKey(CredentialFormatPDSAValidator.ColumnNames.UpdateName))
		ret.UpdateName = PDSAString.ConvertToStringTrim(values[CredentialFormatPDSAValidator.ColumnNames.UpdateName]);

	  if (values.ContainsKey(CredentialFormatPDSAValidator.ColumnNames.UpdateDate))
		ret.UpdateDate = GCS.Core.Common.Extensions.DateTimeExtensions.ToDateTimeOffset(values[CredentialFormatPDSAValidator.ColumnNames.UpdateDate]);

	  if (values.ContainsKey(CredentialFormatPDSAValidator.ColumnNames.ConcurrencyValue))
		ret.ConcurrencyValue = Convert.ToInt16(values[CredentialFormatPDSAValidator.ColumnNames.ConcurrencyValue]);

	  if (values.ContainsKey(CredentialFormatPDSAValidator.ColumnNames.EntityId))
		ret.EntityId = PDSAProperty.ConvertToGuid(values[CredentialFormatPDSAValidator.ColumnNames.EntityId]);

	  if (values.ContainsKey(CredentialFormatPDSAValidator.ColumnNames.IsAllowed))
		ret.IsAllowed = Convert.ToBoolean(values[CredentialFormatPDSAValidator.ColumnNames.IsAllowed]);

	  return ret;
	}
	#endregion
	
	#region BuildCollection Method
	/// <summary>
	/// Returns a collection of CredentialFormatPDSA classes based on the filters set
	/// You can set the SearchEntity object with values to search on partial data
	/// prior to calling this method to filter the results
	/// </summary>
	/// <returns>CredentialFormatPDSACollection</returns>
	public CredentialFormatPDSACollection BuildCollection()
	{
	  CredentialFormatPDSACollection coll = new CredentialFormatPDSACollection();
	  CredentialFormatPDSA entity = null;
	  DataSet ds;

	  try
	  {
		DataObject.Entity = Entity;
		ds = DataObject.GetDataSet();

		if (ds.Tables.Count > 0)
		{
		  foreach (DataRow dr in ds.Tables[ds.Tables.Count - 1].Rows)
		  {
			entity = DataObject.CreateEntityFromDataRow(dr);
		  
			// You can set any additional properties here
		  
			coll.Add(entity);
		  }
		}
	  }
	  catch (Exception ex)
	  {
#if BuildCollection_LogFullException
		  System.Diagnostics.Debug.WriteLine($"Exception in {System.Reflection.MethodBase.GetCurrentMethod().DeclaringType?.FullName}=>{System.Reflection.MethodBase.GetCurrentMethod().Name}:{ex}");
#else
		  System.Diagnostics.Debug.WriteLine(ex.Message);
		  var innerEx = ex.InnerException;
		  while (innerEx != null)
		  {
			System.Diagnostics.Debug.WriteLine(innerEx.Message);
			innerEx = innerEx.InnerException;
		  }
#endif
	}
	  return coll;
	}

	/// <summary>
	/// Build collection from a DataSet returned from a stored procedure
	/// </summary>
	/// <param name="ds">A DataSet</param>
	/// <returns>A collection of CredentialFormatPDSA objects</returns>
	public CredentialFormatPDSACollection BuildCollection(DataSet ds)
	{
	  CredentialFormatPDSACollection coll = new CredentialFormatPDSACollection();

	  if (ds != null)
	  {
		if (ds.Tables.Count > 0)
		{
		  foreach (DataRow item in ds.Tables[0].Rows)
		  {
			coll.Add(DataObject.CreateEntityFromDataRow(item));
		  }
		}
	  }

	  return coll;
	}
	
	/// <summary>
	/// Build collection from a DataTable returned from a stored procedure
	/// </summary>
	/// <param name="dt">A DataTable</param>
	/// <returns>A collection of CredentialFormatPDSA objects</returns>
	public CredentialFormatPDSACollection BuildCollection(DataTable dt)
	{
	  DataSet ds = new DataSet();

	  ds.Tables.Add(dt);

	  return BuildCollection(ds);
	}
	#endregion

	#region GetCollectionAsJSON Method
	/// <summary>
	/// Returns a collection of CredentialFormatPDSA objects as a JSON formatted string
	/// </summary>
	/// <returns>A JSON formatted string</returns>
	public string GetCollectionAsJSON()
	{
	  return PDSAString.GetAsJSON(typeof(CredentialFormatPDSACollection), BuildCollection());
	}
	#endregion

	#region GetDataSet Methods
	/// <summary>
	/// Get DataSet with all rows or with any filters you have set
	/// </summary>
	/// <returns>A DatSet object</returns>
	public DataSet GetDataSet()
	{
	  return DataObject.GetDataSet();
	}

	/// <summary>
	/// Get DataSet using the SearchEntity object
	/// </summary>
	/// <returns>A DatSet object</returns>
	public DataSet GetDataSetUsingSearchFilters()
	{
	  DataObject.SelectFilter = CredentialFormatPDSAData.SelectFilters.Search;

	  // Create connection
	  DataObject.CommandObject.Connection = DataProvider.CreateConnection(DataProvider.ConnectString);

	  return DataProvider.GetDataSet(DataObject.CommandObject);
	}
	#endregion

	#region InitSearchFilter Method
	/// <summary>
	/// Re-Initialize a 'SearchEntity' property
	/// </summary>
	public void InitSearchFilter()
	{
	  // Initialize Search Entity
	  SearchEntity = InitSearchFilter(SearchEntity);
	}

	/// <summary>
	/// Re-Initialize a Search Entity object
	/// Usually you will use this to set the SearchEntity object
	/// 
	/// CredentialFormatPDSA.SearchEntity = mgr.InitSearchFilter(CredentialFormatPDSA.SearchEntity);
	/// </summary>
	/// <param name="searchEntity">A CredentialFormatPDSA object</param>
	/// <returns>An CredentialFormatPDSA object</returns>
	public CredentialFormatPDSA InitSearchFilter(CredentialFormatPDSA searchEntity)
	{
	  searchEntity.Display  = string.Empty;

	  searchEntity.IsDirty = false;

	  DataObject.SelectFilter = CredentialFormatPDSAData.SelectFilters.All;
	 
	  return searchEntity;
	}
	#endregion

	#region Insert Method
	/// <summary>
	/// Insert a new entity into the GCS.CredentialFormat table
	/// </summary>
	/// <param name="entity">An CredentialFormatPDSA entity object</param>
	/// <returns>Number of rows affected by the Insert</returns>
	public int Insert(CredentialFormatPDSA entity)
	{
	  int ret = 0;

	  Entity = entity;
	  DataObject.Entity = entity;
	  ret = DataObject.Insert();
	  if(ret >= 1)
		TrackChanges("Insert");

	  return ret;
	}
	#endregion

	#region Update Method
	/// <summary>
	/// Updates an entity in the GCS.CredentialFormat table
	/// </summary>
	/// <param name="entity">An CredentialFormatPDSA entity object</param>
	/// <returns>Number of rows affected by the Update</returns>
	public int Update(CredentialFormatPDSA entity)
	{
	  int ret = 0;

	  Entity = entity;
	  DataObject.Entity = entity;
	  ret = DataObject.Update();
	  if(ret >= 1)
		TrackChanges("Update");

	  return ret;
	}
	#endregion

	#region Delete Method
	/// <summary>
	/// Deletes an entity from the GCS.CredentialFormat table
	/// </summary>
	/// <param name="entity">An CredentialFormatPDSA entity object</param>
	/// <returns>Number of rows affected by the Delete</returns>
	public int Delete(CredentialFormatPDSA entity)
	{
	  int ret = 0;

	  Entity = entity;
	  DataObject.Entity = entity;
	  ret = DataObject.DeleteByPK(entity.CredentialFormatUid);
	  if(ret >= 1)
		TrackChanges("Delete");

	  return ret;
	}
	#endregion
  
	
	
	//#region GetCredentialFormatPDSAsByFK_CredentialFormatDisplayResourceKeyEntity Method
	//public CredentialFormatPDSACollection GetCredentialFormatPDSAsByFK_CredentialFormatDisplayResourceKeyEntity(gcsResourceStringPDSA entity)
	//{
	//  if (entity != null)
	//  {
	//	 try
	//	 {
	//	   if(DataObject.UseStoredProcs)
	//	   {
	//		 DataObject.SelectFilter = CredentialFormatPDSAData.SelectFilters.ByDisplayResourceKey;
	//	   }
	//	   else
	//	   {
	//	   }
		   
	//	   Entity.DisplayResourceKey = entity.ResourceId;
	//	 }
	//	 catch (Exception ex)
	//	 {
	//		// This is here for design time exceptions
	//		System.Diagnostics.Debug.WriteLine(ex.Message);
	//		var innerEx = ex.InnerException;
	//		while( innerEx != null)
	//		{
	//			System.Diagnostics.Debug.WriteLine(innerEx.Message);
	//			innerEx = innerEx.InnerException;
	//		}
	//	 }
			
	//	 return BuildCollection();
	//  }
	//  else
	//	return new CredentialFormatPDSACollection();
	//}
	//#endregion

	//#region GetCredentialFormatPDSAsByFK_CredentialFormatDisplayResourceKey Method
	//public CredentialFormatPDSACollection GetCredentialFormatPDSAsByFK_CredentialFormatDisplayResourceKey(Guid resourceId)
	//{
	//  try
	//  {
	//	if(DataObject.UseStoredProcs)
	//	{
	//	  DataObject.SelectFilter = CredentialFormatPDSAData.SelectFilters.ByDisplayResourceKey;
	//	}
	//	else
	//	{
	//	}
		
	//	Entity.DisplayResourceKey = resourceId;
	//  }
	//  catch (Exception ex)
	//  {
	//	// This is here for design time exceptions
	//	System.Diagnostics.Debug.WriteLine(ex.Message);
	//	var innerEx = ex.InnerException;
	//	while( innerEx != null)
	//	{
	//		System.Diagnostics.Debug.WriteLine(innerEx.Message);
	//		innerEx = innerEx.InnerException;
	//	}
	//  }
			
	//  return BuildCollection();
	//}
	//#endregion
	
  }
}

