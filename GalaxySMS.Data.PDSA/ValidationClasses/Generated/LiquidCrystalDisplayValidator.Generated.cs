using System;

using PDSA.Common;
using PDSA.Validation;

using GalaxySMS.EntityLayer;

namespace GalaxySMS.ValidationLayer
{
  /// <summary>
  /// Used to validate all properties of the LiquidCrystalDisplayPDSA class.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class LiquidCrystalDisplayPDSAValidator : PDSAValidatorBase
  {
    #region Public Entity Property
    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    private LiquidCrystalDisplayPDSA _Entity = null;

    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    public new LiquidCrystalDisplayPDSA Entity
    {
      get { return _Entity; }
      set
      {
        _Entity = value;
        base.Entity = value;
      }
    }
    #endregion
    
    #region Clone Entity Class
    /// <summary>
    /// Clones the current LiquidCrystalDisplayPDSA
    /// </summary>
    /// <returns>A cloned LiquidCrystalDisplayPDSA object</returns>
    public LiquidCrystalDisplayPDSA CloneEntity()
    {
      return CloneEntity(this.Entity);
    }
    
    /// <summary>
    /// Clones the passed in LiquidCrystalDisplayPDSA
    /// </summary>
    /// <param name="entityToClone">The LiquidCrystalDisplayPDSA entity to clone</param>
    /// <returns>A cloned LiquidCrystalDisplayPDSA object</returns>
    public LiquidCrystalDisplayPDSA CloneEntity(LiquidCrystalDisplayPDSA entityToClone)
    {
      LiquidCrystalDisplayPDSA newEntity = new LiquidCrystalDisplayPDSA();

      newEntity.LiquidCrystalDisplayUid = entityToClone.LiquidCrystalDisplayUid;
      newEntity.SiteUid = entityToClone.SiteUid;
      newEntity.EntityId = entityToClone.EntityId;
      newEntity.LcdName = entityToClone.LcdName;
      newEntity.Location = entityToClone.Location;
      newEntity.InsertName = entityToClone.InsertName;
      newEntity.InsertDate = entityToClone.InsertDate;
      newEntity.UpdateName = entityToClone.UpdateName;
      newEntity.UpdateDate = entityToClone.UpdateDate;
      newEntity.ConcurrencyValue = entityToClone.ConcurrencyValue;
      newEntity.RegionUid = entityToClone.RegionUid;
      newEntity.AccessPortalUid = entityToClone.AccessPortalUid;
      newEntity.GalaxyPanelUid = entityToClone.GalaxyPanelUid;
      newEntity.SiteName = entityToClone.SiteName;
      newEntity.RegionName = entityToClone.RegionName;

      return newEntity;
    }
    #endregion

    #region CreateProperties Method
    /// <summary>
    /// Creates the collection of PDSAProperty objects. These are used to control validation and null handling.
    /// </summary>
    /// <returns>A collection of PDSAProperty objects</returns>
    public override PDSAProperties CreateProperties()
    {
      PDSAProperties props = new PDSAProperties();
      
      props.Add(PDSAProperty.Create(LiquidCrystalDisplayPDSAValidator.ColumnNames.LiquidCrystalDisplayUid, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_LiquidCrystalDisplayUid_Header", "Liquid Crystal Display Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_LiquidCrystalDisplayUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.NewGuid(), @"", ""));
      props.Add(PDSAProperty.Create(LiquidCrystalDisplayPDSAValidator.ColumnNames.SiteUid, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_SiteUid_Header", "Site Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_SiteUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.NewGuid(), @"", ""));
      props.Add(PDSAProperty.Create(LiquidCrystalDisplayPDSAValidator.ColumnNames.EntityId, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_EntityId_Header", "Entity Id"), true, typeof(Guid), -1, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_EntityId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.NewGuid(), @"", ""));
      props.Add(PDSAProperty.Create(LiquidCrystalDisplayPDSAValidator.ColumnNames.LcdName, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_LcdName_Header", "Lcd Name"), true, typeof(string), 65, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_LcdName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(LiquidCrystalDisplayPDSAValidator.ColumnNames.Location, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_Location_Header", "Location"), false, typeof(string), 65, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_Location_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(LiquidCrystalDisplayPDSAValidator.ColumnNames.InsertName, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_InsertName_Header", "Insert Name"), true, typeof(string), 100, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_InsertName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(LiquidCrystalDisplayPDSAValidator.ColumnNames.InsertDate, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_InsertDate_Header", "Insert Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_InsertDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(LiquidCrystalDisplayPDSAValidator.ColumnNames.UpdateName, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_UpdateName_Header", "Update Name"), true, typeof(string), 100, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_UpdateName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(LiquidCrystalDisplayPDSAValidator.ColumnNames.UpdateDate, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_UpdateDate_Header", "Update Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_UpdateDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(LiquidCrystalDisplayPDSAValidator.ColumnNames.ConcurrencyValue, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_ConcurrencyValue_Header", "Concurrency Value"), true, typeof(short), 5, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_ConcurrencyValue_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(LiquidCrystalDisplayPDSAValidator.ColumnNames.RegionUid, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_RegionUid_Header", "Region Uid"), false, typeof(Guid), 2147483647, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_RegionUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.NewGuid(), @"", ""));
      props.Add(PDSAProperty.Create(LiquidCrystalDisplayPDSAValidator.ColumnNames.AccessPortalUid, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_AccessPortalUid_Header", "Access Portal Uid"), false, typeof(Guid), 2147483647, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_AccessPortalUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.NewGuid(), @"", ""));
      props.Add(PDSAProperty.Create(LiquidCrystalDisplayPDSAValidator.ColumnNames.GalaxyPanelUid, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_GalaxyPanelUid_Header", "Galaxy Panel Uid"), false, typeof(Guid), 2147483647, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_GalaxyPanelUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.NewGuid(), @"", ""));
      props.Add(PDSAProperty.Create(LiquidCrystalDisplayPDSAValidator.ColumnNames.SiteName, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_SiteName_Header", "Site Name"), false, typeof(string), 2147483647, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_SiteName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(LiquidCrystalDisplayPDSAValidator.ColumnNames.RegionName, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_RegionName_Header", "Region Name"), false, typeof(string), 2147483647, GetResourceMessage("GCS_LiquidCrystalDisplayPDSA_RegionName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      
      return props;
    }
    #endregion

    #region Initialize Entity
    /// <summary>
    /// This method is called from the CreateNewEntity Method. All the properties for the Entity are set to default values here by the code generator.
    /// </summary>
    protected override void InitializeEntity()
    {
      Entity.LiquidCrystalDisplayUid = Guid.NewGuid();
      Entity.SiteUid = Guid.NewGuid();
      Entity.EntityId = Guid.NewGuid();
      Entity.LcdName = string.Empty;
      Entity.Location = string.Empty;
      Entity.InsertName = string.Empty;
      Entity.InsertDate = DateTimeOffset.Now;
      Entity.UpdateName = string.Empty;
      Entity.UpdateDate = DateTimeOffset.Now;
      Entity.ConcurrencyValue = 0;
      Entity.RegionUid = Guid.NewGuid();
      Entity.AccessPortalUid = Guid.NewGuid();
      Entity.GalaxyPanelUid = Guid.NewGuid();
      Entity.SiteName = string.Empty;
      Entity.RegionName = string.Empty;

      Entity.ResetAllIsDirtyProperties();
    }
    #endregion
    
    #region InitProperties Method
    /// <summary>
    /// Called by the constructor to create the PDSAProperties collection of all properties that will be validated.
    /// </summary>
    protected override void InitProperties()
    {
      // Set the Properties collection to the collection of Entity Properties
      Properties = CreateProperties();
    }
    #endregion

    #region EntityDataToProperties Method
    /// <summary>
    /// Moves the Entity class data into the Properties collection.
    /// </summary>
    protected override void EntityDataToProperties()
    {
      if (Properties == null)
        InitProperties();
      
      if(!Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.LiquidCrystalDisplayUid).SetAsNull)
        Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.LiquidCrystalDisplayUid).Value = Entity.LiquidCrystalDisplayUid;
      if(!Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.SiteUid).SetAsNull)
        Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.SiteUid).Value = Entity.SiteUid;
      if(!Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.EntityId).SetAsNull)
        Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.EntityId).Value = Entity.EntityId;
      if(!Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.LcdName).SetAsNull)
        Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.LcdName).Value = Entity.LcdName;
      if(!Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.Location).SetAsNull)
        Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.Location).Value = Entity.Location;
      if(!Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.InsertName).SetAsNull)
        Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if(!Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.InsertDate).SetAsNull)
        Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if(!Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.UpdateName).SetAsNull)
        Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if(!Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.UpdateDate).SetAsNull)
        Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if(!Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull)
        Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
      if(!Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.RegionUid).SetAsNull)
        Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.RegionUid).Value = Entity.RegionUid;
      if(!Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.AccessPortalUid).SetAsNull)
        Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.AccessPortalUid).Value = Entity.AccessPortalUid;
      if(!Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.GalaxyPanelUid).SetAsNull)
        Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.GalaxyPanelUid).Value = Entity.GalaxyPanelUid;
      if(!Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.SiteName).SetAsNull)
        Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.SiteName).Value = Entity.SiteName;
      if(!Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.RegionName).SetAsNull)
        Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.RegionName).Value = Entity.RegionName;
    }

    /// <summary>
    /// Moves the Properties collection objects into the Entity properties
    /// </summary>
    protected override void PropertiesToEntityData()
    {
      if (Properties == null)
        InitProperties();

      if(Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.LiquidCrystalDisplayUid).IsNull == false)
        Entity.LiquidCrystalDisplayUid = Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.LiquidCrystalDisplayUid).GetAsGuid();
      if(Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.SiteUid).IsNull == false)
        Entity.SiteUid = Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.SiteUid).GetAsGuid();
      if(Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.EntityId).IsNull == false)
        Entity.EntityId = Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.EntityId).GetAsGuid();
      if(Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.LcdName).IsNull == false)
        Entity.LcdName = Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.LcdName).GetAsString();
      if(Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.Location).IsNull == false)
        Entity.Location = Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.Location).GetAsString();
      if(Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.InsertName).GetAsString();
      if(Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
      if(Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.UpdateName).GetAsString();
      if(Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.UpdateDate).GetAsDateTimeOffset();
      if(Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
      if(Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.RegionUid).IsNull == false)
        Entity.RegionUid = Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.RegionUid).GetAsGuid();
      if(Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.AccessPortalUid).IsNull == false)
        Entity.AccessPortalUid = Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.AccessPortalUid).GetAsGuid();
      if(Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.GalaxyPanelUid).IsNull == false)
        Entity.GalaxyPanelUid = Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.GalaxyPanelUid).GetAsGuid();
      if(Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.SiteName).IsNull == false)
        Entity.SiteName = Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.SiteName).GetAsString();
      if(Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.RegionName).IsNull == false)
        Entity.RegionName = Properties.GetByName(LiquidCrystalDisplayPDSAValidator.ColumnNames.RegionName).GetAsString();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the LiquidCrystalDisplayPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'LiquidCrystalDisplayUid'
    /// </summary>
    public static string LiquidCrystalDisplayUid = "LiquidCrystalDisplayUid";
    /// <summary>
    /// Returns 'SiteUid'
    /// </summary>
    public static string SiteUid = "SiteUid";
    /// <summary>
    /// Returns 'EntityId'
    /// </summary>
    public static string EntityId = "EntityId";
    /// <summary>
    /// Returns 'LcdName'
    /// </summary>
    public static string LcdName = "LcdName";
    /// <summary>
    /// Returns 'Location'
    /// </summary>
    public static string Location = "Location";
    /// <summary>
    /// Returns 'InsertName'
    /// </summary>
    public static string InsertName = "InsertName";
    /// <summary>
    /// Returns 'InsertDate'
    /// </summary>
    public static string InsertDate = "InsertDate";
    /// <summary>
    /// Returns 'UpdateName'
    /// </summary>
    public static string UpdateName = "UpdateName";
    /// <summary>
    /// Returns 'UpdateDate'
    /// </summary>
    public static string UpdateDate = "UpdateDate";
    /// <summary>
    /// Returns 'ConcurrencyValue'
    /// </summary>
    public static string ConcurrencyValue = "ConcurrencyValue";
    /// <summary>
    /// Returns 'RegionUid'
    /// </summary>
    public static string RegionUid = "RegionUid";
    /// <summary>
    /// Returns 'AccessPortalUid'
    /// </summary>
    public static string AccessPortalUid = "AccessPortalUid";
    /// <summary>
    /// Returns 'GalaxyPanelUid'
    /// </summary>
    public static string GalaxyPanelUid = "GalaxyPanelUid";
    /// <summary>
    /// Returns 'SiteName'
    /// </summary>
    public static string SiteName = "SiteName";
    /// <summary>
    /// Returns 'RegionName'
    /// </summary>
    public static string RegionName = "RegionName";
    }
    #endregion
  }
}
