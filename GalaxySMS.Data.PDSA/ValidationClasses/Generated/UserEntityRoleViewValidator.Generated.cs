using System;

using PDSA.Validation;

using GalaxySMS.EntityLayer;

namespace GalaxySMS.ValidationLayer
{
  /// <summary>
  /// Used to validate all properties of the UserEntityRoleViewPDSA class.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class UserEntityRoleViewPDSAValidator : PDSAValidatorBase
  {
    #region Public Entity Property
    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    private UserEntityRoleViewPDSA _Entity = null;

    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    public new UserEntityRoleViewPDSA Entity
    {
      get { return _Entity; }
      set
      {
        _Entity = value;
        base.Entity = value;
      }
    }
    #endregion
    
    #region Clone Entity Class
    /// <summary>
    /// Clones the current UserEntityRoleViewPDSA
    /// </summary>
    /// <returns>A cloned UserEntityRoleViewPDSA object</returns>
    public UserEntityRoleViewPDSA CloneEntity()
    {
      return CloneEntity(this.Entity);
    }
    
    /// <summary>
    /// Clones the passed in UserEntityRoleViewPDSA
    /// </summary>
    /// <param name="entityToClone">The UserEntityRoleViewPDSA entity to clone</param>
    /// <returns>A cloned UserEntityRoleViewPDSA object</returns>
    public UserEntityRoleViewPDSA CloneEntity(UserEntityRoleViewPDSA entityToClone)
    {
      UserEntityRoleViewPDSA newEntity = new UserEntityRoleViewPDSA();

      newEntity.UserName = entityToClone.UserName;
      newEntity.EntityName = entityToClone.EntityName;
      newEntity.RoleName = entityToClone.RoleName;
      newEntity.UserId = entityToClone.UserId;
      newEntity.RoleId = entityToClone.RoleId;
      newEntity.EntityId = entityToClone.EntityId;
      newEntity.ParentEntityId = entityToClone.ParentEntityId;
      newEntity.IsAdministrator = entityToClone.IsAdministrator;
      newEntity.InheritParentRoles = entityToClone.InheritParentRoles;
      newEntity.IsAdministratorRole = entityToClone.IsAdministratorRole;
      newEntity.IncludeAllClusters = entityToClone.IncludeAllClusters;
      newEntity.IncludeAllAccessPortals = entityToClone.IncludeAllAccessPortals;
      newEntity.IncludeAllInputOutputGroups = entityToClone.IncludeAllInputOutputGroups;
      newEntity.IncludeAllInputDevices = entityToClone.IncludeAllInputDevices;
      newEntity.IncludeAllOutputDevices = entityToClone.IncludeAllOutputDevices;
      newEntity.IncludeAllSites = entityToClone.IncludeAllSites;
      newEntity.IncludeAllRegions = entityToClone.IncludeAllRegions;

      return newEntity;
    }
    #endregion

    #region CreateProperties Method
    /// <summary>
    /// Creates the collection of PDSAProperty objects. These are used to control validation and null handling.
    /// </summary>
    /// <returns>A collection of PDSAProperty objects</returns>
    public override PDSAProperties CreateProperties()
    {
      PDSAProperties props = new PDSAProperties();
      
      props.Add(PDSAProperty.Create(UserEntityRoleViewPDSAValidator.ColumnNames.UserName, GetResourceMessage("GCS_UserEntityRoleViewPDSA_UserName_Header", "User Name"), false, typeof(string), 100, GetResourceMessage("GCS_UserEntityRoleViewPDSA_UserName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(UserEntityRoleViewPDSAValidator.ColumnNames.EntityName, GetResourceMessage("GCS_UserEntityRoleViewPDSA_EntityName_Header", "Entity Name"), false, typeof(string), 65, GetResourceMessage("GCS_UserEntityRoleViewPDSA_EntityName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(UserEntityRoleViewPDSAValidator.ColumnNames.RoleName, GetResourceMessage("GCS_UserEntityRoleViewPDSA_RoleName_Header", "Role Name"), false, typeof(string), 65, GetResourceMessage("GCS_UserEntityRoleViewPDSA_RoleName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(UserEntityRoleViewPDSAValidator.ColumnNames.UserId, GetResourceMessage("GCS_UserEntityRoleViewPDSA_UserId_Header", "User Id"), false, typeof(Guid), -1, GetResourceMessage("GCS_UserEntityRoleViewPDSA_UserId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(UserEntityRoleViewPDSAValidator.ColumnNames.RoleId, GetResourceMessage("GCS_UserEntityRoleViewPDSA_RoleId_Header", "Role Id"), false, typeof(Guid), -1, GetResourceMessage("GCS_UserEntityRoleViewPDSA_RoleId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(UserEntityRoleViewPDSAValidator.ColumnNames.EntityId, GetResourceMessage("GCS_UserEntityRoleViewPDSA_EntityId_Header", "Entity Id"), false, typeof(Guid), -1, GetResourceMessage("GCS_UserEntityRoleViewPDSA_EntityId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(UserEntityRoleViewPDSAValidator.ColumnNames.ParentEntityId, GetResourceMessage("GCS_UserEntityRoleViewPDSA_ParentEntityId_Header", "Parent Entity Id"), false, typeof(Guid), -1, GetResourceMessage("GCS_UserEntityRoleViewPDSA_ParentEntityId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministrator, GetResourceMessage("GCS_UserEntityRoleViewPDSA_IsAdministrator_Header", "Is Administrator"), false, typeof(bool), -1, GetResourceMessage("GCS_UserEntityRoleViewPDSA_IsAdministrator_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(UserEntityRoleViewPDSAValidator.ColumnNames.InheritParentRoles, GetResourceMessage("GCS_UserEntityRoleViewPDSA_InheritParentRoles_Header", "Inherit Parent Roles"), false, typeof(bool), -1, GetResourceMessage("GCS_UserEntityRoleViewPDSA_InheritParentRoles_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministratorRole, GetResourceMessage("GCS_UserEntityRoleViewPDSA_IsAdministratorRole_Header", "Is Administrator Role"), false, typeof(bool), -1, GetResourceMessage("GCS_UserEntityRoleViewPDSA_IsAdministratorRole_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllClusters, GetResourceMessage("GCS_UserEntityRoleViewPDSA_IncludeAllClusters_Header", "Include All Clusters"), false, typeof(bool), -1, GetResourceMessage("GCS_UserEntityRoleViewPDSA_IncludeAllClusters_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllAccessPortals, GetResourceMessage("GCS_UserEntityRoleViewPDSA_IncludeAllAccessPortals_Header", "Include All Access Portals"), false, typeof(bool), -1, GetResourceMessage("GCS_UserEntityRoleViewPDSA_IncludeAllAccessPortals_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputOutputGroups, GetResourceMessage("GCS_UserEntityRoleViewPDSA_IncludeAllInputOutputGroups_Header", "Include All Input Output Groups"), false, typeof(bool), -1, GetResourceMessage("GCS_UserEntityRoleViewPDSA_IncludeAllInputOutputGroups_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputDevices, GetResourceMessage("GCS_UserEntityRoleViewPDSA_IncludeAllInputDevices_Header", "Include All Input Devices"), false, typeof(bool), -1, GetResourceMessage("GCS_UserEntityRoleViewPDSA_IncludeAllInputDevices_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllOutputDevices, GetResourceMessage("GCS_UserEntityRoleViewPDSA_IncludeAllOutputDevices_Header", "Include All Output Devices"), false, typeof(bool), -1, GetResourceMessage("GCS_UserEntityRoleViewPDSA_IncludeAllOutputDevices_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllSites, GetResourceMessage("GCS_UserEntityRoleViewPDSA_IncludeAllSites_Header", "Include All Sites"), false, typeof(bool), -1, GetResourceMessage("GCS_UserEntityRoleViewPDSA_IncludeAllSites_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllRegions, GetResourceMessage("GCS_UserEntityRoleViewPDSA_IncludeAllRegions_Header", "Include All Regions"), false, typeof(bool), -1, GetResourceMessage("GCS_UserEntityRoleViewPDSA_IncludeAllRegions_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      
      return props;
    }
    #endregion

    #region Initialize Entity
    /// <summary>
    /// This method is called from the CreateNewEntity Method. All the properties for the Entity are set to default values here by the code generator.
    /// </summary>
    protected override void InitializeEntity()
    {
      Entity.UserName = string.Empty;
      Entity.EntityName = string.Empty;
      Entity.RoleName = string.Empty;
      Entity.UserId = Guid.Empty;
      Entity.RoleId = Guid.Empty;
      Entity.EntityId = Guid.Empty;
      Entity.ParentEntityId = Guid.Empty;
      Entity.IsAdministrator = false;
      Entity.InheritParentRoles = false;
      Entity.IsAdministratorRole = false;
      Entity.IncludeAllClusters = false;
      Entity.IncludeAllAccessPortals = false;
      Entity.IncludeAllInputOutputGroups = false;
      Entity.IncludeAllInputDevices = false;
      Entity.IncludeAllOutputDevices = false;
      Entity.IncludeAllSites = false;
      Entity.IncludeAllRegions = false;

      Entity.ResetAllIsDirtyProperties();
    }
    #endregion
    
    #region InitProperties Method
    /// <summary>
    /// Called by the constructor to create the PDSAProperties collection of all properties that will be validated.
    /// </summary>
    protected override void InitProperties()
    {
      // Set the Properties collection to the collection of Entity Properties
      Properties = CreateProperties();
    }
    #endregion

    #region EntityDataToProperties Method
    /// <summary>
    /// Moves the Entity class data into the Properties collection.
    /// </summary>
    protected override void EntityDataToProperties()
    {
      if (Properties == null)
        InitProperties();
      
      if(!Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.UserName).SetAsNull)
        Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.UserName).Value = Entity.UserName;
      if(!Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.EntityName).SetAsNull)
        Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.EntityName).Value = Entity.EntityName;
      if(!Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.RoleName).SetAsNull)
        Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.RoleName).Value = Entity.RoleName;
      if(!Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.UserId).SetAsNull)
        Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.UserId).Value = Entity.UserId;
      if(!Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.RoleId).SetAsNull)
        Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.RoleId).Value = Entity.RoleId;
      if(!Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.EntityId).SetAsNull)
        Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.EntityId).Value = Entity.EntityId;
      if(!Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.ParentEntityId).SetAsNull)
        Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.ParentEntityId).Value = Entity.ParentEntityId;
      if(!Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministrator).SetAsNull)
        Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministrator).Value = Entity.IsAdministrator;
      if(!Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.InheritParentRoles).SetAsNull)
        Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.InheritParentRoles).Value = Entity.InheritParentRoles;
      if(!Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministratorRole).SetAsNull)
        Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministratorRole).Value = Entity.IsAdministratorRole;
      if(!Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllClusters).SetAsNull)
        Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllClusters).Value = Entity.IncludeAllClusters;
      if(!Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllAccessPortals).SetAsNull)
        Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllAccessPortals).Value = Entity.IncludeAllAccessPortals;
      if(!Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputOutputGroups).SetAsNull)
        Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputOutputGroups).Value = Entity.IncludeAllInputOutputGroups;
      if(!Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputDevices).SetAsNull)
        Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputDevices).Value = Entity.IncludeAllInputDevices;
      if(!Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllOutputDevices).SetAsNull)
        Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllOutputDevices).Value = Entity.IncludeAllOutputDevices;
      if(!Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllSites).SetAsNull)
        Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllSites).Value = Entity.IncludeAllSites;
      if(!Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllRegions).SetAsNull)
        Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllRegions).Value = Entity.IncludeAllRegions;
    }

    /// <summary>
    /// Moves the Properties collection objects into the Entity properties
    /// </summary>
    protected override void PropertiesToEntityData()
    {
      if (Properties == null)
        InitProperties();

      if(Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.UserName).IsNull == false)
        Entity.UserName = Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.UserName).GetAsString();
      if(Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.EntityName).IsNull == false)
        Entity.EntityName = Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.EntityName).GetAsString();
      if(Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.RoleName).IsNull == false)
        Entity.RoleName = Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.RoleName).GetAsString();
      if(Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.UserId).IsNull == false)
        Entity.UserId = Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.UserId).GetAsGuid();
      if(Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.RoleId).IsNull == false)
        Entity.RoleId = Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.RoleId).GetAsGuid();
      if(Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.EntityId).IsNull == false)
        Entity.EntityId = Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.EntityId).GetAsGuid();
      if(Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.ParentEntityId).IsNull == false)
        Entity.ParentEntityId = Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.ParentEntityId).GetAsGuid();
      if(Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministrator).IsNull == false)
        Entity.IsAdministrator = Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministrator).GetAsBool();
      if(Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.InheritParentRoles).IsNull == false)
        Entity.InheritParentRoles = Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.InheritParentRoles).GetAsBool();
      if(Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministratorRole).IsNull == false)
        Entity.IsAdministratorRole = Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IsAdministratorRole).GetAsBool();
      if(Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllClusters).IsNull == false)
        Entity.IncludeAllClusters = Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllClusters).GetAsBool();
      if(Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllAccessPortals).IsNull == false)
        Entity.IncludeAllAccessPortals = Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllAccessPortals).GetAsBool();
      if(Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputOutputGroups).IsNull == false)
        Entity.IncludeAllInputOutputGroups = Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputOutputGroups).GetAsBool();
      if(Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputDevices).IsNull == false)
        Entity.IncludeAllInputDevices = Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllInputDevices).GetAsBool();
      if(Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllOutputDevices).IsNull == false)
        Entity.IncludeAllOutputDevices = Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllOutputDevices).GetAsBool();
      if(Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllSites).IsNull == false)
        Entity.IncludeAllSites = Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllSites).GetAsBool();
      if(Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllRegions).IsNull == false)
        Entity.IncludeAllRegions = Properties.GetByName(UserEntityRoleViewPDSAValidator.ColumnNames.IncludeAllRegions).GetAsBool();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the UserEntityRoleViewPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'UserName'
    /// </summary>
    public static string UserName = "UserName";
    /// <summary>
    /// Returns 'EntityName'
    /// </summary>
    public static string EntityName = "EntityName";
    /// <summary>
    /// Returns 'RoleName'
    /// </summary>
    public static string RoleName = "RoleName";
    /// <summary>
    /// Returns 'UserId'
    /// </summary>
    public static string UserId = "UserId";
    /// <summary>
    /// Returns 'RoleId'
    /// </summary>
    public static string RoleId = "RoleId";
    /// <summary>
    /// Returns 'EntityId'
    /// </summary>
    public static string EntityId = "EntityId";
    /// <summary>
    /// Returns 'ParentEntityId'
    /// </summary>
    public static string ParentEntityId = "ParentEntityId";
    /// <summary>
    /// Returns 'IsAdministrator'
    /// </summary>
    public static string IsAdministrator = "IsAdministrator";
    /// <summary>
    /// Returns 'InheritParentRoles'
    /// </summary>
    public static string InheritParentRoles = "InheritParentRoles";
    /// <summary>
    /// Returns 'IsAdministratorRole'
    /// </summary>
    public static string IsAdministratorRole = "IsAdministratorRole";
    /// <summary>
    /// Returns 'IncludeAllClusters'
    /// </summary>
    public static string IncludeAllClusters = "IncludeAllClusters";
    /// <summary>
    /// Returns 'IncludeAllAccessPortals'
    /// </summary>
    public static string IncludeAllAccessPortals = "IncludeAllAccessPortals";
    /// <summary>
    /// Returns 'IncludeAllInputOutputGroups'
    /// </summary>
    public static string IncludeAllInputOutputGroups = "IncludeAllInputOutputGroups";
    /// <summary>
    /// Returns 'IncludeAllInputDevices'
    /// </summary>
    public static string IncludeAllInputDevices = "IncludeAllInputDevices";
    /// <summary>
    /// Returns 'IncludeAllOutputDevices'
    /// </summary>
    public static string IncludeAllOutputDevices = "IncludeAllOutputDevices";
    /// <summary>
    /// Returns 'IncludeAllSites'
    /// </summary>
    public static string IncludeAllSites = "IncludeAllSites";
    /// <summary>
    /// Returns 'IncludeAllRegions'
    /// </summary>
    public static string IncludeAllRegions = "IncludeAllRegions";
    }
    #endregion
  }
}
