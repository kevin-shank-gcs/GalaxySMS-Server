using System;

using PDSA.Common;
using PDSA.Validation;

using GalaxySMS.EntityLayer;

namespace GalaxySMS.ValidationLayer
{
  /// <summary>
  /// Used to validate all properties of the MercScpPDSA class.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class MercScpPDSAValidator : PDSAValidatorBase
  {
    #region Public Entity Property
    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    private MercScpPDSA _Entity = null;

    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    public new MercScpPDSA Entity
    {
      get { return _Entity; }
      set
      {
        _Entity = value;
        base.Entity = value;
      }
    }
    #endregion
    
    #region Clone Entity Class
    /// <summary>
    /// Clones the current MercScpPDSA
    /// </summary>
    /// <returns>A cloned MercScpPDSA object</returns>
    public MercScpPDSA CloneEntity()
    {
      return CloneEntity(this.Entity);
    }
    
    /// <summary>
    /// Clones the passed in MercScpPDSA
    /// </summary>
    /// <param name="entityToClone">The MercScpPDSA entity to clone</param>
    /// <returns>A cloned MercScpPDSA object</returns>
    public MercScpPDSA CloneEntity(MercScpPDSA entityToClone)
    {
      MercScpPDSA newEntity = new MercScpPDSA();

      newEntity.MercScpUid = entityToClone.MercScpUid;
      newEntity.MercScpTypeUid = entityToClone.MercScpTypeUid;
      newEntity.MercScpGroupUid = entityToClone.MercScpGroupUid;
      newEntity.ScpName = entityToClone.ScpName;
      newEntity.Location = entityToClone.Location;
      newEntity.Description = entityToClone.Description;
      newEntity.MacAddress = entityToClone.MacAddress;
      newEntity.Serialnumber = entityToClone.Serialnumber;
      newEntity.ConnectionType = entityToClone.ConnectionType;
      newEntity.IpAddress = entityToClone.IpAddress;
      newEntity.IpPort = entityToClone.IpPort;
      newEntity.AesPassword = entityToClone.AesPassword;
      newEntity.ScpReplyTimeout = entityToClone.ScpReplyTimeout;
      newEntity.TcpConnectRetryInterval = entityToClone.TcpConnectRetryInterval;
      newEntity.RetryCountBeforeOffline = entityToClone.RetryCountBeforeOffline;
      newEntity.OfflineTime = entityToClone.OfflineTime;
      newEntity.PollDelay = entityToClone.PollDelay;
      newEntity.TimeZoneId = entityToClone.TimeZoneId;
      newEntity.UseDaylightSavingsTime = entityToClone.UseDaylightSavingsTime;
      newEntity.TransactionCount = entityToClone.TransactionCount;
      newEntity.TransactionUnreportedLimit = entityToClone.TransactionUnreportedLimit;
      newEntity.DualPortEnabled = entityToClone.DualPortEnabled;
      newEntity.ConnectionTypeAlt = entityToClone.ConnectionTypeAlt;
      newEntity.RetryCountBeforeOfflineAlt = entityToClone.RetryCountBeforeOfflineAlt;
      newEntity.PollDelayAlt = entityToClone.PollDelayAlt;
      newEntity.IpAddressAlt = entityToClone.IpAddressAlt;
      newEntity.IpPortAlt = entityToClone.IpPortAlt;
      newEntity.AllowConnection = entityToClone.AllowConnection;
      newEntity.InsertName = entityToClone.InsertName;
      newEntity.InsertDate = entityToClone.InsertDate;
      newEntity.UpdateName = entityToClone.UpdateName;
      newEntity.UpdateDate = entityToClone.UpdateDate;
      newEntity.ConcurrencyValue = entityToClone.ConcurrencyValue;
      newEntity.EntityId = entityToClone.EntityId;
      newEntity.PageNumber = entityToClone.PageNumber;
      newEntity.PageSize = entityToClone.PageSize;
      newEntity.SortColumn = entityToClone.SortColumn;
      newEntity.DescendingOrder = entityToClone.DescendingOrder;
      newEntity.SiteUid = entityToClone.SiteUid;
      newEntity.TotalRowCount = entityToClone.TotalRowCount;
      newEntity.Online = entityToClone.Online;
      newEntity.LastConnected = entityToClone.LastConnected;
      newEntity.LastDisconnected = entityToClone.LastDisconnected;

      return newEntity;
    }
    #endregion

    #region CreateProperties Method
    /// <summary>
    /// Creates the collection of PDSAProperty objects. These are used to control validation and null handling.
    /// </summary>
    /// <returns>A collection of PDSAProperty objects</returns>
    public override PDSAProperties CreateProperties()
    {
      PDSAProperties props = new PDSAProperties();
      
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.MercScpUid, GetResourceMessage("GCS_MercScpPDSA_MercScpUid_Header", "Merc Scp Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_MercScpPDSA_MercScpUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.MercScpTypeUid, GetResourceMessage("GCS_MercScpPDSA_MercScpTypeUid_Header", "Merc Scp Type Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_MercScpPDSA_MercScpTypeUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.MercScpGroupUid, GetResourceMessage("GCS_MercScpPDSA_MercScpGroupUid_Header", "Merc Scp Group Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_MercScpPDSA_MercScpGroupUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.ScpName, GetResourceMessage("GCS_MercScpPDSA_ScpName_Header", "Scp Name"), true, typeof(string), 65, GetResourceMessage("GCS_MercScpPDSA_ScpName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.Location, GetResourceMessage("GCS_MercScpPDSA_Location_Header", "Location"), false, typeof(string), 65, GetResourceMessage("GCS_MercScpPDSA_Location_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.Description, GetResourceMessage("GCS_MercScpPDSA_Description_Header", "Description"), false, typeof(string), 1000, GetResourceMessage("GCS_MercScpPDSA_Description_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.MacAddress, GetResourceMessage("GCS_MercScpPDSA_MacAddress_Header", "Mac Address"), true, typeof(string), 50, GetResourceMessage("GCS_MercScpPDSA_MacAddress_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.Serialnumber, GetResourceMessage("GCS_MercScpPDSA_SerialNumber_Header", "Serial Number"), true, typeof(string), 19, GetResourceMessage("GCS_MercScpPDSA_SerialNumber_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt64("-9223372036854775808"), Convert.ToInt64("9223372036854775807"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.ConnectionType, GetResourceMessage("GCS_MercScpPDSA_ConnectionType_Header", "Connection Type"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpPDSA_ConnectionType_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.IpAddress, GetResourceMessage("GCS_MercScpPDSA_IpAddress_Header", "Ip Address"), false, typeof(string), 50, GetResourceMessage("GCS_MercScpPDSA_IpAddress_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.IpPort, GetResourceMessage("GCS_MercScpPDSA_IpPort_Header", "Ip Port"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpPDSA_IpPort_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.AesPassword, GetResourceMessage("GCS_MercScpPDSA_AesPassword_Header", "Aes Password"), false, typeof(string), 50, GetResourceMessage("GCS_MercScpPDSA_AesPassword_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.ScpReplyTimeout, GetResourceMessage("GCS_MercScpPDSA_ScpReplyTimeout_Header", "Scp Reply Timeout"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpPDSA_ScpReplyTimeout_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.TcpConnectRetryInterval, GetResourceMessage("GCS_MercScpPDSA_TcpConnectRetryInterval_Header", "Tcp Connect Retry Interval"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpPDSA_TcpConnectRetryInterval_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.RetryCountBeforeOffline, GetResourceMessage("GCS_MercScpPDSA_RetryCountBeforeOffline_Header", "Retry Count Before Offline"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpPDSA_RetryCountBeforeOffline_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.OfflineTime, GetResourceMessage("GCS_MercScpPDSA_OfflineTime_Header", "Offline Time"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpPDSA_OfflineTime_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.PollDelay, GetResourceMessage("GCS_MercScpPDSA_PollDelay_Header", "Poll Delay"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpPDSA_PollDelay_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.TimeZoneId, GetResourceMessage("GCS_MercScpPDSA_TimeZoneId_Header", "Time Zone Id"), true, typeof(string), 65, GetResourceMessage("GCS_MercScpPDSA_TimeZoneId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.UseDaylightSavingsTime, GetResourceMessage("GCS_MercScpPDSA_UseDaylightSavingsTime_Header", "Use Daylight Savings Time"), true, typeof(bool), -1, GetResourceMessage("GCS_MercScpPDSA_UseDaylightSavingsTime_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.TransactionCount, GetResourceMessage("GCS_MercScpPDSA_TransactionCount_Header", "Transaction Count"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpPDSA_TransactionCount_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.TransactionUnreportedLimit, GetResourceMessage("GCS_MercScpPDSA_TransactionUnreportedLimit_Header", "Transaction Unreported Limit"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpPDSA_TransactionUnreportedLimit_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.DualPortEnabled, GetResourceMessage("GCS_MercScpPDSA_DualPortEnabled_Header", "Dual Port Enabled"), true, typeof(bool), -1, GetResourceMessage("GCS_MercScpPDSA_DualPortEnabled_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.ConnectionTypeAlt, GetResourceMessage("GCS_MercScpPDSA_ConnectionTypeAlt_Header", "Connection Type Alt"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpPDSA_ConnectionTypeAlt_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.RetryCountBeforeOfflineAlt, GetResourceMessage("GCS_MercScpPDSA_RetryCountBeforeOfflineAlt_Header", "Retry Count Before Offline Alt"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpPDSA_RetryCountBeforeOfflineAlt_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.PollDelayAlt, GetResourceMessage("GCS_MercScpPDSA_PollDelayAlt_Header", "Poll Delay Alt"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpPDSA_PollDelayAlt_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.IpAddressAlt, GetResourceMessage("GCS_MercScpPDSA_IpAddressAlt_Header", "Ip Address Alt"), false, typeof(string), 50, GetResourceMessage("GCS_MercScpPDSA_IpAddressAlt_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.IpPortAlt, GetResourceMessage("GCS_MercScpPDSA_IpPortAlt_Header", "Ip Port Alt"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpPDSA_IpPortAlt_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.AllowConnection, GetResourceMessage("GCS_MercScpPDSA_AllowConnection_Header", "Allow Connection"), true, typeof(bool), -1, GetResourceMessage("GCS_MercScpPDSA_AllowConnection_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.InsertName, GetResourceMessage("GCS_MercScpPDSA_InsertName_Header", "Insert Name"), true, typeof(string), 50, GetResourceMessage("GCS_MercScpPDSA_InsertName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.InsertDate, GetResourceMessage("GCS_MercScpPDSA_InsertDate_Header", "Insert Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_MercScpPDSA_InsertDate_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.UpdateName, GetResourceMessage("GCS_MercScpPDSA_UpdateName_Header", "Update Name"), true, typeof(string), 50, GetResourceMessage("GCS_MercScpPDSA_UpdateName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.UpdateDate, GetResourceMessage("GCS_MercScpPDSA_UpdateDate_Header", "Update Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_MercScpPDSA_UpdateDate_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.ConcurrencyValue, GetResourceMessage("GCS_MercScpPDSA_ConcurrencyValue_Header", "Concurrency Value"), true, typeof(short), 5, GetResourceMessage("GCS_MercScpPDSA_ConcurrencyValue_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.EntityId, GetResourceMessage("GCS_MercScpPDSA_EntityId_Header", "Entity Id"), false, typeof(Guid), -1, GetResourceMessage("GCS_MercScpPDSA_EntityId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.PageNumber, GetResourceMessage("GCS_MercScpPDSA_PageNumber_Header", "Page Number"), false, typeof(int), 2147483647, GetResourceMessage("GCS_MercScpPDSA_PageNumber_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("0"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.PageSize, GetResourceMessage("GCS_MercScpPDSA_PageSize_Header", "Page Size"), false, typeof(int), 2147483647, GetResourceMessage("GCS_MercScpPDSA_PageSize_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("0"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.SortColumn, GetResourceMessage("GCS_MercScpPDSA_SortColumn_Header", "Sort Column"), false, typeof(string), 2147483647, GetResourceMessage("GCS_MercScpPDSA_SortColumn_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.DescendingOrder, GetResourceMessage("GCS_MercScpPDSA_DescendingOrder_Header", "Descending Order"), false, typeof(bool), 2147483647, GetResourceMessage("GCS_MercScpPDSA_DescendingOrder_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.SiteUid, GetResourceMessage("GCS_MercScpPDSA_SiteUid_Header", "Site Uid"), false, typeof(Guid), -1, GetResourceMessage("GCS_MercScpPDSA_SiteUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.TotalRowCount, GetResourceMessage("GCS_MercScpPDSA_TotalRowCount_Header", "Total Row Count"), false, typeof(int), 2147483647, GetResourceMessage("GCS_MercScpPDSA_TotalRowCount_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("0"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.Online, GetResourceMessage("GCS_MercScpPDSA_Online_Header", "Online"), false, typeof(bool), 2147483647, GetResourceMessage("GCS_MercScpPDSA_Online_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.LastConnected, GetResourceMessage("GCS_MercScpPDSA_LastConnected_Header", "Last Connected"), false, typeof(DateTimeOffset), 2147483647, GetResourceMessage("GCS_MercScpPDSA_LastConnected_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(MercScpPDSAValidator.ColumnNames.LastDisconnected, GetResourceMessage("GCS_MercScpPDSA_LastDisconnected_Header", "Last Disconnected"), false, typeof(DateTimeOffset), 2147483647, GetResourceMessage("GCS_MercScpPDSA_LastDisconnected_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      
      return props;
    }
    #endregion

    #region Initialize Entity
    /// <summary>
    /// This method is called from the CreateNewEntity Method. All the properties for the Entity are set to default values here by the code generator.
    /// </summary>
    protected override void InitializeEntity()
    {
      Entity.MercScpUid = Guid.Empty;
      Entity.MercScpTypeUid = Guid.Empty;
      Entity.MercScpGroupUid = Guid.Empty;
      Entity.ScpName = string.Empty;
      Entity.Location = string.Empty;
      Entity.Description = string.Empty;
      Entity.MacAddress = string.Empty;
      Entity.Serialnumber = 0;
      Entity.ConnectionType = 0;
      Entity.IpAddress = string.Empty;
      Entity.IpPort = 0;
      Entity.AesPassword = string.Empty;
      Entity.ScpReplyTimeout = 0;
      Entity.TcpConnectRetryInterval = 0;
      Entity.RetryCountBeforeOffline = 0;
      Entity.OfflineTime = 0;
      Entity.PollDelay = 0;
      Entity.TimeZoneId = string.Empty;
      Entity.UseDaylightSavingsTime = false;
      Entity.TransactionCount = 0;
      Entity.TransactionUnreportedLimit = 0;
      Entity.DualPortEnabled = false;
      Entity.ConnectionTypeAlt = 0;
      Entity.RetryCountBeforeOfflineAlt = 0;
      Entity.PollDelayAlt = 0;
      Entity.IpAddressAlt = string.Empty;
      Entity.IpPortAlt = 0;
      Entity.AllowConnection = false;
      Entity.InsertName = string.Empty;
      Entity.InsertDate = DateTimeOffset.Now;
      Entity.UpdateName = string.Empty;
      Entity.UpdateDate = DateTimeOffset.Now;
      Entity.ConcurrencyValue = 0;
      Entity.EntityId = Guid.Empty;
      Entity.PageNumber = 0;
      Entity.PageSize = 0;
      Entity.SortColumn = string.Empty;
      Entity.DescendingOrder = false;
      Entity.SiteUid = Guid.Empty;
      Entity.TotalRowCount = 0;
      Entity.Online = null;
      Entity.LastConnected = null;
      Entity.LastDisconnected = null;

      Entity.ResetAllIsDirtyProperties();
    }
    #endregion
    
    #region InitProperties Method
    /// <summary>
    /// Called by the constructor to create the PDSAProperties collection of all properties that will be validated.
    /// </summary>
    protected override void InitProperties()
    {
      // Set the Properties collection to the collection of Entity Properties
      Properties = CreateProperties();
    }
    #endregion

    #region EntityDataToProperties Method
    /// <summary>
    /// Moves the Entity class data into the Properties collection.
    /// </summary>
    protected override void EntityDataToProperties()
    {
      if (Properties == null)
        InitProperties();
      
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.MercScpUid).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.MercScpUid).Value = Entity.MercScpUid;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.MercScpTypeUid).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.MercScpTypeUid).Value = Entity.MercScpTypeUid;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.MercScpGroupUid).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.MercScpGroupUid).Value = Entity.MercScpGroupUid;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.ScpName).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.ScpName).Value = Entity.ScpName;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.Location).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.Location).Value = Entity.Location;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.Description).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.Description).Value = Entity.Description;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.MacAddress).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.MacAddress).Value = Entity.MacAddress;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.Serialnumber).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.Serialnumber).Value = Entity.Serialnumber;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.ConnectionType).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.ConnectionType).Value = Entity.ConnectionType;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.IpAddress).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.IpAddress).Value = Entity.IpAddress;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.IpPort).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.IpPort).Value = Entity.IpPort;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.AesPassword).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.AesPassword).Value = Entity.AesPassword;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.ScpReplyTimeout).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.ScpReplyTimeout).Value = Entity.ScpReplyTimeout;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.TcpConnectRetryInterval).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.TcpConnectRetryInterval).Value = Entity.TcpConnectRetryInterval;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.RetryCountBeforeOffline).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.RetryCountBeforeOffline).Value = Entity.RetryCountBeforeOffline;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.OfflineTime).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.OfflineTime).Value = Entity.OfflineTime;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.PollDelay).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.PollDelay).Value = Entity.PollDelay;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.TimeZoneId).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.TimeZoneId).Value = Entity.TimeZoneId;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.UseDaylightSavingsTime).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.UseDaylightSavingsTime).Value = Entity.UseDaylightSavingsTime;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.TransactionCount).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.TransactionCount).Value = Entity.TransactionCount;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.TransactionUnreportedLimit).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.TransactionUnreportedLimit).Value = Entity.TransactionUnreportedLimit;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.DualPortEnabled).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.DualPortEnabled).Value = Entity.DualPortEnabled;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.ConnectionTypeAlt).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.ConnectionTypeAlt).Value = Entity.ConnectionTypeAlt;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.RetryCountBeforeOfflineAlt).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.RetryCountBeforeOfflineAlt).Value = Entity.RetryCountBeforeOfflineAlt;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.PollDelayAlt).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.PollDelayAlt).Value = Entity.PollDelayAlt;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.IpAddressAlt).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.IpAddressAlt).Value = Entity.IpAddressAlt;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.IpPortAlt).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.IpPortAlt).Value = Entity.IpPortAlt;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.AllowConnection).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.AllowConnection).Value = Entity.AllowConnection;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.InsertName).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.InsertDate).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.UpdateName).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.UpdateDate).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.EntityId).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.EntityId).Value = Entity.EntityId;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.PageNumber).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.PageNumber).Value = Entity.PageNumber;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.PageSize).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.PageSize).Value = Entity.PageSize;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.SortColumn).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.SortColumn).Value = Entity.SortColumn;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.DescendingOrder).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.DescendingOrder).Value = Entity.DescendingOrder;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.SiteUid).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.SiteUid).Value = Entity.SiteUid;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.TotalRowCount).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.TotalRowCount).Value = Entity.TotalRowCount;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.Online).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.Online).Value = Entity.Online;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.LastConnected).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.LastConnected).Value = Entity.LastConnected;
      if(!Properties.GetByName(MercScpPDSAValidator.ColumnNames.LastDisconnected).SetAsNull)
        Properties.GetByName(MercScpPDSAValidator.ColumnNames.LastDisconnected).Value = Entity.LastDisconnected;
    }

    /// <summary>
    /// Moves the Properties collection objects into the Entity properties
    /// </summary>
    protected override void PropertiesToEntityData()
    {
      if (Properties == null)
        InitProperties();

      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.MercScpUid).IsNull == false)
        Entity.MercScpUid = Properties.GetByName(MercScpPDSAValidator.ColumnNames.MercScpUid).GetAsGuid();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.MercScpTypeUid).IsNull == false)
        Entity.MercScpTypeUid = Properties.GetByName(MercScpPDSAValidator.ColumnNames.MercScpTypeUid).GetAsGuid();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.MercScpGroupUid).IsNull == false)
        Entity.MercScpGroupUid = Properties.GetByName(MercScpPDSAValidator.ColumnNames.MercScpGroupUid).GetAsGuid();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.ScpName).IsNull == false)
        Entity.ScpName = Properties.GetByName(MercScpPDSAValidator.ColumnNames.ScpName).GetAsString();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.Location).IsNull == false)
        Entity.Location = Properties.GetByName(MercScpPDSAValidator.ColumnNames.Location).GetAsString();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.Description).IsNull == false)
        Entity.Description = Properties.GetByName(MercScpPDSAValidator.ColumnNames.Description).GetAsString();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.MacAddress).IsNull == false)
        Entity.MacAddress = Properties.GetByName(MercScpPDSAValidator.ColumnNames.MacAddress).GetAsString();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.Serialnumber).IsNull == false)
        Entity.Serialnumber = (ulong)Properties.GetByName(MercScpPDSAValidator.ColumnNames.Serialnumber).GetAsLong();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.ConnectionType).IsNull == false)
        Entity.ConnectionType = Properties.GetByName(MercScpPDSAValidator.ColumnNames.ConnectionType).GetAsInteger();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.IpAddress).IsNull == false)
        Entity.IpAddress = Properties.GetByName(MercScpPDSAValidator.ColumnNames.IpAddress).GetAsString();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.IpPort).IsNull == false)
        Entity.IpPort = Properties.GetByName(MercScpPDSAValidator.ColumnNames.IpPort).GetAsInteger();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.AesPassword).IsNull == false)
        Entity.AesPassword = Properties.GetByName(MercScpPDSAValidator.ColumnNames.AesPassword).GetAsString();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.ScpReplyTimeout).IsNull == false)
        Entity.ScpReplyTimeout = Properties.GetByName(MercScpPDSAValidator.ColumnNames.ScpReplyTimeout).GetAsInteger();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.TcpConnectRetryInterval).IsNull == false)
        Entity.TcpConnectRetryInterval = Properties.GetByName(MercScpPDSAValidator.ColumnNames.TcpConnectRetryInterval).GetAsInteger();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.RetryCountBeforeOffline).IsNull == false)
        Entity.RetryCountBeforeOffline = Properties.GetByName(MercScpPDSAValidator.ColumnNames.RetryCountBeforeOffline).GetAsInteger();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.OfflineTime).IsNull == false)
        Entity.OfflineTime = Properties.GetByName(MercScpPDSAValidator.ColumnNames.OfflineTime).GetAsInteger();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.PollDelay).IsNull == false)
        Entity.PollDelay = Properties.GetByName(MercScpPDSAValidator.ColumnNames.PollDelay).GetAsInteger();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.TimeZoneId).IsNull == false)
        Entity.TimeZoneId = Properties.GetByName(MercScpPDSAValidator.ColumnNames.TimeZoneId).GetAsString();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.UseDaylightSavingsTime).IsNull == false)
        Entity.UseDaylightSavingsTime = Properties.GetByName(MercScpPDSAValidator.ColumnNames.UseDaylightSavingsTime).GetAsBool();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.TransactionCount).IsNull == false)
        Entity.TransactionCount = Properties.GetByName(MercScpPDSAValidator.ColumnNames.TransactionCount).GetAsInteger();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.TransactionUnreportedLimit).IsNull == false)
        Entity.TransactionUnreportedLimit = Properties.GetByName(MercScpPDSAValidator.ColumnNames.TransactionUnreportedLimit).GetAsInteger();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.DualPortEnabled).IsNull == false)
        Entity.DualPortEnabled = Properties.GetByName(MercScpPDSAValidator.ColumnNames.DualPortEnabled).GetAsBool();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.ConnectionTypeAlt).IsNull == false)
        Entity.ConnectionTypeAlt = Properties.GetByName(MercScpPDSAValidator.ColumnNames.ConnectionTypeAlt).GetAsInteger();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.RetryCountBeforeOfflineAlt).IsNull == false)
        Entity.RetryCountBeforeOfflineAlt = Properties.GetByName(MercScpPDSAValidator.ColumnNames.RetryCountBeforeOfflineAlt).GetAsInteger();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.PollDelayAlt).IsNull == false)
        Entity.PollDelayAlt = Properties.GetByName(MercScpPDSAValidator.ColumnNames.PollDelayAlt).GetAsInteger();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.IpAddressAlt).IsNull == false)
        Entity.IpAddressAlt = Properties.GetByName(MercScpPDSAValidator.ColumnNames.IpAddressAlt).GetAsString();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.IpPortAlt).IsNull == false)
        Entity.IpPortAlt = Properties.GetByName(MercScpPDSAValidator.ColumnNames.IpPortAlt).GetAsInteger();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.AllowConnection).IsNull == false)
        Entity.AllowConnection = Properties.GetByName(MercScpPDSAValidator.ColumnNames.AllowConnection).GetAsBool();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = Properties.GetByName(MercScpPDSAValidator.ColumnNames.InsertName).GetAsString();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = Properties.GetByName(MercScpPDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = Properties.GetByName(MercScpPDSAValidator.ColumnNames.UpdateName).GetAsString();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = Properties.GetByName(MercScpPDSAValidator.ColumnNames.UpdateDate).GetAsDateTimeOffset();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = Properties.GetByName(MercScpPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.EntityId).IsNull == false)
        Entity.EntityId = Properties.GetByName(MercScpPDSAValidator.ColumnNames.EntityId).GetAsGuid();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.PageNumber).IsNull == false)
        Entity.PageNumber = Properties.GetByName(MercScpPDSAValidator.ColumnNames.PageNumber).GetAsInteger();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.PageSize).IsNull == false)
        Entity.PageSize = Properties.GetByName(MercScpPDSAValidator.ColumnNames.PageSize).GetAsInteger();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.SortColumn).IsNull == false)
        Entity.SortColumn = Properties.GetByName(MercScpPDSAValidator.ColumnNames.SortColumn).GetAsString();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.DescendingOrder).IsNull == false)
        Entity.DescendingOrder = Properties.GetByName(MercScpPDSAValidator.ColumnNames.DescendingOrder).GetAsBool();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.SiteUid).IsNull == false)
        Entity.SiteUid = Properties.GetByName(MercScpPDSAValidator.ColumnNames.SiteUid).GetAsGuid();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.TotalRowCount).IsNull == false)
        Entity.TotalRowCount = Properties.GetByName(MercScpPDSAValidator.ColumnNames.TotalRowCount).GetAsInteger();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.Online).IsNull == false)
        Entity.Online = Properties.GetByName(MercScpPDSAValidator.ColumnNames.Online).GetAsBool();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.LastConnected).IsNull == false)
        Entity.LastConnected = Properties.GetByName(MercScpPDSAValidator.ColumnNames.LastConnected).GetAsDateTimeOffset();
      if(Properties.GetByName(MercScpPDSAValidator.ColumnNames.LastDisconnected).IsNull == false)
        Entity.LastDisconnected = Properties.GetByName(MercScpPDSAValidator.ColumnNames.LastDisconnected).GetAsDateTimeOffset();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the MercScpPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'MercScpUid'
    /// </summary>
    public static string MercScpUid = "MercScpUid";
    /// <summary>
    /// Returns 'MercScpTypeUid'
    /// </summary>
    public static string MercScpTypeUid = "MercScpTypeUid";
    /// <summary>
    /// Returns 'MercScpGroupUid'
    /// </summary>
    public static string MercScpGroupUid = "MercScpGroupUid";
    /// <summary>
    /// Returns 'ScpName'
    /// </summary>
    public static string ScpName = "ScpName";
    /// <summary>
    /// Returns 'Location'
    /// </summary>
    public static string Location = "Location";
    /// <summary>
    /// Returns 'Description'
    /// </summary>
    public static string Description = "Description";
    /// <summary>
    /// Returns 'MacAddress'
    /// </summary>
    public static string MacAddress = "MacAddress";
    /// <summary>
    /// Returns 'SerialNumber'
    /// </summary>
    public static string Serialnumber = "Serialnumber";
    /// <summary>
    /// Returns 'ConnectionType'
    /// </summary>
    public static string ConnectionType = "ConnectionType";
    /// <summary>
    /// Returns 'IpAddress'
    /// </summary>
    public static string IpAddress = "IpAddress";
    /// <summary>
    /// Returns 'IpPort'
    /// </summary>
    public static string IpPort = "IpPort";
    /// <summary>
    /// Returns 'AesPassword'
    /// </summary>
    public static string AesPassword = "AesPassword";
    /// <summary>
    /// Returns 'ScpReplyTimeout'
    /// </summary>
    public static string ScpReplyTimeout = "ScpReplyTimeout";
    /// <summary>
    /// Returns 'TcpConnectRetryInterval'
    /// </summary>
    public static string TcpConnectRetryInterval = "TcpConnectRetryInterval";
    /// <summary>
    /// Returns 'RetryCountBeforeOffline'
    /// </summary>
    public static string RetryCountBeforeOffline = "RetryCountBeforeOffline";
    /// <summary>
    /// Returns 'OfflineTime'
    /// </summary>
    public static string OfflineTime = "OfflineTime";
    /// <summary>
    /// Returns 'PollDelay'
    /// </summary>
    public static string PollDelay = "PollDelay";
    /// <summary>
    /// Returns 'TimeZoneId'
    /// </summary>
    public static string TimeZoneId = "TimeZoneId";
    /// <summary>
    /// Returns 'UseDaylightSavingsTime'
    /// </summary>
    public static string UseDaylightSavingsTime = "UseDaylightSavingsTime";
    /// <summary>
    /// Returns 'TransactionCount'
    /// </summary>
    public static string TransactionCount = "TransactionCount";
    /// <summary>
    /// Returns 'TransactionUnreportedLimit'
    /// </summary>
    public static string TransactionUnreportedLimit = "TransactionUnreportedLimit";
    /// <summary>
    /// Returns 'DualPortEnabled'
    /// </summary>
    public static string DualPortEnabled = "DualPortEnabled";
    /// <summary>
    /// Returns 'ConnectionTypeAlt'
    /// </summary>
    public static string ConnectionTypeAlt = "ConnectionTypeAlt";
    /// <summary>
    /// Returns 'RetryCountBeforeOfflineAlt'
    /// </summary>
    public static string RetryCountBeforeOfflineAlt = "RetryCountBeforeOfflineAlt";
    /// <summary>
    /// Returns 'PollDelayAlt'
    /// </summary>
    public static string PollDelayAlt = "PollDelayAlt";
    /// <summary>
    /// Returns 'IpAddressAlt'
    /// </summary>
    public static string IpAddressAlt = "IpAddressAlt";
    /// <summary>
    /// Returns 'IpPortAlt'
    /// </summary>
    public static string IpPortAlt = "IpPortAlt";
    /// <summary>
    /// Returns 'AllowConnection'
    /// </summary>
    public static string AllowConnection = "AllowConnection";
    /// <summary>
    /// Returns 'InsertName'
    /// </summary>
    public static string InsertName = "InsertName";
    /// <summary>
    /// Returns 'InsertDate'
    /// </summary>
    public static string InsertDate = "InsertDate";
    /// <summary>
    /// Returns 'UpdateName'
    /// </summary>
    public static string UpdateName = "UpdateName";
    /// <summary>
    /// Returns 'UpdateDate'
    /// </summary>
    public static string UpdateDate = "UpdateDate";
    /// <summary>
    /// Returns 'ConcurrencyValue'
    /// </summary>
    public static string ConcurrencyValue = "ConcurrencyValue";
    /// <summary>
    /// Returns 'EntityId'
    /// </summary>
    public static string EntityId = "EntityId";
    /// <summary>
    /// Returns 'PageNumber'
    /// </summary>
    public static string PageNumber = "PageNumber";
    /// <summary>
    /// Returns 'PageSize'
    /// </summary>
    public static string PageSize = "PageSize";
    /// <summary>
    /// Returns 'SortColumn'
    /// </summary>
    public static string SortColumn = "SortColumn";
    /// <summary>
    /// Returns 'DescendingOrder'
    /// </summary>
    public static string DescendingOrder = "DescendingOrder";
    /// <summary>
    /// Returns 'SiteUid'
    /// </summary>
    public static string SiteUid = "SiteUid";
    /// <summary>
    /// Returns 'TotalRowCount'
    /// </summary>
    public static string TotalRowCount = "TotalRowCount";
    /// <summary>
    /// Returns 'Online'
    /// </summary>
    public static string Online = "Online";
    /// <summary>
    /// Returns 'LastConnected'
    /// </summary>
    public static string LastConnected = "LastConnected";
    /// <summary>
    /// Returns 'LastDisconnected'
    /// </summary>
    public static string LastDisconnected = "LastDisconnected";
    }
    #endregion
  }
}
