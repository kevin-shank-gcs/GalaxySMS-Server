using System;

using PDSA.Common;
using PDSA.Validation;

using GalaxySMS.EntityLayer;

namespace GalaxySMS.ValidationLayer
{
  /// <summary>
  /// Used to validate all properties of the PersonPhotoPDSA class.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class PersonPhotoPDSAValidator : PDSAValidatorBase
  {
    #region Public Entity Property
    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    private PersonPhotoPDSA _Entity = null;

    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    public new PersonPhotoPDSA Entity
    {
      get { return _Entity; }
      set
      {
        _Entity = value;
        base.Entity = value;
      }
    }
    #endregion
    
    #region Clone Entity Class
    /// <summary>
    /// Clones the current PersonPhotoPDSA
    /// </summary>
    /// <returns>A cloned PersonPhotoPDSA object</returns>
    public PersonPhotoPDSA CloneEntity()
    {
      return CloneEntity(this.Entity);
    }
    
    /// <summary>
    /// Clones the passed in PersonPhotoPDSA
    /// </summary>
    /// <param name="entityToClone">The PersonPhotoPDSA entity to clone</param>
    /// <returns>A cloned PersonPhotoPDSA object</returns>
    public PersonPhotoPDSA CloneEntity(PersonPhotoPDSA entityToClone)
    {
      PersonPhotoPDSA newEntity = new PersonPhotoPDSA();

      newEntity.PersonPhotoUid = entityToClone.PersonPhotoUid;
      newEntity.PersonUid = entityToClone.PersonUid;
      newEntity.Tag = entityToClone.Tag;
      newEntity.UniqueFilename = entityToClone.UniqueFilename;
      newEntity.PhotoImage = entityToClone.PhotoImage;
      newEntity.OriginalFilename = entityToClone.OriginalFilename;
      newEntity.InsertName = entityToClone.InsertName;
      newEntity.ContentType = entityToClone.ContentType;
      newEntity.InsertDate = entityToClone.InsertDate;
      newEntity.UpdateName = entityToClone.UpdateName;
      newEntity.UpdateDate = entityToClone.UpdateDate;
      newEntity.ConcurrencyValue = entityToClone.ConcurrencyValue;
      newEntity.IsDefault = entityToClone.IsDefault;
      newEntity.PublicUrl = entityToClone.PublicUrl;

      return newEntity;
    }
    #endregion

    #region CreateProperties Method
    /// <summary>
    /// Creates the collection of PDSAProperty objects. These are used to control validation and null handling.
    /// </summary>
    /// <returns>A collection of PDSAProperty objects</returns>
    public override PDSAProperties CreateProperties()
    {
      PDSAProperties props = new PDSAProperties();
      
      props.Add(PDSAProperty.Create(PersonPhotoPDSAValidator.ColumnNames.PersonPhotoUid, GetResourceMessage("GCS_PersonPhotoPDSA_PersonPhotoUid_Header", "Person Photo Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_PersonPhotoPDSA_PersonPhotoUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(PersonPhotoPDSAValidator.ColumnNames.PersonUid, GetResourceMessage("GCS_PersonPhotoPDSA_PersonUid_Header", "Person Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_PersonPhotoPDSA_PersonUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(PersonPhotoPDSAValidator.ColumnNames.Tag, GetResourceMessage("GCS_PersonPhotoPDSA_Tag_Header", "Tag"), true, typeof(string), 65, GetResourceMessage("GCS_PersonPhotoPDSA_Tag_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(PersonPhotoPDSAValidator.ColumnNames.UniqueFilename, GetResourceMessage("GCS_PersonPhotoPDSA_UniqueFilename_Header", "Unique Filename"), true, typeof(string), 255, GetResourceMessage("GCS_PersonPhotoPDSA_UniqueFilename_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(PersonPhotoPDSAValidator.ColumnNames.PhotoImage, GetResourceMessage("GCS_PersonPhotoPDSA_PhotoImage_Header", "Photo Image"), false, typeof(byte[]), 2147483647, GetResourceMessage("GCS_PersonPhotoPDSA_PhotoImage_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, null, @"", ""));
      props.Add(PDSAProperty.Create(PersonPhotoPDSAValidator.ColumnNames.OriginalFilename, GetResourceMessage("GCS_PersonPhotoPDSA_OriginalFilename_Header", "Original Filename"), false, typeof(string), 255, GetResourceMessage("GCS_PersonPhotoPDSA_OriginalFilename_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(PersonPhotoPDSAValidator.ColumnNames.InsertName, GetResourceMessage("GCS_PersonPhotoPDSA_InsertName_Header", "Insert Name"), true, typeof(string), 100, GetResourceMessage("GCS_PersonPhotoPDSA_InsertName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(PersonPhotoPDSAValidator.ColumnNames.ContentType, GetResourceMessage("GCS_PersonPhotoPDSA_ContentType_Header", "Content Type"), true, typeof(string), 255, GetResourceMessage("GCS_PersonPhotoPDSA_ContentType_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(PersonPhotoPDSAValidator.ColumnNames.InsertDate, GetResourceMessage("GCS_PersonPhotoPDSA_InsertDate_Header", "Insert Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_PersonPhotoPDSA_InsertDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(PersonPhotoPDSAValidator.ColumnNames.UpdateName, GetResourceMessage("GCS_PersonPhotoPDSA_UpdateName_Header", "Update Name"), true, typeof(string), 100, GetResourceMessage("GCS_PersonPhotoPDSA_UpdateName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(PersonPhotoPDSAValidator.ColumnNames.UpdateDate, GetResourceMessage("GCS_PersonPhotoPDSA_UpdateDate_Header", "Update Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_PersonPhotoPDSA_UpdateDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(PersonPhotoPDSAValidator.ColumnNames.ConcurrencyValue, GetResourceMessage("GCS_PersonPhotoPDSA_ConcurrencyValue_Header", "Concurrency Value"), true, typeof(short), 5, GetResourceMessage("GCS_PersonPhotoPDSA_ConcurrencyValue_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(PersonPhotoPDSAValidator.ColumnNames.IsDefault, GetResourceMessage("GCS_PersonPhotoPDSA_IsDefault_Header", "Is Default"), true, typeof(bool), -1, GetResourceMessage("GCS_PersonPhotoPDSA_IsDefault_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(PersonPhotoPDSAValidator.ColumnNames.PublicUrl, GetResourceMessage("GCS_PersonPhotoPDSA_PublicUrl_Header", "Public Url"), false, typeof(string), 2048, GetResourceMessage("GCS_PersonPhotoPDSA_PublicUrl_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      
      return props;
    }
    #endregion

    #region Initialize Entity
    /// <summary>
    /// This method is called from the CreateNewEntity Method. All the properties for the Entity are set to default values here by the code generator.
    /// </summary>
    protected override void InitializeEntity()
    {
      Entity.PersonPhotoUid = Guid.Empty;
      Entity.PersonUid = Guid.Empty;
      Entity.Tag = string.Empty;
      Entity.UniqueFilename = string.Empty;
      Entity.PhotoImage = null;
      Entity.OriginalFilename = string.Empty;
      Entity.InsertName = string.Empty;
      Entity.ContentType = string.Empty;
      Entity.InsertDate = DateTimeOffset.Now;
      Entity.UpdateName = string.Empty;
      Entity.UpdateDate = DateTimeOffset.Now;
      Entity.ConcurrencyValue = 0;
      Entity.IsDefault = false;
      Entity.PublicUrl = string.Empty;

      Entity.ResetAllIsDirtyProperties();
    }
    #endregion
    
    #region InitProperties Method
    /// <summary>
    /// Called by the constructor to create the PDSAProperties collection of all properties that will be validated.
    /// </summary>
    protected override void InitProperties()
    {
      // Set the Properties collection to the collection of Entity Properties
      Properties = CreateProperties();
    }
    #endregion

    #region EntityDataToProperties Method
    /// <summary>
    /// Moves the Entity class data into the Properties collection.
    /// </summary>
    protected override void EntityDataToProperties()
    {
      if (Properties == null)
        InitProperties();
      
      if(!Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.PersonPhotoUid).SetAsNull)
        Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.PersonPhotoUid).Value = Entity.PersonPhotoUid;
      if(!Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.PersonUid).SetAsNull)
        Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.PersonUid).Value = Entity.PersonUid;
      if(!Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.Tag).SetAsNull)
        Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.Tag).Value = Entity.Tag;
      if(!Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.UniqueFilename).SetAsNull)
        Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.UniqueFilename).Value = Entity.UniqueFilename;
      if(!Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.PhotoImage).SetAsNull)
        Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.PhotoImage).Value = Entity.PhotoImage;
      if(!Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.OriginalFilename).SetAsNull)
        Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.OriginalFilename).Value = Entity.OriginalFilename;
      if(!Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.InsertName).SetAsNull)
        Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if(!Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.ContentType).SetAsNull)
        Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.ContentType).Value = Entity.ContentType;
      if(!Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.InsertDate).SetAsNull)
        Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if(!Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.UpdateName).SetAsNull)
        Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if(!Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.UpdateDate).SetAsNull)
        Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if(!Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull)
        Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
      if(!Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.IsDefault).SetAsNull)
        Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.IsDefault).Value = Entity.IsDefault;
      if(!Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.PublicUrl).SetAsNull)
        Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.PublicUrl).Value = Entity.PublicUrl;
    }

    /// <summary>
    /// Moves the Properties collection objects into the Entity properties
    /// </summary>
    protected override void PropertiesToEntityData()
    {
      if (Properties == null)
        InitProperties();

      if(Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.PersonPhotoUid).IsNull == false)
        Entity.PersonPhotoUid = Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.PersonPhotoUid).GetAsGuid();
      if(Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.PersonUid).IsNull == false)
        Entity.PersonUid = Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.PersonUid).GetAsGuid();
      if(Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.Tag).IsNull == false)
        Entity.Tag = Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.Tag).GetAsString();
      if(Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.UniqueFilename).IsNull == false)
        Entity.UniqueFilename = Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.UniqueFilename).GetAsString();
      if(Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.PhotoImage).IsNull == false)
        Entity.PhotoImage = Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.PhotoImage).GetAsByteArray();
      if(Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.OriginalFilename).IsNull == false)
        Entity.OriginalFilename = Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.OriginalFilename).GetAsString();
      if(Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.InsertName).GetAsString();
      if(Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.ContentType).IsNull == false)
        Entity.ContentType = Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.ContentType).GetAsString();
      if(Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
      if(Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.UpdateName).GetAsString();
      if(Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.UpdateDate).GetAsDateTimeOffset();
      if(Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
      if(Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.IsDefault).IsNull == false)
        Entity.IsDefault = Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.IsDefault).GetAsBool();
      if(Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.PublicUrl).IsNull == false)
        Entity.PublicUrl = Properties.GetByName(PersonPhotoPDSAValidator.ColumnNames.PublicUrl).GetAsString();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the PersonPhotoPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'PersonPhotoUid'
    /// </summary>
    public static string PersonPhotoUid = "PersonPhotoUid";
    /// <summary>
    /// Returns 'PersonUid'
    /// </summary>
    public static string PersonUid = "PersonUid";
    /// <summary>
    /// Returns 'Tag'
    /// </summary>
    public static string Tag = "Tag";
    /// <summary>
    /// Returns 'UniqueFilename'
    /// </summary>
    public static string UniqueFilename = "UniqueFilename";
    /// <summary>
    /// Returns 'PhotoImage'
    /// </summary>
    public static string PhotoImage = "PhotoImage";
    /// <summary>
    /// Returns 'OriginalFilename'
    /// </summary>
    public static string OriginalFilename = "OriginalFilename";
    /// <summary>
    /// Returns 'InsertName'
    /// </summary>
    public static string InsertName = "InsertName";
    /// <summary>
    /// Returns 'ContentType'
    /// </summary>
    public static string ContentType = "ContentType";
    /// <summary>
    /// Returns 'InsertDate'
    /// </summary>
    public static string InsertDate = "InsertDate";
    /// <summary>
    /// Returns 'UpdateName'
    /// </summary>
    public static string UpdateName = "UpdateName";
    /// <summary>
    /// Returns 'UpdateDate'
    /// </summary>
    public static string UpdateDate = "UpdateDate";
    /// <summary>
    /// Returns 'ConcurrencyValue'
    /// </summary>
    public static string ConcurrencyValue = "ConcurrencyValue";
    /// <summary>
    /// Returns 'IsDefault'
    /// </summary>
    public static string IsDefault = "IsDefault";
    /// <summary>
    /// Returns 'PublicUrl'
    /// </summary>
    public static string PublicUrl = "PublicUrl";
    }
    #endregion
  }
}
