using System;

using PDSA.Common;
using PDSA.Validation;

using GalaxySMS.EntityLayer;

namespace GalaxySMS.ValidationLayer
{
  /// <summary>
  /// Used to validate all properties of the gcsUserRequirementsPDSA class.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class gcsUserRequirementsPDSAValidator : PDSAValidatorBase
  {
    #region Public Entity Property
    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    private gcsUserRequirementsPDSA _Entity = null;

    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    public new gcsUserRequirementsPDSA Entity
    {
      get { return _Entity; }
      set
      {
        _Entity = value;
        base.Entity = value;
      }
    }
    #endregion
    
    #region Clone Entity Class
    /// <summary>
    /// Clones the current gcsUserRequirementsPDSA
    /// </summary>
    /// <returns>A cloned gcsUserRequirementsPDSA object</returns>
    public gcsUserRequirementsPDSA CloneEntity()
    {
      return CloneEntity(this.Entity);
    }
    
    /// <summary>
    /// Clones the passed in gcsUserRequirementsPDSA
    /// </summary>
    /// <param name="entityToClone">The gcsUserRequirementsPDSA entity to clone</param>
    /// <returns>A cloned gcsUserRequirementsPDSA object</returns>
    public gcsUserRequirementsPDSA CloneEntity(gcsUserRequirementsPDSA entityToClone)
    {
      gcsUserRequirementsPDSA newEntity = new gcsUserRequirementsPDSA();

      newEntity.UserRequirementsId = entityToClone.UserRequirementsId;
      newEntity.EntityId = entityToClone.EntityId;
      newEntity.PasswordCannotContainName = entityToClone.PasswordCannotContainName;
      newEntity.PasswordMinimumLength = entityToClone.PasswordMinimumLength;
      newEntity.PasswordMaximumLength = entityToClone.PasswordMaximumLength;
      newEntity.PasswordMinimumChangeCharacters = entityToClone.PasswordMinimumChangeCharacters;
      newEntity.MinimumPasswordAge = entityToClone.MinimumPasswordAge;
      newEntity.MaximumPasswordAge = entityToClone.MaximumPasswordAge;
      newEntity.MaintainPasswordHistoryCount = entityToClone.MaintainPasswordHistoryCount;
      newEntity.DefaultExpirationDays = entityToClone.DefaultExpirationDays;
      newEntity.LockoutUserIfInactiveForDays = entityToClone.LockoutUserIfInactiveForDays;
      newEntity.AllowPasswordChangeAttempt = entityToClone.AllowPasswordChangeAttempt;
      newEntity.RequireLowerCaseLetterCount = entityToClone.RequireLowerCaseLetterCount;
      newEntity.RequireUpperCaseLetterCount = entityToClone.RequireUpperCaseLetterCount;
      newEntity.RequireNumericDigitCount = entityToClone.RequireNumericDigitCount;
      newEntity.RequireSpecialCharacterCount = entityToClone.RequireSpecialCharacterCount;
      newEntity.UseCustomRegEx = entityToClone.UseCustomRegEx;
      newEntity.PasswordCustomRegEx = entityToClone.PasswordCustomRegEx;
      newEntity.RegularExpressionDescription = entityToClone.RegularExpressionDescription;
      newEntity.InsertName = entityToClone.InsertName;
      newEntity.InsertDate = entityToClone.InsertDate;
      newEntity.UpdateName = entityToClone.UpdateName;
      newEntity.UpdateDate = entityToClone.UpdateDate;
      newEntity.ConcurrencyValue = entityToClone.ConcurrencyValue;
      newEntity.RequireTwoFactorAuthentication = entityToClone.RequireTwoFactorAuthentication;

      return newEntity;
    }
    #endregion

    #region CreateProperties Method
    /// <summary>
    /// Creates the collection of PDSAProperty objects. These are used to control validation and null handling.
    /// </summary>
    /// <returns>A collection of PDSAProperty objects</returns>
    public override PDSAProperties CreateProperties()
    {
      PDSAProperties props = new PDSAProperties();
      
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.UserRequirementsId, GetResourceMessage("GCS_gcsUserRequirementsPDSA_UserRequirementsId_Header", "User Requirements Id"), true, typeof(Guid), -1, GetResourceMessage("GCS_gcsUserRequirementsPDSA_UserRequirementsId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.EntityId, GetResourceMessage("GCS_gcsUserRequirementsPDSA_EntityId_Header", "Entity Id"), true, typeof(Guid), -1, GetResourceMessage("GCS_gcsUserRequirementsPDSA_EntityId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordCannotContainName, GetResourceMessage("GCS_gcsUserRequirementsPDSA_PasswordCannotContainName_Header", "Password Cannot Contain Name"), true, typeof(bool), -1, GetResourceMessage("GCS_gcsUserRequirementsPDSA_PasswordCannotContainName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordMinimumLength, GetResourceMessage("GCS_gcsUserRequirementsPDSA_PasswordMinimumLength_Header", "Password Minimum Length"), true, typeof(short), 5, GetResourceMessage("GCS_gcsUserRequirementsPDSA_PasswordMinimumLength_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordMaximumLength, GetResourceMessage("GCS_gcsUserRequirementsPDSA_PasswordMaximumLength_Header", "Password Maximum Length"), true, typeof(short), 5, GetResourceMessage("GCS_gcsUserRequirementsPDSA_PasswordMaximumLength_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordMinimumChangeCharacters, GetResourceMessage("GCS_gcsUserRequirementsPDSA_PasswordMinimumChangeCharacters_Header", "Password Minimum Change Characters"), true, typeof(short), 5, GetResourceMessage("GCS_gcsUserRequirementsPDSA_PasswordMinimumChangeCharacters_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.MinimumPasswordAge, GetResourceMessage("GCS_gcsUserRequirementsPDSA_MinimumPasswordAge_Header", "Minimum Password Age"), true, typeof(short), 5, GetResourceMessage("GCS_gcsUserRequirementsPDSA_MinimumPasswordAge_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.MaximumPasswordAge, GetResourceMessage("GCS_gcsUserRequirementsPDSA_MaximumPasswordAge_Header", "Maximum Password Age"), true, typeof(short), 5, GetResourceMessage("GCS_gcsUserRequirementsPDSA_MaximumPasswordAge_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.MaintainPasswordHistoryCount, GetResourceMessage("GCS_gcsUserRequirementsPDSA_MaintainPasswordHistoryCount_Header", "Maintain Password History Count"), true, typeof(short), 5, GetResourceMessage("GCS_gcsUserRequirementsPDSA_MaintainPasswordHistoryCount_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.DefaultExpirationDays, GetResourceMessage("GCS_gcsUserRequirementsPDSA_DefaultExpirationDays_Header", "Default Expiration Days"), true, typeof(short), 5, GetResourceMessage("GCS_gcsUserRequirementsPDSA_DefaultExpirationDays_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.LockoutUserIfInactiveForDays, GetResourceMessage("GCS_gcsUserRequirementsPDSA_LockoutUserIfInactiveForDays_Header", "Lockout User If Inactive For Days"), true, typeof(short), 5, GetResourceMessage("GCS_gcsUserRequirementsPDSA_LockoutUserIfInactiveForDays_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.AllowPasswordChangeAttempt, GetResourceMessage("GCS_gcsUserRequirementsPDSA_AllowPasswordChangeAttempt_Header", "Allow Password Change Attempt"), true, typeof(bool), -1, GetResourceMessage("GCS_gcsUserRequirementsPDSA_AllowPasswordChangeAttempt_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.RequireLowerCaseLetterCount, GetResourceMessage("GCS_gcsUserRequirementsPDSA_RequireLowerCaseLetterCount_Header", "Require Lower Case Letter Count"), true, typeof(short), 5, GetResourceMessage("GCS_gcsUserRequirementsPDSA_RequireLowerCaseLetterCount_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.RequireUpperCaseLetterCount, GetResourceMessage("GCS_gcsUserRequirementsPDSA_RequireUpperCaseLetterCount_Header", "Require Upper Case Letter Count"), true, typeof(short), 5, GetResourceMessage("GCS_gcsUserRequirementsPDSA_RequireUpperCaseLetterCount_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.RequireNumericDigitCount, GetResourceMessage("GCS_gcsUserRequirementsPDSA_RequireNumericDigitCount_Header", "Require Numeric Digit Count"), true, typeof(short), 5, GetResourceMessage("GCS_gcsUserRequirementsPDSA_RequireNumericDigitCount_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.RequireSpecialCharacterCount, GetResourceMessage("GCS_gcsUserRequirementsPDSA_RequireSpecialCharacterCount_Header", "Require Special Character Count"), true, typeof(short), 5, GetResourceMessage("GCS_gcsUserRequirementsPDSA_RequireSpecialCharacterCount_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.UseCustomRegEx, GetResourceMessage("GCS_gcsUserRequirementsPDSA_UseCustomRegEx_Header", "Use Custom Reg Ex"), true, typeof(bool), -1, GetResourceMessage("GCS_gcsUserRequirementsPDSA_UseCustomRegEx_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordCustomRegEx, GetResourceMessage("GCS_gcsUserRequirementsPDSA_PasswordCustomRegEx_Header", "Password Custom Reg Ex"), false, typeof(string), 1000, GetResourceMessage("GCS_gcsUserRequirementsPDSA_PasswordCustomRegEx_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.RegularExpressionDescription, GetResourceMessage("GCS_gcsUserRequirementsPDSA_RegularExpressionDescription_Header", "Regular Expression Description"), false, typeof(string), 2000, GetResourceMessage("GCS_gcsUserRequirementsPDSA_RegularExpressionDescription_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.InsertName, GetResourceMessage("GCS_gcsUserRequirementsPDSA_InsertName_Header", "Insert Name"), true, typeof(string), 100, GetResourceMessage("GCS_gcsUserRequirementsPDSA_InsertName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.InsertDate, GetResourceMessage("GCS_gcsUserRequirementsPDSA_InsertDate_Header", "Insert Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_gcsUserRequirementsPDSA_InsertDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.UpdateName, GetResourceMessage("GCS_gcsUserRequirementsPDSA_UpdateName_Header", "Update Name"), true, typeof(string), 100, GetResourceMessage("GCS_gcsUserRequirementsPDSA_UpdateName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.UpdateDate, GetResourceMessage("GCS_gcsUserRequirementsPDSA_UpdateDate_Header", "Update Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_gcsUserRequirementsPDSA_UpdateDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.ConcurrencyValue, GetResourceMessage("GCS_gcsUserRequirementsPDSA_ConcurrencyValue_Header", "Concurrency Value"), true, typeof(short), 5, GetResourceMessage("GCS_gcsUserRequirementsPDSA_ConcurrencyValue_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserRequirementsPDSAValidator.ColumnNames.RequireTwoFactorAuthentication, GetResourceMessage("GCS_gcsUserRequirementsPDSA_RequireTwoFactorAuthentication_Header", "Require Two Factor Authentication"), true, typeof(bool), -1, GetResourceMessage("GCS_gcsUserRequirementsPDSA_RequireTwoFactorAuthentication_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      
      return props;
    }
    #endregion

    #region Initialize Entity
    /// <summary>
    /// This method is called from the CreateNewEntity Method. All the properties for the Entity are set to default values here by the code generator.
    /// </summary>
    protected override void InitializeEntity()
    {
      Entity.UserRequirementsId = Guid.Empty;
      Entity.EntityId = Guid.Empty;
      Entity.PasswordCannotContainName = false;
      Entity.PasswordMinimumLength = 0;
      Entity.PasswordMaximumLength = 0;
      Entity.PasswordMinimumChangeCharacters = 0;
      Entity.MinimumPasswordAge = 0;
      Entity.MaximumPasswordAge = 0;
      Entity.MaintainPasswordHistoryCount = 0;
      Entity.DefaultExpirationDays = 0;
      Entity.LockoutUserIfInactiveForDays = 0;
      Entity.AllowPasswordChangeAttempt = false;
      Entity.RequireLowerCaseLetterCount = 0;
      Entity.RequireUpperCaseLetterCount = 0;
      Entity.RequireNumericDigitCount = 0;
      Entity.RequireSpecialCharacterCount = 0;
      Entity.UseCustomRegEx = false;
      Entity.PasswordCustomRegEx = string.Empty;
      Entity.RegularExpressionDescription = string.Empty;
      Entity.InsertName = string.Empty;
      Entity.InsertDate = DateTimeOffset.Now;
      Entity.UpdateName = string.Empty;
      Entity.UpdateDate = DateTimeOffset.Now;
      Entity.ConcurrencyValue = 0;
      Entity.RequireTwoFactorAuthentication = false;

      Entity.ResetAllIsDirtyProperties();
    }
    #endregion
    
    #region InitProperties Method
    /// <summary>
    /// Called by the constructor to create the PDSAProperties collection of all properties that will be validated.
    /// </summary>
    protected override void InitProperties()
    {
      // Set the Properties collection to the collection of Entity Properties
      Properties = CreateProperties();
    }
    #endregion

    #region EntityDataToProperties Method
    /// <summary>
    /// Moves the Entity class data into the Properties collection.
    /// </summary>
    protected override void EntityDataToProperties()
    {
      if (Properties == null)
        InitProperties();
      
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.UserRequirementsId).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.UserRequirementsId).Value = Entity.UserRequirementsId;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.EntityId).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.EntityId).Value = Entity.EntityId;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordCannotContainName).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordCannotContainName).Value = Entity.PasswordCannotContainName;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordMinimumLength).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordMinimumLength).Value = Entity.PasswordMinimumLength;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordMaximumLength).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordMaximumLength).Value = Entity.PasswordMaximumLength;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordMinimumChangeCharacters).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordMinimumChangeCharacters).Value = Entity.PasswordMinimumChangeCharacters;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.MinimumPasswordAge).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.MinimumPasswordAge).Value = Entity.MinimumPasswordAge;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.MaximumPasswordAge).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.MaximumPasswordAge).Value = Entity.MaximumPasswordAge;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.MaintainPasswordHistoryCount).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.MaintainPasswordHistoryCount).Value = Entity.MaintainPasswordHistoryCount;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.DefaultExpirationDays).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.DefaultExpirationDays).Value = Entity.DefaultExpirationDays;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.LockoutUserIfInactiveForDays).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.LockoutUserIfInactiveForDays).Value = Entity.LockoutUserIfInactiveForDays;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.AllowPasswordChangeAttempt).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.AllowPasswordChangeAttempt).Value = Entity.AllowPasswordChangeAttempt;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RequireLowerCaseLetterCount).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RequireLowerCaseLetterCount).Value = Entity.RequireLowerCaseLetterCount;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RequireUpperCaseLetterCount).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RequireUpperCaseLetterCount).Value = Entity.RequireUpperCaseLetterCount;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RequireNumericDigitCount).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RequireNumericDigitCount).Value = Entity.RequireNumericDigitCount;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RequireSpecialCharacterCount).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RequireSpecialCharacterCount).Value = Entity.RequireSpecialCharacterCount;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.UseCustomRegEx).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.UseCustomRegEx).Value = Entity.UseCustomRegEx;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordCustomRegEx).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordCustomRegEx).Value = Entity.PasswordCustomRegEx;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RegularExpressionDescription).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RegularExpressionDescription).Value = Entity.RegularExpressionDescription;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.InsertName).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.InsertDate).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.UpdateName).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.UpdateDate).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
      if(!Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RequireTwoFactorAuthentication).SetAsNull)
        Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RequireTwoFactorAuthentication).Value = Entity.RequireTwoFactorAuthentication;
    }

    /// <summary>
    /// Moves the Properties collection objects into the Entity properties
    /// </summary>
    protected override void PropertiesToEntityData()
    {
      if (Properties == null)
        InitProperties();

      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.UserRequirementsId).IsNull == false)
        Entity.UserRequirementsId = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.UserRequirementsId).GetAsGuid();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.EntityId).IsNull == false)
        Entity.EntityId = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.EntityId).GetAsGuid();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordCannotContainName).IsNull == false)
        Entity.PasswordCannotContainName = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordCannotContainName).GetAsBool();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordMinimumLength).IsNull == false)
        Entity.PasswordMinimumLength = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordMinimumLength).GetAsShort();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordMaximumLength).IsNull == false)
        Entity.PasswordMaximumLength = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordMaximumLength).GetAsShort();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordMinimumChangeCharacters).IsNull == false)
        Entity.PasswordMinimumChangeCharacters = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordMinimumChangeCharacters).GetAsShort();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.MinimumPasswordAge).IsNull == false)
        Entity.MinimumPasswordAge = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.MinimumPasswordAge).GetAsShort();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.MaximumPasswordAge).IsNull == false)
        Entity.MaximumPasswordAge = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.MaximumPasswordAge).GetAsShort();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.MaintainPasswordHistoryCount).IsNull == false)
        Entity.MaintainPasswordHistoryCount = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.MaintainPasswordHistoryCount).GetAsShort();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.DefaultExpirationDays).IsNull == false)
        Entity.DefaultExpirationDays = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.DefaultExpirationDays).GetAsShort();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.LockoutUserIfInactiveForDays).IsNull == false)
        Entity.LockoutUserIfInactiveForDays = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.LockoutUserIfInactiveForDays).GetAsShort();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.AllowPasswordChangeAttempt).IsNull == false)
        Entity.AllowPasswordChangeAttempt = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.AllowPasswordChangeAttempt).GetAsBool();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RequireLowerCaseLetterCount).IsNull == false)
        Entity.RequireLowerCaseLetterCount = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RequireLowerCaseLetterCount).GetAsShort();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RequireUpperCaseLetterCount).IsNull == false)
        Entity.RequireUpperCaseLetterCount = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RequireUpperCaseLetterCount).GetAsShort();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RequireNumericDigitCount).IsNull == false)
        Entity.RequireNumericDigitCount = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RequireNumericDigitCount).GetAsShort();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RequireSpecialCharacterCount).IsNull == false)
        Entity.RequireSpecialCharacterCount = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RequireSpecialCharacterCount).GetAsShort();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.UseCustomRegEx).IsNull == false)
        Entity.UseCustomRegEx = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.UseCustomRegEx).GetAsBool();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordCustomRegEx).IsNull == false)
        Entity.PasswordCustomRegEx = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.PasswordCustomRegEx).GetAsString();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RegularExpressionDescription).IsNull == false)
        Entity.RegularExpressionDescription = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RegularExpressionDescription).GetAsString();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.InsertName).GetAsString();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.UpdateName).GetAsString();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.UpdateDate).GetAsDateTimeOffset();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
      if(Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RequireTwoFactorAuthentication).IsNull == false)
        Entity.RequireTwoFactorAuthentication = Properties.GetByName(gcsUserRequirementsPDSAValidator.ColumnNames.RequireTwoFactorAuthentication).GetAsBool();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the gcsUserRequirementsPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'UserRequirementsId'
    /// </summary>
    public static string UserRequirementsId = "UserRequirementsId";
    /// <summary>
    /// Returns 'EntityId'
    /// </summary>
    public static string EntityId = "EntityId";
    /// <summary>
    /// Returns 'PasswordCannotContainName'
    /// </summary>
    public static string PasswordCannotContainName = "PasswordCannotContainName";
    /// <summary>
    /// Returns 'PasswordMinimumLength'
    /// </summary>
    public static string PasswordMinimumLength = "PasswordMinimumLength";
    /// <summary>
    /// Returns 'PasswordMaximumLength'
    /// </summary>
    public static string PasswordMaximumLength = "PasswordMaximumLength";
    /// <summary>
    /// Returns 'PasswordMinimumChangeCharacters'
    /// </summary>
    public static string PasswordMinimumChangeCharacters = "PasswordMinimumChangeCharacters";
    /// <summary>
    /// Returns 'MinimumPasswordAge'
    /// </summary>
    public static string MinimumPasswordAge = "MinimumPasswordAge";
    /// <summary>
    /// Returns 'MaximumPasswordAge'
    /// </summary>
    public static string MaximumPasswordAge = "MaximumPasswordAge";
    /// <summary>
    /// Returns 'MaintainPasswordHistoryCount'
    /// </summary>
    public static string MaintainPasswordHistoryCount = "MaintainPasswordHistoryCount";
    /// <summary>
    /// Returns 'DefaultExpirationDays'
    /// </summary>
    public static string DefaultExpirationDays = "DefaultExpirationDays";
    /// <summary>
    /// Returns 'LockoutUserIfInactiveForDays'
    /// </summary>
    public static string LockoutUserIfInactiveForDays = "LockoutUserIfInactiveForDays";
    /// <summary>
    /// Returns 'AllowPasswordChangeAttempt'
    /// </summary>
    public static string AllowPasswordChangeAttempt = "AllowPasswordChangeAttempt";
    /// <summary>
    /// Returns 'RequireLowerCaseLetterCount'
    /// </summary>
    public static string RequireLowerCaseLetterCount = "RequireLowerCaseLetterCount";
    /// <summary>
    /// Returns 'RequireUpperCaseLetterCount'
    /// </summary>
    public static string RequireUpperCaseLetterCount = "RequireUpperCaseLetterCount";
    /// <summary>
    /// Returns 'RequireNumericDigitCount'
    /// </summary>
    public static string RequireNumericDigitCount = "RequireNumericDigitCount";
    /// <summary>
    /// Returns 'RequireSpecialCharacterCount'
    /// </summary>
    public static string RequireSpecialCharacterCount = "RequireSpecialCharacterCount";
    /// <summary>
    /// Returns 'UseCustomRegEx'
    /// </summary>
    public static string UseCustomRegEx = "UseCustomRegEx";
    /// <summary>
    /// Returns 'PasswordCustomRegEx'
    /// </summary>
    public static string PasswordCustomRegEx = "PasswordCustomRegEx";
    /// <summary>
    /// Returns 'RegularExpressionDescription'
    /// </summary>
    public static string RegularExpressionDescription = "RegularExpressionDescription";
    /// <summary>
    /// Returns 'InsertName'
    /// </summary>
    public static string InsertName = "InsertName";
    /// <summary>
    /// Returns 'InsertDate'
    /// </summary>
    public static string InsertDate = "InsertDate";
    /// <summary>
    /// Returns 'UpdateName'
    /// </summary>
    public static string UpdateName = "UpdateName";
    /// <summary>
    /// Returns 'UpdateDate'
    /// </summary>
    public static string UpdateDate = "UpdateDate";
    /// <summary>
    /// Returns 'ConcurrencyValue'
    /// </summary>
    public static string ConcurrencyValue = "ConcurrencyValue";
    /// <summary>
    /// Returns 'RequireTwoFactorAuthentication'
    /// </summary>
    public static string RequireTwoFactorAuthentication = "RequireTwoFactorAuthentication";
    }
    #endregion
  }
}
