using System;

using PDSA.Common;
using PDSA.Validation;

using GalaxySMS.EntityLayer;

namespace GalaxySMS.ValidationLayer
{
  /// <summary>
  /// Used to validate all properties of the gcsUserPDSA class.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class gcsUserPDSAValidator : PDSAValidatorBase
  {
    #region Public Entity Property
    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    private gcsUserPDSA _Entity = null;

    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    public new gcsUserPDSA Entity
    {
      get { return _Entity; }
      set
      {
        _Entity = value;
        base.Entity = value;
      }
    }
    #endregion
    
    #region Clone Entity Class
    /// <summary>
    /// Clones the current gcsUserPDSA
    /// </summary>
    /// <returns>A cloned gcsUserPDSA object</returns>
    public gcsUserPDSA CloneEntity()
    {
      return CloneEntity(this.Entity);
    }
    
    /// <summary>
    /// Clones the passed in gcsUserPDSA
    /// </summary>
    /// <param name="entityToClone">The gcsUserPDSA entity to clone</param>
    /// <returns>A cloned gcsUserPDSA object</returns>
    public gcsUserPDSA CloneEntity(gcsUserPDSA entityToClone)
    {
      gcsUserPDSA newEntity = new gcsUserPDSA();

      newEntity.UserId = entityToClone.UserId;
      newEntity.LanguageId = entityToClone.LanguageId;
      newEntity.FirstName = entityToClone.FirstName;
      newEntity.LastName = entityToClone.LastName;
      newEntity.UserInitials = entityToClone.UserInitials;
      newEntity.Email = entityToClone.Email;
      newEntity.UserName = entityToClone.UserName;
      newEntity.DisplayName = entityToClone.DisplayName;
      newEntity.UserPassword = entityToClone.UserPassword;
      newEntity.LastLoginDate = entityToClone.LastLoginDate;
      newEntity.UserTheme = entityToClone.UserTheme;
      newEntity.IsLockedOut = entityToClone.IsLockedOut;
      newEntity.IsActive = entityToClone.IsActive;
      newEntity.ResetPasswordFlag = entityToClone.ResetPasswordFlag;
      newEntity.LastPasswordResetDate = entityToClone.LastPasswordResetDate;
      newEntity.UserActivationDate = entityToClone.UserActivationDate;
      newEntity.UserExpirationDate = entityToClone.UserExpirationDate;
      newEntity.ImportedFromActiveDirectory = entityToClone.ImportedFromActiveDirectory;
      newEntity.SecurityImage = entityToClone.SecurityImage;
      newEntity.UserImage = entityToClone.UserImage;
      newEntity.InsertName = entityToClone.InsertName;
      newEntity.InsertDate = entityToClone.InsertDate;
      newEntity.UpdateName = entityToClone.UpdateName;
      newEntity.UpdateDate = entityToClone.UpdateDate;
      newEntity.ConcurrencyValue = entityToClone.ConcurrencyValue;
      newEntity.ActiveDirectoryObjectGuid = entityToClone.ActiveDirectoryObjectGuid;
      newEntity.PrimaryEntityId = entityToClone.PrimaryEntityId;
      newEntity.AccessFailedCount = entityToClone.AccessFailedCount;
      newEntity.ConcurrencyStamp = entityToClone.ConcurrencyStamp;
      newEntity.EmailConfirmed = entityToClone.EmailConfirmed;
      newEntity.LockoutEnabled = entityToClone.LockoutEnabled;
      newEntity.LockoutEnd = entityToClone.LockoutEnd;
      newEntity.NormalizedEmail = entityToClone.NormalizedEmail;
      newEntity.NormalizedUserName = entityToClone.NormalizedUserName;
      newEntity.PhoneNumber = entityToClone.PhoneNumber;
      newEntity.PhoneNumberConfirmed = entityToClone.PhoneNumberConfirmed;
      newEntity.SecurityStamp = entityToClone.SecurityStamp;
      newEntity.TwoFactorEnabled = entityToClone.TwoFactorEnabled;
      newEntity.PasswordHash = entityToClone.PasswordHash;
      newEntity.IsLockedOutClearedDate = entityToClone.IsLockedOutClearedDate;
      newEntity.PageNumber = entityToClone.PageNumber;
      newEntity.PageSize = entityToClone.PageSize;
      newEntity.SortColumn = entityToClone.SortColumn;
      newEntity.DescendingOrder = entityToClone.DescendingOrder;
      newEntity.TotalRowCount = entityToClone.TotalRowCount;
      newEntity.LanguageName = entityToClone.LanguageName;

      return newEntity;
    }
    #endregion

    #region CreateProperties Method
    /// <summary>
    /// Creates the collection of PDSAProperty objects. These are used to control validation and null handling.
    /// </summary>
    /// <returns>A collection of PDSAProperty objects</returns>
    public override PDSAProperties CreateProperties()
    {
      PDSAProperties props = new PDSAProperties();
      
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.UserId, GetResourceMessage("GCS_gcsUserPDSA_UserId_Header", "User Id"), true, typeof(Guid), -1, GetResourceMessage("GCS_gcsUserPDSA_UserId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.LanguageId, GetResourceMessage("GCS_gcsUserPDSA_LanguageId_Header", "Language Id"), false, typeof(Guid), -1, GetResourceMessage("GCS_gcsUserPDSA_LanguageId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.FirstName, GetResourceMessage("GCS_gcsUserPDSA_FirstName_Header", "First Name"), true, typeof(string), 30, GetResourceMessage("GCS_gcsUserPDSA_FirstName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.LastName, GetResourceMessage("GCS_gcsUserPDSA_LastName_Header", "Last Name"), true, typeof(string), 30, GetResourceMessage("GCS_gcsUserPDSA_LastName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.UserInitials, GetResourceMessage("GCS_gcsUserPDSA_UserInitials_Header", "User Initials"), false, typeof(string), 10, GetResourceMessage("GCS_gcsUserPDSA_UserInitials_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.Email, GetResourceMessage("GCS_gcsUserPDSA_Email_Header", "Email"), true, typeof(string), 255, GetResourceMessage("GCS_gcsUserPDSA_Email_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.UserName, GetResourceMessage("GCS_gcsUserPDSA_UserName_Header", "User Name"), true, typeof(string), 100, GetResourceMessage("GCS_gcsUserPDSA_UserName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.DisplayName, GetResourceMessage("GCS_gcsUserPDSA_DisplayName_Header", "Display Name"), true, typeof(string), 100, GetResourceMessage("GCS_gcsUserPDSA_DisplayName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.UserPassword, GetResourceMessage("GCS_gcsUserPDSA_UserPassword_Header", "User Password"), false, typeof(string), 1024, GetResourceMessage("GCS_gcsUserPDSA_UserPassword_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.LastLoginDate, GetResourceMessage("GCS_gcsUserPDSA_LastLoginDate_Header", "Last Login Date"), false, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_gcsUserPDSA_LastLoginDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, null, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.UserTheme, GetResourceMessage("GCS_gcsUserPDSA_UserTheme_Header", "User Theme"), false, typeof(string), 65, GetResourceMessage("GCS_gcsUserPDSA_UserTheme_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.IsLockedOut, GetResourceMessage("GCS_gcsUserPDSA_IsLockedOut_Header", "Is Locked Out"), true, typeof(bool), -1, GetResourceMessage("GCS_gcsUserPDSA_IsLockedOut_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.IsActive, GetResourceMessage("GCS_gcsUserPDSA_IsActive_Header", "Is Active"), true, typeof(bool), -1, GetResourceMessage("GCS_gcsUserPDSA_IsActive_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.ResetPasswordFlag, GetResourceMessage("GCS_gcsUserPDSA_ResetPasswordFlag_Header", "Reset Password Flag"), true, typeof(bool), -1, GetResourceMessage("GCS_gcsUserPDSA_ResetPasswordFlag_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.LastPasswordResetDate, GetResourceMessage("GCS_gcsUserPDSA_LastPasswordResetDate_Header", "Last Password Reset Date"), false, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_gcsUserPDSA_LastPasswordResetDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, null, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.UserActivationDate, GetResourceMessage("GCS_gcsUserPDSA_UserActivationDate_Header", "User Activation Date"), false, typeof(DateTime), -1, GetResourceMessage("GCS_gcsUserPDSA_UserActivationDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTime.MinValue, DateTime.MaxValue, 0, null, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.UserExpirationDate, GetResourceMessage("GCS_gcsUserPDSA_UserExpirationDate_Header", "User Expiration Date"), false, typeof(DateTime), -1, GetResourceMessage("GCS_gcsUserPDSA_UserExpirationDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTime.MinValue, DateTime.MaxValue, 0, null, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.ImportedFromActiveDirectory, GetResourceMessage("GCS_gcsUserPDSA_ImportedFromActiveDirectory_Header", "Imported From Active Directory"), true, typeof(bool), -1, GetResourceMessage("GCS_gcsUserPDSA_ImportedFromActiveDirectory_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.SecurityImage, GetResourceMessage("GCS_gcsUserPDSA_SecurityImage_Header", "Security Image"), false, typeof(byte[]), 2147483647, GetResourceMessage("GCS_gcsUserPDSA_SecurityImage_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, null, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.UserImage, GetResourceMessage("GCS_gcsUserPDSA_UserImage_Header", "User Image"), false, typeof(byte[]), 2147483647, GetResourceMessage("GCS_gcsUserPDSA_UserImage_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, null, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.InsertName, GetResourceMessage("GCS_gcsUserPDSA_InsertName_Header", "Insert Name"), true, typeof(string), 100, GetResourceMessage("GCS_gcsUserPDSA_InsertName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.InsertDate, GetResourceMessage("GCS_gcsUserPDSA_InsertDate_Header", "Insert Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_gcsUserPDSA_InsertDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.UpdateName, GetResourceMessage("GCS_gcsUserPDSA_UpdateName_Header", "Update Name"), true, typeof(string), 100, GetResourceMessage("GCS_gcsUserPDSA_UpdateName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.UpdateDate, GetResourceMessage("GCS_gcsUserPDSA_UpdateDate_Header", "Update Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_gcsUserPDSA_UpdateDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.ConcurrencyValue, GetResourceMessage("GCS_gcsUserPDSA_ConcurrencyValue_Header", "Concurrency Value"), true, typeof(short), 5, GetResourceMessage("GCS_gcsUserPDSA_ConcurrencyValue_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.ActiveDirectoryObjectGuid, GetResourceMessage("GCS_gcsUserPDSA_ActiveDirectoryObjectGuid_Header", "Active Directory Object Guid"), false, typeof(Guid), -1, GetResourceMessage("GCS_gcsUserPDSA_ActiveDirectoryObjectGuid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.PrimaryEntityId, GetResourceMessage("GCS_gcsUserPDSA_PrimaryEntityId_Header", "Primary Entity Id"), true, typeof(Guid), -1, GetResourceMessage("GCS_gcsUserPDSA_PrimaryEntityId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.AccessFailedCount, GetResourceMessage("GCS_gcsUserPDSA_AccessFailedCount_Header", "Access Failed Count"), true, typeof(int), 10, GetResourceMessage("GCS_gcsUserPDSA_AccessFailedCount_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.ConcurrencyStamp, GetResourceMessage("GCS_gcsUserPDSA_ConcurrencyStamp_Header", "Concurrency Stamp"), false, typeof(string), 1073741823, GetResourceMessage("GCS_gcsUserPDSA_ConcurrencyStamp_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.EmailConfirmed, GetResourceMessage("GCS_gcsUserPDSA_EmailConfirmed_Header", "Email Confirmed"), true, typeof(bool), -1, GetResourceMessage("GCS_gcsUserPDSA_EmailConfirmed_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.LockoutEnabled, GetResourceMessage("GCS_gcsUserPDSA_LockoutEnabled_Header", "Lockout Enabled"), true, typeof(bool), -1, GetResourceMessage("GCS_gcsUserPDSA_LockoutEnabled_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.LockoutEnd, GetResourceMessage("GCS_gcsUserPDSA_LockoutEnd_Header", "Lockout End"), false, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_gcsUserPDSA_LockoutEnd_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, null, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.NormalizedEmail, GetResourceMessage("GCS_gcsUserPDSA_NormalizedEmail_Header", "Normalized Email"), true, typeof(string), 256, GetResourceMessage("GCS_gcsUserPDSA_NormalizedEmail_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.NormalizedUserName, GetResourceMessage("GCS_gcsUserPDSA_NormalizedUserName_Header", "Normalized User Name"), true, typeof(string), 256, GetResourceMessage("GCS_gcsUserPDSA_NormalizedUserName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.PhoneNumber, GetResourceMessage("GCS_gcsUserPDSA_PhoneNumber_Header", "Phone Number"), false, typeof(string), 1073741823, GetResourceMessage("GCS_gcsUserPDSA_PhoneNumber_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.PhoneNumberConfirmed, GetResourceMessage("GCS_gcsUserPDSA_PhoneNumberConfirmed_Header", "Phone Number Confirmed"), true, typeof(bool), -1, GetResourceMessage("GCS_gcsUserPDSA_PhoneNumberConfirmed_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.SecurityStamp, GetResourceMessage("GCS_gcsUserPDSA_SecurityStamp_Header", "Security Stamp"), false, typeof(string), 1073741823, GetResourceMessage("GCS_gcsUserPDSA_SecurityStamp_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.TwoFactorEnabled, GetResourceMessage("GCS_gcsUserPDSA_TwoFactorEnabled_Header", "Two Factor Enabled"), true, typeof(bool), -1, GetResourceMessage("GCS_gcsUserPDSA_TwoFactorEnabled_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.PasswordHash, GetResourceMessage("GCS_gcsUserPDSA_PasswordHash_Header", "Password Hash"), false, typeof(string), 1073741823, GetResourceMessage("GCS_gcsUserPDSA_PasswordHash_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.IsLockedOutClearedDate, GetResourceMessage("GCS_gcsUserPDSA_IsLockedOutClearedDate_Header", "Is Locked Out Cleared Date"), false, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_gcsUserPDSA_IsLockedOutClearedDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, null, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.PageNumber, GetResourceMessage("GCS_gcsUserPDSA_PageNumber_Header", "Page Number"), false, typeof(int), 2147483647, GetResourceMessage("GCS_gcsUserPDSA_PageNumber_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("0"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.PageSize, GetResourceMessage("GCS_gcsUserPDSA_PageSize_Header", "Page Size"), false, typeof(int), 2147483647, GetResourceMessage("GCS_gcsUserPDSA_PageSize_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("0"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.SortColumn, GetResourceMessage("GCS_gcsUserPDSA_SortColumn_Header", "Sort Column"), false, typeof(string), 2147483647, GetResourceMessage("GCS_gcsUserPDSA_SortColumn_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.DescendingOrder, GetResourceMessage("GCS_gcsUserPDSA_DescendingOrder_Header", "Descending Order"), false, typeof(bool), 2147483647, GetResourceMessage("GCS_gcsUserPDSA_DescendingOrder_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.TotalRowCount, GetResourceMessage("GCS_gcsUserPDSA_TotalRowCount_Header", "Total Row Count"), false, typeof(int), 2147483647, GetResourceMessage("GCS_gcsUserPDSA_TotalRowCount_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("0"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(gcsUserPDSAValidator.ColumnNames.LanguageName, GetResourceMessage("GCS_gcsUserPDSA_LanguageName_Header", "Language Name"), false, typeof(string), 2147483647, GetResourceMessage("GCS_gcsUserPDSA_LanguageName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      
      return props;
    }
    #endregion

    #region Initialize Entity
    /// <summary>
    /// This method is called from the CreateNewEntity Method. All the properties for the Entity are set to default values here by the code generator.
    /// </summary>
    protected override void InitializeEntity()
    {
      Entity.UserId = Guid.Empty;
      Entity.LanguageId = Guid.Empty;
      Entity.FirstName = string.Empty;
      Entity.LastName = string.Empty;
      Entity.UserInitials = string.Empty;
      Entity.Email = string.Empty;
      Entity.UserName = string.Empty;
      Entity.DisplayName = string.Empty;
      Entity.UserPassword = string.Empty;
      Entity.LastLoginDate = null;
      Entity.UserTheme = string.Empty;
      Entity.IsLockedOut = false;
      Entity.IsActive = false;
      Entity.ResetPasswordFlag = false;
      Entity.LastPasswordResetDate = null;
      Entity.UserActivationDate = null;
      Entity.UserExpirationDate = null;
      Entity.ImportedFromActiveDirectory = false;
      Entity.SecurityImage = null;
      Entity.UserImage = null;
      Entity.InsertName = string.Empty;
      Entity.InsertDate = DateTimeOffset.Now;
      Entity.UpdateName = string.Empty;
      Entity.UpdateDate = DateTimeOffset.Now;
      Entity.ConcurrencyValue = 0;
      Entity.ActiveDirectoryObjectGuid = Guid.Empty;
      Entity.PrimaryEntityId = Guid.Empty;
      Entity.AccessFailedCount = 0;
      Entity.ConcurrencyStamp = string.Empty;
      Entity.EmailConfirmed = false;
      Entity.LockoutEnabled = false;
      Entity.LockoutEnd = null;
      Entity.NormalizedEmail = string.Empty;
      Entity.NormalizedUserName = string.Empty;
      Entity.PhoneNumber = string.Empty;
      Entity.PhoneNumberConfirmed = false;
      Entity.SecurityStamp = string.Empty;
      Entity.TwoFactorEnabled = false;
      Entity.PasswordHash = string.Empty;
      Entity.IsLockedOutClearedDate = null;
      Entity.PageNumber = 0;
      Entity.PageSize = 0;
      Entity.SortColumn = string.Empty;
      Entity.DescendingOrder = false;
      Entity.TotalRowCount = 0;
      Entity.LanguageName = string.Empty;

      Entity.ResetAllIsDirtyProperties();
    }
    #endregion
    
    #region InitProperties Method
    /// <summary>
    /// Called by the constructor to create the PDSAProperties collection of all properties that will be validated.
    /// </summary>
    protected override void InitProperties()
    {
      // Set the Properties collection to the collection of Entity Properties
      Properties = CreateProperties();
    }
    #endregion

    #region EntityDataToProperties Method
    /// <summary>
    /// Moves the Entity class data into the Properties collection.
    /// </summary>
    protected override void EntityDataToProperties()
    {
      if (Properties == null)
        InitProperties();
      
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserId).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserId).Value = Entity.UserId;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LanguageId).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LanguageId).Value = Entity.LanguageId;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.FirstName).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.FirstName).Value = Entity.FirstName;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastName).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastName).Value = Entity.LastName;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserInitials).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserInitials).Value = Entity.UserInitials;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.Email).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.Email).Value = Entity.Email;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserName).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserName).Value = Entity.UserName;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.DisplayName).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.DisplayName).Value = Entity.DisplayName;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserPassword).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserPassword).Value = Entity.UserPassword;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastLoginDate).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastLoginDate).Value = Entity.LastLoginDate;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserTheme).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserTheme).Value = Entity.UserTheme;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOut).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOut).Value = Entity.IsLockedOut;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsActive).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsActive).Value = Entity.IsActive;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ResetPasswordFlag).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ResetPasswordFlag).Value = Entity.ResetPasswordFlag;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastPasswordResetDate).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastPasswordResetDate).Value = Entity.LastPasswordResetDate;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserActivationDate).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserActivationDate).Value = Entity.UserActivationDate;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserExpirationDate).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserExpirationDate).Value = Entity.UserExpirationDate;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ImportedFromActiveDirectory).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ImportedFromActiveDirectory).Value = Entity.ImportedFromActiveDirectory;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityImage).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityImage).Value = Entity.SecurityImage;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserImage).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserImage).Value = Entity.UserImage;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.InsertName).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.InsertDate).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateName).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateDate).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ActiveDirectoryObjectGuid).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ActiveDirectoryObjectGuid).Value = Entity.ActiveDirectoryObjectGuid;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PrimaryEntityId).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PrimaryEntityId).Value = Entity.PrimaryEntityId;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.AccessFailedCount).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.AccessFailedCount).Value = Entity.AccessFailedCount;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyStamp).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyStamp).Value = Entity.ConcurrencyStamp;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.EmailConfirmed).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.EmailConfirmed).Value = Entity.EmailConfirmed;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnabled).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnabled).Value = Entity.LockoutEnabled;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnd).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnd).Value = Entity.LockoutEnd;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedEmail).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedEmail).Value = Entity.NormalizedEmail;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedUserName).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedUserName).Value = Entity.NormalizedUserName;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumber).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumber).Value = Entity.PhoneNumber;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumberConfirmed).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumberConfirmed).Value = Entity.PhoneNumberConfirmed;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityStamp).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityStamp).Value = Entity.SecurityStamp;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.TwoFactorEnabled).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.TwoFactorEnabled).Value = Entity.TwoFactorEnabled;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PasswordHash).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PasswordHash).Value = Entity.PasswordHash;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOutClearedDate).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOutClearedDate).Value = Entity.IsLockedOutClearedDate;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PageNumber).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PageNumber).Value = Entity.PageNumber;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PageSize).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PageSize).Value = Entity.PageSize;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SortColumn).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SortColumn).Value = Entity.SortColumn;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.DescendingOrder).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.DescendingOrder).Value = Entity.DescendingOrder;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.TotalRowCount).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.TotalRowCount).Value = Entity.TotalRowCount;
      if(!Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LanguageName).SetAsNull)
        Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LanguageName).Value = Entity.LanguageName;
    }

    /// <summary>
    /// Moves the Properties collection objects into the Entity properties
    /// </summary>
    protected override void PropertiesToEntityData()
    {
      if (Properties == null)
        InitProperties();

      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserId).IsNull == false)
        Entity.UserId = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserId).GetAsGuid();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LanguageId).IsNull == false)
        Entity.LanguageId = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LanguageId).GetAsGuid();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.FirstName).IsNull == false)
        Entity.FirstName = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.FirstName).GetAsString();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastName).IsNull == false)
        Entity.LastName = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastName).GetAsString();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserInitials).IsNull == false)
        Entity.UserInitials = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserInitials).GetAsString();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.Email).IsNull == false)
        Entity.Email = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.Email).GetAsString();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserName).IsNull == false)
        Entity.UserName = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserName).GetAsString();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.DisplayName).IsNull == false)
        Entity.DisplayName = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.DisplayName).GetAsString();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserPassword).IsNull == false)
        Entity.UserPassword = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserPassword).GetAsString();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastLoginDate).IsNull == false)
        Entity.LastLoginDate = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastLoginDate).GetAsDateTimeOffset();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserTheme).IsNull == false)
        Entity.UserTheme = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserTheme).GetAsString();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOut).IsNull == false)
        Entity.IsLockedOut = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOut).GetAsBool();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsActive).IsNull == false)
        Entity.IsActive = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsActive).GetAsBool();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ResetPasswordFlag).IsNull == false)
        Entity.ResetPasswordFlag = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ResetPasswordFlag).GetAsBool();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastPasswordResetDate).IsNull == false)
        Entity.LastPasswordResetDate = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LastPasswordResetDate).GetAsDateTimeOffset();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserActivationDate).IsNull == false)
        Entity.UserActivationDate = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserActivationDate).GetAsDate();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserExpirationDate).IsNull == false)
        Entity.UserExpirationDate = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserExpirationDate).GetAsDate();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ImportedFromActiveDirectory).IsNull == false)
        Entity.ImportedFromActiveDirectory = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ImportedFromActiveDirectory).GetAsBool();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityImage).IsNull == false)
        Entity.SecurityImage = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityImage).GetAsByteArray();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserImage).IsNull == false)
        Entity.UserImage = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UserImage).GetAsByteArray();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.InsertName).GetAsString();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateName).GetAsString();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.UpdateDate).GetAsDateTimeOffset();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ActiveDirectoryObjectGuid).IsNull == false)
        Entity.ActiveDirectoryObjectGuid = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ActiveDirectoryObjectGuid).GetAsGuid();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PrimaryEntityId).IsNull == false)
        Entity.PrimaryEntityId = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PrimaryEntityId).GetAsGuid();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.AccessFailedCount).IsNull == false)
        Entity.AccessFailedCount = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.AccessFailedCount).GetAsInteger();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyStamp).IsNull == false)
        Entity.ConcurrencyStamp = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.ConcurrencyStamp).GetAsString();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.EmailConfirmed).IsNull == false)
        Entity.EmailConfirmed = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.EmailConfirmed).GetAsBool();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnabled).IsNull == false)
        Entity.LockoutEnabled = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnabled).GetAsBool();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnd).IsNull == false)
        Entity.LockoutEnd = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LockoutEnd).GetAsDateTimeOffset();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedEmail).IsNull == false)
        Entity.NormalizedEmail = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedEmail).GetAsString();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedUserName).IsNull == false)
        Entity.NormalizedUserName = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.NormalizedUserName).GetAsString();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumber).IsNull == false)
        Entity.PhoneNumber = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumber).GetAsString();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumberConfirmed).IsNull == false)
        Entity.PhoneNumberConfirmed = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PhoneNumberConfirmed).GetAsBool();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityStamp).IsNull == false)
        Entity.SecurityStamp = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SecurityStamp).GetAsString();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.TwoFactorEnabled).IsNull == false)
        Entity.TwoFactorEnabled = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.TwoFactorEnabled).GetAsBool();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PasswordHash).IsNull == false)
        Entity.PasswordHash = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PasswordHash).GetAsString();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOutClearedDate).IsNull == false)
        Entity.IsLockedOutClearedDate = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.IsLockedOutClearedDate).GetAsDateTimeOffset();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PageNumber).IsNull == false)
        Entity.PageNumber = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PageNumber).GetAsInteger();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PageSize).IsNull == false)
        Entity.PageSize = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.PageSize).GetAsInteger();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SortColumn).IsNull == false)
        Entity.SortColumn = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.SortColumn).GetAsString();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.DescendingOrder).IsNull == false)
        Entity.DescendingOrder = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.DescendingOrder).GetAsBool();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.TotalRowCount).IsNull == false)
        Entity.TotalRowCount = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.TotalRowCount).GetAsInteger();
      if(Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LanguageName).IsNull == false)
        Entity.LanguageName = Properties.GetByName(gcsUserPDSAValidator.ColumnNames.LanguageName).GetAsString();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the gcsUserPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'UserId'
    /// </summary>
    public static string UserId = "UserId";
    /// <summary>
    /// Returns 'LanguageId'
    /// </summary>
    public static string LanguageId = "LanguageId";
    /// <summary>
    /// Returns 'FirstName'
    /// </summary>
    public static string FirstName = "FirstName";
    /// <summary>
    /// Returns 'LastName'
    /// </summary>
    public static string LastName = "LastName";
    /// <summary>
    /// Returns 'UserInitials'
    /// </summary>
    public static string UserInitials = "UserInitials";
    /// <summary>
    /// Returns 'Email'
    /// </summary>
    public static string Email = "Email";
    /// <summary>
    /// Returns 'UserName'
    /// </summary>
    public static string UserName = "UserName";
    /// <summary>
    /// Returns 'DisplayName'
    /// </summary>
    public static string DisplayName = "DisplayName";
    /// <summary>
    /// Returns 'UserPassword'
    /// </summary>
    public static string UserPassword = "UserPassword";
    /// <summary>
    /// Returns 'LastLoginDate'
    /// </summary>
    public static string LastLoginDate = "LastLoginDate";
    /// <summary>
    /// Returns 'UserTheme'
    /// </summary>
    public static string UserTheme = "UserTheme";
    /// <summary>
    /// Returns 'IsLockedOut'
    /// </summary>
    public static string IsLockedOut = "IsLockedOut";
    /// <summary>
    /// Returns 'IsActive'
    /// </summary>
    public static string IsActive = "IsActive";
    /// <summary>
    /// Returns 'ResetPasswordFlag'
    /// </summary>
    public static string ResetPasswordFlag = "ResetPasswordFlag";
    /// <summary>
    /// Returns 'LastPasswordResetDate'
    /// </summary>
    public static string LastPasswordResetDate = "LastPasswordResetDate";
    /// <summary>
    /// Returns 'UserActivationDate'
    /// </summary>
    public static string UserActivationDate = "UserActivationDate";
    /// <summary>
    /// Returns 'UserExpirationDate'
    /// </summary>
    public static string UserExpirationDate = "UserExpirationDate";
    /// <summary>
    /// Returns 'ImportedFromActiveDirectory'
    /// </summary>
    public static string ImportedFromActiveDirectory = "ImportedFromActiveDirectory";
    /// <summary>
    /// Returns 'SecurityImage'
    /// </summary>
    public static string SecurityImage = "SecurityImage";
    /// <summary>
    /// Returns 'UserImage'
    /// </summary>
    public static string UserImage = "UserImage";
    /// <summary>
    /// Returns 'InsertName'
    /// </summary>
    public static string InsertName = "InsertName";
    /// <summary>
    /// Returns 'InsertDate'
    /// </summary>
    public static string InsertDate = "InsertDate";
    /// <summary>
    /// Returns 'UpdateName'
    /// </summary>
    public static string UpdateName = "UpdateName";
    /// <summary>
    /// Returns 'UpdateDate'
    /// </summary>
    public static string UpdateDate = "UpdateDate";
    /// <summary>
    /// Returns 'ConcurrencyValue'
    /// </summary>
    public static string ConcurrencyValue = "ConcurrencyValue";
    /// <summary>
    /// Returns 'ActiveDirectoryObjectGuid'
    /// </summary>
    public static string ActiveDirectoryObjectGuid = "ActiveDirectoryObjectGuid";
    /// <summary>
    /// Returns 'PrimaryEntityId'
    /// </summary>
    public static string PrimaryEntityId = "PrimaryEntityId";
    /// <summary>
    /// Returns 'AccessFailedCount'
    /// </summary>
    public static string AccessFailedCount = "AccessFailedCount";
    /// <summary>
    /// Returns 'ConcurrencyStamp'
    /// </summary>
    public static string ConcurrencyStamp = "ConcurrencyStamp";
    /// <summary>
    /// Returns 'EmailConfirmed'
    /// </summary>
    public static string EmailConfirmed = "EmailConfirmed";
    /// <summary>
    /// Returns 'LockoutEnabled'
    /// </summary>
    public static string LockoutEnabled = "LockoutEnabled";
    /// <summary>
    /// Returns 'LockoutEnd'
    /// </summary>
    public static string LockoutEnd = "LockoutEnd";
    /// <summary>
    /// Returns 'NormalizedEmail'
    /// </summary>
    public static string NormalizedEmail = "NormalizedEmail";
    /// <summary>
    /// Returns 'NormalizedUserName'
    /// </summary>
    public static string NormalizedUserName = "NormalizedUserName";
    /// <summary>
    /// Returns 'PhoneNumber'
    /// </summary>
    public static string PhoneNumber = "PhoneNumber";
    /// <summary>
    /// Returns 'PhoneNumberConfirmed'
    /// </summary>
    public static string PhoneNumberConfirmed = "PhoneNumberConfirmed";
    /// <summary>
    /// Returns 'SecurityStamp'
    /// </summary>
    public static string SecurityStamp = "SecurityStamp";
    /// <summary>
    /// Returns 'TwoFactorEnabled'
    /// </summary>
    public static string TwoFactorEnabled = "TwoFactorEnabled";
    /// <summary>
    /// Returns 'PasswordHash'
    /// </summary>
    public static string PasswordHash = "PasswordHash";
    /// <summary>
    /// Returns 'IsLockedOutClearedDate'
    /// </summary>
    public static string IsLockedOutClearedDate = "IsLockedOutClearedDate";
    /// <summary>
    /// Returns 'PageNumber'
    /// </summary>
    public static string PageNumber = "PageNumber";
    /// <summary>
    /// Returns 'PageSize'
    /// </summary>
    public static string PageSize = "PageSize";
    /// <summary>
    /// Returns 'SortColumn'
    /// </summary>
    public static string SortColumn = "SortColumn";
    /// <summary>
    /// Returns 'DescendingOrder'
    /// </summary>
    public static string DescendingOrder = "DescendingOrder";
    /// <summary>
    /// Returns 'TotalRowCount'
    /// </summary>
    public static string TotalRowCount = "TotalRowCount";
    /// <summary>
    /// Returns 'LanguageName'
    /// </summary>
    public static string LanguageName = "LanguageName";
    }
    #endregion
  }
}
