using System;

using PDSA.Common;
using PDSA.Validation;

using GalaxySMS.EntityLayer;

namespace GalaxySMS.ValidationLayer
{
  /// <summary>
  /// Used to validate all properties of the TimeScheduleDayTypeTimePeriodPDSA class.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class TimeScheduleDayTypeTimePeriodPDSAValidator : PDSAValidatorBase
  {
    #region Public Entity Property
    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    private TimeScheduleDayTypeTimePeriodPDSA _Entity = null;

    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    public new TimeScheduleDayTypeTimePeriodPDSA Entity
    {
      get { return _Entity; }
      set
      {
        _Entity = value;
        base.Entity = value;
      }
    }
    #endregion
    
    #region Clone Entity Class
    /// <summary>
    /// Clones the current TimeScheduleDayTypeTimePeriodPDSA
    /// </summary>
    /// <returns>A cloned TimeScheduleDayTypeTimePeriodPDSA object</returns>
    public TimeScheduleDayTypeTimePeriodPDSA CloneEntity()
    {
      return CloneEntity(this.Entity);
    }
    
    /// <summary>
    /// Clones the passed in TimeScheduleDayTypeTimePeriodPDSA
    /// </summary>
    /// <param name="entityToClone">The TimeScheduleDayTypeTimePeriodPDSA entity to clone</param>
    /// <returns>A cloned TimeScheduleDayTypeTimePeriodPDSA object</returns>
    public TimeScheduleDayTypeTimePeriodPDSA CloneEntity(TimeScheduleDayTypeTimePeriodPDSA entityToClone)
    {
      TimeScheduleDayTypeTimePeriodPDSA newEntity = new TimeScheduleDayTypeTimePeriodPDSA();

      newEntity.TimeScheduleDayTypeTimePeriodUid = entityToClone.TimeScheduleDayTypeTimePeriodUid;
      newEntity.DayTypeUid = entityToClone.DayTypeUid;
      newEntity.TimePeriodUid = entityToClone.TimePeriodUid;
      newEntity.TimeScheduleUid = entityToClone.TimeScheduleUid;
      newEntity.InsertName = entityToClone.InsertName;
      newEntity.InsertDate = entityToClone.InsertDate;
      newEntity.UpdateName = entityToClone.UpdateName;
      newEntity.UpdateDate = entityToClone.UpdateDate;
      newEntity.ConcurrencyValue = entityToClone.ConcurrencyValue;

      return newEntity;
    }
    #endregion

    #region CreateProperties Method
    /// <summary>
    /// Creates the collection of PDSAProperty objects. These are used to control validation and null handling.
    /// </summary>
    /// <returns>A collection of PDSAProperty objects</returns>
    public override PDSAProperties CreateProperties()
    {
      PDSAProperties props = new PDSAProperties();
      
      props.Add(PDSAProperty.Create(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.TimeScheduleDayTypeTimePeriodUid, GetResourceMessage("GCS_TimeScheduleDayTypeTimePeriodPDSA_TimeScheduleDayTypeTimePeriodUid_Header", "Time Schedule Day Type Time Period Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_TimeScheduleDayTypeTimePeriodPDSA_TimeScheduleDayTypeTimePeriodUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.DayTypeUid, GetResourceMessage("GCS_TimeScheduleDayTypeTimePeriodPDSA_DayTypeUid_Header", "Day Type Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_TimeScheduleDayTypeTimePeriodPDSA_DayTypeUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.TimePeriodUid, GetResourceMessage("GCS_TimeScheduleDayTypeTimePeriodPDSA_TimePeriodUid_Header", "Time Period Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_TimeScheduleDayTypeTimePeriodPDSA_TimePeriodUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.TimeScheduleUid, GetResourceMessage("GCS_TimeScheduleDayTypeTimePeriodPDSA_TimeScheduleUid_Header", "Time Schedule Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_TimeScheduleDayTypeTimePeriodPDSA_TimeScheduleUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.InsertName, GetResourceMessage("GCS_TimeScheduleDayTypeTimePeriodPDSA_InsertName_Header", "Insert Name"), true, typeof(string), 100, GetResourceMessage("GCS_TimeScheduleDayTypeTimePeriodPDSA_InsertName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.InsertDate, GetResourceMessage("GCS_TimeScheduleDayTypeTimePeriodPDSA_InsertDate_Header", "Insert Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_TimeScheduleDayTypeTimePeriodPDSA_InsertDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.UpdateName, GetResourceMessage("GCS_TimeScheduleDayTypeTimePeriodPDSA_UpdateName_Header", "Update Name"), true, typeof(string), 100, GetResourceMessage("GCS_TimeScheduleDayTypeTimePeriodPDSA_UpdateName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.UpdateDate, GetResourceMessage("GCS_TimeScheduleDayTypeTimePeriodPDSA_UpdateDate_Header", "Update Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_TimeScheduleDayTypeTimePeriodPDSA_UpdateDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.ConcurrencyValue, GetResourceMessage("GCS_TimeScheduleDayTypeTimePeriodPDSA_ConcurrencyValue_Header", "Concurrency Value"), true, typeof(short), 5, GetResourceMessage("GCS_TimeScheduleDayTypeTimePeriodPDSA_ConcurrencyValue_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      
      return props;
    }
    #endregion

    #region Initialize Entity
    /// <summary>
    /// This method is called from the CreateNewEntity Method. All the properties for the Entity are set to default values here by the code generator.
    /// </summary>
    protected override void InitializeEntity()
    {
      Entity.TimeScheduleDayTypeTimePeriodUid = Guid.Empty;
      Entity.DayTypeUid = Guid.Empty;
      Entity.TimePeriodUid = Guid.Empty;
      Entity.TimeScheduleUid = Guid.Empty;
      Entity.InsertName = string.Empty;
      Entity.InsertDate = DateTimeOffset.Now;
      Entity.UpdateName = string.Empty;
      Entity.UpdateDate = DateTimeOffset.Now;
      Entity.ConcurrencyValue = 0;

      Entity.ResetAllIsDirtyProperties();
    }
    #endregion
    
    #region InitProperties Method
    /// <summary>
    /// Called by the constructor to create the PDSAProperties collection of all properties that will be validated.
    /// </summary>
    protected override void InitProperties()
    {
      // Set the Properties collection to the collection of Entity Properties
      Properties = CreateProperties();
    }
    #endregion

    #region EntityDataToProperties Method
    /// <summary>
    /// Moves the Entity class data into the Properties collection.
    /// </summary>
    protected override void EntityDataToProperties()
    {
      if (Properties == null)
        InitProperties();
      
      if(!Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.TimeScheduleDayTypeTimePeriodUid).SetAsNull)
        Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.TimeScheduleDayTypeTimePeriodUid).Value = Entity.TimeScheduleDayTypeTimePeriodUid;
      if(!Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.DayTypeUid).SetAsNull)
        Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.DayTypeUid).Value = Entity.DayTypeUid;
      if(!Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.TimePeriodUid).SetAsNull)
        Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.TimePeriodUid).Value = Entity.TimePeriodUid;
      if(!Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.TimeScheduleUid).SetAsNull)
        Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.TimeScheduleUid).Value = Entity.TimeScheduleUid;
      if(!Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.InsertName).SetAsNull)
        Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if(!Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.InsertDate).SetAsNull)
        Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if(!Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.UpdateName).SetAsNull)
        Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if(!Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.UpdateDate).SetAsNull)
        Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if(!Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull)
        Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
    }

    /// <summary>
    /// Moves the Properties collection objects into the Entity properties
    /// </summary>
    protected override void PropertiesToEntityData()
    {
      if (Properties == null)
        InitProperties();

      if(Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.TimeScheduleDayTypeTimePeriodUid).IsNull == false)
        Entity.TimeScheduleDayTypeTimePeriodUid = Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.TimeScheduleDayTypeTimePeriodUid).GetAsGuid();
      if(Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.DayTypeUid).IsNull == false)
        Entity.DayTypeUid = Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.DayTypeUid).GetAsGuid();
      if(Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.TimePeriodUid).IsNull == false)
        Entity.TimePeriodUid = Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.TimePeriodUid).GetAsGuid();
      if(Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.TimeScheduleUid).IsNull == false)
        Entity.TimeScheduleUid = Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.TimeScheduleUid).GetAsGuid();
      if(Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.InsertName).GetAsString();
      if(Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
      if(Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.UpdateName).GetAsString();
      if(Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.UpdateDate).GetAsDateTimeOffset();
      if(Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = Properties.GetByName(TimeScheduleDayTypeTimePeriodPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the TimeScheduleDayTypeTimePeriodPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'TimeScheduleDayTypeTimePeriodUid'
    /// </summary>
    public static string TimeScheduleDayTypeTimePeriodUid = "TimeScheduleDayTypeTimePeriodUid";
    /// <summary>
    /// Returns 'DayTypeUid'
    /// </summary>
    public static string DayTypeUid = "DayTypeUid";
    /// <summary>
    /// Returns 'TimePeriodUid'
    /// </summary>
    public static string TimePeriodUid = "TimePeriodUid";
    /// <summary>
    /// Returns 'TimeScheduleUid'
    /// </summary>
    public static string TimeScheduleUid = "TimeScheduleUid";
    /// <summary>
    /// Returns 'InsertName'
    /// </summary>
    public static string InsertName = "InsertName";
    /// <summary>
    /// Returns 'InsertDate'
    /// </summary>
    public static string InsertDate = "InsertDate";
    /// <summary>
    /// Returns 'UpdateName'
    /// </summary>
    public static string UpdateName = "UpdateName";
    /// <summary>
    /// Returns 'UpdateDate'
    /// </summary>
    public static string UpdateDate = "UpdateDate";
    /// <summary>
    /// Returns 'ConcurrencyValue'
    /// </summary>
    public static string ConcurrencyValue = "ConcurrencyValue";
    }
    #endregion
  }
}
