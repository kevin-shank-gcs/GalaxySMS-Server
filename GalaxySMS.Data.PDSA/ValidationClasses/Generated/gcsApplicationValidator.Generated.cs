using System;

using PDSA.Validation;

using GalaxySMS.EntityLayer;

namespace GalaxySMS.ValidationLayer
{
  /// <summary>
  /// Used to validate all properties of the gcsApplicationPDSA class.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class gcsApplicationPDSAValidator : PDSAValidatorBase
  {
    #region Public Entity Property
    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    private gcsApplicationPDSA _Entity = null;

    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    public new gcsApplicationPDSA Entity
    {
      get { return _Entity; }
      set
      {
        _Entity = value;
        base.Entity = value;
      }
    }
    #endregion
    
    #region Clone Entity Class
    /// <summary>
    /// Clones the current gcsApplicationPDSA
    /// </summary>
    /// <returns>A cloned gcsApplicationPDSA object</returns>
    public gcsApplicationPDSA CloneEntity()
    {
      return CloneEntity(this.Entity);
    }
    
    /// <summary>
    /// Clones the passed in gcsApplicationPDSA
    /// </summary>
    /// <param name="entityToClone">The gcsApplicationPDSA entity to clone</param>
    /// <returns>A cloned gcsApplicationPDSA object</returns>
    public gcsApplicationPDSA CloneEntity(gcsApplicationPDSA entityToClone)
    {
      gcsApplicationPDSA newEntity = new gcsApplicationPDSA();

      newEntity.ApplicationId = entityToClone.ApplicationId;
      newEntity.LanguageId = entityToClone.LanguageId;
      newEntity.SystemRoleId = entityToClone.SystemRoleId;
      newEntity.ApplicationName = entityToClone.ApplicationName;
      newEntity.ApplicationDescription = entityToClone.ApplicationDescription;
      newEntity.InsertName = entityToClone.InsertName;
      newEntity.InsertDate = entityToClone.InsertDate;
      newEntity.UpdateName = entityToClone.UpdateName;
      newEntity.UpdateDate = entityToClone.UpdateDate;
      newEntity.ConcurrencyValue = entityToClone.ConcurrencyValue;
      newEntity.EntityId = entityToClone.EntityId;
      newEntity.UserId = entityToClone.UserId;

      return newEntity;
    }
    #endregion

    #region CreateProperties Method
    /// <summary>
    /// Creates the collection of PDSAProperty objects. These are used to control validation and null handling.
    /// </summary>
    /// <returns>A collection of PDSAProperty objects</returns>
    public override PDSAProperties CreateProperties()
    {
      PDSAProperties props = new PDSAProperties();
      
      props.Add(PDSAProperty.Create(gcsApplicationPDSAValidator.ColumnNames.ApplicationId, GetResourceMessage("GCS_gcsApplicationPDSA_ApplicationId_Header", "Application Id"), true, typeof(Guid), -1, GetResourceMessage("GCS_gcsApplicationPDSA_ApplicationId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.NewGuid(), @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationPDSAValidator.ColumnNames.LanguageId, GetResourceMessage("GCS_gcsApplicationPDSA_LanguageId_Header", "Language Id"), false, typeof(Guid), -1, GetResourceMessage("GCS_gcsApplicationPDSA_LanguageId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.NewGuid(), @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationPDSAValidator.ColumnNames.SystemRoleId, GetResourceMessage("GCS_gcsApplicationPDSA_SystemRoleId_Header", "System Role Id"), false, typeof(Guid), -1, GetResourceMessage("GCS_gcsApplicationPDSA_SystemRoleId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.NewGuid(), @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationPDSAValidator.ColumnNames.ApplicationName, GetResourceMessage("GCS_gcsApplicationPDSA_ApplicationName_Header", "Application Name"), true, typeof(string), 65, GetResourceMessage("GCS_gcsApplicationPDSA_ApplicationName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationPDSAValidator.ColumnNames.ApplicationDescription, GetResourceMessage("GCS_gcsApplicationPDSA_ApplicationDescription_Header", "Application Description"), true, typeof(string), 255, GetResourceMessage("GCS_gcsApplicationPDSA_ApplicationDescription_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationPDSAValidator.ColumnNames.InsertName, GetResourceMessage("GCS_gcsApplicationPDSA_InsertName_Header", "Insert Name"), true, typeof(string), 100, GetResourceMessage("GCS_gcsApplicationPDSA_InsertName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationPDSAValidator.ColumnNames.InsertDate, GetResourceMessage("GCS_gcsApplicationPDSA_InsertDate_Header", "Insert Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_gcsApplicationPDSA_InsertDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationPDSAValidator.ColumnNames.UpdateName, GetResourceMessage("GCS_gcsApplicationPDSA_UpdateName_Header", "Update Name"), true, typeof(string), 100, GetResourceMessage("GCS_gcsApplicationPDSA_UpdateName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationPDSAValidator.ColumnNames.UpdateDate, GetResourceMessage("GCS_gcsApplicationPDSA_UpdateDate_Header", "Update Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_gcsApplicationPDSA_UpdateDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationPDSAValidator.ColumnNames.ConcurrencyValue, GetResourceMessage("GCS_gcsApplicationPDSA_ConcurrencyValue_Header", "Concurrency Value"), true, typeof(short), 5, GetResourceMessage("GCS_gcsApplicationPDSA_ConcurrencyValue_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationPDSAValidator.ColumnNames.EntityId, GetResourceMessage("GCS_gcsApplicationPDSA_EntityId_Header", "Entity Id"), false, typeof(Guid), 2147483647, GetResourceMessage("GCS_gcsApplicationPDSA_EntityId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.NewGuid(), @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationPDSAValidator.ColumnNames.UserId, GetResourceMessage("GCS_gcsApplicationPDSA_UserId_Header", "User Id"), false, typeof(Guid), 2147483647, GetResourceMessage("GCS_gcsApplicationPDSA_UserId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.NewGuid(), @"", ""));
      
      return props;
    }
    #endregion

    #region Initialize Entity
    /// <summary>
    /// This method is called from the CreateNewEntity Method. All the properties for the Entity are set to default values here by the code generator.
    /// </summary>
    protected override void InitializeEntity()
    {
      Entity.ApplicationId = Guid.NewGuid();
      Entity.LanguageId = Guid.NewGuid();
      Entity.SystemRoleId = Guid.NewGuid();
      Entity.ApplicationName = string.Empty;
      Entity.ApplicationDescription = string.Empty;
      Entity.InsertName = string.Empty;
      Entity.InsertDate = DateTimeOffset.Now;
      Entity.UpdateName = string.Empty;
      Entity.UpdateDate = DateTimeOffset.Now;
      Entity.ConcurrencyValue = 0;
      Entity.EntityId = Guid.NewGuid();
      Entity.UserId = Guid.NewGuid();

      Entity.ResetAllIsDirtyProperties();
    }
    #endregion
    
    #region InitProperties Method
    /// <summary>
    /// Called by the constructor to create the PDSAProperties collection of all properties that will be validated.
    /// </summary>
    protected override void InitProperties()
    {
      // Set the Properties collection to the collection of Entity Properties
      Properties = CreateProperties();
    }
    #endregion

    #region EntityDataToProperties Method
    /// <summary>
    /// Moves the Entity class data into the Properties collection.
    /// </summary>
    protected override void EntityDataToProperties()
    {
      if (Properties == null)
        InitProperties();
      
      if(!Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.ApplicationId).SetAsNull)
        Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.ApplicationId).Value = Entity.ApplicationId;
      if(!Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.LanguageId).SetAsNull)
        Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.LanguageId).Value = Entity.LanguageId;
      if(!Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.SystemRoleId).SetAsNull)
        Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.SystemRoleId).Value = Entity.SystemRoleId;
      if(!Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.ApplicationName).SetAsNull)
        Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.ApplicationName).Value = Entity.ApplicationName;
      if(!Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.ApplicationDescription).SetAsNull)
        Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.ApplicationDescription).Value = Entity.ApplicationDescription;
      if(!Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.InsertName).SetAsNull)
        Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if(!Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.InsertDate).SetAsNull)
        Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if(!Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.UpdateName).SetAsNull)
        Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if(!Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.UpdateDate).SetAsNull)
        Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if(!Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull)
        Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
      if(!Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.EntityId).SetAsNull)
        Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.EntityId).Value = Entity.EntityId;
      if(!Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.UserId).SetAsNull)
        Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.UserId).Value = Entity.UserId;
    }

    /// <summary>
    /// Moves the Properties collection objects into the Entity properties
    /// </summary>
    protected override void PropertiesToEntityData()
    {
      if (Properties == null)
        InitProperties();

      if(Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.ApplicationId).IsNull == false)
        Entity.ApplicationId = Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.ApplicationId).GetAsGuid();
      if(Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.LanguageId).IsNull == false)
        Entity.LanguageId = Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.LanguageId).GetAsGuid();
      if(Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.SystemRoleId).IsNull == false)
        Entity.SystemRoleId = Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.SystemRoleId).GetAsGuid();
      if(Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.ApplicationName).IsNull == false)
        Entity.ApplicationName = Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.ApplicationName).GetAsString();
      if(Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.ApplicationDescription).IsNull == false)
        Entity.ApplicationDescription = Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.ApplicationDescription).GetAsString();
      if(Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.InsertName).GetAsString();
      if(Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
      if(Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.UpdateName).GetAsString();
      if(Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.UpdateDate).GetAsDateTimeOffset();
      if(Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
      if(Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.EntityId).IsNull == false)
        Entity.EntityId = Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.EntityId).GetAsGuid();
      if(Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.UserId).IsNull == false)
        Entity.UserId = Properties.GetByName(gcsApplicationPDSAValidator.ColumnNames.UserId).GetAsGuid();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the gcsApplicationPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'ApplicationId'
    /// </summary>
    public static string ApplicationId = "ApplicationId";
    /// <summary>
    /// Returns 'LanguageId'
    /// </summary>
    public static string LanguageId = "LanguageId";
    /// <summary>
    /// Returns 'SystemRoleId'
    /// </summary>
    public static string SystemRoleId = "SystemRoleId";
    /// <summary>
    /// Returns 'ApplicationName'
    /// </summary>
    public static string ApplicationName = "ApplicationName";
    /// <summary>
    /// Returns 'ApplicationDescription'
    /// </summary>
    public static string ApplicationDescription = "ApplicationDescription";
    /// <summary>
    /// Returns 'InsertName'
    /// </summary>
    public static string InsertName = "InsertName";
    /// <summary>
    /// Returns 'InsertDate'
    /// </summary>
    public static string InsertDate = "InsertDate";
    /// <summary>
    /// Returns 'UpdateName'
    /// </summary>
    public static string UpdateName = "UpdateName";
    /// <summary>
    /// Returns 'UpdateDate'
    /// </summary>
    public static string UpdateDate = "UpdateDate";
    /// <summary>
    /// Returns 'ConcurrencyValue'
    /// </summary>
    public static string ConcurrencyValue = "ConcurrencyValue";
    /// <summary>
    /// Returns 'EntityId'
    /// </summary>
    public static string EntityId = "EntityId";
    /// <summary>
    /// Returns 'UserId'
    /// </summary>
    public static string UserId = "UserId";
    }
    #endregion
  }
}
