using System;

using PDSA.Common;
using PDSA.Validation;

using GalaxySMS.EntityLayer;

namespace GalaxySMS.ValidationLayer
{
  /// <summary>
  /// Used to validate all properties of the AssaAccessPointPDSA class.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class AssaAccessPointPDSAValidator : PDSAValidatorBase
  {
    #region Public Entity Property
    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    private AssaAccessPointPDSA _Entity = null;

    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    public new AssaAccessPointPDSA Entity
    {
      get { return _Entity; }
      set
      {
        _Entity = value;
        base.Entity = value;
      }
    }
    #endregion
    
    #region Clone Entity Class
    /// <summary>
    /// Clones the current AssaAccessPointPDSA
    /// </summary>
    /// <returns>A cloned AssaAccessPointPDSA object</returns>
    public AssaAccessPointPDSA CloneEntity()
    {
      return CloneEntity(this.Entity);
    }
    
    /// <summary>
    /// Clones the passed in AssaAccessPointPDSA
    /// </summary>
    /// <param name="entityToClone">The AssaAccessPointPDSA entity to clone</param>
    /// <returns>A cloned AssaAccessPointPDSA object</returns>
    public AssaAccessPointPDSA CloneEntity(AssaAccessPointPDSA entityToClone)
    {
      AssaAccessPointPDSA newEntity = new AssaAccessPointPDSA();

      newEntity.AssaAccessPointUid = entityToClone.AssaAccessPointUid;
      newEntity.AssaDsrUid = entityToClone.AssaDsrUid;
      newEntity.AssaAccessPointTypeUid = entityToClone.AssaAccessPointTypeUid;
      newEntity.SerialNumber = entityToClone.SerialNumber;
      newEntity.AccessPointName = entityToClone.AccessPointName;
      newEntity.FirmwareVersion = entityToClone.FirmwareVersion;
      newEntity.InsertName = entityToClone.InsertName;
      newEntity.InsertDate = entityToClone.InsertDate;
      newEntity.UpdateName = entityToClone.UpdateName;
      newEntity.UpdateDate = entityToClone.UpdateDate;
      newEntity.ConcurrencyValue = entityToClone.ConcurrencyValue;
      newEntity.SiteUid = entityToClone.SiteUid;
      newEntity.AssaUniqueId = entityToClone.AssaUniqueId;
      newEntity.AccessPointTypeDescription = entityToClone.AccessPointTypeDescription;

      return newEntity;
    }
    #endregion

    #region CreateProperties Method
    /// <summary>
    /// Creates the collection of PDSAProperty objects. These are used to control validation and null handling.
    /// </summary>
    /// <returns>A collection of PDSAProperty objects</returns>
    public override PDSAProperties CreateProperties()
    {
      PDSAProperties props = new PDSAProperties();
      
      props.Add(PDSAProperty.Create(AssaAccessPointPDSAValidator.ColumnNames.AssaAccessPointUid, GetResourceMessage("GCS_AssaAccessPointPDSA_AssaAccessPointUid_Header", "Assa Access Point Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_AssaAccessPointPDSA_AssaAccessPointUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.NewGuid(), @"", ""));
      props.Add(PDSAProperty.Create(AssaAccessPointPDSAValidator.ColumnNames.AssaDsrUid, GetResourceMessage("GCS_AssaAccessPointPDSA_AssaDsrUid_Header", "Assa Dsr Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_AssaAccessPointPDSA_AssaDsrUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.NewGuid(), @"", ""));
      props.Add(PDSAProperty.Create(AssaAccessPointPDSAValidator.ColumnNames.AssaAccessPointTypeUid, GetResourceMessage("GCS_AssaAccessPointPDSA_AssaAccessPointTypeUid_Header", "Assa Access Point Type Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_AssaAccessPointPDSA_AssaAccessPointTypeUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.NewGuid(), @"", ""));
      props.Add(PDSAProperty.Create(AssaAccessPointPDSAValidator.ColumnNames.SerialNumber, GetResourceMessage("GCS_AssaAccessPointPDSA_SerialNumber_Header", "Serial Number"), true, typeof(string), 65, GetResourceMessage("GCS_AssaAccessPointPDSA_SerialNumber_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(AssaAccessPointPDSAValidator.ColumnNames.AccessPointName, GetResourceMessage("GCS_AssaAccessPointPDSA_AccessPointName_Header", "Access Point Name"), true, typeof(string), 65, GetResourceMessage("GCS_AssaAccessPointPDSA_AccessPointName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(AssaAccessPointPDSAValidator.ColumnNames.FirmwareVersion, GetResourceMessage("GCS_AssaAccessPointPDSA_FirmwareVersion_Header", "Firmware Version"), true, typeof(string), 65, GetResourceMessage("GCS_AssaAccessPointPDSA_FirmwareVersion_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(AssaAccessPointPDSAValidator.ColumnNames.InsertName, GetResourceMessage("GCS_AssaAccessPointPDSA_InsertName_Header", "Insert Name"), true, typeof(string), 100, GetResourceMessage("GCS_AssaAccessPointPDSA_InsertName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(AssaAccessPointPDSAValidator.ColumnNames.InsertDate, GetResourceMessage("GCS_AssaAccessPointPDSA_InsertDate_Header", "Insert Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_AssaAccessPointPDSA_InsertDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(AssaAccessPointPDSAValidator.ColumnNames.UpdateName, GetResourceMessage("GCS_AssaAccessPointPDSA_UpdateName_Header", "Update Name"), true, typeof(string), 100, GetResourceMessage("GCS_AssaAccessPointPDSA_UpdateName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(AssaAccessPointPDSAValidator.ColumnNames.UpdateDate, GetResourceMessage("GCS_AssaAccessPointPDSA_UpdateDate_Header", "Update Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_AssaAccessPointPDSA_UpdateDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(AssaAccessPointPDSAValidator.ColumnNames.ConcurrencyValue, GetResourceMessage("GCS_AssaAccessPointPDSA_ConcurrencyValue_Header", "Concurrency Value"), true, typeof(short), 5, GetResourceMessage("GCS_AssaAccessPointPDSA_ConcurrencyValue_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(AssaAccessPointPDSAValidator.ColumnNames.SiteUid, GetResourceMessage("GCS_AssaAccessPointPDSA_SiteUid_Header", "Site Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_AssaAccessPointPDSA_SiteUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.NewGuid(), @"", ""));
      props.Add(PDSAProperty.Create(AssaAccessPointPDSAValidator.ColumnNames.AssaUniqueId, GetResourceMessage("GCS_AssaAccessPointPDSA_AssaUniqueId_Header", "Assa Unique Id"), true, typeof(string), 128, GetResourceMessage("GCS_AssaAccessPointPDSA_AssaUniqueId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(AssaAccessPointPDSAValidator.ColumnNames.AccessPointTypeDescription, GetResourceMessage("GCS_AssaAccessPointPDSA_AccessPointTypeDescription_Header", "Access Point Type Description"), false, typeof(string), 2147483647, GetResourceMessage("GCS_AssaAccessPointPDSA_AccessPointTypeDescription_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      
      return props;
    }
    #endregion

    #region Initialize Entity
    /// <summary>
    /// This method is called from the CreateNewEntity Method. All the properties for the Entity are set to default values here by the code generator.
    /// </summary>
    protected override void InitializeEntity()
    {
      Entity.AssaAccessPointUid = Guid.NewGuid();
      Entity.AssaDsrUid = Guid.NewGuid();
      Entity.AssaAccessPointTypeUid = Guid.NewGuid();
      Entity.SerialNumber = string.Empty;
      Entity.AccessPointName = string.Empty;
      Entity.FirmwareVersion = string.Empty;
      Entity.InsertName = string.Empty;
      Entity.InsertDate = DateTimeOffset.Now;
      Entity.UpdateName = string.Empty;
      Entity.UpdateDate = DateTimeOffset.Now;
      Entity.ConcurrencyValue = 0;
      Entity.SiteUid = Guid.NewGuid();
      Entity.AssaUniqueId = string.Empty;
      Entity.AccessPointTypeDescription = string.Empty;

      Entity.ResetAllIsDirtyProperties();
    }
    #endregion
    
    #region InitProperties Method
    /// <summary>
    /// Called by the constructor to create the PDSAProperties collection of all properties that will be validated.
    /// </summary>
    protected override void InitProperties()
    {
      // Set the Properties collection to the collection of Entity Properties
      Properties = CreateProperties();
    }
    #endregion

    #region EntityDataToProperties Method
    /// <summary>
    /// Moves the Entity class data into the Properties collection.
    /// </summary>
    protected override void EntityDataToProperties()
    {
      if (Properties == null)
        InitProperties();
      
      if(!Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AssaAccessPointUid).SetAsNull)
        Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AssaAccessPointUid).Value = Entity.AssaAccessPointUid;
      if(!Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AssaDsrUid).SetAsNull)
        Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AssaDsrUid).Value = Entity.AssaDsrUid;
      if(!Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AssaAccessPointTypeUid).SetAsNull)
        Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AssaAccessPointTypeUid).Value = Entity.AssaAccessPointTypeUid;
      if(!Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.SerialNumber).SetAsNull)
        Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.SerialNumber).Value = Entity.SerialNumber;
      if(!Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AccessPointName).SetAsNull)
        Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AccessPointName).Value = Entity.AccessPointName;
      if(!Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.FirmwareVersion).SetAsNull)
        Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.FirmwareVersion).Value = Entity.FirmwareVersion;
      if(!Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.InsertName).SetAsNull)
        Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if(!Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.InsertDate).SetAsNull)
        Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if(!Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.UpdateName).SetAsNull)
        Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if(!Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.UpdateDate).SetAsNull)
        Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if(!Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull)
        Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
      if(!Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.SiteUid).SetAsNull)
        Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.SiteUid).Value = Entity.SiteUid;
      if(!Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AssaUniqueId).SetAsNull)
        Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AssaUniqueId).Value = Entity.AssaUniqueId;
      if(!Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AccessPointTypeDescription).SetAsNull)
        Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AccessPointTypeDescription).Value = Entity.AccessPointTypeDescription;
    }

    /// <summary>
    /// Moves the Properties collection objects into the Entity properties
    /// </summary>
    protected override void PropertiesToEntityData()
    {
      if (Properties == null)
        InitProperties();

      if(Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AssaAccessPointUid).IsNull == false)
        Entity.AssaAccessPointUid = Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AssaAccessPointUid).GetAsGuid();
      if(Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AssaDsrUid).IsNull == false)
        Entity.AssaDsrUid = Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AssaDsrUid).GetAsGuid();
      if(Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AssaAccessPointTypeUid).IsNull == false)
        Entity.AssaAccessPointTypeUid = Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AssaAccessPointTypeUid).GetAsGuid();
      if(Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.SerialNumber).IsNull == false)
        Entity.SerialNumber = Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.SerialNumber).GetAsString();
      if(Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AccessPointName).IsNull == false)
        Entity.AccessPointName = Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AccessPointName).GetAsString();
      if(Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.FirmwareVersion).IsNull == false)
        Entity.FirmwareVersion = Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.FirmwareVersion).GetAsString();
      if(Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.InsertName).GetAsString();
      if(Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
      if(Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.UpdateName).GetAsString();
      if(Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.UpdateDate).GetAsDateTimeOffset();
      if(Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
      if(Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.SiteUid).IsNull == false)
        Entity.SiteUid = Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.SiteUid).GetAsGuid();
      if(Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AssaUniqueId).IsNull == false)
        Entity.AssaUniqueId = Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AssaUniqueId).GetAsString();
      if(Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AccessPointTypeDescription).IsNull == false)
        Entity.AccessPointTypeDescription = Properties.GetByName(AssaAccessPointPDSAValidator.ColumnNames.AccessPointTypeDescription).GetAsString();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the AssaAccessPointPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'AssaAccessPointUid'
    /// </summary>
    public static string AssaAccessPointUid = "AssaAccessPointUid";
    /// <summary>
    /// Returns 'AssaDsrUid'
    /// </summary>
    public static string AssaDsrUid = "AssaDsrUid";
    /// <summary>
    /// Returns 'AssaAccessPointTypeUid'
    /// </summary>
    public static string AssaAccessPointTypeUid = "AssaAccessPointTypeUid";
    /// <summary>
    /// Returns 'SerialNumber'
    /// </summary>
    public static string SerialNumber = "SerialNumber";
    /// <summary>
    /// Returns 'AccessPointName'
    /// </summary>
    public static string AccessPointName = "AccessPointName";
    /// <summary>
    /// Returns 'FirmwareVersion'
    /// </summary>
    public static string FirmwareVersion = "FirmwareVersion";
    /// <summary>
    /// Returns 'InsertName'
    /// </summary>
    public static string InsertName = "InsertName";
    /// <summary>
    /// Returns 'InsertDate'
    /// </summary>
    public static string InsertDate = "InsertDate";
    /// <summary>
    /// Returns 'UpdateName'
    /// </summary>
    public static string UpdateName = "UpdateName";
    /// <summary>
    /// Returns 'UpdateDate'
    /// </summary>
    public static string UpdateDate = "UpdateDate";
    /// <summary>
    /// Returns 'ConcurrencyValue'
    /// </summary>
    public static string ConcurrencyValue = "ConcurrencyValue";
    /// <summary>
    /// Returns 'SiteUid'
    /// </summary>
    public static string SiteUid = "SiteUid";
    /// <summary>
    /// Returns 'AssaUniqueId'
    /// </summary>
    public static string AssaUniqueId = "AssaUniqueId";
    /// <summary>
    /// Returns 'AccessPointTypeDescription'
    /// </summary>
    public static string AccessPointTypeDescription = "AccessPointTypeDescription";
    }
    #endregion
  }
}
