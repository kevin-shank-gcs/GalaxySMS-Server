using System;

using PDSA.Common;
using PDSA.Validation;

using GalaxySMS.EntityLayer;

namespace GalaxySMS.ValidationLayer
{
  /// <summary>
  /// Used to validate all properties of the MercScpIdReportPDSA class.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class MercScpIdReportPDSAValidator : PDSAValidatorBase
  {
    #region Public Entity Property
    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    private MercScpIdReportPDSA _Entity = null;

    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    public new MercScpIdReportPDSA Entity
    {
      get { return _Entity; }
      set
      {
        _Entity = value;
        base.Entity = value;
      }
    }
    #endregion
    
    #region Clone Entity Class
    /// <summary>
    /// Clones the current MercScpIdReportPDSA
    /// </summary>
    /// <returns>A cloned MercScpIdReportPDSA object</returns>
    public MercScpIdReportPDSA CloneEntity()
    {
      return CloneEntity(this.Entity);
    }
    
    /// <summary>
    /// Clones the passed in MercScpIdReportPDSA
    /// </summary>
    /// <param name="entityToClone">The MercScpIdReportPDSA entity to clone</param>
    /// <returns>A cloned MercScpIdReportPDSA object</returns>
    public MercScpIdReportPDSA CloneEntity(MercScpIdReportPDSA entityToClone)
    {
      MercScpIdReportPDSA newEntity = new MercScpIdReportPDSA();

      newEntity.MercScpIdReportUid = entityToClone.MercScpIdReportUid;
      newEntity.MacAddress = entityToClone.MacAddress;
      newEntity.DriverSpcId = entityToClone.DriverSpcId;
      newEntity.ScpId = entityToClone.ScpId;
      newEntity.SerialNumber = entityToClone.SerialNumber;
      newEntity.DeviceId = entityToClone.DeviceId;
      newEntity.DeviceVersion = entityToClone.DeviceVersion;
      newEntity.SoftwareRevisionMajor = entityToClone.SoftwareRevisionMajor;
      newEntity.SoftwareRevisionMinor = entityToClone.SoftwareRevisionMinor;
      newEntity.CumulativeBuildCount = entityToClone.CumulativeBuildCount;
      newEntity.NeedsConfiguration = entityToClone.NeedsConfiguration;
      newEntity.TlsStatus = entityToClone.TlsStatus;
      newEntity.OemCode = entityToClone.OemCode;
      newEntity.CurrentOperatingMode = entityToClone.CurrentOperatingMode;
      newEntity.Input1State = entityToClone.Input1State;
      newEntity.Input2State = entityToClone.Input2State;
      newEntity.Input3State = entityToClone.Input3State;
      newEntity.BioDb1Active = entityToClone.BioDb1Active;
      newEntity.BioDb1Max = entityToClone.BioDb1Max;
      newEntity.BioDb2Active = entityToClone.BioDb2Active;
      newEntity.BioDb2Max = entityToClone.BioDb2Max;
      newEntity.AssetDbActive = entityToClone.AssetDbActive;
      newEntity.AssetDbMax = entityToClone.AssetDbMax;
      newEntity.FirmwareAdvisory = entityToClone.FirmwareAdvisory;
      newEntity.DipSwitchCurrent = entityToClone.DipSwitchCurrent;
      newEntity.DipSwitchPowerUp = entityToClone.DipSwitchPowerUp;
      newEntity.DbActiveRecords = entityToClone.DbActiveRecords;
      newEntity.DbMaxSize = entityToClone.DbMaxSize;
      newEntity.CurrentClock = entityToClone.CurrentClock;
      newEntity.RamFree = entityToClone.RamFree;
      newEntity.RamSize = entityToClone.RamSize;
      newEntity.InsertName = entityToClone.InsertName;
      newEntity.InsertDate = entityToClone.InsertDate;
      newEntity.UpdateName = entityToClone.UpdateName;
      newEntity.UpdateDate = entityToClone.UpdateDate;
      newEntity.ConcurrencyValue = entityToClone.ConcurrencyValue;

      return newEntity;
    }
    #endregion

    #region CreateProperties Method
    /// <summary>
    /// Creates the collection of PDSAProperty objects. These are used to control validation and null handling.
    /// </summary>
    /// <returns>A collection of PDSAProperty objects</returns>
    public override PDSAProperties CreateProperties()
    {
      PDSAProperties props = new PDSAProperties();
      
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.MercScpIdReportUid, GetResourceMessage("GCS_MercScpIdReportPDSA_MercScpIdReportUid_Header", "Merc Scp Id Report Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_MercScpIdReportPDSA_MercScpIdReportUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.MacAddress, GetResourceMessage("GCS_MercScpIdReportPDSA_MacAddress_Header", "Mac Address"), true, typeof(string), 50, GetResourceMessage("GCS_MercScpIdReportPDSA_MacAddress_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.DriverSpcId, GetResourceMessage("GCS_MercScpIdReportPDSA_DriverSpcId_Header", "Driver Spc Id"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpIdReportPDSA_DriverSpcId_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.ScpId, GetResourceMessage("GCS_MercScpIdReportPDSA_ScpId_Header", "Scp Id"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpIdReportPDSA_ScpId_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.SerialNumber, GetResourceMessage("GCS_MercScpIdReportPDSA_SerialNumber_Header", "Serial Number"), true, typeof(string), 50, GetResourceMessage("GCS_MercScpIdReportPDSA_SerialNumber_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.DeviceId, GetResourceMessage("GCS_MercScpIdReportPDSA_DeviceId_Header", "Device Id"), true, typeof(string), 50, GetResourceMessage("GCS_MercScpIdReportPDSA_DeviceId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.DeviceVersion, GetResourceMessage("GCS_MercScpIdReportPDSA_DeviceVersion_Header", "Device Version"), true, typeof(string), 50, GetResourceMessage("GCS_MercScpIdReportPDSA_DeviceVersion_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMajor, GetResourceMessage("GCS_MercScpIdReportPDSA_SoftwareRevisionMajor_Header", "Software Revision Major"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpIdReportPDSA_SoftwareRevisionMajor_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMinor, GetResourceMessage("GCS_MercScpIdReportPDSA_SoftwareRevisionMinor_Header", "Software Revision Minor"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpIdReportPDSA_SoftwareRevisionMinor_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.CumulativeBuildCount, GetResourceMessage("GCS_MercScpIdReportPDSA_CumulativeBuildCount_Header", "Cumulative Build Count"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpIdReportPDSA_CumulativeBuildCount_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.NeedsConfiguration, GetResourceMessage("GCS_MercScpIdReportPDSA_NeedsConfiguration_Header", "Needs Configuration"), true, typeof(bool), -1, GetResourceMessage("GCS_MercScpIdReportPDSA_NeedsConfiguration_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.TlsStatus, GetResourceMessage("GCS_MercScpIdReportPDSA_TlsStatus_Header", "Tls Status"), true, typeof(string), 50, GetResourceMessage("GCS_MercScpIdReportPDSA_TlsStatus_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.OemCode, GetResourceMessage("GCS_MercScpIdReportPDSA_OemCode_Header", "Oem Code"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpIdReportPDSA_OemCode_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.CurrentOperatingMode, GetResourceMessage("GCS_MercScpIdReportPDSA_CurrentOperatingMode_Header", "Current Operating Mode"), true, typeof(short), 5, GetResourceMessage("GCS_MercScpIdReportPDSA_CurrentOperatingMode_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.Input1State, GetResourceMessage("GCS_MercScpIdReportPDSA_Input1State_Header", "Input 1 State"), true, typeof(short), 5, GetResourceMessage("GCS_MercScpIdReportPDSA_Input1State_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.Input2State, GetResourceMessage("GCS_MercScpIdReportPDSA_Input2State_Header", "Input 2 State"), true, typeof(short), 5, GetResourceMessage("GCS_MercScpIdReportPDSA_Input2State_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.Input3State, GetResourceMessage("GCS_MercScpIdReportPDSA_Input3State_Header", "Input 3 State"), true, typeof(short), 5, GetResourceMessage("GCS_MercScpIdReportPDSA_Input3State_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Active, GetResourceMessage("GCS_MercScpIdReportPDSA_BioDb1Active_Header", "Bio Db 1 Active"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpIdReportPDSA_BioDb1Active_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Max, GetResourceMessage("GCS_MercScpIdReportPDSA_BioDb1Max_Header", "Bio Db 1 Max"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpIdReportPDSA_BioDb1Max_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Active, GetResourceMessage("GCS_MercScpIdReportPDSA_BioDb2Active_Header", "Bio Db 2 Active"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpIdReportPDSA_BioDb2Active_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Max, GetResourceMessage("GCS_MercScpIdReportPDSA_BioDb2Max_Header", "Bio Db 2 Max"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpIdReportPDSA_BioDb2Max_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.AssetDbActive, GetResourceMessage("GCS_MercScpIdReportPDSA_AssetDbActive_Header", "Asset Db Active"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpIdReportPDSA_AssetDbActive_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.AssetDbMax, GetResourceMessage("GCS_MercScpIdReportPDSA_AssetDbMax_Header", "Asset Db Max"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpIdReportPDSA_AssetDbMax_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.FirmwareAdvisory, GetResourceMessage("GCS_MercScpIdReportPDSA_FirmwareAdvisory_Header", "Firmware Advisory"), true, typeof(string), 50, GetResourceMessage("GCS_MercScpIdReportPDSA_FirmwareAdvisory_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchCurrent, GetResourceMessage("GCS_MercScpIdReportPDSA_DipSwitchCurrent_Header", "Dip Switch Current"), true, typeof(short), 5, GetResourceMessage("GCS_MercScpIdReportPDSA_DipSwitchCurrent_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchPowerUp, GetResourceMessage("GCS_MercScpIdReportPDSA_DipSwitchPowerUp_Header", "Dip Switch Power Up"), true, typeof(short), 5, GetResourceMessage("GCS_MercScpIdReportPDSA_DipSwitchPowerUp_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.DbActiveRecords, GetResourceMessage("GCS_MercScpIdReportPDSA_DbActiveRecords_Header", "Db Active Records"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpIdReportPDSA_DbActiveRecords_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.DbMaxSize, GetResourceMessage("GCS_MercScpIdReportPDSA_DbMaxSize_Header", "Db Max Size"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpIdReportPDSA_DbMaxSize_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.CurrentClock, GetResourceMessage("GCS_MercScpIdReportPDSA_CurrentClock_Header", "Current Clock"), true, typeof(long), 19, GetResourceMessage("GCS_MercScpIdReportPDSA_CurrentClock_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt64("-9223372036854775808"), Convert.ToInt64("9223372036854775807"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.RamFree, GetResourceMessage("GCS_MercScpIdReportPDSA_RamFree_Header", "Ram Free"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpIdReportPDSA_RamFree_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.RamSize, GetResourceMessage("GCS_MercScpIdReportPDSA_RamSize_Header", "Ram Size"), true, typeof(int), 10, GetResourceMessage("GCS_MercScpIdReportPDSA_RamSize_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.InsertName, GetResourceMessage("GCS_MercScpIdReportPDSA_InsertName_Header", "Insert Name"), true, typeof(string), 100, GetResourceMessage("GCS_MercScpIdReportPDSA_InsertName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.InsertDate, GetResourceMessage("GCS_MercScpIdReportPDSA_InsertDate_Header", "Insert Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_MercScpIdReportPDSA_InsertDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.UpdateName, GetResourceMessage("GCS_MercScpIdReportPDSA_UpdateName_Header", "Update Name"), true, typeof(string), 100, GetResourceMessage("GCS_MercScpIdReportPDSA_UpdateName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.UpdateDate, GetResourceMessage("GCS_MercScpIdReportPDSA_UpdateDate_Header", "Update Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_MercScpIdReportPDSA_UpdateDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(MercScpIdReportPDSAValidator.ColumnNames.ConcurrencyValue, GetResourceMessage("GCS_MercScpIdReportPDSA_ConcurrencyValue_Header", "Concurrency Value"), true, typeof(short), 5, GetResourceMessage("GCS_MercScpIdReportPDSA_ConcurrencyValue_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      
      return props;
    }
    #endregion

    #region Initialize Entity
    /// <summary>
    /// This method is called from the CreateNewEntity Method. All the properties for the Entity are set to default values here by the code generator.
    /// </summary>
    protected override void InitializeEntity()
    {
      Entity.MercScpIdReportUid = Guid.Empty;
      Entity.MacAddress = string.Empty;
      Entity.DriverSpcId = 0;
      Entity.ScpId = 0;
      Entity.SerialNumber = string.Empty;
      Entity.DeviceId = string.Empty;
      Entity.DeviceVersion = string.Empty;
      Entity.SoftwareRevisionMajor = 0;
      Entity.SoftwareRevisionMinor = 0;
      Entity.CumulativeBuildCount = 0;
      Entity.NeedsConfiguration = false;
      Entity.TlsStatus = string.Empty;
      Entity.OemCode = 0;
      Entity.CurrentOperatingMode = 0;
      Entity.Input1State = 0;
      Entity.Input2State = 0;
      Entity.Input3State = 0;
      Entity.BioDb1Active = 0;
      Entity.BioDb1Max = 0;
      Entity.BioDb2Active = 0;
      Entity.BioDb2Max = 0;
      Entity.AssetDbActive = 0;
      Entity.AssetDbMax = 0;
      Entity.FirmwareAdvisory = string.Empty;
      Entity.DipSwitchCurrent = 0;
      Entity.DipSwitchPowerUp = 0;
      Entity.DbActiveRecords = 0;
      Entity.DbMaxSize = 0;
      Entity.CurrentClock = 0;
      Entity.RamFree = 0;
      Entity.RamSize = 0;
      Entity.InsertName = string.Empty;
      Entity.InsertDate = DateTimeOffset.Now;
      Entity.UpdateName = string.Empty;
      Entity.UpdateDate = DateTimeOffset.Now;
      Entity.ConcurrencyValue = 0;

      Entity.ResetAllIsDirtyProperties();
    }
    #endregion
    
    #region InitProperties Method
    /// <summary>
    /// Called by the constructor to create the PDSAProperties collection of all properties that will be validated.
    /// </summary>
    protected override void InitProperties()
    {
      // Set the Properties collection to the collection of Entity Properties
      Properties = CreateProperties();
    }
    #endregion

    #region EntityDataToProperties Method
    /// <summary>
    /// Moves the Entity class data into the Properties collection.
    /// </summary>
    protected override void EntityDataToProperties()
    {
      if (Properties == null)
        InitProperties();
      
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MercScpIdReportUid).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MercScpIdReportUid).Value = Entity.MercScpIdReportUid;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MacAddress).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MacAddress).Value = Entity.MacAddress;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DriverSpcId).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DriverSpcId).Value = Entity.DriverSpcId;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ScpId).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ScpId).Value = Entity.ScpId;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SerialNumber).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SerialNumber).Value = Entity.SerialNumber;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceId).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceId).Value = Entity.DeviceId;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceVersion).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceVersion).Value = Entity.DeviceVersion;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMajor).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMajor).Value = Entity.SoftwareRevisionMajor;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMinor).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMinor).Value = Entity.SoftwareRevisionMinor;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CumulativeBuildCount).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CumulativeBuildCount).Value = Entity.CumulativeBuildCount;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.NeedsConfiguration).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.NeedsConfiguration).Value = Entity.NeedsConfiguration;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.TlsStatus).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.TlsStatus).Value = Entity.TlsStatus;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.OemCode).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.OemCode).Value = Entity.OemCode;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentOperatingMode).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentOperatingMode).Value = Entity.CurrentOperatingMode;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input1State).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input1State).Value = Entity.Input1State;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input2State).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input2State).Value = Entity.Input2State;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input3State).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input3State).Value = Entity.Input3State;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Active).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Active).Value = Entity.BioDb1Active;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Max).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Max).Value = Entity.BioDb1Max;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Active).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Active).Value = Entity.BioDb2Active;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Max).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Max).Value = Entity.BioDb2Max;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbActive).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbActive).Value = Entity.AssetDbActive;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbMax).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbMax).Value = Entity.AssetDbMax;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.FirmwareAdvisory).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.FirmwareAdvisory).Value = Entity.FirmwareAdvisory;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchCurrent).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchCurrent).Value = Entity.DipSwitchCurrent;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchPowerUp).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchPowerUp).Value = Entity.DipSwitchPowerUp;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbActiveRecords).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbActiveRecords).Value = Entity.DbActiveRecords;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbMaxSize).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbMaxSize).Value = Entity.DbMaxSize;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentClock).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentClock).Value = Entity.CurrentClock;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamFree).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamFree).Value = Entity.RamFree;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamSize).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamSize).Value = Entity.RamSize;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.InsertName).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.InsertDate).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateName).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateDate).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if(!Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull)
        Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
    }

    /// <summary>
    /// Moves the Properties collection objects into the Entity properties
    /// </summary>
    protected override void PropertiesToEntityData()
    {
      if (Properties == null)
        InitProperties();

      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MercScpIdReportUid).IsNull == false)
        Entity.MercScpIdReportUid = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MercScpIdReportUid).GetAsGuid();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MacAddress).IsNull == false)
        Entity.MacAddress = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MacAddress).GetAsString();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DriverSpcId).IsNull == false)
        Entity.DriverSpcId = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DriverSpcId).GetAsInteger();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ScpId).IsNull == false)
        Entity.ScpId = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ScpId).GetAsInteger();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SerialNumber).IsNull == false)
        Entity.SerialNumber = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SerialNumber).GetAsString();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceId).IsNull == false)
        Entity.DeviceId = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceId).GetAsString();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceVersion).IsNull == false)
        Entity.DeviceVersion = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceVersion).GetAsString();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMajor).IsNull == false)
        Entity.SoftwareRevisionMajor = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMajor).GetAsInteger();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMinor).IsNull == false)
        Entity.SoftwareRevisionMinor = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMinor).GetAsInteger();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CumulativeBuildCount).IsNull == false)
        Entity.CumulativeBuildCount = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CumulativeBuildCount).GetAsInteger();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.NeedsConfiguration).IsNull == false)
        Entity.NeedsConfiguration = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.NeedsConfiguration).GetAsBool();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.TlsStatus).IsNull == false)
        Entity.TlsStatus = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.TlsStatus).GetAsString();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.OemCode).IsNull == false)
        Entity.OemCode = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.OemCode).GetAsInteger();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentOperatingMode).IsNull == false)
        Entity.CurrentOperatingMode = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentOperatingMode).GetAsShort();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input1State).IsNull == false)
        Entity.Input1State = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input1State).GetAsShort();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input2State).IsNull == false)
        Entity.Input2State = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input2State).GetAsShort();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input3State).IsNull == false)
        Entity.Input3State = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input3State).GetAsShort();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Active).IsNull == false)
        Entity.BioDb1Active = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Active).GetAsInteger();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Max).IsNull == false)
        Entity.BioDb1Max = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Max).GetAsInteger();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Active).IsNull == false)
        Entity.BioDb2Active = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Active).GetAsInteger();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Max).IsNull == false)
        Entity.BioDb2Max = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Max).GetAsInteger();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbActive).IsNull == false)
        Entity.AssetDbActive = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbActive).GetAsInteger();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbMax).IsNull == false)
        Entity.AssetDbMax = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbMax).GetAsInteger();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.FirmwareAdvisory).IsNull == false)
        Entity.FirmwareAdvisory = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.FirmwareAdvisory).GetAsString();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchCurrent).IsNull == false)
        Entity.DipSwitchCurrent = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchCurrent).GetAsShort();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchPowerUp).IsNull == false)
        Entity.DipSwitchPowerUp = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchPowerUp).GetAsShort();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbActiveRecords).IsNull == false)
        Entity.DbActiveRecords = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbActiveRecords).GetAsInteger();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbMaxSize).IsNull == false)
        Entity.DbMaxSize = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbMaxSize).GetAsInteger();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentClock).IsNull == false)
        Entity.CurrentClock = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentClock).GetAsLong();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamFree).IsNull == false)
        Entity.RamFree = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamFree).GetAsInteger();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamSize).IsNull == false)
        Entity.RamSize = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamSize).GetAsInteger();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.InsertName).GetAsString();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateName).GetAsString();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateDate).GetAsDateTimeOffset();
      if(Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the MercScpIdReportPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'MercScpIdReportUid'
    /// </summary>
    public static string MercScpIdReportUid = "MercScpIdReportUid";
    /// <summary>
    /// Returns 'MacAddress'
    /// </summary>
    public static string MacAddress = "MacAddress";
    /// <summary>
    /// Returns 'DriverSpcId'
    /// </summary>
    public static string DriverSpcId = "DriverSpcId";
    /// <summary>
    /// Returns 'ScpId'
    /// </summary>
    public static string ScpId = "ScpId";
    /// <summary>
    /// Returns 'SerialNumber'
    /// </summary>
    public static string SerialNumber = "SerialNumber";
    /// <summary>
    /// Returns 'DeviceId'
    /// </summary>
    public static string DeviceId = "DeviceId";
    /// <summary>
    /// Returns 'DeviceVersion'
    /// </summary>
    public static string DeviceVersion = "DeviceVersion";
    /// <summary>
    /// Returns 'SoftwareRevisionMajor'
    /// </summary>
    public static string SoftwareRevisionMajor = "SoftwareRevisionMajor";
    /// <summary>
    /// Returns 'SoftwareRevisionMinor'
    /// </summary>
    public static string SoftwareRevisionMinor = "SoftwareRevisionMinor";
    /// <summary>
    /// Returns 'CumulativeBuildCount'
    /// </summary>
    public static string CumulativeBuildCount = "CumulativeBuildCount";
    /// <summary>
    /// Returns 'NeedsConfiguration'
    /// </summary>
    public static string NeedsConfiguration = "NeedsConfiguration";
    /// <summary>
    /// Returns 'TlsStatus'
    /// </summary>
    public static string TlsStatus = "TlsStatus";
    /// <summary>
    /// Returns 'OemCode'
    /// </summary>
    public static string OemCode = "OemCode";
    /// <summary>
    /// Returns 'CurrentOperatingMode'
    /// </summary>
    public static string CurrentOperatingMode = "CurrentOperatingMode";
    /// <summary>
    /// Returns 'Input1State'
    /// </summary>
    public static string Input1State = "Input1State";
    /// <summary>
    /// Returns 'Input2State'
    /// </summary>
    public static string Input2State = "Input2State";
    /// <summary>
    /// Returns 'Input3State'
    /// </summary>
    public static string Input3State = "Input3State";
    /// <summary>
    /// Returns 'BioDb1Active'
    /// </summary>
    public static string BioDb1Active = "BioDb1Active";
    /// <summary>
    /// Returns 'BioDb1Max'
    /// </summary>
    public static string BioDb1Max = "BioDb1Max";
    /// <summary>
    /// Returns 'BioDb2Active'
    /// </summary>
    public static string BioDb2Active = "BioDb2Active";
    /// <summary>
    /// Returns 'BioDb2Max'
    /// </summary>
    public static string BioDb2Max = "BioDb2Max";
    /// <summary>
    /// Returns 'AssetDbActive'
    /// </summary>
    public static string AssetDbActive = "AssetDbActive";
    /// <summary>
    /// Returns 'AssetDbMax'
    /// </summary>
    public static string AssetDbMax = "AssetDbMax";
    /// <summary>
    /// Returns 'FirmwareAdvisory'
    /// </summary>
    public static string FirmwareAdvisory = "FirmwareAdvisory";
    /// <summary>
    /// Returns 'DipSwitchCurrent'
    /// </summary>
    public static string DipSwitchCurrent = "DipSwitchCurrent";
    /// <summary>
    /// Returns 'DipSwitchPowerUp'
    /// </summary>
    public static string DipSwitchPowerUp = "DipSwitchPowerUp";
    /// <summary>
    /// Returns 'DbActiveRecords'
    /// </summary>
    public static string DbActiveRecords = "DbActiveRecords";
    /// <summary>
    /// Returns 'DbMaxSize'
    /// </summary>
    public static string DbMaxSize = "DbMaxSize";
    /// <summary>
    /// Returns 'CurrentClock'
    /// </summary>
    public static string CurrentClock = "CurrentClock";
    /// <summary>
    /// Returns 'RamFree'
    /// </summary>
    public static string RamFree = "RamFree";
    /// <summary>
    /// Returns 'RamSize'
    /// </summary>
    public static string RamSize = "RamSize";
    /// <summary>
    /// Returns 'InsertName'
    /// </summary>
    public static string InsertName = "InsertName";
    /// <summary>
    /// Returns 'InsertDate'
    /// </summary>
    public static string InsertDate = "InsertDate";
    /// <summary>
    /// Returns 'UpdateName'
    /// </summary>
    public static string UpdateName = "UpdateName";
    /// <summary>
    /// Returns 'UpdateDate'
    /// </summary>
    public static string UpdateDate = "UpdateDate";
    /// <summary>
    /// Returns 'ConcurrencyValue'
    /// </summary>
    public static string ConcurrencyValue = "ConcurrencyValue";
    }
    #endregion
  }
}
