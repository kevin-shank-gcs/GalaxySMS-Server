using System;

using PDSA.Validation;

using GalaxySMS.EntityLayer;

namespace GalaxySMS.ValidationLayer
{
  /// <summary>
  /// Used to validate all properties of the gcsApplicationAuditPDSA class.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class gcsApplicationAuditPDSAValidator : PDSAValidatorBase
  {
    #region Public Entity Property
    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    private gcsApplicationAuditPDSA _Entity = null;

    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    public new gcsApplicationAuditPDSA Entity
    {
      get { return _Entity; }
      set
      {
        _Entity = value;
        base.Entity = value;
      }
    }
    #endregion
    
    #region Clone Entity Class
    /// <summary>
    /// Clones the current gcsApplicationAuditPDSA
    /// </summary>
    /// <returns>A cloned gcsApplicationAuditPDSA object</returns>
    public gcsApplicationAuditPDSA CloneEntity()
    {
      return CloneEntity(this.Entity);
    }
    
    /// <summary>
    /// Clones the passed in gcsApplicationAuditPDSA
    /// </summary>
    /// <param name="entityToClone">The gcsApplicationAuditPDSA entity to clone</param>
    /// <returns>A cloned gcsApplicationAuditPDSA object</returns>
    public gcsApplicationAuditPDSA CloneEntity(gcsApplicationAuditPDSA entityToClone)
    {
      gcsApplicationAuditPDSA newEntity = new gcsApplicationAuditPDSA();

      newEntity.AuditId = entityToClone.AuditId;
      newEntity.ApplicationAuditTypeId = entityToClone.ApplicationAuditTypeId;
      newEntity.TransactionId = entityToClone.TransactionId;
      newEntity.ApplicationId = entityToClone.ApplicationId;
      newEntity.UserId = entityToClone.UserId;
      newEntity.ApplicationName = entityToClone.ApplicationName;
      newEntity.ApplicationVersion = entityToClone.ApplicationVersion;
      newEntity.MachineName = entityToClone.MachineName;
      newEntity.LoginName = entityToClone.LoginName;
      newEntity.WindowsUserName = entityToClone.WindowsUserName;
      newEntity.AuditDetails = entityToClone.AuditDetails;
      newEntity.AuditXml = entityToClone.AuditXml;
      newEntity.InsertName = entityToClone.InsertName;
      newEntity.InsertDate = entityToClone.InsertDate;

      return newEntity;
    }
    #endregion

    #region CreateProperties Method
    /// <summary>
    /// Creates the collection of PDSAProperty objects. These are used to control validation and null handling.
    /// </summary>
    /// <returns>A collection of PDSAProperty objects</returns>
    public override PDSAProperties CreateProperties()
    {
      PDSAProperties props = new PDSAProperties();
      
      props.Add(PDSAProperty.Create(gcsApplicationAuditPDSAValidator.ColumnNames.AuditId, GetResourceMessage("GCS_gcsApplicationAuditPDSA_AuditId_Header", "Audit Id"), true, typeof(Guid), -1, GetResourceMessage("GCS_gcsApplicationAuditPDSA_AuditId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.NewGuid(), @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationAuditTypeId, GetResourceMessage("GCS_gcsApplicationAuditPDSA_ApplicationAuditTypeId_Header", "Application Audit Type Id"), true, typeof(Guid), -1, GetResourceMessage("GCS_gcsApplicationAuditPDSA_ApplicationAuditTypeId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.NewGuid(), @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationAuditPDSAValidator.ColumnNames.TransactionId, GetResourceMessage("GCS_gcsApplicationAuditPDSA_TransactionId_Header", "Transaction Id"), true, typeof(Guid), -1, GetResourceMessage("GCS_gcsApplicationAuditPDSA_TransactionId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.NewGuid(), @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationId, GetResourceMessage("GCS_gcsApplicationAuditPDSA_ApplicationId_Header", "Application Id"), true, typeof(Guid), -1, GetResourceMessage("GCS_gcsApplicationAuditPDSA_ApplicationId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.NewGuid(), @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationAuditPDSAValidator.ColumnNames.UserId, GetResourceMessage("GCS_gcsApplicationAuditPDSA_UserId_Header", "User Id"), true, typeof(Guid), -1, GetResourceMessage("GCS_gcsApplicationAuditPDSA_UserId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.NewGuid(), @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationName, GetResourceMessage("GCS_gcsApplicationAuditPDSA_ApplicationName_Header", "Application Name"), false, typeof(string), 65, GetResourceMessage("GCS_gcsApplicationAuditPDSA_ApplicationName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationVersion, GetResourceMessage("GCS_gcsApplicationAuditPDSA_ApplicationVersion_Header", "Application Version"), false, typeof(string), 65, GetResourceMessage("GCS_gcsApplicationAuditPDSA_ApplicationVersion_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationAuditPDSAValidator.ColumnNames.MachineName, GetResourceMessage("GCS_gcsApplicationAuditPDSA_MachineName_Header", "Machine Name"), false, typeof(string), 65, GetResourceMessage("GCS_gcsApplicationAuditPDSA_MachineName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationAuditPDSAValidator.ColumnNames.LoginName, GetResourceMessage("GCS_gcsApplicationAuditPDSA_LoginName_Header", "Login Name"), false, typeof(string), 100, GetResourceMessage("GCS_gcsApplicationAuditPDSA_LoginName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationAuditPDSAValidator.ColumnNames.WindowsUserName, GetResourceMessage("GCS_gcsApplicationAuditPDSA_WindowsUserName_Header", "Windows User Name"), false, typeof(string), 100, GetResourceMessage("GCS_gcsApplicationAuditPDSA_WindowsUserName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationAuditPDSAValidator.ColumnNames.AuditDetails, GetResourceMessage("GCS_gcsApplicationAuditPDSA_AuditDetails_Header", "Audit Details"), false, typeof(string), 1000, GetResourceMessage("GCS_gcsApplicationAuditPDSA_AuditDetails_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationAuditPDSAValidator.ColumnNames.AuditXml, GetResourceMessage("GCS_gcsApplicationAuditPDSA_AuditXml_Header", "Audit Xml"), false, typeof(string), -1, GetResourceMessage("GCS_gcsApplicationAuditPDSA_AuditXml_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationAuditPDSAValidator.ColumnNames.InsertName, GetResourceMessage("GCS_gcsApplicationAuditPDSA_InsertName_Header", "Insert Name"), true, typeof(string), 100, GetResourceMessage("GCS_gcsApplicationAuditPDSA_InsertName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsApplicationAuditPDSAValidator.ColumnNames.InsertDate, GetResourceMessage("GCS_gcsApplicationAuditPDSA_InsertDate_Header", "Insert Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_gcsApplicationAuditPDSA_InsertDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      
      return props;
    }
    #endregion

    #region Initialize Entity
    /// <summary>
    /// This method is called from the CreateNewEntity Method. All the properties for the Entity are set to default values here by the code generator.
    /// </summary>
    protected override void InitializeEntity()
    {
      Entity.AuditId = Guid.NewGuid();
      Entity.ApplicationAuditTypeId = Guid.NewGuid();
      Entity.TransactionId = Guid.NewGuid();
      Entity.ApplicationId = Guid.NewGuid();
      Entity.UserId = Guid.NewGuid();
      Entity.ApplicationName = string.Empty;
      Entity.ApplicationVersion = string.Empty;
      Entity.MachineName = string.Empty;
      Entity.LoginName = string.Empty;
      Entity.WindowsUserName = string.Empty;
      Entity.AuditDetails = string.Empty;
      Entity.AuditXml = string.Empty;
      Entity.InsertName = string.Empty;
      Entity.InsertDate = DateTimeOffset.Now;

      Entity.ResetAllIsDirtyProperties();
    }
    #endregion
    
    #region InitProperties Method
    /// <summary>
    /// Called by the constructor to create the PDSAProperties collection of all properties that will be validated.
    /// </summary>
    protected override void InitProperties()
    {
      // Set the Properties collection to the collection of Entity Properties
      Properties = CreateProperties();
    }
    #endregion

    #region EntityDataToProperties Method
    /// <summary>
    /// Moves the Entity class data into the Properties collection.
    /// </summary>
    protected override void EntityDataToProperties()
    {
      if (Properties == null)
        InitProperties();
      
      if(!Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditId).SetAsNull)
        Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditId).Value = Entity.AuditId;
      if(!Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationAuditTypeId).SetAsNull)
        Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationAuditTypeId).Value = Entity.ApplicationAuditTypeId;
      if(!Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.TransactionId).SetAsNull)
        Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.TransactionId).Value = Entity.TransactionId;
      if(!Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationId).SetAsNull)
        Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationId).Value = Entity.ApplicationId;
      if(!Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.UserId).SetAsNull)
        Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.UserId).Value = Entity.UserId;
      if(!Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationName).SetAsNull)
        Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationName).Value = Entity.ApplicationName;
      if(!Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationVersion).SetAsNull)
        Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationVersion).Value = Entity.ApplicationVersion;
      if(!Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.MachineName).SetAsNull)
        Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.MachineName).Value = Entity.MachineName;
      if(!Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.LoginName).SetAsNull)
        Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.LoginName).Value = Entity.LoginName;
      if(!Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.WindowsUserName).SetAsNull)
        Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.WindowsUserName).Value = Entity.WindowsUserName;
      if(!Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditDetails).SetAsNull)
        Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditDetails).Value = Entity.AuditDetails;
      if(!Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditXml).SetAsNull)
        Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditXml).Value = Entity.AuditXml;
      if(!Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.InsertName).SetAsNull)
        Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if(!Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.InsertDate).SetAsNull)
        Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
    }

    /// <summary>
    /// Moves the Properties collection objects into the Entity properties
    /// </summary>
    protected override void PropertiesToEntityData()
    {
      if (Properties == null)
        InitProperties();

      if(Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditId).IsNull == false)
        Entity.AuditId = Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditId).GetAsGuid();
      if(Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationAuditTypeId).IsNull == false)
        Entity.ApplicationAuditTypeId = Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationAuditTypeId).GetAsGuid();
      if(Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.TransactionId).IsNull == false)
        Entity.TransactionId = Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.TransactionId).GetAsGuid();
      if(Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationId).IsNull == false)
        Entity.ApplicationId = Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationId).GetAsGuid();
      if(Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.UserId).IsNull == false)
        Entity.UserId = Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.UserId).GetAsGuid();
      if(Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationName).IsNull == false)
        Entity.ApplicationName = Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationName).GetAsString();
      if(Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationVersion).IsNull == false)
        Entity.ApplicationVersion = Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.ApplicationVersion).GetAsString();
      if(Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.MachineName).IsNull == false)
        Entity.MachineName = Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.MachineName).GetAsString();
      if(Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.LoginName).IsNull == false)
        Entity.LoginName = Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.LoginName).GetAsString();
      if(Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.WindowsUserName).IsNull == false)
        Entity.WindowsUserName = Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.WindowsUserName).GetAsString();
      if(Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditDetails).IsNull == false)
        Entity.AuditDetails = Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditDetails).GetAsString();
      if(Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditXml).IsNull == false)
        Entity.AuditXml = Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.AuditXml).GetAsString();
      if(Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.InsertName).GetAsString();
      if(Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = Properties.GetByName(gcsApplicationAuditPDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the gcsApplicationAuditPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'AuditId'
    /// </summary>
    public static string AuditId = "AuditId";
    /// <summary>
    /// Returns 'ApplicationAuditTypeId'
    /// </summary>
    public static string ApplicationAuditTypeId = "ApplicationAuditTypeId";
    /// <summary>
    /// Returns 'TransactionId'
    /// </summary>
    public static string TransactionId = "TransactionId";
    /// <summary>
    /// Returns 'ApplicationId'
    /// </summary>
    public static string ApplicationId = "ApplicationId";
    /// <summary>
    /// Returns 'UserId'
    /// </summary>
    public static string UserId = "UserId";
    /// <summary>
    /// Returns 'ApplicationName'
    /// </summary>
    public static string ApplicationName = "ApplicationName";
    /// <summary>
    /// Returns 'ApplicationVersion'
    /// </summary>
    public static string ApplicationVersion = "ApplicationVersion";
    /// <summary>
    /// Returns 'MachineName'
    /// </summary>
    public static string MachineName = "MachineName";
    /// <summary>
    /// Returns 'LoginName'
    /// </summary>
    public static string LoginName = "LoginName";
    /// <summary>
    /// Returns 'WindowsUserName'
    /// </summary>
    public static string WindowsUserName = "WindowsUserName";
    /// <summary>
    /// Returns 'AuditDetails'
    /// </summary>
    public static string AuditDetails = "AuditDetails";
    /// <summary>
    /// Returns 'AuditXml'
    /// </summary>
    public static string AuditXml = "AuditXml";
    /// <summary>
    /// Returns 'InsertName'
    /// </summary>
    public static string InsertName = "InsertName";
    /// <summary>
    /// Returns 'InsertDate'
    /// </summary>
    public static string InsertDate = "InsertDate";
    }
    #endregion
  }
}
