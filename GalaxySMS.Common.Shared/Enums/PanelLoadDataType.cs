using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GalaxySMS.Common.Enums
{
    public enum PanelLoadDataType
    {
        CpuHeartbeat,
        RecalibrateIoCommand1,
        RecalibrateIoCommand2,
        NotificationCardAreaChange,
        CommandResetCpu,
        RecalibrateIoCommand7,
        RecalibrateIoCommand8,
        CommandClearAutoTimer,
        CommandLoadBoardSectionNodeData,
        CommandLoadAccessGroupSchedulesForDoor,
        CommandLoadTimeSchedule15MinuteFormat,
        CommandLoadExtendedCards,
        CommandLoadStandardCards,
        CommandDeleteCard,
        CommandLoadAccessGroupSchedule,
        CommandClearTimeSchedules,
        CommandClearAllUsers,
        CommandClearAccessGroupRange,
        CommandLoadAccessGroupsCrisisGroups,
        CommandSetDateTime,
        CommandPing,
        CommandLoad15MinuteScheduleHolidayTable,
        CommandPanelInquire,
        CommandRequestTotalCardCount,
        NotificationInternalPanelRecalibrate,
        PanelRecalibrateComplete,
        //CommandUnlockDoor,
        //CommandLockDoor,
        //CommandDisableDoor,
        //CommandEnableDoor,
        //CommandPulseDoor,
        //CommandUnlockDoorGroup,
        //CommandLockDoorGroup,
        //CommandDisableDoorGroup,
        //CommandEnableDoorGroup,
        //CommandRelay2Off,
        //CommandRequestReaderPortStatus,
        //CommandRelay2On,
        //CommandSetLedTemporaryState,
        //CommandShuntIOGroup,
        //CommandUnshuntIOGroup,
        //CommandDisableInput,
        //CommandEnableInput,
        //CommandArmIOGroup,
        //CommandDisarmIOGroup,
        //CommandShuntInput,
        //CommandUnshuntInput,
        //CommandRequestInputStatus,
        //CommandOutputOn,
        //CommandOutputOff,
        //CommandOutputEnable,
        //CommandOutputDisable,
        //CommandRequestOutputStatus,
        //CommandElevatorPulse,
        //CommandElevatorEarlyOn,
        //CommandElevatorEarlyOff,
        //CommandElevatorCancelEarlyOn,
        //CommandElevatorCancelEarlyOff,
        CommandLoadPersonalDoors,
        CommandLoggingSetOnOff,
        CommandLoggingResetPointers,
        CommandLoggingAcknowledgeToMessageIndex,
        CommandSignOnChallenge,  
        CommandSignOnChallengeResponse,  
        CommandRequestConnectedBoardInformation,
        CommandLoadTimeAdjustment,
        CommandSetCardLoadAcknowledgePanel,
        CommandRequestLoggingInformation,
        CommandLoadTamperAcFailureLowBattery,
        CommandLoadABAOptions,
        CommandLoadLockoutOptions,
        CommandForgivePassbackCard,
        CommandForgivePassbackEverybody,
        CommandRecalibrate,
        CommandCardEnable,
        CommandCardDisable,
        CommandSetUserAuthority,
        CommandLoadLedOptions,
        CommandLoadCrisisModeIOGroup,
        CommandResetCrisisMode,
        CommandSetCrisisMode,
        CommandLoadWiegandStartStopSettings,
        CommandLoad15MinuteScheduleHolidays, // holidays 2 - 9
        CommandLoadCardaxStartStopSettings,
        CommandGetIOGroupCounters,
        //NotificationCounterBelowZero,
        //NotificationEventPreviousStateInvalid,
        //NotificationEventNewStateInvalid,
        //NotificationEventIOLevel,
        CommandLoadIOGroupArmSchedule,
        //NotificationInputOutputGroupBitsRepaired,
        CommandInitializeBoardSection,
        //NotificationEventIOPulse,
        //NotificationEventRecalibrate,
        //CommandBeginFlashLoad600,
        //CommandLoadFlashPacket600,
        //CommandValidateFlash600,
        //CommandValidateThenBurnFlash600,
        LoadAccessGroupCrisisGroup,
        //NotificationCardNotInPanelMemory,
        CommandSetServerConsultationOptions,
        //NotificationCardHasBeenRead,
        //NotificationCardRemoteAccessRuleOverride,
        CommandLoadMinuteScheduleDayTypes,
        CommandLoadMinuteScheduleTimePeriod,
        CommandLoadMinuteScheduleTimePeriodsForDayType,
        CommandCardRemoteAccessRuleOverrideReply,
        //CommandBeginFlashLoad635,
        //CommandLoadFlashPacket635,
        //CommandValidateFlash635,
        //CommandValidateThenBurnFlash635,
    }
}
