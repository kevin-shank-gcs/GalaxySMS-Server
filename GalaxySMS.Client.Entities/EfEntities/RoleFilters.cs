//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	
    using FluentValidation;
    
	[DataContract]
	public partial class RoleFilters : DbObjectBase, ITableEntityBase
    {
   	
    	private System.Guid _roleId;
    
    	[DataMember]
    	public System.Guid RoleId
    	{ 
    		get { return _roleId; }
    		set
    		{
    			if (_roleId != value )
    			{
    				_roleId = value;
    				OnPropertyChanged(() => RoleId);
    			}
    		}
    	}
    	
    	private bool _includeAllRegions;
    
    	[DataMember]
    	public bool IncludeAllRegions
    	{ 
    		get { return _includeAllRegions; }
    		set
    		{
    			if (_includeAllRegions != value )
    			{
    				_includeAllRegions = value;
    				OnPropertyChanged(() => IncludeAllRegions);
    			}
    		}
    	}
    	
    	private bool _includeAllSites;
    
    	[DataMember]
    	public bool IncludeAllSites
    	{ 
    		get { return _includeAllSites; }
    		set
    		{
    			if (_includeAllSites != value )
    			{
    				_includeAllSites = value;
    				OnPropertyChanged(() => IncludeAllSites);
    			}
    		}
    	}
    	
    	private bool _includeAllClusters;
    
    	[DataMember]
    	public bool IncludeAllClusters
    	{ 
    		get { return _includeAllClusters; }
    		set
    		{
    			if (_includeAllClusters != value )
    			{
    				_includeAllClusters = value;
    				OnPropertyChanged(() => IncludeAllClusters);
    			}
    		}
    	}

        private bool _includeAllAccessPortals;

        [DataMember]
        public bool IncludeAllAccessPortals
        {
            get { return _includeAllAccessPortals; }
            set
            {
                if (_includeAllAccessPortals != value)
                {
                    _includeAllAccessPortals = value;
                    OnPropertyChanged(() => IncludeAllAccessPortals);
                }
            }
        }

        private bool _includeAllInputOutputDevices;

        [DataMember]
        public bool IncludeAllInputDevices
        {
            get { return _includeAllInputOutputDevices; }
            set
            {
                if (_includeAllInputOutputDevices != value)
                {
                    _includeAllInputOutputDevices = value;
                    OnPropertyChanged(() => IncludeAllInputDevices);
                }
            }
        }

        private bool _includeAllOutputDevices;

        [DataMember]
        public bool IncludeAllOutputDevices
        {
            get { return _includeAllOutputDevices; }
            set
            {
                if (_includeAllOutputDevices != value)
                {
                    _includeAllOutputDevices = value;
                    OnPropertyChanged(() => IncludeAllOutputDevices);
                }
            }
        }

        private bool _includeAllInputOutputGroups;

        [DataMember]
        public bool IncludeAllInputOutputGroups
        {
            get { return _includeAllInputOutputGroups; }
            set
            {
                if (_includeAllInputOutputGroups != value)
                {
                    _includeAllInputOutputGroups = value;
                    OnPropertyChanged(() => IncludeAllInputOutputGroups);
                }
            }
        }

        private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private System.DateTimeOffset _insertDate;
    
    	[DataMember]
    	public System.DateTimeOffset InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTimeOffset> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTimeOffset> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}


        //private ICollection<RoleCluster> _clusters;

        //[DataMember]
        //public ICollection<RoleCluster> Clusters
        //{ 
        //	get { return _clusters; }
        //	set
        //	{
        //		if (_clusters != value )
        //		{
        //               _clusters = value;
        //			OnPropertyChanged(() => Clusters);
        //		}
        //	}
        //}
        private ICollection<RoleRegion> _regions;

        [DataMember]
        public ICollection<RoleRegion> Regions
        {
            get { return _regions; }
            set
            {
                if (_regions != value)
                {
                    _regions = value;
                    OnPropertyChanged(() => Regions);
                }
            }
        }
    }
    
}
