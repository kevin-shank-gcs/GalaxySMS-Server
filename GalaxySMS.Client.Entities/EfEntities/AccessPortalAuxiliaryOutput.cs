//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
    using GCS.Core.Common.Core;
    using GCS.Core.Common.Contracts;
    using FluentValidation;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   The access portal auxiliary output. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    [DataContract]
    public partial class AccessPortalAuxiliaryOutput : DbObjectBase, ITableEntityBase
    {

        /*	// Move to partial class
        using System;
        using System.Collections.Generic;
        using System.Runtime.Serialization;
        using GCS.Core.Common.Core;
        using GCS.Core.Common.Contracts;	using FluentValidation;
        using System.Collections.ObjectModel;
        using GCS.Core.Common.Extensions;

        namespace GalaxySMS.Client.Entities
        {
            public partial class AccessPortalAuxiliaryOutput
            {
                public AccessPortalAuxiliaryOutput() : base()
                {
                    Initialize();
                }

                public AccessPortalAuxiliaryOutput(AccessPortalAuxiliaryOutput e) : base(e)
                {
                    Initialize(e);
                }

                public void Initialize()
                {
                    base.Initialize();
                    this.AccessPortalAuxiliaryOutputTriggeringEvents = new HashSet<AccessPortalAuxiliaryOutputTriggeringEvent>();
            }

                public void Initialize(AccessPortalAuxiliaryOutput e)
                {
                    Initialize();
                    base.Initialize(e);

                    if( e == null )
                        return;
                    this.AccessPortalAuxiliaryOutputUid = e.AccessPortalAuxiliaryOutputUid;
                    this.AccessPortalUid = e.AccessPortalUid;
                    this.AccessPortalAuxiliaryOutputModeUid = e.AccessPortalAuxiliaryOutputModeUid;
                    this.TimeScheduleUid = e.TimeScheduleUid;
                    this.Description = e.Description;
                    this.Tag = e.Tag;
                    this.ActivationDelay = e.ActivationDelay;
                    this.ActivationDuration = e.ActivationDuration;
                    this.InsertName = e.InsertName;
                    this.InsertDate = e.InsertDate;
                    this.UpdateName = e.UpdateName;
                    this.UpdateDate = e.UpdateDate;
                    this.ConcurrencyValue = e.ConcurrencyValue;
                    this.AccessPortalAuxiliaryOutputTriggeringEvents = e.AccessPortalAuxiliaryOutputTriggeringEvents.ToCollection();

                }

                public AccessPortalAuxiliaryOutput Clone(AccessPortalAuxiliaryOutput e)
                {
                    return new AccessPortalAuxiliaryOutput(e);
                }

                public bool Equals(AccessPortalAuxiliaryOutput other)
                {
                    return base.Equals(other);
                }

                public bool IsPrimaryKeyEqual(AccessPortalAuxiliaryOutput other)
                {
                    if( other == null ) 
                        return false;

                    if(other.AccessPortalAuxiliaryOutputUid != this.AccessPortalAuxiliaryOutputUid )
                        return false;
                    return true;
                }

                public override int GetHashCode()
                {
                    return base.GetHashCode();
                }

                public override string ToString()
                {
                    return base.ToString();
                }
            }
        }
        */


        /// <summary>   The access portal auxiliary output UID. </summary>
        private System.Guid _accessPortalAuxiliaryOutputUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the access portal auxiliary output UID. </summary>
        ///
        /// <value> The access portal auxiliary output UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public System.Guid AccessPortalAuxiliaryOutputUid
        {
            get { return _accessPortalAuxiliaryOutputUid; }
            set
            {
                if (_accessPortalAuxiliaryOutputUid != value)
                {
                    _accessPortalAuxiliaryOutputUid = value;
                    OnPropertyChanged(() => AccessPortalAuxiliaryOutputUid);
                }
            }
        }

        /// <summary>   The access portal UID. </summary>
        private System.Guid _accessPortalUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the access portal UID. </summary>
        ///
        /// <value> The access portal UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public System.Guid AccessPortalUid
        {
            get { return _accessPortalUid; }
            set
            {
                if (_accessPortalUid != value)
                {
                    _accessPortalUid = value;
                    OnPropertyChanged(() => AccessPortalUid);
                }
            }
        }

        /// <summary>   The access portal auxiliary output mode UID. </summary>
        private System.Guid _accessPortalAuxiliaryOutputModeUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the access portal auxiliary output mode UID. </summary>
        ///
        /// <value> The access portal auxiliary output mode UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public System.Guid AccessPortalAuxiliaryOutputModeUid
        {
            get { return _accessPortalAuxiliaryOutputModeUid; }
            set
            {
                if (_accessPortalAuxiliaryOutputModeUid != value)
                {
                    _accessPortalAuxiliaryOutputModeUid = value;

                    if (AccessPortalAuxiliaryOutputModeUid == GalaxySMS.Common.Constants.AccessPortalAuxiliaryOutputModeIds.Follows)
                    {
                        InvalidAttempt = false;
                        AccessGranted = false;
                        Duress = false;
                        PassbackViolation = false;
                    }
                    else if (AccessPortalAuxiliaryOutputModeUid == GalaxySMS.Common.Constants.AccessPortalAuxiliaryOutputModeIds.Scheduled)
                    {
                        IllegalOpen = false;
                        OpenTooLong = false;
                        InvalidAttempt = false;
                        AccessGranted = false;
                        Duress = false;
                        PassbackViolation = false;
                    }


                    OnPropertyChanged(() => AccessPortalAuxiliaryOutputModeUid, true, true);
                    OnPropertyChanged(() => IllegalOpenAllowed, false);
                    OnPropertyChanged(() => OpenTooLongAllowed, false);
                    OnPropertyChanged(() => AccessGrantedAllowed, false);
                    OnPropertyChanged(() => InvalidAttemptAllowed, false);
                    OnPropertyChanged(() => DuressAllowed, false);
                    OnPropertyChanged(() => PassbackAllowed, false);
                    OnPropertyChanged(() => TimingControlsAllowed, false);

                }
            }
        }

        /// <summary>   The time schedule UID. </summary>
        private System.Guid _timeScheduleUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the time schedule UID. </summary>
        ///
        /// <value> The time schedule UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public System.Guid TimeScheduleUid
        {
            get { return _timeScheduleUid; }
            set
            {
                if (_timeScheduleUid != value)
                {
                    _timeScheduleUid = value;
                    OnPropertyChanged(() => TimeScheduleUid, true, true);
                }
            }
        }

        /// <summary>   The description. </summary>
        private string _description;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the description. </summary>
        ///
        /// <value> The description. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged(() => Description);
                }
            }
        }

        /// <summary>   The tag. </summary>
        private string _tag;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the tag. </summary>
        ///
        /// <value> The tag. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public string Tag
        {
            get { return _tag; }
            set
            {
                if (_tag != value)
                {
                    _tag = value;
                    OnPropertyChanged(() => Tag);
                }
            }
        }

        /// <summary>   The activation delay. </summary>
        private int _activationDelay;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the activation delay. </summary>
        ///
        /// <value> The activation delay. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public int ActivationDelay
        {
            get { return _activationDelay; }
            set
            {
                if (_activationDelay != value)
                {
                    _activationDelay = value;
                    OnPropertyChanged(() => ActivationDelay, true, true);
                }
            }
        }

        /// <summary>   Duration of the activation. </summary>
        private int _activationDuration;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the duration of the activation. </summary>
        ///
        /// <value> The activation duration. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public int ActivationDuration
        {
            get { return _activationDuration; }
            set
            {
                if (_activationDuration != value)
                {
                    _activationDuration = value;
                    OnPropertyChanged(() => ActivationDuration, true, true);
                }
            }
        }

        /// <summary>   Name of the insert. </summary>
        private string _insertName;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the name of the insert. </summary>
        ///
        /// <value> The name of the insert. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public string InsertName
        {
            get { return _insertName; }
            set
            {
                if (_insertName != value)
                {
                    _insertName = value;
                    OnPropertyChanged(() => InsertName);
                }
            }
        }

        /// <summary>   The insert date. </summary>
        private System.DateTimeOffset _insertDate;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the insert date. </summary>
        ///
        /// <value> The insert date. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public System.DateTimeOffset InsertDate
        {
            get { return _insertDate; }
            set
            {
                if (_insertDate != value)
                {
                    _insertDate = value;
                    OnPropertyChanged(() => InsertDate);
                }
            }
        }

        /// <summary>   Name of the update. </summary>
        private string _updateName;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the name of the update. </summary>
        ///
        /// <value> The name of the update. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public string UpdateName
        {
            get { return _updateName; }
            set
            {
                if (_updateName != value)
                {
                    _updateName = value;
                    OnPropertyChanged(() => UpdateName);
                }
            }
        }

        /// <summary>   The update. </summary>
        private Nullable<System.DateTimeOffset> _updateDate;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the update. </summary>
        ///
        /// <value> The update date. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public Nullable<System.DateTimeOffset> UpdateDate
        {
            get { return _updateDate; }
            set
            {
                if (_updateDate != value)
                {
                    _updateDate = value;
                    OnPropertyChanged(() => UpdateDate);
                }
            }
        }

        /// <summary>   The concurrency value. </summary>
        private Nullable<short> _concurrencyValue;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the concurrency value. </summary>
        ///
        /// <value> The concurrency value. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public Nullable<short> ConcurrencyValue
        {
            get { return _concurrencyValue; }
            set
            {
                if (_concurrencyValue != value)
                {
                    _concurrencyValue = value;
                    OnPropertyChanged(() => ConcurrencyValue);
                }
            }
        }


        //   /// <summary>   The access portal. </summary>
        //private AccessPortal _accessPortal;

        //   ////////////////////////////////////////////////////////////////////////////////////////////////////
        //   /// <summary>   Gets or sets the access portal. </summary>
        //   ///
        //   /// <value> The access portal. </value>
        //   ////////////////////////////////////////////////////////////////////////////////////////////////////

        //[DataMember]
        //public virtual AccessPortal AccessPortal
        //{ 
        //	get { return _accessPortal; }
        //	set
        //	{
        //		if (_accessPortal != value )
        //		{
        //			_accessPortal = value;
        //			OnPropertyChanged(() => AccessPortal);
        //		}
        //	}
        //}

        //   /// <summary>   The access portal auxiliary output mode. </summary>
        //private AccessPortalAuxiliaryOutputMode _accessPortalAuxiliaryOutputMode;

        //   ////////////////////////////////////////////////////////////////////////////////////////////////////
        //   /// <summary>   Gets or sets the access portal auxiliary output mode. </summary>
        //   ///
        //   /// <value> The access portal auxiliary output mode. </value>
        //   ////////////////////////////////////////////////////////////////////////////////////////////////////

        //[DataMember]
        //public virtual AccessPortalAuxiliaryOutputMode AccessPortalAuxiliaryOutputMode
        //{ 
        //	get { return _accessPortalAuxiliaryOutputMode; }
        //	set
        //	{
        //		if (_accessPortalAuxiliaryOutputMode != value )
        //		{
        //			_accessPortalAuxiliaryOutputMode = value;
        //			OnPropertyChanged(() => AccessPortalAuxiliaryOutputMode, true, true);
        //		}
        //	}
        //}

        //   /// <summary>   The access portal auxiliary output triggering events. </summary>
        //private ICollection<AccessPortalAuxiliaryOutputTriggeringEvent> _accessPortalAuxiliaryOutputTriggeringEvents;

        //   ////////////////////////////////////////////////////////////////////////////////////////////////////
        //   /// <summary>   Gets or sets the access portal auxiliary output triggering events. </summary>
        //   ///
        //   /// <value> The access portal auxiliary output triggering events. </value>
        //   ////////////////////////////////////////////////////////////////////////////////////////////////////

        //[DataMember]
        //public virtual ICollection<AccessPortalAuxiliaryOutputTriggeringEvent> AccessPortalAuxiliaryOutputTriggeringEvents
        //{ 
        //	get { return _accessPortalAuxiliaryOutputTriggeringEvents; }
        //	set
        //	{
        //		if (_accessPortalAuxiliaryOutputTriggeringEvents != value )
        //		{
        //			_accessPortalAuxiliaryOutputTriggeringEvents = value;
        //			OnPropertyChanged(() => AccessPortalAuxiliaryOutputTriggeringEvents);
        //		}
        //	}
        //}

        /// <summary>   True to illegal open. </summary>
        private bool _IllegalOpen;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the illegal open. </summary>
        ///
        /// <value> True if illegal open, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool IllegalOpen
        {
            get { return _IllegalOpen; }
            set
            {
                if (_IllegalOpen != value)
                {
                    _IllegalOpen = value;
                    OnPropertyChanged(() => IllegalOpen, true, true);
                }
            }
        }


        /// <summary>   True to open too long. </summary>
        private bool _openTooLong;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the too long should be opened. </summary>
        ///
        /// <value> True if open too long, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool OpenTooLong
        {
            get { return _openTooLong; }
            set
            {
                if (_openTooLong != value)
                {
                    _openTooLong = value;
                    OnPropertyChanged(() => OpenTooLong, true, true);
                }
            }
        }

        /// <summary>   True to invalid attempt. </summary>
        private bool _InvalidAttempt;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the invalid attempt. </summary>
        ///
        /// <value> True if invalid attempt, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool InvalidAttempt
        {
            get { return _InvalidAttempt; }
            set
            {
                if (_InvalidAttempt != value)
                {
                    _InvalidAttempt = value;
                    OnPropertyChanged(() => InvalidAttempt, true, true);
                }
            }
        }

        /// <summary>   True to allow, false to deny access. </summary>
        private bool _AccessGranted;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether access is granted. </summary>
        ///
        /// <value> True if access granted, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool AccessGranted
        {
            get { return _AccessGranted; }
            set
            {
                if (_AccessGranted != value)
                {
                    _AccessGranted = value;
                    OnPropertyChanged(() => AccessGranted, true, true);
                }
            }
        }


        /// <summary>   True to duress. </summary>
        private bool _duress;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the duress. </summary>
        ///
        /// <value> True if duress, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool Duress
        {
            get { return _duress; }
            set
            {
                if (_duress != value)
                {
                    _duress = value;
                    OnPropertyChanged(() => Duress, true, true);
                }
            }
        }

        /// <summary>   True to passback violation. </summary>
        private bool _passbackViolation;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the passback violation. </summary>
        ///
        /// <value> True if passback violation, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool PassbackViolation
        {
            get { return _passbackViolation; }
            set
            {
                if (_passbackViolation != value)
                {
                    _passbackViolation = value;
                    OnPropertyChanged(() => PassbackViolation, true, true);
                }
            }
        }

    }

}
