//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using FluentValidation;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   The gcs user requirement. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

	[DataContract]
	public partial class gcsUserRequirement : DbObjectBase
    {
       
        
        /// <summary>   Identifier for the user requirements. </summary>
    	private System.Guid _userRequirementsId;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the identifier of the user requirements. </summary>
        ///
        /// <value> The identifier of the user requirements. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public System.Guid UserRequirementsId
    	{ 
    		get { return _userRequirementsId; }
    		set
    		{
    			if (_userRequirementsId != value )
    			{
    				_userRequirementsId = value;
    				OnPropertyChanged(() => UserRequirementsId);
    			}
    		}
    	}
        
        /// <summary>   Identifier for the entity. </summary>
    	private System.Guid _entityId;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the identifier of the entity. </summary>
        ///
        /// <value> The identifier of the entity. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public System.Guid EntityId
    	{ 
    		get { return _entityId; }
    		set
    		{
    			if (_entityId != value )
    			{
    				_entityId = value;
    				OnPropertyChanged(() => EntityId);
    			}
    		}
    	}
        
        /// <summary>   True to password cannot contain name. </summary>
    	private bool _passwordCannotContainName;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether the password cannot contain name.
        /// </summary>
        ///
        /// <value> True if password cannot contain name, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public bool PasswordCannotContainName
    	{ 
    		get { return _passwordCannotContainName; }
    		set
    		{
    			if (_passwordCannotContainName != value )
    			{
    				_passwordCannotContainName = value;
    				OnPropertyChanged(() => PasswordCannotContainName);
    			}
    		}
    	}
        
        /// <summary>   Length of the password minimum. </summary>
    	private short _passwordMinimumLength;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the length of the password minimum. </summary>
        ///
        /// <value> The length of the password minimum. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public short PasswordMinimumLength
    	{ 
    		get { return _passwordMinimumLength; }
    		set
    		{
    			if (_passwordMinimumLength != value )
    			{
    				_passwordMinimumLength = value;
    				OnPropertyChanged(() => PasswordMinimumLength);
    			}
    		}
    	}
        
        /// <summary>   Length of the password maximum. </summary>
    	private short _passwordMaximumLength;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the length of the password maximum. </summary>
        ///
        /// <value> The length of the password maximum. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public short PasswordMaximumLength
    	{ 
    		get { return _passwordMaximumLength; }
    		set
    		{
    			if (_passwordMaximumLength != value )
    			{
    				_passwordMaximumLength = value;
    				OnPropertyChanged(() => PasswordMaximumLength);
    			}
    		}
    	}
        
        /// <summary>   The password minimum change characters. </summary>
    	private short _passwordMinimumChangeCharacters;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the password minimum change characters. </summary>
        ///
        /// <value> The password minimum change characters. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public short PasswordMinimumChangeCharacters
    	{ 
    		get { return _passwordMinimumChangeCharacters; }
    		set
    		{
    			if (_passwordMinimumChangeCharacters != value )
    			{
    				_passwordMinimumChangeCharacters = value;
    				OnPropertyChanged(() => PasswordMinimumChangeCharacters);
    			}
    		}
    	}
        
        /// <summary>   The minimum password age. </summary>
    	private short _minimumPasswordAge;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the minimum password age. </summary>
        ///
        /// <value> The minimum password age. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public short MinimumPasswordAge
    	{ 
    		get { return _minimumPasswordAge; }
    		set
    		{
    			if (_minimumPasswordAge != value )
    			{
    				_minimumPasswordAge = value;
    				OnPropertyChanged(() => MinimumPasswordAge);
    			}
    		}
    	}
        
        /// <summary>   The maximum password age. </summary>
    	private short _maximumPasswordAge;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the maximum password age. </summary>
        ///
        /// <value> The maximum password age. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public short MaximumPasswordAge
    	{ 
    		get { return _maximumPasswordAge; }
    		set
    		{
    			if (_maximumPasswordAge != value )
    			{
    				_maximumPasswordAge = value;
    				OnPropertyChanged(() => MaximumPasswordAge);
    			}
    		}
    	}
        
        /// <summary>   Number of maintain password histories. </summary>
    	private short _maintainPasswordHistoryCount;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the number of maintain password histories. </summary>
        ///
        /// <value> The number of maintain password histories. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public short MaintainPasswordHistoryCount
    	{ 
    		get { return _maintainPasswordHistoryCount; }
    		set
    		{
    			if (_maintainPasswordHistoryCount != value )
    			{
    				_maintainPasswordHistoryCount = value;
    				OnPropertyChanged(() => MaintainPasswordHistoryCount);
    			}
    		}
    	}
        
        /// <summary>   The default expiration days. </summary>
    	private short _defaultExpirationDays;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the default expiration days. </summary>
        ///
        /// <value> The default expiration days. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public short DefaultExpirationDays
    	{ 
    		get { return _defaultExpirationDays; }
    		set
    		{
    			if (_defaultExpirationDays != value )
    			{
    				_defaultExpirationDays = value;
    				OnPropertyChanged(() => DefaultExpirationDays);
    			}
    		}
    	}
        
        /// <summary>   The lockout user if inactive for in days. </summary>
    	private short _lockoutUserIfInactiveForDays;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the lockout user if inactive for days. </summary>
        ///
        /// <value> The lockout user if inactive for days. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public short LockoutUserIfInactiveForDays
    	{ 
    		get { return _lockoutUserIfInactiveForDays; }
    		set
    		{
    			if (_lockoutUserIfInactiveForDays != value )
    			{
    				_lockoutUserIfInactiveForDays = value;
    				OnPropertyChanged(() => LockoutUserIfInactiveForDays);
    			}
    		}
    	}
        
        /// <summary>   True to allow, false to deny password change attempt. </summary>
    	private bool _allowPasswordChangeAttempt;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether we allow password change attempt. </summary>
        ///
        /// <value> True if allow password change attempt, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public bool AllowPasswordChangeAttempt
    	{ 
    		get { return _allowPasswordChangeAttempt; }
    		set
    		{
    			if (_allowPasswordChangeAttempt != value )
    			{
    				_allowPasswordChangeAttempt = value;
    				OnPropertyChanged(() => AllowPasswordChangeAttempt);
    			}
    		}
    	}
        
        /// <summary>   Number of require lower case letters. </summary>
    	private short _requireLowerCaseLetterCount;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the number of require lower case letters. </summary>
        ///
        /// <value> The number of require lower case letters. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public short RequireLowerCaseLetterCount
    	{ 
    		get { return _requireLowerCaseLetterCount; }
    		set
    		{
    			if (_requireLowerCaseLetterCount != value )
    			{
    				_requireLowerCaseLetterCount = value;
    				OnPropertyChanged(() => RequireLowerCaseLetterCount);
    			}
    		}
    	}
        
        /// <summary>   Number of require upper case letters. </summary>
    	private short _requireUpperCaseLetterCount;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the number of require upper case letters. </summary>
        ///
        /// <value> The number of require upper case letters. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public short RequireUpperCaseLetterCount
    	{ 
    		get { return _requireUpperCaseLetterCount; }
    		set
    		{
    			if (_requireUpperCaseLetterCount != value )
    			{
    				_requireUpperCaseLetterCount = value;
    				OnPropertyChanged(() => RequireUpperCaseLetterCount);
    			}
    		}
    	}
        
        /// <summary>   Number of require numeric digits. </summary>
    	private short _requireNumericDigitCount;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the number of require numeric digits. </summary>
        ///
        /// <value> The number of require numeric digits. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public short RequireNumericDigitCount
    	{ 
    		get { return _requireNumericDigitCount; }
    		set
    		{
    			if (_requireNumericDigitCount != value )
    			{
    				_requireNumericDigitCount = value;
    				OnPropertyChanged(() => RequireNumericDigitCount);
    			}
    		}
    	}
        
        /// <summary>   Number of require special characters. </summary>
    	private short _requireSpecialCharacterCount;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the number of require special characters. </summary>
        ///
        /// <value> The number of require special characters. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public short RequireSpecialCharacterCount
    	{ 
    		get { return _requireSpecialCharacterCount; }
    		set
    		{
    			if (_requireSpecialCharacterCount != value )
    			{
    				_requireSpecialCharacterCount = value;
    				OnPropertyChanged(() => RequireSpecialCharacterCount);
    			}
    		}
    	}
        
        /// <summary>   True to use custom RegEx. </summary>
    	private bool _useCustomRegEx;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether this gcsUserRequirement use custom RegEx.
        /// </summary>
        ///
        /// <value> True if use custom regex, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public bool UseCustomRegEx
    	{ 
    		get { return _useCustomRegEx; }
    		set
    		{
    			if (_useCustomRegEx != value )
    			{
    				_useCustomRegEx = value;
    				OnPropertyChanged(() => UseCustomRegEx);
    			}
    		}
    	}
        
        /// <summary>   The password custom RegEx. </summary>
    	private string _passwordCustomRegEx;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the password custom RegEx. </summary>
        ///
        /// <value> The password custom RegEx. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public string PasswordCustomRegEx
    	{ 
    		get { return _passwordCustomRegEx; }
    		set
    		{
    			if (_passwordCustomRegEx != value )
    			{
    				_passwordCustomRegEx = value;
    				OnPropertyChanged(() => PasswordCustomRegEx);
    			}
    		}
    	}
        
        /// <summary>   Information describing the regular expression. </summary>
    	private string _regularExpressionDescription;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets information describing the regular expression. </summary>
        ///
        /// <value> Information describing the regular expression. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public string RegularExpressionDescription
    	{ 
    		get { return _regularExpressionDescription; }
    		set
    		{
    			if (_regularExpressionDescription != value )
    			{
    				_regularExpressionDescription = value;
    				OnPropertyChanged(() => RegularExpressionDescription);
    			}
    		}
    	}


        /// <summary>   True to require two factor authentication. </summary>
        private bool _RequireTwoFactorAuthentication;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether the require two factor authentication is required.
        /// </summary>
        ///
        /// <value> True if require two factor authentication, false if not. </value>
        ///=================================================================================================
        [DataMember]

        public bool RequireTwoFactorAuthentication
        {
            get { return _RequireTwoFactorAuthentication; }
            set
            {
                if (_RequireTwoFactorAuthentication != value)
                {
                    _RequireTwoFactorAuthentication = value;
                    OnPropertyChanged(() => RequireTwoFactorAuthentication);
                }
            }
        }


        /// <summary>   Name of the insert. </summary>
        private string _insertName;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the name of the insert. </summary>
        ///
        /// <value> The name of the insert. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
        
        /// <summary>   The insert date. </summary>
    	private System.DateTimeOffset _insertDate;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the insert date. </summary>
        ///
        /// <value> The insert date. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public System.DateTimeOffset InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
        
        /// <summary>   Name of the update. </summary>
    	private string _updateName;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the name of the update. </summary>
        ///
        /// <value> The name of the update. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
        
        /// <summary>   The update. </summary>
    	private Nullable<System.DateTimeOffset> _updateDate;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the update. </summary>
        ///
        /// <value> The update date. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public Nullable<System.DateTimeOffset> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
        
        /// <summary>   The concurrency value. </summary>
    	private Nullable<short> _concurrencyValue;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the concurrency value. </summary>
        ///
        /// <value> The concurrency value. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    }
    
}
