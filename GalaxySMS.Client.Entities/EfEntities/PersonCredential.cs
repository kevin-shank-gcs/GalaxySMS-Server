//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;
    using FluentValidation;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   A person credential. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

	[DataContract]
	public partial class PersonCredential : DbObjectBase, ITableEntityBase
    {
        /// <summary>   The person credential UID. </summary>
    	private System.Guid _personCredentialUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the person credential UID. </summary>
        ///
        /// <value> The person credential UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public System.Guid PersonCredentialUid
    	{ 
    		get { return _personCredentialUid; }
    		set
    		{
    			if (_personCredentialUid != value )
    			{
    				_personCredentialUid = value;
    				OnPropertyChanged(() => PersonCredentialUid);
    			}
    		}
    	}
    	
        /// <summary>   The credential UID. </summary>
    	private System.Guid _credentialUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the credential UID. </summary>
        ///
        /// <value> The credential UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public System.Guid CredentialUid
    	{ 
    		get { return _credentialUid; }
    		set
    		{
    			if (_credentialUid != value )
    			{
    				_credentialUid = value;
    				OnPropertyChanged(() => CredentialUid);
    			}
    		}
    	}
    	
        /// <summary>   The person UID. </summary>
    	private System.Guid _personUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the person UID. </summary>
        ///
        /// <value> The person UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public System.Guid PersonUid
    	{ 
    		get { return _personUid; }
    		set
    		{
    			if (_personUid != value )
    			{
    				_personUid = value;
    				OnPropertyChanged(() => PersonUid);
    			}
    		}
    	}
    	
        /// <summary>   The person credential role UID. </summary>
    	private System.Guid _personCredentialRoleUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the person credential role UID. </summary>
        ///
        /// <value> The person credential role UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public System.Guid PersonCredentialRoleUid
    	{ 
    		get { return _personCredentialRoleUid; }
    		set
    		{
    			if (_personCredentialRoleUid != value )
    			{
    				_personCredentialRoleUid = value;
    				OnPropertyChanged(() => PersonCredentialRoleUid, true, true);
    			}
    		}
    	}
    	
        /// <summary>   The person activation mode UID. </summary>
    	private System.Guid _personActivationModeUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the person activation mode UID. </summary>
        ///
        /// <value> The person activation mode UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public System.Guid PersonActivationModeUid
    	{ 
    		get { return _personActivationModeUid; }
    		set
    		{
    			if (_personActivationModeUid != value )
    			{
    				_personActivationModeUid = value;
    				OnPropertyChanged(() => PersonActivationModeUid, true, true);
    			}
    		}
    	}
    	
        /// <summary>   The person expiration mode UID. </summary>
    	private System.Guid _personExpirationModeUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the person expiration mode UID. </summary>
        ///
        /// <value> The person expiration mode UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public System.Guid PersonExpirationModeUid
    	{ 
    		get { return _personExpirationModeUid; }
    		set
    		{
    			if (_personExpirationModeUid != value )
    			{
    				_personExpirationModeUid = value;
    				OnPropertyChanged(() => PersonExpirationModeUid, true, true);
    			}
    		}
    	}
    	
        /// <summary>   The badge template UID. </summary>
    	private System.Guid _badgeTemplateUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the badge template UID. </summary>
        ///
        /// <value> The badge template UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public System.Guid BadgeTemplateUid
    	{ 
    		get { return _badgeTemplateUid; }
    		set
    		{
    			if (_badgeTemplateUid != value )
    			{
    				_badgeTemplateUid = value;
    				OnPropertyChanged(() => BadgeTemplateUid);
    			}
    		}
    	}
    	
        /// <summary>   The dossier badge template UID. </summary>
    	private System.Guid _dossierBadgeTemplateUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the dossier badge template UID. </summary>
        ///
        /// <value> The dossier badge template UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public System.Guid DossierBadgeTemplateUid
    	{ 
    		get { return _dossierBadgeTemplateUid; }
    		set
    		{
    			if (_dossierBadgeTemplateUid != value )
    			{
    				_dossierBadgeTemplateUid = value;
    				OnPropertyChanged(() => DossierBadgeTemplateUid);
    			}
    		}
    	}
    	
        /// <summary>   The access portal no server reply behavior UID. </summary>
    	private System.Guid _accessPortalNoServerReplyBehaviorUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the access portal no server reply behavior UID. </summary>
        ///
        /// <value> The access portal no server reply behavior UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public System.Guid AccessPortalNoServerReplyBehaviorUid
    	{ 
    		get { return _accessPortalNoServerReplyBehaviorUid; }
    		set
    		{
    			if (_accessPortalNoServerReplyBehaviorUid != value )
    			{
    				_accessPortalNoServerReplyBehaviorUid = value;
    				OnPropertyChanged(() => AccessPortalNoServerReplyBehaviorUid, true, true);
    			}
    		}
    	}
    	
        /// <summary>   The access portal defer to server behavior UID. </summary>
    	private System.Guid _accessPortalDeferToServerBehaviorUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the access portal defer to server behavior UID. </summary>
        ///
        /// <value> The access portal defer to server behavior UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public System.Guid AccessPortalDeferToServerBehaviorUid
    	{ 
    		get { return _accessPortalDeferToServerBehaviorUid; }
    		set
    		{
    			if (_accessPortalDeferToServerBehaviorUid != value )
    			{
    				_accessPortalDeferToServerBehaviorUid = value;
    				OnPropertyChanged(() => AccessPortalDeferToServerBehaviorUid, true, true);
    			}
    		}
    	}
    	
        /// <summary>   Information describing the credential. </summary>
    	private string _credentialDescription;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets information describing the credential. </summary>
        ///
        /// <value> Information describing the credential. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public string CredentialDescription
    	{ 
    		get { return _credentialDescription; }
    		set
    		{
    			if (_credentialDescription != value )
    			{
    				_credentialDescription = value;
    				OnPropertyChanged(() => CredentialDescription);
    			}
    		}
    	}
    	
        /// <summary>   The activation date time. </summary>
    	private Nullable<System.DateTimeOffset> _activationDateTime;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the activation date time. </summary>
        ///
        /// <value> The activation date time. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public Nullable<System.DateTimeOffset> ActivationDateTime
    	{ 
    		get { return _activationDateTime; }
    		set
    		{
    			if (_activationDateTime != value )
    			{
    				_activationDateTime = value;
    				OnPropertyChanged(() => ActivationDateTime, true, true);
    			}
    		}
    	}
    	
        /// <summary>   The expiration date time. </summary>
    	private Nullable<System.DateTimeOffset> _expirationDateTime;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the expiration date time. </summary>
        ///
        /// <value> The expiration date time. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public Nullable<System.DateTimeOffset> ExpirationDateTime
    	{ 
    		get { return _expirationDateTime; }
    		set
    		{
    			if (_expirationDateTime != value )
    			{
    				_expirationDateTime = value;
    				OnPropertyChanged(() => ExpirationDateTime, true, true);
    			}
    		}
    	}
    	
        /// <summary>   Number of usages. </summary>
    	private short _usageCount;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the number of usages. </summary>
        ///
        /// <value> The number of usages. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public short UsageCount
    	{ 
    		get { return _usageCount; }
    		set
    		{
    			if (_usageCount != value )
    			{
    				_usageCount = value;
    				OnPropertyChanged(() => UsageCount, true, true);
    			}
    		}
    	}
    	
        /// <summary>   True to enable, false to disable the trace. </summary>
    	private bool _traceEnabled;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the trace is enabled. </summary>
        ///
        /// <value> True if trace enabled, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public bool TraceEnabled
    	{ 
    		get { return _traceEnabled; }
    		set
    		{
    			if (_traceEnabled != value )
    			{
    				_traceEnabled = value;
    				OnPropertyChanged(() => TraceEnabled);
    			}
    		}
    	}
    	
        /// <summary>   True to enable, false to disable the duress. </summary>
    	private bool _duressEnabled;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the duress is enabled. </summary>
        ///
        /// <value> True if duress enabled, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public bool DuressEnabled
    	{ 
    		get { return _duressEnabled; }
    		set
    		{
    			if (_duressEnabled != value )
    			{
    				_duressEnabled = value;
    				OnPropertyChanged(() => DuressEnabled, true, true);
    			}
    		}
    	}
    	
        /// <summary>   True to reverse bits. </summary>
    	private bool _reverseBits;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the reverse bits. </summary>
        ///
        /// <value> True if reverse bits, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public bool ReverseBits
    	{ 
    		get { return _reverseBits; }
    		set
    		{
    			if (_reverseBits != value )
    			{
    				_reverseBits = value;
    				OnPropertyChanged(() => ReverseBits, true, true);
    			}
    		}
    	}

        /// <summary>   True if this PersonCredential is active. </summary>
        private bool _isActive;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether this PersonCredential is active.
        /// </summary>
        ///
        /// <value> True if this PersonCredential is active, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    _isActive = value;
                    OnPropertyChanged(() => IsActive, true, true);
                }
            }
        }

        /// <summary>   The biometric enrollment status. </summary>
        private Nullable<short> _biometricEnrollmentStatus;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the biometric enrollment status. </summary>
        ///
        /// <value> The biometric enrollment status. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public Nullable<short> BiometricEnrollmentStatus
    	{ 
    		get { return _biometricEnrollmentStatus; }
    		set
    		{
    			if (_biometricEnrollmentStatus != value )
    			{
    				_biometricEnrollmentStatus = value;
    				OnPropertyChanged(() => BiometricEnrollmentStatus);
    			}
    		}
    	}
    	
        /// <summary>   The badge print limit. </summary>
    	private Nullable<int> _badgePrintLimit;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the badge print limit. </summary>
        ///
        /// <value> The badge print limit. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public Nullable<int> BadgePrintLimit
    	{ 
    		get { return _badgePrintLimit; }
    		set
    		{
    			if (_badgePrintLimit != value )
    			{
    				_badgePrintLimit = value;
    				OnPropertyChanged(() => BadgePrintLimit);
    			}
    		}
    	}
    	
        /// <summary>   Number of badge prints. </summary>
    	private Nullable<int> _badgePrintCount;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the number of badge prints. </summary>
        ///
        /// <value> The number of badge prints. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public Nullable<int> BadgePrintCount
    	{ 
    		get { return _badgePrintCount; }
    		set
    		{
    			if (_badgePrintCount != value )
    			{
    				_badgePrintCount = value;
    				OnPropertyChanged(() => BadgePrintCount);
    			}
    		}
    	}
    	
        /// <summary>   The badge last printed. </summary>
    	private Nullable<System.DateTimeOffset> _badgeLastPrinted;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the badge last printed. </summary>
        ///
        /// <value> The badge last printed. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public Nullable<System.DateTimeOffset> BadgeLastPrinted
    	{ 
    		get { return _badgeLastPrinted; }
    		set
    		{
    			if (_badgeLastPrinted != value )
    			{
    				_badgeLastPrinted = value;
    				OnPropertyChanged(() => BadgeLastPrinted);
    			}
    		}
    	}
    	
        /// <summary>   The dossier print limit. </summary>
    	private Nullable<int> _dossierPrintLimit;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the dossier print limit. </summary>
        ///
        /// <value> The dossier print limit. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public Nullable<int> DossierPrintLimit
    	{ 
    		get { return _dossierPrintLimit; }
    		set
    		{
    			if (_dossierPrintLimit != value )
    			{
    				_dossierPrintLimit = value;
    				OnPropertyChanged(() => DossierPrintLimit);
    			}
    		}
    	}
    	
        /// <summary>   Number of dossier prints. </summary>
    	private Nullable<int> _dossierPrintCount;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the number of dossier prints. </summary>
        ///
        /// <value> The number of dossier prints. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public Nullable<int> DossierPrintCount
    	{ 
    		get { return _dossierPrintCount; }
    		set
    		{
    			if (_dossierPrintCount != value )
    			{
    				_dossierPrintCount = value;
    				OnPropertyChanged(() => DossierPrintCount);
    			}
    		}
    	}
    	
        /// <summary>   The dossier last printed. </summary>
    	private Nullable<System.DateTimeOffset> _dossierLastPrinted;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the dossier last printed. </summary>
        ///
        /// <value> The dossier last printed. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public Nullable<System.DateTimeOffset> DossierLastPrinted
    	{ 
    		get { return _dossierLastPrinted; }
    		set
    		{
    			if (_dossierLastPrinted != value )
    			{
    				_dossierLastPrinted = value;
    				OnPropertyChanged(() => DossierLastPrinted);
    			}
    		}
    	}


        /// <summary>   Identifier for the system gal card. </summary>
        private short _SysGalCardId;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the identifier of the system gal card. </summary>
        ///
        /// <value> The identifier of the system gal card. </value>
        ///=================================================================================================

        [DataMember]
        public short SysGalCardId
        {
            get { return _SysGalCardId; }
            set
            {
                if (_SysGalCardId != value)
                {
                    _SysGalCardId = value;
                    OnPropertyChanged(() => SysGalCardId, true);
                }
            }
        }




        /// <summary>   Name of the insert. </summary>
        private string _insertName;



        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the name of the insert. </summary>
        ///
        /// <value> The name of the insert. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
        /// <summary>   The insert date. </summary>
    	private System.DateTimeOffset _insertDate;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the insert date. </summary>
        ///
        /// <value> The insert date. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public System.DateTimeOffset InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
        /// <summary>   Name of the update. </summary>
    	private string _updateName;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the name of the update. </summary>
        ///
        /// <value> The name of the update. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
        /// <summary>   The update. </summary>
    	private Nullable<System.DateTimeOffset> _updateDate;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the update. </summary>
        ///
        /// <value> The update date. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public Nullable<System.DateTimeOffset> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
        /// <summary>   The concurrency value. </summary>
    	private Nullable<short> _concurrencyValue;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the concurrency value. </summary>
        ///
        /// <value> The concurrency value. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    
    	
        /// <summary>   The person cluster permissions. </summary>
    	private ICollection<PersonClusterPermission> _personClusterPermissions;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the person cluster permissions. </summary>
        ///
        /// <value> The person cluster permissions. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public virtual ICollection<PersonClusterPermission> PersonClusterPermissions
    	{ 
    		get { return _personClusterPermissions; }
    		set
    		{
    			if (_personClusterPermissions != value )
    			{
    				_personClusterPermissions = value;
    				OnPropertyChanged(() => PersonClusterPermissions);
    			}
    		}
    	}
    	
        /// <summary>   The person credential command scripts. </summary>
    	private ICollection<PersonCredentialCommandScript> _personCredentialCommandScripts;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the person credential command scripts. </summary>
        ///
        /// <value> The person credential command scripts. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public virtual ICollection<PersonCredentialCommandScript> PersonCredentialCommandScripts
    	{ 
    		get { return _personCredentialCommandScripts; }
    		set
    		{
    			if (_personCredentialCommandScripts != value )
    			{
    				_personCredentialCommandScripts = value;
    				OnPropertyChanged(() => PersonCredentialCommandScripts);
    			}
    		}
    	}

        /// <summary>   The credential. </summary>
        private Credential _credential;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the credential. </summary>
        ///
        /// <value> The credential. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public Credential Credential
        {
            get { return _credential; }
            set
            {
                if (_credential != value)
                {
                    _credential = value;
                    OnPropertyChanged(() => Credential, true, true);
                }
            }
        }

    }
    
}
