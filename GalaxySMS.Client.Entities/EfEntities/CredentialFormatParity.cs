//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using GalaxySMS.Common.Interfaces;

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
    using GCS.Core.Common.Core;
    using GCS.Core.Common.Contracts;
    using FluentValidation;
    using GalaxySMS.Common.Enums;
    using GalaxySMS.Common.Interfaces;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   A credential format parity. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    [DataContract]
    public partial class CredentialFormatParity : DbObjectBase, ITableEntityBase, ICredentialFormatParity
    {

        /// <summary>   The credential format parity UID. </summary>
        private System.Guid _credentialFormatParityUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the credential format parity UID. </summary>
        ///
        /// <value> The credential format parity UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public System.Guid CredentialFormatParityUid
        {
            get { return _credentialFormatParityUid; }
            set
            {
                if (_credentialFormatParityUid != value)
                {
                    _credentialFormatParityUid = value;
                    OnPropertyChanged(() => CredentialFormatParityUid);
                }
            }
        }

        /// <summary>   The credential format UID. </summary>
        private System.Guid _credentialFormatUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the credential format UID. </summary>
        ///
        /// <value> The credential format UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public System.Guid CredentialFormatUid
        {
            get { return _credentialFormatUid; }
            set
            {
                if (_credentialFormatUid != value)
                {
                    _credentialFormatUid = value;
                    OnPropertyChanged(() => CredentialFormatUid);
                }
            }
        }

        /// <summary>   Type of the parity. </summary>
        private CredentialParityTypes _parityType;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the type of the parity. </summary>
        ///
        /// <value> The type of the parity. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public CredentialParityTypes ParityType
        {
            get { return _parityType; }
            set
            {
                if (_parityType != value)
                {
                    _parityType = value;
                    OnPropertyChanged(() => ParityType);
                }
            }
        }

        /// <summary>   The hexadecimal mask. </summary>
        private byte[] _hexMask;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the hexadecimal mask. </summary>
        ///
        /// <value> The hexadecimal mask. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public byte[] HexMask
        {
            get { return _hexMask; }
            set
            {
                if (_hexMask != value)
                {
                    _hexMask = value;
                    OnPropertyChanged(() => HexMask);
                }
            }
        }

        /// <summary>   The hexadecimal mask ulong. </summary>
        private UInt64 _hexMaskUlong;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the hexadecimal mask ulong. </summary>
        ///
        /// <value> The hexadecimal mask ulong. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public UInt64 HexMaskUlong
        {
            get { return _hexMaskUlong; }
            set
            {
                if (_hexMaskUlong != value)
                {
                    _hexMaskUlong = value;
                    OnPropertyChanged(() => HexMaskUlong);
                }
            }
        }


        /// <summary>   The bit position. </summary>
        private short _bitPosition;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the bit position. </summary>
        ///
        /// <value> The bit position. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public short BitPosition
        {
            get { return _bitPosition; }
            set
            {
                if (_bitPosition != value)
                {
                    _bitPosition = value;
                    OnPropertyChanged(() => BitPosition);
                }
            }
        }

        /// <summary>   The compute sequence. </summary>
        private short _computeSequence;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the compute sequence. </summary>
        ///
        /// <value> The compute sequence. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public short ComputeSequence
        {
            get { return _computeSequence; }
            set
            {
                if (_computeSequence != value)
                {
                    _computeSequence = value;
                    OnPropertyChanged(() => ComputeSequence);
                }
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether this CredentialFormatParity is dirty.
        /// </summary>
        ///
        /// <value> True if this CredentialFormatParity is dirty, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool IsDirty
        {
            get
            { return base.IsDirty; }
            set
            {
                base.IsDirty = value;
            }
        }

        /// <summary>   Name of the insert. </summary>
        private string _insertName;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the name of the insert. </summary>
        ///
        /// <value> The name of the insert. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public string InsertName
        {
            get { return _insertName; }
            set
            {
                if (_insertName != value)
                {
                    _insertName = value;
                    OnPropertyChanged(() => InsertName);
                }
            }
        }

        /// <summary>   The insert date. </summary>
        private System.DateTimeOffset _insertDate;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the insert date. </summary>
        ///
        /// <value> The insert date. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public System.DateTimeOffset InsertDate
        {
            get { return _insertDate; }
            set
            {
                if (_insertDate != value)
                {
                    _insertDate = value;
                    OnPropertyChanged(() => InsertDate);
                }
            }
        }

        /// <summary>   Name of the update. </summary>
        private string _updateName;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the name of the update. </summary>
        ///
        /// <value> The name of the update. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public string UpdateName
        {
            get { return _updateName; }
            set
            {
                if (_updateName != value)
                {
                    _updateName = value;
                    OnPropertyChanged(() => UpdateName);
                }
            }
        }

        /// <summary>   The update. </summary>
        private Nullable<System.DateTimeOffset> _updateDate;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the update. </summary>
        ///
        /// <value> The update date. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public Nullable<System.DateTimeOffset> UpdateDate
        {
            get { return _updateDate; }
            set
            {
                if (_updateDate != value)
                {
                    _updateDate = value;
                    OnPropertyChanged(() => UpdateDate);
                }
            }
        }

        /// <summary>   The concurrency value. </summary>
        private Nullable<short> _concurrencyValue;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the concurrency value. </summary>
        ///
        /// <value> The concurrency value. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public Nullable<short> ConcurrencyValue
        {
            get { return _concurrencyValue; }
            set
            {
                if (_concurrencyValue != value)
                {
                    _concurrencyValue = value;
                    OnPropertyChanged(() => ConcurrencyValue);
                }
            }
        }


        /// <summary>   The credential format. </summary>
        private CredentialFormat _credentialFormat;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the credential format. </summary>
        ///
        /// <value> The credential format. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public virtual CredentialFormat CredentialFormat
        {
            get { return _credentialFormat; }
            set
            {
                if (_credentialFormat != value)
                {
                    _credentialFormat = value;
                    OnPropertyChanged(() => CredentialFormat);
                }
            }
        }
    }

}
