//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
    using GCS.Core.Common.Core;
    using GCS.Core.Common.Contracts;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   The access portal properties. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    [DataContract]
    public partial class AccessPortalProperties : DbObjectBase, ITableEntityBase
    {

        /// <summary>   The access portal properties UID. </summary>
        private System.Guid _accessPortalPropertiesUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the access portal properties UID. </summary>
        ///
        /// <value> The access portal properties UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public System.Guid AccessPortalPropertiesUid
        {
            get { return _accessPortalPropertiesUid; }
            set
            {
                if (_accessPortalPropertiesUid != value)
                {
                    _accessPortalPropertiesUid = value;
                    OnPropertyChanged(() => AccessPortalPropertiesUid);
                }
            }
        }

        /// <summary>   The access portal UID. </summary>
        private System.Guid _accessPortalUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the access portal UID. </summary>
        ///
        /// <value> The access portal UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public System.Guid AccessPortalUid
        {
            get { return _accessPortalUid; }
            set
            {
                if (_accessPortalUid != value)
                {
                    _accessPortalUid = value;
                    OnPropertyChanged(() => AccessPortalUid);
                }
            }
        }

        /// <summary>   The automatic forgive passback frequency UID. </summary>
        private System.Guid _automaticForgivePassbackFrequencyUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the automatic forgive passback frequency UID. </summary>
        ///
        /// <value> The automatic forgive passback frequency UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public System.Guid AutomaticForgivePassbackFrequencyUid
        {
            get { return _automaticForgivePassbackFrequencyUid; }
            set
            {
                if (_automaticForgivePassbackFrequencyUid != value)
                {
                    _automaticForgivePassbackFrequencyUid = value;
                    OnPropertyChanged(() => AutomaticForgivePassbackFrequencyUid, true, true);
                }
            }
        }

        /// <summary>   The pin required mode UID. </summary>
        private System.Guid _pinRequiredModeUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the pin required mode UID. </summary>
        ///
        /// <value> The pin required mode UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public System.Guid PinRequiredModeUid
        {
            get { return _pinRequiredModeUid; }
            set
            {
                if (_pinRequiredModeUid != value)
                {
                    _pinRequiredModeUid = value;
                    OnPropertyChanged(() => PinRequiredModeUid, true, true);
                }
            }
        }

        /// <summary>   The access portal contact supervision type UID. </summary>
        private System.Guid _accessPortalContactSupervisionTypeUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the access portal contact supervision type UID. </summary>
        ///
        /// <value> The access portal contact supervision type UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public System.Guid AccessPortalContactSupervisionTypeUid
        {
            get { return _accessPortalContactSupervisionTypeUid; }
            set
            {
                if (_accessPortalContactSupervisionTypeUid != value)
                {
                    _accessPortalContactSupervisionTypeUid = value;
                    OnPropertyChanged(() => AccessPortalContactSupervisionTypeUid, true, true);
                }
            }
        }

        /// <summary>   The access portal defer to server behavior UID. </summary>
        private System.Guid _accessPortalDeferToServerBehaviorUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the access portal defer to server behavior UID. </summary>
        ///
        /// <value> The access portal defer to server behavior UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public System.Guid AccessPortalDeferToServerBehaviorUid
        {
            get { return _accessPortalDeferToServerBehaviorUid; }
            set
            {
                if (_accessPortalDeferToServerBehaviorUid != value)
                {
                    _accessPortalDeferToServerBehaviorUid = value;
                    OnPropertyChanged(() => AccessPortalDeferToServerBehaviorUid, true, true);
                }
            }
        }

        /// <summary>   The access portal no server reply behavior UID. </summary>
        private System.Guid _accessPortalNoServerReplyBehaviorUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the access portal no server reply behavior UID. </summary>
        ///
        /// <value> The access portal no server reply behavior UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public System.Guid AccessPortalNoServerReplyBehaviorUid
        {
            get { return _accessPortalNoServerReplyBehaviorUid; }
            set
            {
                if (_accessPortalNoServerReplyBehaviorUid != value)
                {
                    _accessPortalNoServerReplyBehaviorUid = value;
                    OnPropertyChanged(() => AccessPortalNoServerReplyBehaviorUid, true, true);
                }
            }
        }

        /// <summary>   The access portal lock push button behavior UID. </summary>
        private System.Guid _accessPortalLockPushButtonBehaviorUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the access portal lock push button behavior UID. </summary>
        ///
        /// <value> The access portal lock push button behavior UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public System.Guid AccessPortalLockPushButtonBehaviorUid
        {
            get { return _accessPortalLockPushButtonBehaviorUid; }
            set
            {
                if (_accessPortalLockPushButtonBehaviorUid != value)
                {
                    _accessPortalLockPushButtonBehaviorUid = value;
                    OnPropertyChanged(() => AccessPortalLockPushButtonBehaviorUid, true, true);
                }
            }
        }

        /// <summary>   The liquid crystal display UID. </summary>
        private Nullable<System.Guid> _liquidCrystalDisplayUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the liquid crystal display UID. </summary>
        ///
        /// <value> The liquid crystal display UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public Nullable<System.Guid> LiquidCrystalDisplayUid
        {
            get { return _liquidCrystalDisplayUid; }
            set
            {
                if (_liquidCrystalDisplayUid != value)
                {
                    _liquidCrystalDisplayUid = value;
                    OnPropertyChanged(() => LiquidCrystalDisplayUid, true, true);
                }
            }
        }

        /// <summary>   The access portal elevator control type UID. </summary>
        private Nullable<System.Guid> _accessPortalElevatorControlTypeUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the access portal elevator control type UID. </summary>
        ///
        /// <value> The access portal elevator control type UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public Nullable<System.Guid> AccessPortalElevatorControlTypeUid
        {
            get { return _accessPortalElevatorControlTypeUid; }
            set
            {
                if (_accessPortalElevatorControlTypeUid != value)
                {
                    _accessPortalElevatorControlTypeUid = value;
                    OnPropertyChanged(() => AccessPortalElevatorControlTypeUid, true, true);
                }
            }
        }

        /// <summary>   The otis elevator decrement UID. </summary>
        private Nullable<System.Guid> _otisElevatorDecUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the otis elevator decrement UID. </summary>
        ///
        /// <value> The otis elevator decrement UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public Nullable<System.Guid> OtisElevatorDecUid
        {
            get { return _otisElevatorDecUid; }
            set
            {
                if (_otisElevatorDecUid != value)
                {
                    _otisElevatorDecUid = value;
                    OnPropertyChanged(() => OtisElevatorDecUid, true, true);
                }
            }
        }

        /// <summary>   The elevator relay interface board section UID. </summary>
        private Nullable<System.Guid> _elevatorRelayInterfaceBoardSectionUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the elevator relay interface board section UID. </summary>
        ///
        /// <value> The elevator relay interface board section UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public Nullable<System.Guid> ElevatorRelayInterfaceBoardSectionUid
        {
            get { return _elevatorRelayInterfaceBoardSectionUid; }
            set
            {
                if (_elevatorRelayInterfaceBoardSectionUid != value)
                {
                    _elevatorRelayInterfaceBoardSectionUid = value;
                    OnPropertyChanged(() => ElevatorRelayInterfaceBoardSectionUid, true, true);
                }
            }
        }

        /// <summary>   The access portal multi factor mode UID. </summary>
        private Guid _AccessPortalMultiFactorModeUid;

        [DataMember]

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the access portal multi factor mode UID. </summary>
        ///
        /// <value> The access portal multi factor mode UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the access portal multi factor mode UID. </summary>
        ///
        /// <value> The access portal multi factor mode UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the access portal multi factor mode UID. </summary>
        ///
        /// <value> The access portal multi factor mode UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the access portal multi factor mode UID. </summary>
        ///
        /// <value> The access portal multi factor mode UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public Guid AccessPortalMultiFactorModeUid
        {
            get { return _AccessPortalMultiFactorModeUid; }
            set
            {
                if (_AccessPortalMultiFactorModeUid != value)
                {
                    _AccessPortalMultiFactorModeUid = value;
                    OnPropertyChanged(() => AccessPortalMultiFactorModeUid, true, true);
                }
            }
        }


        /// <summary>   The unlock delay. </summary>
        private int _unlockDelay;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the unlock delay. </summary>
        ///
        /// <value> The unlock delay. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public int UnlockDelay
        {
            get { return _unlockDelay; }
            set
            {
                if (_unlockDelay != value)
                {
                    _unlockDelay = value;
                    OnPropertyChanged(() => UnlockDelay, true, true);
                }
            }
        }

        /// <summary>   Duration of the unlock. </summary>
        private int _unlockDuration;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the duration of the unlock. </summary>
        ///
        /// <value> The unlock duration. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public int UnlockDuration
        {
            get { return _unlockDuration; }
            set
            {
                if (_unlockDuration != value)
                {
                    _unlockDuration = value;
                    OnPropertyChanged(() => UnlockDuration, true, true);
                }
            }
        }

        /// <summary>   Duration of the reclose. </summary>
        private int _recloseDuration;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the duration of the reclose. </summary>
        ///
        /// <value> The reclose duration. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public int RecloseDuration
        {
            get { return _recloseDuration; }
            set
            {
                if (_recloseDuration != value)
                {
                    _recloseDuration = value;
                    OnPropertyChanged(() => RecloseDuration, true, true);
                }
            }
        }

        /// <summary>   True to allow, false to deny passback access. </summary>
        private bool _allowPassbackAccess;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether we allow passback access. </summary>
        ///
        /// <value> True if allow passback access, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool AllowPassbackAccess
        {
            get { return _allowPassbackAccess; }
            set
            {
                if (_allowPassbackAccess != value)
                {
                    _allowPassbackAccess = value;
                    OnPropertyChanged(() => AllowPassbackAccess, true, true);
                }
            }
        }

        /// <summary>   True to require two valid credentials. </summary>
        private bool _requireTwoValidCredentials;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the require two valid credentials. </summary>
        ///
        /// <value> True if require two valid credentials, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool RequireTwoValidCredentials
        {
            get { return _requireTwoValidCredentials; }
            set
            {
                if (_requireTwoValidCredentials != value)
                {
                    _requireTwoValidCredentials = value;
                    OnPropertyChanged(() => RequireTwoValidCredentials, true, true);
                }
            }
        }

        /// <summary>   True to unlock, false to lock the on rex. </summary>
        private bool _unlockOnREX;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the on rex is unlocked. </summary>
        ///
        /// <value> True if unlock on rex, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool UnlockOnREX
        {
            get { return _unlockOnREX; }
            set
            {
                if (_unlockOnREX != value)
                {
                    _unlockOnREX = value;
                    OnPropertyChanged(() => UnlockOnREX, true, true);
                }
            }
        }

        /// <summary>   True to suppress illegal open log. </summary>
        private bool _suppressIllegalOpenLog;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the suppress illegal open log. </summary>
        ///
        /// <value> True if suppress illegal open log, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool SuppressIllegalOpenLog
        {
            get { return _suppressIllegalOpenLog; }
            set
            {
                if (_suppressIllegalOpenLog != value)
                {
                    _suppressIllegalOpenLog = value;
                    OnPropertyChanged(() => SuppressIllegalOpenLog, true, true);
                }
            }
        }

        /// <summary>   True to suppress open too long log. </summary>
        private bool _suppressOpenTooLongLog;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the suppress open too long log. </summary>
        ///
        /// <value> True if suppress open too long log, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool SuppressOpenTooLongLog
        {
            get { return _suppressOpenTooLongLog; }
            set
            {
                if (_suppressOpenTooLongLog != value)
                {
                    _suppressOpenTooLongLog = value;
                    OnPropertyChanged(() => SuppressOpenTooLongLog, true, true);
                }
            }
        }

        /// <summary>   True to suppress closed log. </summary>
        private bool _suppressClosedLog;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the suppress closed log. </summary>
        ///
        /// <value> True if suppress closed log, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool SuppressClosedLog
        {
            get { return _suppressClosedLog; }
            set
            {
                if (_suppressClosedLog != value)
                {
                    _suppressClosedLog = value;
                    OnPropertyChanged(() => SuppressClosedLog, true, true);
                }
            }
        }

        /// <summary>   True to suppress rex log. </summary>
        private bool _suppressREXLog;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the suppress rex log. </summary>
        ///
        /// <value> True if suppress rex log, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool SuppressREXLog
        {
            get { return _suppressREXLog; }
            set
            {
                if (_suppressREXLog != value)
                {
                    _suppressREXLog = value;
                    OnPropertyChanged(() => SuppressREXLog, true, true);
                }
            }
        }


        /// <summary>   True to generate door contact change logs. </summary>
        private bool _generateDoorContactChangeLogs;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether the generate door contact change logs.
        /// </summary>
        ///
        /// <value> True if generate door contact change logs, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool GenerateDoorContactChangeLogs
        {
            get { return _generateDoorContactChangeLogs; }
            set
            {
                if (_generateDoorContactChangeLogs != value)
                {
                    _generateDoorContactChangeLogs = value;
                    OnPropertyChanged(() => GenerateDoorContactChangeLogs, true, true);
                }
            }
        }
        /// <summary>   True to lock, false to unlock the when door closes. </summary>
        private bool _lockWhenDoorCloses;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the when door closes is locked. </summary>
        ///
        /// <value> True if lock when door closes, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool LockWhenDoorCloses
        {
            get { return _lockWhenDoorCloses; }
            set
            {
                if (_lockWhenDoorCloses != value)
                {
                    _lockWhenDoorCloses = value;
                    OnPropertyChanged(() => LockWhenDoorCloses, true, true);
                }
            }
        }

        /// <summary>   True to enable, false to disable the duress. </summary>
        private bool _enableDuress;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the duress is enabled. </summary>
        ///
        /// <value> True if enable duress, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool EnableDuress
        {
            get { return _enableDuress; }
            set
            {
                if (_enableDuress != value)
                {
                    _enableDuress = value;
                    OnPropertyChanged(() => EnableDuress, true, true);
                }
            }
        }

        /// <summary>   True to door group notify. </summary>
        private bool _doorGroupNotify;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the door group notify. </summary>
        ///
        /// <value> True if door group notify, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool DoorGroupNotify
        {
            get { return _doorGroupNotify; }
            set
            {
                if (_doorGroupNotify != value)
                {
                    _doorGroupNotify = value;
                    OnPropertyChanged(() => DoorGroupNotify, true, true);
                }
            }
        }

        /// <summary>   True if door group can disable. </summary>
        private bool _doorGroupCanDisable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether this AccessPortalProperties is door group can disable.
        /// </summary>
        ///
        /// <value> True if door group can disable, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool DoorGroupCanDisable
        {
            get { return _doorGroupCanDisable; }
            set
            {
                if (_doorGroupCanDisable != value)
                {
                    _doorGroupCanDisable = value;
                    OnPropertyChanged(() => DoorGroupCanDisable, true, true);
                }
            }
        }

        /// <summary>   True to relay one on during arm delay. </summary>
        private bool _relayOneOnDuringArmDelay;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the relay one on during arm delay. </summary>
        ///
        /// <value> True if relay one on during arm delay, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool RelayOneOnDuringArmDelay
        {
            get { return _relayOneOnDuringArmDelay; }
            set
            {
                if (_relayOneOnDuringArmDelay != value)
                {
                    _relayOneOnDuringArmDelay = value;
                    OnPropertyChanged(() => RelayOneOnDuringArmDelay, true, true);
                }
            }
        }

        /// <summary>   True to require valid access for automatic unlock. </summary>
        private bool _requireValidAccessForAutoUnlock;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether the require valid access for automatic unlock.
        /// </summary>
        ///
        /// <value> True if require valid access for automatic unlock, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool RequireValidAccessForAutoUnlock
        {
            get { return _requireValidAccessForAutoUnlock; }
            set
            {
                if (_requireValidAccessForAutoUnlock != value)
                {
                    _requireValidAccessForAutoUnlock = value;
                    OnPropertyChanged(() => RequireValidAccessForAutoUnlock, true, true);
                }
            }
        }

        ///// <summary>   True to in specifies reclose duration. </summary>
        //private bool _pINSpecifiesRecloseDuration;

        //////////////////////////////////////////////////////////////////////////////////////////////////////
        ///// <summary>
        ///// Gets or sets a value indicating whether the pin specifies reclose duration.
        ///// </summary>
        /////
        ///// <value> True if pin specifies reclose duration, false if not. </value>
        //////////////////////////////////////////////////////////////////////////////////////////////////////

        //[DataMember]
        //public bool PINSpecifiesRecloseDuration
        //{
        //    get { return _pINSpecifiesRecloseDuration; }
        //    set
        //    {
        //        if (_pINSpecifiesRecloseDuration != value)
        //        {
        //            _pINSpecifiesRecloseDuration = value;
        //            OnPropertyChanged(() => PINSpecifiesRecloseDuration, true, true);
        //        }
        //    }
        //}

        /// <summary>   True to valid access requires door open. </summary>
        private bool _validAccessRequiresDoorOpen;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether the valid access requires door open.
        /// </summary>
        ///
        /// <value> True if valid access requires door open, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool ValidAccessRequiresDoorOpen
        {
            get { return _validAccessRequiresDoorOpen; }
            set
            {
                if (_validAccessRequiresDoorOpen != value)
                {
                    _validAccessRequiresDoorOpen = value;
                    OnPropertyChanged(() => ValidAccessRequiresDoorOpen, true, true);
                }
            }
        }

        /// <summary>   True to dont decrement limited swipe expire count. </summary>
        private bool _dontDecrementLimitedSwipeExpireCount;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether the dont decrement limited swipe expire count.
        /// </summary>
        ///
        /// <value> True if dont decrement limited swipe expire count, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool DontDecrementLimitedSwipeExpireCount
        {
            get { return _dontDecrementLimitedSwipeExpireCount; }
            set
            {
                if (_dontDecrementLimitedSwipeExpireCount != value)
                {
                    _dontDecrementLimitedSwipeExpireCount = value;
                    OnPropertyChanged(() => DontDecrementLimitedSwipeExpireCount, true, true);
                }
            }
        }

        /// <summary>   True to ignore not in system. </summary>
        private bool _ignoreNotInSystem;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the ignore not in system. </summary>
        ///
        /// <value> True if ignore not in system, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool IgnoreNotInSystem
        {
            get { return _ignoreNotInSystem; }
            set
            {
                if (_ignoreNotInSystem != value)
                {
                    _ignoreNotInSystem = value;
                    OnPropertyChanged(() => IgnoreNotInSystem, true, true);
                }
            }
        }

        /// <summary>   True to reader sends heartbeat. </summary>
        private bool _readerSendsHeartbeat;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the reader sends heartbeat. </summary>
        ///
        /// <value> True if reader sends heartbeat, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool ReaderSendsHeartbeat
        {
            get { return _readerSendsHeartbeat; }
            set
            {
                if (_readerSendsHeartbeat != value)
                {
                    _readerSendsHeartbeat = value;
                    OnPropertyChanged(() => ReaderSendsHeartbeat, true, true);
                }
            }
        }

        /// <summary>   True to enable, false to disable the photo verification. </summary>
        private bool _photoVerificationEnabled;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the photo verification is enabled. </summary>
        ///
        /// <value> True if photo verification enabled, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool PhotoVerificationEnabled
        {
            get { return _photoVerificationEnabled; }
            set
            {
                if (_photoVerificationEnabled != value)
                {
                    _photoVerificationEnabled = value;
                    OnPropertyChanged(() => PhotoVerificationEnabled);
                }
            }
        }

        /// <summary>   True to time attendance portal. </summary>
        private bool _timeAttendancePortal;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the time attendance portal. </summary>
        ///
        /// <value> True if time attendance portal, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool TimeAttendancePortal
        {
            get { return _timeAttendancePortal; }
            set
            {
                if (_timeAttendancePortal != value)
                {
                    _timeAttendancePortal = value;
                    OnPropertyChanged(() => TimeAttendancePortal);
                }
            }
        }

        /// <summary>   True to enable, false to disable the mail events. </summary>
        private bool _eMailEventsEnabled;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the mail events is enabled. </summary>
        ///
        /// <value> True if mail events enabled, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool EMailEventsEnabled
        {
            get { return _eMailEventsEnabled; }
            set
            {
                if (_eMailEventsEnabled != value)
                {
                    _eMailEventsEnabled = value;
                    OnPropertyChanged(() => EMailEventsEnabled);
                }
            }
        }

        /// <summary>   True to enable, false to disable the transmit events. </summary>
        private bool _transmitEventsEnabled;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the transmit events is enabled. </summary>
        ///
        /// <value> True if transmit events enabled, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool TransmitEventsEnabled
        {
            get { return _transmitEventsEnabled; }
            set
            {
                if (_transmitEventsEnabled != value)
                {
                    _transmitEventsEnabled = value;
                    OnPropertyChanged(() => TransmitEventsEnabled);
                }
            }
        }

        /// <summary>   True to enable, false to disable the file output. </summary>
        private bool _fileOutputEnabled;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the file output is enabled. </summary>
        ///
        /// <value> True if file output enabled, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public bool FileOutputEnabled
        {
            get { return _fileOutputEnabled; }
            set
            {
                if (_fileOutputEnabled != value)
                {
                    _fileOutputEnabled = value;
                    OnPropertyChanged(() => FileOutputEnabled);
                }
            }
        }

        /// <summary>   Name of the insert. </summary>
        private string _insertName;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the name of the insert. </summary>
        ///
        /// <value> The name of the insert. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public string InsertName
        {
            get { return _insertName; }
            set
            {
                if (_insertName != value)
                {
                    _insertName = value;
                    OnPropertyChanged(() => InsertName);
                }
            }
        }

        /// <summary>   The insert date. </summary>
        private System.DateTimeOffset _insertDate;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the insert date. </summary>
        ///
        /// <value> The insert date. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public System.DateTimeOffset InsertDate
        {
            get { return _insertDate; }
            set
            {
                if (_insertDate != value)
                {
                    _insertDate = value;
                    OnPropertyChanged(() => InsertDate);
                }
            }
        }

        /// <summary>   Name of the update. </summary>
        private string _updateName;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the name of the update. </summary>
        ///
        /// <value> The name of the update. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public string UpdateName
        {
            get { return _updateName; }
            set
            {
                if (_updateName != value)
                {
                    _updateName = value;
                    OnPropertyChanged(() => UpdateName);
                }
            }
        }

        /// <summary>   The update. </summary>
        private Nullable<System.DateTimeOffset> _updateDate;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the update. </summary>
        ///
        /// <value> The update date. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public Nullable<System.DateTimeOffset> UpdateDate
        {
            get { return _updateDate; }
            set
            {
                if (_updateDate != value)
                {
                    _updateDate = value;
                    OnPropertyChanged(() => UpdateDate);
                }
            }
        }

        /// <summary>   The concurrency value. </summary>
        private Nullable<short> _concurrencyValue;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the concurrency value. </summary>
        ///
        /// <value> The concurrency value. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        [DataMember]
        public Nullable<short> ConcurrencyValue
        {
            get { return _concurrencyValue; }
            set
            {
                if (_concurrencyValue != value)
                {
                    _concurrencyValue = value;
                    OnPropertyChanged(() => ConcurrencyValue);
                }
            }
        }


        ///// <summary>   The access portal. </summary>
        //private AccessPortal _accessPortal;

        //////////////////////////////////////////////////////////////////////////////////////////////////////
        ///// <summary>   Gets or sets the access portal. </summary>
        /////
        ///// <value> The access portal. </value>
        //////////////////////////////////////////////////////////////////////////////////////////////////////

        //[DataMember]
        //public virtual AccessPortal AccessPortal
        //{
        //    get { return _accessPortal; }
        //    set
        //    {
        //        if (_accessPortal != value)
        //        {
        //            _accessPortal = value;
        //            OnPropertyChanged(() => AccessPortal);
        //        }
        //    }
        //}

        ///// <summary>   Type of the access portal contact supervision. </summary>
        //private AccessPortalContactSupervisionType _accessPortalContactSupervisionType;

        //////////////////////////////////////////////////////////////////////////////////////////////////////
        ///// <summary>   Gets or sets the type of the access portal contact supervision. </summary>
        /////
        ///// <value> The type of the access portal contact supervision. </value>
        //////////////////////////////////////////////////////////////////////////////////////////////////////

        //[DataMember]
        //public virtual AccessPortalContactSupervisionType AccessPortalContactSupervisionType
        //{
        //    get { return _accessPortalContactSupervisionType; }
        //    set
        //    {
        //        if (_accessPortalContactSupervisionType != value)
        //        {
        //            _accessPortalContactSupervisionType = value;
        //            OnPropertyChanged(() => AccessPortalContactSupervisionType, true, true);
        //        }
        //    }
        //}

        ///// <summary>   The access portal defer to server behavior. </summary>
        //private AccessPortalDeferToServerBehavior _accessPortalDeferToServerBehavior;

        //////////////////////////////////////////////////////////////////////////////////////////////////////
        ///// <summary>   Gets or sets the access portal defer to server behavior. </summary>
        /////
        ///// <value> The access portal defer to server behavior. </value>
        //////////////////////////////////////////////////////////////////////////////////////////////////////

        //[DataMember]
        //public virtual AccessPortalDeferToServerBehavior AccessPortalDeferToServerBehavior
        //{
        //    get { return _accessPortalDeferToServerBehavior; }
        //    set
        //    {
        //        if (_accessPortalDeferToServerBehavior != value)
        //        {
        //            _accessPortalDeferToServerBehavior = value;
        //            OnPropertyChanged(() => AccessPortalDeferToServerBehavior, true, true);
        //        }
        //    }
        //}

        ///// <summary>   Type of the access portal elevator control. </summary>
        //private AccessPortalElevatorControlType _accessPortalElevatorControlType;

        //////////////////////////////////////////////////////////////////////////////////////////////////////
        ///// <summary>   Gets or sets the type of the access portal elevator control. </summary>
        /////
        ///// <value> The type of the access portal elevator control. </value>
        //////////////////////////////////////////////////////////////////////////////////////////////////////

        //[DataMember]
        //public virtual AccessPortalElevatorControlType AccessPortalElevatorControlType
        //{
        //    get { return _accessPortalElevatorControlType; }
        //    set
        //    {
        //        if (_accessPortalElevatorControlType != value)
        //        {
        //            _accessPortalElevatorControlType = value;
        //            OnPropertyChanged(() => AccessPortalElevatorControlType, true, true);
        //        }
        //    }
        //}

        ///// <summary>   The access portal lock push button behavior. </summary>
        //private AccessPortalLockPushButtonBehavior _accessPortalLockPushButtonBehavior;

        //////////////////////////////////////////////////////////////////////////////////////////////////////
        ///// <summary>   Gets or sets the access portal lock push button behavior. </summary>
        /////
        ///// <value> The access portal lock push button behavior. </value>
        //////////////////////////////////////////////////////////////////////////////////////////////////////

        //[DataMember]
        //public virtual AccessPortalLockPushButtonBehavior AccessPortalLockPushButtonBehavior
        //{
        //    get { return _accessPortalLockPushButtonBehavior; }
        //    set
        //    {
        //        if (_accessPortalLockPushButtonBehavior != value)
        //        {
        //            _accessPortalLockPushButtonBehavior = value;
        //            OnPropertyChanged(() => AccessPortalLockPushButtonBehavior, true, true);
        //        }
        //    }
        //}

        ///// <summary>   The access portal no server reply behavior. </summary>
        //private AccessPortalNoServerReplyBehavior _accessPortalNoServerReplyBehavior;

        //////////////////////////////////////////////////////////////////////////////////////////////////////
        ///// <summary>   Gets or sets the access portal no server reply behavior. </summary>
        /////
        ///// <value> The access portal no server reply behavior. </value>
        //////////////////////////////////////////////////////////////////////////////////////////////////////

        //[DataMember]
        //public virtual AccessPortalNoServerReplyBehavior AccessPortalNoServerReplyBehavior
        //{
        //    get { return _accessPortalNoServerReplyBehavior; }
        //    set
        //    {
        //        if (_accessPortalNoServerReplyBehavior != value)
        //        {
        //            _accessPortalNoServerReplyBehavior = value;
        //            OnPropertyChanged(() => AccessPortalNoServerReplyBehavior, true, true);
        //        }
        //    }
        //}
    }

}
