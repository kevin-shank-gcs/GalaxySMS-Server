//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using FluentValidation;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   A feature. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

	[DataContract]
	public partial class Feature : DbObjectBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class Feature
        {
        	public Feature()
        	{
        		Initialize();
        	}
        
        	public Feature(Feature e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		this.AccessPortalTypeFeatureMaps = new HashSet<AccessPortalTypeFeatureMap>();
        		this.CredentialReaderTypeFeatureMaps = new HashSet<CredentialReaderTypeFeatureMap>();
        		this.FeatureItems = new HashSet<FeatureItem>();
        }
        
        	public void Initialize(Feature e)
        	{
        		Initialize();
        		if( e == null )
        			return;
        		this.FeatureUid = e.FeatureUid;
        		this.CategoryCode = e.CategoryCode;
        		this.FeatureCode = e.FeatureCode;
        		this.Description = e.Description;
        		this.FeatureType = e.FeatureType;
        		this.DefaultValue = e.DefaultValue;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.AccessPortalTypeFeatureMaps = e.AccessPortalTypeFeatureMaps.ToCollection();
        		this.CredentialReaderTypeFeatureMaps = e.CredentialReaderTypeFeatureMaps.ToCollection();
        		this.FeatureItems = e.FeatureItems.ToCollection();
        		
        	}
        
        	public Feature Clone(Feature e)
        	{
        		return new Feature(e);
        	}
        
        	public bool Equals(Feature other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(Feature other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.FeatureUid != this.FeatureUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
        /// <summary>   The feature UID. </summary>
    	private System.Guid _featureUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the feature UID. </summary>
        ///
        /// <value> The feature UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public System.Guid FeatureUid
    	{ 
    		get { return _featureUid; }
    		set
    		{
    			if (_featureUid != value )
    			{
    				_featureUid = value;
    				OnPropertyChanged(() => FeatureUid);
    			}
    		}
    	}
    	
        /// <summary>   The category code. </summary>
    	private string _categoryCode;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the category code. </summary>
        ///
        /// <value> The category code. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public string CategoryCode
    	{ 
    		get { return _categoryCode; }
    		set
    		{
    			if (_categoryCode != value )
    			{
    				_categoryCode = value;
    				OnPropertyChanged(() => CategoryCode);
    			}
    		}
    	}
    	
        /// <summary>   The feature code. </summary>
    	private string _featureCode;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the feature code. </summary>
        ///
        /// <value> The feature code. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public string FeatureCode
    	{ 
    		get { return _featureCode; }
    		set
    		{
    			if (_featureCode != value )
    			{
    				_featureCode = value;
    				OnPropertyChanged(() => FeatureCode);
    			}
    		}
    	}
    	
        /// <summary>   The description. </summary>
    	private string _description;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the description. </summary>
        ///
        /// <value> The description. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public string Description
    	{ 
    		get { return _description; }
    		set
    		{
    			if (_description != value )
    			{
    				_description = value;
    				OnPropertyChanged(() => Description);
    			}
    		}
    	}
    	
        /// <summary>   Type of the feature. </summary>
    	private string _featureType;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the type of the feature. </summary>
        ///
        /// <value> The type of the feature. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public string FeatureType
    	{ 
    		get { return _featureType; }
    		set
    		{
    			if (_featureType != value )
    			{
    				_featureType = value;
    				OnPropertyChanged(() => FeatureType);
    			}
    		}
    	}
    	
        /// <summary>   The default value. </summary>
    	private string _defaultValue;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the default value. </summary>
        ///
        /// <value> The default value. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public string DefaultValue
    	{ 
    		get { return _defaultValue; }
    		set
    		{
    			if (_defaultValue != value )
    			{
    				_defaultValue = value;
    				OnPropertyChanged(() => DefaultValue);
    			}
    		}
    	}
    	
        /// <summary>   Name of the insert. </summary>
    	private string _insertName;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the name of the insert. </summary>
        ///
        /// <value> The name of the insert. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
        /// <summary>   The insert date. </summary>
    	private System.DateTimeOffset _insertDate;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the insert date. </summary>
        ///
        /// <value> The insert date. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public System.DateTimeOffset InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
        /// <summary>   Name of the update. </summary>
    	private string _updateName;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the name of the update. </summary>
        ///
        /// <value> The name of the update. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
        /// <summary>   The update. </summary>
    	private Nullable<System.DateTimeOffset> _updateDate;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the update. </summary>
        ///
        /// <value> The update date. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public Nullable<System.DateTimeOffset> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
        /// <summary>   The concurrency value. </summary>
    	private Nullable<short> _concurrencyValue;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the concurrency value. </summary>
        ///
        /// <value> The concurrency value. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    
    	
        /// <summary>   The access portal type feature maps. </summary>
    	private ICollection<AccessPortalTypeFeatureMap> _accessPortalTypeFeatureMaps;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the access portal type feature maps. </summary>
        ///
        /// <value> The access portal type feature maps. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public virtual ICollection<AccessPortalTypeFeatureMap> AccessPortalTypeFeatureMaps
    	{ 
    		get { return _accessPortalTypeFeatureMaps; }
    		set
    		{
    			if (_accessPortalTypeFeatureMaps != value )
    			{
    				_accessPortalTypeFeatureMaps = value;
    				OnPropertyChanged(() => AccessPortalTypeFeatureMaps);
    			}
    		}
    	}
    	
        /// <summary>   The credential reader type feature maps. </summary>
    	private ICollection<CredentialReaderTypeFeatureMap> _credentialReaderTypeFeatureMaps;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the credential reader type feature maps. </summary>
        ///
        /// <value> The credential reader type feature maps. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public virtual ICollection<CredentialReaderTypeFeatureMap> CredentialReaderTypeFeatureMaps
    	{ 
    		get { return _credentialReaderTypeFeatureMaps; }
    		set
    		{
    			if (_credentialReaderTypeFeatureMaps != value )
    			{
    				_credentialReaderTypeFeatureMaps = value;
    				OnPropertyChanged(() => CredentialReaderTypeFeatureMaps);
    			}
    		}
    	}
    	
        /// <summary>   The feature items. </summary>
    	private ICollection<FeatureItem> _featureItems;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the feature items. </summary>
        ///
        /// <value> The feature items. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public virtual ICollection<FeatureItem> FeatureItems
    	{ 
    		get { return _featureItems; }
    		set
    		{
    			if (_featureItems != value )
    			{
    				_featureItems = value;
    				OnPropertyChanged(() => FeatureItems);
    			}
    		}
    	}
    }
    
}
