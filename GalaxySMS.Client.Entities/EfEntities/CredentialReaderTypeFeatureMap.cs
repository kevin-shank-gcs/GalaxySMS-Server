//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using FluentValidation;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Map of credential reader type features. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

	[DataContract]
	public partial class CredentialReaderTypeFeatureMap : DbObjectBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class CredentialReaderTypeFeatureMap
        {
        	public CredentialReaderTypeFeatureMap()
        	{
        		Initialize();
        	}
        
        	public CredentialReaderTypeFeatureMap(CredentialReaderTypeFeatureMap e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        }
        
        	public void Initialize(CredentialReaderTypeFeatureMap e)
        	{
        		Initialize();
        		if( e == null )
        			return;
        		this.CredentialReaderTypeFeatureMapUid = e.CredentialReaderTypeFeatureMapUid;
        		this.CredentialReaderTypeUid = e.CredentialReaderTypeUid;
        		this.FeatureUid = e.FeatureUid;
        		this.IsSupported = e.IsSupported;
        		this.IsActive = e.IsActive;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		
        	}
        
        	public CredentialReaderTypeFeatureMap Clone(CredentialReaderTypeFeatureMap e)
        	{
        		return new CredentialReaderTypeFeatureMap(e);
        	}
        
        	public bool Equals(CredentialReaderTypeFeatureMap other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(CredentialReaderTypeFeatureMap other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.CredentialReaderTypeFeatureMapUid != this.CredentialReaderTypeFeatureMapUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
        /// <summary>   The credential reader type features UID. </summary>
    	private System.Guid _credentialReaderTypeFeaturesUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the credential reader type feature map UID. </summary>
        ///
        /// <value> The credential reader type feature map UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public System.Guid CredentialReaderTypeFeatureMapUid
    	{ 
    		get { return _credentialReaderTypeFeaturesUid; }
    		set
    		{
    			if (_credentialReaderTypeFeaturesUid != value )
    			{
    				_credentialReaderTypeFeaturesUid = value;
    				OnPropertyChanged(() => CredentialReaderTypeFeatureMapUid);
    			}
    		}
    	}
    	
        /// <summary>   The credential reader type UID. </summary>
    	private System.Guid _credentialReaderTypeUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the credential reader type UID. </summary>
        ///
        /// <value> The credential reader type UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public System.Guid CredentialReaderTypeUid
    	{ 
    		get { return _credentialReaderTypeUid; }
    		set
    		{
    			if (_credentialReaderTypeUid != value )
    			{
    				_credentialReaderTypeUid = value;
    				OnPropertyChanged(() => CredentialReaderTypeUid);
    			}
    		}
    	}
    	
        /// <summary>   The feature UID. </summary>
    	private System.Guid _featureUid;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the feature UID. </summary>
        ///
        /// <value> The feature UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public System.Guid FeatureUid
    	{ 
    		get { return _featureUid; }
    		set
    		{
    			if (_featureUid != value )
    			{
    				_featureUid = value;
    				OnPropertyChanged(() => FeatureUid);
    			}
    		}
    	}
    	
        /// <summary>   True if this CredentialReaderTypeFeatureMap is supported. </summary>
    	private bool _isSupported;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether this CredentialReaderTypeFeatureMap is supported.
        /// </summary>
        ///
        /// <value> True if this CredentialReaderTypeFeatureMap is supported, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public bool IsSupported
    	{ 
    		get { return _isSupported; }
    		set
    		{
    			if (_isSupported != value )
    			{
    				_isSupported = value;
    				OnPropertyChanged(() => IsSupported);
    			}
    		}
    	}
    	
        /// <summary>   True if this CredentialReaderTypeFeatureMap is active. </summary>
    	private bool _isActive;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether this CredentialReaderTypeFeatureMap is active.
        /// </summary>
        ///
        /// <value> True if this CredentialReaderTypeFeatureMap is active, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public bool IsActive
    	{ 
    		get { return _isActive; }
    		set
    		{
    			if (_isActive != value )
    			{
    				_isActive = value;
    				OnPropertyChanged(() => IsActive);
    			}
    		}
    	}
    	
        /// <summary>   Name of the insert. </summary>
    	private string _insertName;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the name of the insert. </summary>
        ///
        /// <value> The name of the insert. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
        /// <summary>   The insert date. </summary>
    	private System.DateTimeOffset _insertDate;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the insert date. </summary>
        ///
        /// <value> The insert date. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public System.DateTimeOffset InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
        /// <summary>   Name of the update. </summary>
    	private string _updateName;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the name of the update. </summary>
        ///
        /// <value> The name of the update. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
        /// <summary>   The update. </summary>
    	private Nullable<System.DateTimeOffset> _updateDate;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the update. </summary>
        ///
        /// <value> The update date. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public Nullable<System.DateTimeOffset> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
        /// <summary>   The concurrency value. </summary>
    	private Nullable<short> _concurrencyValue;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the concurrency value. </summary>
        ///
        /// <value> The concurrency value. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    
    	
        /// <summary>   Type of the credential reader. </summary>
    	private CredentialReaderType _credentialReaderType;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the type of the credential reader. </summary>
        ///
        /// <value> The type of the credential reader. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public virtual CredentialReaderType CredentialReaderType
    	{ 
    		get { return _credentialReaderType; }
    		set
    		{
    			if (_credentialReaderType != value )
    			{
    				_credentialReaderType = value;
    				OnPropertyChanged(() => CredentialReaderType);
    			}
    		}
    	}
    	
        /// <summary>   The feature. </summary>
    	private Feature _feature;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the feature. </summary>
        ///
        /// <value> The feature. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	[DataMember]
    	public virtual Feature Feature
    	{ 
    		get { return _feature; }
    		set
    		{
    			if (_feature != value )
    			{
    				_feature = value;
    				OnPropertyChanged(() => Feature);
    			}
    		}
    	}
    }
    
}
