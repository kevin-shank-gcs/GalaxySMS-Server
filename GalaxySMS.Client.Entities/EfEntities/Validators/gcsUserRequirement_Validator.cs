//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using FluentValidation.Validators;

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using FluentValidation;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   The gcs user requirement. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public partial class gcsUserRequirement
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   The gcs user requirement validator. </summary>
        ///
        /// <remarks>   Kevin, 12/26/2018. </remarks>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public class gcsUserRequirementValidator : AbstractValidator<gcsUserRequirement>
    	{
            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>   Default constructor. </summary>
            ///
            /// <remarks>   Kevin, 12/26/2018. </remarks>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

    		public gcsUserRequirementValidator()
    		{
    		    RuleFor(obj => obj.PasswordMinimumLength).NotEmpty().InclusiveBetween((short)0, (short)100);
                RuleFor(obj => obj.PasswordMaximumLength).NotEmpty().InclusiveBetween((short)1, (short)100);
                //RuleFor(obj => obj.PasswordMaximumLength).GreaterThanOrEqualTo(obj => obj.PasswordMinimumLength).WithLocalizedMessage(() => Properties.Resources.EditUserRequirementsView_ValidatePasswordMinimumLengthMustBeLessThanEqualToMaximumLength);
                RuleFor(obj => obj.PasswordMaximumLength).GreaterThanOrEqualTo(obj => obj.PasswordMinimumLength).WithMessage(x=> Properties.Resources.EditUserRequirementsView_ValidatePasswordMinimumLengthMustBeLessThanEqualToMaximumLength);
                RuleFor(obj => obj.PasswordMinimumLength).LessThanOrEqualTo(obj => obj.PasswordMaximumLength);

    		    RuleFor(obj => obj.PasswordMinimumChangeCharacters).LessThanOrEqualTo(obj => obj.PasswordMaximumLength);

                RuleFor(obj => obj.MaximumPasswordAge).GreaterThanOrEqualTo(obj => obj.MinimumPasswordAge);
                RuleFor(obj => obj.MinimumPasswordAge).LessThanOrEqualTo(obj => obj.MaximumPasswordAge);
    		}
    	}

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets the validator. </summary>
        ///
        /// <remarks>   Kevin, 12/26/2018. </remarks>
        ///
        /// <returns>   The validator. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

    	protected override IValidator GetValidator()
    	{
    		return new gcsUserRequirementValidator();
    	}
    }
    
}
