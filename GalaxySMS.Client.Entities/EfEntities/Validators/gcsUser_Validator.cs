//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using FluentValidation.Results;
using FluentValidation.Validators;
using GalaxySMS.Client.Entities.Properties;
using GCS.Framework.Security;

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
    using GCS.Core.Common.Core;
    using FluentValidation;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   The gcs user. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public partial class gcsUser
    {
        //class PasswordValidator : PropertyValidator
        //{
        //    public PasswordValidator()
        //        : base(Properties.Resources.ValidationMessage_UserPasswordInvalid)
        //    {
        //        _user = null;
        //        _requirements = null;
        //    }
        //    public PasswordValidator(gcsUser user, gcsUserRequirement requirements)
        //        : base(Properties.Resources.ValidationMessage_UserPasswordInvalid)
        //    {
        //        _user = user;
        //        _requirements = requirements;

        //    }

        //    protected override bool IsValid(PropertyValidatorContext context)
        //    {
        //        if (_user == null)
        //            return false;//PasswordValidationResult.InvalidParameter;
        //        if (_user.PrimaryEntityId == null)
        //            return false;//PasswordValidationResult.InvalidParameter;
        //        if (_user.PrimaryEntityId == Guid.Empty)
        //            return false;//PasswordValidationResult.InvalidParameter;
        //        if (_requirements == null)
        //            return false;

        //        String newPwd = Crypto.DecryptString(_user.UserPassword, _user.LoginName);

        //        var validator = new PasswordGeneratorValidator();
        //        var validationParameters = new ValidatePasswordParameters()
        //        {
        //            CustomRegularExpression = _requirements.PasswordCustomRegEx,
        //            MaximumLength = _requirements.PasswordMaximumLength,
        //            MinimumLength = _requirements.PasswordMinimumLength,
        //            RequiredLowerCaseCharacterCount = _requirements.RequireLowerCaseLetterCount,
        //            RequiredNumericDigitCount = _requirements.RequireNumericDigitCount,
        //            RequiredSpecialCharacterCount = _requirements.RequireSpecialCharacterCount,
        //            RequiredUpperCaseCharacterCount = _requirements.RequireUpperCaseLetterCount,
        //            UseCustomRegularExpression = _requirements.UseCustomRegEx
        //        };

        //        if (_requirements.PasswordCannotContainName)
        //        {
        //            validationParameters.AddIllegalContent(_user.LastName);
        //            validationParameters.AddIllegalContent(_user.FirstName);
        //            validationParameters.AddIllegalContent(_user.DisplayName);
        //            validationParameters.AddIllegalContent(_user.LoginName);
        //            validationParameters.AddIllegalContent(_user.UserInitials);
        //            validationParameters.AddIllegalContent(_user.EmailAddress);
        //        }

        //        var validationResult = validator.ValidatePassword(newPwd, validationParameters);

        //        foreach (PasswordValidationResult res in validationResult)
        //        {
        //            if (res != PasswordValidationResult.Valid)
        //            {
        //                return false;
        //            }
        //        }

        //        int x = 0;
        //        foreach (gcsUserOldPassword oldPassword in _user.gcsUserOldPasswords)
        //        {
        //            String oldPwd = Crypto.DecryptString(oldPassword.Password, _user.LoginName);
        //            if (newPwd == oldPwd)
        //                return false;

        //            if (x == 0)
        //            {
        //                int differentCharacterCount = 0;
        //                int pwdLen = newPwd.Length;
        //                if (newPwd.Length > oldPwd.Length)
        //                    pwdLen = oldPwd.Length;

        //                for (int c = 0; c < pwdLen; c++)
        //                {
        //                    if (newPwd[c] != oldPwd[c])
        //                        differentCharacterCount++;
        //                }

        //                if (newPwd.Length > oldPwd.Length)
        //                {
        //                    differentCharacterCount += newPwd.Length - oldPwd.Length;
        //                }
        //                else if (oldPwd.Length > newPwd.Length)
        //                {
        //                    differentCharacterCount += oldPwd.Length - newPwd.Length;
        //                }
        //                if (differentCharacterCount < _requirements.PasswordMinimumChangeCharacters)
        //                    return false;
        //            }
        //            x++;
        //        }
        //        return true;
        //    }


        //    private gcsUserRequirement _requirements;
        //    private gcsUser _user;
        //}

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   The gcs user validator. </summary>
        ///
        /// <remarks>   Kevin, 12/26/2018. </remarks>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        class gcsUserValidator : AbstractValidator<gcsUser>
        {
            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>   Default constructor. </summary>
            ///
            /// <remarks>   Kevin, 12/26/2018. </remarks>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            public gcsUserValidator()
            {
                RuleFor(obj => obj.UserName).NotEmpty().Length(1, 100);
                RuleFor(obj => obj.FirstName).NotEmpty().Length(1, 30);
                RuleFor(obj => obj.LastName).NotEmpty().Length(1, 30);
                RuleFor(obj => obj.Email).NotEmpty().EmailAddress();
                RuleFor(obj => obj.DisplayName).NotEmpty().Length(1, 100);
                RuleFor(obj => obj.PhoneNumber).NotEmpty().Length(1, 100);
                RuleFor(obj => obj.PrimaryEntityId).NotEqual(Guid.Empty).WithMessage(x => Properties.Resources.ValidationMessage_UserPrimaryEntityRequired);
                RuleFor(obj => obj.UserActivationDate).LessThanOrEqualTo(obj => obj.UserExpirationDate).WithMessage(x => Properties.Resources.ValidationMessage_UserActivationDateMustBeBeforeExpirationDate);
                RuleFor(obj => obj.UserExpirationDate).GreaterThanOrEqualTo(obj => obj.UserActivationDate).WithMessage(x => Properties.Resources.ValidationMessage_UserExpirationDateMustBeBeforeActivationDate);

                When(obj => obj.IsPasswordValidationRequired, () =>
                {
                    RuleFor(obj => obj.UserPassword)
                        .Must((obj, password) => IsPasswordValid(obj))
                        .WithMessage(Properties.Resources.ValidationMessage_UserPasswordDoesNotMeetRequirements);
                    RuleFor(obj => obj.ConfirmPassword).Equal(obj => obj.UserPassword).WithMessage(x => Properties.Resources.ValidationMessage_PasswordsDoNotMatch);
                });


                //RuleFor(obj => obj.IsPasswordValid)
                //    .Equal(true)
                //    .WithLocalizedMessage(
                //        () => Properties.Resources.ValidationMessage_UserPasswordDoesNotMeetRequirements);
            }

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>   Query if 'user' is password valid. </summary>
            ///
            /// <remarks>   Kevin, 12/26/2018. </remarks>
            ///
            /// <param name="user"> The user. </param>
            ///
            /// <returns>   True if password valid, false if not. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            private bool IsPasswordValid(gcsUser user)
            {
                if (user == null)
                    return false;//PasswordValidationResult.InvalidParameter;
                if (user.PrimaryEntityId == null)
                    return false;//PasswordValidationResult.InvalidParameter;
                if (user.PrimaryEntityId == Guid.Empty)
                    return false;//PasswordValidationResult.InvalidParameter;
                if (user.UserRequirements == null)
                    return true;
                if (user.UserId != Guid.Empty)
                {   // if the user.UserId is not equal to Guid.Empty, then this user is being updated, not added. 
                    // In this case. if the password is blank, then the password is not being modified, so return True indicating that the password is valid
                    if (string.IsNullOrEmpty(user.UserPassword))
                        return true;

                    if (string.IsNullOrWhiteSpace(user.UserPassword))
                        return true;
                }

                //String newPwd = Crypto.DecryptString(user.UserPassword, user.LoginName);
                String newPwd = user.UserPassword;

                var validator = new PasswordGeneratorValidator();
                var validationParameters = new ValidatePasswordParameters()
                {
                    CustomRegularExpression = user.UserRequirements.PasswordCustomRegEx,
                    MaximumLength = user.UserRequirements.PasswordMaximumLength,
                    MinimumLength = user.UserRequirements.PasswordMinimumLength,
                    RequiredLowerCaseCharacterCount = user.UserRequirements.RequireLowerCaseLetterCount,
                    RequiredNumericDigitCount = user.UserRequirements.RequireNumericDigitCount,
                    RequiredSpecialCharacterCount = user.UserRequirements.RequireSpecialCharacterCount,
                    RequiredUpperCaseCharacterCount = user.UserRequirements.RequireUpperCaseLetterCount,
                    UseCustomRegularExpression = user.UserRequirements.UseCustomRegEx
                };

                if (user.UserRequirements.PasswordCannotContainName)
                {
                    validationParameters.AddIllegalContent(user.LastName);
                    validationParameters.AddIllegalContent(user.FirstName);
                    validationParameters.AddIllegalContent(user.DisplayName);
                    validationParameters.AddIllegalContent(user.UserName);
                    validationParameters.AddIllegalContent(user.UserInitials);
                    validationParameters.AddIllegalContent(user.Email);
                }

                var validationResult = validator.ValidatePassword(newPwd, validationParameters);

                foreach (PasswordValidationResult res in validationResult)
                {
                    if (res != PasswordValidationResult.Valid)
                    {
                        return false;
                    }
                }

                int x = 0;
                foreach (gcsUserOldPassword oldPassword in user.UserOldPasswords)
                {
                    String oldPwd = Crypto.DecryptString(oldPassword.Password, user.UserId.ToString());
                    if (newPwd == oldPwd)
                        return false;

                    if (x == 0)
                    {
                        int differentCharacterCount = 0;
                        int pwdLen = newPwd.Length;
                        if (newPwd.Length > oldPwd.Length)
                            pwdLen = oldPwd.Length;

                        for (int c = 0; c < pwdLen; c++)
                        {
                            if (newPwd[c] != oldPwd[c])
                                differentCharacterCount++;
                        }

                        if (newPwd.Length > oldPwd.Length)
                        {
                            differentCharacterCount += newPwd.Length - oldPwd.Length;
                        }
                        else if (oldPwd.Length > newPwd.Length)
                        {
                            differentCharacterCount += oldPwd.Length - newPwd.Length;
                        }
                        if (differentCharacterCount < user.UserRequirements.PasswordMinimumChangeCharacters)
                            return false;
                    }
                    x++;
                }
                return true;
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets the validator. </summary>
        ///
        /// <remarks>   Kevin, 12/26/2018. </remarks>
        ///
        /// <returns>   The validator. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        protected override IValidator GetValidator()
        {
            return new gcsUserValidator();
        }
    }

}
