//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class gcsLargeObjectStorage : DbObjectBase, ITableEntityBase
    {
    
    	private System.Guid _uid;
    
    	[DataMember]
    	public System.Guid Uid
    	{ 
    		get { return _uid; }
    		set
    		{
    			if (_uid != value )
    			{
    				_uid = value;
    				OnPropertyChanged(() => Uid);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _entityId;
    
    	[DataMember]
    	public Nullable<System.Guid> EntityId
    	{ 
    		get { return _entityId; }
    		set
    		{
    			if (_entityId != value )
    			{
    				_entityId = value;
    				OnPropertyChanged(() => EntityId);
    			}
    		}
    	}
    	
    	private string _uniqueTag;
    
    	[DataMember]
    	public string UniqueTag
    	{ 
    		get { return _uniqueTag; }
    		set
    		{
    			if (_uniqueTag != value )
    			{
    				_uniqueTag = value;
    				OnPropertyChanged(() => UniqueTag);
    			}
    		}
    	}
    	
    	private string _dataType;
    
    	[DataMember]
    	public string DataType
    	{ 
    		get { return _dataType; }
    		set
    		{
    			if (_dataType != value )
    			{
    				_dataType = value;
    				OnPropertyChanged(() => DataType);
    			}
    		}
    	}
    	
    	private string _textData;
    
    	[DataMember]
    	public string TextData
    	{ 
    		get { return _textData; }
    		set
    		{
    			if (_textData != value )
    			{
    				_textData = value;
    				OnPropertyChanged(() => TextData);
    			}
    		}
    	}
    	
    	private byte[] _fileStreamData;
    
    	[DataMember]
    	public byte[] FileStreamData
    	{ 
    		get { return _fileStreamData; }
    		set
    		{
    			if (_fileStreamData != value )
    			{
    				_fileStreamData = value;
    				OnPropertyChanged(() => FileStreamData);
    			}
    		}
    	}
    	
    	private byte[] _blobData;
    
    	[DataMember]
    	public byte[] BlobData
    	{ 
    		get { return _blobData; }
    		set
    		{
    			if (_blobData != value )
    			{
    				_blobData = value;
    				OnPropertyChanged(() => BlobData);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private System.DateTimeOffset _insertDate;
    
    	[DataMember]
    	public System.DateTimeOffset InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTimeOffset> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTimeOffset> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    
    	
    	//private gcsEntity _gcsEntity;
    
    	//[DataMember]
    	//public virtual gcsEntity gcsEntity
    	//{ 
    	//	get { return _gcsEntity; }
    	//	set
    	//	{
    	//		if (_gcsEntity != value )
    	//		{
    	//			_gcsEntity = value;
    	//			OnPropertyChanged(() => gcsEntity);
    	//		}
    	//	}
    	//}
    }
    
}
