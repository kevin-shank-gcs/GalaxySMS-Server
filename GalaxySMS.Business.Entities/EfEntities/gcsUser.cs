//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Business.Entities
{
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    public partial class gcsUser : EntityBase, IIdentifiableEntity, IEquatable<gcsUser>
    {
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Business.Entities
    {
        public partial class gcsUser
        {
        	public gcsUser()
        	{
        		Initialize();
        	}
        
        	public gcsUser(gcsUser e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		this.gcsUserSettings = new HashSet<gcsUserSetting>();
        		this.gcsUserOldPasswords = new HashSet<gcsUserOldPassword>();
        		this.gcsUserEntities = new HashSet<gcsUserEntity>();
        	}
        
        	public void Initialize(gcsUser e)
        	{
        		Initialize();
        		if( e == null )
        			return;
        		this.UserId = e.UserId;
        		this.LanguageId = e.LanguageId;
        		this.PrimaryEntityId = e.PrimaryEntityId;
        		this.FirstName = e.FirstName;
        		this.LastName = e.LastName;
        		this.UserInitials = e.UserInitials;
        		this.DisplayName = e.DisplayName;
        		this.UserPassword = e.UserPassword;
        		this.LastLoginDate = e.LastLoginDate;
        		this.UserTheme = e.UserTheme;
        		this.IsLockedOut = e.IsLockedOut;
        		this.IsActive = e.IsActive;
        		this.ResetPasswordFlag = e.ResetPasswordFlag;
        		this.LastPasswordResetDate = e.LastPasswordResetDate;
        		this.UserActivationDate = e.UserActivationDate;
        		this.UserExpirationDate = e.UserExpirationDate;
        		this.ImportedFromActiveDirectory = e.ImportedFromActiveDirectory;
        		this.ActiveDirectoryObjectGuid = e.ActiveDirectoryObjectGuid;
        		this.SecurityImage = e.SecurityImage;
        		this.UserImage = e.UserImage;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.Email = e.Email;
        		this.UserName = e.UserName;
        		this.AccessFailedCount = e.AccessFailedCount;
        		this.ConcurrencyStamp = e.ConcurrencyStamp;
        		this.EmailConfirmed = e.EmailConfirmed;
        		this.LockoutEnabled = e.LockoutEnabled;
        		this.LockoutEnd = e.LockoutEnd;
        		this.NormalizedEmail = e.NormalizedEmail;
        		this.NormalizedUserName = e.NormalizedUserName;
        		this.PhoneNumber = e.PhoneNumber;
        		this.PhoneNumberConfirmed = e.PhoneNumberConfirmed;
        		this.SecurityStamp = e.SecurityStamp;
        		this.TwoFactorEnabled = e.TwoFactorEnabled;
        		this.PasswordHash = e.PasswordHash;
        		this.gcsUserSettings = e.gcsUserSettings.ToCollection();
        		this.gcsUserOldPasswords = e.gcsUserOldPasswords.ToCollection();
        		this.gcsUserEntities = e.gcsUserEntities.ToCollection();
        		
        	}
        
        	public gcsUser Clone(gcsUser e)
        	{
        		return new gcsUser(e);
        	}
        
        	public bool Equals(gcsUser other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(gcsUser other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.UserId != this.UserId )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    	public System.Guid UserId { get; set; }
    	public Nullable<System.Guid> LanguageId { get; set; }
    	public System.Guid PrimaryEntityId { get; set; }
    	public string FirstName { get; set; }
    	public string LastName { get; set; }
    	public string UserInitials { get; set; }
    	public string DisplayName { get; set; }
    	public string UserPassword { get; set; }
    	public Nullable<System.DateTimeOffset> LastLoginDate { get; set; }
    	public string UserTheme { get; set; }
    	public bool IsLockedOut { get; set; }
    	public bool IsActive { get; set; }
    	public bool ResetPasswordFlag { get; set; }
    	public Nullable<System.DateTimeOffset> LastPasswordResetDate { get; set; }
    	public Nullable<System.DateTimeOffset> UserActivationDate { get; set; }
    	public Nullable<System.DateTimeOffset> UserExpirationDate { get; set; }
    	public bool ImportedFromActiveDirectory { get; set; }
    	public Nullable<System.Guid> ActiveDirectoryObjectGuid { get; set; }
    	public byte[] SecurityImage { get; set; }
    	public byte[] UserImage { get; set; }
    	public string InsertName { get; set; }
    	public System.DateTimeOffset InsertDate { get; set; }
    	public string UpdateName { get; set; }
    	public Nullable<System.DateTimeOffset> UpdateDate { get; set; }
    	public Nullable<short> ConcurrencyValue { get; set; }
    	public string Email { get; set; }
    	public string UserName { get; set; }
    	public int AccessFailedCount { get; set; }
    	public string ConcurrencyStamp { get; set; }
    	public bool EmailConfirmed { get; set; }
    	public bool LockoutEnabled { get; set; }
    	public Nullable<System.DateTimeOffset> LockoutEnd { get; set; }
    	public string NormalizedEmail { get; set; }
    	public string NormalizedUserName { get; set; }
    	public string PhoneNumber { get; set; }
    	public bool PhoneNumberConfirmed { get; set; }
    	public string SecurityStamp { get; set; }
    	public bool TwoFactorEnabled { get; set; }
    	public string PasswordHash { get; set; }
    
    	public ICollection<gcsUserSetting> gcsUserSettings { get; set; }
    	public ICollection<gcsUserOldPassword> gcsUserOldPasswords { get; set; }
    	public ICollection<gcsUserEntity> gcsUserEntities { get; set; }
    
    }
}
