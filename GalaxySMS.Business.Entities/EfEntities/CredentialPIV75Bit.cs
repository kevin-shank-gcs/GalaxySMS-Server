//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Business.Entities
{
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    public partial class CredentialPIV75Bit : EntityBase, IIdentifiableEntity, IEquatable<CredentialPIV75Bit>, ITableEntityBase, IHasValidData, IAccessControlCredential
    {
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Business.Entities
    {
        public partial class CredentialPIV75Bit
        {
        	public CredentialPIV75Bit()
        	{
        		Initialize();
        	}
        
        	public CredentialPIV75Bit(CredentialPIV75Bit e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        	}
        
        	public void Initialize(CredentialPIV75Bit e)
        	{
        		Initialize();
        		if( e == null )
        			return;
        
        		this.IsDirty = e.IsDirty;
        		this.CredentialUid = e.CredentialUid;
        		this.Agency = e.Agency;
        		this.Site = e.Site;
        		this.Credential = e.Credential;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		
        	}
        
        	public bool IsAnythingDirty
        	{
        		get
        		{
        			//foreach( var o in InterfaceBoardSections)
        			//{
        			//	if (o.IsAnythingDirty == true)
        			//		return true;
        			//}
        			return IsDirty;                
        		}
        	}
        
        	public CredentialPIV75Bit Clone(CredentialPIV75Bit e)
        	{
        		return new CredentialPIV75Bit(e);
        	}
        
        	public bool Equals(CredentialPIV75Bit other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(CredentialPIV75Bit other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.CredentialUid != this.CredentialUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    	public System.Guid CredentialUid { get; set; }
    	public int AgencyCode { get; set; }
    	public int SiteCode { get; set; }
    	public int CredentialCode { get; set; }
    	public string InsertName { get; set; }
    	public System.DateTimeOffset InsertDate { get; set; }
    	public string UpdateName { get; set; }
    	public Nullable<System.DateTimeOffset> UpdateDate { get; set; }
    	public Nullable<short> ConcurrencyValue { get; set; }
    
    	//public Credential Credential1 { get; set; }

        public bool HasValidData
        {
            get
            {
                return AgencyCode + SiteCode + CredentialCode != 0;
            }
        }


        #region Implementation of IAccessControlCredential

        public string CredentialFormatDescription
        {
            get
            {
                return "PIV 75 Bit Wiegand";
            }
            set { }
        }

        public string CredentialValueDescription
        {
            get
            {
                return string.Format("Agency Code:{0}, Site Code:{1}, Credential Code:{2}", AgencyCode, SiteCode, CredentialCode);
            }
            set { }
        }
        public string CardNumber { get; set; }
        public byte[] CardBinaryData { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets the credential parts string. </summary>
        ///
        /// <value> The credential parts string. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public string CredentialPartsString
        {
            get
            {
                return $"{AgencyCode}:{SiteCode}:{CredentialCode}";
            }
            set
            {
                ;
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets the credential format UID and parts string. </summary>
        ///
        /// <value> The credential format UID and parts string. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public string CredentialFormatCodeAndPartsString 
        {
            get
            {
                return $"{GalaxySMS.Common.Enums.CredentialFormatCodes.PIV75Bit}:{CredentialPartsString}";
            }
            set
            {
                ;
            }
        }        
        
        #endregion
    }
}
