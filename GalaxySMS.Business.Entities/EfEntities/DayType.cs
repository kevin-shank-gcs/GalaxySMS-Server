//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using GalaxySMS.Common.Enums;

namespace GalaxySMS.Business.Entities
{
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    public partial class DayType : EntityBase, IIdentifiableEntity, IEquatable<DayType>, IHasEntityMappingList, ITableEntityBase
    {
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Business.Entities
    {
        public partial class DayType
        {
        	public DayType()
        	{
        		Initialize();
        	}
        
        	public DayType(DayType e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		this.DateTypes = new HashSet<DateType>();
        		this.DayTypeTimePeriods = new HashSet<DayTypeTimePeriod>();
        	}
        
        	public void Initialize(DayType e)
        	{
        		Initialize();
        		if( e == null )
        			return;
        		this.DayTypeUid = e.DayTypeUid;
        		this.EntityId = e.EntityId;
        		this.Name = e.Name;
        		this.Notes = e.Notes;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.DateTypes = e.DateTypes.ToCollection();
        		this.DayTypeTimePeriods = e.DayTypeTimePeriods.ToCollection();
        		
        	}
        
        	public DayType Clone(DayType e)
        	{
        		return new DayType(e);
        	}
        
        	public bool Equals(DayType other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(DayType other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.DayTypeUid != this.DayTypeUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    	public System.Guid DayTypeUid { get; set; }
    	public System.Guid EntityId { get; set; }
    	public string Name { get; set; }
    	public string Notes { get; set; }
        public int HighlightColor { get; set; }
        public DayTypeCode DayTypeCode { get; set; }

        public string InsertName { get; set; }
    	public System.DateTimeOffset InsertDate { get; set; }
    	public string UpdateName { get; set; }
    	public Nullable<System.DateTimeOffset> UpdateDate { get; set; }
    	public Nullable<short> ConcurrencyValue { get; set; }
    
    	public ICollection<DateType> DateTypes { get; set; }
    	public gcsEntity gcsEntity { get; set; }
        public ICollection<TimeScheduleDayTypeTimePeriod> DayTypeFifteenMinuteTimePeriods { get; set; }
        //public ICollection<TimeScheduleDayTypeTimePeriod> DayTypeOneMinuteTimePeriods { get; set; }
        public ICollection<Guid> EntityIds { get; set; }
        public ICollection<EntityIdEntityMapPermissionLevel> MappedEntitiesPermissionLevels { get; set; }
        public bool IsFifteenMinuteFormatHolidayType
        {
            get
            {
                switch (DayTypeCode)
                {
                    case DayTypeCode.DayType1:
                    case DayTypeCode.DayType2:
                    case DayTypeCode.DayType3:
                    case DayTypeCode.DayType4:
                    case DayTypeCode.DayType5:
                    case DayTypeCode.DayType6:
                    case DayTypeCode.DayType7:
                    case DayTypeCode.DayType8:
                    case DayTypeCode.DayType9:
                        return true;
                }

                return false;
            }
            set { }
        }

        public bool IsFifteenMinuteFormatStandardDayType
        {
            get
            {
                switch (DayTypeCode)
                {
                    case DayTypeCode.Sunday:
                    case DayTypeCode.Monday:
                    case DayTypeCode.Tuesday:
                    case DayTypeCode.Wednesday:
                    case DayTypeCode.Thursday:
                    case DayTypeCode.Friday:
                    case DayTypeCode.Saturday:
                        return true;
                }

                return false;
            }
            set { }
        }


    }
}
