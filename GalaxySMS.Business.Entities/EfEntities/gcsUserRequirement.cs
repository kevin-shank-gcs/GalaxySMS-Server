//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Business.Entities
{
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    public partial class gcsUserRequirement : EntityBase, IIdentifiableEntity, IEquatable<gcsUserRequirement>
    {
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Business.Entities
    {
        public partial class gcsUserRequirement
        {
        	public gcsUserRequirement()
        	{
        		Initialize();
        	}
        
        	public gcsUserRequirement(gcsUserRequirement e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        	}
        
        	public void Initialize(gcsUserRequirement e)
        	{
        		Initialize();
        		if( e == null )
        			return;
        		this.UserRequirementsId = e.UserRequirementsId;
        		this.EntityId = e.EntityId;
        		this.PasswordCannotContainName = e.PasswordCannotContainName;
        		this.PasswordMinimumLength = e.PasswordMinimumLength;
        		this.PasswordMaximumLength = e.PasswordMaximumLength;
        		this.PasswordMinimumChangeCharacters = e.PasswordMinimumChangeCharacters;
        		this.MinimumPasswordAge = e.MinimumPasswordAge;
        		this.MaximumPasswordAge = e.MaximumPasswordAge;
        		this.MaintainPasswordHistoryCount = e.MaintainPasswordHistoryCount;
        		this.DefaultExpirationDays = e.DefaultExpirationDays;
        		this.LockoutUserIfInactiveForDays = e.LockoutUserIfInactiveForDays;
        		this.AllowPasswordChangeAttempt = e.AllowPasswordChangeAttempt;
        		this.RequireLowerCaseLetterCount = e.RequireLowerCaseLetterCount;
        		this.RequireUpperCaseLetterCount = e.RequireUpperCaseLetterCount;
        		this.RequireNumericDigitCount = e.RequireNumericDigitCount;
        		this.RequireSpecialCharacterCount = e.RequireSpecialCharacterCount;
        		this.UseCustomRegEx = e.UseCustomRegEx;
        		this.PasswordCustomRegEx = e.PasswordCustomRegEx;
        		this.RegularExpressionDescription = e.RegularExpressionDescription;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		
        	}
        
        	public gcsUserRequirement Clone(gcsUserRequirement e)
        	{
        		return new gcsUserRequirement(e);
        	}
        
        	public bool Equals(gcsUserRequirement other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(gcsUserRequirement other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.UserRequirementsId != this.UserRequirementsId )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    	public System.Guid UserRequirementsId { get; set; }
    	public System.Guid EntityId { get; set; }
    	public bool PasswordCannotContainName { get; set; }
    	public short PasswordMinimumLength { get; set; }
    	public short PasswordMaximumLength { get; set; }
    	public short PasswordMinimumChangeCharacters { get; set; }
    	public short MinimumPasswordAge { get; set; }
    	public short MaximumPasswordAge { get; set; }
    	public short MaintainPasswordHistoryCount { get; set; }
    	public short DefaultExpirationDays { get; set; }
    	public short LockoutUserIfInactiveForDays { get; set; }
    	public bool AllowPasswordChangeAttempt { get; set; }
    	public short RequireLowerCaseLetterCount { get; set; }
    	public short RequireUpperCaseLetterCount { get; set; }
    	public short RequireNumericDigitCount { get; set; }
    	public short RequireSpecialCharacterCount { get; set; }
    	public bool UseCustomRegEx { get; set; }
    	public string PasswordCustomRegEx { get; set; }
    	public string RegularExpressionDescription { get; set; }
    	public string InsertName { get; set; }
    	public System.DateTimeOffset InsertDate { get; set; }
    	public string UpdateName { get; set; }
    	public Nullable<System.DateTimeOffset> UpdateDate { get; set; }
    	public Nullable<short> ConcurrencyValue { get; set; }
    
    }
}
