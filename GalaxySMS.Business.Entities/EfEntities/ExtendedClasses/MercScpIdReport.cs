//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Business.Entities
{
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    public partial class MercScpIdReport : EntityBase, IIdentifiableEntity, IEquatable<MercScpIdReport>, ITableEntityBase
    {
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using GCS.Core.Common.Contracts;
	using GCS.Core.Common.Core;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Business.Entities
    {
        public partial class MercScpIdReport
        {
        	public MercScpIdReport()
        	{
        		Initialize();
        	}
        
        	public MercScpIdReport(MercScpIdReport e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        	}
        
        	public void Initialize(MercScpIdReport e)
        	{
        		Initialize();
        		if( e == null )
        			return;
        
        		this.IsDirty = e.IsDirty;
        		this.MercScpIdReportUid = e.MercScpIdReportUid;
        		this.MacAddress = e.MacAddress;
        		this.DriverSpcId = e.DriverSpcId;
        		this.ScpId = e.ScpId;
        		this.SerialNumber = e.SerialNumber;
        		this.DeviceId = e.DeviceId;
        		this.DeviceVersion = e.DeviceVersion;
        		this.SoftwareRevisionMajor = e.SoftwareRevisionMajor;
        		this.SoftwareRevisionMinor = e.SoftwareRevisionMinor;
        		this.CumulativeBuildCount = e.CumulativeBuildCount;
        		this.NeedsConfiguration = e.NeedsConfiguration;
        		this.TlsStatus = e.TlsStatus;
        		this.OemCode = e.OemCode;
        		this.CurrentOperatingMode = e.CurrentOperatingMode;
        		this.Input1State = e.Input1State;
        		this.Input2State = e.Input2State;
        		this.Input3State = e.Input3State;
        		this.BioDb1Active = e.BioDb1Active;
        		this.BioDb1Max = e.BioDb1Max;
        		this.BioDb2Active = e.BioDb2Active;
        		this.BioDb2Max = e.BioDb2Max;
        		this.AssetDbActive = e.AssetDbActive;
        		this.AssetDbMax = e.AssetDbMax;
        		this.FirmwareAdvisory = e.FirmwareAdvisory;
        		this.DipSwitchCurrent = e.DipSwitchCurrent;
        		this.DipSwitchPowerUp = e.DipSwitchPowerUp;
        		this.DbActiveRecords = e.DbActiveRecords;
        		this.DbMaxSize = e.DbMaxSize;
        		this.CurrentClock = e.CurrentClock;
        		this.RamFree = e.RamFree;
        		this.RamSize = e.RamSize;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		
        	}
        
        	public bool IsAnythingDirty
        	{
        		get
        		{
        			//foreach( var o in InterfaceBoardSections)
        			//{
        			//	if (o.IsAnythingDirty == true)
        			//		return true;
        			//}
        			return IsDirty;                
        		}
        	}
        
        	public MercScpIdReport Clone(MercScpIdReport e)
        	{
        		return new MercScpIdReport(e);
        	}
        
        	public bool Equals(MercScpIdReport other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(MercScpIdReport other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.MercScpIdReportUid != this.MercScpIdReportUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    	public System.Guid MercScpIdReportUid { get; set; }
    	public string MacAddress { get; set; }
    	public int DriverSpcId { get; set; }
    	public int ScpId { get; set; }
    	public string SerialNumber { get; set; }
    	public string DeviceId { get; set; }
    	public string DeviceVersion { get; set; }
    	public int SoftwareRevisionMajor { get; set; }
    	public int SoftwareRevisionMinor { get; set; }
    	public int CumulativeBuildCount { get; set; }
    	public bool NeedsConfiguration { get; set; }
    	public string TlsStatus { get; set; }
    	public int OemCode { get; set; }
    	public short CurrentOperatingMode { get; set; }
    	public short Input1State { get; set; }
    	public short Input2State { get; set; }
    	public short Input3State { get; set; }
    	public int BioDb1Active { get; set; }
    	public int BioDb1Max { get; set; }
    	public int BioDb2Active { get; set; }
    	public int BioDb2Max { get; set; }
    	public int AssetDbActive { get; set; }
    	public int AssetDbMax { get; set; }
    	public string FirmwareAdvisory { get; set; }
    	public short DipSwitchCurrent { get; set; }
    	public short DipSwitchPowerUp { get; set; }
    	public int DbActiveRecords { get; set; }
    	public int DbMaxSize { get; set; }
    	public long CurrentClock { get; set; }
    	public int RamFree { get; set; }
    	public int RamSize { get; set; }
    	public string InsertName { get; set; }
    	public System.DateTimeOffset InsertDate { get; set; }
    	public string UpdateName { get; set; }
    	public Nullable<System.DateTimeOffset> UpdateDate { get; set; }
    	public Nullable<short> ConcurrencyValue { get; set; }
    
    }
}
