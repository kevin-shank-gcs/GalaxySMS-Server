////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	Interfaces\ICredentialFormatDataField.cs
//
// summary:	Declares the ICredentialFormatDataField interface
////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using GCS.Core.Common.Contracts;

namespace GalaxySMS.Common.Interfaces
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for credential format data field. </summary>
    ///
    /// <remarks>   Kevin, 1/3/2019. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface ICredentialFormatDataField : ITableEntityBase
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the credential format data field UID. </summary>
        ///
        /// <value> The credential format data field UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid CredentialFormatDataFieldUid {get;set;}

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the credential format UID. </summary>
        ///
        /// <value> The credential format UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid CredentialFormatUid {get;set;}

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the name of the field. </summary>
        ///
        /// <value> The name of the field. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        string FieldName { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the display. </summary>
        ///
        /// <value> The display. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        string Display { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the description. </summary>
        ///
        /// <value> The description. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        string Description { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the starts at. </summary>
        ///
        /// <value> The starts at. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        short StartsAt { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the length of the bit. </summary>
        ///
        /// <value> The length of the bit. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        short BitLength { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the minimum value. </summary>
        ///
        /// <value> The minimum value. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        uint MinimumValue { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the maximum value. </summary>
        ///
        /// <value> The maximum value. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        uint MaximumValue { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the field number. </summary>
        ///
        /// <value> The field number. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        short FieldNumber { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether this ICredentialFormatDataField is read only.
        /// </summary>
        ///
        /// <value> True if this ICredentialFormatDataField is read only, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IsReadOnly { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether this ICredentialFormatDataField is visible.
        /// </summary>
        ///
        /// <value> True if this ICredentialFormatDataField is visible, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IsVisible { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the default value. </summary>
        ///
        /// <value> The default value. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        uint DefaultValue { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether this ICredentialFormatDataField is dirty.
        /// </summary>
        ///
        /// <value> True if this ICredentialFormatDataField is dirty, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IsDirty {get;set;}
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for credential format data field instance. </summary>
    ///
    /// <remarks>   Kevin, 1/3/2019. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface ICredentialFormatDataFieldInstance:ICredentialFormatDataField
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Initializes this ICredentialFormatDataFieldInstance. </summary>
        ///
        /// <param name="field">    The field. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void Initialize(ICredentialFormatDataField field);
        /// <summary>   Initializes the value. </summary>
        void InitializeValue();

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets the maximum digits. </summary>
        ///
        /// <value> The maximum digits. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        int MaxDigits {get;}

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the value. </summary>
        ///
        /// <value> The value. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        uint Value {get;set;}

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets adjusted value 32. </summary>
        ///
        /// <param name="finalLength">  Length of the final. </param>
        ///
        /// <returns>   The adjusted value 32. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        uint GetAdjustedValue32(uint finalLength);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets adjusted value 64. </summary>
        ///
        /// <param name="finalLength">  Length of the final. </param>
        ///
        /// <returns>   The adjusted value 64. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        ulong GetAdjustedValue64(uint finalLength);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets a value indicating whether the value valid. </summary>
        ///
        /// <value> True if value valid, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool ValueValid {get;}

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Query if 'value' is value valid. </summary>
        ///
        /// <param name="value">    The value. </param>
        ///
        /// <returns>   True if value valid, false if not. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IsValueValid(uint value);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Extracts the value from data. </summary>
        ///
        /// <param name="data">         The data. </param>
        /// <param name="finalLength">  Length of the final. </param>
        ///
        /// <returns>   The extracted value from data. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        uint ExtractValueFromData(ulong data, uint finalLength);
    }

}