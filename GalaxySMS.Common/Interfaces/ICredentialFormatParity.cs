////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	Interfaces\ICredentialFormatParity.cs
//
// summary:	Declares the ICredentialFormatParity interface
////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using GalaxySMS.Common.Enums;
using GCS.Core.Common.Contracts;

namespace GalaxySMS.Common.Interfaces
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for credential format parity. </summary>
    ///
    /// <remarks>   Kevin, 1/3/2019. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface ICredentialFormatParity : ITableEntityBase
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the credential format parity UID. </summary>
        ///
        /// <value> The credential format parity UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid CredentialFormatParityUid {get;set;}

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the credential format UID. </summary>
        ///
        /// <value> The credential format UID. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Guid CredentialFormatUid {get;set;}

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the type of the parity. </summary>
        ///
        /// <value> The type of the parity. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        CredentialParityTypes ParityType { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the hexadecimal mask. </summary>
        ///
        /// <value> The hexadecimal mask. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        byte[] HexMask { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the hexadecimal mask ulong. </summary>
        ///
        /// <value> The hexadecimal mask ulong. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        UInt64 HexMaskUlong {get;set;}

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the bit position. </summary>
        ///
        /// <value> The bit position. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        short BitPosition { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the compute sequence. </summary>
        ///
        /// <value> The compute sequence. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        short ComputeSequence { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets or sets a value indicating whether this ICredentialFormatParity is dirty.
        /// </summary>
        ///
        /// <value> True if this ICredentialFormatParity is dirty, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IsDirty { get; set; }

    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for credential format parity instance. </summary>
    ///
    /// <remarks>   Kevin, 1/3/2019. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface ICredentialFormatParityInstance:ICredentialFormatParity
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets parity value. </summary>
        ///
        /// <param name="data">         The data. </param>
        /// <param name="finalLength">  Length of the final. </param>
        ///
        /// <returns>   The parity value. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        UInt64 GetParityValue(UInt64 data, short finalLength);
    }
}