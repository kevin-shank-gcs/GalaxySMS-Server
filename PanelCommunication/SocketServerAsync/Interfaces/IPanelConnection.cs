////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	Interfaces\IPanelConnection.cs
//
// summary:	Declares the IPanelConnection interface
////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Net.Sockets;
using GCS.PanelCommunication.PanelCommunicationServerAsync;
using GCS.PanelProtocols.Series6xx;
using GalaxySMS.Business.Entities;
using GCS.Framework.Flash;
using System.Threading.Tasks;
using GCS.PanelCommunicationServerAsync.Entities;
using System.Security.Cryptography;
using System.Linq;

namespace GCS.PanelCommunicationServerAsync.Interfaces
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Delegate for handling DataReceived events. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ///
    /// <param name="sender">   Source of the event. </param>
    /// <param name="e">        Data received event information. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public delegate void DataReceivedEventHandler(object sender, DataReceivedEventArgs e);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Delegate for handling DebugPacket events. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ///
    /// <param name="sender">   Source of the event. </param>
    /// <param name="e">        Connection debug packet event information. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public delegate void DebugPacketEventHandler(object sender, ConnectionDebugPacketEventArgs e);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Delegate for handling ConnectionStateChanged events. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ///
    /// <param name="sender">   Source of the event. </param>
    /// <param name="e">        Connection state change event information. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public delegate void ConnectionStateChangedEventHandler(object sender, ConnectionStateChangeEventArgs e);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Delegate for handling ConnectionClosed events. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ///
    /// <param name="sender">   Source of the event. </param>
    /// <param name="e">        Socket asynchronous event information. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public delegate void ConnectionClosedEventHandler(object sender, System.Net.Sockets.SocketAsyncEventArgs e);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Delegate for handling PanelInformation events. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ///
    /// <param name="sender">   Source of the event. </param>
    /// <param name="e">        Panel information event information. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public delegate void PanelInformationEventHandler(object sender, PanelInformationEventArgs e);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for panel connection. </summary>
    ///
    /// <remarks>   Kevin, 12/26/2018. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    interface IPanelConnection : IDisposable
    {
        #region Properties

        Guid? ClusterUid { get; }
        Guid? GalaxyPanelUid { get; }
        Guid? CpuUid { get; }
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets the identifier of the cluster. </summary>
        ///
        /// <value> The identifier of the cluster. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        int ClusterId { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets the identifier of the CPU. </summary>
        ///
        /// <value> The identifier of the CPU. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        short CpuId { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets the identifier of the panel. </summary>
        ///
        /// <value> The identifier of the panel. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        int PanelId { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets the account code. </summary>
        ///
        /// <value> The account code. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        int ClusterGroupId { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets information describing the connection. </summary>
        ///
        /// <value> Information describing the connection. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        string ConnectionDescription { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets information describing the CPU connection. </summary>
        ///
        /// <value> Information describing the CPU connection. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        CpuConnectionInfo CpuConnectionInfo { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets the Date/Time of the date time created. </summary>
        ///
        /// <value> The date time created. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        DateTimeOffset DateTimeCreated { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets the Date/Time of the date time last receive. </summary>
        ///
        /// <value> The date time last receive. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        DateTimeOffset DateTimeLastReceive { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets the Date/Time of the date time last send. </summary>
        ///
        /// <value> The date time last send. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        DateTimeOffset DateTimeLastSend { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the debugging mode. </summary>
        ///
        /// <value> True if debugging mode, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool DebuggingMode { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets a unique identifier of the instance. </summary>
        ///
        /// <value> Unique identifier of the instance. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        string InstanceGuid { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Gets a value indicating whether this IPanelConnection is authenticated.
        /// </summary>
        ///
        /// <value> True if this IPanelConnection is authenticated, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IsAuthenticated { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets the serial number. </summary>
        ///
        /// <value> The serial number. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        string SerialNumber { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets the socket event arguments. </summary>
        ///
        /// <value> The socket event arguments. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        System.Net.Sockets.SocketAsyncEventArgs SocketEventArgs { get; }

        #endregion

        #region Methods

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Handles the receive data described by e. </summary>
        ///
        /// <param name="e">    [in,out] Reference socket asynchronous event information. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void HandleReceiveData(ref SocketAsyncEventArgs e);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Initializes the board section. </summary>
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void InitializeBoardSection(SendDataParameters<InitializeBoardSectionSettings> data);
        //   /// <summary>   Kill timer. </summary>
        //void KillTimer();
        /// <summary>   Prepare to close. </summary>
        void PrepareToClose(bool panelDeleted);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a get card count. </summary>
        /// <param name="parameters"></param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendGetCardCount(SendDataParameters<GalaxyCpuCommandAction> parameters);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a get controller information. </summary>
        ///
        /// <param name="parameters">    The parameter. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendGetControllerInfo(SendDataParameters<GalaxyCpuCommandAction> parameters);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a get logging information. </summary>
        /// <param name="panelNumber"></param>
        /// <param name="parameters"></param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendGetLoggingInfo( SendDataParameters<GalaxyCpuCommandAction> parameters);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a ping. </summary>
        /// <param name="parameters"></param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendPing(SendDataParameters<GalaxyCpuCommandAction> parameters);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a raw data. </summary>
        ///
        /// <param name="data">     The data. </param>
        /// <param name="param">    The parameter. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendRawData(RawDataToSend data, object param = null);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a packet. </summary>
        ///
        /// <param name="param">    The parameter. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendPacket(object param);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a reset command. </summary>
        ///
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendResetCommand(SendDataParameters<GalaxyPanelResetCommand> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends an aba settings. </summary>
        ///
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendAbaSettings(SendDataParameters<AbaSettings> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a wiegand settings. </summary>
        ///
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendWiegandSettings(SendDataParameters<WiegandSettings> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a cardax settings. </summary>
        ///
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendCardaxSettings(SendDataParameters<CardaxSettings> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a reader lockout settings. </summary>
        ///
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendReaderLockoutSettings(SendDataParameters<ReaderLockoutSettings> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a loop transmit delay settings. </summary>
        ///
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendLoopTransmitDelaySettings(SendDataParameters<LoopTransmitDelaySettings> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a time adjustment settings. </summary>
        ///
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendTimeAdjustmentSettings(SendDataParameters<DaylightSavingsTimeAdjustmentSettings> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a LED behavior settings. </summary>
        ///
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendLedBehaviorSettings(SendDataParameters<LedBehaviorSettings> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends the crisis mode settings. </summary>
        ///
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendCrisisModeSettings(SendDataParameters<CrisisModeSettings> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a server consultation settings. </summary>
        ///
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendServerConsultationSettings(SendDataParameters<ServerConsultationSettings> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a day type data. </summary>
        /// <param name="data">             The data. </param>
        /// <param name="forMonth">         for month. </param>
        /// <param name="defaultBehavior">  The default behavior. </param>
        /// <param name="parameters"></param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendDayTypeData(IEnumerable<DateType_PanelLoadData> data, int forMonth, DateTypeDefaultBehavior_PanelLoadData defaultBehavior, SendDataParameters parameters);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a time schedule fifteen minute format data. </summary>
        /// <param name="data"> The data. </param>
        /// <param name="parameters"></param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendTimeScheduleFifteenMinuteFormatData(IEnumerable<TimeSchedule15MinuteFormat_GetPanelLoadData> data, SendDataParameters parameters);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends an one minute time period data. </summary>
        ///
        /// <param name="gtps"> The gtps. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendOneMinuteTimePeriodData(List<GalaxyTimePeriod_GetPanelLoadData> gtps, SendDataParameters parameters);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a time schedule one minute format data. </summary>
        ///
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendTimeScheduleOneMinuteFormatData(IEnumerable<TimeScheduleOneMinuteFormat_GetPanelLoadData> data, SendDataParameters parameters);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends an interface board section data. </summary>
        ///
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendInterfaceBoardSectionData(SendDataParameters<GalaxyInterfaceBoardSection_PanelLoadData> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a panel alarm settings. </summary>
        ///
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendPanelAlarmSettings(SendDataParameters<GalaxyPanelAlarmSettings_PanelLoadData> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a load data finished. </summary>
        /// <param name="data"> The data. </param>
        /// <param name="hint"></param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendLoadDataFinished(SendDataParameters data, string hint);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends an input output group data. </summary>
        ///
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendInputOutputGroupData(SendDataParameters<InputOutputGroup_PanelLoadData> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sets input output group data for loading. </summary>
        ///
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SetInputOutputGroupDataForLoading(SendDataParameters<InputOutputGroup_PanelLoadData> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends the access portal data. </summary>
        ///
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendAccessPortalData(SendDataParameters<AccessPortal_PanelLoadData> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends an input device data. </summary>
        ///
        /// <param name="data"> The data. </param>
        ///=================================================================================================

        void SendInputDeviceData(SendDataParameters<InputDevice_PanelLoadData> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends an output device data. </summary>
        ///
        /// <param name="data"> The data. </param>
        ///=================================================================================================

        void SendOutputDeviceData(SendDataParameters<OutputDevice_PanelLoadData> data);
        
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends the access group data. </summary>
        ///
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendAccessGroupData(SendDataParameters<AccessGroup_PanelLoadData> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a credential data. </summary>
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        //void SendCredentialData(List<Credential_PanelLoadData> data);
        
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a credential data. </summary>
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendCredentialData(SendDataParameters<List<Credential_PanelLoadData>> data);

        //////////////////////////////////////////////////////////////////////////////////////////////////////
        ///// <summary>   Sends a personal access group data. </summary>
        ///// <param name="personalAccessGroupData">  Information describing the personal access group. </param>
        //////////////////////////////////////////////////////////////////////////////////////////////////////

        //void SendPersonalAccessGroupData(IEnumerable<PersonalAccessGroup_PanelLoadData> personalAccessGroupData);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a personal access group data. </summary>
        /// <param name="personalAccessGroupData">  Information describing the personal access group. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendPersonalAccessGroupData(SendDataParameters<List<IGrouping<Guid, PersonalAccessGroup_PanelLoadData>>> personalAccessGroupData);


        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a clear automatic update flash timer. </summary>
        /// <param name="parameters"></param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendClearAutoUpdateFlashTimer(SendDataParameters<GalaxyCpuCommandAction> parameters);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a clear all credentials. </summary>
        /// <param name="parameters"></param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendClearAllCredentials(SendDataParameters<GalaxyCpuCommandAction> parameters);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a forgive passback for credential. </summary>
        /// <param name="data"> The data. </param>
        /// <param name="parameters"></param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendForgivePassbackForCredential(byte[] data, SendDataParameters<GalaxyCpuCommandAction> parameters);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a forgive passback for all credentials. </summary>
        /// <param name="parameters"></param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendForgivePassbackForAllCredentials(SendDataParameters<GalaxyCpuCommandAction> parameters);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a recalibrate inputs and outputs. </summary>
        /// <param name="parameters"></param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendRecalibrateInputsAndOutputs(SendDataParameters<GalaxyCpuCommandAction> parameters);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends an activate crisis mode. </summary>
        /// <param name="data"></param>
        /// <param name="param">    The parameter. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendActivateCrisisMode(SendDataParameters<GalaxyCpuCommandAction> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a reset crisis mode. </summary>
        /// <param name="data"></param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendResetCrisisMode(SendDataParameters<GalaxyCpuCommandAction> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sets logging state. </summary>
        ///
        /// <param name="state">    The state. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        void SetLoggingState(ActivityLoggingState state, SendDataParameters<GalaxyCpuCommandAction> data);

        //////////////////////////////////////////////////////////////////////////////////////////////////////
        ///// <summary>   Sets CPU database information. </summary>
        /////
        ///// <param name="data"> The data. </param>
        /////=================================================================================================

        //Task SetCpuDatabaseInformation(GalaxyCpuDatabaseInformation data);
         
        
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a retransmit logging buffer. </summary>
        /// <param name="parameters"></param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendRetransmitLoggingBuffer(SendDataParameters<GalaxyCpuCommandAction> parameters);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Clears the logging buffer described by param. </summary>
        /// <param name="parameters"></param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendClearLoggingBuffer(SendDataParameters<GalaxyCpuCommandAction> parameters);
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a flash command. </summary>
        ///
        /// <param name="param">            The parameter. </param>
        /// <param name="flashImageHelper"> The flash image helper. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendFlashCommand(GalaxyLoadFlashCommandAction param, GalaxyFlashImageHelper flashImageHelper);
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends an enable credential. </summary>
        /// 
        /// <param name="data"> The data. </param>
        /// <param name="parameters"></param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendEnableCredential(byte[] data, SendDataParameters<GalaxyCpuCommandAction> parameters);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a disable credential. </summary>
        /// 
        /// <param name="data"> The data. </param>
        /// <param name="parameters"></param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendDisableCredential(byte[] data, SendDataParameters<GalaxyCpuCommandAction> parameters);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a delete credential. </summary>
        ///
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendDeleteCredential(byte[] data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a delete credentials. </summary>
        ///
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendDeleteCredentials(IEnumerable<CredentialToDeleteFromCpu> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a request input output group counters. </summary>
        /// <param name="ioGroupNumber">    The i/o group number. </param>
        /// <param name="parameters"></param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendRequestInputOutputGroupCounters(ushort ioGroupNumber, SendDataParameters<GalaxyCpuCommandAction> parameters);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends a request board information. </summary>
        /// <param name="parameters"></param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendRequestBoardInformation(SendDataParameters<GalaxyCpuCommandAction> parameters);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends the access portal command. </summary>
        ///
        /// <param name="data"> The data. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        void SendAccessPortalCommand(SendDataParameters<AccessPortalCommandAction> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends an input device command. </summary>
        ///
        /// <param name="data"> The data. </param>
        ///=================================================================================================

        void SendInputDeviceCommand(SendDataParameters<InputDeviceCommandAction> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends an output device command. </summary>
        ///
        /// <param name="data"> The data. </param>
        ///=================================================================================================

        void SendOutputDeviceCommand(SendDataParameters<OutputDeviceCommandAction> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Sends an interface board section command. </summary>
        ///
        /// <param name="data"> The data. </param>
        ///=================================================================================================

        void SendInterfaceBoardSectionCommand(SendDataParameters<GalaxyInterfaceBoardSectionCommandAction> data);


        void SendInputOutputGroupCommand(SendDataParameters<InputOutputGroupCommandAction> data);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Take action. </summary>
        ///
        /// <param name="actionCode">   The action code. </param>
        /// <param name="delayMs">      The delay in milliseconds. </param>
        ///=================================================================================================

        void TakeAction(ActionCode actionCode, int delayMs);

        void ChangeTimeZone(string timeZoneId);
        #endregion


        #region Events

        /// <summary>   Event queue for all listeners interested in connectionStateChanged events. </summary>
        event ConnectionStateChangedEventHandler ConnectionStateChangedEvent;
        /// <summary>   Event queue for all listeners interested in dataReceived events. </summary>
	    event DataReceivedEventHandler DataReceivedEvent;
        /// <summary>   Event queue for all listeners interested in debugPacket events. </summary>
	    event DebugPacketEventHandler DebugPacketEvent;
        /// <summary>   Event queue for all listeners interested in connectionClosed events. </summary>
	    event ConnectionClosedEventHandler ConnectionClosedEvent;
        /// <summary>   Event queue for all listeners interested in panelInformation events. </summary>
	    event PanelInformationEventHandler PanelInformationEvent;


        #endregion

    }
}
