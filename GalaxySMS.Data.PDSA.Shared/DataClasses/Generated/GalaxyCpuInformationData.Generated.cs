using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Select data from the GalaxyCpuInformationPDSA view.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class GalaxyCpuInformationPDSAData : PDSADataClassReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the GalaxyCpuInformationPDSAData class
    /// </summary>
    public GalaxyCpuInformationPDSAData() : base()
    {
      Entity = new GalaxyCpuInformationPDSA();
      ValidatorObject = new GalaxyCpuInformationPDSAValidator(Entity);

      Init();
    }
    
    /// <summary>
    /// Constructor for the GalaxyCpuInformationPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a GalaxyCpuInformationPDSA</param>
    public GalaxyCpuInformationPDSAData(PDSADataProvider dataProvider,
      GalaxyCpuInformationPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new GalaxyCpuInformationPDSAValidator(Entity);

      Init();
    }
     
    /// <summary>
    /// Constructor for the GalaxyCpuInformationPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a GalaxyCpuInformationPDSA</param>
    /// <param name="validator">An instance of a GalaxyCpuInformationPDSAValidator</param>
    public GalaxyCpuInformationPDSAData(PDSADataProvider dataProvider,
      GalaxyCpuInformationPDSA entity, GalaxyCpuInformationPDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// A Custom SelectFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a WHERE statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum WhereFilters
    {
      /// <summary>
      /// No WhereFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom WhereFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'ClusterGroupId' WhereFilter
      /// </summary>
      ClusterGroupId
      ,
      /// <summary>
      /// 'AccountCodeClusterPanelCpuNumbers' WhereFilter
      /// </summary>
      AccountCodeClusterPanelCpuNumbers
      ,
      /// <summary>
      /// 'LikeAccountCode' WhereFilter
      /// </summary>
      LikeAccountCode
    }

    /// <summary>
    /// Enumeration for selecting an ORDER BY statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum OrderByFilters
    {
      /// <summary>
      /// No OrderByFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'ClusterGroupId' OrderByFilter
      /// </summary>
      ClusterGroupId
    }
    
    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }
    /// <summary>
    /// Get/Set a WHERE clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public WhereFilters WhereFilter { get; set; }
    /// <summary>
    /// Get/Set a ORDER BY clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public OrderByFilters OrderByFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Public Property Entity Class
        private GalaxyCpuInformationPDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public GalaxyCpuInformationPDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "GalaxyCpuInformationPDSAData";
      DBObjectName = "GCS.GalaxyCpuInformation";
      SchemaName = "GCS";
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;
      
      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes all of the Data Columns with valid data for each field in the table.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.GalaxyPanelUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CpuUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterGroupId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CpuNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.SerialNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.IpAddress);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.DefaultEventLoggingOn);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PreventDataLoading);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PreventFlashLoading);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.LastLogIndex);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterTypeIsActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CredentialDataLength);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelLocation);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelModelTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelModelIsActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CpuIsActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.SiteUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.SiteName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.EntityId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.EntityName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.TimeZoneId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterUid).Value = Entity.ClusterUid;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterUid).SetAsNull == true)
        Entity.ClusterUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.GalaxyPanelUid).Value = Entity.GalaxyPanelUid;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.GalaxyPanelUid).SetAsNull == true)
        Entity.GalaxyPanelUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CpuUid).Value = Entity.CpuUid;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CpuUid).SetAsNull == true)
        Entity.CpuUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterGroupId).Value = Entity.ClusterGroupId;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterGroupId).SetAsNull == true)
        Entity.ClusterGroupId = 0;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterNumber).Value = Entity.ClusterNumber;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterNumber).SetAsNull == true)
        Entity.ClusterNumber = 0;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelNumber).Value = Entity.PanelNumber;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelNumber).SetAsNull == true)
        Entity.PanelNumber = 0;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CpuNumber).Value = Entity.CpuNumber;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CpuNumber).SetAsNull == true)
        Entity.CpuNumber = 0;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.SerialNumber).Value = Entity.SerialNumber;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.SerialNumber).SetAsNull == true)
        Entity.SerialNumber = string.Empty;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.IpAddress).Value = Entity.IpAddress;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.IpAddress).SetAsNull == true)
        Entity.IpAddress = string.Empty;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.DefaultEventLoggingOn).Value = Entity.DefaultEventLoggingOn;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.DefaultEventLoggingOn).SetAsNull == true)
        Entity.DefaultEventLoggingOn = false;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PreventDataLoading).Value = Entity.PreventDataLoading;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PreventDataLoading).SetAsNull == true)
        Entity.PreventDataLoading = false;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PreventFlashLoading).Value = Entity.PreventFlashLoading;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PreventFlashLoading).SetAsNull == true)
        Entity.PreventFlashLoading = false;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.LastLogIndex).Value = Entity.LastLogIndex;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.LastLogIndex).SetAsNull == true)
        Entity.LastLogIndex = 0;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterName).Value = Entity.ClusterName;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterName).SetAsNull == true)
        Entity.ClusterName = string.Empty;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelName).Value = Entity.PanelName;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelName).SetAsNull == true)
        Entity.PanelName = string.Empty;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterTypeCode).Value = Entity.ClusterTypeCode;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterTypeCode).SetAsNull == true)
        Entity.ClusterTypeCode = string.Empty;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterTypeIsActive).Value = Entity.ClusterTypeIsActive;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterTypeIsActive).SetAsNull == true)
        Entity.ClusterTypeIsActive = false;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CredentialDataLength).Value = Entity.CredentialDataLength;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CredentialDataLength).SetAsNull == true)
        Entity.CredentialDataLength = 0;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelLocation).Value = Entity.PanelLocation;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelLocation).SetAsNull == true)
        Entity.PanelLocation = string.Empty;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelModelTypeCode).Value = Entity.PanelModelTypeCode;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelModelTypeCode).SetAsNull == true)
        Entity.PanelModelTypeCode = string.Empty;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelModelIsActive).Value = Entity.PanelModelIsActive;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelModelIsActive).SetAsNull == true)
        Entity.PanelModelIsActive = false;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CpuIsActive).Value = Entity.CpuIsActive;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CpuIsActive).SetAsNull == true)
        Entity.CpuIsActive = false;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.SiteUid).Value = Entity.SiteUid;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.SiteUid).SetAsNull == true)
        Entity.SiteUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.SiteName).Value = Entity.SiteName;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.SiteName).SetAsNull == true)
        Entity.SiteName = string.Empty;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.EntityId).Value = Entity.EntityId;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.EntityId).SetAsNull == true)
        Entity.EntityId = Guid.Empty;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.EntityName).Value = Entity.EntityName;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.EntityName).SetAsNull == true)
        Entity.EntityName = string.Empty;
      ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.TimeZoneId).Value = Entity.TimeZoneId;
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.TimeZoneId).SetAsNull == true)
        Entity.TimeZoneId = string.Empty;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterUid).IsNull == false)
        Entity.ClusterUid = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterUid).GetAsGuid();
      else
        Entity.ClusterUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterUid, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterUid).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.GalaxyPanelUid).IsNull == false)
        Entity.GalaxyPanelUid = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.GalaxyPanelUid).GetAsGuid();
      else
        Entity.GalaxyPanelUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.GalaxyPanelUid, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.GalaxyPanelUid).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CpuUid).IsNull == false)
        Entity.CpuUid = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CpuUid).GetAsGuid();
      else
        Entity.CpuUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.CpuUid, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CpuUid).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterGroupId).IsNull == false)
        Entity.ClusterGroupId = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterGroupId).GetAsInteger();
      else
        Entity.ClusterGroupId = 0;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterGroupId, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterGroupId).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterNumber).IsNull == false)
        Entity.ClusterNumber = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterNumber).GetAsShort();
      else
        Entity.ClusterNumber = 0;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterNumber, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterNumber).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelNumber).IsNull == false)
        Entity.PanelNumber = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelNumber).GetAsShort();
      else
        Entity.PanelNumber = 0;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelNumber, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelNumber).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CpuNumber).IsNull == false)
        Entity.CpuNumber = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CpuNumber).GetAsShort();
      else
        Entity.CpuNumber = 0;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.CpuNumber, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CpuNumber).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.SerialNumber).IsNull == false)
        Entity.SerialNumber = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.SerialNumber).GetAsString();
      else
        Entity.SerialNumber = string.Empty;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.SerialNumber, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.SerialNumber).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.IpAddress).IsNull == false)
        Entity.IpAddress = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.IpAddress).GetAsString();
      else
        Entity.IpAddress = string.Empty;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.IpAddress, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.IpAddress).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.DefaultEventLoggingOn).IsNull == false)
        Entity.DefaultEventLoggingOn = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.DefaultEventLoggingOn).GetAsBool();
      else
        Entity.DefaultEventLoggingOn = false;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.DefaultEventLoggingOn, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.DefaultEventLoggingOn).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PreventDataLoading).IsNull == false)
        Entity.PreventDataLoading = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PreventDataLoading).GetAsBool();
      else
        Entity.PreventDataLoading = false;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.PreventDataLoading, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PreventDataLoading).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PreventFlashLoading).IsNull == false)
        Entity.PreventFlashLoading = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PreventFlashLoading).GetAsBool();
      else
        Entity.PreventFlashLoading = false;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.PreventFlashLoading, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PreventFlashLoading).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.LastLogIndex).IsNull == false)
        Entity.LastLogIndex = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.LastLogIndex).GetAsInteger();
      else
        Entity.LastLogIndex = 0;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.LastLogIndex, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.LastLogIndex).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterName).IsNull == false)
        Entity.ClusterName = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterName).GetAsString();
      else
        Entity.ClusterName = string.Empty;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterName, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterName).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelName).IsNull == false)
        Entity.PanelName = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelName).GetAsString();
      else
        Entity.PanelName = string.Empty;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelName, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelName).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterTypeCode).IsNull == false)
        Entity.ClusterTypeCode = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterTypeCode).GetAsString();
      else
        Entity.ClusterTypeCode = string.Empty;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterTypeCode, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterTypeIsActive).IsNull == false)
        Entity.ClusterTypeIsActive = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterTypeIsActive).GetAsBool();
      else
        Entity.ClusterTypeIsActive = false;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterTypeIsActive, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.ClusterTypeIsActive).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CredentialDataLength).IsNull == false)
        Entity.CredentialDataLength = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CredentialDataLength).GetAsShort();
      else
        Entity.CredentialDataLength = 0;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.CredentialDataLength, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CredentialDataLength).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelLocation).IsNull == false)
        Entity.PanelLocation = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelLocation).GetAsString();
      else
        Entity.PanelLocation = string.Empty;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelLocation, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelLocation).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelModelTypeCode).IsNull == false)
        Entity.PanelModelTypeCode = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelModelTypeCode).GetAsString();
      else
        Entity.PanelModelTypeCode = string.Empty;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelModelTypeCode, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelModelTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelModelIsActive).IsNull == false)
        Entity.PanelModelIsActive = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelModelIsActive).GetAsBool();
      else
        Entity.PanelModelIsActive = false;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelModelIsActive, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.PanelModelIsActive).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CpuIsActive).IsNull == false)
        Entity.CpuIsActive = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CpuIsActive).GetAsBool();
      else
        Entity.CpuIsActive = false;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.CpuIsActive, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.CpuIsActive).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.SiteUid).IsNull == false)
        Entity.SiteUid = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.SiteUid).GetAsGuid();
      else
        Entity.SiteUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.SiteUid, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.SiteUid).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.SiteName).IsNull == false)
        Entity.SiteName = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.SiteName).GetAsString();
      else
        Entity.SiteName = string.Empty;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.SiteName, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.SiteName).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.EntityId).IsNull == false)
        Entity.EntityId = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.EntityId).GetAsGuid();
      else
        Entity.EntityId = Guid.Empty;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.EntityId, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.EntityId).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.EntityName).IsNull == false)
        Entity.EntityName = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.EntityName).GetAsString();
      else
        Entity.EntityName = string.Empty;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.EntityName, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.EntityName).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.TimeZoneId).IsNull == false)
        Entity.TimeZoneId = ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.TimeZoneId).GetAsString();
      else
        Entity.TimeZoneId = string.Empty;
      Entity.SetOriginalValueForProperty(GalaxyCpuInformationPDSAValidator.ColumnNames.TimeZoneId, ValidatorObject.Properties.GetByName(GalaxyCpuInformationPDSAValidator.ColumnNames.TimeZoneId).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>GalaxyCpuInformationPDSA</returns>
    public GalaxyCpuInformationPDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new GalaxyCpuInformationPDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          
          
          break;
        case SelectFilters.Search:
          
          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL that will count the number of rows returned from this view.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          
          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      sb.Append(WhereClauseSQL());
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion
    
    #region WhereClauseSQL Method
    /// <summary>
    /// Builds the WHERE clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string WhereClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (WhereFilter)
      {
        case WhereFilters.Custom:
          sb.Append(" " + WhereCustom);

          break;

        case WhereFilters.None:
          //  Do nothing

          break;

        case WhereFilters.ClusterGroupId:
          
          
          break;
        case WhereFilters.AccountCodeClusterPanelCpuNumbers:
          
          
          break;
        case WhereFilters.LikeAccountCode:
          
          
          break;
      }
      
      return sb.ToString();
    }
    #endregion

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
         
          break;
        case SelectFilters.Search:
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion

    #region WhereClauseFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any WHERE clause parameters.
    /// </summary>
    protected override void WhereClauseFillInParameters()
    {
      switch (WhereFilter)
      {
        case WhereFilters.ClusterGroupId:
         
          break;
        case WhereFilters.AccountCodeClusterPanelCpuNumbers:
         
          break;
        case WhereFilters.LikeAccountCode:
         
          break;
      }
    }
    #endregion

    #region OrderByClauseSQL Method
    /// <summary>
    /// Builds the ORDER BY clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string OrderByClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (OrderByFilter)
      {
        case OrderByFilters.None:
          //  Do Nothing

          break;

        case OrderByFilters.Custom:
          sb.Append(" " + OrderByCustom);

          break;
          
        case OrderByFilters.ClusterGroupId:
          
          
          break;
      }

      return sb.ToString();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the GalaxyCpuInformationPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'ClusterUid'
    /// </summary>
    public static string ClusterUid = "ClusterUid";
    /// <summary>
    /// Returns 'GalaxyPanelUid'
    /// </summary>
    public static string GalaxyPanelUid = "GalaxyPanelUid";
    /// <summary>
    /// Returns 'CpuUid'
    /// </summary>
    public static string CpuUid = "CpuUid";
    /// <summary>
    /// Returns 'ClusterGroupId'
    /// </summary>
    public static string ClusterGroupId = "ClusterGroupId";
    /// <summary>
    /// Returns 'ClusterNumber'
    /// </summary>
    public static string ClusterNumber = "ClusterNumber";
    /// <summary>
    /// Returns 'PanelNumber'
    /// </summary>
    public static string PanelNumber = "PanelNumber";
    /// <summary>
    /// Returns 'CpuNumber'
    /// </summary>
    public static string CpuNumber = "CpuNumber";
    /// <summary>
    /// Returns 'SerialNumber'
    /// </summary>
    public static string SerialNumber = "SerialNumber";
    /// <summary>
    /// Returns 'IpAddress'
    /// </summary>
    public static string IpAddress = "IpAddress";
    /// <summary>
    /// Returns 'DefaultEventLoggingOn'
    /// </summary>
    public static string DefaultEventLoggingOn = "DefaultEventLoggingOn";
    /// <summary>
    /// Returns 'PreventDataLoading'
    /// </summary>
    public static string PreventDataLoading = "PreventDataLoading";
    /// <summary>
    /// Returns 'PreventFlashLoading'
    /// </summary>
    public static string PreventFlashLoading = "PreventFlashLoading";
    /// <summary>
    /// Returns 'LastLogIndex'
    /// </summary>
    public static string LastLogIndex = "LastLogIndex";
    /// <summary>
    /// Returns 'ClusterName'
    /// </summary>
    public static string ClusterName = "ClusterName";
    /// <summary>
    /// Returns 'PanelName'
    /// </summary>
    public static string PanelName = "PanelName";
    /// <summary>
    /// Returns 'ClusterTypeCode'
    /// </summary>
    public static string ClusterTypeCode = "ClusterTypeCode";
    /// <summary>
    /// Returns 'ClusterTypeIsActive'
    /// </summary>
    public static string ClusterTypeIsActive = "ClusterTypeIsActive";
    /// <summary>
    /// Returns 'CredentialDataLength'
    /// </summary>
    public static string CredentialDataLength = "CredentialDataLength";
    /// <summary>
    /// Returns 'PanelLocation'
    /// </summary>
    public static string PanelLocation = "PanelLocation";
    /// <summary>
    /// Returns 'PanelModelTypeCode'
    /// </summary>
    public static string PanelModelTypeCode = "PanelModelTypeCode";
    /// <summary>
    /// Returns 'PanelModelIsActive'
    /// </summary>
    public static string PanelModelIsActive = "PanelModelIsActive";
    /// <summary>
    /// Returns 'CpuIsActive'
    /// </summary>
    public static string CpuIsActive = "CpuIsActive";
    /// <summary>
    /// Returns 'SiteUid'
    /// </summary>
    public static string SiteUid = "SiteUid";
    /// <summary>
    /// Returns 'SiteName'
    /// </summary>
    public static string SiteName = "SiteName";
    /// <summary>
    /// Returns 'EntityId'
    /// </summary>
    public static string EntityId = "EntityId";
    /// <summary>
    /// Returns 'EntityName'
    /// </summary>
    public static string EntityName = "EntityName";
    /// <summary>
    /// Returns 'TimeZoneId'
    /// </summary>
    public static string TimeZoneId = "TimeZoneId";
    }
    #endregion
  }
}
