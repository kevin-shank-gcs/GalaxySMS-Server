using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Select data from the AcknowledgedAlarmBasicDataPDSA view.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class AcknowledgedAlarmBasicDataPDSAData : PDSADataClassReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the AcknowledgedAlarmBasicDataPDSAData class
    /// </summary>
    public AcknowledgedAlarmBasicDataPDSAData() : base()
    {
      Entity = new AcknowledgedAlarmBasicDataPDSA();
      ValidatorObject = new AcknowledgedAlarmBasicDataPDSAValidator(Entity);

      Init();
    }
    
    /// <summary>
    /// Constructor for the AcknowledgedAlarmBasicDataPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a AcknowledgedAlarmBasicDataPDSA</param>
    public AcknowledgedAlarmBasicDataPDSAData(PDSADataProvider dataProvider,
      AcknowledgedAlarmBasicDataPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new AcknowledgedAlarmBasicDataPDSAValidator(Entity);

      Init();
    }
     
    /// <summary>
    /// Constructor for the AcknowledgedAlarmBasicDataPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a AcknowledgedAlarmBasicDataPDSA</param>
    /// <param name="validator">An instance of a AcknowledgedAlarmBasicDataPDSAValidator</param>
    public AcknowledgedAlarmBasicDataPDSAData(PDSADataProvider dataProvider,
      AcknowledgedAlarmBasicDataPDSA entity, AcknowledgedAlarmBasicDataPDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// A Custom SelectFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a WHERE statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum WhereFilters
    {
      /// <summary>
      /// No WhereFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom WhereFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'ByAccessPortalAlarmEventAcknowledgmentUid' WhereFilter
      /// </summary>
      ByAccessPortalAlarmEventAcknowledgmentUid
      ,
      /// <summary>
      /// 'ByAckedByUserId' WhereFilter
      /// </summary>
      ByAckedByUserId
      ,
      /// <summary>
      /// 'ByActivityEventUid' WhereFilter
      /// </summary>
      ByActivityEventUid
      ,
      /// <summary>
      /// 'ByDeviceEntityId' WhereFilter
      /// </summary>
      ByDeviceEntityId
      ,
      /// <summary>
      /// 'ByDeviceUid' WhereFilter
      /// </summary>
      ByDeviceUid
      ,
      /// <summary>
      /// 'ByGalaxyPanelAlarmEventAcknowledgmentUid' WhereFilter
      /// </summary>
      ByGalaxyPanelAlarmEventAcknowledgmentUid
      ,
      /// <summary>
      /// 'ByInputDevicePanelAlarmEventAcknowledgmentUid' WhereFilter
      /// </summary>
      ByInputDevicePanelAlarmEventAcknowledgmentUid
    }

    /// <summary>
    /// Enumeration for selecting an ORDER BY statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum OrderByFilters
    {
      /// <summary>
      /// No OrderByFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'AckedDateTime' OrderByFilter
      /// </summary>
      AckedDateTime
    }
    
    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }
    /// <summary>
    /// Get/Set a WHERE clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public WhereFilters WhereFilter { get; set; }
    /// <summary>
    /// Get/Set a ORDER BY clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public OrderByFilters OrderByFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Public Property Entity Class
        private AcknowledgedAlarmBasicDataPDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public AcknowledgedAlarmBasicDataPDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "AcknowledgedAlarmBasicDataPDSAData";
      DBObjectName = "GCS.AcknowledgedAlarmBasicData";
      SchemaName = "GCS";
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;
      
      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes all of the Data Columns with valid data for each field in the table.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.ActivityEventUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.DeviceEntityId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.DeviceUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AccessPortalAlarmEventAcknowledgmentUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.GalaxyPanelAlarmEventAcknowledgmentUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.Response);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.InputDeviceAlarmEventAcknowledgmentUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedByUserId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedByUserDisplayName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedDateTime);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);

      prop = ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedUpdatedDateTime);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.ActivityEventUid).Value = Entity.ActivityEventUid;
      if (ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.ActivityEventUid).SetAsNull == true)
        Entity.ActivityEventUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.DeviceEntityId).Value = Entity.DeviceEntityId;
      if (ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.DeviceEntityId).SetAsNull == true)
        Entity.DeviceEntityId = Guid.Empty;
      ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.DeviceUid).Value = Entity.DeviceUid;
      if (ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.DeviceUid).SetAsNull == true)
        Entity.DeviceUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AccessPortalAlarmEventAcknowledgmentUid).Value = Entity.AccessPortalAlarmEventAcknowledgmentUid;
      if (ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AccessPortalAlarmEventAcknowledgmentUid).SetAsNull == true)
        Entity.AccessPortalAlarmEventAcknowledgmentUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.GalaxyPanelAlarmEventAcknowledgmentUid).Value = Entity.GalaxyPanelAlarmEventAcknowledgmentUid;
      if (ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.GalaxyPanelAlarmEventAcknowledgmentUid).SetAsNull == true)
        Entity.GalaxyPanelAlarmEventAcknowledgmentUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.Response).Value = Entity.Response;
      if (ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.Response).SetAsNull == true)
        Entity.Response = string.Empty;
      ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.InputDeviceAlarmEventAcknowledgmentUid).Value = Entity.InputDeviceAlarmEventAcknowledgmentUid;
      if (ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.InputDeviceAlarmEventAcknowledgmentUid).SetAsNull == true)
        Entity.InputDeviceAlarmEventAcknowledgmentUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedByUserId).Value = Entity.AckedByUserId;
      if (ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedByUserId).SetAsNull == true)
        Entity.AckedByUserId = Guid.Empty;
      ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedByUserDisplayName).Value = Entity.AckedByUserDisplayName;
      if (ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedByUserDisplayName).SetAsNull == true)
        Entity.AckedByUserDisplayName = string.Empty;
      ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedDateTime).Value = Entity.AckedDateTime;
      if (ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedDateTime).SetAsNull == true)
        Entity.AckedDateTime = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedUpdatedDateTime).Value = Entity.AckedUpdatedDateTime;
      if (ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedUpdatedDateTime).SetAsNull == true)
        Entity.AckedUpdatedDateTime = DateTimeOffset.Now;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.ActivityEventUid).IsNull == false)
        Entity.ActivityEventUid = ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.ActivityEventUid).GetAsGuid();
      else
        Entity.ActivityEventUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.ActivityEventUid, ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.ActivityEventUid).Value);

      if (ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.DeviceEntityId).IsNull == false)
        Entity.DeviceEntityId = ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.DeviceEntityId).GetAsGuid();
      else
        Entity.DeviceEntityId = Guid.Empty;
      Entity.SetOriginalValueForProperty(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.DeviceEntityId, ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.DeviceEntityId).Value);

      if (ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.DeviceUid).IsNull == false)
        Entity.DeviceUid = ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.DeviceUid).GetAsGuid();
      else
        Entity.DeviceUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.DeviceUid, ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.DeviceUid).Value);

      if (ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AccessPortalAlarmEventAcknowledgmentUid).IsNull == false)
        Entity.AccessPortalAlarmEventAcknowledgmentUid = ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AccessPortalAlarmEventAcknowledgmentUid).GetAsGuid();
      else
        Entity.AccessPortalAlarmEventAcknowledgmentUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AccessPortalAlarmEventAcknowledgmentUid, ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AccessPortalAlarmEventAcknowledgmentUid).Value);

      if (ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.GalaxyPanelAlarmEventAcknowledgmentUid).IsNull == false)
        Entity.GalaxyPanelAlarmEventAcknowledgmentUid = ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.GalaxyPanelAlarmEventAcknowledgmentUid).GetAsGuid();
      else
        Entity.GalaxyPanelAlarmEventAcknowledgmentUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.GalaxyPanelAlarmEventAcknowledgmentUid, ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.GalaxyPanelAlarmEventAcknowledgmentUid).Value);

      if (ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.Response).IsNull == false)
        Entity.Response = ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.Response).GetAsString();
      else
        Entity.Response = string.Empty;
      Entity.SetOriginalValueForProperty(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.Response, ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.Response).Value);

      if (ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.InputDeviceAlarmEventAcknowledgmentUid).IsNull == false)
        Entity.InputDeviceAlarmEventAcknowledgmentUid = ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.InputDeviceAlarmEventAcknowledgmentUid).GetAsGuid();
      else
        Entity.InputDeviceAlarmEventAcknowledgmentUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.InputDeviceAlarmEventAcknowledgmentUid, ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.InputDeviceAlarmEventAcknowledgmentUid).Value);

      if (ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedByUserId).IsNull == false)
        Entity.AckedByUserId = ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedByUserId).GetAsGuid();
      else
        Entity.AckedByUserId = Guid.Empty;
      Entity.SetOriginalValueForProperty(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedByUserId, ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedByUserId).Value);

      if (ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedByUserDisplayName).IsNull == false)
        Entity.AckedByUserDisplayName = ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedByUserDisplayName).GetAsString();
      else
        Entity.AckedByUserDisplayName = string.Empty;
      Entity.SetOriginalValueForProperty(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedByUserDisplayName, ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedByUserDisplayName).Value);

      if (ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedDateTime).IsNull == false)
        Entity.AckedDateTime = ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedDateTime).GetAsDate();
      else
        Entity.AckedDateTime = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);
      Entity.SetOriginalValueForProperty(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedDateTime, ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedDateTime).Value);

      if (ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedUpdatedDateTime).IsNull == false)
        Entity.AckedUpdatedDateTime = ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedUpdatedDateTime).GetAsDate();
      else
        Entity.AckedUpdatedDateTime = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);
      Entity.SetOriginalValueForProperty(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedUpdatedDateTime, ValidatorObject.Properties.GetByName(AcknowledgedAlarmBasicDataPDSAValidator.ColumnNames.AckedUpdatedDateTime).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>AcknowledgedAlarmBasicDataPDSA</returns>
    public AcknowledgedAlarmBasicDataPDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new AcknowledgedAlarmBasicDataPDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          
          
          break;
        case SelectFilters.Search:
          
          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL that will count the number of rows returned from this view.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          
          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      sb.Append(WhereClauseSQL());
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion
    
    #region WhereClauseSQL Method
    /// <summary>
    /// Builds the WHERE clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string WhereClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (WhereFilter)
      {
        case WhereFilters.Custom:
          sb.Append(" " + WhereCustom);

          break;

        case WhereFilters.None:
          //  Do nothing

          break;

        case WhereFilters.ByAccessPortalAlarmEventAcknowledgmentUid:
          sb.Append(" WHERE AccessPortalAlarmEventAcknowledgmentUid  =  @AccessPortalAlarmEventAcknowledgmentUid");

          
          break;
        case WhereFilters.ByAckedByUserId:
          sb.Append(" WHERE AckedByUserId  =  @AckedByUserId");

          
          break;
        case WhereFilters.ByActivityEventUid:
          sb.Append(" WHERE ActivityEventUid  =  @ActivityEventUid");

          
          break;
        case WhereFilters.ByDeviceEntityId:
          sb.Append(" WHERE DeviceEntityId  =  @DeviceEntityId");

          
          break;
        case WhereFilters.ByDeviceUid:
          sb.Append(" WHERE DeviceUid  =  @DeviceUid");

          
          break;
        case WhereFilters.ByGalaxyPanelAlarmEventAcknowledgmentUid:
          sb.Append(" WHERE GalaxyPanelAlarmEventAcknowledgmentUid  =  @GalaxyPanelAlarmEventAcknowledgmentUid");

          
          break;
        case WhereFilters.ByInputDevicePanelAlarmEventAcknowledgmentUid:
          sb.Append(" WHERE InputDeviceAlarmEventAcknowledgmentUid  =  @InputDeviceAlarmEventAcknowledgmentUid");

          
          break;
      }
      
      return sb.ToString();
    }
    #endregion

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
         
          break;
        case SelectFilters.Search:
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion

    #region WhereClauseFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any WHERE clause parameters.
    /// </summary>
    protected override void WhereClauseFillInParameters()
    {
      switch (WhereFilter)
      {
        case WhereFilters.ByAccessPortalAlarmEventAcknowledgmentUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@AccessPortalAlarmEventAcknowledgmentUid", DbType.Guid, Entity.AccessPortalAlarmEventAcknowledgmentUid));
         
          break;
        case WhereFilters.ByAckedByUserId:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@AckedByUserId", DbType.Guid, Entity.AckedByUserId));
         
          break;
        case WhereFilters.ByActivityEventUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ActivityEventUid", DbType.Guid, Entity.ActivityEventUid));
         
          break;
        case WhereFilters.ByDeviceEntityId:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DeviceEntityId", DbType.Guid, Entity.DeviceEntityId));
         
          break;
        case WhereFilters.ByDeviceUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DeviceUid", DbType.Guid, Entity.DeviceUid));
         
          break;
        case WhereFilters.ByGalaxyPanelAlarmEventAcknowledgmentUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@GalaxyPanelAlarmEventAcknowledgmentUid", DbType.Guid, Entity.GalaxyPanelAlarmEventAcknowledgmentUid));
         
          break;
        case WhereFilters.ByInputDevicePanelAlarmEventAcknowledgmentUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@InputDeviceAlarmEventAcknowledgmentUid", DbType.Guid, Entity.InputDeviceAlarmEventAcknowledgmentUid));
         
          break;
      }
    }
    #endregion

    #region OrderByClauseSQL Method
    /// <summary>
    /// Builds the ORDER BY clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string OrderByClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (OrderByFilter)
      {
        case OrderByFilters.None:
          //  Do Nothing

          break;

        case OrderByFilters.Custom:
          sb.Append(" " + OrderByCustom);

          break;
          
        case OrderByFilters.AckedDateTime:
          sb.Append(" ORDER BY AckedDateTime");

          
          break;
      }

      return sb.ToString();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the AcknowledgedAlarmBasicDataPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'ActivityEventUid'
    /// </summary>
    public static string ActivityEventUid = "ActivityEventUid";
    /// <summary>
    /// Returns 'DeviceEntityId'
    /// </summary>
    public static string DeviceEntityId = "DeviceEntityId";
    /// <summary>
    /// Returns 'DeviceUid'
    /// </summary>
    public static string DeviceUid = "DeviceUid";
    /// <summary>
    /// Returns 'AccessPortalAlarmEventAcknowledgmentUid'
    /// </summary>
    public static string AccessPortalAlarmEventAcknowledgmentUid = "AccessPortalAlarmEventAcknowledgmentUid";
    /// <summary>
    /// Returns 'GalaxyPanelAlarmEventAcknowledgmentUid'
    /// </summary>
    public static string GalaxyPanelAlarmEventAcknowledgmentUid = "GalaxyPanelAlarmEventAcknowledgmentUid";
    /// <summary>
    /// Returns 'Response'
    /// </summary>
    public static string Response = "Response";
    /// <summary>
    /// Returns 'InputDeviceAlarmEventAcknowledgmentUid'
    /// </summary>
    public static string InputDeviceAlarmEventAcknowledgmentUid = "InputDeviceAlarmEventAcknowledgmentUid";
    /// <summary>
    /// Returns 'AckedByUserId'
    /// </summary>
    public static string AckedByUserId = "AckedByUserId";
    /// <summary>
    /// Returns 'AckedByUserDisplayName'
    /// </summary>
    public static string AckedByUserDisplayName = "AckedByUserDisplayName";
    /// <summary>
    /// Returns 'AckedDateTime'
    /// </summary>
    public static string AckedDateTime = "AckedDateTime";
    /// <summary>
    /// Returns 'AckedUpdatedDateTime'
    /// </summary>
    public static string AckedUpdatedDateTime = "AckedUpdatedDateTime";
    }
    #endregion
  }
}
