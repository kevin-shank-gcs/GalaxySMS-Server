using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
    /// <summary>
    /// Used to Add/Edit/Delete/Select data from the InputDeviceSupervisionTypePDSA table.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// You should NOT modify this class as it is intended to be re-generated.
    /// </summary>
    public partial class InputDeviceSupervisionTypePDSAData : PDSADataClassTable
    {
        #region Constructors
        /// <summary>
        /// Constructor for the InputDeviceSupervisionTypePDSAData class
        /// </summary>
        public InputDeviceSupervisionTypePDSAData() : base()
        {
            Entity = new InputDeviceSupervisionTypePDSA();
            ValidatorObject = new InputDeviceSupervisionTypePDSAValidator(Entity);

            Init();
        }

        /// <summary>
        /// Constructor for the InputDeviceSupervisionTypePDSAData class
        /// </summary>
        /// <param name="entity">An instance of a InputDeviceSupervisionTypePDSA</param>
        public InputDeviceSupervisionTypePDSAData(InputDeviceSupervisionTypePDSA entity) : base(entity)
        {
            Entity = entity;
            ValidatorObject = new InputDeviceSupervisionTypePDSAValidator(Entity);

            Init();
        }

        /// <summary>
        /// Constructor for the InputDeviceSupervisionTypePDSAData class
        /// </summary>
        /// <param name="dataProvider">An instance of a PDSADataProvider</param>
        /// <param name="entity">An instance of a InputDeviceSupervisionTypePDSA</param>
        public InputDeviceSupervisionTypePDSAData(PDSADataProvider dataProvider,
          InputDeviceSupervisionTypePDSA entity)
          : base(dataProvider, entity)
        {
            Entity = entity;
            ValidatorObject = new InputDeviceSupervisionTypePDSAValidator(Entity);

            Init();
        }

        /// <summary>
        /// Constructor for the InputDeviceSupervisionTypePDSAData class
        /// </summary>
        /// <param name="dataProvider">An instance of a PDSADataProvider</param>
        /// <param name="entity">An instance of a InputDeviceSupervisionTypePDSA</param>
        /// <param name="validator">An instance of a InputDeviceSupervisionTypePDSAValidator</param>
        public InputDeviceSupervisionTypePDSAData(PDSADataProvider dataProvider,
          InputDeviceSupervisionTypePDSA entity, InputDeviceSupervisionTypePDSAValidator validator)
          : base(dataProvider, entity, validator)
        {
            Entity = entity;
            ValidatorObject = validator;

            Init();
        }
        #endregion

        #region Filter Properties and Enumerations
        /// <summary>
        /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
        /// </summary>
        public enum SelectFilters
        {

            /// <summary>
            /// 'All' SelectFilter
            /// </summary>
            All
          ,
            /// <summary>
            /// 'ByDisplayResourceKey' SelectFilter
            /// </summary>
            ByDisplayResourceKey
          ,
            /// <summary>
            /// 'ListBox' SelectFilter
            /// </summary>
            ListBox
          ,
            /// <summary>
            /// 'PrimaryKey' SelectFilter
            /// </summary>
            PrimaryKey
          ,
            /// <summary>
            /// 'Search' SelectFilter
            /// </summary>
            Search
          ,
            /// <summary>
            /// 'SelectAllForCulture' SelectFilter
            /// </summary>
            SelectAllForCulture
          ,
            /// <summary>
            /// 'ByInputDeviceUid' SelectFilter
            /// </summary>
            ByInputDeviceUid
          ,
            /// <summary>
            /// A Custom Select Filter
            /// </summary>
            Custom
        }


        /// <summary>
        /// Enumeration for selecting an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
        /// </summary>
        public enum InsertFilters
        {

            /// <summary>
            /// 'All' InsertFilter
            /// </summary>
            All
          ,
            /// <summary>
            /// A Custom InsertFilter
            /// </summary>
            Custom
        }

        /// <summary>
        /// Enumeration for selecting an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
        /// </summary>
        public enum UpdateFilters
        {

            /// <summary>
            /// 'PrimaryKey' UpdateFilter
            /// </summary>
            PrimaryKey
          ,
            /// <summary>
            /// 'UpdateConcurrency' UpdateFilter
            /// </summary>
            UpdateConcurrency
          ,
            /// <summary>
            /// A Custom UpdateFilter
            /// </summary>
            Custom
        }

        /// <summary>
        /// Enumeration for selecting a DELETE statement or DELETE stored procedure to execute when calling the Delete() method.
        /// </summary>
        public enum DeleteFilters
        {

            /// <summary>
            /// 'DeleteByPK' DeleteFilter
            /// </summary>
            DeleteByPK
          ,
            /// <summary>
            /// A Custom DeleteFilter
            /// </summary>
            Custom
        }

        /// <summary>
        /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
        /// </summary>
        public enum RowCountFilters
        {

            /// <summary>
            /// 'All' RowCountFilter
            /// </summary>
            All
          ,
            /// <summary>
            /// A Custom RowCountFilter
            /// </summary>
            Custom
        }

        /// <summary>
        /// Get/Set a Dynamic SQL or Stored Procedure to execute to return data.
        /// </summary>
        public SelectFilters SelectFilter { get; set; }


        /// <summary>
        /// Get/Set an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
        /// </summary>
        public InsertFilters InsertFilter { get; set; }

        private UpdateFilters mUpdateFilter;
        /// <summary>
        /// Get/Set an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
        /// </summary>
        public UpdateFilters UpdateFilter
        {
            get { return mUpdateFilter; }
            set
            {
                mUpdateFilter = value;
                if (mUpdateFilter == UpdateFilters.Custom)
                    PerformValidation = false;
            }
        }
        /// <summary>
        /// Get/Set a DELETE statement or DELETE stored procedure to execute when calling the Delete() method. You might need to set a WhereFilter as well.
        /// </summary>
        public DeleteFilters DeleteFilter { get; set; }
        /// <summary>
        /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
        /// </summary>
        public RowCountFilters RowCountFilter { get; set; }
        #endregion

        #region Entity Property
        private InputDeviceSupervisionTypePDSA _EntityObject = null;

        /// <summary>
        /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
        /// </summary>
        public InputDeviceSupervisionTypePDSA Entity
        {
            get { return _EntityObject; }
            set
            {
                _EntityObject = value;
                base.EntityObject = _EntityObject;
            }
        }
        #endregion

        #region Init Method
        /// <summary>
        /// Initializes this class to a valid start state.
        /// </summary>
        protected override void Init()
        {
            ClassName = "InputDeviceSupervisionTypePDSAData";
            DBObjectName = "GCS.InputDeviceSupervisionType";
            SchemaName = "GCS";
            PrimaryKeyType = PDSAPrimaryKeyType.GUID;
            PrimaryKeyGenerate = false;
            UseAuditTracking = DataProvider.UseDBAuditTracking;
            UseStoredProcs = DataProvider.UseStoredProcedures;
            base.EntityObject = Entity;
            base.ValidatorObject = ValidatorObject;

            // Set Reference to ValidatorObject Properties Collection
            AllColumns = ValidatorObject.Properties;

            // Set any Initial Starting values for data columns
            InitDataColumns();
        }
        #endregion

        #region InitDataColumns Method
        /// <summary>
        /// Use this area to initialize any starting values for data in the Properties collection for each Entity property.
        /// </summary>
        protected override void InitDataColumns()
        {
            PDSAProperty prop;

            // Fill in Column Properties
            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InputDeviceSupervisionTypeUid);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = true;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
            //prop.ValueForNull = Guid.Empty;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.Display);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
            //prop.ValueForNull = string.Empty;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DisplayResourceKey);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
            //prop.ValueForNull = Guid.Empty;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.Description);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
            //prop.ValueForNull = string.Empty;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DescriptionResourceKey);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
            //prop.ValueForNull = Guid.Empty;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.HasSeriesResistor);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
            //prop.ValueForNull = false;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.HasParallelResistor);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
            //prop.ValueForNull = false;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsNormalOpen);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
            //prop.ValueForNull = false;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.TroubleShortThreshold);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
            //prop.ValueForNull = 0;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.NormalChangeThreshold);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
            //prop.ValueForNull = 0;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.TroubleOpenThreshold);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
            //prop.ValueForNull = 0;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateVoltagesEnabled);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
            //prop.ValueForNull = false;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateTroubleShortThreshold);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
            //prop.ValueForNull = 0;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateNormalChangeThreshold);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
            //prop.ValueForNull = 0;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateTroubleOpenThreshold);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
            //prop.ValueForNull = 0;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DisplayOrder);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
            //prop.ValueForNull = 0;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsDefault);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
            //prop.ValueForNull = false;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsActive);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
            //prop.ValueForNull = false;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InsertName);
            prop.IsInsertable = true;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
            //prop.ValueForNull = string.Empty;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InsertDate);
            prop.IsInsertable = true;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
            //prop.ValueForNull = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.UpdateName);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
            //prop.ValueForNull = string.Empty;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.UpdateDate);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
            //prop.ValueForNull = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.ConcurrencyValue);
            prop.IsInsertable = true;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = false;
            prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
            //prop.ValueForNull = 0;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.BinaryResourceUid);
            prop.IsInsertable = true;
            prop.IsUpdatable = true;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
            //prop.ValueForNull = Guid.Empty;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.CultureName);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = false;
            prop.DBValueForNull = System.Data.SqlTypes.SqlChars.Null;
            //prop.ValueForNull = string.Empty;

            prop = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InputDeviceUid);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = false;
            prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
            //prop.ValueForNull = Guid.Empty;

        }
        #endregion

        #region EntityDataToColumnCollection Method
        /// <summary>
        /// Moves the data from the Entity class into the Columns collection
        /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
        /// </summary>
        protected override void EntityDataToColumnCollection()
        {
            // Move all Entity Values into Properties Collection
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InputDeviceSupervisionTypeUid).Value = Entity.InputDeviceSupervisionTypeUid;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InputDeviceSupervisionTypeUid).SetAsNull == true)
                Entity.InputDeviceSupervisionTypeUid = Guid.Empty;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.Display).Value = Entity.Display;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.Display).SetAsNull == true)
                Entity.Display = string.Empty;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DisplayResourceKey).Value = Entity.DisplayResourceKey;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DisplayResourceKey).SetAsNull == true)
                Entity.DisplayResourceKey = Guid.Empty;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.Description).Value = Entity.Description;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.Description).SetAsNull == true)
                Entity.Description = string.Empty;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DescriptionResourceKey).Value = Entity.DescriptionResourceKey;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DescriptionResourceKey).SetAsNull == true)
                Entity.DescriptionResourceKey = Guid.Empty;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.HasSeriesResistor).Value = Entity.HasSeriesResistor;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.HasSeriesResistor).SetAsNull == true)
                Entity.HasSeriesResistor = false;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.HasParallelResistor).Value = Entity.HasParallelResistor;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.HasParallelResistor).SetAsNull == true)
                Entity.HasParallelResistor = false;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsNormalOpen).Value = Entity.IsNormalOpen;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsNormalOpen).SetAsNull == true)
                Entity.IsNormalOpen = false;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.TroubleShortThreshold).Value = Entity.TroubleShortThreshold;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.TroubleShortThreshold).SetAsNull == true)
                Entity.TroubleShortThreshold = 0;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.NormalChangeThreshold).Value = Entity.NormalChangeThreshold;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.NormalChangeThreshold).SetAsNull == true)
                Entity.NormalChangeThreshold = 0;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.TroubleOpenThreshold).Value = Entity.TroubleOpenThreshold;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.TroubleOpenThreshold).SetAsNull == true)
                Entity.TroubleOpenThreshold = 0;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateVoltagesEnabled).Value = Entity.AlternateVoltagesEnabled;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateVoltagesEnabled).SetAsNull == true)
                Entity.AlternateVoltagesEnabled = false;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateTroubleShortThreshold).Value = Entity.AlternateTroubleShortThreshold;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateTroubleShortThreshold).SetAsNull == true)
                Entity.AlternateTroubleShortThreshold = 0;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateNormalChangeThreshold).Value = Entity.AlternateNormalChangeThreshold;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateNormalChangeThreshold).SetAsNull == true)
                Entity.AlternateNormalChangeThreshold = 0;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateTroubleOpenThreshold).Value = Entity.AlternateTroubleOpenThreshold;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateTroubleOpenThreshold).SetAsNull == true)
                Entity.AlternateTroubleOpenThreshold = 0;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DisplayOrder).Value = Entity.DisplayOrder;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DisplayOrder).SetAsNull == true)
                Entity.DisplayOrder = 0;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsDefault).Value = Entity.IsDefault;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsDefault).SetAsNull == true)
                Entity.IsDefault = false;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsActive).Value = Entity.IsActive;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsActive).SetAsNull == true)
                Entity.IsActive = false;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InsertName).SetAsNull == true)
                Entity.InsertName = string.Empty;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InsertDate).SetAsNull == true)
                Entity.InsertDate = DateTimeOffset.Now;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.UpdateName).SetAsNull == true)
                Entity.UpdateName = string.Empty;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.UpdateDate).SetAsNull == true)
                Entity.UpdateDate = DateTimeOffset.Now;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull == true)
                Entity.ConcurrencyValue = 0;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.BinaryResourceUid).Value = Entity.BinaryResourceUid;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.BinaryResourceUid).SetAsNull == true)
                Entity.BinaryResourceUid = Guid.Empty;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.CultureName).Value = Entity.CultureName;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.CultureName).SetAsNull == true)
                Entity.CultureName = string.Empty;
            ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InputDeviceUid).Value = Entity.InputDeviceUid;
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InputDeviceUid).SetAsNull == true)
                Entity.InputDeviceUid = Guid.Empty;
        }
        #endregion

        #region ColumnCollectionToEntityData Method
        /// <summary>
        /// Moves the data from the Columns collection into the Entity class.
        /// This is called whenever you are reading data in from a database.
        ///   For example, from BuildCollection, Load, LoadByPK, etc.
        /// </summary>
        protected override void ColumnCollectionToEntityData()
        {
            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InputDeviceSupervisionTypeUid).IsNull == false)
                Entity.InputDeviceSupervisionTypeUid = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InputDeviceSupervisionTypeUid).GetAsGuid();
            else
                Entity.InputDeviceSupervisionTypeUid = Guid.Empty;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InputDeviceSupervisionTypeUid, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InputDeviceSupervisionTypeUid).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.Display).IsNull == false)
                Entity.Display = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.Display).GetAsString();
            else
                Entity.Display = string.Empty;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.Display, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.Display).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DisplayResourceKey).IsNull == false)
                Entity.DisplayResourceKey = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DisplayResourceKey).GetAsGuid();
            else
                Entity.DisplayResourceKey = Guid.Empty;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DisplayResourceKey, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DisplayResourceKey).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.Description).IsNull == false)
                Entity.Description = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.Description).GetAsString();
            else
                Entity.Description = string.Empty;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.Description, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.Description).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DescriptionResourceKey).IsNull == false)
                Entity.DescriptionResourceKey = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DescriptionResourceKey).GetAsGuid();
            else
                Entity.DescriptionResourceKey = Guid.Empty;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DescriptionResourceKey, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DescriptionResourceKey).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.HasSeriesResistor).IsNull == false)
                Entity.HasSeriesResistor = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.HasSeriesResistor).GetAsBool();
            else
                Entity.HasSeriesResistor = false;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.HasSeriesResistor, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.HasSeriesResistor).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.HasParallelResistor).IsNull == false)
                Entity.HasParallelResistor = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.HasParallelResistor).GetAsBool();
            else
                Entity.HasParallelResistor = false;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.HasParallelResistor, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.HasParallelResistor).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsNormalOpen).IsNull == false)
                Entity.IsNormalOpen = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsNormalOpen).GetAsBool();
            else
                Entity.IsNormalOpen = false;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsNormalOpen, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsNormalOpen).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.TroubleShortThreshold).IsNull == false)
                Entity.TroubleShortThreshold = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.TroubleShortThreshold).GetAsShort();
            else
                Entity.TroubleShortThreshold = 0;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.TroubleShortThreshold, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.TroubleShortThreshold).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.NormalChangeThreshold).IsNull == false)
                Entity.NormalChangeThreshold = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.NormalChangeThreshold).GetAsShort();
            else
                Entity.NormalChangeThreshold = 0;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.NormalChangeThreshold, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.NormalChangeThreshold).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.TroubleOpenThreshold).IsNull == false)
                Entity.TroubleOpenThreshold = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.TroubleOpenThreshold).GetAsShort();
            else
                Entity.TroubleOpenThreshold = 0;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.TroubleOpenThreshold, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.TroubleOpenThreshold).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateVoltagesEnabled).IsNull == false)
                Entity.AlternateVoltagesEnabled = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateVoltagesEnabled).GetAsBool();
            else
                Entity.AlternateVoltagesEnabled = false;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateVoltagesEnabled, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateVoltagesEnabled).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateTroubleShortThreshold).IsNull == false)
                Entity.AlternateTroubleShortThreshold = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateTroubleShortThreshold).GetAsShort();
            else
                Entity.AlternateTroubleShortThreshold = 0;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateTroubleShortThreshold, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateTroubleShortThreshold).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateNormalChangeThreshold).IsNull == false)
                Entity.AlternateNormalChangeThreshold = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateNormalChangeThreshold).GetAsShort();
            else
                Entity.AlternateNormalChangeThreshold = 0;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateNormalChangeThreshold, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateNormalChangeThreshold).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateTroubleOpenThreshold).IsNull == false)
                Entity.AlternateTroubleOpenThreshold = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateTroubleOpenThreshold).GetAsShort();
            else
                Entity.AlternateTroubleOpenThreshold = 0;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateTroubleOpenThreshold, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateTroubleOpenThreshold).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DisplayOrder).IsNull == false)
                Entity.DisplayOrder = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DisplayOrder).GetAsInteger();
            else
                Entity.DisplayOrder = 0;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DisplayOrder, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DisplayOrder).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsDefault).IsNull == false)
                Entity.IsDefault = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsDefault).GetAsBool();
            else
                Entity.IsDefault = false;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsDefault, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsDefault).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsActive).IsNull == false)
                Entity.IsActive = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsActive).GetAsBool();
            else
                Entity.IsActive = false;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsActive, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsActive).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InsertName).IsNull == false)
                Entity.InsertName = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InsertName).GetAsString();
            else
                Entity.InsertName = string.Empty;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InsertName, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InsertName).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InsertDate).IsNull == false)
                Entity.InsertDate = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InsertDate).GetAsDate();
            else
                Entity.InsertDate = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InsertDate, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InsertDate).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.UpdateName).IsNull == false)
                Entity.UpdateName = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.UpdateName).GetAsString();
            else
                Entity.UpdateName = string.Empty;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.UpdateName, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.UpdateName).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.UpdateDate).IsNull == false)
                Entity.UpdateDate = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.UpdateDate).GetAsDate();
            else
                Entity.UpdateDate = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.UpdateDate, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.UpdateDate).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
                Entity.ConcurrencyValue = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
            else
                Entity.ConcurrencyValue = 0;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.ConcurrencyValue, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.ConcurrencyValue).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.BinaryResourceUid).IsNull == false)
                Entity.BinaryResourceUid = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.BinaryResourceUid).GetAsGuid();
            else
                Entity.BinaryResourceUid = Guid.Empty;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.BinaryResourceUid, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.BinaryResourceUid).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.CultureName).IsNull == false)
                Entity.CultureName = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.CultureName).GetAsString();
            else
                Entity.CultureName = string.Empty;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.CultureName, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.CultureName).Value);

            if (ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InputDeviceUid).IsNull == false)
                Entity.InputDeviceUid = ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InputDeviceUid).GetAsGuid();
            else
                Entity.InputDeviceUid = Guid.Empty;
            Entity.SetOriginalValueForProperty(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InputDeviceUid, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InputDeviceUid).Value);

        }
        #endregion

        #region CreateEntityFromDataRow Method
        /// <summary>
        /// Creates an Entity object from a DataRow object.
        /// </summary>
        /// <param name="dr">DataRow object with all fields from the table in it.</param>
        /// <returns>InputDeviceSupervisionTypePDSA</returns>
        public InputDeviceSupervisionTypePDSA CreateEntityFromDataRow(DataRow dr)
        {
            // Create new Entity Object
            Entity = new InputDeviceSupervisionTypePDSA();

            // Move all data into Properties collection
            // This method calls the ColumnCollectionToEntityData method
            DataRowToProperties(dr);
            Entity.IsDirty = false;

            return Entity;
        }
        #endregion

        #region SelectSQL Method
        /// <summary>
        /// Builds the SQL for the SELECT statement, or SELECT stored procedure based on the SelectFilter property.
        /// </summary>
        /// <returns>string</returns>
        public override string SelectSQL()
        {
            StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

            switch (SelectFilter)
            {
                case SelectFilters.All:
                    if (UseStoredProcs)
                    {
                        sb.Append("GCS.InputDeviceSupervisionTypePDSA_SelectAll");
                    }
                    else
                    {

                    }

                    break;
                case SelectFilters.ByDisplayResourceKey:
                    if (UseStoredProcs)
                    {
                        sb.Append("GCS.InputDeviceSupervisionTypePDSA_ByDisplayResourceKey");
                    }
                    else
                    {

                    }

                    break;
                case SelectFilters.ListBox:
                    if (UseStoredProcs)
                    {
                        sb.Append("GCS.InputDeviceSupervisionTypePDSA_SelectListBox");
                    }
                    else
                    {

                    }

                    break;
                case SelectFilters.PrimaryKey:
                    if (UseStoredProcs)
                    {
                        sb.Append("GCS.InputDeviceSupervisionTypePDSA_SelectByPK");
                    }
                    else
                    {

                    }

                    break;
                case SelectFilters.Search:
                    if (UseStoredProcs)
                    {
                        sb.Append("GCS.InputDeviceSupervisionTypePDSA_SelectSearch");
                    }
                    else
                    {

                    }

                    break;
                case SelectFilters.SelectAllForCulture:
                    if (UseStoredProcs)
                    {
                        sb.Append("GCS.InputDeviceSupervisionTypePDSA_SelectAllForCulture");
                    }
                    else
                    {

                    }

                    break;
                case SelectFilters.ByInputDeviceUid:
                    if (UseStoredProcs)
                    {
                        sb.Append("GCS.InputDeviceSupervisionTypePDSA_ByInputDeviceUid");
                    }
                    else
                    {

                    }

                    break;

                case SelectFilters.Custom:
                    sb.Append(SelectCustom);

                    break;
            }

            SQL = sb.ToString();

            return SQL;
        }
        #endregion

        #region InsertSQL Method
        /// <summary>
        /// Builds the SQL for the INSERT statement, or INSERT stored procedure based on the InsertFilter property.
        /// </summary>
        /// <returns>string</returns>
        public override string InsertSQL()
        {
            StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

            switch (InsertFilter)
            {
                case InsertFilters.All:
                    if (UseStoredProcs)
                    {
                        sb.Append("GCS.InputDeviceSupervisionTypePDSA_Insert");
                    }
                    else
                    {

                    }

                    break;

                case InsertFilters.Custom:
                    sb.Append(InsertCustom);

                    break;
            }

            SQL = sb.ToString();

            return SQL;
        }
        #endregion

        #region UpdateSQL Method
        /// <summary>
        /// Builds the SQL for the UPDATE statement, or UPDATE stored procedure based on the UpdateFilter property.
        /// </summary>
        /// <returns>string</returns>
        public override string UpdateSQL()
        {
            StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

            switch (UpdateFilter)
            {
                case UpdateFilters.PrimaryKey:
                    if (UseStoredProcs)
                    {
                        sb.Append("GCS.InputDeviceSupervisionTypePDSA_Update");
                    }
                    else
                    {

                    }

                    break;
                case UpdateFilters.UpdateConcurrency:
                    if (UseStoredProcs)
                    {
                        sb.Append("GCS.InputDeviceSupervisionTypePDSA_UpdateConcurrency");
                    }
                    else
                    {

                    }

                    break;

                case UpdateFilters.Custom:
                    sb.Append(UpdateCustom);

                    break;
            }

            SQL = sb.ToString();

            return SQL;
        }
        #endregion

        #region DeleteByPK Method
        /// <summary>
        /// Delete a record from the table based on the primary key value that is passed in.
        /// </summary>
        /// <param name="inputDeviceSupervisionTypeUid">The value of the primary key of the row to delete</param>
        /// <returns>int</returns>
        public int DeleteByPK(Guid inputDeviceSupervisionTypeUid)
        {
            DeleteFilter = DeleteFilters.DeleteByPK;
            Entity.InputDeviceSupervisionTypeUid = inputDeviceSupervisionTypeUid;

            // If using Audit Tracking, need to load the record first
            if (UseAuditTracking)
                LoadByPK(inputDeviceSupervisionTypeUid);

            RowsAffected = Delete();

            return RowsAffected;
        }
        #endregion

        #region DeleteSQL Method
        /// <summary>
        /// Builds the SQL for the DELETE statement, or DELETE stored procedure. You can set the WhereFilter property to selectively delete rows from the table.
        /// </summary>
        /// <returns>string</returns>
        public override string DeleteSQL()
        {
            StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

            switch (DeleteFilter)
            {
                case DeleteFilters.DeleteByPK:
                    if (UseStoredProcs)
                    {
                        sb.Append("GCS.InputDeviceSupervisionTypePDSA_DeleteByPK");
                    }
                    else
                    {

                    }

                    break;

                case DeleteFilters.Custom:
                    sb.Append(DeleteCustom);

                    break;
            }

            if (!UseStoredProcs)
            {
                sb.Append(WhereClauseSQL());
            }

            SQL = sb.ToString();

            return SQL;
        }
        #endregion

        #region RowCountSQL Method
        /// <summary>
        /// Builds the SELECT Count(*) SQL, or the name of the stored procedure, that will count the number of rows.
        /// </summary>
        /// <returns>string</returns>
        public override string RowCountSQL()
        {
            StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

            switch (RowCountFilter)
            {
                case RowCountFilters.All:
                    if (UseStoredProcs)
                    {
                        sb.Append("GCS.InputDeviceSupervisionTypePDSA_RowCount");
                    }
                    else
                    {

                    }

                    break;

                case RowCountFilters.Custom:
                    sb.Append(RowCountCustom);

                    break;
            }

            if (!UseStoredProcs)
            {
                sb.Append(WhereClauseSQL());
            }

            SQL = sb.ToString();

            return SQL;
        }
        #endregion

        #region LoadByPK Method
        /// <summary>
        /// Load a row of data in the Entity properties. Returns a value greater than 0 if it finds the record.
        /// </summary>
        /// <param name="inputDeviceSupervisionTypeUid">The value of the primary key of the row to load</param>
        /// <returns>Int32</returns>
        public int LoadByPK(Guid inputDeviceSupervisionTypeUid)
        {
            SelectFilter = SelectFilters.PrimaryKey;
            Entity.InputDeviceSupervisionTypeUid = inputDeviceSupervisionTypeUid;

            // Load Data into Properties
            RowsAffected = Load();

            // Reset all Collection Properties
            ResetCollectionProperties();

            return RowsAffected;
        }
        #endregion


        #region Updated Method
        /// <summary>
        /// This method is called after a successful update
        /// </summary>
        protected override void Updated()
        {
            Entity.ConcurrencyValue += Convert.ToInt16(1);
        }
        #endregion

        #region SelectFillInParameters Method
        /// <summary>
        /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
        /// </summary>
        protected override void SelectFillInParameters()
        {
            switch (SelectFilter)
            {
                case SelectFilters.All:

                    break;
                case SelectFilters.ByDisplayResourceKey:
                    CommandObject.Parameters.Add(DataProvider.CreateParameter("@DisplayResourceKey", DbType.Guid, Entity.DisplayResourceKey));

                    break;
                case SelectFilters.ListBox:
                    CommandObject.Parameters.Add(DataProvider.CreateParameter("@CultureName", DbType.String, Entity.CultureName));

                    break;
                case SelectFilters.PrimaryKey:
                    CommandObject.Parameters.Add(DataProvider.CreateParameter("@InputDeviceSupervisionTypeUid", DbType.Guid, Entity.InputDeviceSupervisionTypeUid));

                    break;
                case SelectFilters.Search:
                    CommandObject.Parameters.Add(DataProvider.CreateParameter("@Display", DbType.String, Entity.Display));
                    CommandObject.Parameters.Add(DataProvider.CreateParameter("@CultureName", DbType.String, Entity.CultureName));

                    break;
                case SelectFilters.SelectAllForCulture:
                    CommandObject.Parameters.Add(DataProvider.CreateParameter("@CultureName", DbType.String, Entity.CultureName));

                    break;
                case SelectFilters.ByInputDeviceUid:
                    CommandObject.Parameters.Add(DataProvider.CreateParameter("@InputDeviceUid", DbType.Guid, Entity.InputDeviceUid));
                    CommandObject.Parameters.Add(DataProvider.CreateParameter("@CultureName", DbType.String, Entity.CultureName));

                    break;
            }

            // Add on paging parameters
            if (UsePaging)
            {
                PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
            }
        }
        #endregion


        #region SetModificationCommandParameters Method
        /// <summary>
        /// Called to build any parameters prior to submitting an INSERT, UPDATE, or DELETE statement.
        /// </summary>
        protected override void SetModificationCommandParameters()
        {
            switch (DataModificationAction)
            {
                case PDSADataModificationState.Delete:
                    switch (DeleteFilter)
                    {
                        case DeleteFilters.DeleteByPK:
                            CommandObject.Parameters.Clear();
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@InputDeviceSupervisionTypeUid", DbType.Guid, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InputDeviceSupervisionTypeUid).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.ConcurrencyValue).Value));

                            break;
                    }

                    break;

                case PDSADataModificationState.Insert:
                    if (PrimaryKeyType == PDSAPrimaryKeyType.PDSA)
                    {
                        if (PrimaryKeyGenerate == true)
                        {
                            //  Get New Primary Key from pdsaTableIds
                            PrimaryKeySet(PKGetFromPDSATableIds(PDSALoginName));
                        }
                    }

                    switch (InsertFilter)
                    {
                        case InsertFilters.All:
                            CommandObject.Parameters.Clear();
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@InputDeviceSupervisionTypeUid", DbType.Guid, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InputDeviceSupervisionTypeUid).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@Display", DbType.String, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.Display).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@DisplayResourceKey", DbType.Guid, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DisplayResourceKey).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@Description", DbType.String, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.Description).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@DescriptionResourceKey", DbType.Guid, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DescriptionResourceKey).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@BinaryResourceUid", DbType.Guid, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.BinaryResourceUid).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@HasSeriesResistor", DbType.Boolean, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.HasSeriesResistor).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@HasParallelResistor", DbType.Boolean, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.HasParallelResistor).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@IsNormalOpen", DbType.Boolean, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsNormalOpen).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@TroubleShortThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.TroubleShortThreshold).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@NormalChangeThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.NormalChangeThreshold).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@TroubleOpenThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.TroubleOpenThreshold).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@AlternateVoltagesEnabled", DbType.Boolean, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateVoltagesEnabled).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@AlternateTroubleShortThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateTroubleShortThreshold).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@AlternateNormalChangeThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateNormalChangeThreshold).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@AlternateTroubleOpenThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateTroubleOpenThreshold).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@DisplayOrder", DbType.Int32, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DisplayOrder).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@IsDefault", DbType.Boolean, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsDefault).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@IsActive", DbType.Boolean, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsActive).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@InsertName", DbType.String, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InsertName).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@InsertDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InsertDate).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@UpdateName", DbType.String, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.UpdateName).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@UpdateDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.UpdateDate).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.ConcurrencyValue).Value));

                            break;
                    }

                    break;

                case PDSADataModificationState.Update:
                    switch (UpdateFilter)
                    {
                        case UpdateFilters.PrimaryKey:
                            CommandObject.Parameters.Clear();
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@InputDeviceSupervisionTypeUid", DbType.Guid, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InputDeviceSupervisionTypeUid).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@Display", DbType.String, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.Display).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@DisplayResourceKey", DbType.Guid, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DisplayResourceKey).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@Description", DbType.String, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.Description).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@DescriptionResourceKey", DbType.Guid, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DescriptionResourceKey).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@BinaryResourceUid", DbType.Guid, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.BinaryResourceUid).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@HasSeriesResistor", DbType.Boolean, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.HasSeriesResistor).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@HasParallelResistor", DbType.Boolean, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.HasParallelResistor).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@IsNormalOpen", DbType.Boolean, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsNormalOpen).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@TroubleShortThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.TroubleShortThreshold).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@NormalChangeThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.NormalChangeThreshold).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@TroubleOpenThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.TroubleOpenThreshold).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@AlternateVoltagesEnabled", DbType.Boolean, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateVoltagesEnabled).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@AlternateTroubleShortThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateTroubleShortThreshold).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@AlternateNormalChangeThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateNormalChangeThreshold).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@AlternateTroubleOpenThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.AlternateTroubleOpenThreshold).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@DisplayOrder", DbType.Int32, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.DisplayOrder).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@IsDefault", DbType.Boolean, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsDefault).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@IsActive", DbType.Boolean, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.IsActive).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@UpdateName", DbType.String, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.UpdateName).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@UpdateDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.UpdateDate).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.ConcurrencyValue).Value));

                            break;
                        case UpdateFilters.UpdateConcurrency:
                            CommandObject.Parameters.Clear();
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@InputDeviceSupervisionTypeUid", DbType.Guid, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.InputDeviceSupervisionTypeUid).Value));
                            CommandObject.Parameters.Add(DataProvider.CreateParameter(
                                "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(InputDeviceSupervisionTypePDSAValidator.ColumnNames.ConcurrencyValue).Value));

                            break;
                    }
                    break;
            }
        }
        #endregion
    }
}
