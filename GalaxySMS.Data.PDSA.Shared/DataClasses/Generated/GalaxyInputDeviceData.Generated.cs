using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Add/Edit/Delete/Select data from the GalaxyInputDevicePDSA table.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class GalaxyInputDevicePDSAData : PDSADataClassTable
  {
    #region Constructors
    /// <summary>
    /// Constructor for the GalaxyInputDevicePDSAData class
    /// </summary>
    public GalaxyInputDevicePDSAData() : base()
    {
      Entity = new GalaxyInputDevicePDSA();
      ValidatorObject = new GalaxyInputDevicePDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the GalaxyInputDevicePDSAData class
    /// </summary>
    /// <param name="entity">An instance of a GalaxyInputDevicePDSA</param>
    public GalaxyInputDevicePDSAData(GalaxyInputDevicePDSA entity) : base(entity)
    {
      Entity = entity;
      ValidatorObject = new GalaxyInputDevicePDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the GalaxyInputDevicePDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a GalaxyInputDevicePDSA</param>
    public GalaxyInputDevicePDSAData(PDSADataProvider dataProvider,
      GalaxyInputDevicePDSA entity)
      : base(dataProvider, entity)
    {
      Entity = entity;
      ValidatorObject = new GalaxyInputDevicePDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the GalaxyInputDevicePDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a GalaxyInputDevicePDSA</param>
    /// <param name="validator">An instance of a GalaxyInputDevicePDSAValidator</param>
    public GalaxyInputDevicePDSAData(PDSADataProvider dataProvider,
      GalaxyInputDevicePDSA entity, GalaxyInputDevicePDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'ByInputDeviceSupervisionTypeUid' SelectFilter
      /// </summary>
      ByInputDeviceSupervisionTypeUid
      ,
      /// <summary>
      /// 'ByInputDeviceUid' SelectFilter
      /// </summary>
      ByInputDeviceUid
      ,
      /// <summary>
      /// 'ListBox' SelectFilter
      /// </summary>
      ListBox
      ,
      /// <summary>
      /// 'PrimaryKey' SelectFilter
      /// </summary>
      PrimaryKey
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// A Custom Select Filter
      /// </summary>
      Custom
    }


    /// <summary>
    /// Enumeration for selecting an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
    /// </summary>
    public enum InsertFilters
    {
      
      /// <summary>
      /// 'All' InsertFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom InsertFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
    /// </summary>
    public enum UpdateFilters
    {
      
      /// <summary>
      /// 'PrimaryKey' UpdateFilter
      /// </summary>
      PrimaryKey
      ,
      /// <summary>
      /// 'UpdateConcurrency' UpdateFilter
      /// </summary>
      UpdateConcurrency
      ,
      /// <summary>
      /// A Custom UpdateFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a DELETE statement or DELETE stored procedure to execute when calling the Delete() method.
    /// </summary>
    public enum DeleteFilters
    {
      
      /// <summary>
      /// 'DeleteByPK' DeleteFilter
      /// </summary>
      DeleteByPK
      ,
      /// <summary>
      /// A Custom DeleteFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom RowCountFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL or Stored Procedure to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }

    
    /// <summary>
    /// Get/Set an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
    /// </summary>
    public InsertFilters InsertFilter { get; set; }

    private UpdateFilters mUpdateFilter;
    /// <summary>
    /// Get/Set an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
    /// </summary>
    public UpdateFilters UpdateFilter
    {
      get { return mUpdateFilter; }
      set
      {
        mUpdateFilter = value;
        if (mUpdateFilter == UpdateFilters.Custom)
          PerformValidation = false;
      }
    }
    /// <summary>
    /// Get/Set a DELETE statement or DELETE stored procedure to execute when calling the Delete() method. You might need to set a WhereFilter as well.
    /// </summary>
    public DeleteFilters DeleteFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Entity Property
    private GalaxyInputDevicePDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public GalaxyInputDevicePDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "GalaxyInputDevicePDSAData";
      DBObjectName = "GCS.GalaxyInputDevice";
      SchemaName = "GCS";
      PrimaryKeyType = PDSAPrimaryKeyType.GUID;
      PrimaryKeyGenerate = false;
      UseAuditTracking = DataProvider.UseDBAuditTracking;
      UseStoredProcs = DataProvider.UseStoredProcedures;
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;

      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Use this area to initialize any starting values for data in the Properties collection for each Entity property.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InputDeviceUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = true;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InputDeviceSupervisionTypeUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.GalaxyInputModeUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.DelayDuration);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.GalaxyInputDelayTypeUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.DisableDisarmedOnOffLogEvents);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.IsNormalOpen);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.NormalChangeThreshold);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.TroubleOpenThreshold);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateVoltagesEnabled);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateTroubleShortThreshold);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateNormalChangeThreshold);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateTroubleOpenThreshold);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.TroubleShortThreshold);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InsertName);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InsertDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);

      prop = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.UpdateName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.UpdateDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);

      prop = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.ConcurrencyValue);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InputDeviceUid).Value = Entity.InputDeviceUid;
      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InputDeviceUid).SetAsNull == true)
        Entity.InputDeviceUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InputDeviceSupervisionTypeUid).Value = Entity.InputDeviceSupervisionTypeUid;
      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InputDeviceSupervisionTypeUid).SetAsNull == true)
        Entity.InputDeviceSupervisionTypeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.GalaxyInputModeUid).Value = Entity.GalaxyInputModeUid;
      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.GalaxyInputModeUid).SetAsNull == true)
        Entity.GalaxyInputModeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.DelayDuration).Value = Entity.DelayDuration;
      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.DelayDuration).SetAsNull == true)
        Entity.DelayDuration = 0;
      ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.GalaxyInputDelayTypeUid).Value = Entity.GalaxyInputDelayTypeUid;
      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.GalaxyInputDelayTypeUid).SetAsNull == true)
        Entity.GalaxyInputDelayTypeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.DisableDisarmedOnOffLogEvents).Value = Entity.DisableDisarmedOnOffLogEvents;
      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.DisableDisarmedOnOffLogEvents).SetAsNull == true)
        Entity.DisableDisarmedOnOffLogEvents = false;
      ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.IsNormalOpen).Value = Entity.IsNormalOpen;
      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.IsNormalOpen).SetAsNull == true)
        Entity.IsNormalOpen = false;
      ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.NormalChangeThreshold).Value = Entity.NormalChangeThreshold;
      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.NormalChangeThreshold).SetAsNull == true)
        Entity.NormalChangeThreshold = 0;
      ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.TroubleOpenThreshold).Value = Entity.TroubleOpenThreshold;
      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.TroubleOpenThreshold).SetAsNull == true)
        Entity.TroubleOpenThreshold = 0;
      ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateVoltagesEnabled).Value = Entity.AlternateVoltagesEnabled;
      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateVoltagesEnabled).SetAsNull == true)
        Entity.AlternateVoltagesEnabled = false;
      ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateTroubleShortThreshold).Value = Entity.AlternateTroubleShortThreshold;
      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateTroubleShortThreshold).SetAsNull == true)
        Entity.AlternateTroubleShortThreshold = 0;
      ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateNormalChangeThreshold).Value = Entity.AlternateNormalChangeThreshold;
      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateNormalChangeThreshold).SetAsNull == true)
        Entity.AlternateNormalChangeThreshold = 0;
      ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateTroubleOpenThreshold).Value = Entity.AlternateTroubleOpenThreshold;
      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateTroubleOpenThreshold).SetAsNull == true)
        Entity.AlternateTroubleOpenThreshold = 0;
      ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.TroubleShortThreshold).Value = Entity.TroubleShortThreshold;
      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.TroubleShortThreshold).SetAsNull == true)
        Entity.TroubleShortThreshold = 0;
      ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InsertName).SetAsNull == true)
        Entity.InsertName = string.Empty;
      ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InsertDate).SetAsNull == true)
        Entity.InsertDate = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.UpdateName).SetAsNull == true)
        Entity.UpdateName = string.Empty;
      ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.UpdateDate).SetAsNull == true)
        Entity.UpdateDate = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull == true)
        Entity.ConcurrencyValue = 0;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InputDeviceUid).IsNull == false)
        Entity.InputDeviceUid = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InputDeviceUid).GetAsGuid();
      else
        Entity.InputDeviceUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(GalaxyInputDevicePDSAValidator.ColumnNames.InputDeviceUid, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InputDeviceUid).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InputDeviceSupervisionTypeUid).IsNull == false)
        Entity.InputDeviceSupervisionTypeUid = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InputDeviceSupervisionTypeUid).GetAsGuid();
      else
        Entity.InputDeviceSupervisionTypeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(GalaxyInputDevicePDSAValidator.ColumnNames.InputDeviceSupervisionTypeUid, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InputDeviceSupervisionTypeUid).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.GalaxyInputModeUid).IsNull == false)
        Entity.GalaxyInputModeUid = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.GalaxyInputModeUid).GetAsGuid();
      else
        Entity.GalaxyInputModeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(GalaxyInputDevicePDSAValidator.ColumnNames.GalaxyInputModeUid, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.GalaxyInputModeUid).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.DelayDuration).IsNull == false)
        Entity.DelayDuration = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.DelayDuration).GetAsInteger();
      else
        Entity.DelayDuration = 0;
      Entity.SetOriginalValueForProperty(GalaxyInputDevicePDSAValidator.ColumnNames.DelayDuration, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.DelayDuration).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.GalaxyInputDelayTypeUid).IsNull == false)
        Entity.GalaxyInputDelayTypeUid = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.GalaxyInputDelayTypeUid).GetAsGuid();
      else
        Entity.GalaxyInputDelayTypeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(GalaxyInputDevicePDSAValidator.ColumnNames.GalaxyInputDelayTypeUid, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.GalaxyInputDelayTypeUid).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.DisableDisarmedOnOffLogEvents).IsNull == false)
        Entity.DisableDisarmedOnOffLogEvents = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.DisableDisarmedOnOffLogEvents).GetAsBool();
      else
        Entity.DisableDisarmedOnOffLogEvents = false;
      Entity.SetOriginalValueForProperty(GalaxyInputDevicePDSAValidator.ColumnNames.DisableDisarmedOnOffLogEvents, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.DisableDisarmedOnOffLogEvents).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.IsNormalOpen).IsNull == false)
        Entity.IsNormalOpen = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.IsNormalOpen).GetAsBool();
      else
        Entity.IsNormalOpen = false;
      Entity.SetOriginalValueForProperty(GalaxyInputDevicePDSAValidator.ColumnNames.IsNormalOpen, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.IsNormalOpen).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.NormalChangeThreshold).IsNull == false)
        Entity.NormalChangeThreshold = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.NormalChangeThreshold).GetAsShort();
      else
        Entity.NormalChangeThreshold = 0;
      Entity.SetOriginalValueForProperty(GalaxyInputDevicePDSAValidator.ColumnNames.NormalChangeThreshold, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.NormalChangeThreshold).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.TroubleOpenThreshold).IsNull == false)
        Entity.TroubleOpenThreshold = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.TroubleOpenThreshold).GetAsShort();
      else
        Entity.TroubleOpenThreshold = 0;
      Entity.SetOriginalValueForProperty(GalaxyInputDevicePDSAValidator.ColumnNames.TroubleOpenThreshold, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.TroubleOpenThreshold).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateVoltagesEnabled).IsNull == false)
        Entity.AlternateVoltagesEnabled = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateVoltagesEnabled).GetAsBool();
      else
        Entity.AlternateVoltagesEnabled = false;
      Entity.SetOriginalValueForProperty(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateVoltagesEnabled, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateVoltagesEnabled).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateTroubleShortThreshold).IsNull == false)
        Entity.AlternateTroubleShortThreshold = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateTroubleShortThreshold).GetAsShort();
      else
        Entity.AlternateTroubleShortThreshold = 0;
      Entity.SetOriginalValueForProperty(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateTroubleShortThreshold, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateTroubleShortThreshold).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateNormalChangeThreshold).IsNull == false)
        Entity.AlternateNormalChangeThreshold = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateNormalChangeThreshold).GetAsShort();
      else
        Entity.AlternateNormalChangeThreshold = 0;
      Entity.SetOriginalValueForProperty(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateNormalChangeThreshold, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateNormalChangeThreshold).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateTroubleOpenThreshold).IsNull == false)
        Entity.AlternateTroubleOpenThreshold = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateTroubleOpenThreshold).GetAsShort();
      else
        Entity.AlternateTroubleOpenThreshold = 0;
      Entity.SetOriginalValueForProperty(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateTroubleOpenThreshold, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateTroubleOpenThreshold).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.TroubleShortThreshold).IsNull == false)
        Entity.TroubleShortThreshold = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.TroubleShortThreshold).GetAsShort();
      else
        Entity.TroubleShortThreshold = 0;
      Entity.SetOriginalValueForProperty(GalaxyInputDevicePDSAValidator.ColumnNames.TroubleShortThreshold, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.TroubleShortThreshold).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InsertName).GetAsString();
      else
        Entity.InsertName = string.Empty;
      Entity.SetOriginalValueForProperty(GalaxyInputDevicePDSAValidator.ColumnNames.InsertName, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InsertName).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InsertDate).GetAsDate();
      else
        Entity.InsertDate = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);
      Entity.SetOriginalValueForProperty(GalaxyInputDevicePDSAValidator.ColumnNames.InsertDate, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InsertDate).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.UpdateName).GetAsString();
      else
        Entity.UpdateName = string.Empty;
      Entity.SetOriginalValueForProperty(GalaxyInputDevicePDSAValidator.ColumnNames.UpdateName, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.UpdateName).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.UpdateDate).GetAsDate();
      else
        Entity.UpdateDate = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);
      Entity.SetOriginalValueForProperty(GalaxyInputDevicePDSAValidator.ColumnNames.UpdateDate, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.UpdateDate).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
      else
        Entity.ConcurrencyValue = 0;
      Entity.SetOriginalValueForProperty(GalaxyInputDevicePDSAValidator.ColumnNames.ConcurrencyValue, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.ConcurrencyValue).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>GalaxyInputDevicePDSA</returns>
    public GalaxyInputDevicePDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new GalaxyInputDevicePDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement, or SELECT stored procedure based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInputDevicePDSA_SelectAll");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByInputDeviceSupervisionTypeUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInputDevicePDSA_ByBinaryResourceUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByInputDeviceUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInputDevicePDSA_ByInputDeviceUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ListBox:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInputDevicePDSA_SelectListBox");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.PrimaryKey:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInputDevicePDSA_SelectByPK");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.Search:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInputDevicePDSA_SelectSearch");
          }
          else
          {
            
          }
          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region InsertSQL Method
    /// <summary>
    /// Builds the SQL for the INSERT statement, or INSERT stored procedure based on the InsertFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string InsertSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (InsertFilter)
      {
        case InsertFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInputDevicePDSA_Insert");
          }
          else
          {
            
          }
            
          break;
        
        case InsertFilters.Custom:
          sb.Append(InsertCustom);
          
          break;
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region UpdateSQL Method
    /// <summary>
    /// Builds the SQL for the UPDATE statement, or UPDATE stored procedure based on the UpdateFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string UpdateSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (UpdateFilter)
      {
        case UpdateFilters.PrimaryKey:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInputDevicePDSA_Update");
          }
          else
          {
            
          }
          
          break;
        case UpdateFilters.UpdateConcurrency:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInputDevicePDSA_UpdateConcurrency");
          }
          else
          {
            
          }
          
          break;
        
        case UpdateFilters.Custom:
          sb.Append(UpdateCustom);
          
          break;
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region DeleteByPK Method
    /// <summary>
    /// Delete a record from the table based on the primary key value that is passed in.
    /// </summary>
    /// <param name="inputDeviceUid">The value of the primary key of the row to delete</param>
    /// <returns>int</returns>
    public int DeleteByPK(Guid inputDeviceUid)
    {
      DeleteFilter = DeleteFilters.DeleteByPK;
      Entity.InputDeviceUid = inputDeviceUid;      
      
      // If using Audit Tracking, need to load the record first
      if (UseAuditTracking)
        LoadByPK(inputDeviceUid);

      RowsAffected = Delete();

      return RowsAffected;
    }
    #endregion

    #region DeleteSQL Method
    /// <summary>
    /// Builds the SQL for the DELETE statement, or DELETE stored procedure. You can set the WhereFilter property to selectively delete rows from the table.
    /// </summary>
    /// <returns>string</returns>
    public override string DeleteSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (DeleteFilter)
      {
        case DeleteFilters.DeleteByPK:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInputDevicePDSA_DeleteByPK");
          }
          else
          {
            
          }
          
          break;

        case DeleteFilters.Custom:
          sb.Append(DeleteCustom);

          break;          
      }

      if(!UseStoredProcs)
      {
        sb.Append(WhereClauseSQL());
      }
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL, or the name of the stored procedure, that will count the number of rows.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInputDevicePDSA_RowCount");
          }
          else
          {
            
          }
          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      if(!UseStoredProcs)
      {
        sb.Append(WhereClauseSQL());
      }
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region LoadByPK Method
    /// <summary>
    /// Load a row of data in the Entity properties. Returns a value greater than 0 if it finds the record.
    /// </summary>
    /// <param name="inputDeviceUid">The value of the primary key of the row to load</param>
    /// <returns>Int32</returns>
    public int LoadByPK(Guid inputDeviceUid)
    {
      SelectFilter = SelectFilters.PrimaryKey;
      Entity.InputDeviceUid = inputDeviceUid;      

      // Load Data into Properties
      RowsAffected = Load();

      // Reset all Collection Properties
      ResetCollectionProperties();
      
      return RowsAffected;
    }
    #endregion
    
    
    #region Updated Method
    /// <summary>
    /// This method is called after a successful update
    /// </summary>
    protected override void Updated()
    {
      Entity.ConcurrencyValue += Convert.ToInt16(1);
    }
    #endregion

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
         
          break;
        case SelectFilters.ByInputDeviceSupervisionTypeUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@InputDeviceSupervisionTypeUid", DbType.Guid, Entity.InputDeviceSupervisionTypeUid));
         
          break;
        case SelectFilters.ByInputDeviceUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@InputDeviceUid", DbType.Guid, Entity.InputDeviceUid));
         
          break;
        case SelectFilters.ListBox:
         
          break;
        case SelectFilters.PrimaryKey:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@InputDeviceUid", DbType.Guid, Entity.InputDeviceUid));
         
          break;
        case SelectFilters.Search:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@InsertName", DbType.String, Entity.InsertName));
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion


    #region SetModificationCommandParameters Method
    /// <summary>
    /// Called to build any parameters prior to submitting an INSERT, UPDATE, or DELETE statement.
    /// </summary>
    protected override void SetModificationCommandParameters()
    {    
      switch (DataModificationAction)
      {
        case PDSADataModificationState.Delete:
          switch (DeleteFilter)
          {
            case DeleteFilters.DeleteByPK:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InputDeviceUid", DbType.Guid, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InputDeviceUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
          }

          break;

        case PDSADataModificationState.Insert:
          if (PrimaryKeyType == PDSAPrimaryKeyType.PDSA)
          {
            if (PrimaryKeyGenerate == true)
            {
              //  Get New Primary Key from pdsaTableIds
              PrimaryKeySet(PKGetFromPDSATableIds(PDSALoginName));
            }
          }

          switch (InsertFilter)
          {
            case InsertFilters.All:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InputDeviceUid", DbType.Guid, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InputDeviceUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InputDeviceSupervisionTypeUid", DbType.Guid, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InputDeviceSupervisionTypeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@GalaxyInputModeUid", DbType.Guid, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.GalaxyInputModeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DelayDuration", DbType.Int32, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.DelayDuration).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@GalaxyInputDelayTypeUid", DbType.Guid, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.GalaxyInputDelayTypeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DisableDisarmedOnOffLogEvents", DbType.Boolean, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.DisableDisarmedOnOffLogEvents).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@IsNormalOpen", DbType.Boolean, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.IsNormalOpen).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@TroubleShortThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.TroubleShortThreshold).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@NormalChangeThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.NormalChangeThreshold).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@TroubleOpenThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.TroubleOpenThreshold).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AlternateVoltagesEnabled", DbType.Boolean, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateVoltagesEnabled).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AlternateTroubleShortThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateTroubleShortThreshold).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AlternateNormalChangeThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateNormalChangeThreshold).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AlternateTroubleOpenThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateTroubleOpenThreshold).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InsertName", DbType.String, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InsertName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InsertDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InsertDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateName", DbType.String, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.UpdateName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.UpdateDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
          }

          break;

        case PDSADataModificationState.Update:
          switch (UpdateFilter)
          {
            case UpdateFilters.PrimaryKey:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InputDeviceUid", DbType.Guid, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InputDeviceUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InputDeviceSupervisionTypeUid", DbType.Guid, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InputDeviceSupervisionTypeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@GalaxyInputModeUid", DbType.Guid, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.GalaxyInputModeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DelayDuration", DbType.Int32, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.DelayDuration).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@GalaxyInputDelayTypeUid", DbType.Guid, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.GalaxyInputDelayTypeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DisableDisarmedOnOffLogEvents", DbType.Boolean, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.DisableDisarmedOnOffLogEvents).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@IsNormalOpen", DbType.Boolean, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.IsNormalOpen).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@TroubleShortThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.TroubleShortThreshold).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@NormalChangeThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.NormalChangeThreshold).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@TroubleOpenThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.TroubleOpenThreshold).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AlternateVoltagesEnabled", DbType.Boolean, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateVoltagesEnabled).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AlternateTroubleShortThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateTroubleShortThreshold).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AlternateNormalChangeThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateNormalChangeThreshold).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AlternateTroubleOpenThreshold", DbType.Int16, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.AlternateTroubleOpenThreshold).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateName", DbType.String, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.UpdateName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.UpdateDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
            case UpdateFilters.UpdateConcurrency:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InputDeviceUid", DbType.Guid, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.InputDeviceUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(GalaxyInputDevicePDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
          }
          break;
      }
    }
    #endregion
  }
}
