using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Add/Edit/Delete/Select data from the MercScpIdReportPDSA table.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class MercScpIdReportPDSAData : PDSADataClassTable
  {
    #region Constructors
    /// <summary>
    /// Constructor for the MercScpIdReportPDSAData class
    /// </summary>
    public MercScpIdReportPDSAData() : base()
    {
      Entity = new MercScpIdReportPDSA();
      ValidatorObject = new MercScpIdReportPDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the MercScpIdReportPDSAData class
    /// </summary>
    /// <param name="entity">An instance of a MercScpIdReportPDSA</param>
    public MercScpIdReportPDSAData(MercScpIdReportPDSA entity) : base(entity)
    {
      Entity = entity;
      ValidatorObject = new MercScpIdReportPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the MercScpIdReportPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a MercScpIdReportPDSA</param>
    public MercScpIdReportPDSAData(PDSADataProvider dataProvider,
      MercScpIdReportPDSA entity)
      : base(dataProvider, entity)
    {
      Entity = entity;
      ValidatorObject = new MercScpIdReportPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the MercScpIdReportPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a MercScpIdReportPDSA</param>
    /// <param name="validator">An instance of a MercScpIdReportPDSAValidator</param>
    public MercScpIdReportPDSAData(PDSADataProvider dataProvider,
      MercScpIdReportPDSA entity, MercScpIdReportPDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'ListBox' SelectFilter
      /// </summary>
      ListBox
      ,
      /// <summary>
      /// 'PrimaryKey' SelectFilter
      /// </summary>
      PrimaryKey
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// 'ByMacAddress' SelectFilter
      /// </summary>
      ByMacAddress
      ,
      /// <summary>
      /// 'ByModelAndSerialNumber' SelectFilter
      /// </summary>
      ByModelAndSerialNumber
      ,
      /// <summary>
      /// A Custom Select Filter
      /// </summary>
      Custom
    }


    /// <summary>
    /// Enumeration for selecting an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
    /// </summary>
    public enum InsertFilters
    {
      
      /// <summary>
      /// 'All' InsertFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom InsertFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
    /// </summary>
    public enum UpdateFilters
    {
      
      /// <summary>
      /// 'PrimaryKey' UpdateFilter
      /// </summary>
      PrimaryKey
      ,
      /// <summary>
      /// 'UpdateConcurrency' UpdateFilter
      /// </summary>
      UpdateConcurrency
      ,
      /// <summary>
      /// A Custom UpdateFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a DELETE statement or DELETE stored procedure to execute when calling the Delete() method.
    /// </summary>
    public enum DeleteFilters
    {
      
      /// <summary>
      /// 'DeleteByPK' DeleteFilter
      /// </summary>
      DeleteByPK
      ,
      /// <summary>
      /// A Custom DeleteFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom RowCountFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL or Stored Procedure to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }

    
    /// <summary>
    /// Get/Set an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
    /// </summary>
    public InsertFilters InsertFilter { get; set; }

    private UpdateFilters mUpdateFilter;
    /// <summary>
    /// Get/Set an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
    /// </summary>
    public UpdateFilters UpdateFilter
    {
      get { return mUpdateFilter; }
      set
      {
        mUpdateFilter = value;
        if (mUpdateFilter == UpdateFilters.Custom)
          PerformValidation = false;
      }
    }
    /// <summary>
    /// Get/Set a DELETE statement or DELETE stored procedure to execute when calling the Delete() method. You might need to set a WhereFilter as well.
    /// </summary>
    public DeleteFilters DeleteFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Entity Property
    private MercScpIdReportPDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public MercScpIdReportPDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "MercScpIdReportPDSAData";
      DBObjectName = "GCS.MercScpIdReport";
      SchemaName = "GCS";
      PrimaryKeyType = PDSAPrimaryKeyType.GUID;
      PrimaryKeyGenerate = false;
      UseAuditTracking = DataProvider.UseDBAuditTracking;
      UseStoredProcs = DataProvider.UseStoredProcedures;
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;

      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Use this area to initialize any starting values for data in the Properties collection for each Entity property.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MercScpIdReportUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = true;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MacAddress);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DriverSpcId);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ScpId);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SerialNumber);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceId);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceVersion);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMajor);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMinor);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CumulativeBuildCount);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.NeedsConfiguration);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.TlsStatus);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.OemCode);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentOperatingMode);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input1State);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input2State);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input3State);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Active);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Max);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Active);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Max);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbActive);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbMax);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.FirmwareAdvisory);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchCurrent);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchPowerUp);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbActiveRecords);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbMaxSize);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentClock);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt64.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamFree);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamSize);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.InsertName);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.InsertDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);

      prop = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ConcurrencyValue);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MercScpIdReportUid).Value = Entity.MercScpIdReportUid;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MercScpIdReportUid).SetAsNull == true)
        Entity.MercScpIdReportUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MacAddress).Value = Entity.MacAddress;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MacAddress).SetAsNull == true)
        Entity.MacAddress = string.Empty;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DriverSpcId).Value = Entity.DriverSpcId;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DriverSpcId).SetAsNull == true)
        Entity.DriverSpcId = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ScpId).Value = Entity.ScpId;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ScpId).SetAsNull == true)
        Entity.ScpId = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SerialNumber).Value = Entity.SerialNumber;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SerialNumber).SetAsNull == true)
        Entity.SerialNumber = string.Empty;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceId).Value = Entity.DeviceId;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceId).SetAsNull == true)
        Entity.DeviceId = string.Empty;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceVersion).Value = Entity.DeviceVersion;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceVersion).SetAsNull == true)
        Entity.DeviceVersion = string.Empty;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMajor).Value = Entity.SoftwareRevisionMajor;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMajor).SetAsNull == true)
        Entity.SoftwareRevisionMajor = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMinor).Value = Entity.SoftwareRevisionMinor;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMinor).SetAsNull == true)
        Entity.SoftwareRevisionMinor = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CumulativeBuildCount).Value = Entity.CumulativeBuildCount;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CumulativeBuildCount).SetAsNull == true)
        Entity.CumulativeBuildCount = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.NeedsConfiguration).Value = Entity.NeedsConfiguration;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.NeedsConfiguration).SetAsNull == true)
        Entity.NeedsConfiguration = false;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.TlsStatus).Value = Entity.TlsStatus;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.TlsStatus).SetAsNull == true)
        Entity.TlsStatus = string.Empty;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.OemCode).Value = Entity.OemCode;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.OemCode).SetAsNull == true)
        Entity.OemCode = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentOperatingMode).Value = Entity.CurrentOperatingMode;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentOperatingMode).SetAsNull == true)
        Entity.CurrentOperatingMode = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input1State).Value = Entity.Input1State;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input1State).SetAsNull == true)
        Entity.Input1State = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input2State).Value = Entity.Input2State;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input2State).SetAsNull == true)
        Entity.Input2State = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input3State).Value = Entity.Input3State;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input3State).SetAsNull == true)
        Entity.Input3State = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Active).Value = Entity.BioDb1Active;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Active).SetAsNull == true)
        Entity.BioDb1Active = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Max).Value = Entity.BioDb1Max;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Max).SetAsNull == true)
        Entity.BioDb1Max = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Active).Value = Entity.BioDb2Active;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Active).SetAsNull == true)
        Entity.BioDb2Active = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Max).Value = Entity.BioDb2Max;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Max).SetAsNull == true)
        Entity.BioDb2Max = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbActive).Value = Entity.AssetDbActive;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbActive).SetAsNull == true)
        Entity.AssetDbActive = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbMax).Value = Entity.AssetDbMax;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbMax).SetAsNull == true)
        Entity.AssetDbMax = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.FirmwareAdvisory).Value = Entity.FirmwareAdvisory;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.FirmwareAdvisory).SetAsNull == true)
        Entity.FirmwareAdvisory = string.Empty;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchCurrent).Value = Entity.DipSwitchCurrent;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchCurrent).SetAsNull == true)
        Entity.DipSwitchCurrent = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchPowerUp).Value = Entity.DipSwitchPowerUp;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchPowerUp).SetAsNull == true)
        Entity.DipSwitchPowerUp = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbActiveRecords).Value = Entity.DbActiveRecords;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbActiveRecords).SetAsNull == true)
        Entity.DbActiveRecords = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbMaxSize).Value = Entity.DbMaxSize;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbMaxSize).SetAsNull == true)
        Entity.DbMaxSize = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentClock).Value = Entity.CurrentClock;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentClock).SetAsNull == true)
        Entity.CurrentClock = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamFree).Value = Entity.RamFree;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamFree).SetAsNull == true)
        Entity.RamFree = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamSize).Value = Entity.RamSize;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamSize).SetAsNull == true)
        Entity.RamSize = 0;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.InsertName).SetAsNull == true)
        Entity.InsertName = string.Empty;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.InsertDate).SetAsNull == true)
        Entity.InsertDate = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateName).SetAsNull == true)
        Entity.UpdateName = string.Empty;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateDate).SetAsNull == true)
        Entity.UpdateDate = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull == true)
        Entity.ConcurrencyValue = 0;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MercScpIdReportUid).IsNull == false)
        Entity.MercScpIdReportUid = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MercScpIdReportUid).GetAsGuid();
      else
        Entity.MercScpIdReportUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.MercScpIdReportUid, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MercScpIdReportUid).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MacAddress).IsNull == false)
        Entity.MacAddress = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MacAddress).GetAsString();
      else
        Entity.MacAddress = string.Empty;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.MacAddress, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MacAddress).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DriverSpcId).IsNull == false)
        Entity.DriverSpcId = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DriverSpcId).GetAsInteger();
      else
        Entity.DriverSpcId = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.DriverSpcId, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DriverSpcId).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ScpId).IsNull == false)
        Entity.ScpId = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ScpId).GetAsInteger();
      else
        Entity.ScpId = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.ScpId, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ScpId).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SerialNumber).IsNull == false)
        Entity.SerialNumber = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SerialNumber).GetAsString();
      else
        Entity.SerialNumber = string.Empty;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.SerialNumber, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SerialNumber).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceId).IsNull == false)
        Entity.DeviceId = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceId).GetAsString();
      else
        Entity.DeviceId = string.Empty;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.DeviceId, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceId).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceVersion).IsNull == false)
        Entity.DeviceVersion = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceVersion).GetAsString();
      else
        Entity.DeviceVersion = string.Empty;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.DeviceVersion, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceVersion).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMajor).IsNull == false)
        Entity.SoftwareRevisionMajor = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMajor).GetAsInteger();
      else
        Entity.SoftwareRevisionMajor = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMajor, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMajor).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMinor).IsNull == false)
        Entity.SoftwareRevisionMinor = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMinor).GetAsInteger();
      else
        Entity.SoftwareRevisionMinor = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMinor, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMinor).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CumulativeBuildCount).IsNull == false)
        Entity.CumulativeBuildCount = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CumulativeBuildCount).GetAsInteger();
      else
        Entity.CumulativeBuildCount = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.CumulativeBuildCount, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CumulativeBuildCount).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.NeedsConfiguration).IsNull == false)
        Entity.NeedsConfiguration = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.NeedsConfiguration).GetAsBool();
      else
        Entity.NeedsConfiguration = false;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.NeedsConfiguration, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.NeedsConfiguration).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.TlsStatus).IsNull == false)
        Entity.TlsStatus = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.TlsStatus).GetAsString();
      else
        Entity.TlsStatus = string.Empty;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.TlsStatus, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.TlsStatus).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.OemCode).IsNull == false)
        Entity.OemCode = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.OemCode).GetAsInteger();
      else
        Entity.OemCode = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.OemCode, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.OemCode).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentOperatingMode).IsNull == false)
        Entity.CurrentOperatingMode = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentOperatingMode).GetAsShort();
      else
        Entity.CurrentOperatingMode = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.CurrentOperatingMode, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentOperatingMode).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input1State).IsNull == false)
        Entity.Input1State = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input1State).GetAsShort();
      else
        Entity.Input1State = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.Input1State, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input1State).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input2State).IsNull == false)
        Entity.Input2State = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input2State).GetAsShort();
      else
        Entity.Input2State = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.Input2State, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input2State).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input3State).IsNull == false)
        Entity.Input3State = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input3State).GetAsShort();
      else
        Entity.Input3State = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.Input3State, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input3State).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Active).IsNull == false)
        Entity.BioDb1Active = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Active).GetAsInteger();
      else
        Entity.BioDb1Active = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Active, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Active).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Max).IsNull == false)
        Entity.BioDb1Max = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Max).GetAsInteger();
      else
        Entity.BioDb1Max = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Max, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Max).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Active).IsNull == false)
        Entity.BioDb2Active = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Active).GetAsInteger();
      else
        Entity.BioDb2Active = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Active, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Active).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Max).IsNull == false)
        Entity.BioDb2Max = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Max).GetAsInteger();
      else
        Entity.BioDb2Max = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Max, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Max).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbActive).IsNull == false)
        Entity.AssetDbActive = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbActive).GetAsInteger();
      else
        Entity.AssetDbActive = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.AssetDbActive, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbActive).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbMax).IsNull == false)
        Entity.AssetDbMax = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbMax).GetAsInteger();
      else
        Entity.AssetDbMax = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.AssetDbMax, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbMax).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.FirmwareAdvisory).IsNull == false)
        Entity.FirmwareAdvisory = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.FirmwareAdvisory).GetAsString();
      else
        Entity.FirmwareAdvisory = string.Empty;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.FirmwareAdvisory, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.FirmwareAdvisory).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchCurrent).IsNull == false)
        Entity.DipSwitchCurrent = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchCurrent).GetAsShort();
      else
        Entity.DipSwitchCurrent = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchCurrent, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchCurrent).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchPowerUp).IsNull == false)
        Entity.DipSwitchPowerUp = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchPowerUp).GetAsShort();
      else
        Entity.DipSwitchPowerUp = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchPowerUp, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchPowerUp).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbActiveRecords).IsNull == false)
        Entity.DbActiveRecords = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbActiveRecords).GetAsInteger();
      else
        Entity.DbActiveRecords = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.DbActiveRecords, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbActiveRecords).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbMaxSize).IsNull == false)
        Entity.DbMaxSize = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbMaxSize).GetAsInteger();
      else
        Entity.DbMaxSize = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.DbMaxSize, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbMaxSize).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentClock).IsNull == false)
        Entity.CurrentClock = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentClock).GetAsLong();
      else
        Entity.CurrentClock = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.CurrentClock, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentClock).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamFree).IsNull == false)
        Entity.RamFree = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamFree).GetAsInteger();
      else
        Entity.RamFree = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.RamFree, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamFree).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamSize).IsNull == false)
        Entity.RamSize = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamSize).GetAsInteger();
      else
        Entity.RamSize = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.RamSize, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamSize).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.InsertName).GetAsString();
      else
        Entity.InsertName = string.Empty;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.InsertName, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.InsertName).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.InsertDate).GetAsDate();
      else
        Entity.InsertDate = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.InsertDate, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.InsertDate).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateName).GetAsString();
      else
        Entity.UpdateName = string.Empty;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.UpdateName, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateName).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateDate).GetAsDate();
      else
        Entity.UpdateDate = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.UpdateDate, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateDate).Value);

      if (ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
      else
        Entity.ConcurrencyValue = 0;
      Entity.SetOriginalValueForProperty(MercScpIdReportPDSAValidator.ColumnNames.ConcurrencyValue, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ConcurrencyValue).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>MercScpIdReportPDSA</returns>
    public MercScpIdReportPDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new MercScpIdReportPDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement, or SELECT stored procedure based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.MercScpIdReportPDSA_SelectAll");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ListBox:
          if (UseStoredProcs)
          {
            sb.Append("GCS.MercScpIdReportPDSA_SelectListBox");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.PrimaryKey:
          if (UseStoredProcs)
          {
            sb.Append("GCS.MercScpIdReportPDSA_SelectByPK");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.Search:
          if (UseStoredProcs)
          {
            sb.Append("GCS.MercScpIdReportPDSA_SelectSearch");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByMacAddress:
          if (UseStoredProcs)
          {
            sb.Append("GCS.MercScpIdReportPDSA_ByMacAddress");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByModelAndSerialNumber:
          if (UseStoredProcs)
          {
            sb.Append("GCS.MercScpIdReportPDSA_SelectByModelAndSerialNumber");
          }
          else
          {
            
          }
          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region InsertSQL Method
    /// <summary>
    /// Builds the SQL for the INSERT statement, or INSERT stored procedure based on the InsertFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string InsertSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (InsertFilter)
      {
        case InsertFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.MercScpIdReportPDSA_Insert");
          }
          else
          {
            
          }
            
          break;
        
        case InsertFilters.Custom:
          sb.Append(InsertCustom);
          
          break;
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region UpdateSQL Method
    /// <summary>
    /// Builds the SQL for the UPDATE statement, or UPDATE stored procedure based on the UpdateFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string UpdateSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (UpdateFilter)
      {
        case UpdateFilters.PrimaryKey:
          if (UseStoredProcs)
          {
            sb.Append("GCS.MercScpIdReportPDSA_Update");
          }
          else
          {
            
          }
          
          break;
        case UpdateFilters.UpdateConcurrency:
          if (UseStoredProcs)
          {
            sb.Append("GCS.MercScpIdReportPDSA_UpdateConcurrency");
          }
          else
          {
            
          }
          
          break;
        
        case UpdateFilters.Custom:
          sb.Append(UpdateCustom);
          
          break;
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region DeleteByPK Method
    /// <summary>
    /// Delete a record from the table based on the primary key value that is passed in.
    /// </summary>
    /// <param name="mercScpIdReportUid">The value of the primary key of the row to delete</param>
    /// <returns>int</returns>
    public int DeleteByPK(Guid mercScpIdReportUid)
    {
      DeleteFilter = DeleteFilters.DeleteByPK;
      Entity.MercScpIdReportUid = mercScpIdReportUid;      
      
      // If using Audit Tracking, need to load the record first
      if (UseAuditTracking)
        LoadByPK(mercScpIdReportUid);

      RowsAffected = Delete();

      return RowsAffected;
    }
    #endregion

    #region DeleteSQL Method
    /// <summary>
    /// Builds the SQL for the DELETE statement, or DELETE stored procedure. You can set the WhereFilter property to selectively delete rows from the table.
    /// </summary>
    /// <returns>string</returns>
    public override string DeleteSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (DeleteFilter)
      {
        case DeleteFilters.DeleteByPK:
          if (UseStoredProcs)
          {
            sb.Append("GCS.MercScpIdReportPDSA_DeleteByPK");
          }
          else
          {
            
          }
          
          break;

        case DeleteFilters.Custom:
          sb.Append(DeleteCustom);

          break;          
      }

      if(!UseStoredProcs)
      {
        sb.Append(WhereClauseSQL());
      }
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL, or the name of the stored procedure, that will count the number of rows.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.MercScpIdReportPDSA_RowCount");
          }
          else
          {
            
          }
          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      if(!UseStoredProcs)
      {
        sb.Append(WhereClauseSQL());
      }
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region LoadByPK Method
    /// <summary>
    /// Load a row of data in the Entity properties. Returns a value greater than 0 if it finds the record.
    /// </summary>
    /// <param name="mercScpIdReportUid">The value of the primary key of the row to load</param>
    /// <returns>Int32</returns>
    public int LoadByPK(Guid mercScpIdReportUid)
    {
      SelectFilter = SelectFilters.PrimaryKey;
      Entity.MercScpIdReportUid = mercScpIdReportUid;      

      // Load Data into Properties
      RowsAffected = Load();

      // Reset all Collection Properties
      ResetCollectionProperties();
      
      return RowsAffected;
    }
    #endregion
    
    
    #region Updated Method
    /// <summary>
    /// This method is called after a successful update
    /// </summary>
    protected override void Updated()
    {
      Entity.ConcurrencyValue += Convert.ToInt16(1);
    }
    #endregion

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
         
          break;
        case SelectFilters.ListBox:
         
          break;
        case SelectFilters.PrimaryKey:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@MercScpIdReportUid", DbType.Guid, Entity.MercScpIdReportUid));
         
          break;
        case SelectFilters.Search:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@MacAddress", DbType.String, Entity.MacAddress));
         
          break;
        case SelectFilters.ByMacAddress:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@MacAddress", DbType.String, Entity.MacAddress));
         
          break;
        case SelectFilters.ByModelAndSerialNumber:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DeviceVersion", DbType.String, Entity.DeviceVersion));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SerialNumber", DbType.String, Entity.SerialNumber));
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion


    #region SetModificationCommandParameters Method
    /// <summary>
    /// Called to build any parameters prior to submitting an INSERT, UPDATE, or DELETE statement.
    /// </summary>
    protected override void SetModificationCommandParameters()
    {    
      switch (DataModificationAction)
      {
        case PDSADataModificationState.Delete:
          switch (DeleteFilter)
          {
            case DeleteFilters.DeleteByPK:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@MercScpIdReportUid", DbType.Guid, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MercScpIdReportUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
          }

          break;

        case PDSADataModificationState.Insert:
          if (PrimaryKeyType == PDSAPrimaryKeyType.PDSA)
          {
            if (PrimaryKeyGenerate == true)
            {
              //  Get New Primary Key from pdsaTableIds
              PrimaryKeySet(PKGetFromPDSATableIds(PDSALoginName));
            }
          }

          switch (InsertFilter)
          {
            case InsertFilters.All:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@MercScpIdReportUid", DbType.Guid, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MercScpIdReportUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@MacAddress", DbType.String, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MacAddress).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DriverSpcId", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DriverSpcId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ScpId", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ScpId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SerialNumber", DbType.String, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SerialNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DeviceId", DbType.String, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DeviceVersion", DbType.String, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceVersion).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SoftwareRevisionMajor", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMajor).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SoftwareRevisionMinor", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMinor).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CumulativeBuildCount", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CumulativeBuildCount).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@NeedsConfiguration", DbType.Boolean, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.NeedsConfiguration).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@TlsStatus", DbType.String, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.TlsStatus).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@OemCode", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.OemCode).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CurrentOperatingMode", DbType.Int16, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentOperatingMode).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@Input1State", DbType.Int16, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input1State).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@Input2State", DbType.Int16, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input2State).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@Input3State", DbType.Int16, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input3State).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@BioDb1Active", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Active).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@BioDb1Max", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Max).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@BioDb2Active", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Active).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@BioDb2Max", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Max).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AssetDbActive", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbActive).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AssetDbMax", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbMax).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@FirmwareAdvisory", DbType.String, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.FirmwareAdvisory).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DipSwitchCurrent", DbType.Int16, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchCurrent).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DipSwitchPowerUp", DbType.Int16, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchPowerUp).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DbActiveRecords", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbActiveRecords).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DbMaxSize", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbMaxSize).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CurrentClock", DbType.Int64, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentClock).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@RamFree", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamFree).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@RamSize", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamSize).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InsertName", DbType.String, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.InsertName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InsertDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.InsertDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateName", DbType.String, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
          }

          break;

        case PDSADataModificationState.Update:
          switch (UpdateFilter)
          {
            case UpdateFilters.PrimaryKey:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@MercScpIdReportUid", DbType.Guid, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MercScpIdReportUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@MacAddress", DbType.String, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MacAddress).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DriverSpcId", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DriverSpcId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ScpId", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ScpId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SerialNumber", DbType.String, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SerialNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DeviceId", DbType.String, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DeviceVersion", DbType.String, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DeviceVersion).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SoftwareRevisionMajor", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMajor).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SoftwareRevisionMinor", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.SoftwareRevisionMinor).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CumulativeBuildCount", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CumulativeBuildCount).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@NeedsConfiguration", DbType.Boolean, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.NeedsConfiguration).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@TlsStatus", DbType.String, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.TlsStatus).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@OemCode", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.OemCode).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CurrentOperatingMode", DbType.Int16, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentOperatingMode).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@Input1State", DbType.Int16, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input1State).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@Input2State", DbType.Int16, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input2State).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@Input3State", DbType.Int16, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.Input3State).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@BioDb1Active", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Active).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@BioDb1Max", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb1Max).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@BioDb2Active", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Active).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@BioDb2Max", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.BioDb2Max).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AssetDbActive", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbActive).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AssetDbMax", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.AssetDbMax).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@FirmwareAdvisory", DbType.String, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.FirmwareAdvisory).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DipSwitchCurrent", DbType.Int16, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchCurrent).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DipSwitchPowerUp", DbType.Int16, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DipSwitchPowerUp).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DbActiveRecords", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbActiveRecords).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DbMaxSize", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.DbMaxSize).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CurrentClock", DbType.Int64, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.CurrentClock).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@RamFree", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamFree).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@RamSize", DbType.Int32, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.RamSize).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateName", DbType.String, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.UpdateDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
            case UpdateFilters.UpdateConcurrency:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@MercScpIdReportUid", DbType.Guid, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.MercScpIdReportUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(MercScpIdReportPDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
          }
          break;
      }
    }
    #endregion
  }
}
