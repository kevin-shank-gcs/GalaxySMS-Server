using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
    /// <summary>
    /// Used to Select data from the AccessPortalGalaxyHardwareAddressViewPDSA view.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// You should NOT modify this class as it is intended to be re-generated.
    /// </summary>
    public partial class AccessPortalGalaxyHardwareAddressViewPDSAData : PDSADataClassReadOnly
    {
        #region Constructors
        /// <summary>
        /// Constructor for the AccessPortalGalaxyHardwareAddressViewPDSAData class
        /// </summary>
        public AccessPortalGalaxyHardwareAddressViewPDSAData() : base()
        {
            Entity = new AccessPortalGalaxyHardwareAddressViewPDSA();
            ValidatorObject = new AccessPortalGalaxyHardwareAddressViewPDSAValidator(Entity);

            Init();
        }

        /// <summary>
        /// Constructor for the AccessPortalGalaxyHardwareAddressViewPDSAData class
        /// </summary>
        /// <param name="dataProvider">An instance of a PDSADataProvider</param>
        /// <param name="entity">An instance of a AccessPortalGalaxyHardwareAddressViewPDSA</param>
        public AccessPortalGalaxyHardwareAddressViewPDSAData(PDSADataProvider dataProvider,
          AccessPortalGalaxyHardwareAddressViewPDSA entity)
          : base(dataProvider)
        {
            Entity = entity;
            ValidatorObject = new AccessPortalGalaxyHardwareAddressViewPDSAValidator(Entity);

            Init();
        }

        /// <summary>
        /// Constructor for the AccessPortalGalaxyHardwareAddressViewPDSAData class
        /// </summary>
        /// <param name="dataProvider">An instance of a PDSADataProvider</param>
        /// <param name="entity">An instance of a AccessPortalGalaxyHardwareAddressViewPDSA</param>
        /// <param name="validator">An instance of a AccessPortalGalaxyHardwareAddressViewPDSAValidator</param>
        public AccessPortalGalaxyHardwareAddressViewPDSAData(PDSADataProvider dataProvider,
          AccessPortalGalaxyHardwareAddressViewPDSA entity, AccessPortalGalaxyHardwareAddressViewPDSAValidator validator)
          : base(dataProvider, entity, validator)
        {
            Entity = entity;
            ValidatorObject = validator;

            Init();
        }
        #endregion

        #region Filter Properties and Enumerations
        /// <summary>
        /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
        /// </summary>
        public enum SelectFilters
        {

            /// <summary>
            /// 'AccessPortalUid' SelectFilter
            /// </summary>
            AccessPortalUid
          ,
            /// <summary>
            /// 'All' SelectFilter
            /// </summary>
            All
          ,
            /// <summary>
            /// 'Search' SelectFilter
            /// </summary>
            Search
          ,
            /// <summary>
            /// A Custom SelectFilter
            /// </summary>
            Custom
        }

        /// <summary>
        /// Enumeration for selecting a WHERE statement when calling the Load, GetDataSet or GetDataReader method.
        /// </summary>
        public enum WhereFilters
        {
            /// <summary>
            /// No WhereFilter Selected
            /// </summary>
            None,
            /// <summary>
            /// A Custom WhereFilter
            /// </summary>
            Custom
          ,
            /// <summary>
            /// 'AccessPortalUid' WhereFilter
            /// </summary>
            AccessPortalUid
          ,
            /// <summary>
            /// 'ClusterUid' WhereFilter
            /// </summary>
            ClusterUid
          ,
            /// <summary>
            /// 'GalaxyHardwareModuleUid' WhereFilter
            /// </summary>
            GalaxyHardwareModuleUid
          ,
            /// <summary>
            /// 'GalaxyInterfaceBoardSectionNodeUid' WhereFilter
            /// </summary>
            GalaxyInterfaceBoardSectionNodeUid
          ,
            /// <summary>
            /// 'GalaxyInterfaceBoardSectionUid' WhereFilter
            /// </summary>
            GalaxyInterfaceBoardSectionUid
          ,
            /// <summary>
            /// 'GalaxyInterfaceBoardUid' WhereFilter
            /// </summary>
            GalaxyInterfaceBoardUid
          ,
            /// <summary>
            /// 'GalaxyPanelUid' WhereFilter
            /// </summary>
            GalaxyPanelUid
          ,
            /// <summary>
            /// 'LikePortalName' WhereFilter
            /// </summary>
            LikePortalName
          ,
            /// <summary>
            /// 'PortalName' WhereFilter
            /// </summary>
            PortalName
        }

        /// <summary>
        /// Enumeration for selecting an ORDER BY statement when calling the Load, GetDataSet or GetDataReader method.
        /// </summary>
        public enum OrderByFilters
        {
            /// <summary>
            /// No OrderByFilter Selected
            /// </summary>
            None,
            /// <summary>
            /// A Custom OrderByFilter
            /// </summary>
            Custom
          ,
            /// <summary>
            /// 'NodeNumber' OrderByFilter
            /// </summary>
            NodeNumber
          ,
            /// <summary>
            /// 'PhysicalAddress' OrderByFilter
            /// </summary>
            PhysicalAddress
          ,
            /// <summary>
            /// 'PortalName' OrderByFilter
            /// </summary>
            PortalName
        }

        /// <summary>
        /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
        /// </summary>
        public enum RowCountFilters
        {

            /// <summary>
            /// 'All' RowCountFilter
            /// </summary>
            All
          ,
            /// <summary>
            /// A Custom OrderByFilter
            /// </summary>
            Custom
        }

        /// <summary>
        /// Get/Set a Dynamic SQL to execute to return data.
        /// </summary>
        public SelectFilters SelectFilter { get; set; }
        /// <summary>
        /// Get/Set a WHERE clause to be used with a SELECT statement when using Dynamic SQL.
        /// </summary>
        public WhereFilters WhereFilter { get; set; }
        /// <summary>
        /// Get/Set a ORDER BY clause to be used with a SELECT statement when using Dynamic SQL.
        /// </summary>
        public OrderByFilters OrderByFilter { get; set; }
        /// <summary>
        /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
        /// </summary>
        public RowCountFilters RowCountFilter { get; set; }
        #endregion

        #region Public Property Entity Class
        private AccessPortalGalaxyHardwareAddressViewPDSA _EntityObject = null;

        /// <summary>
        /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
        /// </summary>
        public AccessPortalGalaxyHardwareAddressViewPDSA Entity
        {
            get { return _EntityObject; }
            set
            {
                _EntityObject = value;
                base.EntityObject = _EntityObject;
            }
        }
        #endregion

        #region Init Method
        /// <summary>
        /// Initializes this class to a valid start state.
        /// </summary>
        protected override void Init()
        {
            ClassName = "AccessPortalGalaxyHardwareAddressViewPDSAData";
            DBObjectName = "GCS.AccessPortalGalaxyHardwareAddressView";
            SchemaName = "GCS";
            base.EntityObject = Entity;
            base.ValidatorObject = ValidatorObject;

            // Set Reference to ValidatorObject Properties Collection
            AllColumns = ValidatorObject.Properties;

            // Set any Initial Starting values for data columns
            InitDataColumns();
        }
        #endregion

        #region InitDataColumns Method
        /// <summary>
        /// Initializes all of the Data Columns with valid data for each field in the table.
        /// </summary>
        protected override void InitDataColumns()
        {
            PDSAProperty prop;

            // Fill in Column Properties
            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.PortalName);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
            //prop.ValueForNull = string.Empty;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.AccessPortalUid);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
            //prop.ValueForNull = Guid.Empty;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterNumber);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
            //prop.ValueForNull = 0;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterGroupId);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
            //prop.ValueForNull = string.Empty;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeUid);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
            //prop.ValueForNull = Guid.Empty;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeCode);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
            //prop.ValueForNull = string.Empty;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelModelUid);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
            //prop.ValueForNull = Guid.Empty;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelTypeCode);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
            //prop.ValueForNull = string.Empty;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.PanelNumber);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
            //prop.ValueForNull = 0;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.BoardNumber);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
            //prop.ValueForNull = 0;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeUid);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
            //prop.ValueForNull = Guid.Empty;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeCode);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
            //prop.ValueForNull = 0;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardModel);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
            //prop.ValueForNull = string.Empty;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.SectionNumber);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
            //prop.ValueForNull = 0;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeUid);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
            //prop.ValueForNull = Guid.Empty;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeCode);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
            //prop.ValueForNull = 0;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleNumber);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
            //prop.ValueForNull = 0;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
            //prop.ValueForNull = Guid.Empty;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleTypeCode);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
            //prop.ValueForNull = 0;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.NodeNumber);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
            //prop.ValueForNull = 0;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.DoorNumber);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
            //prop.ValueForNull = 0;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterUid);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
            //prop.ValueForNull = Guid.Empty;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelUid);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
            //prop.ValueForNull = Guid.Empty;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
            //prop.ValueForNull = Guid.Empty;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
            //prop.ValueForNull = Guid.Empty;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleUid);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
            //prop.ValueForNull = Guid.Empty;

            prop = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid);
            prop.IsInsertable = false;
            prop.IsUpdatable = false;
            prop.IsPrimaryKey = false;
            prop.IncludeInAuditTracking = true;
            prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
            //prop.ValueForNull = Guid.Empty;

        }
        #endregion

        #region EntityDataToColumnCollection Method
        /// <summary>
        /// Moves the data from the Entity class into the Columns collection
        /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
        /// </summary>
        protected override void EntityDataToColumnCollection()
        {
            // Move all Entity Values into Properties Collection
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.PortalName).Value = Entity.PortalName;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.PortalName).SetAsNull == true)
                Entity.PortalName = string.Empty;
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.AccessPortalUid).Value = Entity.AccessPortalUid;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.AccessPortalUid).SetAsNull == true)
                Entity.AccessPortalUid = Guid.NewGuid();
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterNumber).Value = Entity.ClusterNumber;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterNumber).SetAsNull == true)
                Entity.ClusterNumber = 0;
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterGroupId).Value = Entity.ClusterGroupId;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterGroupId).SetAsNull == true)
                Entity.ClusterGroupId = 0;
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeUid).Value = Entity.ClusterTypeUid;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeUid).SetAsNull == true)
                Entity.ClusterTypeUid = Guid.NewGuid();
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeCode).Value = Entity.ClusterTypeCode;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeCode).SetAsNull == true)
                Entity.ClusterTypeCode = string.Empty;
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelModelUid).Value = Entity.GalaxyPanelModelUid;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelModelUid).SetAsNull == true)
                Entity.GalaxyPanelModelUid = Guid.NewGuid();
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelTypeCode).Value = Entity.GalaxyPanelTypeCode;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelTypeCode).SetAsNull == true)
                Entity.GalaxyPanelTypeCode = string.Empty;
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.PanelNumber).Value = Entity.PanelNumber;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.PanelNumber).SetAsNull == true)
                Entity.PanelNumber = 0;
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.BoardNumber).Value = Entity.BoardNumber;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.BoardNumber).SetAsNull == true)
                Entity.BoardNumber = 0;
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeUid).Value = Entity.InterfaceBoardTypeUid;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeUid).SetAsNull == true)
                Entity.InterfaceBoardTypeUid = Guid.NewGuid();
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeCode).Value = Entity.InterfaceBoardTypeCode;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeCode).SetAsNull == true)
                Entity.InterfaceBoardTypeCode = 0;
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardModel).Value = Entity.InterfaceBoardModel;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardModel).SetAsNull == true)
                Entity.InterfaceBoardModel = string.Empty;
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.SectionNumber).Value = Entity.SectionNumber;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.SectionNumber).SetAsNull == true)
                Entity.SectionNumber = 0;
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeUid).Value = Entity.InterfaceBoardSectionModeUid;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeUid).SetAsNull == true)
                Entity.InterfaceBoardSectionModeUid = Guid.NewGuid();
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeCode).Value = Entity.InterfaceBoardSectionModeCode;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeCode).SetAsNull == true)
                Entity.InterfaceBoardSectionModeCode = 0;
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleNumber).Value = Entity.ModuleNumber;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleNumber).SetAsNull == true)
                Entity.ModuleNumber = 0;
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid).Value = Entity.GalaxyHardwareModuleTypeUid;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid).SetAsNull == true)
                Entity.GalaxyHardwareModuleTypeUid = Guid.NewGuid();
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleTypeCode).Value = Entity.ModuleTypeCode;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleTypeCode).SetAsNull == true)
                Entity.ModuleTypeCode = 0;
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.NodeNumber).Value = Entity.NodeNumber;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.NodeNumber).SetAsNull == true)
                Entity.NodeNumber = 0;
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.DoorNumber).Value = Entity.DoorNumber;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.DoorNumber).SetAsNull == true)
                Entity.DoorNumber = 0;
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterUid).Value = Entity.ClusterUid;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterUid).SetAsNull == true)
                Entity.ClusterUid = Guid.NewGuid();
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelUid).Value = Entity.GalaxyPanelUid;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelUid).SetAsNull == true)
                Entity.GalaxyPanelUid = Guid.NewGuid();
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).Value = Entity.GalaxyInterfaceBoardUid;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).SetAsNull == true)
                Entity.GalaxyInterfaceBoardUid = Guid.NewGuid();
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).Value = Entity.GalaxyInterfaceBoardSectionUid;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).SetAsNull == true)
                Entity.GalaxyInterfaceBoardSectionUid = Guid.NewGuid();
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).Value = Entity.GalaxyHardwareModuleUid;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).SetAsNull == true)
                Entity.GalaxyHardwareModuleUid = Guid.NewGuid();
            ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).Value = Entity.GalaxyInterfaceBoardSectionNodeUid;
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).SetAsNull == true)
                Entity.GalaxyInterfaceBoardSectionNodeUid = Guid.NewGuid();
        }
        #endregion

        #region ColumnCollectionToEntityData Method
        /// <summary>
        /// Moves the data from the Columns collection into the Entity class.
        /// This is called whenever you are reading data in from a database.
        ///   For example, from BuildCollection, Load, LoadByPK, etc.
        /// </summary>
        protected override void ColumnCollectionToEntityData()
        {
            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.PortalName).IsNull == false)
                Entity.PortalName = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.PortalName).GetAsString();
            else
                Entity.PortalName = string.Empty;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.PortalName, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.PortalName).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.AccessPortalUid).IsNull == false)
                Entity.AccessPortalUid = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.AccessPortalUid).GetAsGuid();
            else
                Entity.AccessPortalUid = Guid.Empty;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.AccessPortalUid, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.AccessPortalUid).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterNumber).IsNull == false)
                Entity.ClusterNumber = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterNumber).GetAsInteger();
            else
                Entity.ClusterNumber = 0;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterNumber, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterNumber).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterGroupId).IsNull == false)
                Entity.ClusterGroupId = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterGroupId).GetAsInteger();
            else
                Entity.ClusterGroupId = 0;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterGroupId, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterGroupId).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeUid).IsNull == false)
                Entity.ClusterTypeUid = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeUid).GetAsGuid();
            else
                Entity.ClusterTypeUid = Guid.Empty;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeUid, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeUid).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeCode).IsNull == false)
                Entity.ClusterTypeCode = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeCode).GetAsString();
            else
                Entity.ClusterTypeCode = string.Empty;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeCode, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterTypeCode).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelModelUid).IsNull == false)
                Entity.GalaxyPanelModelUid = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelModelUid).GetAsGuid();
            else
                Entity.GalaxyPanelModelUid = Guid.Empty;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelModelUid, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelModelUid).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelTypeCode).IsNull == false)
                Entity.GalaxyPanelTypeCode = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelTypeCode).GetAsString();
            else
                Entity.GalaxyPanelTypeCode = string.Empty;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelTypeCode, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelTypeCode).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.PanelNumber).IsNull == false)
                Entity.PanelNumber = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.PanelNumber).GetAsInteger();
            else
                Entity.PanelNumber = 0;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.PanelNumber, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.PanelNumber).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.BoardNumber).IsNull == false)
                Entity.BoardNumber = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.BoardNumber).GetAsShort();
            else
                Entity.BoardNumber = 0;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.BoardNumber, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.BoardNumber).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeUid).IsNull == false)
                Entity.InterfaceBoardTypeUid = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeUid).GetAsGuid();
            else
                Entity.InterfaceBoardTypeUid = Guid.Empty;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeUid, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeUid).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeCode).IsNull == false)
                Entity.InterfaceBoardTypeCode = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeCode).GetAsShort();
            else
                Entity.InterfaceBoardTypeCode = 0;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeCode, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardTypeCode).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardModel).IsNull == false)
                Entity.InterfaceBoardModel = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardModel).GetAsString();
            else
                Entity.InterfaceBoardModel = string.Empty;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardModel, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardModel).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.SectionNumber).IsNull == false)
                Entity.SectionNumber = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.SectionNumber).GetAsShort();
            else
                Entity.SectionNumber = 0;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.SectionNumber, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.SectionNumber).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeUid).IsNull == false)
                Entity.InterfaceBoardSectionModeUid = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeUid).GetAsGuid();
            else
                Entity.InterfaceBoardSectionModeUid = Guid.Empty;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeUid, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeUid).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeCode).IsNull == false)
                Entity.InterfaceBoardSectionModeCode = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeCode).GetAsShort();
            else
                Entity.InterfaceBoardSectionModeCode = 0;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeCode, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.InterfaceBoardSectionModeCode).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleNumber).IsNull == false)
                Entity.ModuleNumber = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleNumber).GetAsShort();
            else
                Entity.ModuleNumber = 0;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleNumber, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleNumber).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid).IsNull == false)
                Entity.GalaxyHardwareModuleTypeUid = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid).GetAsGuid();
            else
                Entity.GalaxyHardwareModuleTypeUid = Guid.Empty;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleTypeCode).IsNull == false)
                Entity.ModuleTypeCode = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleTypeCode).GetAsShort();
            else
                Entity.ModuleTypeCode = 0;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleTypeCode, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ModuleTypeCode).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.NodeNumber).IsNull == false)
                Entity.NodeNumber = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.NodeNumber).GetAsShort();
            else
                Entity.NodeNumber = 0;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.NodeNumber, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.NodeNumber).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.DoorNumber).IsNull == false)
                Entity.DoorNumber = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.DoorNumber).GetAsShort();
            else
                Entity.DoorNumber = 0;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.DoorNumber, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.DoorNumber).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterUid).IsNull == false)
                Entity.ClusterUid = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterUid).GetAsGuid();
            else
                Entity.ClusterUid = Guid.Empty;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterUid, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.ClusterUid).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelUid).IsNull == false)
                Entity.GalaxyPanelUid = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelUid).GetAsGuid();
            else
                Entity.GalaxyPanelUid = Guid.Empty;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelUid, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyPanelUid).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).IsNull == false)
                Entity.GalaxyInterfaceBoardUid = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).GetAsGuid();
            else
                Entity.GalaxyInterfaceBoardUid = Guid.Empty;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).IsNull == false)
                Entity.GalaxyInterfaceBoardSectionUid = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).GetAsGuid();
            else
                Entity.GalaxyInterfaceBoardSectionUid = Guid.Empty;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).IsNull == false)
                Entity.GalaxyHardwareModuleUid = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).GetAsGuid();
            else
                Entity.GalaxyHardwareModuleUid = Guid.Empty;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleUid, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).Value);

            if (ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).IsNull == false)
                Entity.GalaxyInterfaceBoardSectionNodeUid = ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).GetAsGuid();
            else
                Entity.GalaxyInterfaceBoardSectionNodeUid = Guid.Empty;
            Entity.SetOriginalValueForProperty(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid, ValidatorObject.Properties.GetByName(AccessPortalGalaxyHardwareAddressViewPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).Value);

        }
        #endregion

        #region CreateEntityFromDataRow Method
        /// <summary>
        /// Creates an Entity object from a DataRow object.
        /// </summary>
        /// <param name="dr">DataRow object with all fields from the table in it.</param>
        /// <returns>AccessPortalGalaxyHardwareAddressViewPDSA</returns>
        public AccessPortalGalaxyHardwareAddressViewPDSA CreateEntityFromDataRow(DataRow dr)
        {
            // Create new Entity Object
            Entity = new AccessPortalGalaxyHardwareAddressViewPDSA();

            // Move all data into Properties collection
            // This method calls the ColumnCollectionToEntityData method
            DataRowToProperties(dr);
            Entity.IsDirty = false;

            return Entity;
        }
        #endregion

        #region SelectSQL Method
        /// <summary>
        /// Builds the SQL for the SELECT statement based on the SelectFilter property.
        /// </summary>
        /// <returns>string</returns>
        public override string SelectSQL()
        {
            StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

            switch (SelectFilter)
            {
                case SelectFilters.AccessPortalUid:
                    sb.Append(" SELECT ");
                    sb.Append(" AccessPortalUid ");
                    sb.Append(" FROM GCS.AccessPortalGalaxyHardwareAddressView");


                    break;
                case SelectFilters.All:


                    break;
                case SelectFilters.Search:
                    sb.Append(" SELECT ");
                    sb.Append(" PortalName, AccessPortalUid, ClusterNumber, ClusterGroupId, ClusterTypeUid, ClusterTypeCode, GalaxyPanelModelUid, GalaxyPanelTypeCode, PanelNumber, BoardNumber, InterfaceBoardTypeUid, InterfaceBoardTypeCode, InterfaceBoardModel, SectionNumber, InterfaceBoardSectionModeUid, InterfaceBoardSectionModeCode, ModuleNumber, GalaxyHardwareModuleTypeUid, ModuleTypeCode, NodeNumber, DoorNumber, ClusterUid, GalaxyPanelUid, GalaxyInterfaceBoardUid, GalaxyInterfaceBoardSectionUid, GalaxyHardwareModuleUid, GalaxyInterfaceBoardSectionNodeUid ");
                    sb.Append(" FROM GCS.AccessPortalGalaxyHardwareAddressView");


                    break;

                case SelectFilters.Custom:
                    sb.Append(SelectCustom);

                    break;
            }

            SQL = sb.ToString();

            return SQL;
        }
        #endregion

        #region RowCountSQL Method
        /// <summary>
        /// Builds the SELECT Count(*) SQL that will count the number of rows returned from this view.
        /// </summary>
        /// <returns>string</returns>
        public override string RowCountSQL()
        {
            StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

            switch (RowCountFilter)
            {
                case RowCountFilters.All:


                    break;

                case RowCountFilters.Custom:
                    sb.Append(RowCountCustom);

                    break;
            }

            sb.Append(WhereClauseSQL());

            SQL = sb.ToString();

            return SQL;
        }
        #endregion

        #region WhereClauseSQL Method
        /// <summary>
        /// Builds the WHERE clause to be used in combination with a SELECT statement.
        /// </summary>
        /// <returns>string</returns>
        public override string WhereClauseSQL()
        {
            StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

            switch (WhereFilter)
            {
                case WhereFilters.Custom:
                    sb.Append(" " + WhereCustom);

                    break;

                case WhereFilters.None:
                    //  Do nothing

                    break;

                case WhereFilters.AccessPortalUid:
                    sb.Append(" WHERE ");
                    sb.Append(" AccessPortalUid = '");
                    sb.Append(Entity.AccessPortalUid);
                    sb.Append("'");
                    break;

                case WhereFilters.ClusterUid:
                    sb.Append(" WHERE ");
                    sb.Append(" ClusterUid = '");
                    sb.Append(Entity.ClusterUid);
                    sb.Append("'");
                    break;

                case WhereFilters.GalaxyHardwareModuleUid:
                    sb.Append(" WHERE ");
                    sb.Append(" GalaxyHardwareModuleUid = '");
                    sb.Append(Entity.GalaxyHardwareModuleUid);
                    sb.Append("'");
                    break;

                case WhereFilters.GalaxyInterfaceBoardSectionNodeUid:
                    sb.Append(" WHERE ");
                    sb.Append(" GalaxyInterfaceBoardSectionNodeUid = '");
                    sb.Append(Entity.GalaxyInterfaceBoardSectionNodeUid);
                    sb.Append("'");
                    break;

                case WhereFilters.GalaxyInterfaceBoardSectionUid:
                    sb.Append(" WHERE ");
                    sb.Append(" GalaxyInterfaceBoardSectionUid = '");
                    sb.Append(Entity.GalaxyInterfaceBoardSectionUid);
                    sb.Append("'");
                    break;

                case WhereFilters.GalaxyInterfaceBoardUid:
                    sb.Append(" WHERE ");
                    sb.Append(" GalaxyInterfaceBoardUid = '");
                    sb.Append(Entity.GalaxyInterfaceBoardUid);
                    sb.Append("'");
                    break;

                case WhereFilters.GalaxyPanelUid:
                    sb.Append(" WHERE ");
                    sb.Append(" GalaxyPanelUid = '");
                    sb.Append(Entity.GalaxyPanelUid);
                    sb.Append("'");
                    break;

                case WhereFilters.LikePortalName:
                    sb.Append(" WHERE ");
                    sb.Append(" PortalName LIKE '");
                    sb.Append(Entity.PortalName);
                    sb.Append("%'");
                    break;

                case WhereFilters.PortalName:
                    sb.Append(" WHERE ");
                    sb.Append(" PortalName = '");
                    sb.Append(Entity.PortalName);
                    sb.Append("'");
                    break;
            }

            return sb.ToString();
        }
        #endregion

        #region SelectFillInParameters Method
        /// <summary>
        /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
        /// </summary>
        protected override void SelectFillInParameters()
        {
            switch (SelectFilter)
            {
                case SelectFilters.AccessPortalUid:

                    break;
                case SelectFilters.All:

                    break;
                case SelectFilters.Search:

                    break;
            }

            // Add on paging parameters
            if (UsePaging)
            {
                PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
            }
        }
        #endregion

        #region WhereClauseFillInParameters Method
        /// <summary>
        /// Builds the CommandObject.Parameters collection for any WHERE clause parameters.
        /// </summary>
        protected override void WhereClauseFillInParameters()
        {
            switch (WhereFilter)
            {
                case WhereFilters.AccessPortalUid:

                    break;
                case WhereFilters.ClusterUid:

                    break;
                case WhereFilters.GalaxyHardwareModuleUid:

                    break;
                case WhereFilters.GalaxyInterfaceBoardSectionNodeUid:

                    break;
                case WhereFilters.GalaxyInterfaceBoardSectionUid:

                    break;
                case WhereFilters.GalaxyInterfaceBoardUid:

                    break;
                case WhereFilters.GalaxyPanelUid:

                    break;
                case WhereFilters.LikePortalName:

                    break;
                case WhereFilters.PortalName:

                    break;
            }
        }
        #endregion

        #region OrderByClauseSQL Method
        /// <summary>
        /// Builds the ORDER BY clause to be used in combination with a SELECT statement.
        /// </summary>
        /// <returns>string</returns>
        public override string OrderByClauseSQL()
        {
            StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

            switch (OrderByFilter)
            {
                case OrderByFilters.None:
                    //  Do Nothing

                    break;

                case OrderByFilters.Custom:
                    sb.Append(" " + OrderByCustom);

                    break;

                case OrderByFilters.NodeNumber:
                    sb.Append(" ORDER BY NodeNumber");
                    break;
                case OrderByFilters.PhysicalAddress:
                    sb.Append("  ORDER BY ClusterNumber, PanelNumber, BoardNumber, SectionNumber, ModuleNumber, NodeNumber");

                    break;
                case OrderByFilters.PortalName:
                    sb.Append(" ORDER BY PortalName");


                    break;
            }

            return sb.ToString();
        }
        #endregion

        #region ColumnNames Class
        /// <summary>
        /// Contains static string properties that represent the name of each property in the AccessPortalGalaxyHardwareAddressViewPDSA class.
        /// This class is generated by the Haystack Code Generator for .NET.
        /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
        /// </summary>
        public class ColumnNames
        {
            /// <summary>
            /// Returns 'PortalName'
            /// </summary>
            public static string PortalName = "PortalName";
            /// <summary>
            /// Returns 'AccessPortalUid'
            /// </summary>
            public static string AccessPortalUid = "AccessPortalUid";
            /// <summary>
            /// Returns 'ClusterNumber'
            /// </summary>
            public static string ClusterNumber = "ClusterNumber";
            /// <summary>
            /// Returns 'ClusterGroupId'
            /// </summary>
            public static string ClusterGroupId = "ClusterGroupId";
            /// <summary>
            /// Returns 'ClusterTypeUid'
            /// </summary>
            public static string ClusterTypeUid = "ClusterTypeUid";
            /// <summary>
            /// Returns 'ClusterTypeCode'
            /// </summary>
            public static string ClusterTypeCode = "ClusterTypeCode";
            /// <summary>
            /// Returns 'GalaxyPanelModelUid'
            /// </summary>
            public static string GalaxyPanelModelUid = "GalaxyPanelModelUid";
            /// <summary>
            /// Returns 'GalaxyPanelTypeCode'
            /// </summary>
            public static string GalaxyPanelTypeCode = "GalaxyPanelTypeCode";
            /// <summary>
            /// Returns 'PanelNumber'
            /// </summary>
            public static string PanelNumber = "PanelNumber";
            /// <summary>
            /// Returns 'BoardNumber'
            /// </summary>
            public static string BoardNumber = "BoardNumber";
            /// <summary>
            /// Returns 'InterfaceBoardTypeUid'
            /// </summary>
            public static string InterfaceBoardTypeUid = "InterfaceBoardTypeUid";
            /// <summary>
            /// Returns 'InterfaceBoardTypeCode'
            /// </summary>
            public static string InterfaceBoardTypeCode = "InterfaceBoardTypeCode";
            /// <summary>
            /// Returns 'InterfaceBoardModel'
            /// </summary>
            public static string InterfaceBoardModel = "InterfaceBoardModel";
            /// <summary>
            /// Returns 'SectionNumber'
            /// </summary>
            public static string SectionNumber = "SectionNumber";
            /// <summary>
            /// Returns 'InterfaceBoardSectionModeUid'
            /// </summary>
            public static string InterfaceBoardSectionModeUid = "InterfaceBoardSectionModeUid";
            /// <summary>
            /// Returns 'InterfaceBoardSectionModeCode'
            /// </summary>
            public static string InterfaceBoardSectionModeCode = "InterfaceBoardSectionModeCode";
            /// <summary>
            /// Returns 'ModuleNumber'
            /// </summary>
            public static string ModuleNumber = "ModuleNumber";
            /// <summary>
            /// Returns 'GalaxyHardwareModuleTypeUid'
            /// </summary>
            public static string GalaxyHardwareModuleTypeUid = "GalaxyHardwareModuleTypeUid";
            /// <summary>
            /// Returns 'ModuleTypeCode'
            /// </summary>
            public static string ModuleTypeCode = "ModuleTypeCode";
            /// <summary>
            /// Returns 'NodeNumber'
            /// </summary>
            public static string NodeNumber = "NodeNumber";
            /// <summary>
            /// Returns 'DoorNumber'
            /// </summary>
            public static string DoorNumber = "DoorNumber";
            /// <summary>
            /// Returns 'ClusterUid'
            /// </summary>
            public static string ClusterUid = "ClusterUid";
            /// <summary>
            /// Returns 'GalaxyPanelUid'
            /// </summary>
            public static string GalaxyPanelUid = "GalaxyPanelUid";
            /// <summary>
            /// Returns 'GalaxyInterfaceBoardUid'
            /// </summary>
            public static string GalaxyInterfaceBoardUid = "GalaxyInterfaceBoardUid";
            /// <summary>
            /// Returns 'GalaxyInterfaceBoardSectionUid'
            /// </summary>
            public static string GalaxyInterfaceBoardSectionUid = "GalaxyInterfaceBoardSectionUid";
            /// <summary>
            /// Returns 'GalaxyHardwareModuleUid'
            /// </summary>
            public static string GalaxyHardwareModuleUid = "GalaxyHardwareModuleUid";
            /// <summary>
            /// Returns 'GalaxyInterfaceBoardSectionNodeUid'
            /// </summary>
            public static string GalaxyInterfaceBoardSectionNodeUid = "GalaxyInterfaceBoardSectionNodeUid";
        }
        #endregion
    }
}
