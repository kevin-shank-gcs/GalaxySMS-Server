using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Select data from the ActivityHistoryViewPDSA view.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class ActivityHistoryViewPDSAData : PDSADataClassReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the ActivityHistoryViewPDSAData class
    /// </summary>
    public ActivityHistoryViewPDSAData() : base()
    {
      Entity = new ActivityHistoryViewPDSA();
      ValidatorObject = new ActivityHistoryViewPDSAValidator(Entity);

      Init();
    }
    
    /// <summary>
    /// Constructor for the ActivityHistoryViewPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a ActivityHistoryViewPDSA</param>
    public ActivityHistoryViewPDSAData(PDSADataProvider dataProvider,
      ActivityHistoryViewPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new ActivityHistoryViewPDSAValidator(Entity);

      Init();
    }
     
    /// <summary>
    /// Constructor for the ActivityHistoryViewPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a ActivityHistoryViewPDSA</param>
    /// <param name="validator">An instance of a ActivityHistoryViewPDSAValidator</param>
    public ActivityHistoryViewPDSAData(PDSADataProvider dataProvider,
      ActivityHistoryViewPDSA entity, ActivityHistoryViewPDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// A Custom SelectFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a WHERE statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum WhereFilters
    {
      /// <summary>
      /// No WhereFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom WhereFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'ActivityDateTime' WhereFilter
      /// </summary>
      ActivityDateTime
      ,
      /// <summary>
      /// 'CredentialUid' WhereFilter
      /// </summary>
      CredentialUid
      ,
      /// <summary>
      /// 'DeviceType' WhereFilter
      /// </summary>
      DeviceType
      ,
      /// <summary>
      /// 'DeviceUid' WhereFilter
      /// </summary>
      DeviceUid
      ,
      /// <summary>
      /// 'EventTypeUid' WhereFilter
      /// </summary>
      EventTypeUid
      ,
      /// <summary>
      /// 'PersonUid' WhereFilter
      /// </summary>
      PersonUid
      ,
      /// <summary>
      /// 'PK' WhereFilter
      /// </summary>
      PK
    }

    /// <summary>
    /// Enumeration for selecting an ORDER BY statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum OrderByFilters
    {
      /// <summary>
      /// No OrderByFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'ActivityDateTime' OrderByFilter
      /// </summary>
      ActivityDateTime
    }
    
    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }
    /// <summary>
    /// Get/Set a WHERE clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public WhereFilters WhereFilter { get; set; }
    /// <summary>
    /// Get/Set a ORDER BY clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public OrderByFilters OrderByFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Public Property Entity Class
        private ActivityHistoryViewPDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public ActivityHistoryViewPDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "ActivityHistoryViewPDSAData";
      DBObjectName = "GCS.ActivityHistoryView";
      SchemaName = "GCS";
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;
      
      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes all of the Data Columns with valid data for each field in the table.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ActivityDateTime);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.EventTypeMessage);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ForeColor);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.DeviceName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.SiteName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.EntityId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.DeviceUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.EventTypeUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.DeviceType);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.LastName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.FirstName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.CredentialDescription);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PersonUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.CredentialUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PK);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ClusterNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.TotalRecordCount);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ClusterName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PageNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ClusterGroupId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PageSize);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PanelNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.InputOutputGroupName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.InputOutputGroupNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.CpuNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.BoardNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.SectionNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ModuleNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.NodeNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ActivityDateTime).Value = Entity.ActivityDateTime;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ActivityDateTime).SetAsNull == true)
        Entity.ActivityDateTime = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.EventTypeMessage).Value = Entity.EventTypeMessage;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.EventTypeMessage).SetAsNull == true)
        Entity.EventTypeMessage = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ForeColor).Value = Entity.ForeColor;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ForeColor).SetAsNull == true)
        Entity.ForeColor = 0;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.DeviceName).Value = Entity.DeviceName;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.DeviceName).SetAsNull == true)
        Entity.DeviceName = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.SiteName).Value = Entity.SiteName;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.SiteName).SetAsNull == true)
        Entity.SiteName = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.EntityId).Value = Entity.EntityId;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.EntityId).SetAsNull == true)
        Entity.EntityId = Guid.Empty;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.DeviceUid).Value = Entity.DeviceUid;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.DeviceUid).SetAsNull == true)
        Entity.DeviceUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.EventTypeUid).Value = Entity.EventTypeUid;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.EventTypeUid).SetAsNull == true)
        Entity.EventTypeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.DeviceType).Value = Entity.DeviceType;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.DeviceType).SetAsNull == true)
        Entity.DeviceType = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.LastName).Value = Entity.LastName;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.LastName).SetAsNull == true)
        Entity.LastName = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.FirstName).Value = Entity.FirstName;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.FirstName).SetAsNull == true)
        Entity.FirstName = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.CredentialDescription).Value = Entity.CredentialDescription;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.CredentialDescription).SetAsNull == true)
        Entity.CredentialDescription = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PersonUid).Value = Entity.PersonUid;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PersonUid).SetAsNull == true)
        Entity.PersonUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.CredentialUid).Value = Entity.CredentialUid;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.CredentialUid).SetAsNull == true)
        Entity.CredentialUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PK).Value = Entity.PK;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PK).SetAsNull == true)
        Entity.PK = Guid.Empty;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ClusterNumber).Value = Entity.ClusterNumber;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ClusterNumber).SetAsNull == true)
        Entity.ClusterNumber = 0;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.TotalRecordCount).Value = Entity.TotalRecordCount;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.TotalRecordCount).SetAsNull == true)
        Entity.TotalRecordCount = 0;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ClusterName).Value = Entity.ClusterName;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ClusterName).SetAsNull == true)
        Entity.ClusterName = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PageNumber).Value = Entity.PageNumber;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PageNumber).SetAsNull == true)
        Entity.PageNumber = 0;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ClusterGroupId).Value = Entity.ClusterGroupId;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ClusterGroupId).SetAsNull == true)
        Entity.ClusterGroupId = 0;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PageSize).Value = Entity.PageSize;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PageSize).SetAsNull == true)
        Entity.PageSize = 0;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PanelNumber).Value = Entity.PanelNumber;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PanelNumber).SetAsNull == true)
        Entity.PanelNumber = 0;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.InputOutputGroupName).Value = Entity.InputOutputGroupName;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.InputOutputGroupName).SetAsNull == true)
        Entity.InputOutputGroupName = string.Empty;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.InputOutputGroupNumber).Value = Entity.InputOutputGroupNumber;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.InputOutputGroupNumber).SetAsNull == true)
        Entity.InputOutputGroupNumber = 0;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.CpuNumber).Value = Entity.CpuNumber;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.CpuNumber).SetAsNull == true)
        Entity.CpuNumber = 0;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.BoardNumber).Value = Entity.BoardNumber;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.BoardNumber).SetAsNull == true)
        Entity.BoardNumber = 0;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.SectionNumber).Value = Entity.SectionNumber;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.SectionNumber).SetAsNull == true)
        Entity.SectionNumber = 0;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ModuleNumber).Value = Entity.ModuleNumber;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ModuleNumber).SetAsNull == true)
        Entity.ModuleNumber = 0;
      ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.NodeNumber).Value = Entity.NodeNumber;
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.NodeNumber).SetAsNull == true)
        Entity.NodeNumber = 0;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ActivityDateTime).IsNull == false)
        Entity.ActivityDateTime = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ActivityDateTime).GetAsDate();
      else
        Entity.ActivityDateTime = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.ActivityDateTime, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ActivityDateTime).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.EventTypeMessage).IsNull == false)
        Entity.EventTypeMessage = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.EventTypeMessage).GetAsString();
      else
        Entity.EventTypeMessage = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.EventTypeMessage, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.EventTypeMessage).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ForeColor).IsNull == false)
        Entity.ForeColor = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ForeColor).GetAsInteger();
      else
        Entity.ForeColor = 0;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.ForeColor, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ForeColor).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.DeviceName).IsNull == false)
        Entity.DeviceName = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.DeviceName).GetAsString();
      else
        Entity.DeviceName = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.DeviceName, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.DeviceName).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.SiteName).IsNull == false)
        Entity.SiteName = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.SiteName).GetAsString();
      else
        Entity.SiteName = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.SiteName, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.SiteName).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.EntityId).IsNull == false)
        Entity.EntityId = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.EntityId).GetAsGuid();
      else
        Entity.EntityId = Guid.Empty;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.EntityId, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.EntityId).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.DeviceUid).IsNull == false)
        Entity.DeviceUid = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.DeviceUid).GetAsGuid();
      else
        Entity.DeviceUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.DeviceUid, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.DeviceUid).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.EventTypeUid).IsNull == false)
        Entity.EventTypeUid = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.EventTypeUid).GetAsGuid();
      else
        Entity.EventTypeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.EventTypeUid, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.EventTypeUid).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.DeviceType).IsNull == false)
        Entity.DeviceType = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.DeviceType).GetAsString();
      else
        Entity.DeviceType = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.DeviceType, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.DeviceType).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.LastName).IsNull == false)
        Entity.LastName = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.LastName).GetAsString();
      else
        Entity.LastName = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.LastName, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.LastName).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.FirstName).IsNull == false)
        Entity.FirstName = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.FirstName).GetAsString();
      else
        Entity.FirstName = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.FirstName, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.FirstName).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.CredentialDescription).IsNull == false)
        Entity.CredentialDescription = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.CredentialDescription).GetAsString();
      else
        Entity.CredentialDescription = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.CredentialDescription, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.CredentialDescription).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PersonUid).IsNull == false)
        Entity.PersonUid = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PersonUid).GetAsGuid();
      else
        Entity.PersonUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.PersonUid, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PersonUid).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.CredentialUid).IsNull == false)
        Entity.CredentialUid = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.CredentialUid).GetAsGuid();
      else
        Entity.CredentialUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.CredentialUid, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.CredentialUid).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PK).IsNull == false)
        Entity.PK = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PK).GetAsGuid();
      else
        Entity.PK = Guid.Empty;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.PK, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PK).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ClusterNumber).IsNull == false)
        Entity.ClusterNumber = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ClusterNumber).GetAsInteger();
      else
        Entity.ClusterNumber = 0;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.ClusterNumber, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ClusterNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.TotalRecordCount).IsNull == false)
        Entity.TotalRecordCount = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.TotalRecordCount).GetAsInteger();
      else
        Entity.TotalRecordCount = 0;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.TotalRecordCount, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.TotalRecordCount).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ClusterName).IsNull == false)
        Entity.ClusterName = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ClusterName).GetAsString();
      else
        Entity.ClusterName = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.ClusterName, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ClusterName).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PageNumber).IsNull == false)
        Entity.PageNumber = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PageNumber).GetAsInteger();
      else
        Entity.PageNumber = 0;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.PageNumber, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PageNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ClusterGroupId).IsNull == false)
        Entity.ClusterGroupId = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ClusterGroupId).GetAsInteger();
      else
        Entity.ClusterGroupId = 0;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.ClusterGroupId, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ClusterGroupId).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PageSize).IsNull == false)
        Entity.PageSize = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PageSize).GetAsInteger();
      else
        Entity.PageSize = 0;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.PageSize, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PageSize).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PanelNumber).IsNull == false)
        Entity.PanelNumber = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PanelNumber).GetAsInteger();
      else
        Entity.PanelNumber = 0;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.PanelNumber, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.PanelNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.InputOutputGroupName).IsNull == false)
        Entity.InputOutputGroupName = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.InputOutputGroupName).GetAsString();
      else
        Entity.InputOutputGroupName = string.Empty;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.InputOutputGroupName, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.InputOutputGroupName).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.InputOutputGroupNumber).IsNull == false)
        Entity.InputOutputGroupNumber = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.InputOutputGroupNumber).GetAsInteger();
      else
        Entity.InputOutputGroupNumber = 0;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.InputOutputGroupNumber, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.InputOutputGroupNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.CpuNumber).IsNull == false)
        Entity.CpuNumber = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.CpuNumber).GetAsShort();
      else
        Entity.CpuNumber = 0;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.CpuNumber, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.CpuNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.BoardNumber).IsNull == false)
        Entity.BoardNumber = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.BoardNumber).GetAsInteger();
      else
        Entity.BoardNumber = 0;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.BoardNumber, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.BoardNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.SectionNumber).IsNull == false)
        Entity.SectionNumber = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.SectionNumber).GetAsInteger();
      else
        Entity.SectionNumber = 0;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.SectionNumber, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.SectionNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ModuleNumber).IsNull == false)
        Entity.ModuleNumber = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ModuleNumber).GetAsInteger();
      else
        Entity.ModuleNumber = 0;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.ModuleNumber, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.ModuleNumber).Value);

      if (ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.NodeNumber).IsNull == false)
        Entity.NodeNumber = ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.NodeNumber).GetAsInteger();
      else
        Entity.NodeNumber = 0;
      Entity.SetOriginalValueForProperty(ActivityHistoryViewPDSAValidator.ColumnNames.NodeNumber, ValidatorObject.Properties.GetByName(ActivityHistoryViewPDSAValidator.ColumnNames.NodeNumber).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>ActivityHistoryViewPDSA</returns>
    public ActivityHistoryViewPDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new ActivityHistoryViewPDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          
          
          break;
        case SelectFilters.Search:
          
          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL that will count the number of rows returned from this view.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          
          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      sb.Append(WhereClauseSQL());
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion
    
    #region WhereClauseSQL Method
    /// <summary>
    /// Builds the WHERE clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string WhereClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (WhereFilter)
      {
        case WhereFilters.Custom:
          sb.Append(" " + WhereCustom);

          break;

        case WhereFilters.None:
          //  Do nothing

          break;

        case WhereFilters.ActivityDateTime:
          sb.Append(" WHERE ActivityDateTime  =  @ActivityDateTime");

          
          break;
        case WhereFilters.CredentialUid:
          sb.Append(" WHERE CredentialUid  =  @CredentialUid");

          
          break;
        case WhereFilters.DeviceType:
          sb.Append(" WHERE DeviceType  =  @DeviceType");

          
          break;
        case WhereFilters.DeviceUid:
          sb.Append(" WHERE DeviceUid  =  @DeviceUid");

          
          break;
        case WhereFilters.EventTypeUid:
          sb.Append(" WHERE EventTypeUid  =  @EventTypeUid");

          
          break;
        case WhereFilters.PersonUid:
          sb.Append(" WHERE PersonUid  =  @PersonUid");

          
          break;
        case WhereFilters.PK:
          sb.Append(" WHERE PK  =  @PK");

          
          break;
      }
      
      return sb.ToString();
    }
    #endregion

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
         
          break;
        case SelectFilters.Search:
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion

    #region WhereClauseFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any WHERE clause parameters.
    /// </summary>
    protected override void WhereClauseFillInParameters()
    {
      switch (WhereFilter)
      {
        case WhereFilters.ActivityDateTime:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ActivityDateTime", DbType.DateTimeOffset, Entity.ActivityDateTime));
         
          break;
        case WhereFilters.CredentialUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@CredentialUid", DbType.Guid, Entity.CredentialUid));
         
          break;
        case WhereFilters.DeviceType:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DeviceType", DbType.String, Entity.DeviceType));
         
          break;
        case WhereFilters.DeviceUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@DeviceUid", DbType.Guid, Entity.DeviceUid));
         
          break;
        case WhereFilters.EventTypeUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@EventTypeUid", DbType.Guid, Entity.EventTypeUid));
         
          break;
        case WhereFilters.PersonUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PersonUid", DbType.Guid, Entity.PersonUid));
         
          break;
        case WhereFilters.PK:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PK", DbType.Guid, Entity.PK));
         
          break;
      }
    }
    #endregion

    #region OrderByClauseSQL Method
    /// <summary>
    /// Builds the ORDER BY clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string OrderByClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (OrderByFilter)
      {
        case OrderByFilters.None:
          //  Do Nothing

          break;

        case OrderByFilters.Custom:
          sb.Append(" " + OrderByCustom);

          break;
          
        case OrderByFilters.ActivityDateTime:
          
          
          break;
      }

      return sb.ToString();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the ActivityHistoryViewPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'ActivityDateTime'
    /// </summary>
    public static string ActivityDateTime = "ActivityDateTime";
    /// <summary>
    /// Returns 'EventTypeMessage'
    /// </summary>
    public static string EventTypeMessage = "EventTypeMessage";
    /// <summary>
    /// Returns 'ForeColor'
    /// </summary>
    public static string ForeColor = "ForeColor";
    /// <summary>
    /// Returns 'DeviceName'
    /// </summary>
    public static string DeviceName = "DeviceName";
    /// <summary>
    /// Returns 'SiteName'
    /// </summary>
    public static string SiteName = "SiteName";
    /// <summary>
    /// Returns 'EntityId'
    /// </summary>
    public static string EntityId = "EntityId";
    /// <summary>
    /// Returns 'DeviceUid'
    /// </summary>
    public static string DeviceUid = "DeviceUid";
    /// <summary>
    /// Returns 'EventTypeUid'
    /// </summary>
    public static string EventTypeUid = "EventTypeUid";
    /// <summary>
    /// Returns 'DeviceType'
    /// </summary>
    public static string DeviceType = "DeviceType";
    /// <summary>
    /// Returns 'LastName'
    /// </summary>
    public static string LastName = "LastName";
    /// <summary>
    /// Returns 'FirstName'
    /// </summary>
    public static string FirstName = "FirstName";
    /// <summary>
    /// Returns 'CredentialDescription'
    /// </summary>
    public static string CredentialDescription = "CredentialDescription";
    /// <summary>
    /// Returns 'PersonUid'
    /// </summary>
    public static string PersonUid = "PersonUid";
    /// <summary>
    /// Returns 'CredentialUid'
    /// </summary>
    public static string CredentialUid = "CredentialUid";
    /// <summary>
    /// Returns 'PK'
    /// </summary>
    public static string PK = "PK";
    /// <summary>
    /// Returns 'ClusterNumber'
    /// </summary>
    public static string ClusterNumber = "ClusterNumber";
    /// <summary>
    /// Returns 'TotalRecordCount'
    /// </summary>
    public static string TotalRecordCount = "TotalRecordCount";
    /// <summary>
    /// Returns 'ClusterName'
    /// </summary>
    public static string ClusterName = "ClusterName";
    /// <summary>
    /// Returns 'PageNumber'
    /// </summary>
    public static string PageNumber = "PageNumber";
    /// <summary>
    /// Returns 'ClusterGroupId'
    /// </summary>
    public static string ClusterGroupId = "ClusterGroupId";
    /// <summary>
    /// Returns 'PageSize'
    /// </summary>
    public static string PageSize = "PageSize";
    /// <summary>
    /// Returns 'PanelNumber'
    /// </summary>
    public static string PanelNumber = "PanelNumber";
    /// <summary>
    /// Returns 'InputOutputGroupName'
    /// </summary>
    public static string InputOutputGroupName = "InputOutputGroupName";
    /// <summary>
    /// Returns 'InputOutputGroupNumber'
    /// </summary>
    public static string InputOutputGroupNumber = "InputOutputGroupNumber";
    /// <summary>
    /// Returns 'CpuNumber'
    /// </summary>
    public static string CpuNumber = "CpuNumber";
    /// <summary>
    /// Returns 'BoardNumber'
    /// </summary>
    public static string BoardNumber = "BoardNumber";
    /// <summary>
    /// Returns 'SectionNumber'
    /// </summary>
    public static string SectionNumber = "SectionNumber";
    /// <summary>
    /// Returns 'ModuleNumber'
    /// </summary>
    public static string ModuleNumber = "ModuleNumber";
    /// <summary>
    /// Returns 'NodeNumber'
    /// </summary>
    public static string NodeNumber = "NodeNumber";
    }
    #endregion
  }
}
