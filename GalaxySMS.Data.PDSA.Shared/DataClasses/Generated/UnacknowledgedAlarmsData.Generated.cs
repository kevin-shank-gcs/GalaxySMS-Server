using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Select data from the UnacknowledgedAlarmsPDSA view.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class UnacknowledgedAlarmsPDSAData : PDSADataClassReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the UnacknowledgedAlarmsPDSAData class
    /// </summary>
    public UnacknowledgedAlarmsPDSAData() : base()
    {
      Entity = new UnacknowledgedAlarmsPDSA();
      ValidatorObject = new UnacknowledgedAlarmsPDSAValidator(Entity);

      Init();
    }
    
    /// <summary>
    /// Constructor for the UnacknowledgedAlarmsPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a UnacknowledgedAlarmsPDSA</param>
    public UnacknowledgedAlarmsPDSAData(PDSADataProvider dataProvider,
      UnacknowledgedAlarmsPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new UnacknowledgedAlarmsPDSAValidator(Entity);

      Init();
    }
     
    /// <summary>
    /// Constructor for the UnacknowledgedAlarmsPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a UnacknowledgedAlarmsPDSA</param>
    /// <param name="validator">An instance of a UnacknowledgedAlarmsPDSAValidator</param>
    public UnacknowledgedAlarmsPDSAData(PDSADataProvider dataProvider,
      UnacknowledgedAlarmsPDSA entity, UnacknowledgedAlarmsPDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'DeviceEntityId' SelectFilter
      /// </summary>
      DeviceEntityId
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// A Custom SelectFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a WHERE statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum WhereFilters
    {
      /// <summary>
      /// No WhereFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom WhereFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'ClusterGroupId' WhereFilter
      /// </summary>
      ClusterGroupId
      ,
      /// <summary>
      /// 'LikeAccountCode' WhereFilter
      /// </summary>
      LikeAccountCode
    }

    /// <summary>
    /// Enumeration for selecting an ORDER BY statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum OrderByFilters
    {
      /// <summary>
      /// No OrderByFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'ClusterGroupId' OrderByFilter
      /// </summary>
      ClusterGroupId
    }
    
    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }
    /// <summary>
    /// Get/Set a WHERE clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public WhereFilters WhereFilter { get; set; }
    /// <summary>
    /// Get/Set a ORDER BY clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public OrderByFilters OrderByFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Public Property Entity Class
        private UnacknowledgedAlarmsPDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public UnacknowledgedAlarmsPDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "UnacknowledgedAlarmsPDSAData";
      DBObjectName = "GCS.UnacknowledgedAlarms";
      SchemaName = "GCS";
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;
      
      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes all of the Data Columns with valid data for each field in the table.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ActivityEventUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ClusterGroupId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ClusterNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PanelNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CpuId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.BoardNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.SectionNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ModuleNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.NodeNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CpuModel);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DateTime_x);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.BufferIndex);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PanelActivityType);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.InputOutputGroupNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.MultiFactorMode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DeviceDescription);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.EventDescription);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DeviceEntityId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DeviceUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CpuUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ClusterName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.IsAlarmEvent);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.AlarmPriority);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.Instructions);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.InstructionsNoteUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.AudioBinaryResourceUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.RawData);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.Color);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PersonUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CredentialUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PersonDescription);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CredentialDescription);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.Trace);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ActivityEventUid).Value = Entity.ActivityEventUid;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ActivityEventUid).SetAsNull == true)
        Entity.ActivityEventUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ClusterGroupId).Value = Entity.ClusterGroupId;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ClusterGroupId).SetAsNull == true)
        Entity.ClusterGroupId = 0;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ClusterNumber).Value = Entity.ClusterNumber;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ClusterNumber).SetAsNull == true)
        Entity.ClusterNumber = 0;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PanelNumber).Value = Entity.PanelNumber;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PanelNumber).SetAsNull == true)
        Entity.PanelNumber = 0;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CpuId).Value = Entity.CpuId;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CpuId).SetAsNull == true)
        Entity.CpuId = 0;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.BoardNumber).Value = Entity.BoardNumber;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.BoardNumber).SetAsNull == true)
        Entity.BoardNumber = 0;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.SectionNumber).Value = Entity.SectionNumber;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.SectionNumber).SetAsNull == true)
        Entity.SectionNumber = 0;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ModuleNumber).Value = Entity.ModuleNumber;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ModuleNumber).SetAsNull == true)
        Entity.ModuleNumber = 0;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.NodeNumber).Value = Entity.NodeNumber;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.NodeNumber).SetAsNull == true)
        Entity.NodeNumber = 0;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CpuModel).Value = Entity.CpuModel;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CpuModel).SetAsNull == true)
        Entity.CpuModel = 0;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DateTime_x).Value = Entity.DateTime_x;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DateTime_x).SetAsNull == true)
        Entity.DateTime_x = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.BufferIndex).Value = Entity.BufferIndex;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.BufferIndex).SetAsNull == true)
        Entity.BufferIndex = 0;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PanelActivityType).Value = Entity.PanelActivityType;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PanelActivityType).SetAsNull == true)
        Entity.PanelActivityType = string.Empty;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.InputOutputGroupNumber).Value = Entity.InputOutputGroupNumber;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.InputOutputGroupNumber).SetAsNull == true)
        Entity.InputOutputGroupNumber = 0;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.MultiFactorMode).Value = Entity.MultiFactorMode;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.MultiFactorMode).SetAsNull == true)
        Entity.MultiFactorMode = 0;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DeviceDescription).Value = Entity.DeviceDescription;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DeviceDescription).SetAsNull == true)
        Entity.DeviceDescription = string.Empty;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.EventDescription).Value = Entity.EventDescription;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.EventDescription).SetAsNull == true)
        Entity.EventDescription = string.Empty;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DeviceEntityId).Value = Entity.DeviceEntityId;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DeviceEntityId).SetAsNull == true)
        Entity.DeviceEntityId = Guid.Empty;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DeviceUid).Value = Entity.DeviceUid;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DeviceUid).SetAsNull == true)
        Entity.DeviceUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CpuUid).Value = Entity.CpuUid;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CpuUid).SetAsNull == true)
        Entity.CpuUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ClusterName).Value = Entity.ClusterName;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ClusterName).SetAsNull == true)
        Entity.ClusterName = string.Empty;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.IsAlarmEvent).Value = Entity.IsAlarmEvent;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.IsAlarmEvent).SetAsNull == true)
        Entity.IsAlarmEvent = 0;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.AlarmPriority).Value = Entity.AlarmPriority;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.AlarmPriority).SetAsNull == true)
        Entity.AlarmPriority = 0;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.Instructions).Value = Entity.Instructions;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.Instructions).SetAsNull == true)
        Entity.Instructions = string.Empty;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.InstructionsNoteUid).Value = Entity.InstructionsNoteUid;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.InstructionsNoteUid).SetAsNull == true)
        Entity.InstructionsNoteUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.AudioBinaryResourceUid).Value = Entity.AudioBinaryResourceUid;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.AudioBinaryResourceUid).SetAsNull == true)
        Entity.AudioBinaryResourceUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.RawData).Value = Entity.RawData;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.RawData).SetAsNull == true)
        Entity.RawData = 0;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.Color).Value = Entity.Color;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.Color).SetAsNull == true)
        Entity.Color = 0;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PersonUid).Value = Entity.PersonUid;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PersonUid).SetAsNull == true)
        Entity.PersonUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CredentialUid).Value = Entity.CredentialUid;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CredentialUid).SetAsNull == true)
        Entity.CredentialUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PersonDescription).Value = Entity.PersonDescription;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PersonDescription).SetAsNull == true)
        Entity.PersonDescription = string.Empty;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CredentialDescription).Value = Entity.CredentialDescription;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CredentialDescription).SetAsNull == true)
        Entity.CredentialDescription = string.Empty;
      ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.Trace).Value = Entity.Trace;
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.Trace).SetAsNull == true)
        Entity.Trace = false;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ActivityEventUid).IsNull == false)
        Entity.ActivityEventUid = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ActivityEventUid).GetAsGuid();
      else
        Entity.ActivityEventUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ActivityEventUid, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ActivityEventUid).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ClusterGroupId).IsNull == false)
        Entity.ClusterGroupId = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ClusterGroupId).GetAsInteger();
      else
        Entity.ClusterGroupId = 0;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ClusterGroupId, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ClusterGroupId).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ClusterNumber).IsNull == false)
        Entity.ClusterNumber = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ClusterNumber).GetAsInteger();
      else
        Entity.ClusterNumber = 0;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ClusterNumber, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ClusterNumber).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PanelNumber).IsNull == false)
        Entity.PanelNumber = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PanelNumber).GetAsInteger();
      else
        Entity.PanelNumber = 0;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PanelNumber, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PanelNumber).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CpuId).IsNull == false)
        Entity.CpuId = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CpuId).GetAsShort();
      else
        Entity.CpuId = 0;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CpuId, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CpuId).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.BoardNumber).IsNull == false)
        Entity.BoardNumber = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.BoardNumber).GetAsInteger();
      else
        Entity.BoardNumber = 0;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.BoardNumber, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.BoardNumber).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.SectionNumber).IsNull == false)
        Entity.SectionNumber = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.SectionNumber).GetAsInteger();
      else
        Entity.SectionNumber = 0;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.SectionNumber, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.SectionNumber).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ModuleNumber).IsNull == false)
        Entity.ModuleNumber = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ModuleNumber).GetAsInteger();
      else
        Entity.ModuleNumber = 0;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ModuleNumber, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ModuleNumber).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.NodeNumber).IsNull == false)
        Entity.NodeNumber = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.NodeNumber).GetAsInteger();
      else
        Entity.NodeNumber = 0;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.NodeNumber, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.NodeNumber).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CpuModel).IsNull == false)
        Entity.CpuModel = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CpuModel).GetAsInteger();
      else
        Entity.CpuModel = 0;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CpuModel, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CpuModel).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DateTime_x).IsNull == false)
        Entity.DateTime_x = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DateTime_x).GetAsDate();
      else
        Entity.DateTime_x = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DateTime_x, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DateTime_x).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.BufferIndex).IsNull == false)
        Entity.BufferIndex = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.BufferIndex).GetAsInteger();
      else
        Entity.BufferIndex = 0;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.BufferIndex, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.BufferIndex).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PanelActivityType).IsNull == false)
        Entity.PanelActivityType = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PanelActivityType).GetAsString();
      else
        Entity.PanelActivityType = string.Empty;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PanelActivityType, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PanelActivityType).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.InputOutputGroupNumber).IsNull == false)
        Entity.InputOutputGroupNumber = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.InputOutputGroupNumber).GetAsInteger();
      else
        Entity.InputOutputGroupNumber = 0;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.InputOutputGroupNumber, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.InputOutputGroupNumber).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.MultiFactorMode).IsNull == false)
        Entity.MultiFactorMode = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.MultiFactorMode).GetAsInteger();
      else
        Entity.MultiFactorMode = 0;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.MultiFactorMode, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.MultiFactorMode).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DeviceDescription).IsNull == false)
        Entity.DeviceDescription = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DeviceDescription).GetAsString();
      else
        Entity.DeviceDescription = string.Empty;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DeviceDescription, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DeviceDescription).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.EventDescription).IsNull == false)
        Entity.EventDescription = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.EventDescription).GetAsString();
      else
        Entity.EventDescription = string.Empty;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.EventDescription, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.EventDescription).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DeviceEntityId).IsNull == false)
        Entity.DeviceEntityId = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DeviceEntityId).GetAsGuid();
      else
        Entity.DeviceEntityId = Guid.Empty;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DeviceEntityId, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DeviceEntityId).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DeviceUid).IsNull == false)
        Entity.DeviceUid = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DeviceUid).GetAsGuid();
      else
        Entity.DeviceUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DeviceUid, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.DeviceUid).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CpuUid).IsNull == false)
        Entity.CpuUid = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CpuUid).GetAsGuid();
      else
        Entity.CpuUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CpuUid, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CpuUid).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ClusterName).IsNull == false)
        Entity.ClusterName = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ClusterName).GetAsString();
      else
        Entity.ClusterName = string.Empty;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ClusterName, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.ClusterName).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.IsAlarmEvent).IsNull == false)
        Entity.IsAlarmEvent = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.IsAlarmEvent).GetAsInteger();
      else
        Entity.IsAlarmEvent = 0;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.IsAlarmEvent, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.IsAlarmEvent).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.AlarmPriority).IsNull == false)
        Entity.AlarmPriority = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.AlarmPriority).GetAsInteger();
      else
        Entity.AlarmPriority = 0;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.AlarmPriority, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.AlarmPriority).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.Instructions).IsNull == false)
        Entity.Instructions = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.Instructions).GetAsString();
      else
        Entity.Instructions = string.Empty;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.Instructions, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.Instructions).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.InstructionsNoteUid).IsNull == false)
        Entity.InstructionsNoteUid = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.InstructionsNoteUid).GetAsGuid();
      else
        Entity.InstructionsNoteUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.InstructionsNoteUid, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.InstructionsNoteUid).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.AudioBinaryResourceUid).IsNull == false)
        Entity.AudioBinaryResourceUid = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.AudioBinaryResourceUid).GetAsGuid();
      else
        Entity.AudioBinaryResourceUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.AudioBinaryResourceUid, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.AudioBinaryResourceUid).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.RawData).IsNull == false)
        Entity.RawData = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.RawData).GetAsInteger();
      else
        Entity.RawData = 0;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.RawData, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.RawData).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.Color).IsNull == false)
        Entity.Color = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.Color).GetAsInteger();
      else
        Entity.Color = 0;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.Color, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.Color).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PersonUid).IsNull == false)
        Entity.PersonUid = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PersonUid).GetAsGuid();
      else
        Entity.PersonUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PersonUid, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PersonUid).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CredentialUid).IsNull == false)
        Entity.CredentialUid = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CredentialUid).GetAsGuid();
      else
        Entity.CredentialUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CredentialUid, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CredentialUid).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PersonDescription).IsNull == false)
        Entity.PersonDescription = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PersonDescription).GetAsString();
      else
        Entity.PersonDescription = string.Empty;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PersonDescription, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.PersonDescription).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CredentialDescription).IsNull == false)
        Entity.CredentialDescription = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CredentialDescription).GetAsString();
      else
        Entity.CredentialDescription = string.Empty;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CredentialDescription, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.CredentialDescription).Value);

      if (ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.Trace).IsNull == false)
        Entity.Trace = ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.Trace).GetAsBool();
      else
        Entity.Trace = false;
      Entity.SetOriginalValueForProperty(UnacknowledgedAlarmsPDSAValidator.ColumnNames.Trace, ValidatorObject.Properties.GetByName(UnacknowledgedAlarmsPDSAValidator.ColumnNames.Trace).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>UnacknowledgedAlarmsPDSA</returns>
    public UnacknowledgedAlarmsPDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new UnacknowledgedAlarmsPDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          
          
          break;
        case SelectFilters.DeviceEntityId:
          
          
          break;
        case SelectFilters.Search:
          
          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL that will count the number of rows returned from this view.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          
          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      sb.Append(WhereClauseSQL());
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion
    
    #region WhereClauseSQL Method
    /// <summary>
    /// Builds the WHERE clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string WhereClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (WhereFilter)
      {
        case WhereFilters.Custom:
          sb.Append(" " + WhereCustom);

          break;

        case WhereFilters.None:
          //  Do nothing

          break;

        case WhereFilters.ClusterGroupId:
          
          
          break;
        case WhereFilters.LikeAccountCode:
          
          
          break;
      }
      
      return sb.ToString();
    }
    #endregion

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
         
          break;
        case SelectFilters.DeviceEntityId:
         
          break;
        case SelectFilters.Search:
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion

    #region WhereClauseFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any WHERE clause parameters.
    /// </summary>
    protected override void WhereClauseFillInParameters()
    {
      switch (WhereFilter)
      {
        case WhereFilters.ClusterGroupId:
         
          break;
        case WhereFilters.LikeAccountCode:
         
          break;
      }
    }
    #endregion

    #region OrderByClauseSQL Method
    /// <summary>
    /// Builds the ORDER BY clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string OrderByClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (OrderByFilter)
      {
        case OrderByFilters.None:
          //  Do Nothing

          break;

        case OrderByFilters.Custom:
          sb.Append(" " + OrderByCustom);

          break;
          
        case OrderByFilters.ClusterGroupId:
          
          
          break;
      }

      return sb.ToString();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the UnacknowledgedAlarmsPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'ActivityEventUid'
    /// </summary>
    public static string ActivityEventUid = "ActivityEventUid";
    /// <summary>
    /// Returns 'ClusterGroupId'
    /// </summary>
    public static string ClusterGroupId = "ClusterGroupId";
    /// <summary>
    /// Returns 'ClusterNumber'
    /// </summary>
    public static string ClusterNumber = "ClusterNumber";
    /// <summary>
    /// Returns 'PanelNumber'
    /// </summary>
    public static string PanelNumber = "PanelNumber";
    /// <summary>
    /// Returns 'CpuId'
    /// </summary>
    public static string CpuId = "CpuId";
    /// <summary>
    /// Returns 'BoardNumber'
    /// </summary>
    public static string BoardNumber = "BoardNumber";
    /// <summary>
    /// Returns 'SectionNumber'
    /// </summary>
    public static string SectionNumber = "SectionNumber";
    /// <summary>
    /// Returns 'ModuleNumber'
    /// </summary>
    public static string ModuleNumber = "ModuleNumber";
    /// <summary>
    /// Returns 'NodeNumber'
    /// </summary>
    public static string NodeNumber = "NodeNumber";
    /// <summary>
    /// Returns 'CpuModel'
    /// </summary>
    public static string CpuModel = "CpuModel";
    /// <summary>
    /// Returns 'DateTimeOffset'
    /// </summary>
    public static string DateTime_x = "DateTimeOffset";
    /// <summary>
    /// Returns 'BufferIndex'
    /// </summary>
    public static string BufferIndex = "BufferIndex";
    /// <summary>
    /// Returns 'PanelActivityType'
    /// </summary>
    public static string PanelActivityType = "PanelActivityType";
    /// <summary>
    /// Returns 'InputOutputGroupNumber'
    /// </summary>
    public static string InputOutputGroupNumber = "InputOutputGroupNumber";
    /// <summary>
    /// Returns 'MultiFactorMode'
    /// </summary>
    public static string MultiFactorMode = "MultiFactorMode";
    /// <summary>
    /// Returns 'DeviceDescription'
    /// </summary>
    public static string DeviceDescription = "DeviceDescription";
    /// <summary>
    /// Returns 'EventDescription'
    /// </summary>
    public static string EventDescription = "EventDescription";
    /// <summary>
    /// Returns 'DeviceEntityId'
    /// </summary>
    public static string DeviceEntityId = "DeviceEntityId";
    /// <summary>
    /// Returns 'DeviceUid'
    /// </summary>
    public static string DeviceUid = "DeviceUid";
    /// <summary>
    /// Returns 'CpuUid'
    /// </summary>
    public static string CpuUid = "CpuUid";
    /// <summary>
    /// Returns 'ClusterName'
    /// </summary>
    public static string ClusterName = "ClusterName";
    /// <summary>
    /// Returns 'IsAlarmEvent'
    /// </summary>
    public static string IsAlarmEvent = "IsAlarmEvent";
    /// <summary>
    /// Returns 'AlarmPriority'
    /// </summary>
    public static string AlarmPriority = "AlarmPriority";
    /// <summary>
    /// Returns 'Instructions'
    /// </summary>
    public static string Instructions = "Instructions";
    /// <summary>
    /// Returns 'InstructionsNoteUid'
    /// </summary>
    public static string InstructionsNoteUid = "InstructionsNoteUid";
    /// <summary>
    /// Returns 'AudioBinaryResourceUid'
    /// </summary>
    public static string AudioBinaryResourceUid = "AudioBinaryResourceUid";
    /// <summary>
    /// Returns 'RawData'
    /// </summary>
    public static string RawData = "RawData";
    /// <summary>
    /// Returns 'Color'
    /// </summary>
    public static string Color = "Color";
    /// <summary>
    /// Returns 'PersonUid'
    /// </summary>
    public static string PersonUid = "PersonUid";
    /// <summary>
    /// Returns 'CredentialUid'
    /// </summary>
    public static string CredentialUid = "CredentialUid";
    /// <summary>
    /// Returns 'PersonDescription'
    /// </summary>
    public static string PersonDescription = "PersonDescription";
    /// <summary>
    /// Returns 'CredentialDescription'
    /// </summary>
    public static string CredentialDescription = "CredentialDescription";
    /// <summary>
    /// Returns 'Trace'
    /// </summary>
    public static string Trace = "Trace";
    }
    #endregion
  }
}
