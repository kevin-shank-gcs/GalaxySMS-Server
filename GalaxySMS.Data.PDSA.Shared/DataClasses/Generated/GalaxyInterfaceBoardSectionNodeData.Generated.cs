using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Add/Edit/Delete/Select data from the GalaxyInterfaceBoardSectionNodePDSA table.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class GalaxyInterfaceBoardSectionNodePDSAData : PDSADataClassTable
  {
    #region Constructors
    /// <summary>
    /// Constructor for the GalaxyInterfaceBoardSectionNodePDSAData class
    /// </summary>
    public GalaxyInterfaceBoardSectionNodePDSAData() : base()
    {
      Entity = new GalaxyInterfaceBoardSectionNodePDSA();
      ValidatorObject = new GalaxyInterfaceBoardSectionNodePDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the GalaxyInterfaceBoardSectionNodePDSAData class
    /// </summary>
    /// <param name="entity">An instance of a GalaxyInterfaceBoardSectionNodePDSA</param>
    public GalaxyInterfaceBoardSectionNodePDSAData(GalaxyInterfaceBoardSectionNodePDSA entity) : base(entity)
    {
      Entity = entity;
      ValidatorObject = new GalaxyInterfaceBoardSectionNodePDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the GalaxyInterfaceBoardSectionNodePDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a GalaxyInterfaceBoardSectionNodePDSA</param>
    public GalaxyInterfaceBoardSectionNodePDSAData(PDSADataProvider dataProvider,
      GalaxyInterfaceBoardSectionNodePDSA entity)
      : base(dataProvider, entity)
    {
      Entity = entity;
      ValidatorObject = new GalaxyInterfaceBoardSectionNodePDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the GalaxyInterfaceBoardSectionNodePDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a GalaxyInterfaceBoardSectionNodePDSA</param>
    /// <param name="validator">An instance of a GalaxyInterfaceBoardSectionNodePDSAValidator</param>
    public GalaxyInterfaceBoardSectionNodePDSAData(PDSADataProvider dataProvider,
      GalaxyInterfaceBoardSectionNodePDSA entity, GalaxyInterfaceBoardSectionNodePDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'ByClusterUid' SelectFilter
      /// </summary>
      ByClusterUid
      ,
      /// <summary>
      /// 'ByGalaxyHardwareModuleUid' SelectFilter
      /// </summary>
      ByGalaxyHardwareModuleUid
      ,
      /// <summary>
      /// 'ByGalaxyInterfaceBoardSectionUid' SelectFilter
      /// </summary>
      ByGalaxyInterfaceBoardSectionUid
      ,
      /// <summary>
      /// 'ByGalaxyInterfaceBoardUid' SelectFilter
      /// </summary>
      ByGalaxyInterfaceBoardUid
      ,
      /// <summary>
      /// 'ByGalaxyPanelUid' SelectFilter
      /// </summary>
      ByGalaxyPanelUid
      ,
      /// <summary>
      /// 'ByPanelAddress' SelectFilter
      /// </summary>
      ByPanelAddress
      ,
      /// <summary>
      /// 'ListBox' SelectFilter
      /// </summary>
      ListBox
      ,
      /// <summary>
      /// 'PrimaryKey' SelectFilter
      /// </summary>
      PrimaryKey
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// A Custom Select Filter
      /// </summary>
      Custom
    }


    /// <summary>
    /// Enumeration for selecting an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
    /// </summary>
    public enum InsertFilters
    {
      
      /// <summary>
      /// 'All' InsertFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom InsertFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
    /// </summary>
    public enum UpdateFilters
    {
      
      /// <summary>
      /// 'PrimaryKey' UpdateFilter
      /// </summary>
      PrimaryKey
      ,
      /// <summary>
      /// 'UpdateConcurrency' UpdateFilter
      /// </summary>
      UpdateConcurrency
      ,
      /// <summary>
      /// A Custom UpdateFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a DELETE statement or DELETE stored procedure to execute when calling the Delete() method.
    /// </summary>
    public enum DeleteFilters
    {
      
      /// <summary>
      /// 'DeleteByPK' DeleteFilter
      /// </summary>
      DeleteByPK
      ,
      /// <summary>
      /// A Custom DeleteFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom RowCountFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL or Stored Procedure to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }

    
    /// <summary>
    /// Get/Set an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
    /// </summary>
    public InsertFilters InsertFilter { get; set; }

    private UpdateFilters mUpdateFilter;
    /// <summary>
    /// Get/Set an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
    /// </summary>
    public UpdateFilters UpdateFilter
    {
      get { return mUpdateFilter; }
      set
      {
        mUpdateFilter = value;
        if (mUpdateFilter == UpdateFilters.Custom)
          PerformValidation = false;
      }
    }
    /// <summary>
    /// Get/Set a DELETE statement or DELETE stored procedure to execute when calling the Delete() method. You might need to set a WhereFilter as well.
    /// </summary>
    public DeleteFilters DeleteFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Entity Property
    private GalaxyInterfaceBoardSectionNodePDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public GalaxyInterfaceBoardSectionNodePDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "GalaxyInterfaceBoardSectionNodePDSAData";
      DBObjectName = "GCS.GalaxyInterfaceBoardSectionNode";
      SchemaName = "GCS";
      PrimaryKeyType = PDSAPrimaryKeyType.GUID;
      PrimaryKeyGenerate = false;
      UseAuditTracking = DataProvider.UseDBAuditTracking;
      UseStoredProcs = DataProvider.UseStoredProcedures;
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;

      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Use this area to initialize any starting values for data in the Properties collection for each Entity property.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = true;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyHardwareModuleUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.NodeNumber);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.IsNodeActive);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.InsertName);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.InsertDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);

      prop = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.UpdateName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.UpdateDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);

      prop = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ConcurrencyValue);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyPanelUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ClusterUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ClusterNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.PanelNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.BoardNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.SectionNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ModuleNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ClusterGroupId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlChars.Null;
      //prop.ValueForNull = string.Empty;

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).Value = Entity.GalaxyInterfaceBoardSectionNodeUid;
      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).SetAsNull == true)
        Entity.GalaxyInterfaceBoardSectionNodeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyHardwareModuleUid).Value = Entity.GalaxyHardwareModuleUid;
      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyHardwareModuleUid).SetAsNull == true)
        Entity.GalaxyHardwareModuleUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.NodeNumber).Value = Entity.NodeNumber;
      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.NodeNumber).SetAsNull == true)
        Entity.NodeNumber = 0;
      ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.IsNodeActive).Value = Entity.IsNodeActive;
      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.IsNodeActive).SetAsNull == true)
        Entity.IsNodeActive = false;
      ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.InsertName).SetAsNull == true)
        Entity.InsertName = string.Empty;
      ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.InsertDate).SetAsNull == true)
        Entity.InsertDate = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.UpdateName).SetAsNull == true)
        Entity.UpdateName = string.Empty;
      ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.UpdateDate).SetAsNull == true)
        Entity.UpdateDate = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull == true)
        Entity.ConcurrencyValue = 0;
      ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).Value = Entity.GalaxyInterfaceBoardSectionUid;
      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).SetAsNull == true)
        Entity.GalaxyInterfaceBoardSectionUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).Value = Entity.GalaxyInterfaceBoardUid;
      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).SetAsNull == true)
        Entity.GalaxyInterfaceBoardUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyPanelUid).Value = Entity.GalaxyPanelUid;
      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyPanelUid).SetAsNull == true)
        Entity.GalaxyPanelUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ClusterUid).Value = Entity.ClusterUid;
      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ClusterUid).SetAsNull == true)
        Entity.ClusterUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ClusterNumber).Value = Entity.ClusterNumber;
      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ClusterNumber).SetAsNull == true)
        Entity.ClusterNumber = 0;
      ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.PanelNumber).Value = Entity.PanelNumber;
      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.PanelNumber).SetAsNull == true)
        Entity.PanelNumber = 0;
      ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.BoardNumber).Value = Entity.BoardNumber;
      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.BoardNumber).SetAsNull == true)
        Entity.BoardNumber = 0;
      ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.SectionNumber).Value = Entity.SectionNumber;
      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.SectionNumber).SetAsNull == true)
        Entity.SectionNumber = 0;
      ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ModuleNumber).Value = Entity.ModuleNumber;
      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ModuleNumber).SetAsNull == true)
        Entity.ModuleNumber = 0;
      ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ClusterGroupId).Value = Entity.ClusterGroupId;
      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ClusterGroupId).SetAsNull == true)
        Entity.ClusterGroupId = 0;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).IsNull == false)
        Entity.GalaxyInterfaceBoardSectionNodeUid = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).GetAsGuid();
      else
        Entity.GalaxyInterfaceBoardSectionNodeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyHardwareModuleUid).IsNull == false)
        Entity.GalaxyHardwareModuleUid = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyHardwareModuleUid).GetAsGuid();
      else
        Entity.GalaxyHardwareModuleUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyHardwareModuleUid, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyHardwareModuleUid).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.NodeNumber).IsNull == false)
        Entity.NodeNumber = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.NodeNumber).GetAsShort();
      else
        Entity.NodeNumber = 0;
      Entity.SetOriginalValueForProperty(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.NodeNumber, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.NodeNumber).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.IsNodeActive).IsNull == false)
        Entity.IsNodeActive = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.IsNodeActive).GetAsBool();
      else
        Entity.IsNodeActive = false;
      Entity.SetOriginalValueForProperty(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.IsNodeActive, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.IsNodeActive).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.InsertName).GetAsString();
      else
        Entity.InsertName = string.Empty;
      Entity.SetOriginalValueForProperty(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.InsertName, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.InsertName).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.InsertDate).GetAsDate();
      else
        Entity.InsertDate = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);
      Entity.SetOriginalValueForProperty(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.InsertDate, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.InsertDate).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.UpdateName).GetAsString();
      else
        Entity.UpdateName = string.Empty;
      Entity.SetOriginalValueForProperty(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.UpdateName, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.UpdateName).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.UpdateDate).GetAsDate();
      else
        Entity.UpdateDate = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);
      Entity.SetOriginalValueForProperty(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.UpdateDate, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.UpdateDate).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
      else
        Entity.ConcurrencyValue = 0;
      Entity.SetOriginalValueForProperty(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ConcurrencyValue, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ConcurrencyValue).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).IsNull == false)
        Entity.GalaxyInterfaceBoardSectionUid = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).GetAsGuid();
      else
        Entity.GalaxyInterfaceBoardSectionUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).IsNull == false)
        Entity.GalaxyInterfaceBoardUid = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).GetAsGuid();
      else
        Entity.GalaxyInterfaceBoardUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardUid, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyPanelUid).IsNull == false)
        Entity.GalaxyPanelUid = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyPanelUid).GetAsGuid();
      else
        Entity.GalaxyPanelUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyPanelUid, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyPanelUid).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ClusterUid).IsNull == false)
        Entity.ClusterUid = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ClusterUid).GetAsGuid();
      else
        Entity.ClusterUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ClusterUid, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ClusterUid).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ClusterNumber).IsNull == false)
        Entity.ClusterNumber = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ClusterNumber).GetAsInteger();
      else
        Entity.ClusterNumber = 0;
      Entity.SetOriginalValueForProperty(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ClusterNumber, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ClusterNumber).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.PanelNumber).IsNull == false)
        Entity.PanelNumber = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.PanelNumber).GetAsInteger();
      else
        Entity.PanelNumber = 0;
      Entity.SetOriginalValueForProperty(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.PanelNumber, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.PanelNumber).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.BoardNumber).IsNull == false)
        Entity.BoardNumber = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.BoardNumber).GetAsShort();
      else
        Entity.BoardNumber = 0;
      Entity.SetOriginalValueForProperty(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.BoardNumber, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.BoardNumber).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.SectionNumber).IsNull == false)
        Entity.SectionNumber = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.SectionNumber).GetAsShort();
      else
        Entity.SectionNumber = 0;
      Entity.SetOriginalValueForProperty(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.SectionNumber, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.SectionNumber).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ModuleNumber).IsNull == false)
        Entity.ModuleNumber = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ModuleNumber).GetAsShort();
      else
        Entity.ModuleNumber = 0;
      Entity.SetOriginalValueForProperty(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ModuleNumber, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ModuleNumber).Value);

      if (ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ClusterGroupId).IsNull == false)
        Entity.ClusterGroupId = ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ClusterGroupId).GetAsInteger();
      else
        Entity.ClusterGroupId = 0;
      Entity.SetOriginalValueForProperty(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ClusterGroupId, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ClusterGroupId).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>GalaxyInterfaceBoardSectionNodePDSA</returns>
    public GalaxyInterfaceBoardSectionNodePDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new GalaxyInterfaceBoardSectionNodePDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement, or SELECT stored procedure based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInterfaceBoardSectionNodePDSA_SelectAll");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByClusterUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInterfaceBoardSectionNodePDSA_ByClusterUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByGalaxyHardwareModuleUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInterfaceBoardSectionNodePDSA_GalaxyHardwareModuleUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByGalaxyInterfaceBoardSectionUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInterfaceBoardSectionNodePDSA_ByGalaxyInterfaceBoardSectionUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByGalaxyInterfaceBoardUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInterfaceBoardSectionNodePDSA_ByGalaxyInterfaceBoardUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByGalaxyPanelUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInterfaceBoardSectionNodePDSA_ByGalaxyPanelUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByPanelAddress:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInterfaceBoardSectionNodePDSA_ByPanelAddress");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ListBox:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInterfaceBoardSectionNodePDSA_SelectListBox");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.PrimaryKey:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInterfaceBoardSectionNodePDSA_SelectByPK");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.Search:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInterfaceBoardSectionNodePDSA_SelectSearch");
          }
          else
          {
            
          }
          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region InsertSQL Method
    /// <summary>
    /// Builds the SQL for the INSERT statement, or INSERT stored procedure based on the InsertFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string InsertSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (InsertFilter)
      {
        case InsertFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInterfaceBoardSectionNodePDSA_Insert");
          }
          else
          {
            
          }
            
          break;
        
        case InsertFilters.Custom:
          sb.Append(InsertCustom);
          
          break;
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region UpdateSQL Method
    /// <summary>
    /// Builds the SQL for the UPDATE statement, or UPDATE stored procedure based on the UpdateFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string UpdateSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (UpdateFilter)
      {
        case UpdateFilters.PrimaryKey:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInterfaceBoardSectionNodePDSA_Update");
          }
          else
          {
            
          }
          
          break;
        case UpdateFilters.UpdateConcurrency:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInterfaceBoardSectionNodePDSA_UpdateConcurrency");
          }
          else
          {
            
          }
          
          break;
        
        case UpdateFilters.Custom:
          sb.Append(UpdateCustom);
          
          break;
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region DeleteByPK Method
    /// <summary>
    /// Delete a record from the table based on the primary key value that is passed in.
    /// </summary>
    /// <param name="galaxyInterfaceBoardSectionNodeUid">The value of the primary key of the row to delete</param>
    /// <returns>int</returns>
    public int DeleteByPK(Guid galaxyInterfaceBoardSectionNodeUid)
    {
      DeleteFilter = DeleteFilters.DeleteByPK;
      Entity.GalaxyInterfaceBoardSectionNodeUid = galaxyInterfaceBoardSectionNodeUid;      
      
      // If using Audit Tracking, need to load the record first
      if (UseAuditTracking)
        LoadByPK(galaxyInterfaceBoardSectionNodeUid);

      RowsAffected = Delete();

      return RowsAffected;
    }
    #endregion

    #region DeleteSQL Method
    /// <summary>
    /// Builds the SQL for the DELETE statement, or DELETE stored procedure. You can set the WhereFilter property to selectively delete rows from the table.
    /// </summary>
    /// <returns>string</returns>
    public override string DeleteSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (DeleteFilter)
      {
        case DeleteFilters.DeleteByPK:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInterfaceBoardSectionNodePDSA_DeleteByPK");
          }
          else
          {
            
          }
          
          break;

        case DeleteFilters.Custom:
          sb.Append(DeleteCustom);

          break;          
      }

      if(!UseStoredProcs)
      {
        sb.Append(WhereClauseSQL());
      }
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL, or the name of the stored procedure, that will count the number of rows.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.GalaxyInterfaceBoardSectionNodePDSA_RowCount");
          }
          else
          {
            
          }
          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      if(!UseStoredProcs)
      {
        sb.Append(WhereClauseSQL());
      }
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region LoadByPK Method
    /// <summary>
    /// Load a row of data in the Entity properties. Returns a value greater than 0 if it finds the record.
    /// </summary>
    /// <param name="galaxyInterfaceBoardSectionNodeUid">The value of the primary key of the row to load</param>
    /// <returns>Int32</returns>
    public int LoadByPK(Guid galaxyInterfaceBoardSectionNodeUid)
    {
      SelectFilter = SelectFilters.PrimaryKey;
      Entity.GalaxyInterfaceBoardSectionNodeUid = galaxyInterfaceBoardSectionNodeUid;      

      // Load Data into Properties
      RowsAffected = Load();

      // Reset all Collection Properties
      ResetCollectionProperties();
      
      return RowsAffected;
    }
    #endregion
    
    
    #region Updated Method
    /// <summary>
    /// This method is called after a successful update
    /// </summary>
    protected override void Updated()
    {
      Entity.ConcurrencyValue += Convert.ToInt16(1);
    }
    #endregion

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
         
          break;
        case SelectFilters.ByClusterUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ClusterUid", DbType.Guid, Entity.ClusterUid));
         
          break;
        case SelectFilters.ByGalaxyHardwareModuleUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@GalaxyHardwareModuleUid", DbType.Guid, Entity.GalaxyHardwareModuleUid));
         
          break;
        case SelectFilters.ByGalaxyInterfaceBoardSectionUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@GalaxyInterfaceBoardSectionUid", DbType.Guid, Entity.GalaxyInterfaceBoardSectionUid));
         
          break;
        case SelectFilters.ByGalaxyInterfaceBoardUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@GalaxyInterfaceBoardUid", DbType.Guid, Entity.GalaxyInterfaceBoardUid));
         
          break;
        case SelectFilters.ByGalaxyPanelUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@GalaxyPanelUid", DbType.Guid, Entity.GalaxyPanelUid));
         
          break;
        case SelectFilters.ByPanelAddress:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ClusterGroupId", DbType.String, Entity.ClusterGroupId));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ClusterNumber", DbType.Int32, Entity.ClusterNumber));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@PanelNumber", DbType.Int32, Entity.PanelNumber));
         
          break;
        case SelectFilters.ListBox:
         
          break;
        case SelectFilters.PrimaryKey:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@GalaxyInterfaceBoardSectionNodeUid", DbType.Guid, Entity.GalaxyInterfaceBoardSectionNodeUid));
         
          break;
        case SelectFilters.Search:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@InsertName", DbType.String, Entity.InsertName));
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion


    #region SetModificationCommandParameters Method
    /// <summary>
    /// Called to build any parameters prior to submitting an INSERT, UPDATE, or DELETE statement.
    /// </summary>
    protected override void SetModificationCommandParameters()
    {    
      switch (DataModificationAction)
      {
        case PDSADataModificationState.Delete:
          switch (DeleteFilter)
          {
            case DeleteFilters.DeleteByPK:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@GalaxyInterfaceBoardSectionNodeUid", DbType.Guid, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
          }

          break;

        case PDSADataModificationState.Insert:
          if (PrimaryKeyType == PDSAPrimaryKeyType.PDSA)
          {
            if (PrimaryKeyGenerate == true)
            {
              //  Get New Primary Key from pdsaTableIds
              PrimaryKeySet(PKGetFromPDSATableIds(PDSALoginName));
            }
          }

          switch (InsertFilter)
          {
            case InsertFilters.All:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@GalaxyInterfaceBoardSectionNodeUid", DbType.Guid, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@GalaxyHardwareModuleUid", DbType.Guid, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyHardwareModuleUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@NodeNumber", DbType.Int16, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.NodeNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@IsNodeActive", DbType.Boolean, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.IsNodeActive).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InsertName", DbType.String, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.InsertName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InsertDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.InsertDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateName", DbType.String, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.UpdateName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.UpdateDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
          }

          break;

        case PDSADataModificationState.Update:
          switch (UpdateFilter)
          {
            case UpdateFilters.PrimaryKey:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@GalaxyInterfaceBoardSectionNodeUid", DbType.Guid, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@GalaxyHardwareModuleUid", DbType.Guid, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyHardwareModuleUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@NodeNumber", DbType.Int16, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.NodeNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@IsNodeActive", DbType.Boolean, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.IsNodeActive).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateName", DbType.String, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.UpdateName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.UpdateDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
            case UpdateFilters.UpdateConcurrency:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@GalaxyInterfaceBoardSectionNodeUid", DbType.Guid, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(GalaxyInterfaceBoardSectionNodePDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
          }
          break;
      }
    }
    #endregion
  }
}
