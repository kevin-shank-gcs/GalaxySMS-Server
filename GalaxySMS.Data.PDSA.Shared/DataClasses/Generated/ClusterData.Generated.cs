using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Add/Edit/Delete/Select data from the ClusterPDSA table.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class ClusterPDSAData : PDSADataClassTable
  {
    #region Constructors
    /// <summary>
    /// Constructor for the ClusterPDSAData class
    /// </summary>
    public ClusterPDSAData() : base()
    {
      Entity = new ClusterPDSA();
      ValidatorObject = new ClusterPDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the ClusterPDSAData class
    /// </summary>
    /// <param name="entity">An instance of a ClusterPDSA</param>
    public ClusterPDSAData(ClusterPDSA entity) : base(entity)
    {
      Entity = entity;
      ValidatorObject = new ClusterPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the ClusterPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a ClusterPDSA</param>
    public ClusterPDSAData(PDSADataProvider dataProvider,
      ClusterPDSA entity)
      : base(dataProvider, entity)
    {
      Entity = entity;
      ValidatorObject = new ClusterPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the ClusterPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a ClusterPDSA</param>
    /// <param name="validator">An instance of a ClusterPDSAValidator</param>
    public ClusterPDSAData(PDSADataProvider dataProvider,
      ClusterPDSA entity, ClusterPDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'ByClusterNumber' SelectFilter
      /// </summary>
      ByClusterNumber
      ,
      /// <summary>
      /// 'ByClusterTypeUid' SelectFilter
      /// </summary>
      ByClusterTypeUid
      ,
      /// <summary>
      /// 'ByEntityId' SelectFilter
      /// </summary>
      ByEntityId
      ,
      /// <summary>
      /// 'BySiteUid' SelectFilter
      /// </summary>
      BySiteUid
      ,
      /// <summary>
      /// 'ListBox' SelectFilter
      /// </summary>
      ListBox
      ,
      /// <summary>
      /// 'PrimaryKey' SelectFilter
      /// </summary>
      PrimaryKey
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// 'ByClusterGroupIdAndNumber' SelectFilter
      /// </summary>
      ByClusterGroupIdAndNumber
      ,
      /// <summary>
      /// 'ByClusterGroupId' SelectFilter
      /// </summary>
      ByClusterGroupId
      ,
      /// <summary>
      /// A Custom Select Filter
      /// </summary>
      Custom
    }


    /// <summary>
    /// Enumeration for selecting an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
    /// </summary>
    public enum InsertFilters
    {
      
      /// <summary>
      /// 'All' InsertFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom InsertFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
    /// </summary>
    public enum UpdateFilters
    {
      
      /// <summary>
      /// 'PrimaryKey' UpdateFilter
      /// </summary>
      PrimaryKey
      ,
      /// <summary>
      /// 'UpdateConcurrency' UpdateFilter
      /// </summary>
      UpdateConcurrency
      ,
      /// <summary>
      /// A Custom UpdateFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a DELETE statement or DELETE stored procedure to execute when calling the Delete() method.
    /// </summary>
    public enum DeleteFilters
    {
      
      /// <summary>
      /// 'DeleteByPK' DeleteFilter
      /// </summary>
      DeleteByPK
      ,
      /// <summary>
      /// A Custom DeleteFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom RowCountFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL or Stored Procedure to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }

    
    /// <summary>
    /// Get/Set an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
    /// </summary>
    public InsertFilters InsertFilter { get; set; }

    private UpdateFilters mUpdateFilter;
    /// <summary>
    /// Get/Set an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
    /// </summary>
    public UpdateFilters UpdateFilter
    {
      get { return mUpdateFilter; }
      set
      {
        mUpdateFilter = value;
        if (mUpdateFilter == UpdateFilters.Custom)
          PerformValidation = false;
      }
    }
    /// <summary>
    /// Get/Set a DELETE statement or DELETE stored procedure to execute when calling the Delete() method. You might need to set a WhereFilter as well.
    /// </summary>
    public DeleteFilters DeleteFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Entity Property
    private ClusterPDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public ClusterPDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "ClusterPDSAData";
      DBObjectName = "GCS.Cluster";
      SchemaName = "GCS";
      PrimaryKeyType = PDSAPrimaryKeyType.GUID;
      PrimaryKeyGenerate = false;
      UseAuditTracking = DataProvider.UseDBAuditTracking;
      UseStoredProcs = DataProvider.UseStoredProcedures;
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;

      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Use this area to initialize any starting values for data in the Properties collection for each Entity property.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = true;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterTypeUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterNumber);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.InsertName);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.InsertDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ConcurrencyValue);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.EntityId);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.SiteUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CredentialDataLengthUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeScheduleTypeUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.IsActive);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStartDigit);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStopDigit);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaFoldOption);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStartBit);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStopBit);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStartBit);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStopBit);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutDurationSeconds);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessRuleOverrideTimeout);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UnlimitedCredentialTimeout);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeZoneId);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.BinaryResourceUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalTypeUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TemplateAccessPortalUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaClipOption);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CurrentTimeForCluster);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);

      prop = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterGroupId);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterUid).Value = Entity.ClusterUid;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterUid).SetAsNull == true)
        Entity.ClusterUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterTypeUid).Value = Entity.ClusterTypeUid;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterTypeUid).SetAsNull == true)
        Entity.ClusterTypeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterNumber).Value = Entity.ClusterNumber;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterNumber).SetAsNull == true)
        Entity.ClusterNumber = 0;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterName).Value = Entity.ClusterName;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterName).SetAsNull == true)
        Entity.ClusterName = string.Empty;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.InsertName).SetAsNull == true)
        Entity.InsertName = string.Empty;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.InsertDate).SetAsNull == true)
        Entity.InsertDate = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateName).SetAsNull == true)
        Entity.UpdateName = string.Empty;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateDate).SetAsNull == true)
        Entity.UpdateDate = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull == true)
        Entity.ConcurrencyValue = 0;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.EntityId).Value = Entity.EntityId;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.EntityId).SetAsNull == true)
        Entity.EntityId = Guid.Empty;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.SiteUid).Value = Entity.SiteUid;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.SiteUid).SetAsNull == true)
        Entity.SiteUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CredentialDataLengthUid).Value = Entity.CredentialDataLengthUid;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CredentialDataLengthUid).SetAsNull == true)
        Entity.CredentialDataLengthUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeScheduleTypeUid).Value = Entity.TimeScheduleTypeUid;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeScheduleTypeUid).SetAsNull == true)
        Entity.TimeScheduleTypeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.IsActive).Value = Entity.IsActive;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.IsActive).SetAsNull == true)
        Entity.IsActive = false;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStartDigit).Value = Entity.AbaStartDigit;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStartDigit).SetAsNull == true)
        Entity.AbaStartDigit = 0;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStopDigit).Value = Entity.AbaStopDigit;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStopDigit).SetAsNull == true)
        Entity.AbaStopDigit = 0;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaFoldOption).Value = Entity.AbaFoldOption;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaFoldOption).SetAsNull == true)
        Entity.AbaFoldOption = false;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStartBit).Value = Entity.WiegandStartBit;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStartBit).SetAsNull == true)
        Entity.WiegandStartBit = 0;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStopBit).Value = Entity.WiegandStopBit;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStopBit).SetAsNull == true)
        Entity.WiegandStopBit = 0;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStartBit).Value = Entity.CardaxStartBit;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStartBit).SetAsNull == true)
        Entity.CardaxStartBit = 0;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStopBit).Value = Entity.CardaxStopBit;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStopBit).SetAsNull == true)
        Entity.CardaxStopBit = 0;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts).Value = Entity.LockoutAfterInvalidAttempts;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts).SetAsNull == true)
        Entity.LockoutAfterInvalidAttempts = 0;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutDurationSeconds).Value = Entity.LockoutDurationSeconds;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutDurationSeconds).SetAsNull == true)
        Entity.LockoutDurationSeconds = 0;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessRuleOverrideTimeout).Value = Entity.AccessRuleOverrideTimeout;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessRuleOverrideTimeout).SetAsNull == true)
        Entity.AccessRuleOverrideTimeout = 0;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UnlimitedCredentialTimeout).Value = Entity.UnlimitedCredentialTimeout;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UnlimitedCredentialTimeout).SetAsNull == true)
        Entity.UnlimitedCredentialTimeout = 0;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeZoneId).Value = Entity.TimeZoneId;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeZoneId).SetAsNull == true)
        Entity.TimeZoneId = string.Empty;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.BinaryResourceUid).Value = Entity.BinaryResourceUid;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.BinaryResourceUid).SetAsNull == true)
        Entity.BinaryResourceUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid).Value = Entity.CrisisActivateInputOutputGroupUid;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid).SetAsNull == true)
        Entity.CrisisActivateInputOutputGroupUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid).Value = Entity.CrisisResetInputOutputGroupUid;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid).SetAsNull == true)
        Entity.CrisisResetInputOutputGroupUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid).Value = Entity.AccessPortalLockedLedBehaviorModeUid;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid).SetAsNull == true)
        Entity.AccessPortalLockedLedBehaviorModeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid).Value = Entity.AccessPortalUnlockedLedBehaviorModeUid;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid).SetAsNull == true)
        Entity.AccessPortalUnlockedLedBehaviorModeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalTypeUid).Value = Entity.AccessPortalTypeUid;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalTypeUid).SetAsNull == true)
        Entity.AccessPortalTypeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TemplateAccessPortalUid).Value = Entity.TemplateAccessPortalUid;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TemplateAccessPortalUid).SetAsNull == true)
        Entity.TemplateAccessPortalUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaClipOption).Value = Entity.AbaClipOption;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaClipOption).SetAsNull == true)
        Entity.AbaClipOption = false;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CurrentTimeForCluster).Value = Entity.CurrentTimeForCluster;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CurrentTimeForCluster).SetAsNull == true)
        Entity.CurrentTimeForCluster = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterGroupId).Value = Entity.ClusterGroupId;
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterGroupId).SetAsNull == true)
        Entity.ClusterGroupId = 0;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterUid).IsNull == false)
        Entity.ClusterUid = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterUid).GetAsGuid();
      else
        Entity.ClusterUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.ClusterUid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterUid).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterTypeUid).IsNull == false)
        Entity.ClusterTypeUid = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterTypeUid).GetAsGuid();
      else
        Entity.ClusterTypeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.ClusterTypeUid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterTypeUid).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterNumber).IsNull == false)
        Entity.ClusterNumber = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterNumber).GetAsInteger();
      else
        Entity.ClusterNumber = 0;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.ClusterNumber, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterNumber).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterName).IsNull == false)
        Entity.ClusterName = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterName).GetAsString();
      else
        Entity.ClusterName = string.Empty;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.ClusterName, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterName).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.InsertName).GetAsString();
      else
        Entity.InsertName = string.Empty;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.InsertName, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.InsertName).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.InsertDate).GetAsDate();
      else
        Entity.InsertDate = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.InsertDate, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.InsertDate).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateName).GetAsString();
      else
        Entity.UpdateName = string.Empty;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.UpdateName, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateName).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateDate).GetAsDate();
      else
        Entity.UpdateDate = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.UpdateDate, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateDate).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
      else
        Entity.ConcurrencyValue = 0;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.ConcurrencyValue, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ConcurrencyValue).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.EntityId).IsNull == false)
        Entity.EntityId = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.EntityId).GetAsGuid();
      else
        Entity.EntityId = Guid.Empty;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.EntityId, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.EntityId).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.SiteUid).IsNull == false)
        Entity.SiteUid = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.SiteUid).GetAsGuid();
      else
        Entity.SiteUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.SiteUid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.SiteUid).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CredentialDataLengthUid).IsNull == false)
        Entity.CredentialDataLengthUid = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CredentialDataLengthUid).GetAsGuid();
      else
        Entity.CredentialDataLengthUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.CredentialDataLengthUid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CredentialDataLengthUid).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeScheduleTypeUid).IsNull == false)
        Entity.TimeScheduleTypeUid = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeScheduleTypeUid).GetAsGuid();
      else
        Entity.TimeScheduleTypeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.TimeScheduleTypeUid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeScheduleTypeUid).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.IsActive).IsNull == false)
        Entity.IsActive = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.IsActive).GetAsBool();
      else
        Entity.IsActive = false;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.IsActive, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.IsActive).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStartDigit).IsNull == false)
        Entity.AbaStartDigit = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStartDigit).GetAsShort();
      else
        Entity.AbaStartDigit = 0;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.AbaStartDigit, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStartDigit).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStopDigit).IsNull == false)
        Entity.AbaStopDigit = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStopDigit).GetAsShort();
      else
        Entity.AbaStopDigit = 0;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.AbaStopDigit, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStopDigit).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaFoldOption).IsNull == false)
        Entity.AbaFoldOption = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaFoldOption).GetAsBool();
      else
        Entity.AbaFoldOption = false;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.AbaFoldOption, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaFoldOption).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStartBit).IsNull == false)
        Entity.WiegandStartBit = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStartBit).GetAsShort();
      else
        Entity.WiegandStartBit = 0;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.WiegandStartBit, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStartBit).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStopBit).IsNull == false)
        Entity.WiegandStopBit = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStopBit).GetAsShort();
      else
        Entity.WiegandStopBit = 0;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.WiegandStopBit, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStopBit).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStartBit).IsNull == false)
        Entity.CardaxStartBit = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStartBit).GetAsShort();
      else
        Entity.CardaxStartBit = 0;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.CardaxStartBit, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStartBit).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStopBit).IsNull == false)
        Entity.CardaxStopBit = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStopBit).GetAsShort();
      else
        Entity.CardaxStopBit = 0;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.CardaxStopBit, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStopBit).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts).IsNull == false)
        Entity.LockoutAfterInvalidAttempts = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts).GetAsShort();
      else
        Entity.LockoutAfterInvalidAttempts = 0;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutDurationSeconds).IsNull == false)
        Entity.LockoutDurationSeconds = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutDurationSeconds).GetAsInteger();
      else
        Entity.LockoutDurationSeconds = 0;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.LockoutDurationSeconds, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutDurationSeconds).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessRuleOverrideTimeout).IsNull == false)
        Entity.AccessRuleOverrideTimeout = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessRuleOverrideTimeout).GetAsShort();
      else
        Entity.AccessRuleOverrideTimeout = 0;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.AccessRuleOverrideTimeout, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessRuleOverrideTimeout).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UnlimitedCredentialTimeout).IsNull == false)
        Entity.UnlimitedCredentialTimeout = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UnlimitedCredentialTimeout).GetAsShort();
      else
        Entity.UnlimitedCredentialTimeout = 0;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.UnlimitedCredentialTimeout, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UnlimitedCredentialTimeout).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeZoneId).IsNull == false)
        Entity.TimeZoneId = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeZoneId).GetAsString();
      else
        Entity.TimeZoneId = string.Empty;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.TimeZoneId, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeZoneId).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.BinaryResourceUid).IsNull == false)
        Entity.BinaryResourceUid = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.BinaryResourceUid).GetAsGuid();
      else
        Entity.BinaryResourceUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.BinaryResourceUid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.BinaryResourceUid).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid).IsNull == false)
        Entity.CrisisActivateInputOutputGroupUid = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid).GetAsGuid();
      else
        Entity.CrisisActivateInputOutputGroupUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid).IsNull == false)
        Entity.CrisisResetInputOutputGroupUid = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid).GetAsGuid();
      else
        Entity.CrisisResetInputOutputGroupUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid).IsNull == false)
        Entity.AccessPortalLockedLedBehaviorModeUid = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid).GetAsGuid();
      else
        Entity.AccessPortalLockedLedBehaviorModeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid).IsNull == false)
        Entity.AccessPortalUnlockedLedBehaviorModeUid = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid).GetAsGuid();
      else
        Entity.AccessPortalUnlockedLedBehaviorModeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalTypeUid).IsNull == false)
        Entity.AccessPortalTypeUid = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalTypeUid).GetAsGuid();
      else
        Entity.AccessPortalTypeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.AccessPortalTypeUid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalTypeUid).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TemplateAccessPortalUid).IsNull == false)
        Entity.TemplateAccessPortalUid = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TemplateAccessPortalUid).GetAsGuid();
      else
        Entity.TemplateAccessPortalUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.TemplateAccessPortalUid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TemplateAccessPortalUid).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaClipOption).IsNull == false)
        Entity.AbaClipOption = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaClipOption).GetAsBool();
      else
        Entity.AbaClipOption = false;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.AbaClipOption, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaClipOption).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CurrentTimeForCluster).IsNull == false)
        Entity.CurrentTimeForCluster = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CurrentTimeForCluster).GetAsDate();
      else
        Entity.CurrentTimeForCluster = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.CurrentTimeForCluster, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CurrentTimeForCluster).Value);

      if (ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterGroupId).IsNull == false)
        Entity.ClusterGroupId = ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterGroupId).GetAsInteger();
      else
        Entity.ClusterGroupId = 0;
      Entity.SetOriginalValueForProperty(ClusterPDSAValidator.ColumnNames.ClusterGroupId, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterGroupId).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>ClusterPDSA</returns>
    public ClusterPDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new ClusterPDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement, or SELECT stored procedure based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ClusterPDSA_SelectAll");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByClusterNumber:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ClusterPDSA_ByClusterNumber");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByClusterTypeUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ClusterPDSA_ByClusterTypeUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByEntityId:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ClusterPDSA_ByEntityId");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.BySiteUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ClusterPDSA_BySiteUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ListBox:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ClusterPDSA_SelectListBox");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.PrimaryKey:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ClusterPDSA_SelectByPK");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.Search:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ClusterPDSA_SelectSearch");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByClusterGroupIdAndNumber:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ClusterPDSA_ByClusterGroupIdAndNumber");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByClusterGroupId:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ClusterPDSA_ByClusterGroupId");
          }
          else
          {
            
          }
          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region InsertSQL Method
    /// <summary>
    /// Builds the SQL for the INSERT statement, or INSERT stored procedure based on the InsertFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string InsertSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (InsertFilter)
      {
        case InsertFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ClusterPDSA_Insert");
          }
          else
          {
            
          }
            
          break;
        
        case InsertFilters.Custom:
          sb.Append(InsertCustom);
          
          break;
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region UpdateSQL Method
    /// <summary>
    /// Builds the SQL for the UPDATE statement, or UPDATE stored procedure based on the UpdateFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string UpdateSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (UpdateFilter)
      {
        case UpdateFilters.PrimaryKey:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ClusterPDSA_Update");
          }
          else
          {
            
          }
          
          break;
        case UpdateFilters.UpdateConcurrency:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ClusterPDSA_UpdateConcurrency");
          }
          else
          {
            
          }
          
          break;
        
        case UpdateFilters.Custom:
          sb.Append(UpdateCustom);
          
          break;
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region DeleteByPK Method
    /// <summary>
    /// Delete a record from the table based on the primary key value that is passed in.
    /// </summary>
    /// <param name="clusterUid">The value of the primary key of the row to delete</param>
    /// <returns>int</returns>
    public int DeleteByPK(Guid clusterUid)
    {
      DeleteFilter = DeleteFilters.DeleteByPK;
      Entity.ClusterUid = clusterUid;      
      
      // If using Audit Tracking, need to load the record first
      if (UseAuditTracking)
        LoadByPK(clusterUid);

      RowsAffected = Delete();

      return RowsAffected;
    }
    #endregion

    #region DeleteSQL Method
    /// <summary>
    /// Builds the SQL for the DELETE statement, or DELETE stored procedure. You can set the WhereFilter property to selectively delete rows from the table.
    /// </summary>
    /// <returns>string</returns>
    public override string DeleteSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (DeleteFilter)
      {
        case DeleteFilters.DeleteByPK:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ClusterPDSA_DeleteByPK");
          }
          else
          {
            
          }
          
          break;

        case DeleteFilters.Custom:
          sb.Append(DeleteCustom);

          break;          
      }

      if(!UseStoredProcs)
      {
        sb.Append(WhereClauseSQL());
      }
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL, or the name of the stored procedure, that will count the number of rows.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.ClusterPDSA_RowCount");
          }
          else
          {
            
          }
          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      if(!UseStoredProcs)
      {
        sb.Append(WhereClauseSQL());
      }
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region LoadByPK Method
    /// <summary>
    /// Load a row of data in the Entity properties. Returns a value greater than 0 if it finds the record.
    /// </summary>
    /// <param name="clusterUid">The value of the primary key of the row to load</param>
    /// <returns>Int32</returns>
    public int LoadByPK(Guid clusterUid)
    {
      SelectFilter = SelectFilters.PrimaryKey;
      Entity.ClusterUid = clusterUid;      

      // Load Data into Properties
      RowsAffected = Load();

      // Reset all Collection Properties
      ResetCollectionProperties();
      
      return RowsAffected;
    }
    #endregion
    
    
    #region Updated Method
    /// <summary>
    /// This method is called after a successful update
    /// </summary>
    protected override void Updated()
    {
      Entity.ConcurrencyValue += Convert.ToInt16(1);
    }
    #endregion

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
         
          break;
        case SelectFilters.ByClusterNumber:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ClusterNumber", DbType.Int32, Entity.ClusterNumber));
         
          break;
        case SelectFilters.ByClusterTypeUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ClusterTypeUid", DbType.Guid, Entity.ClusterTypeUid));
         
          break;
        case SelectFilters.ByEntityId:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@EntityId", DbType.Guid, Entity.EntityId));
         
          break;
        case SelectFilters.BySiteUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@SiteUid", DbType.Guid, Entity.SiteUid));
         
          break;
        case SelectFilters.ListBox:
         
          break;
        case SelectFilters.PrimaryKey:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ClusterUid", DbType.Guid, Entity.ClusterUid));
         
          break;
        case SelectFilters.Search:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ClusterName", DbType.String, Entity.ClusterName));
         
          break;
        case SelectFilters.ByClusterGroupIdAndNumber:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ClusterGroupId", DbType.Int32, Entity.ClusterGroupId));
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ClusterNumber", DbType.Int32, Entity.ClusterNumber));
         
          break;
        case SelectFilters.ByClusterGroupId:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ClusterGroupId", DbType.Int32, Entity.ClusterGroupId));
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion


    #region SetModificationCommandParameters Method
    /// <summary>
    /// Called to build any parameters prior to submitting an INSERT, UPDATE, or DELETE statement.
    /// </summary>
    protected override void SetModificationCommandParameters()
    {    
      switch (DataModificationAction)
      {
        case PDSADataModificationState.Delete:
          switch (DeleteFilter)
          {
            case DeleteFilters.DeleteByPK:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ClusterUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
          }

          break;

        case PDSADataModificationState.Insert:
          if (PrimaryKeyType == PDSAPrimaryKeyType.PDSA)
          {
            if (PrimaryKeyGenerate == true)
            {
              //  Get New Primary Key from pdsaTableIds
              PrimaryKeySet(PKGetFromPDSATableIds(PDSALoginName));
            }
          }

          switch (InsertFilter)
          {
            case InsertFilters.All:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ClusterUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ClusterTypeUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterTypeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ClusterNumber", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ClusterName", DbType.String, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InsertName", DbType.String, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.InsertName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InsertDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.InsertDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateName", DbType.String, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ConcurrencyValue).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@EntityId", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.EntityId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SiteUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.SiteUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CredentialDataLengthUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CredentialDataLengthUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@TimeScheduleTypeUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeScheduleTypeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@IsActive", DbType.Boolean, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.IsActive).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AbaStartDigit", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStartDigit).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AbaStopDigit", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStopDigit).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AbaFoldOption", DbType.Boolean, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaFoldOption).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@WiegandStartBit", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStartBit).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@WiegandStopBit", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStopBit).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CardaxStartBit", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStartBit).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CardaxStopBit", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStopBit).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LockoutAfterInvalidAttempts", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LockoutDurationSeconds", DbType.Int32, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutDurationSeconds).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessRuleOverrideTimeout", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessRuleOverrideTimeout).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UnlimitedCredentialTimeout", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UnlimitedCredentialTimeout).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@TimeZoneId", DbType.String, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeZoneId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@BinaryResourceUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.BinaryResourceUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CrisisActivateInputOutputGroupUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CrisisResetInputOutputGroupUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalLockedLedBehaviorModeUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalUnlockedLedBehaviorModeUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalTypeUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalTypeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@TemplateAccessPortalUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TemplateAccessPortalUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AbaClipOption", DbType.Boolean, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaClipOption).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ClusterGroupId", DbType.Int32, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterGroupId).Value));
              
              break;
          }

          break;

        case PDSADataModificationState.Update:
          switch (UpdateFilter)
          {
            case UpdateFilters.PrimaryKey:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ClusterUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ClusterTypeUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterTypeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ClusterNumber", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterNumber).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ClusterName", DbType.String, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateName", DbType.String, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@EntityId", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.EntityId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SiteUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.SiteUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CredentialDataLengthUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CredentialDataLengthUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@TimeScheduleTypeUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeScheduleTypeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@IsActive", DbType.Boolean, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.IsActive).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AbaStartDigit", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStartDigit).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AbaStopDigit", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStopDigit).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AbaFoldOption", DbType.Boolean, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaFoldOption).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@WiegandStartBit", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStartBit).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@WiegandStopBit", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStopBit).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CardaxStartBit", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStartBit).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CardaxStopBit", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStopBit).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LockoutAfterInvalidAttempts", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LockoutDurationSeconds", DbType.Int32, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutDurationSeconds).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessRuleOverrideTimeout", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessRuleOverrideTimeout).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UnlimitedCredentialTimeout", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.UnlimitedCredentialTimeout).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@TimeZoneId", DbType.String, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeZoneId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@BinaryResourceUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.BinaryResourceUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CrisisActivateInputOutputGroupUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@CrisisResetInputOutputGroupUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalLockedLedBehaviorModeUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalUnlockedLedBehaviorModeUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalTypeUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalTypeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@TemplateAccessPortalUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.TemplateAccessPortalUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AbaClipOption", DbType.Boolean, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaClipOption).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ClusterGroupId", DbType.Int32, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterGroupId).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
            case UpdateFilters.UpdateConcurrency:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ClusterUid", DbType.Guid, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(ClusterPDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
          }
          break;
      }
    }
    #endregion
  }
}
