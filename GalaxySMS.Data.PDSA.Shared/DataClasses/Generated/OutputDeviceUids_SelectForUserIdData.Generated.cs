using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// This class calls the stored procedure OutputDeviceUids_SelectForUserIdPDSA
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public class OutputDeviceUids_SelectForUserIdPDSAData : PDSAStoredProcReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the OutputDeviceUids_SelectForUserIdPDSAData class
    /// </summary>
    public OutputDeviceUids_SelectForUserIdPDSAData() : base()
    {
      Entity = new OutputDeviceUids_SelectForUserIdPDSA();
      ValidatorObject = new  OutputDeviceUids_SelectForUserIdPDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the OutputDeviceUids_SelectForUserIdPDSAData class
    /// </summary>
    /// <param name="entity">An instance of a OutputDeviceUids_SelectForUserIdPDSA</param>
    public OutputDeviceUids_SelectForUserIdPDSAData(OutputDeviceUids_SelectForUserIdPDSA entity) : base()
    {
      Entity = entity;
      ValidatorObject = new OutputDeviceUids_SelectForUserIdPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the OutputDeviceUids_SelectForUserIdPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a OutputDeviceUids_SelectForUserIdPDSA</param>
    public OutputDeviceUids_SelectForUserIdPDSAData(PDSADataProvider dataProvider,
      OutputDeviceUids_SelectForUserIdPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new  OutputDeviceUids_SelectForUserIdPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the OutputDeviceUids_SelectForUserIdPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a OutputDeviceUids_SelectForUserIdPDSA</param>
    /// <param name="validator">An instance of a OutputDeviceUids_SelectForUserIdPDSAValidator</param>
    public OutputDeviceUids_SelectForUserIdPDSAData(PDSADataProvider dataProvider,
      OutputDeviceUids_SelectForUserIdPDSA entity, OutputDeviceUids_SelectForUserIdPDSAValidator validator)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Public Property
    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public OutputDeviceUids_SelectForUserIdPDSA Entity { get; set; }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "OutputDeviceUids_SelectForUserIdPDSAData";
      StoredProcName = "OutputDeviceUids_SelectForUserId";
      SchemaName = "GCS";

      // Create Parameters
      InitParameters();

      // Create Data Columns
      InitDataColumns();
    }
    #endregion

   #region InitParameters Method
    /// <summary>
    /// Creates all the parameters for the stored procedure.
    /// </summary>
    protected override void InitParameters()
    {
      PDSADataParameter param;

      // Clear all parameters each time
      AllParameters.Clear();

      // Create each parameter object and add to Parameters Collection
      param = new PDSADataParameter();
      param.ParameterName = OutputDeviceUids_SelectForUserIdPDSAValidator.ParameterNames.UserId;
      param.DBType = DbType.Guid;
      param.ParamDirection = ParameterDirection.Input;
      param.IsRefCursor = false;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = OutputDeviceUids_SelectForUserIdPDSAValidator.ParameterNames.RETURNVALUE;
      param.DBType = DbType.Int32;
      param.ParamDirection = ParameterDirection.ReturnValue;
      param.IsRefCursor = false;
      AllParameters.Add(param);

  
      AddReturnValueParameterToCollection();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes the Data Columns Collection for each field returned from the stored procedure.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSADataColumn dc;

      // Create each data column
      dc = PDSADataColumn.CreateDataColumn(OutputDeviceUids_SelectForUserIdPDSAValidator.ColumnNames.OutputDeviceUid, GetResourceMessage("GCS_OutputDeviceUids_SelectForUserIdPDSA_OutputDeviceUid_Header", "Output Device Uid"), false, typeof(Guid), DbType.Guid);
      AllColumns.Add(dc);
    }
    #endregion

    #region EntityDataToParameterCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Parameters collection
    /// </summary>
    protected override void EntityDataToParameterCollection()
    {
      if (AllParameters.GetByName(OutputDeviceUids_SelectForUserIdPDSAValidator.ParameterNames.UserId).SetAsNull == false)
        AllParameters.GetByName(OutputDeviceUids_SelectForUserIdPDSAValidator.ParameterNames.UserId).Value = Entity.UserId;
      else
        AllParameters.GetByName(OutputDeviceUids_SelectForUserIdPDSAValidator.ParameterNames.UserId).Value = System.Data.SqlTypes.SqlGuid.Null;
    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      if (AllColumns.GetByName(OutputDeviceUids_SelectForUserIdPDSAValidator.ColumnNames.OutputDeviceUid).SetAsNull == false)
        AllColumns.GetByName(OutputDeviceUids_SelectForUserIdPDSAValidator.ColumnNames.OutputDeviceUid).Value = Entity.OutputDeviceUid;
      else
        AllColumns.GetByName(OutputDeviceUids_SelectForUserIdPDSAValidator.ColumnNames.OutputDeviceUid).Value = Guid.Empty;
     
    }
    #endregion

    #region OutputParametersToEntityData Method
    /// <summary>
    /// Moves the output parameters from the Parameters collection into the Entity class.
    /// </summary>
    protected override void OutputParametersToEntityData()
    {
      if (AllParameters.GetByName(OutputDeviceUids_SelectForUserIdPDSAValidator.ParameterNames.RETURNVALUE).IsValueNull == false)
        Entity.RETURNVALUE = AllParameters.GetByName(OutputDeviceUids_SelectForUserIdPDSAValidator.ParameterNames.RETURNVALUE).GetAsInteger();
      else
        Entity.RETURNVALUE = 0;
    }
    #endregion
    
    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (AllColumns.GetByName(OutputDeviceUids_SelectForUserIdPDSAValidator.ColumnNames.OutputDeviceUid).IsNull == false)
        Entity.OutputDeviceUid = AllColumns.GetByName(OutputDeviceUids_SelectForUserIdPDSAValidator.ColumnNames.OutputDeviceUid).GetAsGuid();
      else
        Entity.OutputDeviceUid = Guid.Empty;

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>OutputDeviceUids_SelectForUserIdPDSA</returns>
    public OutputDeviceUids_SelectForUserIdPDSA CreateEntityFromDataRow(DataRow dr)
    {
      OutputDeviceUids_SelectForUserIdPDSA entity = new OutputDeviceUids_SelectForUserIdPDSA();

      if (dr.Table.Columns.Contains(OutputDeviceUids_SelectForUserIdPDSAValidator.ColumnNames.OutputDeviceUid))
      {
        if (dr[OutputDeviceUids_SelectForUserIdPDSAValidator.ColumnNames.OutputDeviceUid] != DBNull.Value)
          entity.OutputDeviceUid = PDSAProperty.ConvertToGuid(dr[OutputDeviceUids_SelectForUserIdPDSAValidator.ColumnNames.OutputDeviceUid]);
      }
      entity.IsDirty = false;

      return entity;
    }
    #endregion

    #region ParameterNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the OutputDeviceUids_SelectForUserIdPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ParameterNames
    {
    /// <summary>
    /// Returns '@UserId'
    /// </summary>
    public static string UserId = "@UserId";
    /// <summary>
    /// Returns '@RETURN_VALUE'
    /// </summary>
    public static string RETURNVALUE = "@RETURN_VALUE";
    }
    #endregion
  }
}
