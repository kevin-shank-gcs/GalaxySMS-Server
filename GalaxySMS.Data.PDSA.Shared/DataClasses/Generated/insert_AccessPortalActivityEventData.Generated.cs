using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// This class calls the stored procedure insert_AccessPortalActivityEventPDSAData
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public class insert_AccessPortalActivityEventPDSAData : PDSAStoredProcExecute
  {
    #region Constructors
    /// <summary>
    /// Constructor for the insert_AccessPortalActivityEventPDSAData class
    /// </summary>
    public insert_AccessPortalActivityEventPDSAData() : base()
    {
      Entity = new insert_AccessPortalActivityEventPDSA();
      ValidatorObject = new  insert_AccessPortalActivityEventPDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the insert_AccessPortalActivityEventPDSAData class
    /// </summary>
    /// <param name="entity">An instance of a insert_AccessPortalActivityEventPDSA</param>
    public insert_AccessPortalActivityEventPDSAData(insert_AccessPortalActivityEventPDSA entity) : base()
    {
      Entity = entity;
      ValidatorObject = new insert_AccessPortalActivityEventPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the insert_AccessPortalActivityEventPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a insert_AccessPortalActivityEventPDSA</param>
    public insert_AccessPortalActivityEventPDSAData(PDSADataProvider dataProvider,
      insert_AccessPortalActivityEventPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new  insert_AccessPortalActivityEventPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the insert_AccessPortalActivityEventPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a insert_AccessPortalActivityEventPDSA</param>
    /// <param name="validator">An instance of a insert_AccessPortalActivityEventPDSAValidator</param>
    public insert_AccessPortalActivityEventPDSAData(PDSADataProvider dataProvider,
      insert_AccessPortalActivityEventPDSA entity, insert_AccessPortalActivityEventPDSAValidator validator)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Public Property
    /// <summary>
    /// Get/Set the Entity class that will be used to get and set parameters and columns for this data class.
    /// </summary>
    public insert_AccessPortalActivityEventPDSA Entity { get; set; }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "insert_AccessPortalActivityEventPDSAData";
      StoredProcName = "insert_AccessPortalActivityEvent";
      SchemaName = "GCS";

      // Move validator Properties collection into the Parameters collection
      PropertiesToParameters(ValidatorObject.Properties);

      // Create Parameters
      InitParameters();
    }
    #endregion
    
   #region InitParameters Method
    /// <summary>
    /// Creates all the parameters for the stored procedure.
    /// </summary>
    protected override void InitParameters()
    {
      PDSADataParameter param;

      // Clear all parameters each time
      AllParameters.Clear();

      // Create each parameter object and add to Parameters Collection
      param = new PDSADataParameter();
      param.ParameterName = insert_AccessPortalActivityEventPDSAData.ParameterNames.AccessPortalActivityEventUid;
      param.DBType = DbType.Guid;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_AccessPortalActivityEventPDSAData.ParameterNames.GalaxyActivityEventTypeUid;
      param.DBType = DbType.Guid;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_AccessPortalActivityEventPDSAData.ParameterNames.AccessPortalUid;
      param.DBType = DbType.Guid;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_AccessPortalActivityEventPDSAData.ParameterNames.CredentialUid;
      param.DBType = DbType.Guid;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_AccessPortalActivityEventPDSAData.ParameterNames.PersonUid;
      param.DBType = DbType.Guid;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_AccessPortalActivityEventPDSAData.ParameterNames.CpuUid;
      param.DBType = DbType.Guid;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_AccessPortalActivityEventPDSAData.ParameterNames.CpuNumber;
      param.DBType = DbType.Int16;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_AccessPortalActivityEventPDSAData.ParameterNames.ActivityDateTime;
      param.DBType = DbType.DateTimeOffset;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_AccessPortalActivityEventPDSAData.ParameterNames.BufferIndex;
      param.DBType = DbType.Int32;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_AccessPortalActivityEventPDSAData.ParameterNames.InsertDate;
      param.DBType = DbType.DateTimeOffset;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_AccessPortalActivityEventPDSAData.ParameterNames.eventType;
      param.DBType = DbType.String;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_AccessPortalActivityEventPDSAData.ParameterNames.CredentialBytes;
      param.DBType = DbType.Binary;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_AccessPortalActivityEventPDSAData.ParameterNames.IsAlarmEvent;
      param.DBType = DbType.Boolean;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_AccessPortalActivityEventPDSAData.ParameterNames.AlarmPriority;
      param.DBType = DbType.Int32;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_AccessPortalActivityEventPDSAData.ParameterNames.NoteUid;
      param.DBType = DbType.Guid;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_AccessPortalActivityEventPDSAData.ParameterNames.BinaryResourceUid;
      param.DBType = DbType.Guid;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.Input;
      AllParameters.Add(param);

      param = new PDSADataParameter();
      param.ParameterName = insert_AccessPortalActivityEventPDSAData.ParameterNames.RETURNVALUE;
      param.DBType = DbType.Int32;
      param.IsRefCursor = false;
      param.ParamDirection = ParameterDirection.ReturnValue;
      AllParameters.Add(param);


      AddReturnValueParameterToCollection();
    }
    #endregion

    #region EntityDataToParameterCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Parameters collection
    /// </summary>
    protected override void EntityDataToParameterCollection()
    {
      if (AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.AccessPortalActivityEventUid).SetAsNull == false)
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.AccessPortalActivityEventUid).Value = Entity.AccessPortalActivityEventUid;
      else
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.AccessPortalActivityEventUid).Value = System.Data.SqlTypes.SqlGuid.Null;
      if (AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.GalaxyActivityEventTypeUid).SetAsNull == false)
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.GalaxyActivityEventTypeUid).Value = Entity.GalaxyActivityEventTypeUid;
      else
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.GalaxyActivityEventTypeUid).Value = System.Data.SqlTypes.SqlGuid.Null;
      if (AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.AccessPortalUid).SetAsNull == false)
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.AccessPortalUid).Value = Entity.AccessPortalUid;
      else
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.AccessPortalUid).Value = System.Data.SqlTypes.SqlGuid.Null;
      if (AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.CredentialUid).SetAsNull == false)
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.CredentialUid).Value = Entity.CredentialUid;
      else
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.CredentialUid).Value = System.Data.SqlTypes.SqlGuid.Null;
      if (AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.PersonUid).SetAsNull == false)
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.PersonUid).Value = Entity.PersonUid;
      else
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.PersonUid).Value = System.Data.SqlTypes.SqlGuid.Null;
      if (AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.CpuUid).SetAsNull == false)
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.CpuUid).Value = Entity.CpuUid;
      else
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.CpuUid).Value = System.Data.SqlTypes.SqlGuid.Null;
      if (AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.CpuNumber).SetAsNull == false)
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.CpuNumber).Value = Entity.CpuNumber;
      else
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.CpuNumber).Value = System.Data.SqlTypes.SqlInt16.Null;
      if (AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.ActivityDateTime).SetAsNull == false)
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.ActivityDateTime).Value = Entity.ActivityDateTime;
      else
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.ActivityDateTime).Value = System.Data.SqlTypes.SqlDateTime.Null;
      if (AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.BufferIndex).SetAsNull == false)
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.BufferIndex).Value = Entity.BufferIndex;
      else
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.BufferIndex).Value = System.Data.SqlTypes.SqlInt32.Null;
      if (AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.InsertDate).SetAsNull == false)
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.InsertDate).Value = Entity.InsertDate;
      else
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.InsertDate).Value = System.Data.SqlTypes.SqlDateTime.Null;
      if (AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.eventType).SetAsNull == false)
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.eventType).Value = Entity.eventType;
      else
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.eventType).Value = System.Data.SqlTypes.SqlString.Null;
      if (AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.CredentialBytes).SetAsNull == false)
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.CredentialBytes).Value = Entity.CredentialBytes;
      else
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.CredentialBytes).Value = System.Data.SqlTypes.SqlBinary.Null;
      if (AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.IsAlarmEvent).SetAsNull == false)
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.IsAlarmEvent).Value = Entity.IsAlarmEvent;
      else
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.IsAlarmEvent).Value = System.Data.SqlTypes.SqlBoolean.Null;
      if (AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.AlarmPriority).SetAsNull == false)
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.AlarmPriority).Value = Entity.AlarmPriority;
      else
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.AlarmPriority).Value = System.Data.SqlTypes.SqlInt32.Null;
      if (AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.NoteUid).SetAsNull == false)
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.NoteUid).Value = Entity.NoteUid;
      else
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.NoteUid).Value = System.Data.SqlTypes.SqlGuid.Null;
      if (AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.BinaryResourceUid).SetAsNull == false)
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.BinaryResourceUid).Value = Entity.BinaryResourceUid;
      else
        AllParameters.GetByName(insert_AccessPortalActivityEventPDSAValidator.ParameterNames.BinaryResourceUid).Value = System.Data.SqlTypes.SqlGuid.Null;
    }
    #endregion
    
    #region OutputParametersToEntityData Method
    /// <summary>
    /// Moves the output parameters from the Parameters collection into the Entity class.
    /// </summary>
    protected override void OutputParametersToEntityData()
    {
      if (AllParameters.GetByName(insert_AccessPortalActivityEventPDSAData.ParameterNames.RETURNVALUE).IsValueNull == false)
        Entity.RETURNVALUE = AllParameters.GetByName(insert_AccessPortalActivityEventPDSAData.ParameterNames.RETURNVALUE).GetAsInteger();
      else
        Entity.RETURNVALUE = 0;
    }
    #endregion
        
    #region SetDirtyFlag Methods
    /// <summary>
    /// This is called with a 'false' value after each successful Insert/Update method call.
    /// </summary>
    /// <param name="isDirty">Called with 'false' by default</param>
    protected override void SetDirtyFlag(bool isDirty)
    {
      Entity.IsDirty = isDirty;
    }
    #endregion
       
    #region ParameterNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the insert_AccessPortalActivityEventPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ParameterNames
    {
    /// <summary>
    /// Returns '@AccessPortalActivityEventUid'
    /// </summary>
    public static string AccessPortalActivityEventUid = "@AccessPortalActivityEventUid";
    /// <summary>
    /// Returns '@GalaxyActivityEventTypeUid'
    /// </summary>
    public static string GalaxyActivityEventTypeUid = "@GalaxyActivityEventTypeUid";
    /// <summary>
    /// Returns '@AccessPortalUid'
    /// </summary>
    public static string AccessPortalUid = "@AccessPortalUid";
    /// <summary>
    /// Returns '@CredentialUid'
    /// </summary>
    public static string CredentialUid = "@CredentialUid";
    /// <summary>
    /// Returns '@PersonUid'
    /// </summary>
    public static string PersonUid = "@PersonUid";
    /// <summary>
    /// Returns '@CpuUid'
    /// </summary>
    public static string CpuUid = "@CpuUid";
    /// <summary>
    /// Returns '@CpuNumber'
    /// </summary>
    public static string CpuNumber = "@CpuNumber";
    /// <summary>
    /// Returns '@ActivityDateTime'
    /// </summary>
    public static string ActivityDateTime = "@ActivityDateTime";
    /// <summary>
    /// Returns '@BufferIndex'
    /// </summary>
    public static string BufferIndex = "@BufferIndex";
    /// <summary>
    /// Returns '@InsertDate'
    /// </summary>
    public static string InsertDate = "@InsertDate";
    /// <summary>
    /// Returns '@eventType'
    /// </summary>
    public static string eventType = "@eventType";
    /// <summary>
    /// Returns '@CredentialBytes'
    /// </summary>
    public static string CredentialBytes = "@CredentialBytes";
    /// <summary>
    /// Returns '@IsAlarmEvent'
    /// </summary>
    public static string IsAlarmEvent = "@IsAlarmEvent";
    /// <summary>
    /// Returns '@AlarmPriority'
    /// </summary>
    public static string AlarmPriority = "@AlarmPriority";
    /// <summary>
    /// Returns '@NoteUid'
    /// </summary>
    public static string NoteUid = "@NoteUid";
    /// <summary>
    /// Returns '@BinaryResourceUid'
    /// </summary>
    public static string BinaryResourceUid = "@BinaryResourceUid";
    /// <summary>
    /// Returns '@RETURN_VALUE'
    /// </summary>
    public static string RETURNVALUE = "@RETURN_VALUE";
    }
    #endregion
  }
}
