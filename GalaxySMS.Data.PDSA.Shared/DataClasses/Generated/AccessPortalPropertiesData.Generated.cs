using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Add/Edit/Delete/Select data from the AccessPortalPropertiesPDSA table.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class AccessPortalPropertiesPDSAData : PDSADataClassTable
  {
    #region Constructors
    /// <summary>
    /// Constructor for the AccessPortalPropertiesPDSAData class
    /// </summary>
    public AccessPortalPropertiesPDSAData() : base()
    {
      Entity = new AccessPortalPropertiesPDSA();
      ValidatorObject = new AccessPortalPropertiesPDSAValidator(Entity);

      Init();
    }

    /// <summary>
    /// Constructor for the AccessPortalPropertiesPDSAData class
    /// </summary>
    /// <param name="entity">An instance of a AccessPortalPropertiesPDSA</param>
    public AccessPortalPropertiesPDSAData(AccessPortalPropertiesPDSA entity) : base(entity)
    {
      Entity = entity;
      ValidatorObject = new AccessPortalPropertiesPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the AccessPortalPropertiesPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a AccessPortalPropertiesPDSA</param>
    public AccessPortalPropertiesPDSAData(PDSADataProvider dataProvider,
      AccessPortalPropertiesPDSA entity)
      : base(dataProvider, entity)
    {
      Entity = entity;
      ValidatorObject = new AccessPortalPropertiesPDSAValidator(Entity);
            
      Init();
    }
    
    /// <summary>
    /// Constructor for the AccessPortalPropertiesPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a AccessPortalPropertiesPDSA</param>
    /// <param name="validator">An instance of a AccessPortalPropertiesPDSAValidator</param>
    public AccessPortalPropertiesPDSAData(PDSADataProvider dataProvider,
      AccessPortalPropertiesPDSA entity, AccessPortalPropertiesPDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'ByAccessPortalContactSupervisionTypeUid' SelectFilter
      /// </summary>
      ByAccessPortalContactSupervisionTypeUid
      ,
      /// <summary>
      /// 'ByAccessPortalDeferToServerBehaviorUid' SelectFilter
      /// </summary>
      ByAccessPortalDeferToServerBehaviorUid
      ,
      /// <summary>
      /// 'ByAccessPortalElevatorControlTypeUid' SelectFilter
      /// </summary>
      ByAccessPortalElevatorControlTypeUid
      ,
      /// <summary>
      /// 'ByAccessPortalLockPushButtonBehaviorUid' SelectFilter
      /// </summary>
      ByAccessPortalLockPushButtonBehaviorUid
      ,
      /// <summary>
      /// 'ByAccessPortalNoServerReplyBehaviorUid' SelectFilter
      /// </summary>
      ByAccessPortalNoServerReplyBehaviorUid
      ,
      /// <summary>
      /// 'ByAccessPortalUid' SelectFilter
      /// </summary>
      ByAccessPortalUid
      ,
      /// <summary>
      /// 'ByElevatorRelayInterfaceBoardSectionUid' SelectFilter
      /// </summary>
      ByElevatorRelayInterfaceBoardSectionUid
      ,
      /// <summary>
      /// 'ByLiquidCrystalDisplayUid' SelectFilter
      /// </summary>
      ByLiquidCrystalDisplayUid
      ,
      /// <summary>
      /// 'ListBox' SelectFilter
      /// </summary>
      ListBox
      ,
      /// <summary>
      /// 'PrimaryKey' SelectFilter
      /// </summary>
      PrimaryKey
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// 'ByAccessPortalMultiFactorModeUid' SelectFilter
      /// </summary>
      ByAccessPortalMultiFactorModeUid
      ,
      /// <summary>
      /// A Custom Select Filter
      /// </summary>
      Custom
    }


    /// <summary>
    /// Enumeration for selecting an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
    /// </summary>
    public enum InsertFilters
    {
      
      /// <summary>
      /// 'All' InsertFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom InsertFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
    /// </summary>
    public enum UpdateFilters
    {
      
      /// <summary>
      /// 'PrimaryKey' UpdateFilter
      /// </summary>
      PrimaryKey
      ,
      /// <summary>
      /// 'UpdateConcurrency' UpdateFilter
      /// </summary>
      UpdateConcurrency
      ,
      /// <summary>
      /// A Custom UpdateFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a DELETE statement or DELETE stored procedure to execute when calling the Delete() method.
    /// </summary>
    public enum DeleteFilters
    {
      
      /// <summary>
      /// 'DeleteByPK' DeleteFilter
      /// </summary>
      DeleteByPK
      ,
      /// <summary>
      /// A Custom DeleteFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom RowCountFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL or Stored Procedure to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }

    
    /// <summary>
    /// Get/Set an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
    /// </summary>
    public InsertFilters InsertFilter { get; set; }

    private UpdateFilters mUpdateFilter;
    /// <summary>
    /// Get/Set an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
    /// </summary>
    public UpdateFilters UpdateFilter
    {
      get { return mUpdateFilter; }
      set
      {
        mUpdateFilter = value;
        if (mUpdateFilter == UpdateFilters.Custom)
          PerformValidation = false;
      }
    }
    /// <summary>
    /// Get/Set a DELETE statement or DELETE stored procedure to execute when calling the Delete() method. You might need to set a WhereFilter as well.
    /// </summary>
    public DeleteFilters DeleteFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Entity Property
    private AccessPortalPropertiesPDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public AccessPortalPropertiesPDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "AccessPortalPropertiesPDSAData";
      DBObjectName = "GCS.AccessPortalProperties";
      SchemaName = "GCS";
      PrimaryKeyType = PDSAPrimaryKeyType.GUID;
      PrimaryKeyGenerate = false;
      UseAuditTracking = DataProvider.UseDBAuditTracking;
      UseStoredProcs = DataProvider.UseStoredProcedures;
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;

      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Use this area to initialize any starting values for data in the Properties collection for each Entity property.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalPropertiesUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = true;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AutomaticForgivePassbackFrequencyUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PinRequiredModeUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalContactSupervisionTypeUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalDeferToServerBehaviorUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalNoServerReplyBehaviorUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalLockPushButtonBehaviorUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LiquidCrystalDisplayUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalElevatorControlTypeUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.OtisElevatorDecUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ElevatorRelayInterfaceBoardSectionUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalMultiFactorModeUid);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorNumber);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDelay);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDuration);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RecloseDuration);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AllowPassbackAccess);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireTwoValidCredentials);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockOnREX);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressIllegalOpenLog);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressOpenTooLongLog);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressClosedLog);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressREXLog);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LockWhenDoorCloses);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EnableDuress);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupNotify);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupCanDisable);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PINSpecifiesRecloseDuration);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.IgnoreNotInSystem);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ReaderSendsHeartbeat);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PhotoVerificationEnabled);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TimeAttendancePortal);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EMailEventsEnabled);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TransmitEventsEnabled);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.FileOutputEnabled);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertName);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateName);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateDate);
      prop.IsInsertable = true;
      prop.IsUpdatable = true;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);

      prop = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ConcurrencyValue);
      prop.IsInsertable = true;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = false;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalPropertiesUid).Value = Entity.AccessPortalPropertiesUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalPropertiesUid).SetAsNull == true)
        Entity.AccessPortalPropertiesUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalUid).Value = Entity.AccessPortalUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalUid).SetAsNull == true)
        Entity.AccessPortalUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AutomaticForgivePassbackFrequencyUid).Value = Entity.AutomaticForgivePassbackFrequencyUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AutomaticForgivePassbackFrequencyUid).SetAsNull == true)
        Entity.AutomaticForgivePassbackFrequencyUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PinRequiredModeUid).Value = Entity.PinRequiredModeUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PinRequiredModeUid).SetAsNull == true)
        Entity.PinRequiredModeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalContactSupervisionTypeUid).Value = Entity.AccessPortalContactSupervisionTypeUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalContactSupervisionTypeUid).SetAsNull == true)
        Entity.AccessPortalContactSupervisionTypeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalDeferToServerBehaviorUid).Value = Entity.AccessPortalDeferToServerBehaviorUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalDeferToServerBehaviorUid).SetAsNull == true)
        Entity.AccessPortalDeferToServerBehaviorUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalNoServerReplyBehaviorUid).Value = Entity.AccessPortalNoServerReplyBehaviorUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalNoServerReplyBehaviorUid).SetAsNull == true)
        Entity.AccessPortalNoServerReplyBehaviorUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalLockPushButtonBehaviorUid).Value = Entity.AccessPortalLockPushButtonBehaviorUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalLockPushButtonBehaviorUid).SetAsNull == true)
        Entity.AccessPortalLockPushButtonBehaviorUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LiquidCrystalDisplayUid).Value = Entity.LiquidCrystalDisplayUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LiquidCrystalDisplayUid).SetAsNull == true)
        Entity.LiquidCrystalDisplayUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalElevatorControlTypeUid).Value = Entity.AccessPortalElevatorControlTypeUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalElevatorControlTypeUid).SetAsNull == true)
        Entity.AccessPortalElevatorControlTypeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.OtisElevatorDecUid).Value = Entity.OtisElevatorDecUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.OtisElevatorDecUid).SetAsNull == true)
        Entity.OtisElevatorDecUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ElevatorRelayInterfaceBoardSectionUid).Value = Entity.ElevatorRelayInterfaceBoardSectionUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ElevatorRelayInterfaceBoardSectionUid).SetAsNull == true)
        Entity.ElevatorRelayInterfaceBoardSectionUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalMultiFactorModeUid).Value = Entity.AccessPortalMultiFactorModeUid;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalMultiFactorModeUid).SetAsNull == true)
        Entity.AccessPortalMultiFactorModeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorNumber).Value = Entity.DoorNumber;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorNumber).SetAsNull == true)
        Entity.DoorNumber = 0;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDelay).Value = Entity.UnlockDelay;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDelay).SetAsNull == true)
        Entity.UnlockDelay = 0;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDuration).Value = Entity.UnlockDuration;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDuration).SetAsNull == true)
        Entity.UnlockDuration = 0;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RecloseDuration).Value = Entity.RecloseDuration;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RecloseDuration).SetAsNull == true)
        Entity.RecloseDuration = 0;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AllowPassbackAccess).Value = Entity.AllowPassbackAccess;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AllowPassbackAccess).SetAsNull == true)
        Entity.AllowPassbackAccess = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireTwoValidCredentials).Value = Entity.RequireTwoValidCredentials;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireTwoValidCredentials).SetAsNull == true)
        Entity.RequireTwoValidCredentials = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockOnREX).Value = Entity.UnlockOnREX;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockOnREX).SetAsNull == true)
        Entity.UnlockOnREX = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressIllegalOpenLog).Value = Entity.SuppressIllegalOpenLog;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressIllegalOpenLog).SetAsNull == true)
        Entity.SuppressIllegalOpenLog = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressOpenTooLongLog).Value = Entity.SuppressOpenTooLongLog;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressOpenTooLongLog).SetAsNull == true)
        Entity.SuppressOpenTooLongLog = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressClosedLog).Value = Entity.SuppressClosedLog;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressClosedLog).SetAsNull == true)
        Entity.SuppressClosedLog = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressREXLog).Value = Entity.SuppressREXLog;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressREXLog).SetAsNull == true)
        Entity.SuppressREXLog = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs).Value = Entity.GenerateDoorContactChangeLogs;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs).SetAsNull == true)
        Entity.GenerateDoorContactChangeLogs = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LockWhenDoorCloses).Value = Entity.LockWhenDoorCloses;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LockWhenDoorCloses).SetAsNull == true)
        Entity.LockWhenDoorCloses = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EnableDuress).Value = Entity.EnableDuress;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EnableDuress).SetAsNull == true)
        Entity.EnableDuress = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupNotify).Value = Entity.DoorGroupNotify;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupNotify).SetAsNull == true)
        Entity.DoorGroupNotify = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupCanDisable).Value = Entity.DoorGroupCanDisable;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupCanDisable).SetAsNull == true)
        Entity.DoorGroupCanDisable = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay).Value = Entity.RelayOneOnDuringArmDelay;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay).SetAsNull == true)
        Entity.RelayOneOnDuringArmDelay = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock).Value = Entity.RequireValidAccessForAutoUnlock;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock).SetAsNull == true)
        Entity.RequireValidAccessForAutoUnlock = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PINSpecifiesRecloseDuration).Value = Entity.PINSpecifiesRecloseDuration;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PINSpecifiesRecloseDuration).SetAsNull == true)
        Entity.PINSpecifiesRecloseDuration = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen).Value = Entity.ValidAccessRequiresDoorOpen;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen).SetAsNull == true)
        Entity.ValidAccessRequiresDoorOpen = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount).Value = Entity.DontDecrementLimitedSwipeExpireCount;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount).SetAsNull == true)
        Entity.DontDecrementLimitedSwipeExpireCount = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.IgnoreNotInSystem).Value = Entity.IgnoreNotInSystem;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.IgnoreNotInSystem).SetAsNull == true)
        Entity.IgnoreNotInSystem = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ReaderSendsHeartbeat).Value = Entity.ReaderSendsHeartbeat;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ReaderSendsHeartbeat).SetAsNull == true)
        Entity.ReaderSendsHeartbeat = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PhotoVerificationEnabled).Value = Entity.PhotoVerificationEnabled;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PhotoVerificationEnabled).SetAsNull == true)
        Entity.PhotoVerificationEnabled = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TimeAttendancePortal).Value = Entity.TimeAttendancePortal;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TimeAttendancePortal).SetAsNull == true)
        Entity.TimeAttendancePortal = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EMailEventsEnabled).Value = Entity.EMailEventsEnabled;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EMailEventsEnabled).SetAsNull == true)
        Entity.EMailEventsEnabled = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TransmitEventsEnabled).Value = Entity.TransmitEventsEnabled;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TransmitEventsEnabled).SetAsNull == true)
        Entity.TransmitEventsEnabled = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.FileOutputEnabled).Value = Entity.FileOutputEnabled;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.FileOutputEnabled).SetAsNull == true)
        Entity.FileOutputEnabled = false;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertName).SetAsNull == true)
        Entity.InsertName = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertDate).SetAsNull == true)
        Entity.InsertDate = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateName).SetAsNull == true)
        Entity.UpdateName = string.Empty;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateDate).SetAsNull == true)
        Entity.UpdateDate = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull == true)
        Entity.ConcurrencyValue = 0;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalPropertiesUid).IsNull == false)
        Entity.AccessPortalPropertiesUid = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalPropertiesUid).GetAsGuid();
      else
        Entity.AccessPortalPropertiesUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalPropertiesUid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalPropertiesUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalUid).IsNull == false)
        Entity.AccessPortalUid = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalUid).GetAsGuid();
      else
        Entity.AccessPortalUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalUid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AutomaticForgivePassbackFrequencyUid).IsNull == false)
        Entity.AutomaticForgivePassbackFrequencyUid = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AutomaticForgivePassbackFrequencyUid).GetAsGuid();
      else
        Entity.AutomaticForgivePassbackFrequencyUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.AutomaticForgivePassbackFrequencyUid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AutomaticForgivePassbackFrequencyUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PinRequiredModeUid).IsNull == false)
        Entity.PinRequiredModeUid = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PinRequiredModeUid).GetAsGuid();
      else
        Entity.PinRequiredModeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.PinRequiredModeUid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PinRequiredModeUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalContactSupervisionTypeUid).IsNull == false)
        Entity.AccessPortalContactSupervisionTypeUid = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalContactSupervisionTypeUid).GetAsGuid();
      else
        Entity.AccessPortalContactSupervisionTypeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalContactSupervisionTypeUid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalContactSupervisionTypeUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalDeferToServerBehaviorUid).IsNull == false)
        Entity.AccessPortalDeferToServerBehaviorUid = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalDeferToServerBehaviorUid).GetAsGuid();
      else
        Entity.AccessPortalDeferToServerBehaviorUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalDeferToServerBehaviorUid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalDeferToServerBehaviorUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalNoServerReplyBehaviorUid).IsNull == false)
        Entity.AccessPortalNoServerReplyBehaviorUid = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalNoServerReplyBehaviorUid).GetAsGuid();
      else
        Entity.AccessPortalNoServerReplyBehaviorUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalNoServerReplyBehaviorUid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalNoServerReplyBehaviorUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalLockPushButtonBehaviorUid).IsNull == false)
        Entity.AccessPortalLockPushButtonBehaviorUid = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalLockPushButtonBehaviorUid).GetAsGuid();
      else
        Entity.AccessPortalLockPushButtonBehaviorUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalLockPushButtonBehaviorUid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalLockPushButtonBehaviorUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LiquidCrystalDisplayUid).IsNull == false)
        Entity.LiquidCrystalDisplayUid = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LiquidCrystalDisplayUid).GetAsGuid();
      else
        Entity.LiquidCrystalDisplayUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.LiquidCrystalDisplayUid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LiquidCrystalDisplayUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalElevatorControlTypeUid).IsNull == false)
        Entity.AccessPortalElevatorControlTypeUid = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalElevatorControlTypeUid).GetAsGuid();
      else
        Entity.AccessPortalElevatorControlTypeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalElevatorControlTypeUid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalElevatorControlTypeUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.OtisElevatorDecUid).IsNull == false)
        Entity.OtisElevatorDecUid = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.OtisElevatorDecUid).GetAsGuid();
      else
        Entity.OtisElevatorDecUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.OtisElevatorDecUid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.OtisElevatorDecUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ElevatorRelayInterfaceBoardSectionUid).IsNull == false)
        Entity.ElevatorRelayInterfaceBoardSectionUid = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ElevatorRelayInterfaceBoardSectionUid).GetAsGuid();
      else
        Entity.ElevatorRelayInterfaceBoardSectionUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.ElevatorRelayInterfaceBoardSectionUid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ElevatorRelayInterfaceBoardSectionUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalMultiFactorModeUid).IsNull == false)
        Entity.AccessPortalMultiFactorModeUid = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalMultiFactorModeUid).GetAsGuid();
      else
        Entity.AccessPortalMultiFactorModeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalMultiFactorModeUid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalMultiFactorModeUid).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorNumber).IsNull == false)
        Entity.DoorNumber = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorNumber).GetAsShort();
      else
        Entity.DoorNumber = 0;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorNumber, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorNumber).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDelay).IsNull == false)
        Entity.UnlockDelay = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDelay).GetAsInteger();
      else
        Entity.UnlockDelay = 0;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDelay, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDelay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDuration).IsNull == false)
        Entity.UnlockDuration = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDuration).GetAsInteger();
      else
        Entity.UnlockDuration = 0;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDuration, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDuration).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RecloseDuration).IsNull == false)
        Entity.RecloseDuration = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RecloseDuration).GetAsInteger();
      else
        Entity.RecloseDuration = 0;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.RecloseDuration, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RecloseDuration).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AllowPassbackAccess).IsNull == false)
        Entity.AllowPassbackAccess = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AllowPassbackAccess).GetAsBool();
      else
        Entity.AllowPassbackAccess = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.AllowPassbackAccess, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AllowPassbackAccess).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireTwoValidCredentials).IsNull == false)
        Entity.RequireTwoValidCredentials = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireTwoValidCredentials).GetAsBool();
      else
        Entity.RequireTwoValidCredentials = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireTwoValidCredentials, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireTwoValidCredentials).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockOnREX).IsNull == false)
        Entity.UnlockOnREX = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockOnREX).GetAsBool();
      else
        Entity.UnlockOnREX = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockOnREX, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockOnREX).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressIllegalOpenLog).IsNull == false)
        Entity.SuppressIllegalOpenLog = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressIllegalOpenLog).GetAsBool();
      else
        Entity.SuppressIllegalOpenLog = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressIllegalOpenLog, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressIllegalOpenLog).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressOpenTooLongLog).IsNull == false)
        Entity.SuppressOpenTooLongLog = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressOpenTooLongLog).GetAsBool();
      else
        Entity.SuppressOpenTooLongLog = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressOpenTooLongLog, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressOpenTooLongLog).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressClosedLog).IsNull == false)
        Entity.SuppressClosedLog = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressClosedLog).GetAsBool();
      else
        Entity.SuppressClosedLog = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressClosedLog, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressClosedLog).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressREXLog).IsNull == false)
        Entity.SuppressREXLog = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressREXLog).GetAsBool();
      else
        Entity.SuppressREXLog = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressREXLog, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressREXLog).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs).IsNull == false)
        Entity.GenerateDoorContactChangeLogs = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs).GetAsBool();
      else
        Entity.GenerateDoorContactChangeLogs = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LockWhenDoorCloses).IsNull == false)
        Entity.LockWhenDoorCloses = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LockWhenDoorCloses).GetAsBool();
      else
        Entity.LockWhenDoorCloses = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.LockWhenDoorCloses, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LockWhenDoorCloses).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EnableDuress).IsNull == false)
        Entity.EnableDuress = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EnableDuress).GetAsBool();
      else
        Entity.EnableDuress = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.EnableDuress, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EnableDuress).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupNotify).IsNull == false)
        Entity.DoorGroupNotify = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupNotify).GetAsBool();
      else
        Entity.DoorGroupNotify = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupNotify, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupNotify).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupCanDisable).IsNull == false)
        Entity.DoorGroupCanDisable = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupCanDisable).GetAsBool();
      else
        Entity.DoorGroupCanDisable = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupCanDisable, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupCanDisable).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay).IsNull == false)
        Entity.RelayOneOnDuringArmDelay = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay).GetAsBool();
      else
        Entity.RelayOneOnDuringArmDelay = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock).IsNull == false)
        Entity.RequireValidAccessForAutoUnlock = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock).GetAsBool();
      else
        Entity.RequireValidAccessForAutoUnlock = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PINSpecifiesRecloseDuration).IsNull == false)
        Entity.PINSpecifiesRecloseDuration = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PINSpecifiesRecloseDuration).GetAsBool();
      else
        Entity.PINSpecifiesRecloseDuration = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.PINSpecifiesRecloseDuration, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PINSpecifiesRecloseDuration).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen).IsNull == false)
        Entity.ValidAccessRequiresDoorOpen = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen).GetAsBool();
      else
        Entity.ValidAccessRequiresDoorOpen = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount).IsNull == false)
        Entity.DontDecrementLimitedSwipeExpireCount = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount).GetAsBool();
      else
        Entity.DontDecrementLimitedSwipeExpireCount = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.IgnoreNotInSystem).IsNull == false)
        Entity.IgnoreNotInSystem = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.IgnoreNotInSystem).GetAsBool();
      else
        Entity.IgnoreNotInSystem = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.IgnoreNotInSystem, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.IgnoreNotInSystem).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ReaderSendsHeartbeat).IsNull == false)
        Entity.ReaderSendsHeartbeat = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ReaderSendsHeartbeat).GetAsBool();
      else
        Entity.ReaderSendsHeartbeat = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.ReaderSendsHeartbeat, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ReaderSendsHeartbeat).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PhotoVerificationEnabled).IsNull == false)
        Entity.PhotoVerificationEnabled = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PhotoVerificationEnabled).GetAsBool();
      else
        Entity.PhotoVerificationEnabled = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.PhotoVerificationEnabled, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PhotoVerificationEnabled).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TimeAttendancePortal).IsNull == false)
        Entity.TimeAttendancePortal = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TimeAttendancePortal).GetAsBool();
      else
        Entity.TimeAttendancePortal = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.TimeAttendancePortal, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TimeAttendancePortal).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EMailEventsEnabled).IsNull == false)
        Entity.EMailEventsEnabled = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EMailEventsEnabled).GetAsBool();
      else
        Entity.EMailEventsEnabled = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.EMailEventsEnabled, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EMailEventsEnabled).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TransmitEventsEnabled).IsNull == false)
        Entity.TransmitEventsEnabled = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TransmitEventsEnabled).GetAsBool();
      else
        Entity.TransmitEventsEnabled = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.TransmitEventsEnabled, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TransmitEventsEnabled).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.FileOutputEnabled).IsNull == false)
        Entity.FileOutputEnabled = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.FileOutputEnabled).GetAsBool();
      else
        Entity.FileOutputEnabled = false;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.FileOutputEnabled, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.FileOutputEnabled).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertName).GetAsString();
      else
        Entity.InsertName = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertName, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertName).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertDate).GetAsDate();
      else
        Entity.InsertDate = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertDate, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertDate).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateName).GetAsString();
      else
        Entity.UpdateName = string.Empty;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateName, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateName).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateDate).GetAsDate();
      else
        Entity.UpdateDate = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateDate, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateDate).Value);

      if (ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
      else
        Entity.ConcurrencyValue = 0;
      Entity.SetOriginalValueForProperty(AccessPortalPropertiesPDSAValidator.ColumnNames.ConcurrencyValue, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ConcurrencyValue).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>AccessPortalPropertiesPDSA</returns>
    public AccessPortalPropertiesPDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new AccessPortalPropertiesPDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement, or SELECT stored procedure based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.AccessPortalPropertiesPDSA_SelectAll");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByAccessPortalContactSupervisionTypeUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.AccessPortalPropertiesPDSA_ByAccessPortalContactSupervisionTypeUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByAccessPortalDeferToServerBehaviorUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.AccessPortalPropertiesPDSA_ByAccessPortalDeferToServerBehaviorUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByAccessPortalElevatorControlTypeUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.AccessPortalPropertiesPDSA_ByAccessPortalElevatorControlTypeUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByAccessPortalLockPushButtonBehaviorUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.AccessPortalPropertiesPDSA_ByAccessPortalLockPushButtonBehaviorUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByAccessPortalNoServerReplyBehaviorUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.AccessPortalPropertiesPDSA_ByAccessPortalNoServerReplyBehaviorUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByAccessPortalUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.AccessPortalPropertiesPDSA_ByAccessPortalUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByElevatorRelayInterfaceBoardSectionUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.AccessPortalPropertiesPDSA_ByElevatorRelayInterfaceBoardSectionUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByLiquidCrystalDisplayUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.AccessPortalPropertiesPDSA_ByLiquidCrystalDisplayUid");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ListBox:
          if (UseStoredProcs)
          {
            sb.Append("GCS.AccessPortalPropertiesPDSA_SelectListBox");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.PrimaryKey:
          if (UseStoredProcs)
          {
            sb.Append("GCS.AccessPortalPropertiesPDSA_SelectByPK");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.Search:
          if (UseStoredProcs)
          {
            sb.Append("GCS.AccessPortalPropertiesPDSA_SelectSearch");
          }
          else
          {
            
          }
          
          break;
        case SelectFilters.ByAccessPortalMultiFactorModeUid:
          if (UseStoredProcs)
          {
            sb.Append("GCS.AccessPortalPropertiesPDSA_ByAccessPortalMultiFactorModeUid");
          }
          else
          {
            
          }
          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region InsertSQL Method
    /// <summary>
    /// Builds the SQL for the INSERT statement, or INSERT stored procedure based on the InsertFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string InsertSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (InsertFilter)
      {
        case InsertFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.AccessPortalPropertiesPDSA_Insert");
          }
          else
          {
            
          }
            
          break;
        
        case InsertFilters.Custom:
          sb.Append(InsertCustom);
          
          break;
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region UpdateSQL Method
    /// <summary>
    /// Builds the SQL for the UPDATE statement, or UPDATE stored procedure based on the UpdateFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string UpdateSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (UpdateFilter)
      {
        case UpdateFilters.PrimaryKey:
          if (UseStoredProcs)
          {
            sb.Append("GCS.AccessPortalPropertiesPDSA_Update");
          }
          else
          {
            
          }
          
          break;
        case UpdateFilters.UpdateConcurrency:
          if (UseStoredProcs)
          {
            sb.Append("GCS.AccessPortalPropertiesPDSA_UpdateConcurrency");
          }
          else
          {
            
          }
          
          break;
        
        case UpdateFilters.Custom:
          sb.Append(UpdateCustom);
          
          break;
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region DeleteByPK Method
    /// <summary>
    /// Delete a record from the table based on the primary key value that is passed in.
    /// </summary>
    /// <param name="accessPortalPropertiesUid">The value of the primary key of the row to delete</param>
    /// <returns>int</returns>
    public int DeleteByPK(Guid accessPortalPropertiesUid)
    {
      DeleteFilter = DeleteFilters.DeleteByPK;
      Entity.AccessPortalPropertiesUid = accessPortalPropertiesUid;      
      
      // If using Audit Tracking, need to load the record first
      if (UseAuditTracking)
        LoadByPK(accessPortalPropertiesUid);

      RowsAffected = Delete();

      return RowsAffected;
    }
    #endregion

    #region DeleteSQL Method
    /// <summary>
    /// Builds the SQL for the DELETE statement, or DELETE stored procedure. You can set the WhereFilter property to selectively delete rows from the table.
    /// </summary>
    /// <returns>string</returns>
    public override string DeleteSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (DeleteFilter)
      {
        case DeleteFilters.DeleteByPK:
          if (UseStoredProcs)
          {
            sb.Append("GCS.AccessPortalPropertiesPDSA_DeleteByPK");
          }
          else
          {
            
          }
          
          break;

        case DeleteFilters.Custom:
          sb.Append(DeleteCustom);

          break;          
      }

      if(!UseStoredProcs)
      {
        sb.Append(WhereClauseSQL());
      }
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL, or the name of the stored procedure, that will count the number of rows.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          if (UseStoredProcs)
          {
            sb.Append("GCS.AccessPortalPropertiesPDSA_RowCount");
          }
          else
          {
            
          }
          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      if(!UseStoredProcs)
      {
        sb.Append(WhereClauseSQL());
      }
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region LoadByPK Method
    /// <summary>
    /// Load a row of data in the Entity properties. Returns a value greater than 0 if it finds the record.
    /// </summary>
    /// <param name="accessPortalPropertiesUid">The value of the primary key of the row to load</param>
    /// <returns>Int32</returns>
    public int LoadByPK(Guid accessPortalPropertiesUid)
    {
      SelectFilter = SelectFilters.PrimaryKey;
      Entity.AccessPortalPropertiesUid = accessPortalPropertiesUid;      

      // Load Data into Properties
      RowsAffected = Load();

      // Reset all Collection Properties
      ResetCollectionProperties();
      
      return RowsAffected;
    }
    #endregion
    
    
    #region Updated Method
    /// <summary>
    /// This method is called after a successful update
    /// </summary>
    protected override void Updated()
    {
      Entity.ConcurrencyValue += Convert.ToInt16(1);
    }
    #endregion

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
         
          break;
        case SelectFilters.ByAccessPortalContactSupervisionTypeUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@AccessPortalContactSupervisionTypeUid", DbType.Guid, Entity.AccessPortalContactSupervisionTypeUid));
         
          break;
        case SelectFilters.ByAccessPortalDeferToServerBehaviorUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@AccessPortalDeferToServerBehaviorUid", DbType.Guid, Entity.AccessPortalDeferToServerBehaviorUid));
         
          break;
        case SelectFilters.ByAccessPortalElevatorControlTypeUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@AccessPortalElevatorControlTypeUid", DbType.Guid, Entity.AccessPortalElevatorControlTypeUid));
         
          break;
        case SelectFilters.ByAccessPortalLockPushButtonBehaviorUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@AccessPortalLockPushButtonBehaviorUid", DbType.Guid, Entity.AccessPortalLockPushButtonBehaviorUid));
         
          break;
        case SelectFilters.ByAccessPortalNoServerReplyBehaviorUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@AccessPortalNoServerReplyBehaviorUid", DbType.Guid, Entity.AccessPortalNoServerReplyBehaviorUid));
         
          break;
        case SelectFilters.ByAccessPortalUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@AccessPortalUid", DbType.Guid, Entity.AccessPortalUid));
         
          break;
        case SelectFilters.ByElevatorRelayInterfaceBoardSectionUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@ElevatorRelayInterfaceBoardSectionUid", DbType.Guid, Entity.ElevatorRelayInterfaceBoardSectionUid));
         
          break;
        case SelectFilters.ByLiquidCrystalDisplayUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@LiquidCrystalDisplayUid", DbType.Guid, Entity.LiquidCrystalDisplayUid));
         
          break;
        case SelectFilters.ListBox:
         
          break;
        case SelectFilters.PrimaryKey:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@AccessPortalPropertiesUid", DbType.Guid, Entity.AccessPortalPropertiesUid));
         
          break;
        case SelectFilters.Search:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@InsertName", DbType.String, Entity.InsertName));
         
          break;
        case SelectFilters.ByAccessPortalMultiFactorModeUid:
          CommandObject.Parameters.Add(DataProvider.CreateParameter("@AccessPortalMultiFactorModeUid", DbType.Guid, Entity.AccessPortalMultiFactorModeUid));
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion


    #region SetModificationCommandParameters Method
    /// <summary>
    /// Called to build any parameters prior to submitting an INSERT, UPDATE, or DELETE statement.
    /// </summary>
    protected override void SetModificationCommandParameters()
    {    
      switch (DataModificationAction)
      {
        case PDSADataModificationState.Delete:
          switch (DeleteFilter)
          {
            case DeleteFilters.DeleteByPK:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalPropertiesUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalPropertiesUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
          }

          break;

        case PDSADataModificationState.Insert:
          if (PrimaryKeyType == PDSAPrimaryKeyType.PDSA)
          {
            if (PrimaryKeyGenerate == true)
            {
              //  Get New Primary Key from pdsaTableIds
              PrimaryKeySet(PKGetFromPDSATableIds(PDSALoginName));
            }
          }

          switch (InsertFilter)
          {
            case InsertFilters.All:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalPropertiesUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalPropertiesUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AutomaticForgivePassbackFrequencyUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AutomaticForgivePassbackFrequencyUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@PinRequiredModeUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PinRequiredModeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalContactSupervisionTypeUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalContactSupervisionTypeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalDeferToServerBehaviorUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalDeferToServerBehaviorUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalNoServerReplyBehaviorUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalNoServerReplyBehaviorUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalLockPushButtonBehaviorUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalLockPushButtonBehaviorUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LiquidCrystalDisplayUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LiquidCrystalDisplayUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalElevatorControlTypeUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalElevatorControlTypeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@OtisElevatorDecUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.OtisElevatorDecUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ElevatorRelayInterfaceBoardSectionUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ElevatorRelayInterfaceBoardSectionUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalMultiFactorModeUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalMultiFactorModeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UnlockDelay", DbType.Int32, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDelay).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UnlockDuration", DbType.Int32, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDuration).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@RecloseDuration", DbType.Int32, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RecloseDuration).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AllowPassbackAccess", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AllowPassbackAccess).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@RequireTwoValidCredentials", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireTwoValidCredentials).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UnlockOnREX", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockOnREX).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SuppressIllegalOpenLog", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressIllegalOpenLog).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SuppressOpenTooLongLog", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressOpenTooLongLog).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SuppressClosedLog", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressClosedLog).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SuppressREXLog", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressREXLog).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@GenerateDoorContactChangeLogs", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LockWhenDoorCloses", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LockWhenDoorCloses).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@EnableDuress", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EnableDuress).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DoorGroupNotify", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupNotify).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DoorGroupCanDisable", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupCanDisable).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@RelayOneOnDuringArmDelay", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@RequireValidAccessForAutoUnlock", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@PINSpecifiesRecloseDuration", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PINSpecifiesRecloseDuration).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ValidAccessRequiresDoorOpen", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DontDecrementLimitedSwipeExpireCount", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@IgnoreNotInSystem", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.IgnoreNotInSystem).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ReaderSendsHeartbeat", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ReaderSendsHeartbeat).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@PhotoVerificationEnabled", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PhotoVerificationEnabled).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@TimeAttendancePortal", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TimeAttendancePortal).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@EMailEventsEnabled", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EMailEventsEnabled).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@TransmitEventsEnabled", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TransmitEventsEnabled).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@FileOutputEnabled", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.FileOutputEnabled).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InsertName", DbType.String, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@InsertDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateName", DbType.String, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
          }

          break;

        case PDSADataModificationState.Update:
          switch (UpdateFilter)
          {
            case UpdateFilters.PrimaryKey:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalPropertiesUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalPropertiesUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AutomaticForgivePassbackFrequencyUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AutomaticForgivePassbackFrequencyUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@PinRequiredModeUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PinRequiredModeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalContactSupervisionTypeUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalContactSupervisionTypeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalDeferToServerBehaviorUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalDeferToServerBehaviorUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalNoServerReplyBehaviorUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalNoServerReplyBehaviorUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalLockPushButtonBehaviorUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalLockPushButtonBehaviorUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LiquidCrystalDisplayUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LiquidCrystalDisplayUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalElevatorControlTypeUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalElevatorControlTypeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@OtisElevatorDecUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.OtisElevatorDecUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ElevatorRelayInterfaceBoardSectionUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ElevatorRelayInterfaceBoardSectionUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalMultiFactorModeUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalMultiFactorModeUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UnlockDelay", DbType.Int32, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDelay).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UnlockDuration", DbType.Int32, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDuration).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@RecloseDuration", DbType.Int32, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RecloseDuration).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AllowPassbackAccess", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AllowPassbackAccess).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@RequireTwoValidCredentials", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireTwoValidCredentials).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UnlockOnREX", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockOnREX).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SuppressIllegalOpenLog", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressIllegalOpenLog).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SuppressOpenTooLongLog", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressOpenTooLongLog).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SuppressClosedLog", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressClosedLog).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@SuppressREXLog", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressREXLog).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@LockWhenDoorCloses", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LockWhenDoorCloses).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@EnableDuress", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EnableDuress).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DoorGroupNotify", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupNotify).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DoorGroupCanDisable", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupCanDisable).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@RelayOneOnDuringArmDelay", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@RequireValidAccessForAutoUnlock", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@PINSpecifiesRecloseDuration", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PINSpecifiesRecloseDuration).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ValidAccessRequiresDoorOpen", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@DontDecrementLimitedSwipeExpireCount", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@IgnoreNotInSystem", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.IgnoreNotInSystem).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ReaderSendsHeartbeat", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ReaderSendsHeartbeat).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@PhotoVerificationEnabled", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PhotoVerificationEnabled).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@TimeAttendancePortal", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TimeAttendancePortal).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@EMailEventsEnabled", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EMailEventsEnabled).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@TransmitEventsEnabled", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TransmitEventsEnabled).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@FileOutputEnabled", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.FileOutputEnabled).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateName", DbType.String, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateName).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@UpdateDate", DbType.DateTimeOffset, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateDate).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@GenerateDoorContactChangeLogs", DbType.Boolean, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
            case UpdateFilters.UpdateConcurrency:
             CommandObject.Parameters.Clear();
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@AccessPortalPropertiesUid", DbType.Guid, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalPropertiesUid).Value));
              CommandObject.Parameters.Add(DataProvider.CreateParameter( 
                  "@ConcurrencyValue", DbType.Int16, ValidatorObject.Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ConcurrencyValue).Value));
              
              break;
          }
          break;
      }
    }
    #endregion
  }
}
