using System;
using System.Data;
using System.Text;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;

using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;

namespace GalaxySMS.DataLayer
{
  /// <summary>
  /// Used to Select data from the OutputDevice_PanelLoadDataPDSA view.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class OutputDevice_PanelLoadDataPDSAData : PDSADataClassReadOnly
  {
    #region Constructors
    /// <summary>
    /// Constructor for the OutputDevice_PanelLoadDataPDSAData class
    /// </summary>
    public OutputDevice_PanelLoadDataPDSAData() : base()
    {
      Entity = new OutputDevice_PanelLoadDataPDSA();
      ValidatorObject = new OutputDevice_PanelLoadDataPDSAValidator(Entity);

      Init();
    }
    
    /// <summary>
    /// Constructor for the OutputDevice_PanelLoadDataPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a OutputDevice_PanelLoadDataPDSA</param>
    public OutputDevice_PanelLoadDataPDSAData(PDSADataProvider dataProvider,
      OutputDevice_PanelLoadDataPDSA entity)
      : base(dataProvider)
    {
      Entity = entity;
      ValidatorObject = new OutputDevice_PanelLoadDataPDSAValidator(Entity);

      Init();
    }
     
    /// <summary>
    /// Constructor for the OutputDevice_PanelLoadDataPDSAData class
    /// </summary>
    /// <param name="dataProvider">An instance of a PDSADataProvider</param>
    /// <param name="entity">An instance of a OutputDevice_PanelLoadDataPDSA</param>
    /// <param name="validator">An instance of a OutputDevice_PanelLoadDataPDSAValidator</param>
    public OutputDevice_PanelLoadDataPDSAData(PDSADataProvider dataProvider,
      OutputDevice_PanelLoadDataPDSA entity, OutputDevice_PanelLoadDataPDSAValidator validator)
      : base(dataProvider, entity, validator)
    {
      Entity = entity;
      ValidatorObject = validator;

      Init();
    }
    #endregion

    #region Filter Properties and Enumerations
    /// <summary>
    /// Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum SelectFilters
    {
      
      /// <summary>
      /// 'All' SelectFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// 'Search' SelectFilter
      /// </summary>
      Search
      ,
      /// <summary>
      /// A Custom SelectFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Enumeration for selecting a WHERE statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum WhereFilters
    {
      /// <summary>
      /// No WhereFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom WhereFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'LikeOutputName' WhereFilter
      /// </summary>
      LikeOutputName
      ,
      /// <summary>
      /// 'OutputName' WhereFilter
      /// </summary>
      OutputName
    }

    /// <summary>
    /// Enumeration for selecting an ORDER BY statement when calling the Load, GetDataSet or GetDataReader method.
    /// </summary>
    public enum OrderByFilters
    {
      /// <summary>
      /// No OrderByFilter Selected
      /// </summary>
      None,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
      ,
      /// <summary>
      /// 'OutputName' OrderByFilter
      /// </summary>
      OutputName
    }
    
    /// <summary>
    /// Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
    /// </summary>
    public enum RowCountFilters
    {
      
      /// <summary>
      /// 'All' RowCountFilter
      /// </summary>
      All
      ,
      /// <summary>
      /// A Custom OrderByFilter
      /// </summary>
      Custom
    }

    /// <summary>
    /// Get/Set a Dynamic SQL to execute to return data.
    /// </summary>
    public SelectFilters SelectFilter { get; set; }
    /// <summary>
    /// Get/Set a WHERE clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public WhereFilters WhereFilter { get; set; }
    /// <summary>
    /// Get/Set a ORDER BY clause to be used with a SELECT statement when using Dynamic SQL.
    /// </summary>
    public OrderByFilters OrderByFilter { get; set; }
    /// <summary>
    /// Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
    /// </summary>
    public RowCountFilters RowCountFilter { get; set; }
    #endregion

    #region Public Property Entity Class
        private OutputDevice_PanelLoadDataPDSA _EntityObject = null;

    /// <summary>
    /// Get/Set the Entity class that will be used to get and set properties/fields for this data class.
    /// </summary>
    public OutputDevice_PanelLoadDataPDSA Entity 
    { 
      get { return _EntityObject; }
      set
      {
        _EntityObject = value;
        base.EntityObject = _EntityObject;
      } 
    }
    #endregion

    #region Init Method
    /// <summary>
    /// Initializes this class to a valid start state.
    /// </summary>
    protected override void Init()
    {
      ClassName = "OutputDevice_PanelLoadDataPDSAData";
      DBObjectName = "GCS.OutputDevice_PanelLoadData";
      SchemaName = "GCS";
      base.EntityObject = Entity;
      base.ValidatorObject = ValidatorObject;
      
      // Set Reference to ValidatorObject Properties Collection
      AllColumns = ValidatorObject.Properties;

      // Set any Initial Starting values for data columns
      InitDataColumns();
    }
    #endregion

    #region InitDataColumns Method
    /// <summary>
    /// Initializes all of the Data Columns with valid data for each field in the table.
    /// </summary>
    protected override void InitDataColumns()
    {
      PDSAProperty prop;

      // Fill in Column Properties
      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyHardwareModuleUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlGuid.Null;
      //prop.ValueForNull = Guid.Empty;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputName);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsOutputActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsNodeActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsModuleActive);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardSectionMode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardSectionModeDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDevicePanelModelTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceCpuTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardTypeModel);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardTypeTypeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardTypeDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyOutputModeDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyOutputModeCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputSourceRelationshipDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputSourceRelationshipCode);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.TimeoutDuration);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.Limit);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.InvertOutput);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null;
      //prop.ValueForNull = false;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ScheduleDisplay);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ScheduleNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyOutputDevicePropertiesLastUpdated);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null;
      //prop.ValueForNull = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuUid);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlString.Null;
      //prop.ValueForNull = string.Empty;

      prop = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsConnected);
      prop.IsInsertable = false;
      prop.IsUpdatable = false;
      prop.IsPrimaryKey = false;
      prop.IncludeInAuditTracking = true;
      prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null;
      //prop.ValueForNull = 0;

    }
    #endregion

    #region EntityDataToColumnCollection Method
    /// <summary>
    /// Moves the data from the Entity class into the Columns collection
    /// This is called prior to performing a Business Rule Check or an INSERT, UPDATE or DELETE
    /// </summary>
    protected override void EntityDataToColumnCollection()
    {
      // Move all Entity Values into Properties Collection
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceUid).Value = Entity.OutputDeviceUid;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceUid).SetAsNull == true)
        Entity.OutputDeviceUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid).Value = Entity.ClusterUid;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid).SetAsNull == true)
        Entity.ClusterUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid).Value = Entity.GalaxyPanelUid;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid).SetAsNull == true)
        Entity.GalaxyPanelUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).Value = Entity.GalaxyInterfaceBoardUid;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).SetAsNull == true)
        Entity.GalaxyInterfaceBoardUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).Value = Entity.GalaxyInterfaceBoardSectionUid;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).SetAsNull == true)
        Entity.GalaxyInterfaceBoardSectionUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).Value = Entity.GalaxyHardwareModuleUid;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).SetAsNull == true)
        Entity.GalaxyHardwareModuleUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).Value = Entity.GalaxyInterfaceBoardSectionNodeUid;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).SetAsNull == true)
        Entity.GalaxyInterfaceBoardSectionNodeUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputName).Value = Entity.OutputName;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputName).SetAsNull == true)
        Entity.OutputName = string.Empty;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId).Value = Entity.ClusterGroupId;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId).SetAsNull == true)
        Entity.ClusterGroupId = 0;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber).Value = Entity.ClusterNumber;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber).SetAsNull == true)
        Entity.ClusterNumber = 0;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber).Value = Entity.PanelNumber;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber).SetAsNull == true)
        Entity.PanelNumber = 0;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber).Value = Entity.BoardNumber;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber).SetAsNull == true)
        Entity.BoardNumber = 0;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber).Value = Entity.SectionNumber;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber).SetAsNull == true)
        Entity.SectionNumber = 0;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber).Value = Entity.ModuleNumber;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber).SetAsNull == true)
        Entity.ModuleNumber = 0;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber).Value = Entity.NodeNumber;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber).SetAsNull == true)
        Entity.NodeNumber = 0;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsOutputActive).Value = Entity.IsOutputActive;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsOutputActive).SetAsNull == true)
        Entity.IsOutputActive = false;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsNodeActive).Value = Entity.IsNodeActive;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsNodeActive).SetAsNull == true)
        Entity.IsNodeActive = false;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsModuleActive).Value = Entity.IsModuleActive;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsModuleActive).SetAsNull == true)
        Entity.IsModuleActive = false;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardSectionMode).Value = Entity.OutputDeviceBoardSectionMode;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardSectionMode).SetAsNull == true)
        Entity.OutputDeviceBoardSectionMode = 0;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardSectionModeDisplay).Value = Entity.OutputDeviceBoardSectionModeDisplay;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardSectionModeDisplay).SetAsNull == true)
        Entity.OutputDeviceBoardSectionModeDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDevicePanelModelTypeCode).Value = Entity.OutputDevicePanelModelTypeCode;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDevicePanelModelTypeCode).SetAsNull == true)
        Entity.OutputDevicePanelModelTypeCode = string.Empty;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceCpuTypeCode).Value = Entity.OutputDeviceCpuTypeCode;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceCpuTypeCode).SetAsNull == true)
        Entity.OutputDeviceCpuTypeCode = string.Empty;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardTypeModel).Value = Entity.OutputDeviceBoardTypeModel;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardTypeModel).SetAsNull == true)
        Entity.OutputDeviceBoardTypeModel = string.Empty;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardTypeTypeCode).Value = Entity.OutputDeviceBoardTypeTypeCode;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardTypeTypeCode).SetAsNull == true)
        Entity.OutputDeviceBoardTypeTypeCode = 0;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardTypeDisplay).Value = Entity.OutputDeviceBoardTypeDisplay;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardTypeDisplay).SetAsNull == true)
        Entity.OutputDeviceBoardTypeDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyOutputModeDisplay).Value = Entity.GalaxyOutputModeDisplay;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyOutputModeDisplay).SetAsNull == true)
        Entity.GalaxyOutputModeDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyOutputModeCode).Value = Entity.GalaxyOutputModeCode;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyOutputModeCode).SetAsNull == true)
        Entity.GalaxyOutputModeCode = 0;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputSourceRelationshipDisplay).Value = Entity.InputSourceRelationshipDisplay;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputSourceRelationshipDisplay).SetAsNull == true)
        Entity.InputSourceRelationshipDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputSourceRelationshipCode).Value = Entity.InputSourceRelationshipCode;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputSourceRelationshipCode).SetAsNull == true)
        Entity.InputSourceRelationshipCode = 0;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.TimeoutDuration).Value = Entity.TimeoutDuration;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.TimeoutDuration).SetAsNull == true)
        Entity.TimeoutDuration = 0;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.Limit).Value = Entity.Limit;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.Limit).SetAsNull == true)
        Entity.Limit = 0;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.InvertOutput).Value = Entity.InvertOutput;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.InvertOutput).SetAsNull == true)
        Entity.InvertOutput = false;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ScheduleDisplay).Value = Entity.ScheduleDisplay;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ScheduleDisplay).SetAsNull == true)
        Entity.ScheduleDisplay = string.Empty;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ScheduleNumber).Value = Entity.ScheduleNumber;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ScheduleNumber).SetAsNull == true)
        Entity.ScheduleNumber = 0;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyOutputDevicePropertiesLastUpdated).Value = Entity.GalaxyOutputDevicePropertiesLastUpdated;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyOutputDevicePropertiesLastUpdated).SetAsNull == true)
        Entity.GalaxyOutputDevicePropertiesLastUpdated = DateTimeOffset.Now;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber).Value = Entity.CpuNumber;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber).SetAsNull == true)
        Entity.CpuNumber = 0;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuUid).Value = Entity.CpuUid;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuUid).SetAsNull == true)
        Entity.CpuUid = Guid.Empty;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress).Value = Entity.ServerAddress;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress).SetAsNull == true)
        Entity.ServerAddress = string.Empty;
      ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsConnected).Value = Entity.IsConnected;
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsConnected).SetAsNull == true)
        Entity.IsConnected = 0;
    }
    #endregion

    #region ColumnCollectionToEntityData Method
    /// <summary>
    /// Moves the data from the Columns collection into the Entity class.
    /// This is called whenever you are reading data in from a database.
    ///   For example, from BuildCollection, Load, LoadByPK, etc.
    /// </summary>
    protected override void ColumnCollectionToEntityData()
    {
      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceUid).IsNull == false)
        Entity.OutputDeviceUid = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceUid).GetAsGuid();
      else
        Entity.OutputDeviceUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceUid, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceUid).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid).IsNull == false)
        Entity.ClusterUid = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid).GetAsGuid();
      else
        Entity.ClusterUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterUid).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid).IsNull == false)
        Entity.GalaxyPanelUid = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid).GetAsGuid();
      else
        Entity.GalaxyPanelUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyPanelUid).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).IsNull == false)
        Entity.GalaxyInterfaceBoardUid = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).GetAsGuid();
      else
        Entity.GalaxyInterfaceBoardUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardUid).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).IsNull == false)
        Entity.GalaxyInterfaceBoardSectionUid = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).GetAsGuid();
      else
        Entity.GalaxyInterfaceBoardSectionUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionUid).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).IsNull == false)
        Entity.GalaxyHardwareModuleUid = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).GetAsGuid();
      else
        Entity.GalaxyHardwareModuleUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyHardwareModuleUid, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyHardwareModuleUid).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).IsNull == false)
        Entity.GalaxyInterfaceBoardSectionNodeUid = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).GetAsGuid();
      else
        Entity.GalaxyInterfaceBoardSectionNodeUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyInterfaceBoardSectionNodeUid).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputName).IsNull == false)
        Entity.OutputName = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputName).GetAsString();
      else
        Entity.OutputName = string.Empty;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputName, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputName).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId).IsNull == false)
        Entity.ClusterGroupId = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId).GetAsInteger();
      else
        Entity.ClusterGroupId = 0;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterGroupId).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber).IsNull == false)
        Entity.ClusterNumber = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber).GetAsInteger();
      else
        Entity.ClusterNumber = 0;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ClusterNumber).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber).IsNull == false)
        Entity.PanelNumber = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber).GetAsInteger();
      else
        Entity.PanelNumber = 0;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.PanelNumber).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber).IsNull == false)
        Entity.BoardNumber = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber).GetAsShort();
      else
        Entity.BoardNumber = 0;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.BoardNumber).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber).IsNull == false)
        Entity.SectionNumber = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber).GetAsShort();
      else
        Entity.SectionNumber = 0;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.SectionNumber).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber).IsNull == false)
        Entity.ModuleNumber = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber).GetAsShort();
      else
        Entity.ModuleNumber = 0;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ModuleNumber).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber).IsNull == false)
        Entity.NodeNumber = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber).GetAsShort();
      else
        Entity.NodeNumber = 0;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.NodeNumber).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsOutputActive).IsNull == false)
        Entity.IsOutputActive = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsOutputActive).GetAsBool();
      else
        Entity.IsOutputActive = false;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsOutputActive, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsOutputActive).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsNodeActive).IsNull == false)
        Entity.IsNodeActive = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsNodeActive).GetAsBool();
      else
        Entity.IsNodeActive = false;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsNodeActive, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsNodeActive).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsModuleActive).IsNull == false)
        Entity.IsModuleActive = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsModuleActive).GetAsBool();
      else
        Entity.IsModuleActive = false;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsModuleActive, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsModuleActive).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardSectionMode).IsNull == false)
        Entity.OutputDeviceBoardSectionMode = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardSectionMode).GetAsShort();
      else
        Entity.OutputDeviceBoardSectionMode = 0;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardSectionMode, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardSectionMode).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardSectionModeDisplay).IsNull == false)
        Entity.OutputDeviceBoardSectionModeDisplay = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardSectionModeDisplay).GetAsString();
      else
        Entity.OutputDeviceBoardSectionModeDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardSectionModeDisplay, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardSectionModeDisplay).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDevicePanelModelTypeCode).IsNull == false)
        Entity.OutputDevicePanelModelTypeCode = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDevicePanelModelTypeCode).GetAsString();
      else
        Entity.OutputDevicePanelModelTypeCode = string.Empty;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDevicePanelModelTypeCode, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDevicePanelModelTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceCpuTypeCode).IsNull == false)
        Entity.OutputDeviceCpuTypeCode = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceCpuTypeCode).GetAsString();
      else
        Entity.OutputDeviceCpuTypeCode = string.Empty;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceCpuTypeCode, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceCpuTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardTypeModel).IsNull == false)
        Entity.OutputDeviceBoardTypeModel = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardTypeModel).GetAsString();
      else
        Entity.OutputDeviceBoardTypeModel = string.Empty;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardTypeModel, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardTypeModel).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardTypeTypeCode).IsNull == false)
        Entity.OutputDeviceBoardTypeTypeCode = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardTypeTypeCode).GetAsShort();
      else
        Entity.OutputDeviceBoardTypeTypeCode = 0;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardTypeTypeCode, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardTypeTypeCode).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardTypeDisplay).IsNull == false)
        Entity.OutputDeviceBoardTypeDisplay = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardTypeDisplay).GetAsString();
      else
        Entity.OutputDeviceBoardTypeDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardTypeDisplay, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.OutputDeviceBoardTypeDisplay).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyOutputModeDisplay).IsNull == false)
        Entity.GalaxyOutputModeDisplay = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyOutputModeDisplay).GetAsString();
      else
        Entity.GalaxyOutputModeDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyOutputModeDisplay, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyOutputModeDisplay).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyOutputModeCode).IsNull == false)
        Entity.GalaxyOutputModeCode = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyOutputModeCode).GetAsShort();
      else
        Entity.GalaxyOutputModeCode = 0;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyOutputModeCode, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyOutputModeCode).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputSourceRelationshipDisplay).IsNull == false)
        Entity.InputSourceRelationshipDisplay = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputSourceRelationshipDisplay).GetAsString();
      else
        Entity.InputSourceRelationshipDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputSourceRelationshipDisplay, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputSourceRelationshipDisplay).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputSourceRelationshipCode).IsNull == false)
        Entity.InputSourceRelationshipCode = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputSourceRelationshipCode).GetAsShort();
      else
        Entity.InputSourceRelationshipCode = 0;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputSourceRelationshipCode, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.InputSourceRelationshipCode).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.TimeoutDuration).IsNull == false)
        Entity.TimeoutDuration = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.TimeoutDuration).GetAsInteger();
      else
        Entity.TimeoutDuration = 0;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.TimeoutDuration, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.TimeoutDuration).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.Limit).IsNull == false)
        Entity.Limit = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.Limit).GetAsInteger();
      else
        Entity.Limit = 0;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.Limit, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.Limit).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.InvertOutput).IsNull == false)
        Entity.InvertOutput = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.InvertOutput).GetAsBool();
      else
        Entity.InvertOutput = false;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.InvertOutput, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.InvertOutput).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ScheduleDisplay).IsNull == false)
        Entity.ScheduleDisplay = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ScheduleDisplay).GetAsString();
      else
        Entity.ScheduleDisplay = string.Empty;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ScheduleDisplay, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ScheduleDisplay).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ScheduleNumber).IsNull == false)
        Entity.ScheduleNumber = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ScheduleNumber).GetAsInteger();
      else
        Entity.ScheduleNumber = 0;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ScheduleNumber, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ScheduleNumber).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyOutputDevicePropertiesLastUpdated).IsNull == false)
        Entity.GalaxyOutputDevicePropertiesLastUpdated = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyOutputDevicePropertiesLastUpdated).GetAsDate();
      else
        Entity.GalaxyOutputDevicePropertiesLastUpdated = Convert.ToDateTime("1753-1-1", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyOutputDevicePropertiesLastUpdated, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.GalaxyOutputDevicePropertiesLastUpdated).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber).IsNull == false)
        Entity.CpuNumber = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber).GetAsInteger();
      else
        Entity.CpuNumber = 0;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuNumber).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuUid).IsNull == false)
        Entity.CpuUid = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuUid).GetAsGuid();
      else
        Entity.CpuUid = Guid.Empty;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuUid, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.CpuUid).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress).IsNull == false)
        Entity.ServerAddress = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress).GetAsString();
      else
        Entity.ServerAddress = string.Empty;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.ServerAddress).Value);

      if (ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsConnected).IsNull == false)
        Entity.IsConnected = ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsConnected).GetAsInteger();
      else
        Entity.IsConnected = 0;
      Entity.SetOriginalValueForProperty(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsConnected, ValidatorObject.Properties.GetByName(OutputDevice_PanelLoadDataPDSAValidator.ColumnNames.IsConnected).Value);

    }
    #endregion

    #region CreateEntityFromDataRow Method
    /// <summary>
    /// Creates an Entity object from a DataRow object.
    /// </summary>
    /// <param name="dr">DataRow object with all fields from the table in it.</param>
    /// <returns>OutputDevice_PanelLoadDataPDSA</returns>
    public OutputDevice_PanelLoadDataPDSA CreateEntityFromDataRow(DataRow dr)
    {
      // Create new Entity Object
      Entity = new OutputDevice_PanelLoadDataPDSA();

      // Move all data into Properties collection
      // This method calls the ColumnCollectionToEntityData method
      DataRowToProperties(dr);
      Entity.IsDirty = false;

      return Entity;
    }
    #endregion

    #region SelectSQL Method
    /// <summary>
    /// Builds the SQL for the SELECT statement based on the SelectFilter property.
    /// </summary>
    /// <returns>string</returns>
    public override string SelectSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (SelectFilter)
      {
        case SelectFilters.All:
          
          
          break;
        case SelectFilters.Search:
          
          
          break;

        case SelectFilters.Custom:
          sb.Append(SelectCustom);

          break;          
      }

      SQL = sb.ToString();

      return SQL;
    }
    #endregion

    #region RowCountSQL Method
    /// <summary>
    /// Builds the SELECT Count(*) SQL that will count the number of rows returned from this view.
    /// </summary>
    /// <returns>string</returns>
    public override string RowCountSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (RowCountFilter)
      {
        case RowCountFilters.All:
          
          
          break;

        case RowCountFilters.Custom:
          sb.Append(RowCountCustom);

          break;          
      }

      sb.Append(WhereClauseSQL());
     
      SQL = sb.ToString();

      return SQL;
    }
    #endregion
    
    #region WhereClauseSQL Method
    /// <summary>
    /// Builds the WHERE clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string WhereClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (WhereFilter)
      {
        case WhereFilters.Custom:
          sb.Append(" " + WhereCustom);

          break;

        case WhereFilters.None:
          //  Do nothing

          break;

        case WhereFilters.LikeOutputName:
          
          
          break;
        case WhereFilters.OutputName:
          
          
          break;
      }
      
      return sb.ToString();
    }
    #endregion

    #region SelectFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any SELECT statement parameters.
    /// </summary>
    protected override void SelectFillInParameters()
    {
      switch (SelectFilter)
      {
        case SelectFilters.All:
         
          break;
        case SelectFilters.Search:
         
          break;
      }

      // Add on paging parameters
      if(UsePaging)
      {
        PagingFillInParameters(Entity.ResultSetRowNumberBegin, Entity.ResultSetRowNumberEnd);
      }
    }
    #endregion

    #region WhereClauseFillInParameters Method
    /// <summary>
    /// Builds the CommandObject.Parameters collection for any WHERE clause parameters.
    /// </summary>
    protected override void WhereClauseFillInParameters()
    {
      switch (WhereFilter)
      {
        case WhereFilters.LikeOutputName:
         
          break;
        case WhereFilters.OutputName:
         
          break;
      }
    }
    #endregion

    #region OrderByClauseSQL Method
    /// <summary>
    /// Builds the ORDER BY clause to be used in combination with a SELECT statement.
    /// </summary>
    /// <returns>string</returns>
    public override string OrderByClauseSQL()
    {
      StringBuilder sb = new StringBuilder(SB_INIT_LENGTH);

      switch (OrderByFilter)
      {
        case OrderByFilters.None:
          //  Do Nothing

          break;

        case OrderByFilters.Custom:
          sb.Append(" " + OrderByCustom);

          break;
          
        case OrderByFilters.OutputName:
          
          
          break;
      }

      return sb.ToString();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the OutputDevice_PanelLoadDataPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'OutputDeviceUid'
    /// </summary>
    public static string OutputDeviceUid = "OutputDeviceUid";
    /// <summary>
    /// Returns 'ClusterUid'
    /// </summary>
    public static string ClusterUid = "ClusterUid";
    /// <summary>
    /// Returns 'GalaxyPanelUid'
    /// </summary>
    public static string GalaxyPanelUid = "GalaxyPanelUid";
    /// <summary>
    /// Returns 'GalaxyInterfaceBoardUid'
    /// </summary>
    public static string GalaxyInterfaceBoardUid = "GalaxyInterfaceBoardUid";
    /// <summary>
    /// Returns 'GalaxyInterfaceBoardSectionUid'
    /// </summary>
    public static string GalaxyInterfaceBoardSectionUid = "GalaxyInterfaceBoardSectionUid";
    /// <summary>
    /// Returns 'GalaxyHardwareModuleUid'
    /// </summary>
    public static string GalaxyHardwareModuleUid = "GalaxyHardwareModuleUid";
    /// <summary>
    /// Returns 'GalaxyInterfaceBoardSectionNodeUid'
    /// </summary>
    public static string GalaxyInterfaceBoardSectionNodeUid = "GalaxyInterfaceBoardSectionNodeUid";
    /// <summary>
    /// Returns 'OutputName'
    /// </summary>
    public static string OutputName = "OutputName";
    /// <summary>
    /// Returns 'ClusterGroupId'
    /// </summary>
    public static string ClusterGroupId = "ClusterGroupId";
    /// <summary>
    /// Returns 'ClusterNumber'
    /// </summary>
    public static string ClusterNumber = "ClusterNumber";
    /// <summary>
    /// Returns 'PanelNumber'
    /// </summary>
    public static string PanelNumber = "PanelNumber";
    /// <summary>
    /// Returns 'BoardNumber'
    /// </summary>
    public static string BoardNumber = "BoardNumber";
    /// <summary>
    /// Returns 'SectionNumber'
    /// </summary>
    public static string SectionNumber = "SectionNumber";
    /// <summary>
    /// Returns 'ModuleNumber'
    /// </summary>
    public static string ModuleNumber = "ModuleNumber";
    /// <summary>
    /// Returns 'NodeNumber'
    /// </summary>
    public static string NodeNumber = "NodeNumber";
    /// <summary>
    /// Returns 'IsOutputActive'
    /// </summary>
    public static string IsOutputActive = "IsOutputActive";
    /// <summary>
    /// Returns 'IsNodeActive'
    /// </summary>
    public static string IsNodeActive = "IsNodeActive";
    /// <summary>
    /// Returns 'IsModuleActive'
    /// </summary>
    public static string IsModuleActive = "IsModuleActive";
    /// <summary>
    /// Returns 'OutputDeviceBoardSectionMode'
    /// </summary>
    public static string OutputDeviceBoardSectionMode = "OutputDeviceBoardSectionMode";
    /// <summary>
    /// Returns 'OutputDeviceBoardSectionModeDisplay'
    /// </summary>
    public static string OutputDeviceBoardSectionModeDisplay = "OutputDeviceBoardSectionModeDisplay";
    /// <summary>
    /// Returns 'OutputDevicePanelModelTypeCode'
    /// </summary>
    public static string OutputDevicePanelModelTypeCode = "OutputDevicePanelModelTypeCode";
    /// <summary>
    /// Returns 'OutputDeviceCpuTypeCode'
    /// </summary>
    public static string OutputDeviceCpuTypeCode = "OutputDeviceCpuTypeCode";
    /// <summary>
    /// Returns 'OutputDeviceBoardTypeModel'
    /// </summary>
    public static string OutputDeviceBoardTypeModel = "OutputDeviceBoardTypeModel";
    /// <summary>
    /// Returns 'OutputDeviceBoardTypeTypeCode'
    /// </summary>
    public static string OutputDeviceBoardTypeTypeCode = "OutputDeviceBoardTypeTypeCode";
    /// <summary>
    /// Returns 'OutputDeviceBoardTypeDisplay'
    /// </summary>
    public static string OutputDeviceBoardTypeDisplay = "OutputDeviceBoardTypeDisplay";
    /// <summary>
    /// Returns 'GalaxyOutputModeDisplay'
    /// </summary>
    public static string GalaxyOutputModeDisplay = "GalaxyOutputModeDisplay";
    /// <summary>
    /// Returns 'GalaxyOutputModeCode'
    /// </summary>
    public static string GalaxyOutputModeCode = "GalaxyOutputModeCode";
    /// <summary>
    /// Returns 'InputSourceRelationshipDisplay'
    /// </summary>
    public static string InputSourceRelationshipDisplay = "InputSourceRelationshipDisplay";
    /// <summary>
    /// Returns 'InputSourceRelationshipCode'
    /// </summary>
    public static string InputSourceRelationshipCode = "InputSourceRelationshipCode";
    /// <summary>
    /// Returns 'TimeoutDuration'
    /// </summary>
    public static string TimeoutDuration = "TimeoutDuration";
    /// <summary>
    /// Returns 'Limit'
    /// </summary>
    public static string Limit = "Limit";
    /// <summary>
    /// Returns 'InvertOutput'
    /// </summary>
    public static string InvertOutput = "InvertOutput";
    /// <summary>
    /// Returns 'ScheduleDisplay'
    /// </summary>
    public static string ScheduleDisplay = "ScheduleDisplay";
    /// <summary>
    /// Returns 'ScheduleNumber'
    /// </summary>
    public static string ScheduleNumber = "ScheduleNumber";
    /// <summary>
    /// Returns 'GalaxyOutputDevicePropertiesLastUpdated'
    /// </summary>
    public static string GalaxyOutputDevicePropertiesLastUpdated = "GalaxyOutputDevicePropertiesLastUpdated";
    /// <summary>
    /// Returns 'CpuNumber'
    /// </summary>
    public static string CpuNumber = "CpuNumber";
    /// <summary>
    /// Returns 'CpuUid'
    /// </summary>
    public static string CpuUid = "CpuUid";
    /// <summary>
    /// Returns 'ServerAddress'
    /// </summary>
    public static string ServerAddress = "ServerAddress";
    /// <summary>
    /// Returns 'IsConnected'
    /// </summary>
    public static string IsConnected = "IsConnected";
    }
    #endregion
  }
}
