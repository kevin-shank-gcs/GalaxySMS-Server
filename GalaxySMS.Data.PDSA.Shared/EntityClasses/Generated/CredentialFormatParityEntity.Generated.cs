using System;
using System.ComponentModel;
using System.Runtime.Serialization;


using PDSA.Validation;

namespace GalaxySMS.EntityLayer
{
  /// <summary>
  /// This class contains properties for each data value that makes up a CredentialFormatParityPDSA.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
  /// </summary>
  
  public partial class CredentialFormatParityPDSA : PDSAEntityBase
  {
    #region Private Variables
    private Guid _CredentialFormatParityUid = Guid.Empty;
    private Guid _CredentialFormatUid = Guid.Empty;
    private short _ParityType = 0;
    private byte[] _HexMask = null;
    private short _BitPosition = 0;
    private short _ComputeSequence = 0;
    private string _InsertName = string.Empty;
    private DateTimeOffset _InsertDate = DateTimeOffset.Now;
    private string _UpdateName = string.Empty;
    private DateTimeOffset _UpdateDate = DateTimeOffset.Now;
    private short _ConcurrencyValue = 0;
    private Guid _CredentialFormatParityUidOld = Guid.Empty;
    #endregion
    
    #region Public Properties
    /// <summary>
    /// Get/Set the Credential Format Parity Uid value
    /// </summary>
    
    [DataMember]
    
    public Guid CredentialFormatParityUid 
    { 
      get { return _CredentialFormatParityUid; }
      set 
      { 
        if(HasValueChanged(_CredentialFormatParityUid, value, "CredentialFormatParityUid"))
        {
          _CredentialFormatParityUid = value; 
          RaisePropertyChanged("CredentialFormatParityUid");
        }
      } 
    }
        
    /// <summary>
    /// Get/Set the Credential Format Uid value
    /// </summary>
    
    [DataMember]
    
    public Guid CredentialFormatUid 
    { 
      get { return _CredentialFormatUid; }
      set 
      { 
        if(HasValueChanged(_CredentialFormatUid, value, "CredentialFormatUid"))
        {
          _CredentialFormatUid = value; 
          RaisePropertyChanged("CredentialFormatUid");
        }
      } 
    }
        
    /// <summary>
    /// Get/Set the Parity Type value
    /// </summary>
    
    [DataMember]
    
    public short ParityType 
    { 
      get { return _ParityType; }
      set 
      { 
        if(HasValueChanged(_ParityType, value, "ParityType"))
        {
          _ParityType = value; 
          RaisePropertyChanged("ParityType");
        }
      } 
    }
        
    /// <summary>
    /// Get/Set the Hex Mask value
    /// </summary>
    
    [DataMember]
    
    public byte[] HexMask 
    { 
      get { return _HexMask; }
      set 
      { 
        if(HasValueChanged(_HexMask, value, "HexMask"))
        {
          _HexMask = value; 
          RaisePropertyChanged("HexMask");
        }
      } 
    }
        
    /// <summary>
    /// Get/Set the Bit Position value
    /// </summary>
    
    [DataMember]
    
    public short BitPosition 
    { 
      get { return _BitPosition; }
      set 
      { 
        if(HasValueChanged(_BitPosition, value, "BitPosition"))
        {
          _BitPosition = value; 
          RaisePropertyChanged("BitPosition");
        }
      } 
    }
        
    /// <summary>
    /// Get/Set the Compute Sequence value
    /// </summary>
    
    [DataMember]
    
    public short ComputeSequence 
    { 
      get { return _ComputeSequence; }
      set 
      { 
        if(HasValueChanged(_ComputeSequence, value, "ComputeSequence"))
        {
          _ComputeSequence = value; 
          RaisePropertyChanged("ComputeSequence");
        }
      } 
    }
        
    /// <summary>
    /// Get/Set the Insert Name value
    /// </summary>
    
    [DataMember]
    
    public string InsertName 
    { 
      get { return _InsertName; }
      set 
      { 
        if(HasValueChanged(_InsertName, value, "InsertName"))
        {
          _InsertName = value; 
          RaisePropertyChanged("InsertName");
        }
      } 
    }
        
    /// <summary>
    /// Get/Set the Insert Date value
    /// </summary>
    
    [DataMember]
    
    public DateTimeOffset InsertDate 
    { 
      get { return _InsertDate; }
      set 
      { 
        if(HasValueChanged(_InsertDate, value, "InsertDate"))
        {
          _InsertDate = value; 
          RaisePropertyChanged("InsertDate");
        }
      } 
    }
        
    /// <summary>
    /// Get/Set the Update Name value
    /// </summary>
    
    [DataMember]
    
    public string UpdateName 
    { 
      get { return _UpdateName; }
      set 
      { 
        if(HasValueChanged(_UpdateName, value, "UpdateName"))
        {
          _UpdateName = value; 
          RaisePropertyChanged("UpdateName");
        }
      } 
    }
        
    /// <summary>
    /// Get/Set the Update Date value
    /// </summary>
    
    [DataMember]
    
    public DateTimeOffset UpdateDate 
    { 
      get { return _UpdateDate; }
      set 
      { 
        if(HasValueChanged(_UpdateDate, value, "UpdateDate"))
        {
          _UpdateDate = value; 
          RaisePropertyChanged("UpdateDate");
        }
      } 
    }
        
    /// <summary>
    /// Get/Set the Concurrency Value value
    /// </summary>
    
    [DataMember]
    
    public short ConcurrencyValue 
    { 
      get { return _ConcurrencyValue; }
      set 
      { 
        if(HasValueChanged(_ConcurrencyValue, value, "ConcurrencyValue"))
        {
          _ConcurrencyValue = value; 
          RaisePropertyChanged("ConcurrencyValue");
        }
      } 
    }
        

        /// <summary>
    /// Get/Set the Credential Format Parity UidOld value
    /// </summary>
    
    public Guid CredentialFormatParityUidOld
    { 
      get { return _CredentialFormatParityUidOld; }
      set 
      { 
        if(HasValueChanged(_CredentialFormatParityUidOld, value, "CredentialFormatParityUid"))
        {
          _CredentialFormatParityUidOld = value; 
          RaisePropertyChanged("CredentialFormatParityUidOld");
        }
      } 
    }
    #endregion
  }
}
