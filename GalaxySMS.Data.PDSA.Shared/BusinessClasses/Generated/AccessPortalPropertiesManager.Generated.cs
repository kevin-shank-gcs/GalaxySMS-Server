using System;
using System.Collections.Generic;
using System.Data;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;


using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;
using GalaxySMS.DataLayer;

namespace GalaxySMS.BusinessLayer
{
    /// <summary>
    /// This class is used when you need to add, edit, delete, select and validate data for the AccessPortalPropertiesPDSA table.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// DO NOT modify this class as it is intended to be re-generated.
    /// </summary>
    public partial class AccessPortalPropertiesPDSAManager : PDSADataClassManagerBase
    {
        #region Constructors
        /// <summary>
        /// Constructor for the AccessPortalPropertiesPDSAManager class
        /// </summary>
        public AccessPortalPropertiesPDSAManager() : base()
        {
            // The base constructor calls the Init() method
        }

        /// <summary>
        /// Constructor for the AccessPortalPropertiesPDSAManager class
        /// </summary>
        /// <param name="dataProvider">An instance of a PDSADataProvider</param>
        public AccessPortalPropertiesPDSAManager(PDSADataProvider dataProvider) : base(dataProvider)
        {
            // The base constructor calls the Init() method
        }

        /// <summary>
        /// Constructor for the AccessPortalPropertiesPDSAManager class
        /// </summary>
        /// <param name="dataProviderName">The name of the DataProvider to use for all data access</param>
        public AccessPortalPropertiesPDSAManager(string dataProviderName) : base(dataProviderName)
        {
            // The base constructor calls the Init() method
        }
        #endregion

        #region Private variables
        private AccessPortalPropertiesPDSA _Entity = null;
        private AccessPortalPropertiesPDSA _SearchEntity = null;
        #endregion

        #region Public Properties
        /// <summary>
        /// Get/Set the entity class. This is the class that contains one property for each column in the table.
        /// </summary>
        public AccessPortalPropertiesPDSA Entity
        {
            get { return _Entity; }
            set
            {
                _Entity = value;
                if (Validator != null)
                    Validator.Entity = value;
                if (DataObject != null)
                    DataObject.Entity = value;
            }
        }

        /// <summary>
        /// Get/Set the Entity class used for searching
        /// </summary>
        public AccessPortalPropertiesPDSA SearchEntity
        {
            get
            {
                // Create Search Entity Class if not created
                if (_SearchEntity == null)
                {
                    _SearchEntity = new AccessPortalPropertiesPDSA();
                    InitSearchFilter();
                }

                return _SearchEntity;
            }
            set { _SearchEntity = value; }
        }

        /// <summary>
        /// Get/Set the validator class. This is the class that contains the business rules for the Entity class.
        /// </summary>
        public AccessPortalPropertiesPDSAValidator Validator { get; set; }
        /// <summary>
        /// Get/Set the data class that contains the CRUD logic for loading the Entity class
        /// </summary>
        public AccessPortalPropertiesPDSAData DataObject { get; set; }
        #endregion

        #region Init Method
        /// <summary>
        /// Initialize this class to a valid start state
        /// </summary>
        protected override void Init()
        {
            // Create Entity Class if not created
            if (Entity == null)
            {
                Entity = new AccessPortalPropertiesPDSA();

                // Set any default values on the Entity object
                InitEntityObject();
            }

            // Create Validator Class
            if (Validator == null)
                Validator = new AccessPortalPropertiesPDSAValidator(Entity);

            // Create Data Class if not created
            if (DataObject == null)
                DataObject = new AccessPortalPropertiesPDSAData(DataProvider, Entity, Validator);
            else
            {
                DataObject.DataProvider = DataProvider;
                DataObject.ValidatorObject = Validator;
                DataObject.Entity = Entity;
            }

            DataObject.CommandTimeout = Globals.Instance.SqlCommandTimeout;
            ClassName = "AccessPortalPropertiesPDSAManager";
        }
        #endregion

        #region DictionaryToEntity Method
        /// <summary>
        /// Takes the filled Dictionary object and puts the values into the Entity object
        /// </summary>
        /// <param name="values">A Dictionary object</param>
        /// <returns>An EmployeeType object</returns>
        public AccessPortalPropertiesPDSA DictionaryToEntity(Dictionary<string, string> values)
        {
            AccessPortalPropertiesPDSA ret = new AccessPortalPropertiesPDSA();

            // Initialize Entity Object
            InitEntityObject(ret);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalPropertiesUid))
                ret.AccessPortalPropertiesUid = PDSAProperty.ConvertToGuid(values[AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalPropertiesUid]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalUid))
                ret.AccessPortalUid = PDSAProperty.ConvertToGuid(values[AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalUid]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.AutomaticForgivePassbackFrequencyUid))
                ret.AutomaticForgivePassbackFrequencyUid = PDSAProperty.ConvertToGuid(values[AccessPortalPropertiesPDSAValidator.ColumnNames.AutomaticForgivePassbackFrequencyUid]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.PinRequiredModeUid))
                ret.PinRequiredModeUid = PDSAProperty.ConvertToGuid(values[AccessPortalPropertiesPDSAValidator.ColumnNames.PinRequiredModeUid]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalContactSupervisionTypeUid))
                ret.AccessPortalContactSupervisionTypeUid = PDSAProperty.ConvertToGuid(values[AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalContactSupervisionTypeUid]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalDeferToServerBehaviorUid))
                ret.AccessPortalDeferToServerBehaviorUid = PDSAProperty.ConvertToGuid(values[AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalDeferToServerBehaviorUid]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalNoServerReplyBehaviorUid))
                ret.AccessPortalNoServerReplyBehaviorUid = PDSAProperty.ConvertToGuid(values[AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalNoServerReplyBehaviorUid]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalLockPushButtonBehaviorUid))
                ret.AccessPortalLockPushButtonBehaviorUid = PDSAProperty.ConvertToGuid(values[AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalLockPushButtonBehaviorUid]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.LiquidCrystalDisplayUid))
                ret.LiquidCrystalDisplayUid = PDSAProperty.ConvertToGuid(values[AccessPortalPropertiesPDSAValidator.ColumnNames.LiquidCrystalDisplayUid]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalElevatorControlTypeUid))
                ret.AccessPortalElevatorControlTypeUid = PDSAProperty.ConvertToGuid(values[AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalElevatorControlTypeUid]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.OtisElevatorDecUid))
                ret.OtisElevatorDecUid = PDSAProperty.ConvertToGuid(values[AccessPortalPropertiesPDSAValidator.ColumnNames.OtisElevatorDecUid]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.ElevatorRelayInterfaceBoardSectionUid))
                ret.ElevatorRelayInterfaceBoardSectionUid = PDSAProperty.ConvertToGuid(values[AccessPortalPropertiesPDSAValidator.ColumnNames.ElevatorRelayInterfaceBoardSectionUid]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalMultiFactorModeUid))
                ret.AccessPortalMultiFactorModeUid = PDSAProperty.ConvertToGuid(values[AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalMultiFactorModeUid]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorNumber))
                ret.DoorNumber = Convert.ToInt16(values[AccessPortalPropertiesPDSAValidator.ColumnNames.DoorNumber]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDelay))
                ret.UnlockDelay = Convert.ToInt32(values[AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDelay]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDuration))
                ret.UnlockDuration = Convert.ToInt32(values[AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDuration]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.RecloseDuration))
                ret.RecloseDuration = Convert.ToInt32(values[AccessPortalPropertiesPDSAValidator.ColumnNames.RecloseDuration]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.AllowPassbackAccess))
                ret.AllowPassbackAccess = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.AllowPassbackAccess]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireTwoValidCredentials))
                ret.RequireTwoValidCredentials = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.RequireTwoValidCredentials]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockOnREX))
                ret.UnlockOnREX = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockOnREX]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressIllegalOpenLog))
                ret.SuppressIllegalOpenLog = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressIllegalOpenLog]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressOpenTooLongLog))
                ret.SuppressOpenTooLongLog = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressOpenTooLongLog]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressClosedLog))
                ret.SuppressClosedLog = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressClosedLog]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressREXLog))
                ret.SuppressREXLog = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressREXLog]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs))
                ret.GenerateDoorContactChangeLogs = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.LockWhenDoorCloses))
                ret.LockWhenDoorCloses = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.LockWhenDoorCloses]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.EnableDuress))
                ret.EnableDuress = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.EnableDuress]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupNotify))
                ret.DoorGroupNotify = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupNotify]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupCanDisable))
                ret.DoorGroupCanDisable = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupCanDisable]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay))
                ret.RelayOneOnDuringArmDelay = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock))
                ret.RequireValidAccessForAutoUnlock = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.PINSpecifiesRecloseDuration))
                ret.PINSpecifiesRecloseDuration = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.PINSpecifiesRecloseDuration]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen))
                ret.ValidAccessRequiresDoorOpen = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount))
                ret.DontDecrementLimitedSwipeExpireCount = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.IgnoreNotInSystem))
                ret.IgnoreNotInSystem = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.IgnoreNotInSystem]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.ReaderSendsHeartbeat))
                ret.ReaderSendsHeartbeat = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.ReaderSendsHeartbeat]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.PhotoVerificationEnabled))
                ret.PhotoVerificationEnabled = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.PhotoVerificationEnabled]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.TimeAttendancePortal))
                ret.TimeAttendancePortal = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.TimeAttendancePortal]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.EMailEventsEnabled))
                ret.EMailEventsEnabled = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.EMailEventsEnabled]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.TransmitEventsEnabled))
                ret.TransmitEventsEnabled = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.TransmitEventsEnabled]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.FileOutputEnabled))
                ret.FileOutputEnabled = Convert.ToBoolean(values[AccessPortalPropertiesPDSAValidator.ColumnNames.FileOutputEnabled]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertName))
                ret.InsertName = PDSAString.ConvertToStringTrim(values[AccessPortalPropertiesPDSAValidator.ColumnNames.InsertName]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertDate))
                ret.InsertDate = Convert.ToDateTime(values[AccessPortalPropertiesPDSAValidator.ColumnNames.InsertDate]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateName))
                ret.UpdateName = PDSAString.ConvertToStringTrim(values[AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateName]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateDate))
                ret.UpdateDate = Convert.ToDateTime(values[AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateDate]);

            if (values.ContainsKey(AccessPortalPropertiesPDSAValidator.ColumnNames.ConcurrencyValue))
                ret.ConcurrencyValue = Convert.ToInt16(values[AccessPortalPropertiesPDSAValidator.ColumnNames.ConcurrencyValue]);

            return ret;
        }
        #endregion

        #region BuildCollection Method
        /// <summary>
        /// Returns a collection of AccessPortalPropertiesPDSA classes based on the filters set
        /// You can set the SearchEntity object with values to search on partial data
        /// prior to calling this method to filter the results
        /// </summary>
        /// <returns>AccessPortalPropertiesPDSACollection</returns>
        public AccessPortalPropertiesPDSACollection BuildCollection()
        {
            AccessPortalPropertiesPDSACollection coll = new AccessPortalPropertiesPDSACollection();
            AccessPortalPropertiesPDSA entity = null;
            DataSet ds;

            try
            {
                DataObject.Entity = Entity;
                ds = DataObject.GetDataSet();

                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[ds.Tables.Count - 1].Rows)
                    {
                        entity = DataObject.CreateEntityFromDataRow(dr);

                        // You can set any additional properties here

                        coll.Add(entity);
                    }
                }
            }
            catch (Exception ex)
            {
                // This is here for design time exceptions
#if BuildCollection_LogFullException
                System.Diagnostics.Debug.WriteLine($"Exception in {System.Reflection.MethodBase.GetCurrentMethod()?.DeclaringType?.FullName}=>{System.Reflection.MethodBase.GetCurrentMethod()?.Name}:{ex}");
#else
                System.Diagnostics.Debug.WriteLine(ex.Message);
                var innerEx = ex.InnerException;
                while (innerEx != null)
                {
                    System.Diagnostics.Debug.WriteLine(innerEx.Message);
                    innerEx = innerEx.InnerException;
                }
#endif
            }

            return coll;
        }

        /// <summary>
        /// Build collection from a DataSet returned from a stored procedure
        /// </summary>
        /// <param name="ds">A DataSet</param>
        /// <returns>A collection of AccessPortalPropertiesPDSA objects</returns>
        public AccessPortalPropertiesPDSACollection BuildCollection(DataSet ds)
        {
            AccessPortalPropertiesPDSACollection coll = new AccessPortalPropertiesPDSACollection();

            if (ds != null)
            {
                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow item in ds.Tables[0].Rows)
                    {
                        coll.Add(DataObject.CreateEntityFromDataRow(item));
                    }
                }
            }

            return coll;
        }

        /// <summary>
        /// Build collection from a DataTable returned from a stored procedure
        /// </summary>
        /// <param name="dt">A DataTable</param>
        /// <returns>A collection of AccessPortalPropertiesPDSA objects</returns>
        public AccessPortalPropertiesPDSACollection BuildCollection(DataTable dt)
        {
            DataSet ds = new DataSet();

            ds.Tables.Add(dt);

            return BuildCollection(ds);
        }
        #endregion

        #region GetCollectionAsJSON Method
        /// <summary>
        /// Returns a collection of AccessPortalPropertiesPDSA objects as a JSON formatted string
        /// </summary>
        /// <returns>A JSON formatted string</returns>
        public string GetCollectionAsJSON()
        {
            return PDSAString.GetAsJSON(typeof(AccessPortalPropertiesPDSACollection), BuildCollection());
        }
        #endregion

        #region GetDataSet Methods
        /// <summary>
        /// Get DataSet with all rows or with any filters you have set
        /// </summary>
        /// <returns>A DatSet object</returns>
        public DataSet GetDataSet()
        {
            return DataObject.GetDataSet();
        }

        /// <summary>
        /// Get DataSet using the SearchEntity object
        /// </summary>
        /// <returns>A DatSet object</returns>
        public DataSet GetDataSetUsingSearchFilters()
        {
            DataObject.SelectFilter = AccessPortalPropertiesPDSAData.SelectFilters.Search;

            // Create connection
            DataObject.CommandObject.Connection = DataProvider.CreateConnection(DataProvider.ConnectString);

            return DataProvider.GetDataSet(DataObject.CommandObject);
        }
        #endregion

        #region InitSearchFilter Method
        /// <summary>
        /// Re-Initialize a 'SearchEntity' property
        /// </summary>
        public void InitSearchFilter()
        {
            // Initialize Search Entity
            SearchEntity = InitSearchFilter(SearchEntity);
        }

        /// <summary>
        /// Re-Initialize a Search Entity object
        /// Usually you will use this to set the SearchEntity object
        /// 
        /// AccessPortalPropertiesPDSA.SearchEntity = mgr.InitSearchFilter(AccessPortalPropertiesPDSA.SearchEntity);
        /// </summary>
        /// <param name="searchEntity">A AccessPortalPropertiesPDSA object</param>
        /// <returns>An AccessPortalPropertiesPDSA object</returns>
        public AccessPortalPropertiesPDSA InitSearchFilter(AccessPortalPropertiesPDSA searchEntity)
        {
            searchEntity.InsertName = string.Empty;

            searchEntity.IsDirty = false;

            DataObject.SelectFilter = AccessPortalPropertiesPDSAData.SelectFilters.All;

            return searchEntity;
        }
        #endregion

        #region Insert Method
        /// <summary>
        /// Insert a new entity into the GCS.AccessPortalProperties table
        /// </summary>
        /// <param name="entity">An AccessPortalPropertiesPDSA entity object</param>
        /// <returns>Number of rows affected by the Insert</returns>
        public int Insert(AccessPortalPropertiesPDSA entity)
        {
            int ret = 0;

            Entity = entity;
            DataObject.Entity = entity;
            ret = DataObject.Insert();
            if (ret >= 1)
                TrackChanges("Insert");

            return ret;
        }
        #endregion

        #region Update Method
        /// <summary>
        /// Updates an entity in the GCS.AccessPortalProperties table
        /// </summary>
        /// <param name="entity">An AccessPortalPropertiesPDSA entity object</param>
        /// <returns>Number of rows affected by the Update</returns>
        public int Update(AccessPortalPropertiesPDSA entity)
        {
            int ret = 0;

            Entity = entity;
            DataObject.Entity = entity;
            ret = DataObject.Update();
            if (ret >= 1)
                TrackChanges("Update");

            return ret;
        }
        #endregion

        #region Delete Method
        /// <summary>
        /// Deletes an entity from the GCS.AccessPortalProperties table
        /// </summary>
        /// <param name="entity">An AccessPortalPropertiesPDSA entity object</param>
        /// <returns>Number of rows affected by the Delete</returns>
        public int Delete(AccessPortalPropertiesPDSA entity)
        {
            int ret = 0;

            Entity = entity;
            DataObject.Entity = entity;
            ret = DataObject.DeleteByPK(entity.AccessPortalPropertiesUid);
            if (ret >= 1)
                TrackChanges("Delete");

            return ret;
        }
        #endregion



        #region GetAccessPortalPropertiesPDSAsByFK_AccessPortalDeferToServerBehaviorEntity Method
        public AccessPortalPropertiesPDSACollection GetAccessPortalPropertiesPDSAsByFK_AccessPortalDeferToServerBehaviorEntity(AccessPortalDeferToServerBehaviorPDSA entity)
        {
            if (entity != null)
            {
                try
                {
                    if (DataObject.UseStoredProcs)
                    {
                        DataObject.SelectFilter = AccessPortalPropertiesPDSAData.SelectFilters.ByAccessPortalDeferToServerBehaviorUid;
                    }
                    else
                    {
                    }

                    Entity.AccessPortalDeferToServerBehaviorUid = entity.AccessPortalDeferToServerBehaviorUid;
                }
                catch (Exception ex)
                {                // This is here for design time exceptions
                    System.Diagnostics.Debug.WriteLine(ex.Message);
                    var innerEx = ex.InnerException;
                    while (innerEx != null)
                    {
                        System.Diagnostics.Debug.WriteLine(innerEx.Message);
                        innerEx = innerEx.InnerException;
                    }
                }

                return BuildCollection();
            }
            else
                return new AccessPortalPropertiesPDSACollection();
        }
        #endregion

        #region GetAccessPortalPropertiesPDSAsByFK_AccessPortalDeferToServerBehavior Method
        public AccessPortalPropertiesPDSACollection GetAccessPortalPropertiesPDSAsByFK_AccessPortalDeferToServerBehavior(Guid accessPortalDeferToServerBehaviorUid)
        {
            try
            {
                if (DataObject.UseStoredProcs)
                {
                    DataObject.SelectFilter = AccessPortalPropertiesPDSAData.SelectFilters.ByAccessPortalDeferToServerBehaviorUid;
                }
                else
                {
                }

                Entity.AccessPortalDeferToServerBehaviorUid = accessPortalDeferToServerBehaviorUid;
            }
            catch (Exception ex)
            {
                // This is here for design time exceptions
#if BuildCollection_LogFullException
                System.Diagnostics.Debug.WriteLine($"Exception in {System.Reflection.MethodBase.GetCurrentMethod()?.DeclaringType?.FullName}=>{System.Reflection.MethodBase.GetCurrentMethod()?.Name}:{ex}");
#else
                System.Diagnostics.Debug.WriteLine(ex.Message);
                var innerEx = ex.InnerException;
                while (innerEx != null)
                {
                    System.Diagnostics.Debug.WriteLine(innerEx.Message);
                    innerEx = innerEx.InnerException;
                }
#endif
            }

            return BuildCollection();
        }
        #endregion

        #region GetAccessPortalPropertiesPDSAsByFK_AccessPortalElevatorControlTypeEntity Method
        public AccessPortalPropertiesPDSACollection GetAccessPortalPropertiesPDSAsByFK_AccessPortalElevatorControlTypeEntity(AccessPortalElevatorControlTypePDSA entity)
        {
            if (entity != null)
            {
                try
                {
                    if (DataObject.UseStoredProcs)
                    {
                        DataObject.SelectFilter = AccessPortalPropertiesPDSAData.SelectFilters.ByAccessPortalElevatorControlTypeUid;
                    }
                    else
                    {
                    }

                    Entity.AccessPortalElevatorControlTypeUid = entity.AccessPortalElevatorControlTypeUid;
                }
                catch (Exception ex)
                {                // This is here for design time exceptions
                    System.Diagnostics.Debug.WriteLine(ex.Message);
                    var innerEx = ex.InnerException;
                    while (innerEx != null)
                    {
                        System.Diagnostics.Debug.WriteLine(innerEx.Message);
                        innerEx = innerEx.InnerException;
                    }
                }

                return BuildCollection();
            }
            else
                return new AccessPortalPropertiesPDSACollection();
        }
        #endregion

        #region GetAccessPortalPropertiesPDSAsByFK_AccessPortalElevatorControlType Method
        public AccessPortalPropertiesPDSACollection GetAccessPortalPropertiesPDSAsByFK_AccessPortalElevatorControlType(Guid accessPortalElevatorControlTypeUid)
        {
            try
            {
                if (DataObject.UseStoredProcs)
                {
                    DataObject.SelectFilter = AccessPortalPropertiesPDSAData.SelectFilters.ByAccessPortalElevatorControlTypeUid;
                }
                else
                {
                }

                Entity.AccessPortalElevatorControlTypeUid = accessPortalElevatorControlTypeUid;
            }
            catch (Exception ex)
            {
                // This is here for design time exceptions
#if BuildCollection_LogFullException
                System.Diagnostics.Debug.WriteLine($"Exception in {System.Reflection.MethodBase.GetCurrentMethod()?.DeclaringType?.FullName}=>{System.Reflection.MethodBase.GetCurrentMethod()?.Name}:{ex}");
#else
                System.Diagnostics.Debug.WriteLine(ex.Message);
                var innerEx = ex.InnerException;
                while (innerEx != null)
                {
                    System.Diagnostics.Debug.WriteLine(innerEx.Message);
                    innerEx = innerEx.InnerException;
                }
#endif
            }

            return BuildCollection();
        }
        #endregion

        #region GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesAccessPortalMultiFactorModeEntity Method
        public AccessPortalPropertiesPDSACollection GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesAccessPortalMultiFactorModeEntity(AccessPortalMultiFactorModePDSA entity)
        {
            if (entity != null)
            {
                try
                {
                    if (DataObject.UseStoredProcs)
                    {
                        DataObject.SelectFilter = AccessPortalPropertiesPDSAData.SelectFilters.ByAccessPortalMultiFactorModeUid;
                    }
                    else
                    {
                    }

                    Entity.AccessPortalMultiFactorModeUid = entity.AccessPortalMultiFactorModeUid;
                }
                catch (Exception ex)
                {                // This is here for design time exceptions
                    System.Diagnostics.Debug.WriteLine(ex.Message);
                    var innerEx = ex.InnerException;
                    while (innerEx != null)
                    {
                        System.Diagnostics.Debug.WriteLine(innerEx.Message);
                        innerEx = innerEx.InnerException;
                    }
                }

                return BuildCollection();
            }
            else
                return new AccessPortalPropertiesPDSACollection();
        }
        #endregion

        #region GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesAccessPortalMultiFactorMode Method
        public AccessPortalPropertiesPDSACollection GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesAccessPortalMultiFactorMode(Guid accessPortalMultiFactorModeUid)
        {
            try
            {
                if (DataObject.UseStoredProcs)
                {
                    DataObject.SelectFilter = AccessPortalPropertiesPDSAData.SelectFilters.ByAccessPortalMultiFactorModeUid;
                }
                else
                {
                }

                Entity.AccessPortalMultiFactorModeUid = accessPortalMultiFactorModeUid;
            }
            catch (Exception ex)
            {
                // This is here for design time exceptions
#if BuildCollection_LogFullException
                System.Diagnostics.Debug.WriteLine($"Exception in {System.Reflection.MethodBase.GetCurrentMethod()?.DeclaringType?.FullName}=>{System.Reflection.MethodBase.GetCurrentMethod()?.Name}:{ex}");
#else
                System.Diagnostics.Debug.WriteLine(ex.Message);
                var innerEx = ex.InnerException;
                while (innerEx != null)
                {
                    System.Diagnostics.Debug.WriteLine(innerEx.Message);
                    innerEx = innerEx.InnerException;
                }
#endif
            }

            return BuildCollection();
        }
        #endregion

        #region GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesContactSupervisionTypeEntity Method
        public AccessPortalPropertiesPDSACollection GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesContactSupervisionTypeEntity(AccessPortalContactSupervisionTypePDSA entity)
        {
            if (entity != null)
            {
                try
                {
                    if (DataObject.UseStoredProcs)
                    {
                        DataObject.SelectFilter = AccessPortalPropertiesPDSAData.SelectFilters.ByAccessPortalContactSupervisionTypeUid;
                    }
                    else
                    {
                    }

                    Entity.AccessPortalContactSupervisionTypeUid = entity.AccessPortalContactSupervisionTypeUid;
                }
                catch (Exception ex)
                {                // This is here for design time exceptions
                    System.Diagnostics.Debug.WriteLine(ex.Message);
                    var innerEx = ex.InnerException;
                    while (innerEx != null)
                    {
                        System.Diagnostics.Debug.WriteLine(innerEx.Message);
                        innerEx = innerEx.InnerException;
                    }
                }

                return BuildCollection();
            }
            else
                return new AccessPortalPropertiesPDSACollection();
        }
        #endregion

        #region GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesContactSupervisionType Method
        public AccessPortalPropertiesPDSACollection GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesContactSupervisionType(Guid accessPortalContactSupervisionTypeUid)
        {
            try
            {
                if (DataObject.UseStoredProcs)
                {
                    DataObject.SelectFilter = AccessPortalPropertiesPDSAData.SelectFilters.ByAccessPortalContactSupervisionTypeUid;
                }
                else
                {
                }

                Entity.AccessPortalContactSupervisionTypeUid = accessPortalContactSupervisionTypeUid;
            }
            catch (Exception ex)
            {
                // This is here for design time exceptions
#if BuildCollection_LogFullException
                System.Diagnostics.Debug.WriteLine($"Exception in {System.Reflection.MethodBase.GetCurrentMethod()?.DeclaringType?.FullName}=>{System.Reflection.MethodBase.GetCurrentMethod()?.Name}:{ex}");
#else
                System.Diagnostics.Debug.WriteLine(ex.Message);
                var innerEx = ex.InnerException;
                while (innerEx != null)
                {
                    System.Diagnostics.Debug.WriteLine(innerEx.Message);
                    innerEx = innerEx.InnerException;
                }
#endif
            }

            return BuildCollection();
        }
        #endregion

        #region GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesElevatorRelayBoardSectionEntity Method
        public AccessPortalPropertiesPDSACollection GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesElevatorRelayBoardSectionEntity(GalaxyInterfaceBoardSectionPDSA entity)
        {
            if (entity != null)
            {
                try
                {
                    if (DataObject.UseStoredProcs)
                    {
                        DataObject.SelectFilter = AccessPortalPropertiesPDSAData.SelectFilters.ByElevatorRelayInterfaceBoardSectionUid;
                    }
                    else
                    {
                    }

                    Entity.ElevatorRelayInterfaceBoardSectionUid = entity.GalaxyInterfaceBoardSectionUid;
                }
                catch (Exception ex)
                {                // This is here for design time exceptions
                    System.Diagnostics.Debug.WriteLine(ex.Message);
                    var innerEx = ex.InnerException;
                    while (innerEx != null)
                    {
                        System.Diagnostics.Debug.WriteLine(innerEx.Message);
                        innerEx = innerEx.InnerException;
                    }
                }

                return BuildCollection();
            }
            else
                return new AccessPortalPropertiesPDSACollection();
        }
        #endregion

        #region GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesElevatorRelayBoardSection Method
        public AccessPortalPropertiesPDSACollection GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesElevatorRelayBoardSection(Guid galaxyInterfaceBoardSectionUid)
        {
            try
            {
                if (DataObject.UseStoredProcs)
                {
                    DataObject.SelectFilter = AccessPortalPropertiesPDSAData.SelectFilters.ByElevatorRelayInterfaceBoardSectionUid;
                }
                else
                {
                }

                Entity.ElevatorRelayInterfaceBoardSectionUid = galaxyInterfaceBoardSectionUid;
            }
            catch (Exception ex)
            {
                // This is here for design time exceptions
#if BuildCollection_LogFullException
                System.Diagnostics.Debug.WriteLine($"Exception in {System.Reflection.MethodBase.GetCurrentMethod()?.DeclaringType?.FullName}=>{System.Reflection.MethodBase.GetCurrentMethod()?.Name}:{ex}");
#else
                System.Diagnostics.Debug.WriteLine(ex.Message);
                var innerEx = ex.InnerException;
                while (innerEx != null)
                {
                    System.Diagnostics.Debug.WriteLine(innerEx.Message);
                    innerEx = innerEx.InnerException;
                }
#endif
            }

            return BuildCollection();
        }
        #endregion

        #region GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesLiquidCrystalDisplayEntity Method
        public AccessPortalPropertiesPDSACollection GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesLiquidCrystalDisplayEntity(LiquidCrystalDisplayPDSA entity)
        {
            if (entity != null)
            {
                try
                {
                    if (DataObject.UseStoredProcs)
                    {
                        DataObject.SelectFilter = AccessPortalPropertiesPDSAData.SelectFilters.ByLiquidCrystalDisplayUid;
                    }
                    else
                    {
                    }

                    Entity.LiquidCrystalDisplayUid = entity.LiquidCrystalDisplayUid;
                }
                catch (Exception ex)
                {                // This is here for design time exceptions
                    System.Diagnostics.Debug.WriteLine(ex.Message);
                    var innerEx = ex.InnerException;
                    while (innerEx != null)
                    {
                        System.Diagnostics.Debug.WriteLine(innerEx.Message);
                        innerEx = innerEx.InnerException;
                    }
                }

                return BuildCollection();
            }
            else
                return new AccessPortalPropertiesPDSACollection();
        }
        #endregion

        #region GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesLiquidCrystalDisplay Method
        public AccessPortalPropertiesPDSACollection GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesLiquidCrystalDisplay(Guid liquidCrystalDisplayUid)
        {
            try
            {
                if (DataObject.UseStoredProcs)
                {
                    DataObject.SelectFilter = AccessPortalPropertiesPDSAData.SelectFilters.ByLiquidCrystalDisplayUid;
                }
                else
                {
                }

                Entity.LiquidCrystalDisplayUid = liquidCrystalDisplayUid;
            }
            catch (Exception ex)
            {
                // This is here for design time exceptions
#if BuildCollection_LogFullException
                System.Diagnostics.Debug.WriteLine($"Exception in {System.Reflection.MethodBase.GetCurrentMethod()?.DeclaringType?.FullName}=>{System.Reflection.MethodBase.GetCurrentMethod()?.Name}:{ex}");
#else
                System.Diagnostics.Debug.WriteLine(ex.Message);
                var innerEx = ex.InnerException;
                while (innerEx != null)
                {
                    System.Diagnostics.Debug.WriteLine(innerEx.Message);
                    innerEx = innerEx.InnerException;
                }
#endif
            }

            return BuildCollection();
        }
        #endregion

        #region GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesLockPushButtonBehaviorEntity Method
        public AccessPortalPropertiesPDSACollection GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesLockPushButtonBehaviorEntity(AccessPortalLockPushButtonBehaviorPDSA entity)
        {
            if (entity != null)
            {
                try
                {
                    if (DataObject.UseStoredProcs)
                    {
                        DataObject.SelectFilter = AccessPortalPropertiesPDSAData.SelectFilters.ByAccessPortalLockPushButtonBehaviorUid;
                    }
                    else
                    {
                    }

                    Entity.AccessPortalLockPushButtonBehaviorUid = entity.AccessPortalLockPushButtonBehaviorUid;
                }
                catch (Exception ex)
                {                // This is here for design time exceptions
                    System.Diagnostics.Debug.WriteLine(ex.Message);
                    var innerEx = ex.InnerException;
                    while (innerEx != null)
                    {
                        System.Diagnostics.Debug.WriteLine(innerEx.Message);
                        innerEx = innerEx.InnerException;
                    }
                }

                return BuildCollection();
            }
            else
                return new AccessPortalPropertiesPDSACollection();
        }
        #endregion

        #region GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesLockPushButtonBehavior Method
        public AccessPortalPropertiesPDSACollection GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesLockPushButtonBehavior(Guid accessPortalLockPushButtonBehaviorUid)
        {
            try
            {
                if (DataObject.UseStoredProcs)
                {
                    DataObject.SelectFilter = AccessPortalPropertiesPDSAData.SelectFilters.ByAccessPortalLockPushButtonBehaviorUid;
                }
                else
                {
                }

                Entity.AccessPortalLockPushButtonBehaviorUid = accessPortalLockPushButtonBehaviorUid;
            }
            catch (Exception ex)
            {
                // This is here for design time exceptions
#if BuildCollection_LogFullException
                System.Diagnostics.Debug.WriteLine($"Exception in {System.Reflection.MethodBase.GetCurrentMethod()?.DeclaringType?.FullName}=>{System.Reflection.MethodBase.GetCurrentMethod()?.Name}:{ex}");
#else
                System.Diagnostics.Debug.WriteLine(ex.Message);
                var innerEx = ex.InnerException;
                while (innerEx != null)
                {
                    System.Diagnostics.Debug.WriteLine(innerEx.Message);
                    innerEx = innerEx.InnerException;
                }
#endif
            }

            return BuildCollection();
        }
        #endregion

        #region GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesNoServerReplyBehaviorEntity Method
        public AccessPortalPropertiesPDSACollection GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesNoServerReplyBehaviorEntity(AccessPortalNoServerReplyBehaviorPDSA entity)
        {
            if (entity != null)
            {
                try
                {
                    if (DataObject.UseStoredProcs)
                    {
                        DataObject.SelectFilter = AccessPortalPropertiesPDSAData.SelectFilters.ByAccessPortalNoServerReplyBehaviorUid;
                    }
                    else
                    {
                    }

                    Entity.AccessPortalNoServerReplyBehaviorUid = entity.AccessPortalNoServerReplyBehaviorUid;
                }
                catch (Exception ex)
                {                // This is here for design time exceptions
                    System.Diagnostics.Debug.WriteLine(ex.Message);
                    var innerEx = ex.InnerException;
                    while (innerEx != null)
                    {
                        System.Diagnostics.Debug.WriteLine(innerEx.Message);
                        innerEx = innerEx.InnerException;
                    }
                }

                return BuildCollection();
            }
            else
                return new AccessPortalPropertiesPDSACollection();
        }
        #endregion

        #region GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesNoServerReplyBehavior Method
        public AccessPortalPropertiesPDSACollection GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertiesNoServerReplyBehavior(Guid accessPortalNoServerReplyBehaviorUid)
        {
            try
            {
                if (DataObject.UseStoredProcs)
                {
                    DataObject.SelectFilter = AccessPortalPropertiesPDSAData.SelectFilters.ByAccessPortalNoServerReplyBehaviorUid;
                }
                else
                {
                }

                Entity.AccessPortalNoServerReplyBehaviorUid = accessPortalNoServerReplyBehaviorUid;
            }
            catch (Exception ex)
            {
                // This is here for design time exceptions
#if BuildCollection_LogFullException
                System.Diagnostics.Debug.WriteLine($"Exception in {System.Reflection.MethodBase.GetCurrentMethod()?.DeclaringType?.FullName}=>{System.Reflection.MethodBase.GetCurrentMethod()?.Name}:{ex}");
#else
                System.Diagnostics.Debug.WriteLine(ex.Message);
                var innerEx = ex.InnerException;
                while (innerEx != null)
                {
                    System.Diagnostics.Debug.WriteLine(innerEx.Message);
                    innerEx = innerEx.InnerException;
                }
#endif
            }

            return BuildCollection();
        }
        #endregion

        #region GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertyAccessPortalEntity Method
        public AccessPortalPropertiesPDSACollection GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertyAccessPortalEntity(AccessPortalPDSA entity)
        {
            if (entity != null)
            {
                try
                {
                    if (DataObject.UseStoredProcs)
                    {
                        DataObject.SelectFilter = AccessPortalPropertiesPDSAData.SelectFilters.ByAccessPortalUid;
                    }
                    else
                    {
                    }

                    Entity.AccessPortalUid = entity.AccessPortalUid;
                }
                catch (Exception ex)
                {                // This is here for design time exceptions
                    System.Diagnostics.Debug.WriteLine(ex.Message);
                    var innerEx = ex.InnerException;
                    while (innerEx != null)
                    {
                        System.Diagnostics.Debug.WriteLine(innerEx.Message);
                        innerEx = innerEx.InnerException;
                    }
                }

                return BuildCollection();
            }
            else
                return new AccessPortalPropertiesPDSACollection();
        }
        #endregion

        #region GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertyAccessPortal Method
        public AccessPortalPropertiesPDSACollection GetAccessPortalPropertiesPDSAsByFK_AccessPortalPropertyAccessPortal(Guid accessPortalUid)
        {
            try
            {
                if (DataObject.UseStoredProcs)
                {
                    DataObject.SelectFilter = AccessPortalPropertiesPDSAData.SelectFilters.ByAccessPortalUid;
                }
                else
                {
                }

                Entity.AccessPortalUid = accessPortalUid;
            }
            catch (Exception ex)
            {
                // This is here for design time exceptions
#if BuildCollection_LogFullException
                System.Diagnostics.Debug.WriteLine($"Exception in {System.Reflection.MethodBase.GetCurrentMethod()?.DeclaringType?.FullName}=>{System.Reflection.MethodBase.GetCurrentMethod()?.Name}:{ex}");
#else
                System.Diagnostics.Debug.WriteLine(ex.Message);
                var innerEx = ex.InnerException;
                while (innerEx != null)
                {
                    System.Diagnostics.Debug.WriteLine(innerEx.Message);
                    innerEx = innerEx.InnerException;
                }
#endif
            }

            return BuildCollection();
        }
        #endregion

    }
}

