using System;
using System.Collections.Generic;
using System.Data;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;


using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;
using GalaxySMS.DataLayer;

namespace GalaxySMS.BusinessLayer
{
    /// <summary>
    /// This class is used when you need to add, edit, delete, select and validate data for the PersonPDSA table.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// DO NOT modify this class as it is intended to be re-generated.
    /// </summary>
    public partial class PersonPDSAManager : PDSADataClassManagerBase
    {
        #region Constructors
        /// <summary>
        /// Constructor for the PersonPDSAManager class
        /// </summary>
        public PersonPDSAManager() : base()
        {
            // The base constructor calls the Init() method
        }

        /// <summary>
        /// Constructor for the PersonPDSAManager class
        /// </summary>
        /// <param name="dataProvider">An instance of a PDSADataProvider</param>
        public PersonPDSAManager(PDSADataProvider dataProvider) : base(dataProvider)
        {
            // The base constructor calls the Init() method
        }

        /// <summary>
        /// Constructor for the PersonPDSAManager class
        /// </summary>
        /// <param name="dataProviderName">The name of the DataProvider to use for all data access</param>
        public PersonPDSAManager(string dataProviderName) : base(dataProviderName)
        {
            // The base constructor calls the Init() method
        }
        #endregion

        #region Private variables
        private PersonPDSA _Entity = null;
        private PersonPDSA _SearchEntity = null;
        #endregion

        #region Public Properties
        /// <summary>
        /// Get/Set the entity class. This is the class that contains one property for each column in the table.
        /// </summary>
        public PersonPDSA Entity
        {
            get { return _Entity; }
            set
            {
                _Entity = value;
                if (Validator != null)
                    Validator.Entity = value;
                if (DataObject != null)
                    DataObject.Entity = value;
            }
        }

        /// <summary>
        /// Get/Set the Entity class used for searching
        /// </summary>
        public PersonPDSA SearchEntity
        {
            get
            {
                // Create Search Entity Class if not created
                if (_SearchEntity == null)
                {
                    _SearchEntity = new PersonPDSA();
                    InitSearchFilter();
                }

                return _SearchEntity;
            }
            set { _SearchEntity = value; }
        }

        /// <summary>
        /// Get/Set the validator class. This is the class that contains the business rules for the Entity class.
        /// </summary>
        public PersonPDSAValidator Validator { get; set; }
        /// <summary>
        /// Get/Set the data class that contains the CRUD logic for loading the Entity class
        /// </summary>
        public PersonPDSAData DataObject { get; set; }
        #endregion

        #region Init Method
        /// <summary>
        /// Initialize this class to a valid start state
        /// </summary>
        protected override void Init()
        {
            // Create Entity Class if not created
            if (Entity == null)
            {
                Entity = new PersonPDSA();

                // Set any default values on the Entity object
                InitEntityObject();
            }

            // Create Validator Class
            if (Validator == null)
                Validator = new PersonPDSAValidator(Entity);

            // Create Data Class if not created
            if (DataObject == null)
                DataObject = new PersonPDSAData(DataProvider, Entity, Validator);
            else
            {
                DataObject.DataProvider = DataProvider;
                DataObject.ValidatorObject = Validator;
                DataObject.Entity = Entity;
            }

            DataObject.CommandTimeout = Globals.Instance.SqlCommandTimeout;
            ClassName = "PersonPDSAManager";
        }
        #endregion

        #region DictionaryToEntity Method
        /// <summary>
        /// Takes the filled Dictionary object and puts the values into the Entity object
        /// </summary>
        /// <param name="values">A Dictionary object</param>
        /// <returns>An EmployeeType object</returns>
        public PersonPDSA DictionaryToEntity(Dictionary<string, string> values)
        {
            PersonPDSA ret = new PersonPDSA();

            // Initialize Entity Object
            InitEntityObject(ret);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.PersonUid))
                ret.PersonUid = PDSAProperty.ConvertToGuid(values[PersonPDSAValidator.ColumnNames.PersonUid]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.CountryOfBirthUid))
                ret.CountryOfBirthUid = PDSAProperty.ConvertToGuid(values[PersonPDSAValidator.ColumnNames.CountryOfBirthUid]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.PersonActiveStatusTypeUid))
                ret.PersonActiveStatusTypeUid = PDSAProperty.ConvertToGuid(values[PersonPDSAValidator.ColumnNames.PersonActiveStatusTypeUid]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.GenderUid))
                ret.GenderUid = PDSAProperty.ConvertToGuid(values[PersonPDSAValidator.ColumnNames.GenderUid]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.DepartmentUid))
                ret.DepartmentUid = PDSAProperty.ConvertToGuid(values[PersonPDSAValidator.ColumnNames.DepartmentUid]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.PersonRecordTypeUid))
                ret.PersonRecordTypeUid = PDSAProperty.ConvertToGuid(values[PersonPDSAValidator.ColumnNames.PersonRecordTypeUid]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.EntityId))
                ret.EntityId = PDSAProperty.ConvertToGuid(values[PersonPDSAValidator.ColumnNames.EntityId]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.RowOrigin))
                ret.RowOrigin = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.RowOrigin]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.OriginId))
                ret.OriginId = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.OriginId]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.PersonId))
                ret.PersonId = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.PersonId]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.FirstName))
                ret.FirstName = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.FirstName]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.MiddleName))
                ret.MiddleName = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.MiddleName]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.LastName))
                ret.LastName = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.LastName]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.Initials))
                ret.Initials = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.Initials]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.NickName))
                ret.NickName = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.NickName]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.LegalName))
                ret.LegalName = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.LegalName]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.FullName))
                ret.FullName = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.FullName]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.PreferredName))
                ret.PreferredName = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.PreferredName]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.Company))
                ret.Company = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.Company]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.HomeOfficeLocation))
                ret.HomeOfficeLocation = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.HomeOfficeLocation]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.JobTitle))
                ret.JobTitle = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.JobTitle]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.Race))
                ret.Race = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.Race]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.Nationality))
                ret.Nationality = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.Nationality]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.Ethnicity))
                ret.Ethnicity = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.Ethnicity]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.PrimaryLanguage))
                ret.PrimaryLanguage = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.PrimaryLanguage]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.SecondaryLanguage))
                ret.SecondaryLanguage = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.SecondaryLanguage]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.NationalIdentificationNumber))
                ret.NationalIdentificationNumber = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.NationalIdentificationNumber]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.DateOfBirth))
                ret.DateOfBirth = Convert.ToDateTime(values[PersonPDSAValidator.ColumnNames.DateOfBirth]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.EmploymentDate))
                ret.EmploymentDate = Convert.ToDateTime(values[PersonPDSAValidator.ColumnNames.EmploymentDate]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TerminationDate))
                ret.TerminationDate = Convert.ToDateTime(values[PersonPDSAValidator.ColumnNames.TerminationDate]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.ActivationDateTime))
                ret.ActivationDateTime = Convert.ToDateTime(values[PersonPDSAValidator.ColumnNames.ActivationDateTime]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.ExpirationDateTime))
                ret.ExpirationDateTime = Convert.ToDateTime(values[PersonPDSAValidator.ColumnNames.ExpirationDateTime]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.Trace))
                ret.Trace = Convert.ToBoolean(values[PersonPDSAValidator.ColumnNames.Trace]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData1))
                ret.TextData1 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData1]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData2))
                ret.TextData2 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData2]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData3))
                ret.TextData3 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData3]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData4))
                ret.TextData4 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData4]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData5))
                ret.TextData5 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData5]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData6))
                ret.TextData6 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData6]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData7))
                ret.TextData7 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData7]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData8))
                ret.TextData8 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData8]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData9))
                ret.TextData9 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData9]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData10))
                ret.TextData10 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData10]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData11))
                ret.TextData11 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData11]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData12))
                ret.TextData12 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData12]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData13))
                ret.TextData13 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData13]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData14))
                ret.TextData14 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData14]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData15))
                ret.TextData15 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData15]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData16))
                ret.TextData16 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData16]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData17))
                ret.TextData17 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData17]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData18))
                ret.TextData18 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData18]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData19))
                ret.TextData19 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData19]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData20))
                ret.TextData20 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData20]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData22))
                ret.TextData22 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData22]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData23))
                ret.TextData23 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData23]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData24))
                ret.TextData24 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData24]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData25))
                ret.TextData25 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData25]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData26))
                ret.TextData26 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData26]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData27))
                ret.TextData27 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData27]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData28))
                ret.TextData28 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData28]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData29))
                ret.TextData29 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData29]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData21))
                ret.TextData21 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData21]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData30))
                ret.TextData30 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData30]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData31))
                ret.TextData31 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData31]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData32))
                ret.TextData32 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData32]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData33))
                ret.TextData33 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData33]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData34))
                ret.TextData34 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData34]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData35))
                ret.TextData35 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData35]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData36))
                ret.TextData36 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData36]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData37))
                ret.TextData37 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData37]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData38))
                ret.TextData38 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData38]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData39))
                ret.TextData39 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData39]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData40))
                ret.TextData40 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData40]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData41))
                ret.TextData41 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData41]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData42))
                ret.TextData42 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData42]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData43))
                ret.TextData43 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData43]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData44))
                ret.TextData44 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData44]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData45))
                ret.TextData45 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData45]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData46))
                ret.TextData46 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData46]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData47))
                ret.TextData47 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData47]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData48))
                ret.TextData48 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData48]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData49))
                ret.TextData49 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData49]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.TextData50))
                ret.TextData50 = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.TextData50]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.SysGalEmployeeId))
                ret.SysGalEmployeeId = Convert.ToInt32(values[PersonPDSAValidator.ColumnNames.SysGalEmployeeId]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.VeryImportantPerson))
                ret.VeryImportantPerson = Convert.ToBoolean(values[PersonPDSAValidator.ColumnNames.VeryImportantPerson]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.HasPhysicalDisability))
                ret.HasPhysicalDisability = Convert.ToBoolean(values[PersonPDSAValidator.ColumnNames.HasPhysicalDisability]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.HasVertigo))
                ret.HasVertigo = Convert.ToBoolean(values[PersonPDSAValidator.ColumnNames.HasVertigo]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.InsertName))
                ret.InsertName = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.InsertName]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.InsertDate))
                ret.InsertDate = Convert.ToDateTime(values[PersonPDSAValidator.ColumnNames.InsertDate]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.UpdateName))
                ret.UpdateName = PDSAString.ConvertToStringTrim(values[PersonPDSAValidator.ColumnNames.UpdateName]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.UpdateDate))
                ret.UpdateDate = Convert.ToDateTime(values[PersonPDSAValidator.ColumnNames.UpdateDate]);

            if (values.ContainsKey(PersonPDSAValidator.ColumnNames.ConcurrencyValue))
                ret.ConcurrencyValue = Convert.ToInt16(values[PersonPDSAValidator.ColumnNames.ConcurrencyValue]);

            return ret;
        }
        #endregion

        #region BuildCollection Method
        /// <summary>
        /// Returns a collection of PersonPDSA classes based on the filters set
        /// You can set the SearchEntity object with values to search on partial data
        /// prior to calling this method to filter the results
        /// </summary>
        /// <returns>PersonPDSACollection</returns>
        public PersonPDSACollection BuildCollection()
        {
            PersonPDSACollection coll = new PersonPDSACollection();
            PersonPDSA entity = null;
            DataSet ds;

            try
            {
                DataObject.Entity = Entity;
                ds = DataObject.GetDataSet();

                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[ds.Tables.Count - 1].Rows)
                    {
                        entity = DataObject.CreateEntityFromDataRow(dr);

                        // You can set any additional properties here

                        coll.Add(entity);
                    }
                }
            }
            catch (Exception ex)
            {
                // This is here for design time exceptions
#if BuildCollection_LogFullException
                System.Diagnostics.Debug.WriteLine($"Exception in {System.Reflection.MethodBase.GetCurrentMethod()?.DeclaringType?.FullName}=>{System.Reflection.MethodBase.GetCurrentMethod()?.Name}:{ex}");
#else
                System.Diagnostics.Debug.WriteLine(ex.Message);
                var innerEx = ex.InnerException;
                while (innerEx != null)
                {
                    System.Diagnostics.Debug.WriteLine(innerEx.Message);
                    innerEx = innerEx.InnerException;
                }
#endif
            }

            return coll;
        }

        /// <summary>
        /// Build collection from a DataSet returned from a stored procedure
        /// </summary>
        /// <param name="ds">A DataSet</param>
        /// <returns>A collection of PersonPDSA objects</returns>
        public PersonPDSACollection BuildCollection(DataSet ds)
        {
            PersonPDSACollection coll = new PersonPDSACollection();

            if (ds != null)
            {
                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow item in ds.Tables[0].Rows)
                    {
                        coll.Add(DataObject.CreateEntityFromDataRow(item));
                    }
                }
            }

            return coll;
        }

        /// <summary>
        /// Build collection from a DataTable returned from a stored procedure
        /// </summary>
        /// <param name="dt">A DataTable</param>
        /// <returns>A collection of PersonPDSA objects</returns>
        public PersonPDSACollection BuildCollection(DataTable dt)
        {
            DataSet ds = new DataSet();

            ds.Tables.Add(dt);

            return BuildCollection(ds);
        }
        #endregion

        #region GetCollectionAsJSON Method
        /// <summary>
        /// Returns a collection of PersonPDSA objects as a JSON formatted string
        /// </summary>
        /// <returns>A JSON formatted string</returns>
        public string GetCollectionAsJSON()
        {
            return PDSAString.GetAsJSON(typeof(PersonPDSACollection), BuildCollection());
        }
        #endregion

        #region GetDataSet Methods
        /// <summary>
        /// Get DataSet with all rows or with any filters you have set
        /// </summary>
        /// <returns>A DatSet object</returns>
        public DataSet GetDataSet()
        {
            return DataObject.GetDataSet();
        }

        /// <summary>
        /// Get DataSet using the SearchEntity object
        /// </summary>
        /// <returns>A DatSet object</returns>
        public DataSet GetDataSetUsingSearchFilters()
        {
            DataObject.SelectFilter = PersonPDSAData.SelectFilters.Search;

            // Create connection
            DataObject.CommandObject.Connection = DataProvider.CreateConnection(DataProvider.ConnectString);

            return DataProvider.GetDataSet(DataObject.CommandObject);
        }
        #endregion

        #region InitSearchFilter Method
        /// <summary>
        /// Re-Initialize a 'SearchEntity' property
        /// </summary>
        public void InitSearchFilter()
        {
            // Initialize Search Entity
            SearchEntity = InitSearchFilter(SearchEntity);
        }

        /// <summary>
        /// Re-Initialize a Search Entity object
        /// Usually you will use this to set the SearchEntity object
        /// 
        /// PersonPDSA.SearchEntity = mgr.InitSearchFilter(PersonPDSA.SearchEntity);
        /// </summary>
        /// <param name="searchEntity">A PersonPDSA object</param>
        /// <returns>An PersonPDSA object</returns>
        public PersonPDSA InitSearchFilter(PersonPDSA searchEntity)
        {
            searchEntity.RowOrigin = string.Empty;

            searchEntity.IsDirty = false;

            DataObject.SelectFilter = PersonPDSAData.SelectFilters.All;

            return searchEntity;
        }
        #endregion

        #region Insert Method
        /// <summary>
        /// Insert a new entity into the GCS.Person table
        /// </summary>
        /// <param name="entity">An PersonPDSA entity object</param>
        /// <returns>Number of rows affected by the Insert</returns>
        public int Insert(PersonPDSA entity)
        {
            int ret = 0;

            Entity = entity;
            DataObject.Entity = entity;
            ret = DataObject.Insert();
            if (ret >= 1)
                TrackChanges("Insert");

            return ret;
        }
        #endregion

        #region Update Method
        /// <summary>
        /// Updates an entity in the GCS.Person table
        /// </summary>
        /// <param name="entity">An PersonPDSA entity object</param>
        /// <returns>Number of rows affected by the Update</returns>
        public int Update(PersonPDSA entity)
        {
            int ret = 0;

            Entity = entity;
            DataObject.Entity = entity;
            ret = DataObject.Update();
            if (ret >= 1)
                TrackChanges("Update");

            return ret;
        }
        #endregion

        #region Delete Method
        /// <summary>
        /// Deletes an entity from the GCS.Person table
        /// </summary>
        /// <param name="entity">An PersonPDSA entity object</param>
        /// <returns>Number of rows affected by the Delete</returns>
        public int Delete(PersonPDSA entity)
        {
            int ret = 0;

            Entity = entity;
            DataObject.Entity = entity;
            ret = DataObject.DeleteByPK(entity.PersonUid);
            if (ret >= 1)
                TrackChanges("Delete");

            return ret;
        }
        #endregion



        #region GetPersonPDSAsByFK_PersonEntityEntity Method
        public PersonPDSACollection GetPersonPDSAsByFK_PersonEntityEntity(gcsEntityPDSA entity)
        {
            if (entity != null)
            {
                try
                {
                    if (DataObject.UseStoredProcs)
                    {
                        DataObject.SelectFilter = PersonPDSAData.SelectFilters.ByEntityId;
                    }
                    else
                    {
                    }

                    Entity.EntityId = entity.EntityId;
                }
                catch (Exception ex)
                {                // This is here for design time exceptions
                    System.Diagnostics.Debug.WriteLine(ex.Message);
                    var innerEx = ex.InnerException;
                    while (innerEx != null)
                    {
                        System.Diagnostics.Debug.WriteLine(innerEx.Message);
                        innerEx = innerEx.InnerException;
                    }
                }

                return BuildCollection();
            }
            else
                return new PersonPDSACollection();
        }
        #endregion

        #region GetPersonPDSAsByFK_PersonEntity Method
        public PersonPDSACollection GetPersonPDSAsByFK_PersonEntity(Guid entityId)
        {
            try
            {
                if (DataObject.UseStoredProcs)
                {
                    DataObject.SelectFilter = PersonPDSAData.SelectFilters.ByEntityId;
                }
                else
                {
                }

                Entity.EntityId = entityId;
            }
            catch (Exception ex)
            {
                // This is here for design time exceptions
#if BuildCollection_LogFullException
                System.Diagnostics.Debug.WriteLine($"Exception in {System.Reflection.MethodBase.GetCurrentMethod()?.DeclaringType?.FullName}=>{System.Reflection.MethodBase.GetCurrentMethod()?.Name}:{ex}");
#else
                System.Diagnostics.Debug.WriteLine(ex.Message);
                var innerEx = ex.InnerException;
                while (innerEx != null)
                {
                    System.Diagnostics.Debug.WriteLine(innerEx.Message);
                    innerEx = innerEx.InnerException;
                }
#endif
            }

            return BuildCollection();
        }
        #endregion

    }
}

