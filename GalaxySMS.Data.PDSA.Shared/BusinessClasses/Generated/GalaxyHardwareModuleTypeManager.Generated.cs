using System;
using System.Collections.Generic;
using System.Data;

using PDSA.Common;
using PDSA.DataLayer;
using PDSA.DataLayer.DataClasses;
using PDSA.Validation;


using GalaxySMS.EntityLayer;
using GalaxySMS.ValidationLayer;
using GalaxySMS.DataLayer;

namespace GalaxySMS.BusinessLayer
{
    /// <summary>
    /// This class is used when you need to add, edit, delete, select and validate data for the GalaxyHardwareModuleTypePDSA table.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// DO NOT modify this class as it is intended to be re-generated.
    /// </summary>
    public partial class GalaxyHardwareModuleTypePDSAManager : PDSADataClassManagerBase
    {
        #region Constructors
        /// <summary>
        /// Constructor for the GalaxyHardwareModuleTypePDSAManager class
        /// </summary>
        public GalaxyHardwareModuleTypePDSAManager() : base()
        {
            // The base constructor calls the Init() method
        }

        /// <summary>
        /// Constructor for the GalaxyHardwareModuleTypePDSAManager class
        /// </summary>
        /// <param name="dataProvider">An instance of a PDSADataProvider</param>
        public GalaxyHardwareModuleTypePDSAManager(PDSADataProvider dataProvider) : base(dataProvider)
        {
            // The base constructor calls the Init() method
        }

        /// <summary>
        /// Constructor for the GalaxyHardwareModuleTypePDSAManager class
        /// </summary>
        /// <param name="dataProviderName">The name of the DataProvider to use for all data access</param>
        public GalaxyHardwareModuleTypePDSAManager(string dataProviderName) : base(dataProviderName)
        {
            // The base constructor calls the Init() method
        }
        #endregion

        #region Private variables
        private GalaxyHardwareModuleTypePDSA _Entity = null;
        private GalaxyHardwareModuleTypePDSA _SearchEntity = null;
        #endregion

        #region Public Properties
        /// <summary>
        /// Get/Set the entity class. This is the class that contains one property for each column in the table.
        /// </summary>
        public GalaxyHardwareModuleTypePDSA Entity
        {
            get { return _Entity; }
            set
            {
                _Entity = value;
                if (Validator != null)
                    Validator.Entity = value;
                if (DataObject != null)
                    DataObject.Entity = value;
            }
        }

        /// <summary>
        /// Get/Set the Entity class used for searching
        /// </summary>
        public GalaxyHardwareModuleTypePDSA SearchEntity
        {
            get
            {
                // Create Search Entity Class if not created
                if (_SearchEntity == null)
                {
                    _SearchEntity = new GalaxyHardwareModuleTypePDSA();
                    InitSearchFilter();
                }

                return _SearchEntity;
            }
            set { _SearchEntity = value; }
        }

        /// <summary>
        /// Get/Set the validator class. This is the class that contains the business rules for the Entity class.
        /// </summary>
        public GalaxyHardwareModuleTypePDSAValidator Validator { get; set; }
        /// <summary>
        /// Get/Set the data class that contains the CRUD logic for loading the Entity class
        /// </summary>
        public GalaxyHardwareModuleTypePDSAData DataObject { get; set; }
        #endregion

        #region Init Method
        /// <summary>
        /// Initialize this class to a valid start state
        /// </summary>
        protected override void Init()
        {
            // Create Entity Class if not created
            if (Entity == null)
            {
                Entity = new GalaxyHardwareModuleTypePDSA();

                // Set any default values on the Entity object
                InitEntityObject();
            }

            // Create Validator Class
            if (Validator == null)
                Validator = new GalaxyHardwareModuleTypePDSAValidator(Entity);

            // Create Data Class if not created
            if (DataObject == null)
                DataObject = new GalaxyHardwareModuleTypePDSAData(DataProvider, Entity, Validator);
            else
            {
                DataObject.DataProvider = DataProvider;
                DataObject.ValidatorObject = Validator;
                DataObject.Entity = Entity;
            }

            DataObject.CommandTimeout = Globals.Instance.SqlCommandTimeout;
            ClassName = "GalaxyHardwareModuleTypePDSAManager";
        }
        #endregion

        #region DictionaryToEntity Method
        /// <summary>
        /// Takes the filled Dictionary object and puts the values into the Entity object
        /// </summary>
        /// <param name="values">A Dictionary object</param>
        /// <returns>An EmployeeType object</returns>
        public GalaxyHardwareModuleTypePDSA DictionaryToEntity(Dictionary<string, string> values)
        {
            GalaxyHardwareModuleTypePDSA ret = new GalaxyHardwareModuleTypePDSA();

            // Initialize Entity Object
            InitEntityObject(ret);

            if (values.ContainsKey(GalaxyHardwareModuleTypePDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid))
                ret.GalaxyHardwareModuleTypeUid = PDSAProperty.ConvertToGuid(values[GalaxyHardwareModuleTypePDSAValidator.ColumnNames.GalaxyHardwareModuleTypeUid]);

            if (values.ContainsKey(GalaxyHardwareModuleTypePDSAValidator.ColumnNames.ModuleTypeCode))
                ret.ModuleTypeCode = Convert.ToInt16(values[GalaxyHardwareModuleTypePDSAValidator.ColumnNames.ModuleTypeCode]);

            if (values.ContainsKey(GalaxyHardwareModuleTypePDSAValidator.ColumnNames.Description))
                ret.Description = PDSAString.ConvertToStringTrim(values[GalaxyHardwareModuleTypePDSAValidator.ColumnNames.Description]);

            if (values.ContainsKey(GalaxyHardwareModuleTypePDSAValidator.ColumnNames.Display))
                ret.Display = PDSAString.ConvertToStringTrim(values[GalaxyHardwareModuleTypePDSAValidator.ColumnNames.Display]);

            if (values.ContainsKey(GalaxyHardwareModuleTypePDSAValidator.ColumnNames.DisplayResourceKey))
                ret.DisplayResourceKey = PDSAProperty.ConvertToGuid(values[GalaxyHardwareModuleTypePDSAValidator.ColumnNames.DisplayResourceKey]);

            if (values.ContainsKey(GalaxyHardwareModuleTypePDSAValidator.ColumnNames.DescriptionResourceKey))
                ret.DescriptionResourceKey = PDSAProperty.ConvertToGuid(values[GalaxyHardwareModuleTypePDSAValidator.ColumnNames.DescriptionResourceKey]);

            if (values.ContainsKey(GalaxyHardwareModuleTypePDSAValidator.ColumnNames.InsertName))
                ret.InsertName = PDSAString.ConvertToStringTrim(values[GalaxyHardwareModuleTypePDSAValidator.ColumnNames.InsertName]);

            if (values.ContainsKey(GalaxyHardwareModuleTypePDSAValidator.ColumnNames.InsertDate))
                ret.InsertDate = Convert.ToDateTime(values[GalaxyHardwareModuleTypePDSAValidator.ColumnNames.InsertDate]);

            if (values.ContainsKey(GalaxyHardwareModuleTypePDSAValidator.ColumnNames.UpdateName))
                ret.UpdateName = PDSAString.ConvertToStringTrim(values[GalaxyHardwareModuleTypePDSAValidator.ColumnNames.UpdateName]);

            if (values.ContainsKey(GalaxyHardwareModuleTypePDSAValidator.ColumnNames.UpdateDate))
                ret.UpdateDate = Convert.ToDateTime(values[GalaxyHardwareModuleTypePDSAValidator.ColumnNames.UpdateDate]);

            if (values.ContainsKey(GalaxyHardwareModuleTypePDSAValidator.ColumnNames.ConcurrencyValue))
                ret.ConcurrencyValue = Convert.ToInt16(values[GalaxyHardwareModuleTypePDSAValidator.ColumnNames.ConcurrencyValue]);

            if (values.ContainsKey(GalaxyHardwareModuleTypePDSAValidator.ColumnNames.NumberOfNodes))
                ret.NumberOfNodes = Convert.ToInt16(values[GalaxyHardwareModuleTypePDSAValidator.ColumnNames.NumberOfNodes]);

            if (values.ContainsKey(GalaxyHardwareModuleTypePDSAValidator.ColumnNames.BinaryResourceUid))
                ret.BinaryResourceUid = PDSAProperty.ConvertToGuid(values[GalaxyHardwareModuleTypePDSAValidator.ColumnNames.BinaryResourceUid]);

            if (values.ContainsKey(GalaxyHardwareModuleTypePDSAValidator.ColumnNames.CultureName))
                ret.CultureName = PDSAString.ConvertToStringTrim(values[GalaxyHardwareModuleTypePDSAValidator.ColumnNames.CultureName]);

            return ret;
        }
        #endregion

        #region BuildCollection Method
        /// <summary>
        /// Returns a collection of GalaxyHardwareModuleTypePDSA classes based on the filters set
        /// You can set the SearchEntity object with values to search on partial data
        /// prior to calling this method to filter the results
        /// </summary>
        /// <returns>GalaxyHardwareModuleTypePDSACollection</returns>
        public GalaxyHardwareModuleTypePDSACollection BuildCollection()
        {
            GalaxyHardwareModuleTypePDSACollection coll = new GalaxyHardwareModuleTypePDSACollection();
            GalaxyHardwareModuleTypePDSA entity = null;
            DataSet ds;

            try
            {
                DataObject.Entity = Entity;
                ds = DataObject.GetDataSet();

                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[ds.Tables.Count - 1].Rows)
                    {
                        entity = DataObject.CreateEntityFromDataRow(dr);

                        // You can set any additional properties here

                        coll.Add(entity);
                    }
                }
            }
            catch (Exception ex)
            {
                // This is here for design time exceptions
#if BuildCollection_LogFullException
                System.Diagnostics.Debug.WriteLine($"Exception in {System.Reflection.MethodBase.GetCurrentMethod()?.DeclaringType?.FullName}=>{System.Reflection.MethodBase.GetCurrentMethod()?.Name}:{ex}");
#else
                System.Diagnostics.Debug.WriteLine(ex.Message);
                var innerEx = ex.InnerException;
                while (innerEx != null)
                {
                    System.Diagnostics.Debug.WriteLine(innerEx.Message);
                    innerEx = innerEx.InnerException;
                }
#endif
            }


            return coll;
        }

        /// <summary>
        /// Build collection from a DataSet returned from a stored procedure
        /// </summary>
        /// <param name="ds">A DataSet</param>
        /// <returns>A collection of GalaxyHardwareModuleTypePDSA objects</returns>
        public GalaxyHardwareModuleTypePDSACollection BuildCollection(DataSet ds)
        {
            GalaxyHardwareModuleTypePDSACollection coll = new GalaxyHardwareModuleTypePDSACollection();

            if (ds != null)
            {
                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow item in ds.Tables[0].Rows)
                    {
                        coll.Add(DataObject.CreateEntityFromDataRow(item));
                    }
                }
            }

            return coll;
        }

        /// <summary>
        /// Build collection from a DataTable returned from a stored procedure
        /// </summary>
        /// <param name="dt">A DataTable</param>
        /// <returns>A collection of GalaxyHardwareModuleTypePDSA objects</returns>
        public GalaxyHardwareModuleTypePDSACollection BuildCollection(DataTable dt)
        {
            DataSet ds = new DataSet();

            ds.Tables.Add(dt);

            return BuildCollection(ds);
        }
        #endregion

        #region GetCollectionAsJSON Method
        /// <summary>
        /// Returns a collection of GalaxyHardwareModuleTypePDSA objects as a JSON formatted string
        /// </summary>
        /// <returns>A JSON formatted string</returns>
        public string GetCollectionAsJSON()
        {
            return PDSAString.GetAsJSON(typeof(GalaxyHardwareModuleTypePDSACollection), BuildCollection());
        }
        #endregion

        #region GetDataSet Methods
        /// <summary>
        /// Get DataSet with all rows or with any filters you have set
        /// </summary>
        /// <returns>A DatSet object</returns>
        public DataSet GetDataSet()
        {
            return DataObject.GetDataSet();
        }

        /// <summary>
        /// Get DataSet using the SearchEntity object
        /// </summary>
        /// <returns>A DatSet object</returns>
        public DataSet GetDataSetUsingSearchFilters()
        {
            DataObject.SelectFilter = GalaxyHardwareModuleTypePDSAData.SelectFilters.Search;

            // Create connection
            DataObject.CommandObject.Connection = DataProvider.CreateConnection(DataProvider.ConnectString);

            return DataProvider.GetDataSet(DataObject.CommandObject);
        }
        #endregion

        #region InitSearchFilter Method
        /// <summary>
        /// Re-Initialize a 'SearchEntity' property
        /// </summary>
        public void InitSearchFilter()
        {
            // Initialize Search Entity
            SearchEntity = InitSearchFilter(SearchEntity);
        }

        /// <summary>
        /// Re-Initialize a Search Entity object
        /// Usually you will use this to set the SearchEntity object
        /// 
        /// GalaxyHardwareModuleTypePDSA.SearchEntity = mgr.InitSearchFilter(GalaxyHardwareModuleTypePDSA.SearchEntity);
        /// </summary>
        /// <param name="searchEntity">A GalaxyHardwareModuleTypePDSA object</param>
        /// <returns>An GalaxyHardwareModuleTypePDSA object</returns>
        public GalaxyHardwareModuleTypePDSA InitSearchFilter(GalaxyHardwareModuleTypePDSA searchEntity)
        {
            searchEntity.Description = string.Empty;

            searchEntity.IsDirty = false;

            DataObject.SelectFilter = GalaxyHardwareModuleTypePDSAData.SelectFilters.All;

            return searchEntity;
        }
        #endregion

        #region Insert Method
        /// <summary>
        /// Insert a new entity into the GCS.GalaxyHardwareModuleType table
        /// </summary>
        /// <param name="entity">An GalaxyHardwareModuleTypePDSA entity object</param>
        /// <returns>Number of rows affected by the Insert</returns>
        public int Insert(GalaxyHardwareModuleTypePDSA entity)
        {
            int ret = 0;

            Entity = entity;
            DataObject.Entity = entity;
            ret = DataObject.Insert();
            if (ret >= 1)
                TrackChanges("Insert");

            return ret;
        }
        #endregion

        #region Update Method
        /// <summary>
        /// Updates an entity in the GCS.GalaxyHardwareModuleType table
        /// </summary>
        /// <param name="entity">An GalaxyHardwareModuleTypePDSA entity object</param>
        /// <returns>Number of rows affected by the Update</returns>
        public int Update(GalaxyHardwareModuleTypePDSA entity)
        {
            int ret = 0;

            Entity = entity;
            DataObject.Entity = entity;
            ret = DataObject.Update();
            if (ret >= 1)
                TrackChanges("Update");

            return ret;
        }
        #endregion

        #region Delete Method
        /// <summary>
        /// Deletes an entity from the GCS.GalaxyHardwareModuleType table
        /// </summary>
        /// <param name="entity">An GalaxyHardwareModuleTypePDSA entity object</param>
        /// <returns>Number of rows affected by the Delete</returns>
        public int Delete(GalaxyHardwareModuleTypePDSA entity)
        {
            int ret = 0;

            Entity = entity;
            DataObject.Entity = entity;
            ret = DataObject.DeleteByPK(entity.GalaxyHardwareModuleTypeUid);
            if (ret >= 1)
                TrackChanges("Delete");

            return ret;
        }
        #endregion



    }
}

