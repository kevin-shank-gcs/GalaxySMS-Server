using System;

using PDSA.Common;
using PDSA.Validation;

using GalaxySMS.EntityLayer;

namespace GalaxySMS.ValidationLayer
{
  /// <summary>
  /// Used to validate all properties of the gcsEntityPDSA class.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class gcsEntityPDSAValidator : PDSAValidatorBase
  {
    #region Public Entity Property
    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    private gcsEntityPDSA _Entity = null;

    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    public new gcsEntityPDSA Entity
    {
      get { return _Entity; }
      set
      {
        _Entity = value;
        base.Entity = value;
      }
    }
    #endregion
    
    #region Clone Entity Class
    /// <summary>
    /// Clones the current gcsEntityPDSA
    /// </summary>
    /// <returns>A cloned gcsEntityPDSA object</returns>
    public gcsEntityPDSA CloneEntity()
    {
      return CloneEntity(this.Entity);
    }
    
    /// <summary>
    /// Clones the passed in gcsEntityPDSA
    /// </summary>
    /// <param name="entityToClone">The gcsEntityPDSA entity to clone</param>
    /// <returns>A cloned gcsEntityPDSA object</returns>
    public gcsEntityPDSA CloneEntity(gcsEntityPDSA entityToClone)
    {
      gcsEntityPDSA newEntity = new gcsEntityPDSA();

      newEntity.EntityId = entityToClone.EntityId;
      newEntity.EntityName = entityToClone.EntityName;
      newEntity.EntityDescription = entityToClone.EntityDescription;
      newEntity.EntityKey = entityToClone.EntityKey;
      newEntity.IsDefault = entityToClone.IsDefault;
      newEntity.IsActive = entityToClone.IsActive;
      newEntity.InsertName = entityToClone.InsertName;
      newEntity.InsertDate = entityToClone.InsertDate;
      newEntity.UpdateName = entityToClone.UpdateName;
      newEntity.UpdateDate = entityToClone.UpdateDate;
      newEntity.ConcurrencyValue = entityToClone.ConcurrencyValue;
      newEntity.BinaryResourceUid = entityToClone.BinaryResourceUid;
      newEntity.License = entityToClone.License;
      newEntity.ParentEntityId = entityToClone.ParentEntityId;
      newEntity.PublicKey = entityToClone.PublicKey;
      newEntity.ParentEntityName = entityToClone.ParentEntityName;
      newEntity.SearchText = entityToClone.SearchText;

      return newEntity;
    }
    #endregion

    #region CreateProperties Method
    /// <summary>
    /// Creates the collection of PDSAProperty objects. These are used to control validation and null handling.
    /// </summary>
    /// <returns>A collection of PDSAProperty objects</returns>
    public override PDSAProperties CreateProperties()
    {
      PDSAProperties props = new PDSAProperties();
      
      props.Add(PDSAProperty.Create(gcsEntityPDSAValidator.ColumnNames.EntityId, GetResourceMessage("GCS_gcsEntityPDSA_EntityId_Header", "Entity Id"), true, typeof(Guid), -1, GetResourceMessage("GCS_gcsEntityPDSA_EntityId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsEntityPDSAValidator.ColumnNames.EntityName, GetResourceMessage("GCS_gcsEntityPDSA_EntityName_Header", "Entity Name"), true, typeof(string), 65, GetResourceMessage("GCS_gcsEntityPDSA_EntityName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsEntityPDSAValidator.ColumnNames.EntityDescription, GetResourceMessage("GCS_gcsEntityPDSA_EntityDescription_Header", "Entity Description"), true, typeof(string), 255, GetResourceMessage("GCS_gcsEntityPDSA_EntityDescription_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsEntityPDSAValidator.ColumnNames.EntityKey, GetResourceMessage("GCS_gcsEntityPDSA_EntityKey_Header", "Entity Key"), true, typeof(string), 255, GetResourceMessage("GCS_gcsEntityPDSA_EntityKey_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsEntityPDSAValidator.ColumnNames.IsDefault, GetResourceMessage("GCS_gcsEntityPDSA_IsDefault_Header", "Is Default"), true, typeof(bool), -1, GetResourceMessage("GCS_gcsEntityPDSA_IsDefault_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(gcsEntityPDSAValidator.ColumnNames.IsActive, GetResourceMessage("GCS_gcsEntityPDSA_IsActive_Header", "Is Active"), true, typeof(bool), -1, GetResourceMessage("GCS_gcsEntityPDSA_IsActive_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(gcsEntityPDSAValidator.ColumnNames.InsertName, GetResourceMessage("GCS_gcsEntityPDSA_InsertName_Header", "Insert Name"), true, typeof(string), 50, GetResourceMessage("GCS_gcsEntityPDSA_InsertName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsEntityPDSAValidator.ColumnNames.InsertDate, GetResourceMessage("GCS_gcsEntityPDSA_InsertDate_Header", "Insert Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_gcsEntityPDSA_InsertDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(gcsEntityPDSAValidator.ColumnNames.UpdateName, GetResourceMessage("GCS_gcsEntityPDSA_UpdateName_Header", "Update Name"), true, typeof(string), 50, GetResourceMessage("GCS_gcsEntityPDSA_UpdateName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsEntityPDSAValidator.ColumnNames.UpdateDate, GetResourceMessage("GCS_gcsEntityPDSA_UpdateDate_Header", "Update Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_gcsEntityPDSA_UpdateDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(gcsEntityPDSAValidator.ColumnNames.ConcurrencyValue, GetResourceMessage("GCS_gcsEntityPDSA_ConcurrencyValue_Header", "Concurrency Value"), true, typeof(short), 5, GetResourceMessage("GCS_gcsEntityPDSA_ConcurrencyValue_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(gcsEntityPDSAValidator.ColumnNames.BinaryResourceUid, GetResourceMessage("GCS_gcsEntityPDSA_BinaryResourceUid_Header", "Binary Resource Uid"), false, typeof(Guid), -1, GetResourceMessage("GCS_gcsEntityPDSA_BinaryResourceUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsEntityPDSAValidator.ColumnNames.License, GetResourceMessage("GCS_gcsEntityPDSA_License_Header", "License"), false, typeof(string), 1073741823, GetResourceMessage("GCS_gcsEntityPDSA_License_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsEntityPDSAValidator.ColumnNames.ParentEntityId, GetResourceMessage("GCS_gcsEntityPDSA_ParentEntityId_Header", "Parent Entity Id"), false, typeof(Guid), -1, GetResourceMessage("GCS_gcsEntityPDSA_ParentEntityId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsEntityPDSAValidator.ColumnNames.PublicKey, GetResourceMessage("GCS_gcsEntityPDSA_PublicKey_Header", "Public Key"), false, typeof(string), 1073741823, GetResourceMessage("GCS_gcsEntityPDSA_PublicKey_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsEntityPDSAValidator.ColumnNames.ParentEntityName, GetResourceMessage("GCS_gcsEntityPDSA_ParentEntityName_Header", "Parent Entity Name"), false, typeof(string), 2147483647, GetResourceMessage("GCS_gcsEntityPDSA_ParentEntityName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(gcsEntityPDSAValidator.ColumnNames.SearchText, GetResourceMessage("GCS_gcsEntityPDSA_SearchText_Header", "Search Text"), false, typeof(string), 2147483647, GetResourceMessage("GCS_gcsEntityPDSA_SearchText_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      
      return props;
    }
    #endregion

    #region Initialize Entity
    /// <summary>
    /// This method is called from the CreateNewEntity Method. All the properties for the Entity are set to default values here by the code generator.
    /// </summary>
    protected override void InitializeEntity()
    {
      Entity.EntityId = Guid.Empty;
      Entity.EntityName = string.Empty;
      Entity.EntityDescription = string.Empty;
      Entity.EntityKey = string.Empty;
      Entity.IsDefault = false;
      Entity.IsActive = false;
      Entity.InsertName = string.Empty;
      Entity.InsertDate = DateTimeOffset.Now;
      Entity.UpdateName = string.Empty;
      Entity.UpdateDate = DateTimeOffset.Now;
      Entity.ConcurrencyValue = 0;
      Entity.BinaryResourceUid = Guid.Empty;
      Entity.License = string.Empty;
      Entity.ParentEntityId = Guid.Empty;
      Entity.PublicKey = string.Empty;
      Entity.ParentEntityName = string.Empty;
      Entity.SearchText = string.Empty;

      Entity.ResetAllIsDirtyProperties();
    }
    #endregion
    
    #region InitProperties Method
    /// <summary>
    /// Called by the constructor to create the PDSAProperties collection of all properties that will be validated.
    /// </summary>
    protected override void InitProperties()
    {
      // Set the Properties collection to the collection of Entity Properties
      Properties = CreateProperties();
    }
    #endregion

    #region EntityDataToProperties Method
    /// <summary>
    /// Moves the Entity class data into the Properties collection.
    /// </summary>
    protected override void EntityDataToProperties()
    {
      if (Properties == null)
        InitProperties();
      
      if(!Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.EntityId).SetAsNull)
        Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.EntityId).Value = Entity.EntityId;
      if(!Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.EntityName).SetAsNull)
        Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.EntityName).Value = Entity.EntityName;
      if(!Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.EntityDescription).SetAsNull)
        Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.EntityDescription).Value = Entity.EntityDescription;
      if(!Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.EntityKey).SetAsNull)
        Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.EntityKey).Value = Entity.EntityKey;
      if(!Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.IsDefault).SetAsNull)
        Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.IsDefault).Value = Entity.IsDefault;
      if(!Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.IsActive).SetAsNull)
        Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.IsActive).Value = Entity.IsActive;
      if(!Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.InsertName).SetAsNull)
        Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if(!Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.InsertDate).SetAsNull)
        Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if(!Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.UpdateName).SetAsNull)
        Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if(!Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.UpdateDate).SetAsNull)
        Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if(!Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull)
        Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
      if(!Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.BinaryResourceUid).SetAsNull)
        Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.BinaryResourceUid).Value = Entity.BinaryResourceUid;
      if(!Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.License).SetAsNull)
        Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.License).Value = Entity.License;
      if(!Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.ParentEntityId).SetAsNull)
        Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.ParentEntityId).Value = Entity.ParentEntityId;
      if(!Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.PublicKey).SetAsNull)
        Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.PublicKey).Value = Entity.PublicKey;
      if(!Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.ParentEntityName).SetAsNull)
        Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.ParentEntityName).Value = Entity.ParentEntityName;
      if(!Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.SearchText).SetAsNull)
        Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.SearchText).Value = Entity.SearchText;
    }

    /// <summary>
    /// Moves the Properties collection objects into the Entity properties
    /// </summary>
    protected override void PropertiesToEntityData()
    {
      if (Properties == null)
        InitProperties();

      if(Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.EntityId).IsNull == false)
        Entity.EntityId = Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.EntityId).GetAsGuid();
      if(Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.EntityName).IsNull == false)
        Entity.EntityName = Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.EntityName).GetAsString();
      if(Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.EntityDescription).IsNull == false)
        Entity.EntityDescription = Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.EntityDescription).GetAsString();
      if(Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.EntityKey).IsNull == false)
        Entity.EntityKey = Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.EntityKey).GetAsString();
      if(Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.IsDefault).IsNull == false)
        Entity.IsDefault = Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.IsDefault).GetAsBool();
      if(Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.IsActive).IsNull == false)
        Entity.IsActive = Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.IsActive).GetAsBool();
      if(Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.InsertName).GetAsString();
      if(Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
      if(Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.UpdateName).GetAsString();
      if(Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.UpdateDate).GetAsDateTimeOffset();
      if(Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
      if(Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.BinaryResourceUid).IsNull == false)
        Entity.BinaryResourceUid = Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.BinaryResourceUid).GetAsGuid();
      if(Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.License).IsNull == false)
        Entity.License = Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.License).GetAsString();
      if(Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.ParentEntityId).IsNull == false)
        Entity.ParentEntityId = Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.ParentEntityId).GetAsGuid();
      if(Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.PublicKey).IsNull == false)
        Entity.PublicKey = Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.PublicKey).GetAsString();
      if(Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.ParentEntityName).IsNull == false)
        Entity.ParentEntityName = Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.ParentEntityName).GetAsString();
      if(Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.SearchText).IsNull == false)
        Entity.SearchText = Properties.GetByName(gcsEntityPDSAValidator.ColumnNames.SearchText).GetAsString();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the gcsEntityPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'EntityId'
    /// </summary>
    public static string EntityId = "EntityId";
    /// <summary>
    /// Returns 'EntityName'
    /// </summary>
    public static string EntityName = "EntityName";
    /// <summary>
    /// Returns 'EntityDescription'
    /// </summary>
    public static string EntityDescription = "EntityDescription";
    /// <summary>
    /// Returns 'EntityKey'
    /// </summary>
    public static string EntityKey = "EntityKey";
    /// <summary>
    /// Returns 'IsDefault'
    /// </summary>
    public static string IsDefault = "IsDefault";
    /// <summary>
    /// Returns 'IsActive'
    /// </summary>
    public static string IsActive = "IsActive";
    /// <summary>
    /// Returns 'InsertName'
    /// </summary>
    public static string InsertName = "InsertName";
    /// <summary>
    /// Returns 'InsertDate'
    /// </summary>
    public static string InsertDate = "InsertDate";
    /// <summary>
    /// Returns 'UpdateName'
    /// </summary>
    public static string UpdateName = "UpdateName";
    /// <summary>
    /// Returns 'UpdateDate'
    /// </summary>
    public static string UpdateDate = "UpdateDate";
    /// <summary>
    /// Returns 'ConcurrencyValue'
    /// </summary>
    public static string ConcurrencyValue = "ConcurrencyValue";
    /// <summary>
    /// Returns 'BinaryResourceUid'
    /// </summary>
    public static string BinaryResourceUid = "BinaryResourceUid";
    /// <summary>
    /// Returns 'License'
    /// </summary>
    public static string License = "License";
    /// <summary>
    /// Returns 'ParentEntityId'
    /// </summary>
    public static string ParentEntityId = "ParentEntityId";
    /// <summary>
    /// Returns 'PublicKey'
    /// </summary>
    public static string PublicKey = "PublicKey";
    /// <summary>
    /// Returns 'ParentEntityName'
    /// </summary>
    public static string ParentEntityName = "ParentEntityName";
    /// <summary>
    /// Returns 'SearchText'
    /// </summary>
    public static string SearchText = "SearchText";
    }
    #endregion
  }
}
