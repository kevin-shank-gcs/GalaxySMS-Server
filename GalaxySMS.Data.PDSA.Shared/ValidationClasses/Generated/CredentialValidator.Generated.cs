using System;

using PDSA.Common;
using PDSA.Validation;

using GalaxySMS.EntityLayer;

namespace GalaxySMS.ValidationLayer
{
  /// <summary>
  /// Used to validate all properties of the CredentialPDSA class.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class CredentialPDSAValidator : PDSAValidatorBase
  {
    #region Public Entity Property
    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    private CredentialPDSA _Entity = null;

    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    public new CredentialPDSA Entity
    {
      get { return _Entity; }
      set
      {
        _Entity = value;
        base.Entity = value;
      }
    }
    #endregion
    
    #region Clone Entity Class
    /// <summary>
    /// Clones the current CredentialPDSA
    /// </summary>
    /// <returns>A cloned CredentialPDSA object</returns>
    public CredentialPDSA CloneEntity()
    {
      return CloneEntity(this.Entity);
    }
    
    /// <summary>
    /// Clones the passed in CredentialPDSA
    /// </summary>
    /// <param name="entityToClone">The CredentialPDSA entity to clone</param>
    /// <returns>A cloned CredentialPDSA object</returns>
    public CredentialPDSA CloneEntity(CredentialPDSA entityToClone)
    {
      CredentialPDSA newEntity = new CredentialPDSA();

      newEntity.CredentialUid = entityToClone.CredentialUid;
      newEntity.CredentialFormatUid = entityToClone.CredentialFormatUid;
      newEntity.CardNumber = entityToClone.CardNumber;
      newEntity.CardNumberIsHex = entityToClone.CardNumberIsHex;
      newEntity.CardBinaryData = entityToClone.CardBinaryData;
      newEntity.InsertName = entityToClone.InsertName;
      newEntity.InsertDate = entityToClone.InsertDate;
      newEntity.UpdateName = entityToClone.UpdateName;
      newEntity.UpdateDate = entityToClone.UpdateDate;
      newEntity.ConcurrencyValue = entityToClone.ConcurrencyValue;
      newEntity.BitCount = entityToClone.BitCount;
      newEntity.FacilityCode = entityToClone.FacilityCode;
      newEntity.IdCode = entityToClone.IdCode;
      newEntity.IssueCode = entityToClone.IssueCode;
      newEntity.AgencyCode = entityToClone.AgencyCode;
      newEntity.CredentialCode = entityToClone.CredentialCode;
      newEntity.SiteCode = entityToClone.SiteCode;
      newEntity.Number1 = entityToClone.Number1;
      newEntity.CompanyCode = entityToClone.CompanyCode;
      newEntity.Number2 = entityToClone.Number2;
      newEntity.Number3 = entityToClone.Number3;
      newEntity.Number4 = entityToClone.Number4;
      newEntity.Number5 = entityToClone.Number5;

      return newEntity;
    }
    #endregion

    #region CreateProperties Method
    /// <summary>
    /// Creates the collection of PDSAProperty objects. These are used to control validation and null handling.
    /// </summary>
    /// <returns>A collection of PDSAProperty objects</returns>
    public override PDSAProperties CreateProperties()
    {
      PDSAProperties props = new PDSAProperties();
      
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.CredentialUid, GetResourceMessage("GCS_CredentialPDSA_CredentialUid_Header", "Credential Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_CredentialPDSA_CredentialUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.CredentialFormatUid, GetResourceMessage("GCS_CredentialPDSA_CredentialFormatUid_Header", "Credential Format Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_CredentialPDSA_CredentialFormatUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.CardNumber, GetResourceMessage("GCS_CredentialPDSA_CardNumber_Header", "Card Number"), true, typeof(string), 100, GetResourceMessage("GCS_CredentialPDSA_CardNumber_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.CardNumberIsHex, GetResourceMessage("GCS_CredentialPDSA_CardNumberIsHex_Header", "Card Number Is Hex"), true, typeof(bool), -1, GetResourceMessage("GCS_CredentialPDSA_CardNumberIsHex_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.CardBinaryData, GetResourceMessage("GCS_CredentialPDSA_CardBinaryData_Header", "Card Binary Data"), true, typeof(byte[]), 32, GetResourceMessage("GCS_CredentialPDSA_CardBinaryData_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, null, @"", ""));
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.InsertName, GetResourceMessage("GCS_CredentialPDSA_InsertName_Header", "Insert Name"), true, typeof(string), 50, GetResourceMessage("GCS_CredentialPDSA_InsertName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.InsertDate, GetResourceMessage("GCS_CredentialPDSA_InsertDate_Header", "Insert Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_CredentialPDSA_InsertDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.UpdateName, GetResourceMessage("GCS_CredentialPDSA_UpdateName_Header", "Update Name"), true, typeof(string), 50, GetResourceMessage("GCS_CredentialPDSA_UpdateName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.UpdateDate, GetResourceMessage("GCS_CredentialPDSA_UpdateDate_Header", "Update Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_CredentialPDSA_UpdateDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.ConcurrencyValue, GetResourceMessage("GCS_CredentialPDSA_ConcurrencyValue_Header", "Concurrency Value"), true, typeof(short), 5, GetResourceMessage("GCS_CredentialPDSA_ConcurrencyValue_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.BitCount, GetResourceMessage("GCS_CredentialPDSA_BitCount_Header", "Bit Count"), true, typeof(short), 5, GetResourceMessage("GCS_CredentialPDSA_BitCount_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.FacilityCode, GetResourceMessage("GCS_CredentialPDSA_FacilityCode_Header", "Facility Code"), false, typeof(int), 2147483647, GetResourceMessage("GCS_CredentialPDSA_FacilityCode_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.IdCode, GetResourceMessage("GCS_CredentialPDSA_IdCode_Header", "Id Code"), false, typeof(int), 2147483647, GetResourceMessage("GCS_CredentialPDSA_IdCode_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.IssueCode, GetResourceMessage("GCS_CredentialPDSA_IssueCode_Header", "Issue Code"), false, typeof(int), 2147483647, GetResourceMessage("GCS_CredentialPDSA_IssueCode_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.AgencyCode, GetResourceMessage("GCS_CredentialPDSA_AgencyCode_Header", "Agency Code"), false, typeof(int), 2147483647, GetResourceMessage("GCS_CredentialPDSA_AgencyCode_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.CredentialCode, GetResourceMessage("GCS_CredentialPDSA_CredentialCode_Header", "Credential Code"), false, typeof(int), 2147483647, GetResourceMessage("GCS_CredentialPDSA_CredentialCode_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.SiteCode, GetResourceMessage("GCS_CredentialPDSA_SiteCode_Header", "Site Code"), false, typeof(int), 2147483647, GetResourceMessage("GCS_CredentialPDSA_SiteCode_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.Number1, GetResourceMessage("GCS_CredentialPDSA_Number1_Header", "Number 1"), false, typeof(int), 2147483647, GetResourceMessage("GCS_CredentialPDSA_Number1_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.CompanyCode, GetResourceMessage("GCS_CredentialPDSA_CompanyCode_Header", "Company Code"), false, typeof(int), 2147483647, GetResourceMessage("GCS_CredentialPDSA_CompanyCode_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.Number2, GetResourceMessage("GCS_CredentialPDSA_Number2_Header", "Number 2"), false, typeof(int), 2147483647, GetResourceMessage("GCS_CredentialPDSA_Number2_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.Number3, GetResourceMessage("GCS_CredentialPDSA_Number3_Header", "Number 3"), false, typeof(int), 2147483647, GetResourceMessage("GCS_CredentialPDSA_Number3_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.Number4, GetResourceMessage("GCS_CredentialPDSA_Number4_Header", "Number 4"), false, typeof(int), 2147483647, GetResourceMessage("GCS_CredentialPDSA_Number4_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(CredentialPDSAValidator.ColumnNames.Number5, GetResourceMessage("GCS_CredentialPDSA_Number5_Header", "Number 5"), false, typeof(int), 2147483647, GetResourceMessage("GCS_CredentialPDSA_Number5_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      
      return props;
    }
    #endregion

    #region Initialize Entity
    /// <summary>
    /// This method is called from the CreateNewEntity Method. All the properties for the Entity are set to default values here by the code generator.
    /// </summary>
    protected override void InitializeEntity()
    {
      Entity.CredentialUid = Guid.Empty;
      Entity.CredentialFormatUid = Guid.Empty;
      Entity.CardNumber = string.Empty;
      Entity.CardNumberIsHex = false;
      Entity.CardBinaryData = null;
      Entity.InsertName = string.Empty;
      Entity.InsertDate = DateTimeOffset.Now;
      Entity.UpdateName = string.Empty;
      Entity.UpdateDate = DateTimeOffset.Now;
      Entity.ConcurrencyValue = 0;
      Entity.BitCount = 0;
      Entity.FacilityCode = 0;
      Entity.IdCode = 0;
      Entity.IssueCode = 0;
      Entity.AgencyCode = 0;
      Entity.CredentialCode = 0;
      Entity.SiteCode = 0;
      Entity.Number1 = 0;
      Entity.CompanyCode = 0;
      Entity.Number2 = 0;
      Entity.Number3 = 0;
      Entity.Number4 = 0;
      Entity.Number5 = 0;

      Entity.ResetAllIsDirtyProperties();
    }
    #endregion
    
    #region InitProperties Method
    /// <summary>
    /// Called by the constructor to create the PDSAProperties collection of all properties that will be validated.
    /// </summary>
    protected override void InitProperties()
    {
      // Set the Properties collection to the collection of Entity Properties
      Properties = CreateProperties();
    }
    #endregion

    #region EntityDataToProperties Method
    /// <summary>
    /// Moves the Entity class data into the Properties collection.
    /// </summary>
    protected override void EntityDataToProperties()
    {
      if (Properties == null)
        InitProperties();
      
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.CredentialUid).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.CredentialUid).Value = Entity.CredentialUid;
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.CredentialFormatUid).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.CredentialFormatUid).Value = Entity.CredentialFormatUid;
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.CardNumber).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.CardNumber).Value = Entity.CardNumber;
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.CardNumberIsHex).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.CardNumberIsHex).Value = Entity.CardNumberIsHex;
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.CardBinaryData).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.CardBinaryData).Value = Entity.CardBinaryData;
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.InsertName).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.InsertDate).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.UpdateName).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.UpdateDate).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.BitCount).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.BitCount).Value = Entity.BitCount;
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.FacilityCode).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.FacilityCode).Value = Entity.FacilityCode;
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.IdCode).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.IdCode).Value = Entity.IdCode;
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.IssueCode).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.IssueCode).Value = Entity.IssueCode;
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.AgencyCode).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.AgencyCode).Value = Entity.AgencyCode;
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.CredentialCode).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.CredentialCode).Value = Entity.CredentialCode;
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.SiteCode).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.SiteCode).Value = Entity.SiteCode;
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.Number1).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.Number1).Value = Entity.Number1;
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.CompanyCode).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.CompanyCode).Value = Entity.CompanyCode;
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.Number2).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.Number2).Value = Entity.Number2;
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.Number3).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.Number3).Value = Entity.Number3;
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.Number4).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.Number4).Value = Entity.Number4;
      if(!Properties.GetByName(CredentialPDSAValidator.ColumnNames.Number5).SetAsNull)
        Properties.GetByName(CredentialPDSAValidator.ColumnNames.Number5).Value = Entity.Number5;
    }

    /// <summary>
    /// Moves the Properties collection objects into the Entity properties
    /// </summary>
    protected override void PropertiesToEntityData()
    {
      if (Properties == null)
        InitProperties();

      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.CredentialUid).IsNull == false)
        Entity.CredentialUid = Properties.GetByName(CredentialPDSAValidator.ColumnNames.CredentialUid).GetAsGuid();
      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.CredentialFormatUid).IsNull == false)
        Entity.CredentialFormatUid = Properties.GetByName(CredentialPDSAValidator.ColumnNames.CredentialFormatUid).GetAsGuid();
      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.CardNumber).IsNull == false)
        Entity.CardNumber = Properties.GetByName(CredentialPDSAValidator.ColumnNames.CardNumber).GetAsString();
      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.CardNumberIsHex).IsNull == false)
        Entity.CardNumberIsHex = Properties.GetByName(CredentialPDSAValidator.ColumnNames.CardNumberIsHex).GetAsBool();
      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.CardBinaryData).IsNull == false)
        Entity.CardBinaryData = Properties.GetByName(CredentialPDSAValidator.ColumnNames.CardBinaryData).GetAsByteArray();
      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = Properties.GetByName(CredentialPDSAValidator.ColumnNames.InsertName).GetAsString();
      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = Properties.GetByName(CredentialPDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = Properties.GetByName(CredentialPDSAValidator.ColumnNames.UpdateName).GetAsString();
      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = Properties.GetByName(CredentialPDSAValidator.ColumnNames.UpdateDate).GetAsDateTimeOffset();
      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = Properties.GetByName(CredentialPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.BitCount).IsNull == false)
        Entity.BitCount = Properties.GetByName(CredentialPDSAValidator.ColumnNames.BitCount).GetAsShort();
      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.FacilityCode).IsNull == false)
        Entity.FacilityCode = Properties.GetByName(CredentialPDSAValidator.ColumnNames.FacilityCode).GetAsInteger();
      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.IdCode).IsNull == false)
        Entity.IdCode = Properties.GetByName(CredentialPDSAValidator.ColumnNames.IdCode).GetAsInteger();
      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.IssueCode).IsNull == false)
        Entity.IssueCode = Properties.GetByName(CredentialPDSAValidator.ColumnNames.IssueCode).GetAsInteger();
      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.AgencyCode).IsNull == false)
        Entity.AgencyCode = Properties.GetByName(CredentialPDSAValidator.ColumnNames.AgencyCode).GetAsInteger();
      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.CredentialCode).IsNull == false)
        Entity.CredentialCode = Properties.GetByName(CredentialPDSAValidator.ColumnNames.CredentialCode).GetAsInteger();
      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.SiteCode).IsNull == false)
        Entity.SiteCode = Properties.GetByName(CredentialPDSAValidator.ColumnNames.SiteCode).GetAsInteger();
      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.Number1).IsNull == false)
        Entity.Number1 = Properties.GetByName(CredentialPDSAValidator.ColumnNames.Number1).GetAsInteger();
      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.CompanyCode).IsNull == false)
        Entity.CompanyCode = Properties.GetByName(CredentialPDSAValidator.ColumnNames.CompanyCode).GetAsInteger();
      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.Number2).IsNull == false)
        Entity.Number2 = Properties.GetByName(CredentialPDSAValidator.ColumnNames.Number2).GetAsInteger();
      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.Number3).IsNull == false)
        Entity.Number3 = Properties.GetByName(CredentialPDSAValidator.ColumnNames.Number3).GetAsInteger();
      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.Number4).IsNull == false)
        Entity.Number4 = Properties.GetByName(CredentialPDSAValidator.ColumnNames.Number4).GetAsInteger();
      if(Properties.GetByName(CredentialPDSAValidator.ColumnNames.Number5).IsNull == false)
        Entity.Number5 = Properties.GetByName(CredentialPDSAValidator.ColumnNames.Number5).GetAsInteger();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the CredentialPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'CredentialUid'
    /// </summary>
    public static string CredentialUid = "CredentialUid";
    /// <summary>
    /// Returns 'CredentialFormatUid'
    /// </summary>
    public static string CredentialFormatUid = "CredentialFormatUid";
    /// <summary>
    /// Returns 'CardNumber'
    /// </summary>
    public static string CardNumber = "CardNumber";
    /// <summary>
    /// Returns 'CardNumberIsHex'
    /// </summary>
    public static string CardNumberIsHex = "CardNumberIsHex";
    /// <summary>
    /// Returns 'CardBinaryData'
    /// </summary>
    public static string CardBinaryData = "CardBinaryData";
    /// <summary>
    /// Returns 'InsertName'
    /// </summary>
    public static string InsertName = "InsertName";
    /// <summary>
    /// Returns 'InsertDate'
    /// </summary>
    public static string InsertDate = "InsertDate";
    /// <summary>
    /// Returns 'UpdateName'
    /// </summary>
    public static string UpdateName = "UpdateName";
    /// <summary>
    /// Returns 'UpdateDate'
    /// </summary>
    public static string UpdateDate = "UpdateDate";
    /// <summary>
    /// Returns 'ConcurrencyValue'
    /// </summary>
    public static string ConcurrencyValue = "ConcurrencyValue";
    /// <summary>
    /// Returns 'BitCount'
    /// </summary>
    public static string BitCount = "BitCount";
    /// <summary>
    /// Returns 'FacilityCode'
    /// </summary>
    public static string FacilityCode = "FacilityCode";
    /// <summary>
    /// Returns 'IdCode'
    /// </summary>
    public static string IdCode = "IdCode";
    /// <summary>
    /// Returns 'IssueCode'
    /// </summary>
    public static string IssueCode = "IssueCode";
    /// <summary>
    /// Returns 'AgencyCode'
    /// </summary>
    public static string AgencyCode = "AgencyCode";
    /// <summary>
    /// Returns 'CredentialCode'
    /// </summary>
    public static string CredentialCode = "CredentialCode";
    /// <summary>
    /// Returns 'SiteCode'
    /// </summary>
    public static string SiteCode = "SiteCode";
    /// <summary>
    /// Returns 'Number1'
    /// </summary>
    public static string Number1 = "Number1";
    /// <summary>
    /// Returns 'CompanyCode'
    /// </summary>
    public static string CompanyCode = "CompanyCode";
    /// <summary>
    /// Returns 'Number2'
    /// </summary>
    public static string Number2 = "Number2";
    /// <summary>
    /// Returns 'Number3'
    /// </summary>
    public static string Number3 = "Number3";
    /// <summary>
    /// Returns 'Number4'
    /// </summary>
    public static string Number4 = "Number4";
    /// <summary>
    /// Returns 'Number5'
    /// </summary>
    public static string Number5 = "Number5";
    }
    #endregion
  }
}
