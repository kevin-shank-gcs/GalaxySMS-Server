using System;

using PDSA.Common;
using PDSA.Validation;

using GalaxySMS.EntityLayer;

namespace GalaxySMS.ValidationLayer
{
  /// <summary>
  /// Used to validate all properties of the ClusterPDSA class.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class ClusterPDSAValidator : PDSAValidatorBase
  {
    #region Public Entity Property
    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    private ClusterPDSA _Entity = null;

    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    public new ClusterPDSA Entity
    {
      get { return _Entity; }
      set
      {
        _Entity = value;
        base.Entity = value;
      }
    }
    #endregion
    
    #region Clone Entity Class
    /// <summary>
    /// Clones the current ClusterPDSA
    /// </summary>
    /// <returns>A cloned ClusterPDSA object</returns>
    public ClusterPDSA CloneEntity()
    {
      return CloneEntity(this.Entity);
    }
    
    /// <summary>
    /// Clones the passed in ClusterPDSA
    /// </summary>
    /// <param name="entityToClone">The ClusterPDSA entity to clone</param>
    /// <returns>A cloned ClusterPDSA object</returns>
    public ClusterPDSA CloneEntity(ClusterPDSA entityToClone)
    {
      ClusterPDSA newEntity = new ClusterPDSA();

      newEntity.ClusterUid = entityToClone.ClusterUid;
      newEntity.ClusterTypeUid = entityToClone.ClusterTypeUid;
      newEntity.ClusterNumber = entityToClone.ClusterNumber;
      newEntity.ClusterName = entityToClone.ClusterName;
      newEntity.InsertName = entityToClone.InsertName;
      newEntity.InsertDate = entityToClone.InsertDate;
      newEntity.UpdateName = entityToClone.UpdateName;
      newEntity.UpdateDate = entityToClone.UpdateDate;
      newEntity.ConcurrencyValue = entityToClone.ConcurrencyValue;
      newEntity.EntityId = entityToClone.EntityId;
      newEntity.SiteUid = entityToClone.SiteUid;
      newEntity.CredentialDataLengthUid = entityToClone.CredentialDataLengthUid;
      newEntity.TimeScheduleTypeUid = entityToClone.TimeScheduleTypeUid;
      newEntity.IsActive = entityToClone.IsActive;
      newEntity.AbaStartDigit = entityToClone.AbaStartDigit;
      newEntity.AbaStopDigit = entityToClone.AbaStopDigit;
      newEntity.AbaFoldOption = entityToClone.AbaFoldOption;
      newEntity.WiegandStartBit = entityToClone.WiegandStartBit;
      newEntity.WiegandStopBit = entityToClone.WiegandStopBit;
      newEntity.CardaxStartBit = entityToClone.CardaxStartBit;
      newEntity.CardaxStopBit = entityToClone.CardaxStopBit;
      newEntity.LockoutAfterInvalidAttempts = entityToClone.LockoutAfterInvalidAttempts;
      newEntity.LockoutDurationSeconds = entityToClone.LockoutDurationSeconds;
      newEntity.AccessRuleOverrideTimeout = entityToClone.AccessRuleOverrideTimeout;
      newEntity.UnlimitedCredentialTimeout = entityToClone.UnlimitedCredentialTimeout;
      newEntity.TimeZoneId = entityToClone.TimeZoneId;
      newEntity.BinaryResourceUid = entityToClone.BinaryResourceUid;
      newEntity.CrisisActivateInputOutputGroupUid = entityToClone.CrisisActivateInputOutputGroupUid;
      newEntity.CrisisResetInputOutputGroupUid = entityToClone.CrisisResetInputOutputGroupUid;
      newEntity.AccessPortalLockedLedBehaviorModeUid = entityToClone.AccessPortalLockedLedBehaviorModeUid;
      newEntity.AccessPortalUnlockedLedBehaviorModeUid = entityToClone.AccessPortalUnlockedLedBehaviorModeUid;
      newEntity.AccessPortalTypeUid = entityToClone.AccessPortalTypeUid;
      newEntity.TemplateAccessPortalUid = entityToClone.TemplateAccessPortalUid;
      newEntity.AbaClipOption = entityToClone.AbaClipOption;
      newEntity.CurrentTimeForCluster = entityToClone.CurrentTimeForCluster;
      newEntity.ClusterGroupId = entityToClone.ClusterGroupId;

      return newEntity;
    }
    #endregion

    #region CreateProperties Method
    /// <summary>
    /// Creates the collection of PDSAProperty objects. These are used to control validation and null handling.
    /// </summary>
    /// <returns>A collection of PDSAProperty objects</returns>
    public override PDSAProperties CreateProperties()
    {
      PDSAProperties props = new PDSAProperties();
      
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.ClusterUid, GetResourceMessage("GCS_ClusterPDSA_ClusterUid_Header", "Cluster Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_ClusterPDSA_ClusterUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.ClusterTypeUid, GetResourceMessage("GCS_ClusterPDSA_ClusterTypeUid_Header", "Cluster Type Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_ClusterPDSA_ClusterTypeUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.ClusterNumber, GetResourceMessage("GCS_ClusterPDSA_ClusterNumber_Header", "Cluster Number"), true, typeof(int), 10, GetResourceMessage("GCS_ClusterPDSA_ClusterNumber_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("0"), Convert.ToInt32("65535"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.ClusterName, GetResourceMessage("GCS_ClusterPDSA_ClusterName_Header", "Cluster Name"), true, typeof(string), 65, GetResourceMessage("GCS_ClusterPDSA_ClusterName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.InsertName, GetResourceMessage("GCS_ClusterPDSA_InsertName_Header", "Insert Name"), true, typeof(string), 50, GetResourceMessage("GCS_ClusterPDSA_InsertName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.InsertDate, GetResourceMessage("GCS_ClusterPDSA_InsertDate_Header", "Insert Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_ClusterPDSA_InsertDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.UpdateName, GetResourceMessage("GCS_ClusterPDSA_UpdateName_Header", "Update Name"), true, typeof(string), 50, GetResourceMessage("GCS_ClusterPDSA_UpdateName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.UpdateDate, GetResourceMessage("GCS_ClusterPDSA_UpdateDate_Header", "Update Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_ClusterPDSA_UpdateDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.ConcurrencyValue, GetResourceMessage("GCS_ClusterPDSA_ConcurrencyValue_Header", "Concurrency Value"), true, typeof(short), 5, GetResourceMessage("GCS_ClusterPDSA_ConcurrencyValue_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.EntityId, GetResourceMessage("GCS_ClusterPDSA_EntityId_Header", "Entity Id"), true, typeof(Guid), -1, GetResourceMessage("GCS_ClusterPDSA_EntityId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.SiteUid, GetResourceMessage("GCS_ClusterPDSA_SiteUid_Header", "Site Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_ClusterPDSA_SiteUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.CredentialDataLengthUid, GetResourceMessage("GCS_ClusterPDSA_CredentialDataLengthUid_Header", "Credential Data Length Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_ClusterPDSA_CredentialDataLengthUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.TimeScheduleTypeUid, GetResourceMessage("GCS_ClusterPDSA_TimeScheduleTypeUid_Header", "Time Schedule Type Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_ClusterPDSA_TimeScheduleTypeUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.IsActive, GetResourceMessage("GCS_ClusterPDSA_IsActive_Header", "Is Active"), true, typeof(bool), -1, GetResourceMessage("GCS_ClusterPDSA_IsActive_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.AbaStartDigit, GetResourceMessage("GCS_ClusterPDSA_AbaStartDigit_Header", "Aba Start Digit"), true, typeof(short), 5, GetResourceMessage("GCS_ClusterPDSA_AbaStartDigit_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.AbaStopDigit, GetResourceMessage("GCS_ClusterPDSA_AbaStopDigit_Header", "Aba Stop Digit"), true, typeof(short), 5, GetResourceMessage("GCS_ClusterPDSA_AbaStopDigit_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.AbaFoldOption, GetResourceMessage("GCS_ClusterPDSA_AbaFoldOption_Header", "Aba Fold Option"), true, typeof(bool), -1, GetResourceMessage("GCS_ClusterPDSA_AbaFoldOption_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.WiegandStartBit, GetResourceMessage("GCS_ClusterPDSA_WiegandStartBit_Header", "Wiegand Start Bit"), true, typeof(short), 5, GetResourceMessage("GCS_ClusterPDSA_WiegandStartBit_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.WiegandStopBit, GetResourceMessage("GCS_ClusterPDSA_WiegandStopBit_Header", "Wiegand Stop Bit"), true, typeof(short), 5, GetResourceMessage("GCS_ClusterPDSA_WiegandStopBit_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.CardaxStartBit, GetResourceMessage("GCS_ClusterPDSA_CardaxStartBit_Header", "Cardax Start Bit"), true, typeof(short), 5, GetResourceMessage("GCS_ClusterPDSA_CardaxStartBit_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.CardaxStopBit, GetResourceMessage("GCS_ClusterPDSA_CardaxStopBit_Header", "Cardax Stop Bit"), true, typeof(short), 5, GetResourceMessage("GCS_ClusterPDSA_CardaxStopBit_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts, GetResourceMessage("GCS_ClusterPDSA_LockoutAfterInvalidAttempts_Header", "Lockout After Invalid Attempts"), true, typeof(short), 5, GetResourceMessage("GCS_ClusterPDSA_LockoutAfterInvalidAttempts_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.LockoutDurationSeconds, GetResourceMessage("GCS_ClusterPDSA_LockoutDurationSeconds_Header", "Lockout Duration Seconds"), true, typeof(int), 10, GetResourceMessage("GCS_ClusterPDSA_LockoutDurationSeconds_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.AccessRuleOverrideTimeout, GetResourceMessage("GCS_ClusterPDSA_AccessRuleOverrideTimeout_Header", "Access Rule Override Timeout"), false, typeof(short), 5, GetResourceMessage("GCS_ClusterPDSA_AccessRuleOverrideTimeout_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.UnlimitedCredentialTimeout, GetResourceMessage("GCS_ClusterPDSA_UnlimitedCredentialTimeout_Header", "Unlimited Credential Timeout"), true, typeof(short), 5, GetResourceMessage("GCS_ClusterPDSA_UnlimitedCredentialTimeout_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.TimeZoneId, GetResourceMessage("GCS_ClusterPDSA_TimeZoneId_Header", "Time Zone Id"), true, typeof(string), 65, GetResourceMessage("GCS_ClusterPDSA_TimeZoneId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.BinaryResourceUid, GetResourceMessage("GCS_ClusterPDSA_BinaryResourceUid_Header", "Binary Resource Uid"), false, typeof(Guid), -1, GetResourceMessage("GCS_ClusterPDSA_BinaryResourceUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid, GetResourceMessage("GCS_ClusterPDSA_CrisisActivateInputOutputGroupUid_Header", "Crisis Activate Input Output Group Uid"), false, typeof(Guid), -1, GetResourceMessage("GCS_ClusterPDSA_CrisisActivateInputOutputGroupUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid, GetResourceMessage("GCS_ClusterPDSA_CrisisResetInputOutputGroupUid_Header", "Crisis Reset Input Output Group Uid"), false, typeof(Guid), -1, GetResourceMessage("GCS_ClusterPDSA_CrisisResetInputOutputGroupUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid, GetResourceMessage("GCS_ClusterPDSA_AccessPortalLockedLedBehaviorModeUid_Header", "Access Portal Locked Led Behavior Mode Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_ClusterPDSA_AccessPortalLockedLedBehaviorModeUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid, GetResourceMessage("GCS_ClusterPDSA_AccessPortalUnlockedLedBehaviorModeUid_Header", "Access Portal Unlocked Led Behavior Mode Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_ClusterPDSA_AccessPortalUnlockedLedBehaviorModeUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.AccessPortalTypeUid, GetResourceMessage("GCS_ClusterPDSA_AccessPortalTypeUid_Header", "Access Portal Type Uid"), false, typeof(Guid), -1, GetResourceMessage("GCS_ClusterPDSA_AccessPortalTypeUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.TemplateAccessPortalUid, GetResourceMessage("GCS_ClusterPDSA_TemplateAccessPortalUid_Header", "Template Access Portal Uid"), false, typeof(Guid), -1, GetResourceMessage("GCS_ClusterPDSA_TemplateAccessPortalUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.AbaClipOption, GetResourceMessage("GCS_ClusterPDSA_AbaClipOption_Header", "Aba Clip Option"), true, typeof(bool), -1, GetResourceMessage("GCS_ClusterPDSA_AbaClipOption_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.CurrentTimeForCluster, GetResourceMessage("GCS_ClusterPDSA_CurrentTimeForCluster_Header", "Current Time For Cluster"), false, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_ClusterPDSA_CurrentTimeForCluster_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(ClusterPDSAValidator.ColumnNames.ClusterGroupId, GetResourceMessage("GCS_ClusterPDSA_ClusterGroupId_Header", "Cluster Group Id"), true, typeof(int), 10, GetResourceMessage("GCS_ClusterPDSA_ClusterGroupId_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      
      return props;
    }
    #endregion

    #region Initialize Entity
    /// <summary>
    /// This method is called from the CreateNewEntity Method. All the properties for the Entity are set to default values here by the code generator.
    /// </summary>
    protected override void InitializeEntity()
    {
      Entity.ClusterUid = Guid.Empty;
      Entity.ClusterTypeUid = Guid.Empty;
      Entity.ClusterNumber = 0;
      Entity.ClusterName = string.Empty;
      Entity.InsertName = string.Empty;
      Entity.InsertDate = DateTimeOffset.Now;
      Entity.UpdateName = string.Empty;
      Entity.UpdateDate = DateTimeOffset.Now;
      Entity.ConcurrencyValue = 0;
      Entity.EntityId = Guid.Empty;
      Entity.SiteUid = Guid.Empty;
      Entity.CredentialDataLengthUid = Guid.Empty;
      Entity.TimeScheduleTypeUid = Guid.Empty;
      Entity.IsActive = false;
      Entity.AbaStartDigit = 0;
      Entity.AbaStopDigit = 0;
      Entity.AbaFoldOption = false;
      Entity.WiegandStartBit = 0;
      Entity.WiegandStopBit = 0;
      Entity.CardaxStartBit = 0;
      Entity.CardaxStopBit = 0;
      Entity.LockoutAfterInvalidAttempts = 0;
      Entity.LockoutDurationSeconds = 0;
      Entity.AccessRuleOverrideTimeout = 0;
      Entity.UnlimitedCredentialTimeout = 0;
      Entity.TimeZoneId = string.Empty;
      Entity.BinaryResourceUid = Guid.Empty;
      Entity.CrisisActivateInputOutputGroupUid = Guid.Empty;
      Entity.CrisisResetInputOutputGroupUid = Guid.Empty;
      Entity.AccessPortalLockedLedBehaviorModeUid = Guid.Empty;
      Entity.AccessPortalUnlockedLedBehaviorModeUid = Guid.Empty;
      Entity.AccessPortalTypeUid = Guid.Empty;
      Entity.TemplateAccessPortalUid = Guid.Empty;
      Entity.AbaClipOption = false;
      Entity.CurrentTimeForCluster = DateTimeOffset.Now;
      Entity.ClusterGroupId = 0;

      Entity.ResetAllIsDirtyProperties();
    }
    #endregion
    
    #region InitProperties Method
    /// <summary>
    /// Called by the constructor to create the PDSAProperties collection of all properties that will be validated.
    /// </summary>
    protected override void InitProperties()
    {
      // Set the Properties collection to the collection of Entity Properties
      Properties = CreateProperties();
    }
    #endregion

    #region EntityDataToProperties Method
    /// <summary>
    /// Moves the Entity class data into the Properties collection.
    /// </summary>
    protected override void EntityDataToProperties()
    {
      if (Properties == null)
        InitProperties();
      
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterUid).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterUid).Value = Entity.ClusterUid;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterTypeUid).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterTypeUid).Value = Entity.ClusterTypeUid;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterNumber).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterNumber).Value = Entity.ClusterNumber;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterName).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterName).Value = Entity.ClusterName;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.InsertName).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.InsertDate).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateName).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateDate).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.EntityId).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.EntityId).Value = Entity.EntityId;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.SiteUid).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.SiteUid).Value = Entity.SiteUid;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.CredentialDataLengthUid).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.CredentialDataLengthUid).Value = Entity.CredentialDataLengthUid;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeScheduleTypeUid).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeScheduleTypeUid).Value = Entity.TimeScheduleTypeUid;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.IsActive).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.IsActive).Value = Entity.IsActive;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStartDigit).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStartDigit).Value = Entity.AbaStartDigit;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStopDigit).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStopDigit).Value = Entity.AbaStopDigit;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaFoldOption).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaFoldOption).Value = Entity.AbaFoldOption;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStartBit).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStartBit).Value = Entity.WiegandStartBit;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStopBit).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStopBit).Value = Entity.WiegandStopBit;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStartBit).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStartBit).Value = Entity.CardaxStartBit;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStopBit).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStopBit).Value = Entity.CardaxStopBit;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts).Value = Entity.LockoutAfterInvalidAttempts;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutDurationSeconds).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutDurationSeconds).Value = Entity.LockoutDurationSeconds;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessRuleOverrideTimeout).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessRuleOverrideTimeout).Value = Entity.AccessRuleOverrideTimeout;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.UnlimitedCredentialTimeout).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.UnlimitedCredentialTimeout).Value = Entity.UnlimitedCredentialTimeout;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeZoneId).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeZoneId).Value = Entity.TimeZoneId;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.BinaryResourceUid).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.BinaryResourceUid).Value = Entity.BinaryResourceUid;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid).Value = Entity.CrisisActivateInputOutputGroupUid;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid).Value = Entity.CrisisResetInputOutputGroupUid;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid).Value = Entity.AccessPortalLockedLedBehaviorModeUid;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid).Value = Entity.AccessPortalUnlockedLedBehaviorModeUid;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalTypeUid).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalTypeUid).Value = Entity.AccessPortalTypeUid;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.TemplateAccessPortalUid).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.TemplateAccessPortalUid).Value = Entity.TemplateAccessPortalUid;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaClipOption).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaClipOption).Value = Entity.AbaClipOption;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.CurrentTimeForCluster).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.CurrentTimeForCluster).Value = Entity.CurrentTimeForCluster;
      if(!Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterGroupId).SetAsNull)
        Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterGroupId).Value = Entity.ClusterGroupId;
    }

    /// <summary>
    /// Moves the Properties collection objects into the Entity properties
    /// </summary>
    protected override void PropertiesToEntityData()
    {
      if (Properties == null)
        InitProperties();

      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterUid).IsNull == false)
        Entity.ClusterUid = Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterUid).GetAsGuid();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterTypeUid).IsNull == false)
        Entity.ClusterTypeUid = Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterTypeUid).GetAsGuid();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterNumber).IsNull == false)
        Entity.ClusterNumber = Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterNumber).GetAsInteger();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterName).IsNull == false)
        Entity.ClusterName = Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterName).GetAsString();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = Properties.GetByName(ClusterPDSAValidator.ColumnNames.InsertName).GetAsString();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = Properties.GetByName(ClusterPDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateName).GetAsString();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = Properties.GetByName(ClusterPDSAValidator.ColumnNames.UpdateDate).GetAsDateTimeOffset();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = Properties.GetByName(ClusterPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.EntityId).IsNull == false)
        Entity.EntityId = Properties.GetByName(ClusterPDSAValidator.ColumnNames.EntityId).GetAsGuid();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.SiteUid).IsNull == false)
        Entity.SiteUid = Properties.GetByName(ClusterPDSAValidator.ColumnNames.SiteUid).GetAsGuid();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.CredentialDataLengthUid).IsNull == false)
        Entity.CredentialDataLengthUid = Properties.GetByName(ClusterPDSAValidator.ColumnNames.CredentialDataLengthUid).GetAsGuid();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeScheduleTypeUid).IsNull == false)
        Entity.TimeScheduleTypeUid = Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeScheduleTypeUid).GetAsGuid();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.IsActive).IsNull == false)
        Entity.IsActive = Properties.GetByName(ClusterPDSAValidator.ColumnNames.IsActive).GetAsBool();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStartDigit).IsNull == false)
        Entity.AbaStartDigit = Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStartDigit).GetAsShort();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStopDigit).IsNull == false)
        Entity.AbaStopDigit = Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaStopDigit).GetAsShort();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaFoldOption).IsNull == false)
        Entity.AbaFoldOption = Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaFoldOption).GetAsBool();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStartBit).IsNull == false)
        Entity.WiegandStartBit = Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStartBit).GetAsShort();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStopBit).IsNull == false)
        Entity.WiegandStopBit = Properties.GetByName(ClusterPDSAValidator.ColumnNames.WiegandStopBit).GetAsShort();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStartBit).IsNull == false)
        Entity.CardaxStartBit = Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStartBit).GetAsShort();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStopBit).IsNull == false)
        Entity.CardaxStopBit = Properties.GetByName(ClusterPDSAValidator.ColumnNames.CardaxStopBit).GetAsShort();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts).IsNull == false)
        Entity.LockoutAfterInvalidAttempts = Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutAfterInvalidAttempts).GetAsShort();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutDurationSeconds).IsNull == false)
        Entity.LockoutDurationSeconds = Properties.GetByName(ClusterPDSAValidator.ColumnNames.LockoutDurationSeconds).GetAsInteger();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessRuleOverrideTimeout).IsNull == false)
        Entity.AccessRuleOverrideTimeout = Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessRuleOverrideTimeout).GetAsShort();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.UnlimitedCredentialTimeout).IsNull == false)
        Entity.UnlimitedCredentialTimeout = Properties.GetByName(ClusterPDSAValidator.ColumnNames.UnlimitedCredentialTimeout).GetAsShort();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeZoneId).IsNull == false)
        Entity.TimeZoneId = Properties.GetByName(ClusterPDSAValidator.ColumnNames.TimeZoneId).GetAsString();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.BinaryResourceUid).IsNull == false)
        Entity.BinaryResourceUid = Properties.GetByName(ClusterPDSAValidator.ColumnNames.BinaryResourceUid).GetAsGuid();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid).IsNull == false)
        Entity.CrisisActivateInputOutputGroupUid = Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisActivateInputOutputGroupUid).GetAsGuid();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid).IsNull == false)
        Entity.CrisisResetInputOutputGroupUid = Properties.GetByName(ClusterPDSAValidator.ColumnNames.CrisisResetInputOutputGroupUid).GetAsGuid();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid).IsNull == false)
        Entity.AccessPortalLockedLedBehaviorModeUid = Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalLockedLedBehaviorModeUid).GetAsGuid();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid).IsNull == false)
        Entity.AccessPortalUnlockedLedBehaviorModeUid = Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalUnlockedLedBehaviorModeUid).GetAsGuid();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalTypeUid).IsNull == false)
        Entity.AccessPortalTypeUid = Properties.GetByName(ClusterPDSAValidator.ColumnNames.AccessPortalTypeUid).GetAsGuid();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.TemplateAccessPortalUid).IsNull == false)
        Entity.TemplateAccessPortalUid = Properties.GetByName(ClusterPDSAValidator.ColumnNames.TemplateAccessPortalUid).GetAsGuid();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaClipOption).IsNull == false)
        Entity.AbaClipOption = Properties.GetByName(ClusterPDSAValidator.ColumnNames.AbaClipOption).GetAsBool();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.CurrentTimeForCluster).IsNull == false)
        Entity.CurrentTimeForCluster = Properties.GetByName(ClusterPDSAValidator.ColumnNames.CurrentTimeForCluster).GetAsDateTimeOffset();
      if(Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterGroupId).IsNull == false)
        Entity.ClusterGroupId = Properties.GetByName(ClusterPDSAValidator.ColumnNames.ClusterGroupId).GetAsInteger();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the ClusterPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'ClusterUid'
    /// </summary>
    public static string ClusterUid = "ClusterUid";
    /// <summary>
    /// Returns 'ClusterTypeUid'
    /// </summary>
    public static string ClusterTypeUid = "ClusterTypeUid";
    /// <summary>
    /// Returns 'ClusterNumber'
    /// </summary>
    public static string ClusterNumber = "ClusterNumber";
    /// <summary>
    /// Returns 'ClusterName'
    /// </summary>
    public static string ClusterName = "ClusterName";
    /// <summary>
    /// Returns 'InsertName'
    /// </summary>
    public static string InsertName = "InsertName";
    /// <summary>
    /// Returns 'InsertDate'
    /// </summary>
    public static string InsertDate = "InsertDate";
    /// <summary>
    /// Returns 'UpdateName'
    /// </summary>
    public static string UpdateName = "UpdateName";
    /// <summary>
    /// Returns 'UpdateDate'
    /// </summary>
    public static string UpdateDate = "UpdateDate";
    /// <summary>
    /// Returns 'ConcurrencyValue'
    /// </summary>
    public static string ConcurrencyValue = "ConcurrencyValue";
    /// <summary>
    /// Returns 'EntityId'
    /// </summary>
    public static string EntityId = "EntityId";
    /// <summary>
    /// Returns 'SiteUid'
    /// </summary>
    public static string SiteUid = "SiteUid";
    /// <summary>
    /// Returns 'CredentialDataLengthUid'
    /// </summary>
    public static string CredentialDataLengthUid = "CredentialDataLengthUid";
    /// <summary>
    /// Returns 'TimeScheduleTypeUid'
    /// </summary>
    public static string TimeScheduleTypeUid = "TimeScheduleTypeUid";
    /// <summary>
    /// Returns 'IsActive'
    /// </summary>
    public static string IsActive = "IsActive";
    /// <summary>
    /// Returns 'AbaStartDigit'
    /// </summary>
    public static string AbaStartDigit = "AbaStartDigit";
    /// <summary>
    /// Returns 'AbaStopDigit'
    /// </summary>
    public static string AbaStopDigit = "AbaStopDigit";
    /// <summary>
    /// Returns 'AbaFoldOption'
    /// </summary>
    public static string AbaFoldOption = "AbaFoldOption";
    /// <summary>
    /// Returns 'WiegandStartBit'
    /// </summary>
    public static string WiegandStartBit = "WiegandStartBit";
    /// <summary>
    /// Returns 'WiegandStopBit'
    /// </summary>
    public static string WiegandStopBit = "WiegandStopBit";
    /// <summary>
    /// Returns 'CardaxStartBit'
    /// </summary>
    public static string CardaxStartBit = "CardaxStartBit";
    /// <summary>
    /// Returns 'CardaxStopBit'
    /// </summary>
    public static string CardaxStopBit = "CardaxStopBit";
    /// <summary>
    /// Returns 'LockoutAfterInvalidAttempts'
    /// </summary>
    public static string LockoutAfterInvalidAttempts = "LockoutAfterInvalidAttempts";
    /// <summary>
    /// Returns 'LockoutDurationSeconds'
    /// </summary>
    public static string LockoutDurationSeconds = "LockoutDurationSeconds";
    /// <summary>
    /// Returns 'AccessRuleOverrideTimeout'
    /// </summary>
    public static string AccessRuleOverrideTimeout = "AccessRuleOverrideTimeout";
    /// <summary>
    /// Returns 'UnlimitedCredentialTimeout'
    /// </summary>
    public static string UnlimitedCredentialTimeout = "UnlimitedCredentialTimeout";
    /// <summary>
    /// Returns 'TimeZoneId'
    /// </summary>
    public static string TimeZoneId = "TimeZoneId";
    /// <summary>
    /// Returns 'BinaryResourceUid'
    /// </summary>
    public static string BinaryResourceUid = "BinaryResourceUid";
    /// <summary>
    /// Returns 'CrisisActivateInputOutputGroupUid'
    /// </summary>
    public static string CrisisActivateInputOutputGroupUid = "CrisisActivateInputOutputGroupUid";
    /// <summary>
    /// Returns 'CrisisResetInputOutputGroupUid'
    /// </summary>
    public static string CrisisResetInputOutputGroupUid = "CrisisResetInputOutputGroupUid";
    /// <summary>
    /// Returns 'AccessPortalLockedLedBehaviorModeUid'
    /// </summary>
    public static string AccessPortalLockedLedBehaviorModeUid = "AccessPortalLockedLedBehaviorModeUid";
    /// <summary>
    /// Returns 'AccessPortalUnlockedLedBehaviorModeUid'
    /// </summary>
    public static string AccessPortalUnlockedLedBehaviorModeUid = "AccessPortalUnlockedLedBehaviorModeUid";
    /// <summary>
    /// Returns 'AccessPortalTypeUid'
    /// </summary>
    public static string AccessPortalTypeUid = "AccessPortalTypeUid";
    /// <summary>
    /// Returns 'TemplateAccessPortalUid'
    /// </summary>
    public static string TemplateAccessPortalUid = "TemplateAccessPortalUid";
    /// <summary>
    /// Returns 'AbaClipOption'
    /// </summary>
    public static string AbaClipOption = "AbaClipOption";
    /// <summary>
    /// Returns 'CurrentTimeForCluster'
    /// </summary>
    public static string CurrentTimeForCluster = "CurrentTimeForCluster";
    /// <summary>
    /// Returns 'ClusterGroupId'
    /// </summary>
    public static string ClusterGroupId = "ClusterGroupId";
    }
    #endregion
  }
}
