using System;

using PDSA.Common;
using PDSA.Validation;

using GalaxySMS.EntityLayer;

namespace GalaxySMS.ValidationLayer
{
  /// <summary>
  /// Used to validate all properties of the AccessPortalPropertiesPDSA class.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class AccessPortalPropertiesPDSAValidator : PDSAValidatorBase
  {
    #region Public Entity Property
    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    private AccessPortalPropertiesPDSA _Entity = null;

    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    public new AccessPortalPropertiesPDSA Entity
    {
      get { return _Entity; }
      set
      {
        _Entity = value;
        base.Entity = value;
      }
    }
    #endregion
    
    #region Clone Entity Class
    /// <summary>
    /// Clones the current AccessPortalPropertiesPDSA
    /// </summary>
    /// <returns>A cloned AccessPortalPropertiesPDSA object</returns>
    public AccessPortalPropertiesPDSA CloneEntity()
    {
      return CloneEntity(this.Entity);
    }
    
    /// <summary>
    /// Clones the passed in AccessPortalPropertiesPDSA
    /// </summary>
    /// <param name="entityToClone">The AccessPortalPropertiesPDSA entity to clone</param>
    /// <returns>A cloned AccessPortalPropertiesPDSA object</returns>
    public AccessPortalPropertiesPDSA CloneEntity(AccessPortalPropertiesPDSA entityToClone)
    {
      AccessPortalPropertiesPDSA newEntity = new AccessPortalPropertiesPDSA();

      newEntity.AccessPortalPropertiesUid = entityToClone.AccessPortalPropertiesUid;
      newEntity.AccessPortalUid = entityToClone.AccessPortalUid;
      newEntity.AutomaticForgivePassbackFrequencyUid = entityToClone.AutomaticForgivePassbackFrequencyUid;
      newEntity.PinRequiredModeUid = entityToClone.PinRequiredModeUid;
      newEntity.AccessPortalContactSupervisionTypeUid = entityToClone.AccessPortalContactSupervisionTypeUid;
      newEntity.AccessPortalDeferToServerBehaviorUid = entityToClone.AccessPortalDeferToServerBehaviorUid;
      newEntity.AccessPortalNoServerReplyBehaviorUid = entityToClone.AccessPortalNoServerReplyBehaviorUid;
      newEntity.AccessPortalLockPushButtonBehaviorUid = entityToClone.AccessPortalLockPushButtonBehaviorUid;
      newEntity.LiquidCrystalDisplayUid = entityToClone.LiquidCrystalDisplayUid;
      newEntity.AccessPortalElevatorControlTypeUid = entityToClone.AccessPortalElevatorControlTypeUid;
      newEntity.OtisElevatorDecUid = entityToClone.OtisElevatorDecUid;
      newEntity.ElevatorRelayInterfaceBoardSectionUid = entityToClone.ElevatorRelayInterfaceBoardSectionUid;
      newEntity.AccessPortalMultiFactorModeUid = entityToClone.AccessPortalMultiFactorModeUid;
      newEntity.DoorNumber = entityToClone.DoorNumber;
      newEntity.UnlockDelay = entityToClone.UnlockDelay;
      newEntity.UnlockDuration = entityToClone.UnlockDuration;
      newEntity.RecloseDuration = entityToClone.RecloseDuration;
      newEntity.AllowPassbackAccess = entityToClone.AllowPassbackAccess;
      newEntity.RequireTwoValidCredentials = entityToClone.RequireTwoValidCredentials;
      newEntity.UnlockOnREX = entityToClone.UnlockOnREX;
      newEntity.SuppressIllegalOpenLog = entityToClone.SuppressIllegalOpenLog;
      newEntity.SuppressOpenTooLongLog = entityToClone.SuppressOpenTooLongLog;
      newEntity.SuppressClosedLog = entityToClone.SuppressClosedLog;
      newEntity.SuppressREXLog = entityToClone.SuppressREXLog;
      newEntity.GenerateDoorContactChangeLogs = entityToClone.GenerateDoorContactChangeLogs;
      newEntity.LockWhenDoorCloses = entityToClone.LockWhenDoorCloses;
      newEntity.EnableDuress = entityToClone.EnableDuress;
      newEntity.DoorGroupNotify = entityToClone.DoorGroupNotify;
      newEntity.DoorGroupCanDisable = entityToClone.DoorGroupCanDisable;
      newEntity.RelayOneOnDuringArmDelay = entityToClone.RelayOneOnDuringArmDelay;
      newEntity.RequireValidAccessForAutoUnlock = entityToClone.RequireValidAccessForAutoUnlock;
      newEntity.PINSpecifiesRecloseDuration = entityToClone.PINSpecifiesRecloseDuration;
      newEntity.ValidAccessRequiresDoorOpen = entityToClone.ValidAccessRequiresDoorOpen;
      newEntity.DontDecrementLimitedSwipeExpireCount = entityToClone.DontDecrementLimitedSwipeExpireCount;
      newEntity.IgnoreNotInSystem = entityToClone.IgnoreNotInSystem;
      newEntity.ReaderSendsHeartbeat = entityToClone.ReaderSendsHeartbeat;
      newEntity.PhotoVerificationEnabled = entityToClone.PhotoVerificationEnabled;
      newEntity.TimeAttendancePortal = entityToClone.TimeAttendancePortal;
      newEntity.EMailEventsEnabled = entityToClone.EMailEventsEnabled;
      newEntity.TransmitEventsEnabled = entityToClone.TransmitEventsEnabled;
      newEntity.FileOutputEnabled = entityToClone.FileOutputEnabled;
      newEntity.InsertName = entityToClone.InsertName;
      newEntity.InsertDate = entityToClone.InsertDate;
      newEntity.UpdateName = entityToClone.UpdateName;
      newEntity.UpdateDate = entityToClone.UpdateDate;
      newEntity.ConcurrencyValue = entityToClone.ConcurrencyValue;

      return newEntity;
    }
    #endregion

    #region CreateProperties Method
    /// <summary>
    /// Creates the collection of PDSAProperty objects. These are used to control validation and null handling.
    /// </summary>
    /// <returns>A collection of PDSAProperty objects</returns>
    public override PDSAProperties CreateProperties()
    {
      PDSAProperties props = new PDSAProperties();
      
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalPropertiesUid, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_AccessPortalPropertiesUid_Header", "Access Portal Properties Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_AccessPortalPropertiesUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalUid, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_AccessPortalUid_Header", "Access Portal Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_AccessPortalUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.AutomaticForgivePassbackFrequencyUid, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_AutomaticForgivePassbackFrequencyUid_Header", "Automatic Forgive Passback Frequency Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_AutomaticForgivePassbackFrequencyUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.PinRequiredModeUid, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_PinRequiredModeUid_Header", "Pin Required Mode Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_PinRequiredModeUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalContactSupervisionTypeUid, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_AccessPortalContactSupervisionTypeUid_Header", "Access Portal Contact Supervision Type Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_AccessPortalContactSupervisionTypeUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalDeferToServerBehaviorUid, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_AccessPortalDeferToServerBehaviorUid_Header", "Access Portal Defer To Server Behavior Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_AccessPortalDeferToServerBehaviorUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalNoServerReplyBehaviorUid, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_AccessPortalNoServerReplyBehaviorUid_Header", "Access Portal No Server Reply Behavior Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_AccessPortalNoServerReplyBehaviorUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalLockPushButtonBehaviorUid, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_AccessPortalLockPushButtonBehaviorUid_Header", "Access Portal Lock Push Button Behavior Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_AccessPortalLockPushButtonBehaviorUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.LiquidCrystalDisplayUid, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_LiquidCrystalDisplayUid_Header", "Liquid Crystal Display Uid"), false, typeof(Guid), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_LiquidCrystalDisplayUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalElevatorControlTypeUid, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_AccessPortalElevatorControlTypeUid_Header", "Access Portal Elevator Control Type Uid"), false, typeof(Guid), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_AccessPortalElevatorControlTypeUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.OtisElevatorDecUid, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_OtisElevatorDecUid_Header", "Otis Elevator Dec Uid"), false, typeof(Guid), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_OtisElevatorDecUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.ElevatorRelayInterfaceBoardSectionUid, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_ElevatorRelayInterfaceBoardSectionUid_Header", "Elevator Relay Interface Board Section Uid"), false, typeof(Guid), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_ElevatorRelayInterfaceBoardSectionUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalMultiFactorModeUid, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_AccessPortalMultiFactorModeUid_Header", "Access Portal Multi Factor Mode Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_AccessPortalMultiFactorModeUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorNumber, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_DoorNumber_Header", "Door Number"), true, typeof(short), 5, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_DoorNumber_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDelay, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_UnlockDelay_Header", "Unlock Delay"), true, typeof(int), 10, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_UnlockDelay_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDuration, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_UnlockDuration_Header", "Unlock Duration"), true, typeof(int), 10, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_UnlockDuration_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.RecloseDuration, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_RecloseDuration_Header", "Reclose Duration"), true, typeof(int), 10, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_RecloseDuration_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.AllowPassbackAccess, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_AllowPassbackAccess_Header", "Allow Passback Access"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_AllowPassbackAccess_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireTwoValidCredentials, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_RequireTwoValidCredentials_Header", "Require Two Valid Credentials"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_RequireTwoValidCredentials_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockOnREX, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_UnlockOnREX_Header", "Unlock On REX"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_UnlockOnREX_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressIllegalOpenLog, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_SuppressIllegalOpenLog_Header", "Suppress Illegal Open Log"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_SuppressIllegalOpenLog_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressOpenTooLongLog, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_SuppressOpenTooLongLog_Header", "Suppress Open Too Long Log"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_SuppressOpenTooLongLog_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressClosedLog, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_SuppressClosedLog_Header", "Suppress Closed Log"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_SuppressClosedLog_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressREXLog, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_SuppressREXLog_Header", "Suppress REX Log"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_SuppressREXLog_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_GenerateDoorContactChangeLogs_Header", "Generate Door Contact Change Logs"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_GenerateDoorContactChangeLogs_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.LockWhenDoorCloses, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_LockWhenDoorCloses_Header", "Lock When Door Closes"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_LockWhenDoorCloses_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.EnableDuress, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_EnableDuress_Header", "Enable Duress"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_EnableDuress_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupNotify, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_DoorGroupNotify_Header", "Door Group Notify"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_DoorGroupNotify_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupCanDisable, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_DoorGroupCanDisable_Header", "Door Group Can Disable"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_DoorGroupCanDisable_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_RelayOneOnDuringArmDelay_Header", "Relay One On During Arm Delay"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_RelayOneOnDuringArmDelay_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_RequireValidAccessForAutoUnlock_Header", "Require Valid Access For Auto Unlock"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_RequireValidAccessForAutoUnlock_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.PINSpecifiesRecloseDuration, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_PINSpecifiesRecloseDuration_Header", "PIN Specifies Reclose Duration"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_PINSpecifiesRecloseDuration_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_ValidAccessRequiresDoorOpen_Header", "Valid Access Requires Door Open"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_ValidAccessRequiresDoorOpen_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_DontDecrementLimitedSwipeExpireCount_Header", "Dont Decrement Limited Swipe Expire Count"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_DontDecrementLimitedSwipeExpireCount_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.IgnoreNotInSystem, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_IgnoreNotInSystem_Header", "Ignore Not In System"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_IgnoreNotInSystem_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.ReaderSendsHeartbeat, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_ReaderSendsHeartbeat_Header", "Reader Sends Heartbeat"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_ReaderSendsHeartbeat_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.PhotoVerificationEnabled, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_PhotoVerificationEnabled_Header", "Photo Verification Enabled"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_PhotoVerificationEnabled_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.TimeAttendancePortal, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_TimeAttendancePortal_Header", "Time Attendance Portal"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_TimeAttendancePortal_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.EMailEventsEnabled, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_EMailEventsEnabled_Header", "E Mail Events Enabled"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_EMailEventsEnabled_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.TransmitEventsEnabled, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_TransmitEventsEnabled_Header", "Transmit Events Enabled"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_TransmitEventsEnabled_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.FileOutputEnabled, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_FileOutputEnabled_Header", "File Output Enabled"), true, typeof(bool), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_FileOutputEnabled_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertName, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_InsertName_Header", "Insert Name"), true, typeof(string), 50, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_InsertName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertDate, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_InsertDate_Header", "Insert Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_InsertDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateName, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_UpdateName_Header", "Update Name"), true, typeof(string), 50, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_UpdateName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateDate, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_UpdateDate_Header", "Update Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_UpdateDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(AccessPortalPropertiesPDSAValidator.ColumnNames.ConcurrencyValue, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_ConcurrencyValue_Header", "Concurrency Value"), true, typeof(short), 5, GetResourceMessage("GCS_AccessPortalPropertiesPDSA_ConcurrencyValue_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      
      return props;
    }
    #endregion

    #region Initialize Entity
    /// <summary>
    /// This method is called from the CreateNewEntity Method. All the properties for the Entity are set to default values here by the code generator.
    /// </summary>
    protected override void InitializeEntity()
    {
      Entity.AccessPortalPropertiesUid = Guid.Empty;
      Entity.AccessPortalUid = Guid.Empty;
      Entity.AutomaticForgivePassbackFrequencyUid = Guid.Empty;
      Entity.PinRequiredModeUid = Guid.Empty;
      Entity.AccessPortalContactSupervisionTypeUid = Guid.Empty;
      Entity.AccessPortalDeferToServerBehaviorUid = Guid.Empty;
      Entity.AccessPortalNoServerReplyBehaviorUid = Guid.Empty;
      Entity.AccessPortalLockPushButtonBehaviorUid = Guid.Empty;
      Entity.LiquidCrystalDisplayUid = Guid.Empty;
      Entity.AccessPortalElevatorControlTypeUid = Guid.Empty;
      Entity.OtisElevatorDecUid = Guid.Empty;
      Entity.ElevatorRelayInterfaceBoardSectionUid = Guid.Empty;
      Entity.AccessPortalMultiFactorModeUid = Guid.Empty;
      Entity.DoorNumber = 0;
      Entity.UnlockDelay = 0;
      Entity.UnlockDuration = 0;
      Entity.RecloseDuration = 0;
      Entity.AllowPassbackAccess = false;
      Entity.RequireTwoValidCredentials = false;
      Entity.UnlockOnREX = false;
      Entity.SuppressIllegalOpenLog = false;
      Entity.SuppressOpenTooLongLog = false;
      Entity.SuppressClosedLog = false;
      Entity.SuppressREXLog = false;
      Entity.GenerateDoorContactChangeLogs = false;
      Entity.LockWhenDoorCloses = false;
      Entity.EnableDuress = false;
      Entity.DoorGroupNotify = false;
      Entity.DoorGroupCanDisable = false;
      Entity.RelayOneOnDuringArmDelay = false;
      Entity.RequireValidAccessForAutoUnlock = false;
      Entity.PINSpecifiesRecloseDuration = false;
      Entity.ValidAccessRequiresDoorOpen = false;
      Entity.DontDecrementLimitedSwipeExpireCount = false;
      Entity.IgnoreNotInSystem = false;
      Entity.ReaderSendsHeartbeat = false;
      Entity.PhotoVerificationEnabled = false;
      Entity.TimeAttendancePortal = false;
      Entity.EMailEventsEnabled = false;
      Entity.TransmitEventsEnabled = false;
      Entity.FileOutputEnabled = false;
      Entity.InsertName = string.Empty;
      Entity.InsertDate = DateTimeOffset.Now;
      Entity.UpdateName = string.Empty;
      Entity.UpdateDate = DateTimeOffset.Now;
      Entity.ConcurrencyValue = 0;

      Entity.ResetAllIsDirtyProperties();
    }
    #endregion
    
    #region InitProperties Method
    /// <summary>
    /// Called by the constructor to create the PDSAProperties collection of all properties that will be validated.
    /// </summary>
    protected override void InitProperties()
    {
      // Set the Properties collection to the collection of Entity Properties
      Properties = CreateProperties();
    }
    #endregion

    #region EntityDataToProperties Method
    /// <summary>
    /// Moves the Entity class data into the Properties collection.
    /// </summary>
    protected override void EntityDataToProperties()
    {
      if (Properties == null)
        InitProperties();
      
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalPropertiesUid).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalPropertiesUid).Value = Entity.AccessPortalPropertiesUid;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalUid).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalUid).Value = Entity.AccessPortalUid;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AutomaticForgivePassbackFrequencyUid).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AutomaticForgivePassbackFrequencyUid).Value = Entity.AutomaticForgivePassbackFrequencyUid;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PinRequiredModeUid).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PinRequiredModeUid).Value = Entity.PinRequiredModeUid;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalContactSupervisionTypeUid).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalContactSupervisionTypeUid).Value = Entity.AccessPortalContactSupervisionTypeUid;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalDeferToServerBehaviorUid).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalDeferToServerBehaviorUid).Value = Entity.AccessPortalDeferToServerBehaviorUid;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalNoServerReplyBehaviorUid).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalNoServerReplyBehaviorUid).Value = Entity.AccessPortalNoServerReplyBehaviorUid;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalLockPushButtonBehaviorUid).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalLockPushButtonBehaviorUid).Value = Entity.AccessPortalLockPushButtonBehaviorUid;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LiquidCrystalDisplayUid).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LiquidCrystalDisplayUid).Value = Entity.LiquidCrystalDisplayUid;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalElevatorControlTypeUid).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalElevatorControlTypeUid).Value = Entity.AccessPortalElevatorControlTypeUid;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.OtisElevatorDecUid).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.OtisElevatorDecUid).Value = Entity.OtisElevatorDecUid;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ElevatorRelayInterfaceBoardSectionUid).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ElevatorRelayInterfaceBoardSectionUid).Value = Entity.ElevatorRelayInterfaceBoardSectionUid;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalMultiFactorModeUid).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalMultiFactorModeUid).Value = Entity.AccessPortalMultiFactorModeUid;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorNumber).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorNumber).Value = Entity.DoorNumber;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDelay).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDelay).Value = Entity.UnlockDelay;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDuration).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDuration).Value = Entity.UnlockDuration;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RecloseDuration).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RecloseDuration).Value = Entity.RecloseDuration;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AllowPassbackAccess).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AllowPassbackAccess).Value = Entity.AllowPassbackAccess;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireTwoValidCredentials).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireTwoValidCredentials).Value = Entity.RequireTwoValidCredentials;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockOnREX).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockOnREX).Value = Entity.UnlockOnREX;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressIllegalOpenLog).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressIllegalOpenLog).Value = Entity.SuppressIllegalOpenLog;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressOpenTooLongLog).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressOpenTooLongLog).Value = Entity.SuppressOpenTooLongLog;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressClosedLog).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressClosedLog).Value = Entity.SuppressClosedLog;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressREXLog).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressREXLog).Value = Entity.SuppressREXLog;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs).Value = Entity.GenerateDoorContactChangeLogs;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LockWhenDoorCloses).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LockWhenDoorCloses).Value = Entity.LockWhenDoorCloses;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EnableDuress).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EnableDuress).Value = Entity.EnableDuress;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupNotify).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupNotify).Value = Entity.DoorGroupNotify;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupCanDisable).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupCanDisable).Value = Entity.DoorGroupCanDisable;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay).Value = Entity.RelayOneOnDuringArmDelay;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock).Value = Entity.RequireValidAccessForAutoUnlock;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PINSpecifiesRecloseDuration).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PINSpecifiesRecloseDuration).Value = Entity.PINSpecifiesRecloseDuration;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen).Value = Entity.ValidAccessRequiresDoorOpen;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount).Value = Entity.DontDecrementLimitedSwipeExpireCount;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.IgnoreNotInSystem).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.IgnoreNotInSystem).Value = Entity.IgnoreNotInSystem;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ReaderSendsHeartbeat).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ReaderSendsHeartbeat).Value = Entity.ReaderSendsHeartbeat;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PhotoVerificationEnabled).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PhotoVerificationEnabled).Value = Entity.PhotoVerificationEnabled;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TimeAttendancePortal).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TimeAttendancePortal).Value = Entity.TimeAttendancePortal;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EMailEventsEnabled).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EMailEventsEnabled).Value = Entity.EMailEventsEnabled;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TransmitEventsEnabled).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TransmitEventsEnabled).Value = Entity.TransmitEventsEnabled;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.FileOutputEnabled).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.FileOutputEnabled).Value = Entity.FileOutputEnabled;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertName).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertDate).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateName).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateDate).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if(!Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull)
        Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
    }

    /// <summary>
    /// Moves the Properties collection objects into the Entity properties
    /// </summary>
    protected override void PropertiesToEntityData()
    {
      if (Properties == null)
        InitProperties();

      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalPropertiesUid).IsNull == false)
        Entity.AccessPortalPropertiesUid = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalPropertiesUid).GetAsGuid();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalUid).IsNull == false)
        Entity.AccessPortalUid = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalUid).GetAsGuid();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AutomaticForgivePassbackFrequencyUid).IsNull == false)
        Entity.AutomaticForgivePassbackFrequencyUid = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AutomaticForgivePassbackFrequencyUid).GetAsGuid();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PinRequiredModeUid).IsNull == false)
        Entity.PinRequiredModeUid = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PinRequiredModeUid).GetAsGuid();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalContactSupervisionTypeUid).IsNull == false)
        Entity.AccessPortalContactSupervisionTypeUid = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalContactSupervisionTypeUid).GetAsGuid();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalDeferToServerBehaviorUid).IsNull == false)
        Entity.AccessPortalDeferToServerBehaviorUid = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalDeferToServerBehaviorUid).GetAsGuid();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalNoServerReplyBehaviorUid).IsNull == false)
        Entity.AccessPortalNoServerReplyBehaviorUid = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalNoServerReplyBehaviorUid).GetAsGuid();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalLockPushButtonBehaviorUid).IsNull == false)
        Entity.AccessPortalLockPushButtonBehaviorUid = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalLockPushButtonBehaviorUid).GetAsGuid();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LiquidCrystalDisplayUid).IsNull == false)
        Entity.LiquidCrystalDisplayUid = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LiquidCrystalDisplayUid).GetAsGuid();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalElevatorControlTypeUid).IsNull == false)
        Entity.AccessPortalElevatorControlTypeUid = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalElevatorControlTypeUid).GetAsGuid();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.OtisElevatorDecUid).IsNull == false)
        Entity.OtisElevatorDecUid = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.OtisElevatorDecUid).GetAsGuid();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ElevatorRelayInterfaceBoardSectionUid).IsNull == false)
        Entity.ElevatorRelayInterfaceBoardSectionUid = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ElevatorRelayInterfaceBoardSectionUid).GetAsGuid();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalMultiFactorModeUid).IsNull == false)
        Entity.AccessPortalMultiFactorModeUid = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AccessPortalMultiFactorModeUid).GetAsGuid();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorNumber).IsNull == false)
        Entity.DoorNumber = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorNumber).GetAsShort();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDelay).IsNull == false)
        Entity.UnlockDelay = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDelay).GetAsInteger();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDuration).IsNull == false)
        Entity.UnlockDuration = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockDuration).GetAsInteger();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RecloseDuration).IsNull == false)
        Entity.RecloseDuration = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RecloseDuration).GetAsInteger();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AllowPassbackAccess).IsNull == false)
        Entity.AllowPassbackAccess = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.AllowPassbackAccess).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireTwoValidCredentials).IsNull == false)
        Entity.RequireTwoValidCredentials = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireTwoValidCredentials).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockOnREX).IsNull == false)
        Entity.UnlockOnREX = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UnlockOnREX).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressIllegalOpenLog).IsNull == false)
        Entity.SuppressIllegalOpenLog = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressIllegalOpenLog).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressOpenTooLongLog).IsNull == false)
        Entity.SuppressOpenTooLongLog = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressOpenTooLongLog).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressClosedLog).IsNull == false)
        Entity.SuppressClosedLog = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressClosedLog).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressREXLog).IsNull == false)
        Entity.SuppressREXLog = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.SuppressREXLog).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs).IsNull == false)
        Entity.GenerateDoorContactChangeLogs = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.GenerateDoorContactChangeLogs).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LockWhenDoorCloses).IsNull == false)
        Entity.LockWhenDoorCloses = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.LockWhenDoorCloses).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EnableDuress).IsNull == false)
        Entity.EnableDuress = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EnableDuress).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupNotify).IsNull == false)
        Entity.DoorGroupNotify = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupNotify).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupCanDisable).IsNull == false)
        Entity.DoorGroupCanDisable = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DoorGroupCanDisable).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay).IsNull == false)
        Entity.RelayOneOnDuringArmDelay = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RelayOneOnDuringArmDelay).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock).IsNull == false)
        Entity.RequireValidAccessForAutoUnlock = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.RequireValidAccessForAutoUnlock).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PINSpecifiesRecloseDuration).IsNull == false)
        Entity.PINSpecifiesRecloseDuration = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PINSpecifiesRecloseDuration).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen).IsNull == false)
        Entity.ValidAccessRequiresDoorOpen = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ValidAccessRequiresDoorOpen).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount).IsNull == false)
        Entity.DontDecrementLimitedSwipeExpireCount = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.DontDecrementLimitedSwipeExpireCount).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.IgnoreNotInSystem).IsNull == false)
        Entity.IgnoreNotInSystem = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.IgnoreNotInSystem).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ReaderSendsHeartbeat).IsNull == false)
        Entity.ReaderSendsHeartbeat = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ReaderSendsHeartbeat).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PhotoVerificationEnabled).IsNull == false)
        Entity.PhotoVerificationEnabled = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.PhotoVerificationEnabled).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TimeAttendancePortal).IsNull == false)
        Entity.TimeAttendancePortal = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TimeAttendancePortal).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EMailEventsEnabled).IsNull == false)
        Entity.EMailEventsEnabled = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.EMailEventsEnabled).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TransmitEventsEnabled).IsNull == false)
        Entity.TransmitEventsEnabled = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.TransmitEventsEnabled).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.FileOutputEnabled).IsNull == false)
        Entity.FileOutputEnabled = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.FileOutputEnabled).GetAsBool();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertName).GetAsString();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateName).GetAsString();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.UpdateDate).GetAsDateTimeOffset();
      if(Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = Properties.GetByName(AccessPortalPropertiesPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the AccessPortalPropertiesPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'AccessPortalPropertiesUid'
    /// </summary>
    public static string AccessPortalPropertiesUid = "AccessPortalPropertiesUid";
    /// <summary>
    /// Returns 'AccessPortalUid'
    /// </summary>
    public static string AccessPortalUid = "AccessPortalUid";
    /// <summary>
    /// Returns 'AutomaticForgivePassbackFrequencyUid'
    /// </summary>
    public static string AutomaticForgivePassbackFrequencyUid = "AutomaticForgivePassbackFrequencyUid";
    /// <summary>
    /// Returns 'PinRequiredModeUid'
    /// </summary>
    public static string PinRequiredModeUid = "PinRequiredModeUid";
    /// <summary>
    /// Returns 'AccessPortalContactSupervisionTypeUid'
    /// </summary>
    public static string AccessPortalContactSupervisionTypeUid = "AccessPortalContactSupervisionTypeUid";
    /// <summary>
    /// Returns 'AccessPortalDeferToServerBehaviorUid'
    /// </summary>
    public static string AccessPortalDeferToServerBehaviorUid = "AccessPortalDeferToServerBehaviorUid";
    /// <summary>
    /// Returns 'AccessPortalNoServerReplyBehaviorUid'
    /// </summary>
    public static string AccessPortalNoServerReplyBehaviorUid = "AccessPortalNoServerReplyBehaviorUid";
    /// <summary>
    /// Returns 'AccessPortalLockPushButtonBehaviorUid'
    /// </summary>
    public static string AccessPortalLockPushButtonBehaviorUid = "AccessPortalLockPushButtonBehaviorUid";
    /// <summary>
    /// Returns 'LiquidCrystalDisplayUid'
    /// </summary>
    public static string LiquidCrystalDisplayUid = "LiquidCrystalDisplayUid";
    /// <summary>
    /// Returns 'AccessPortalElevatorControlTypeUid'
    /// </summary>
    public static string AccessPortalElevatorControlTypeUid = "AccessPortalElevatorControlTypeUid";
    /// <summary>
    /// Returns 'OtisElevatorDecUid'
    /// </summary>
    public static string OtisElevatorDecUid = "OtisElevatorDecUid";
    /// <summary>
    /// Returns 'ElevatorRelayInterfaceBoardSectionUid'
    /// </summary>
    public static string ElevatorRelayInterfaceBoardSectionUid = "ElevatorRelayInterfaceBoardSectionUid";
    /// <summary>
    /// Returns 'AccessPortalMultiFactorModeUid'
    /// </summary>
    public static string AccessPortalMultiFactorModeUid = "AccessPortalMultiFactorModeUid";
    /// <summary>
    /// Returns 'DoorNumber'
    /// </summary>
    public static string DoorNumber = "DoorNumber";
    /// <summary>
    /// Returns 'UnlockDelay'
    /// </summary>
    public static string UnlockDelay = "UnlockDelay";
    /// <summary>
    /// Returns 'UnlockDuration'
    /// </summary>
    public static string UnlockDuration = "UnlockDuration";
    /// <summary>
    /// Returns 'RecloseDuration'
    /// </summary>
    public static string RecloseDuration = "RecloseDuration";
    /// <summary>
    /// Returns 'AllowPassbackAccess'
    /// </summary>
    public static string AllowPassbackAccess = "AllowPassbackAccess";
    /// <summary>
    /// Returns 'RequireTwoValidCredentials'
    /// </summary>
    public static string RequireTwoValidCredentials = "RequireTwoValidCredentials";
    /// <summary>
    /// Returns 'UnlockOnREX'
    /// </summary>
    public static string UnlockOnREX = "UnlockOnREX";
    /// <summary>
    /// Returns 'SuppressIllegalOpenLog'
    /// </summary>
    public static string SuppressIllegalOpenLog = "SuppressIllegalOpenLog";
    /// <summary>
    /// Returns 'SuppressOpenTooLongLog'
    /// </summary>
    public static string SuppressOpenTooLongLog = "SuppressOpenTooLongLog";
    /// <summary>
    /// Returns 'SuppressClosedLog'
    /// </summary>
    public static string SuppressClosedLog = "SuppressClosedLog";
    /// <summary>
    /// Returns 'SuppressREXLog'
    /// </summary>
    public static string SuppressREXLog = "SuppressREXLog";
    /// <summary>
    /// Returns 'GenerateDoorContactChangeLogs'
    /// </summary>
    public static string GenerateDoorContactChangeLogs = "GenerateDoorContactChangeLogs";
    /// <summary>
    /// Returns 'LockWhenDoorCloses'
    /// </summary>
    public static string LockWhenDoorCloses = "LockWhenDoorCloses";
    /// <summary>
    /// Returns 'EnableDuress'
    /// </summary>
    public static string EnableDuress = "EnableDuress";
    /// <summary>
    /// Returns 'DoorGroupNotify'
    /// </summary>
    public static string DoorGroupNotify = "DoorGroupNotify";
    /// <summary>
    /// Returns 'DoorGroupCanDisable'
    /// </summary>
    public static string DoorGroupCanDisable = "DoorGroupCanDisable";
    /// <summary>
    /// Returns 'RelayOneOnDuringArmDelay'
    /// </summary>
    public static string RelayOneOnDuringArmDelay = "RelayOneOnDuringArmDelay";
    /// <summary>
    /// Returns 'RequireValidAccessForAutoUnlock'
    /// </summary>
    public static string RequireValidAccessForAutoUnlock = "RequireValidAccessForAutoUnlock";
    /// <summary>
    /// Returns 'PINSpecifiesRecloseDuration'
    /// </summary>
    public static string PINSpecifiesRecloseDuration = "PINSpecifiesRecloseDuration";
    /// <summary>
    /// Returns 'ValidAccessRequiresDoorOpen'
    /// </summary>
    public static string ValidAccessRequiresDoorOpen = "ValidAccessRequiresDoorOpen";
    /// <summary>
    /// Returns 'DontDecrementLimitedSwipeExpireCount'
    /// </summary>
    public static string DontDecrementLimitedSwipeExpireCount = "DontDecrementLimitedSwipeExpireCount";
    /// <summary>
    /// Returns 'IgnoreNotInSystem'
    /// </summary>
    public static string IgnoreNotInSystem = "IgnoreNotInSystem";
    /// <summary>
    /// Returns 'ReaderSendsHeartbeat'
    /// </summary>
    public static string ReaderSendsHeartbeat = "ReaderSendsHeartbeat";
    /// <summary>
    /// Returns 'PhotoVerificationEnabled'
    /// </summary>
    public static string PhotoVerificationEnabled = "PhotoVerificationEnabled";
    /// <summary>
    /// Returns 'TimeAttendancePortal'
    /// </summary>
    public static string TimeAttendancePortal = "TimeAttendancePortal";
    /// <summary>
    /// Returns 'EMailEventsEnabled'
    /// </summary>
    public static string EMailEventsEnabled = "EMailEventsEnabled";
    /// <summary>
    /// Returns 'TransmitEventsEnabled'
    /// </summary>
    public static string TransmitEventsEnabled = "TransmitEventsEnabled";
    /// <summary>
    /// Returns 'FileOutputEnabled'
    /// </summary>
    public static string FileOutputEnabled = "FileOutputEnabled";
    /// <summary>
    /// Returns 'InsertName'
    /// </summary>
    public static string InsertName = "InsertName";
    /// <summary>
    /// Returns 'InsertDate'
    /// </summary>
    public static string InsertDate = "InsertDate";
    /// <summary>
    /// Returns 'UpdateName'
    /// </summary>
    public static string UpdateName = "UpdateName";
    /// <summary>
    /// Returns 'UpdateDate'
    /// </summary>
    public static string UpdateDate = "UpdateDate";
    /// <summary>
    /// Returns 'ConcurrencyValue'
    /// </summary>
    public static string ConcurrencyValue = "ConcurrencyValue";
    }
    #endregion
  }
}
