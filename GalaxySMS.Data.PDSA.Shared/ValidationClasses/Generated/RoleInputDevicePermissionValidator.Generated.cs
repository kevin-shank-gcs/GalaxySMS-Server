using System;

using PDSA.Common;
using PDSA.Validation;

using GalaxySMS.EntityLayer;

namespace GalaxySMS.ValidationLayer
{
  /// <summary>
  /// Used to validate all properties of the RoleInputDevicePermissionPDSA class.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class RoleInputDevicePermissionPDSAValidator : PDSAValidatorBase
  {
    #region Public Entity Property
    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    private RoleInputDevicePermissionPDSA _Entity = null;

    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    public new RoleInputDevicePermissionPDSA Entity
    {
      get { return _Entity; }
      set
      {
        _Entity = value;
        base.Entity = value;
      }
    }
    #endregion
    
    #region Clone Entity Class
    /// <summary>
    /// Clones the current RoleInputDevicePermissionPDSA
    /// </summary>
    /// <returns>A cloned RoleInputDevicePermissionPDSA object</returns>
    public RoleInputDevicePermissionPDSA CloneEntity()
    {
      return CloneEntity(this.Entity);
    }
    
    /// <summary>
    /// Clones the passed in RoleInputDevicePermissionPDSA
    /// </summary>
    /// <param name="entityToClone">The RoleInputDevicePermissionPDSA entity to clone</param>
    /// <returns>A cloned RoleInputDevicePermissionPDSA object</returns>
    public RoleInputDevicePermissionPDSA CloneEntity(RoleInputDevicePermissionPDSA entityToClone)
    {
      RoleInputDevicePermissionPDSA newEntity = new RoleInputDevicePermissionPDSA();

      newEntity.RoleInputDevicePermissionUid = entityToClone.RoleInputDevicePermissionUid;
      newEntity.RoleInputDeviceUid = entityToClone.RoleInputDeviceUid;
      newEntity.PermissionId = entityToClone.PermissionId;
      newEntity.InsertName = entityToClone.InsertName;
      newEntity.InsertDate = entityToClone.InsertDate;
      newEntity.UpdateName = entityToClone.UpdateName;
      newEntity.UpdateDate = entityToClone.UpdateDate;
      newEntity.ConcurrencyValue = entityToClone.ConcurrencyValue;

      return newEntity;
    }
    #endregion

    #region CreateProperties Method
    /// <summary>
    /// Creates the collection of PDSAProperty objects. These are used to control validation and null handling.
    /// </summary>
    /// <returns>A collection of PDSAProperty objects</returns>
    public override PDSAProperties CreateProperties()
    {
      PDSAProperties props = new PDSAProperties();
      
      props.Add(PDSAProperty.Create(RoleInputDevicePermissionPDSAValidator.ColumnNames.RoleInputDevicePermissionUid, GetResourceMessage("GCS_RoleInputDevicePermissionPDSA_RoleInputDevicePermissionUid_Header", "Role Input Device Permission Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_RoleInputDevicePermissionPDSA_RoleInputDevicePermissionUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(RoleInputDevicePermissionPDSAValidator.ColumnNames.RoleInputDeviceUid, GetResourceMessage("GCS_RoleInputDevicePermissionPDSA_RoleInputDeviceUid_Header", "Role Input Device Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_RoleInputDevicePermissionPDSA_RoleInputDeviceUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(RoleInputDevicePermissionPDSAValidator.ColumnNames.PermissionId, GetResourceMessage("GCS_RoleInputDevicePermissionPDSA_PermissionId_Header", "Permission Id"), true, typeof(Guid), -1, GetResourceMessage("GCS_RoleInputDevicePermissionPDSA_PermissionId_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(RoleInputDevicePermissionPDSAValidator.ColumnNames.InsertName, GetResourceMessage("GCS_RoleInputDevicePermissionPDSA_InsertName_Header", "Insert Name"), true, typeof(string), 50, GetResourceMessage("GCS_RoleInputDevicePermissionPDSA_InsertName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(RoleInputDevicePermissionPDSAValidator.ColumnNames.InsertDate, GetResourceMessage("GCS_RoleInputDevicePermissionPDSA_InsertDate_Header", "Insert Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_RoleInputDevicePermissionPDSA_InsertDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(RoleInputDevicePermissionPDSAValidator.ColumnNames.UpdateName, GetResourceMessage("GCS_RoleInputDevicePermissionPDSA_UpdateName_Header", "Update Name"), true, typeof(string), 50, GetResourceMessage("GCS_RoleInputDevicePermissionPDSA_UpdateName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(RoleInputDevicePermissionPDSAValidator.ColumnNames.UpdateDate, GetResourceMessage("GCS_RoleInputDevicePermissionPDSA_UpdateDate_Header", "Update Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_RoleInputDevicePermissionPDSA_UpdateDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(RoleInputDevicePermissionPDSAValidator.ColumnNames.ConcurrencyValue, GetResourceMessage("GCS_RoleInputDevicePermissionPDSA_ConcurrencyValue_Header", "Concurrency Value"), true, typeof(short), 5, GetResourceMessage("GCS_RoleInputDevicePermissionPDSA_ConcurrencyValue_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      
      return props;
    }
    #endregion

    #region Initialize Entity
    /// <summary>
    /// This method is called from the CreateNewEntity Method. All the properties for the Entity are set to default values here by the code generator.
    /// </summary>
    protected override void InitializeEntity()
    {
      Entity.RoleInputDevicePermissionUid = Guid.Empty;
      Entity.RoleInputDeviceUid = Guid.Empty;
      Entity.PermissionId = Guid.Empty;
      Entity.InsertName = string.Empty;
      Entity.InsertDate = DateTimeOffset.Now;
      Entity.UpdateName = string.Empty;
      Entity.UpdateDate = DateTimeOffset.Now;
      Entity.ConcurrencyValue = 0;

      Entity.ResetAllIsDirtyProperties();
    }
    #endregion
    
    #region InitProperties Method
    /// <summary>
    /// Called by the constructor to create the PDSAProperties collection of all properties that will be validated.
    /// </summary>
    protected override void InitProperties()
    {
      // Set the Properties collection to the collection of Entity Properties
      Properties = CreateProperties();
    }
    #endregion

    #region EntityDataToProperties Method
    /// <summary>
    /// Moves the Entity class data into the Properties collection.
    /// </summary>
    protected override void EntityDataToProperties()
    {
      if (Properties == null)
        InitProperties();
      
      if(!Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.RoleInputDevicePermissionUid).SetAsNull)
        Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.RoleInputDevicePermissionUid).Value = Entity.RoleInputDevicePermissionUid;
      if(!Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.RoleInputDeviceUid).SetAsNull)
        Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.RoleInputDeviceUid).Value = Entity.RoleInputDeviceUid;
      if(!Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.PermissionId).SetAsNull)
        Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.PermissionId).Value = Entity.PermissionId;
      if(!Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.InsertName).SetAsNull)
        Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if(!Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.InsertDate).SetAsNull)
        Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if(!Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.UpdateName).SetAsNull)
        Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if(!Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.UpdateDate).SetAsNull)
        Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if(!Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull)
        Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
    }

    /// <summary>
    /// Moves the Properties collection objects into the Entity properties
    /// </summary>
    protected override void PropertiesToEntityData()
    {
      if (Properties == null)
        InitProperties();

      if(Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.RoleInputDevicePermissionUid).IsNull == false)
        Entity.RoleInputDevicePermissionUid = Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.RoleInputDevicePermissionUid).GetAsGuid();
      if(Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.RoleInputDeviceUid).IsNull == false)
        Entity.RoleInputDeviceUid = Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.RoleInputDeviceUid).GetAsGuid();
      if(Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.PermissionId).IsNull == false)
        Entity.PermissionId = Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.PermissionId).GetAsGuid();
      if(Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.InsertName).GetAsString();
      if(Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
      if(Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.UpdateName).GetAsString();
      if(Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.UpdateDate).GetAsDateTimeOffset();
      if(Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = Properties.GetByName(RoleInputDevicePermissionPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the RoleInputDevicePermissionPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'RoleInputDevicePermissionUid'
    /// </summary>
    public static string RoleInputDevicePermissionUid = "RoleInputDevicePermissionUid";
    /// <summary>
    /// Returns 'RoleInputDeviceUid'
    /// </summary>
    public static string RoleInputDeviceUid = "RoleInputDeviceUid";
    /// <summary>
    /// Returns 'PermissionId'
    /// </summary>
    public static string PermissionId = "PermissionId";
    /// <summary>
    /// Returns 'InsertName'
    /// </summary>
    public static string InsertName = "InsertName";
    /// <summary>
    /// Returns 'InsertDate'
    /// </summary>
    public static string InsertDate = "InsertDate";
    /// <summary>
    /// Returns 'UpdateName'
    /// </summary>
    public static string UpdateName = "UpdateName";
    /// <summary>
    /// Returns 'UpdateDate'
    /// </summary>
    public static string UpdateDate = "UpdateDate";
    /// <summary>
    /// Returns 'ConcurrencyValue'
    /// </summary>
    public static string ConcurrencyValue = "ConcurrencyValue";
    }
    #endregion
  }
}
