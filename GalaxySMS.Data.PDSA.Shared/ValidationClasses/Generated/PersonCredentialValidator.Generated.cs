using System;

using PDSA.Common;
using PDSA.Validation;

using GalaxySMS.EntityLayer;

namespace GalaxySMS.ValidationLayer
{
  /// <summary>
  /// Used to validate all properties of the PersonCredentialPDSA class.
  /// This class is generated by the Haystack Code Generator for .NET.
  /// You should NOT modify this class as it is intended to be re-generated.
  /// </summary>
  public partial class PersonCredentialPDSAValidator : PDSAValidatorBase
  {
    #region Public Entity Property
    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    private PersonCredentialPDSA _Entity = null;

    /// <summary>
    /// Get/Set the Entity class with the properties to validate
    /// </summary>
    public new PersonCredentialPDSA Entity
    {
      get { return _Entity; }
      set
      {
        _Entity = value;
        base.Entity = value;
      }
    }
    #endregion
    
    #region Clone Entity Class
    /// <summary>
    /// Clones the current PersonCredentialPDSA
    /// </summary>
    /// <returns>A cloned PersonCredentialPDSA object</returns>
    public PersonCredentialPDSA CloneEntity()
    {
      return CloneEntity(this.Entity);
    }
    
    /// <summary>
    /// Clones the passed in PersonCredentialPDSA
    /// </summary>
    /// <param name="entityToClone">The PersonCredentialPDSA entity to clone</param>
    /// <returns>A cloned PersonCredentialPDSA object</returns>
    public PersonCredentialPDSA CloneEntity(PersonCredentialPDSA entityToClone)
    {
      PersonCredentialPDSA newEntity = new PersonCredentialPDSA();

      newEntity.PersonCredentialUid = entityToClone.PersonCredentialUid;
      newEntity.CredentialUid = entityToClone.CredentialUid;
      newEntity.PersonUid = entityToClone.PersonUid;
      newEntity.PersonCredentialRoleUid = entityToClone.PersonCredentialRoleUid;
      newEntity.PersonActivationModeUid = entityToClone.PersonActivationModeUid;
      newEntity.PersonExpirationModeUid = entityToClone.PersonExpirationModeUid;
      newEntity.BadgeTemplateUid = entityToClone.BadgeTemplateUid;
      newEntity.DossierBadgeTemplateUid = entityToClone.DossierBadgeTemplateUid;
      newEntity.AccessPortalNoServerReplyBehaviorUid = entityToClone.AccessPortalNoServerReplyBehaviorUid;
      newEntity.AccessPortalDeferToServerBehaviorUid = entityToClone.AccessPortalDeferToServerBehaviorUid;
      newEntity.CredentialDescription = entityToClone.CredentialDescription;
      newEntity.ActivationDateTime = entityToClone.ActivationDateTime;
      newEntity.ExpirationDateTime = entityToClone.ExpirationDateTime;
      newEntity.UsageCount = entityToClone.UsageCount;
      newEntity.TraceEnabled = entityToClone.TraceEnabled;
      newEntity.DuressEnabled = entityToClone.DuressEnabled;
      newEntity.ReverseBits = entityToClone.ReverseBits;
      newEntity.BiometricEnrollmentStatus = entityToClone.BiometricEnrollmentStatus;
      newEntity.BadgePrintLimit = entityToClone.BadgePrintLimit;
      newEntity.BadgePrintCount = entityToClone.BadgePrintCount;
      newEntity.BadgeLastPrinted = entityToClone.BadgeLastPrinted;
      newEntity.DossierPrintLimit = entityToClone.DossierPrintLimit;
      newEntity.DossierPrintCount = entityToClone.DossierPrintCount;
      newEntity.DossierLastPrinted = entityToClone.DossierLastPrinted;
      newEntity.InsertName = entityToClone.InsertName;
      newEntity.InsertDate = entityToClone.InsertDate;
      newEntity.UpdateName = entityToClone.UpdateName;
      newEntity.UpdateDate = entityToClone.UpdateDate;
      newEntity.ConcurrencyValue = entityToClone.ConcurrencyValue;
      newEntity.IsActive = entityToClone.IsActive;
      newEntity.SysGalCardId = entityToClone.SysGalCardId;

      return newEntity;
    }
    #endregion

    #region CreateProperties Method
    /// <summary>
    /// Creates the collection of PDSAProperty objects. These are used to control validation and null handling.
    /// </summary>
    /// <returns>A collection of PDSAProperty objects</returns>
    public override PDSAProperties CreateProperties()
    {
      PDSAProperties props = new PDSAProperties();
      
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.PersonCredentialUid, GetResourceMessage("GCS_PersonCredentialPDSA_PersonCredentialUid_Header", "Person Credential Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_PersonCredentialPDSA_PersonCredentialUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.CredentialUid, GetResourceMessage("GCS_PersonCredentialPDSA_CredentialUid_Header", "Credential Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_PersonCredentialPDSA_CredentialUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.PersonUid, GetResourceMessage("GCS_PersonCredentialPDSA_PersonUid_Header", "Person Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_PersonCredentialPDSA_PersonUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.PersonCredentialRoleUid, GetResourceMessage("GCS_PersonCredentialPDSA_PersonCredentialRoleUid_Header", "Person Credential Role Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_PersonCredentialPDSA_PersonCredentialRoleUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.PersonActivationModeUid, GetResourceMessage("GCS_PersonCredentialPDSA_PersonActivationModeUid_Header", "Person Activation Mode Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_PersonCredentialPDSA_PersonActivationModeUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.PersonExpirationModeUid, GetResourceMessage("GCS_PersonCredentialPDSA_PersonExpirationModeUid_Header", "Person Expiration Mode Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_PersonCredentialPDSA_PersonExpirationModeUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.BadgeTemplateUid, GetResourceMessage("GCS_PersonCredentialPDSA_BadgeTemplateUid_Header", "Badge Template Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_PersonCredentialPDSA_BadgeTemplateUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.DossierBadgeTemplateUid, GetResourceMessage("GCS_PersonCredentialPDSA_DossierBadgeTemplateUid_Header", "Dossier Badge Template Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_PersonCredentialPDSA_DossierBadgeTemplateUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.AccessPortalNoServerReplyBehaviorUid, GetResourceMessage("GCS_PersonCredentialPDSA_AccessPortalNoServerReplyBehaviorUid_Header", "Access Portal No Server Reply Behavior Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_PersonCredentialPDSA_AccessPortalNoServerReplyBehaviorUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.AccessPortalDeferToServerBehaviorUid, GetResourceMessage("GCS_PersonCredentialPDSA_AccessPortalDeferToServerBehaviorUid_Header", "Access Portal Defer To Server Behavior Uid"), true, typeof(Guid), -1, GetResourceMessage("GCS_PersonCredentialPDSA_AccessPortalDeferToServerBehaviorUid_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, Guid.Empty, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.CredentialDescription, GetResourceMessage("GCS_PersonCredentialPDSA_CredentialDescription_Header", "Credential Description"), true, typeof(string), 65, GetResourceMessage("GCS_PersonCredentialPDSA_CredentialDescription_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.ActivationDateTime, GetResourceMessage("GCS_PersonCredentialPDSA_ActivationDateTime_Header", "Activation Date Time"), false, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_PersonCredentialPDSA_ActivationDateTime_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.ExpirationDateTime, GetResourceMessage("GCS_PersonCredentialPDSA_ExpirationDateTime_Header", "Expiration Date Time"), false, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_PersonCredentialPDSA_ExpirationDateTime_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.UsageCount, GetResourceMessage("GCS_PersonCredentialPDSA_UsageCount_Header", "Usage Count"), true, typeof(short), 5, GetResourceMessage("GCS_PersonCredentialPDSA_UsageCount_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.TraceEnabled, GetResourceMessage("GCS_PersonCredentialPDSA_TraceEnabled_Header", "Trace Enabled"), true, typeof(bool), -1, GetResourceMessage("GCS_PersonCredentialPDSA_TraceEnabled_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.DuressEnabled, GetResourceMessage("GCS_PersonCredentialPDSA_DuressEnabled_Header", "Duress Enabled"), true, typeof(bool), -1, GetResourceMessage("GCS_PersonCredentialPDSA_DuressEnabled_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.ReverseBits, GetResourceMessage("GCS_PersonCredentialPDSA_ReverseBits_Header", "Reverse Bits"), true, typeof(bool), -1, GetResourceMessage("GCS_PersonCredentialPDSA_ReverseBits_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.BiometricEnrollmentStatus, GetResourceMessage("GCS_PersonCredentialPDSA_BiometricEnrollmentStatus_Header", "Biometric Enrollment Status"), false, typeof(short), 5, GetResourceMessage("GCS_PersonCredentialPDSA_BiometricEnrollmentStatus_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.BadgePrintLimit, GetResourceMessage("GCS_PersonCredentialPDSA_BadgePrintLimit_Header", "Badge Print Limit"), false, typeof(int), 10, GetResourceMessage("GCS_PersonCredentialPDSA_BadgePrintLimit_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.BadgePrintCount, GetResourceMessage("GCS_PersonCredentialPDSA_BadgePrintCount_Header", "Badge Print Count"), false, typeof(int), 10, GetResourceMessage("GCS_PersonCredentialPDSA_BadgePrintCount_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.BadgeLastPrinted, GetResourceMessage("GCS_PersonCredentialPDSA_BadgeLastPrinted_Header", "Badge Last Printed"), false, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_PersonCredentialPDSA_BadgeLastPrinted_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.DossierPrintLimit, GetResourceMessage("GCS_PersonCredentialPDSA_DossierPrintLimit_Header", "Dossier Print Limit"), false, typeof(int), 10, GetResourceMessage("GCS_PersonCredentialPDSA_DossierPrintLimit_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.DossierPrintCount, GetResourceMessage("GCS_PersonCredentialPDSA_DossierPrintCount_Header", "Dossier Print Count"), false, typeof(int), 10, GetResourceMessage("GCS_PersonCredentialPDSA_DossierPrintCount_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt32("-2147483648"), Convert.ToInt32("2147483647"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.DossierLastPrinted, GetResourceMessage("GCS_PersonCredentialPDSA_DossierLastPrinted_Header", "Dossier Last Printed"), false, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_PersonCredentialPDSA_DossierLastPrinted_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.InsertName, GetResourceMessage("GCS_PersonCredentialPDSA_InsertName_Header", "Insert Name"), true, typeof(string), 50, GetResourceMessage("GCS_PersonCredentialPDSA_InsertName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.InsertDate, GetResourceMessage("GCS_PersonCredentialPDSA_InsertDate_Header", "Insert Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_PersonCredentialPDSA_InsertDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.UpdateName, GetResourceMessage("GCS_PersonCredentialPDSA_UpdateName_Header", "Update Name"), true, typeof(string), 50, GetResourceMessage("GCS_PersonCredentialPDSA_UpdateName_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, string.Empty, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.UpdateDate, GetResourceMessage("GCS_PersonCredentialPDSA_UpdateDate_Header", "Update Date"), true, typeof(DateTimeOffset), -1, GetResourceMessage("GCS_PersonCredentialPDSA_UpdateDate_Req", PDSAValidationMessages.MustBeFilledIn), DateTimeOffset.MinValue, DateTimeOffset.MaxValue, 0, DateTimeOffset.Now, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.ConcurrencyValue, GetResourceMessage("GCS_PersonCredentialPDSA_ConcurrencyValue_Header", "Concurrency Value"), true, typeof(short), 5, GetResourceMessage("GCS_PersonCredentialPDSA_ConcurrencyValue_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.IsActive, GetResourceMessage("GCS_PersonCredentialPDSA_IsActive_Header", "Is Active"), true, typeof(bool), -1, GetResourceMessage("GCS_PersonCredentialPDSA_IsActive_Req", PDSAValidationMessages.MustBeFilledIn), null, null, 0, false, @"", ""));
      props.Add(PDSAProperty.Create(PersonCredentialPDSAValidator.ColumnNames.SysGalCardId, GetResourceMessage("GCS_PersonCredentialPDSA_SysGalCardId_Header", "Sys Gal Card Id"), false, typeof(short), 5, GetResourceMessage("GCS_PersonCredentialPDSA_SysGalCardId_Req", PDSAValidationMessages.MustBeFilledIn), Convert.ToInt16("-32768"), Convert.ToInt16("32767"), 0, 0, @"", ""));
      
      return props;
    }
    #endregion

    #region Initialize Entity
    /// <summary>
    /// This method is called from the CreateNewEntity Method. All the properties for the Entity are set to default values here by the code generator.
    /// </summary>
    protected override void InitializeEntity()
    {
      Entity.PersonCredentialUid = Guid.Empty;
      Entity.CredentialUid = Guid.Empty;
      Entity.PersonUid = Guid.Empty;
      Entity.PersonCredentialRoleUid = Guid.Empty;
      Entity.PersonActivationModeUid = Guid.Empty;
      Entity.PersonExpirationModeUid = Guid.Empty;
      Entity.BadgeTemplateUid = Guid.Empty;
      Entity.DossierBadgeTemplateUid = Guid.Empty;
      Entity.AccessPortalNoServerReplyBehaviorUid = Guid.Empty;
      Entity.AccessPortalDeferToServerBehaviorUid = Guid.Empty;
      Entity.CredentialDescription = string.Empty;
      Entity.ActivationDateTime = DateTimeOffset.Now;
      Entity.ExpirationDateTime = DateTimeOffset.Now;
      Entity.UsageCount = 0;
      Entity.TraceEnabled = false;
      Entity.DuressEnabled = false;
      Entity.ReverseBits = false;
      Entity.BiometricEnrollmentStatus = 0;
      Entity.BadgePrintLimit = 0;
      Entity.BadgePrintCount = 0;
      Entity.BadgeLastPrinted = DateTimeOffset.Now;
      Entity.DossierPrintLimit = 0;
      Entity.DossierPrintCount = 0;
      Entity.DossierLastPrinted = DateTimeOffset.Now;
      Entity.InsertName = string.Empty;
      Entity.InsertDate = DateTimeOffset.Now;
      Entity.UpdateName = string.Empty;
      Entity.UpdateDate = DateTimeOffset.Now;
      Entity.ConcurrencyValue = 0;
      Entity.IsActive = false;
      Entity.SysGalCardId = 0;

      Entity.ResetAllIsDirtyProperties();
    }
    #endregion
    
    #region InitProperties Method
    /// <summary>
    /// Called by the constructor to create the PDSAProperties collection of all properties that will be validated.
    /// </summary>
    protected override void InitProperties()
    {
      // Set the Properties collection to the collection of Entity Properties
      Properties = CreateProperties();
    }
    #endregion

    #region EntityDataToProperties Method
    /// <summary>
    /// Moves the Entity class data into the Properties collection.
    /// </summary>
    protected override void EntityDataToProperties()
    {
      if (Properties == null)
        InitProperties();
      
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.PersonCredentialUid).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.PersonCredentialUid).Value = Entity.PersonCredentialUid;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.CredentialUid).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.CredentialUid).Value = Entity.CredentialUid;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.PersonUid).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.PersonUid).Value = Entity.PersonUid;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.PersonCredentialRoleUid).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.PersonCredentialRoleUid).Value = Entity.PersonCredentialRoleUid;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.PersonActivationModeUid).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.PersonActivationModeUid).Value = Entity.PersonActivationModeUid;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.PersonExpirationModeUid).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.PersonExpirationModeUid).Value = Entity.PersonExpirationModeUid;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.BadgeTemplateUid).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.BadgeTemplateUid).Value = Entity.BadgeTemplateUid;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.DossierBadgeTemplateUid).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.DossierBadgeTemplateUid).Value = Entity.DossierBadgeTemplateUid;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.AccessPortalNoServerReplyBehaviorUid).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.AccessPortalNoServerReplyBehaviorUid).Value = Entity.AccessPortalNoServerReplyBehaviorUid;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.AccessPortalDeferToServerBehaviorUid).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.AccessPortalDeferToServerBehaviorUid).Value = Entity.AccessPortalDeferToServerBehaviorUid;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.CredentialDescription).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.CredentialDescription).Value = Entity.CredentialDescription;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.ActivationDateTime).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.ActivationDateTime).Value = Entity.ActivationDateTime;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.ExpirationDateTime).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.ExpirationDateTime).Value = Entity.ExpirationDateTime;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.UsageCount).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.UsageCount).Value = Entity.UsageCount;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.TraceEnabled).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.TraceEnabled).Value = Entity.TraceEnabled;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.DuressEnabled).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.DuressEnabled).Value = Entity.DuressEnabled;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.ReverseBits).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.ReverseBits).Value = Entity.ReverseBits;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.BiometricEnrollmentStatus).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.BiometricEnrollmentStatus).Value = Entity.BiometricEnrollmentStatus;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.BadgePrintLimit).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.BadgePrintLimit).Value = Entity.BadgePrintLimit;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.BadgePrintCount).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.BadgePrintCount).Value = Entity.BadgePrintCount;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.BadgeLastPrinted).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.BadgeLastPrinted).Value = Entity.BadgeLastPrinted;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.DossierPrintLimit).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.DossierPrintLimit).Value = Entity.DossierPrintLimit;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.DossierPrintCount).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.DossierPrintCount).Value = Entity.DossierPrintCount;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.DossierLastPrinted).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.DossierLastPrinted).Value = Entity.DossierLastPrinted;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.InsertName).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.InsertName).Value = Entity.InsertName;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.InsertDate).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.InsertDate).Value = Entity.InsertDate;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.UpdateName).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.UpdateName).Value = Entity.UpdateName;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.UpdateDate).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.UpdateDate).Value = Entity.UpdateDate;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.ConcurrencyValue).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.ConcurrencyValue).Value = Entity.ConcurrencyValue;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.IsActive).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.IsActive).Value = Entity.IsActive;
      if(!Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.SysGalCardId).SetAsNull)
        Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.SysGalCardId).Value = Entity.SysGalCardId;
    }

    /// <summary>
    /// Moves the Properties collection objects into the Entity properties
    /// </summary>
    protected override void PropertiesToEntityData()
    {
      if (Properties == null)
        InitProperties();

      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.PersonCredentialUid).IsNull == false)
        Entity.PersonCredentialUid = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.PersonCredentialUid).GetAsGuid();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.CredentialUid).IsNull == false)
        Entity.CredentialUid = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.CredentialUid).GetAsGuid();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.PersonUid).IsNull == false)
        Entity.PersonUid = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.PersonUid).GetAsGuid();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.PersonCredentialRoleUid).IsNull == false)
        Entity.PersonCredentialRoleUid = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.PersonCredentialRoleUid).GetAsGuid();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.PersonActivationModeUid).IsNull == false)
        Entity.PersonActivationModeUid = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.PersonActivationModeUid).GetAsGuid();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.PersonExpirationModeUid).IsNull == false)
        Entity.PersonExpirationModeUid = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.PersonExpirationModeUid).GetAsGuid();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.BadgeTemplateUid).IsNull == false)
        Entity.BadgeTemplateUid = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.BadgeTemplateUid).GetAsGuid();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.DossierBadgeTemplateUid).IsNull == false)
        Entity.DossierBadgeTemplateUid = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.DossierBadgeTemplateUid).GetAsGuid();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.AccessPortalNoServerReplyBehaviorUid).IsNull == false)
        Entity.AccessPortalNoServerReplyBehaviorUid = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.AccessPortalNoServerReplyBehaviorUid).GetAsGuid();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.AccessPortalDeferToServerBehaviorUid).IsNull == false)
        Entity.AccessPortalDeferToServerBehaviorUid = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.AccessPortalDeferToServerBehaviorUid).GetAsGuid();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.CredentialDescription).IsNull == false)
        Entity.CredentialDescription = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.CredentialDescription).GetAsString();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.ActivationDateTime).IsNull == false)
        Entity.ActivationDateTime = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.ActivationDateTime).GetAsDateTimeOffset();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.ExpirationDateTime).IsNull == false)
        Entity.ExpirationDateTime = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.ExpirationDateTime).GetAsDateTimeOffset();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.UsageCount).IsNull == false)
        Entity.UsageCount = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.UsageCount).GetAsShort();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.TraceEnabled).IsNull == false)
        Entity.TraceEnabled = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.TraceEnabled).GetAsBool();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.DuressEnabled).IsNull == false)
        Entity.DuressEnabled = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.DuressEnabled).GetAsBool();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.ReverseBits).IsNull == false)
        Entity.ReverseBits = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.ReverseBits).GetAsBool();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.BiometricEnrollmentStatus).IsNull == false)
        Entity.BiometricEnrollmentStatus = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.BiometricEnrollmentStatus).GetAsShort();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.BadgePrintLimit).IsNull == false)
        Entity.BadgePrintLimit = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.BadgePrintLimit).GetAsInteger();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.BadgePrintCount).IsNull == false)
        Entity.BadgePrintCount = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.BadgePrintCount).GetAsInteger();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.BadgeLastPrinted).IsNull == false)
        Entity.BadgeLastPrinted = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.BadgeLastPrinted).GetAsDateTimeOffset();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.DossierPrintLimit).IsNull == false)
        Entity.DossierPrintLimit = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.DossierPrintLimit).GetAsInteger();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.DossierPrintCount).IsNull == false)
        Entity.DossierPrintCount = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.DossierPrintCount).GetAsInteger();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.DossierLastPrinted).IsNull == false)
        Entity.DossierLastPrinted = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.DossierLastPrinted).GetAsDateTimeOffset();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.InsertName).IsNull == false)
        Entity.InsertName = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.InsertName).GetAsString();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.InsertDate).IsNull == false)
        Entity.InsertDate = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.InsertDate).GetAsDateTimeOffset();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.UpdateName).IsNull == false)
        Entity.UpdateName = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.UpdateName).GetAsString();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.UpdateDate).IsNull == false)
        Entity.UpdateDate = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.UpdateDate).GetAsDateTimeOffset();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.ConcurrencyValue).IsNull == false)
        Entity.ConcurrencyValue = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.ConcurrencyValue).GetAsShort();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.IsActive).IsNull == false)
        Entity.IsActive = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.IsActive).GetAsBool();
      if(Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.SysGalCardId).IsNull == false)
        Entity.SysGalCardId = Properties.GetByName(PersonCredentialPDSAValidator.ColumnNames.SysGalCardId).GetAsShort();
    }
    #endregion
    
    #region ColumnNames Class
    /// <summary>
    /// Contains static string properties that represent the name of each property in the PersonCredentialPDSA class.
    /// This class is generated by the Haystack Code Generator for .NET.
    /// Do not modify this class or add methods as it is intended to be able to be re-generated at any time.
    /// </summary>
    public class ColumnNames
    {
    /// <summary>
    /// Returns 'PersonCredentialUid'
    /// </summary>
    public static string PersonCredentialUid = "PersonCredentialUid";
    /// <summary>
    /// Returns 'CredentialUid'
    /// </summary>
    public static string CredentialUid = "CredentialUid";
    /// <summary>
    /// Returns 'PersonUid'
    /// </summary>
    public static string PersonUid = "PersonUid";
    /// <summary>
    /// Returns 'PersonCredentialRoleUid'
    /// </summary>
    public static string PersonCredentialRoleUid = "PersonCredentialRoleUid";
    /// <summary>
    /// Returns 'PersonActivationModeUid'
    /// </summary>
    public static string PersonActivationModeUid = "PersonActivationModeUid";
    /// <summary>
    /// Returns 'PersonExpirationModeUid'
    /// </summary>
    public static string PersonExpirationModeUid = "PersonExpirationModeUid";
    /// <summary>
    /// Returns 'BadgeTemplateUid'
    /// </summary>
    public static string BadgeTemplateUid = "BadgeTemplateUid";
    /// <summary>
    /// Returns 'DossierBadgeTemplateUid'
    /// </summary>
    public static string DossierBadgeTemplateUid = "DossierBadgeTemplateUid";
    /// <summary>
    /// Returns 'AccessPortalNoServerReplyBehaviorUid'
    /// </summary>
    public static string AccessPortalNoServerReplyBehaviorUid = "AccessPortalNoServerReplyBehaviorUid";
    /// <summary>
    /// Returns 'AccessPortalDeferToServerBehaviorUid'
    /// </summary>
    public static string AccessPortalDeferToServerBehaviorUid = "AccessPortalDeferToServerBehaviorUid";
    /// <summary>
    /// Returns 'CredentialDescription'
    /// </summary>
    public static string CredentialDescription = "CredentialDescription";
    /// <summary>
    /// Returns 'ActivationDateTime'
    /// </summary>
    public static string ActivationDateTime = "ActivationDateTime";
    /// <summary>
    /// Returns 'ExpirationDateTime'
    /// </summary>
    public static string ExpirationDateTime = "ExpirationDateTime";
    /// <summary>
    /// Returns 'UsageCount'
    /// </summary>
    public static string UsageCount = "UsageCount";
    /// <summary>
    /// Returns 'TraceEnabled'
    /// </summary>
    public static string TraceEnabled = "TraceEnabled";
    /// <summary>
    /// Returns 'DuressEnabled'
    /// </summary>
    public static string DuressEnabled = "DuressEnabled";
    /// <summary>
    /// Returns 'ReverseBits'
    /// </summary>
    public static string ReverseBits = "ReverseBits";
    /// <summary>
    /// Returns 'BiometricEnrollmentStatus'
    /// </summary>
    public static string BiometricEnrollmentStatus = "BiometricEnrollmentStatus";
    /// <summary>
    /// Returns 'BadgePrintLimit'
    /// </summary>
    public static string BadgePrintLimit = "BadgePrintLimit";
    /// <summary>
    /// Returns 'BadgePrintCount'
    /// </summary>
    public static string BadgePrintCount = "BadgePrintCount";
    /// <summary>
    /// Returns 'BadgeLastPrinted'
    /// </summary>
    public static string BadgeLastPrinted = "BadgeLastPrinted";
    /// <summary>
    /// Returns 'DossierPrintLimit'
    /// </summary>
    public static string DossierPrintLimit = "DossierPrintLimit";
    /// <summary>
    /// Returns 'DossierPrintCount'
    /// </summary>
    public static string DossierPrintCount = "DossierPrintCount";
    /// <summary>
    /// Returns 'DossierLastPrinted'
    /// </summary>
    public static string DossierLastPrinted = "DossierLastPrinted";
    /// <summary>
    /// Returns 'InsertName'
    /// </summary>
    public static string InsertName = "InsertName";
    /// <summary>
    /// Returns 'InsertDate'
    /// </summary>
    public static string InsertDate = "InsertDate";
    /// <summary>
    /// Returns 'UpdateName'
    /// </summary>
    public static string UpdateName = "UpdateName";
    /// <summary>
    /// Returns 'UpdateDate'
    /// </summary>
    public static string UpdateDate = "UpdateDate";
    /// <summary>
    /// Returns 'ConcurrencyValue'
    /// </summary>
    public static string ConcurrencyValue = "ConcurrencyValue";
    /// <summary>
    /// Returns 'IsActive'
    /// </summary>
    public static string IsActive = "IsActive";
    /// <summary>
    /// Returns 'SysGalCardId'
    /// </summary>
    public static string SysGalCardId = "SysGalCardId";
    }
    #endregion
  }
}
