using GalaxySMS.Business.Contracts;
using GalaxySMS.Business.Entities;
using GalaxySMS.Business.Managers.Support;
using GalaxySMS.Common.Constants;
using GalaxySMS.Common.Enums;
using GalaxySMS.Data.Contracts;
using GCS.AssaAbloyDSR;
using GCS.AssaAbloyDSR.DSRManagementService;
using GCS.Core.Common.Contracts;
using GCS.Core.Common.Exceptions;
using GCS.Core.Common.Extensions;
using GCS.Core.Common.Logger;
using GCS.Core.Common.ServiceModel;
using GCS.Core.Common.ServiceModel.Extensions;
using GCS.Core.Common.Utils;
using GCS.Framework.Badging.IdProducer;
using GCS.Framework.Badging.IdProducer.Entities;
using GCS.Framework.CredentialProcessor;
using GCS.Framework.Flash;
using GCS.Framework.Magick;
using PDSA.MessageBroker;
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.Remoting;
using System.Security.Cryptography;
using System.ServiceModel;
using System.Threading.Tasks;
using System.Transactions;
using GalaxySMS.Data.Support;
using GCS.Framework.Caching;
using Microsoft.IdentityModel.Tokens;
using AccessPortalAlertEventType = GalaxySMS.Business.Entities.AccessPortalAlertEventType;
using AccessPortalAreaType = GalaxySMS.Business.Entities.AccessPortalAreaType;
using AccessPortalAuxiliaryOutputMode = GalaxySMS.Business.Entities.AccessPortalAuxiliaryOutputMode;
using AccessPortalDeferToServerBehavior = GalaxySMS.Business.Entities.AccessPortalDeferToServerBehavior;
using AccessPortalLockPushButtonBehavior = GalaxySMS.Business.Entities.AccessPortalLockPushButtonBehavior;
using AccessPortalNoServerReplyBehavior = GalaxySMS.Business.Entities.AccessPortalNoServerReplyBehavior;
using AccessPortalScheduleType = GalaxySMS.Business.Entities.AccessPortalScheduleType;
using AutomaticForgivePassbackFrequency = GalaxySMS.Business.Entities.AutomaticForgivePassbackFrequency;
using ChildrenSubscription = GCS.Framework.Badging.IdProducer.Entities.ChildrenSubscription;
using ClusterType = GalaxySMS.Business.Entities.ClusterType;
using CreatedPrintRequest = GCS.Framework.Badging.IdProducer.Entities.CreatedPrintRequest;
using CredentialReaderDataFormat = GalaxySMS.Business.Entities.CredentialReaderDataFormat;
using GalaxyHardwareModuleType = GalaxySMS.Business.Entities.GalaxyHardwareModuleType;
using GalaxyInputDelayType = GalaxySMS.Business.Entities.GalaxyInputDelayType;
using GalaxyInputMode = GalaxySMS.Business.Entities.GalaxyInputMode;
using GalaxyPanelModel = GalaxySMS.Business.Entities.GalaxyPanelModel;
using GalaxySMSBusinessEntities = GalaxySMS.Business.Entities;
using PinRequiredMode = GalaxySMS.Business.Entities.PinRequiredMode;
using SharedResources = GalaxySMS.Resources;
using SubscriptionTemplateField = GCS.Framework.Badging.IdProducer.Entities.SubscriptionTemplateField;
using TimeScheduleType = GalaxySMS.Business.Entities.TimeScheduleType;
using static GCS.AssaAbloyDSR.SchedulingAlgorithm;
using GCS.PanelProtocols.Series5xx;
using GalaxySMS.Data;
using GCS.PanelDataProcessors.Interfaces;
using GCS.PanelOutputDataHandlers;

namespace GalaxySMS.Business.Managers
{
    [Export(typeof(ISystemManagementService))]
    [PartCreationPolicy(CreationPolicy.NonShared)]
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall,
        ConcurrencyMode = ConcurrencyMode.Multiple,
        ReleaseServiceInstanceOnTransactionComplete = false,
        TransactionTimeout = "00:10:00",// - Defaults to 00:00:00 (no timeout)
        TransactionIsolationLevel = IsolationLevel.ReadUncommitted)] // defaults to Serializable
    [ApplicationUserSessionHeaderInspectorBehavior]
    public class SystemManagement : ManagerBase, ISystemManagementService
    {
        public SystemManagement()
        {
        }

        public SystemManagement(IDataRepositoryFactory dataRepositoryFactory)
        {
            _DataRepositoryFactory = dataRepositoryFactory;
        }

        public SystemManagement(IDataRepositoryFactory dataRepositoryFactory,
            IBusinessEngineFactory businessEngineFactory)
        {
            _DataRepositoryFactory = dataRepositoryFactory;
            _BusinessEngineFactory = businessEngineFactory;
        }

        [Import] IDataRepositoryFactory _DataRepositoryFactory;

        [Import] IBusinessEngineFactory _BusinessEngineFactory;

        //[Import] ICacheManager _cacheManager;

        #region TimeZone Operations

        public GalaxySMS.Business.Entities.TimeZone[] GetAllTimeZones(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ITimeZoneRepository>();
                IEnumerable<GalaxySMS.Business.Entities.TimeZone> brands =
                    repository.GetAll(ApplicationUserSessionHeader, parameters);

                return brands.ToArray();
            });
        }

        public GalaxySMS.Business.Entities.TimeZone GetTimeZone(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ITimeZoneRepository>();
                var brand = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (brand == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(string.Format("TimeZone with TimeZoneUid of {0} is not in database",
                            parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return brand;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public GalaxySMS.Business.Entities.TimeZone SaveTimeZone(
            SaveParameters<GalaxySMS.Business.Entities.TimeZone> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<ITimeZoneRepository>();
                GalaxySMS.Business.Entities.TimeZone updatedEntity = null;
                // look up in db by Id
                var tzFromDb = repository.GetById(ApplicationUserSessionHeader,
                    new GetParametersWithPhoto() { GetString = parameters.Data.Id });
                if (tzFromDb != null)
                {
                    parameters.Data.TimeZoneUid = tzFromDb.TimeZoneUid;
                    parameters.Data.InsertDate = tzFromDb.InsertDate;
                    parameters.Data.InsertName = tzFromDb.InsertName;
                    parameters.Data.ConcurrencyValue = tzFromDb.ConcurrencyValue;
                }
                //if( repository.DoesTimeZoneIdExist(parameters.Data.i))
                //if (repository.IsUnique(parameters.Data) == false)
                //{
                //    if (parameters.ThrowExceptionIfDuplicate)
                //    {
                //        var ex =
                //            new DuplicateIndexException(
                //                string.Format("TimeZone with Id of '{0}' cannot be saved because it is a duplicate.",
                //                    parameters.Data.Id));
                //        var detail = new ExceptionDetailEx(ex);
                //        throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                //    }
                //    return parameters.Data;
                //}

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.TimeZoneUid == Guid.Empty)
                {
                    parameters.Data.TimeZoneUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.TimeZoneUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    this.Log().Info($"Adding Time Zone - {parameters.Data.DisplayName}.");
                    updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedEntity;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteTimeZoneByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<ITimeZoneRepository>();

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteTimeZone(DeleteParameters<GalaxySMS.Business.Entities.TimeZone> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<ITimeZoneRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsTimeZoneReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<ITimeZoneRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsTimeZoneUnique(GalaxySMS.Business.Entities.TimeZone data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<ITimeZoneRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Region Operations

        public Region[] GetAllRegions(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.RegionCanViewId);
                IRegionRepository repository = _DataRepositoryFactory.GetDataRepository<IRegionRepository>();
                IEnumerable<Region> regions = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return regions.ToArray();
            });
        }

        public Region[] GetAllRegionsForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //if (parameters.UniqueId != Guid.Empty)
                //    ValidateUserHasEntityAccess(parameters.UniqueId, true);
                if (parameters.UniqueId != Guid.Empty)
                    parameters.CurrentEntityId = parameters.UniqueId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.RegionCanViewId);

                IRegionRepository repository = _DataRepositoryFactory.GetDataRepository<IRegionRepository>();
                IEnumerable<Region> regions = repository.GetAllRegionsForEntity(ApplicationUserSessionHeader, parameters);

                return regions.ToArray();
            });
        }

        public ListItemBase[] GetAllRegionsList(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.RegionCanViewId);
                IRegionRepository repository = _DataRepositoryFactory.GetDataRepository<IRegionRepository>();
                var regions = repository.GetAll(ApplicationUserSessionHeader, parameters);
                var ri = new List<ListItemBase>();
                foreach (var r in regions)
                {
                    ri.Add(r.ToListItemBase());
                }
                return ri.ToArray();
            });
        }

        public ListItemBase[] GetAllRegionsListEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.UniqueId != Guid.Empty)
                    parameters.CurrentEntityId = parameters.UniqueId;
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.RegionCanViewId);
                IRegionRepository repository = _DataRepositoryFactory.GetDataRepository<IRegionRepository>();
                IEnumerable<Region> regions = repository.Get(ApplicationUserSessionHeader, parameters);
                var ri = new List<ListItemBase>();
                foreach (var r in regions)
                {
                    ri.Add(r.ToListItemBase());
                }
                return ri.ToArray();
            });
        }

        public Region GetRegion(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IRegionRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(Region), nameof(Region.RegionUid));
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.RegionCanViewId);
                var region = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (region == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(string.Format("Region with RegionUid of {0} is not in database",
                            parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return region;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public Region SaveRegion(SaveParameters<Region> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IRegionRepository>();

                var exists = VerifyEntityIdMatches(repository, parameters.Data.RegionUid, parameters.Data, true, nameof(Region.EntityId));
                parameters.CurrentEntityId = parameters.Data.EntityId;
                if (!parameters.DoNotValidateAuthorization)
                {
                    if (exists)
                        ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.RegionCanUpdateId);
                    else
                        ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.RegionCanAddId);
                }
                //if (parameters.Data.RegionUid != Guid.Empty)
                //{
                //    var existingItem = repository.Get(parameters.Data.RegionUid, ApplicationUserSessionHeader,
                //        new GetParametersWithPhoto()
                //        {

                //        });
                //    if (existingItem != null)
                //    {
                //        if (parameters.Data.EntityId == Guid.Empty)
                //            parameters.Data.EntityId = existingItem.EntityId;
                //        else
                //        {
                //            if (parameters.Data.EntityId != existingItem.EntityId)
                //            {
                //                throw new DataValidationException($"The {nameof(Region.EntityId)} cannot be changed.");
                //            }
                //        }
                //    }
                //}

                //if (parameters.Data.EntityId == Guid.Empty)
                //    parameters.Data.EntityId = ApplicationUserSessionHeader.CurrentEntityId;

                //parameters.CurrentEntityId = parameters.Data.EntityId;

                //ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.RegionCanAddId);

                Region updatedRegion = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format("Region with Name of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.RegionName));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.RegionUid == Guid.Empty)
                {
                    parameters.Data.RegionUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }

                if (parameters.Data.RoleIds == null)
                    parameters.Data.RoleIds = new List<Guid>();

                // Make temporary copy of incoming RoleIds
                var tempRoleIds = parameters.Data.RoleIds.ToList();
                parameters.Data.RoleIds = new List<Guid>();

                // Grab all roles where IncludeAllRegions is true
                var roleRepository = _DataRepositoryFactory.GetDataRepository<IGcsRoleRepository>();
                var roleParams = new GetParametersWithPhoto() { IncludeMemberCollections = true };
                roleParams.ExcludeMemberCollectionSettings.Add(nameof(gcsRole.RolePermissions));
                roleParams.ExcludeMemberCollectionSettings.Add(nameof(RoleRegion.Sites));
                var roles = roleRepository.GetAllRolesForEntity(parameters.CurrentEntityId, roleParams);
                parameters.Data.RoleIds = roles.Where(o => o.DeviceFilters.IncludeAllRegions == true).Select(o => o.RoleId).ToCollection();

                foreach (var id in tempRoleIds)
                {
                    var roleExistsForEntity = roles.FirstOrDefault(o => o.RoleId == id);

                    if (!parameters.Data.RoleIds.Contains(id) && roleExistsForEntity != null)
                        parameters.Data.RoleIds.Add(id);
                }

                if (repository.DoesExist(parameters.Data.RegionUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    this.Log().Info($"Adding Region - {parameters.Data.RegionName}.");
                    updatedRegion = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedRegion = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedRegion;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteRegionByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IRegionRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(Region), nameof(Region.RegionUid));
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.RegionCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteRegion(DeleteParameters<Region> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IRegionRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.RegionUid, true, nameof(Region), nameof(Region.RegionUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.RegionCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsRegionReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IRegionRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsRegionUnique(Region data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IRegionRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Site Operations

        public Site[] GetAllSites(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SiteCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ISiteRepository>();
                IEnumerable<Site> sites = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return sites.ToArray();
            });
        }

        public ListItemBase[] GetAllSitesList(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
           {
               ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SiteCanViewId);
               var repository = _DataRepositoryFactory.GetDataRepository<ISiteRepository>();
               IEnumerable<Site> sites = repository.GetAll(ApplicationUserSessionHeader, parameters);

               var ri = new List<ListItemBase>();
               foreach (var s in sites)
               {
                   ri.Add(s.ToListItemBase());
               }
               return ri.ToArray();
           });

        }

        public Site[] GetAllSitesForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.UniqueId != Guid.Empty)
                    parameters.CurrentEntityId = parameters.UniqueId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SiteCanViewId);

                //if (parameters.UniqueId != Guid.Empty)
                //    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<ISiteRepository>();
                IEnumerable<Site> sites = repository.GetAllSitesForEntity(ApplicationUserSessionHeader, parameters);
                return sites.ToArray();
            });
        }

        public ListItemBase[] GetAllSitesForEntityList(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
           {
               if (parameters.UniqueId != Guid.Empty)
                   parameters.CurrentEntityId = parameters.UniqueId;

               ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SiteCanViewId);

               //if (parameters.UniqueId != Guid.Empty)
               //    ValidateUserHasEntityAccess(parameters.UniqueId, true);

               var repository = _DataRepositoryFactory.GetDataRepository<ISiteRepository>();
               IEnumerable<Site> sites = repository.GetAllSitesForEntity(ApplicationUserSessionHeader, parameters);
               var ri = new List<ListItemBase>();
               foreach (var s in sites)
               {
                   ri.Add(s.ToListItemBase());
               }
               return ri.ToArray();
           });

        }

        public Site[] GetAllSitesForRegion(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfRegion(parameters.UniqueId, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SiteCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ISiteRepository>();
                IEnumerable<Site> sites = repository.Get(ApplicationUserSessionHeader, parameters);

                return sites.ToArray();
            });
        }

        public ListItemBase[] GetAllSitesForRegionList(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfRegion(parameters.UniqueId, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SiteCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ISiteRepository>();
                IEnumerable<Site> sites = repository.Get(ApplicationUserSessionHeader, parameters);

                var ri = new List<ListItemBase>();
                foreach (var s in sites)
                {
                    ri.Add(s.ToListItemBase());
                }
                return ri.ToArray();
            });
        }

        public Site GetSite(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<ISiteRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, parameters.ThrowExceptionIfNotFound, nameof(Site), nameof(Site.SiteUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SiteCanViewId);
                var site = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (site == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(string.Format("Site with SiteUid of {0} is not in database",
                            parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return site;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public Site SaveSite(SaveParameters<Site> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<ISiteRepository>();
                if (parameters.Data.SiteUid != Guid.Empty)
                {
                    var existingItem = repository.Get(parameters.Data.SiteUid, ApplicationUserSessionHeader,
                        new GetParametersWithPhoto()
                        {

                        });
                    if (existingItem != null)
                    {
                        if (parameters.Data.RegionUid == Guid.Empty)
                            parameters.Data.RegionUid = existingItem.RegionUid;
                        else
                        {
                            if (parameters.Data.RegionUid != existingItem.RegionUid)
                            {
                                throw new DataValidationException($"The {nameof(Site.RegionUid)} cannot be changed.");
                            }
                        }

                        if (parameters.Data.EntityId == Guid.Empty)
                            parameters.Data.EntityId = existingItem.EntityId;
                        else
                        {
                            if (parameters.Data.EntityId != existingItem.EntityId)
                            {
                                throw new DataValidationException($"The {nameof(Site.EntityId)} cannot be changed.");
                            }
                        }
                    }
                }

                if (parameters.Data.EntityId == Guid.Empty)
                    parameters.Data.EntityId = ApplicationUserSessionHeader.CurrentEntityId;

                parameters.CurrentEntityId = parameters.Data.EntityId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SiteCanAddId);

                Site updatedSite = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(string.Format("Site with Name of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.SiteName));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.SiteUid == Guid.Empty)
                {
                    parameters.Data.SiteUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }

                if (parameters.Data.RoleIds == null)
                    parameters.Data.RoleIds = new List<Guid>();

                // Make temporary copy of incoming RoleIds
                var tempRoleIds = parameters.Data.RoleIds.ToList();
                parameters.Data.RoleIds = new List<Guid>();

                // Grab all roles where IncludeAllRegions is true
                var roleRepository = _DataRepositoryFactory.GetDataRepository<IGcsRoleRepository>();
                var roleParams = new GetParametersWithPhoto() { IncludeMemberCollections = true };
                roleParams.ExcludeMemberCollectionSettings.Add(nameof(gcsRole.RolePermissions));
                roleParams.ExcludeMemberCollectionSettings.Add(nameof(RoleSite.Clusters));
                var roles = roleRepository.GetAllRolesForEntity(parameters.CurrentEntityId, roleParams);
                parameters.Data.RoleIds = roles.Where(o => o.DeviceFilters.IncludeAllSites == true).Select(o => o.RoleId).ToCollection();

                foreach (var id in tempRoleIds)
                {
                    var roleExistsForEntity = roles.FirstOrDefault(o => o.RoleId == id);

                    if (!parameters.Data.RoleIds.Contains(id) && roleExistsForEntity != null)
                        parameters.Data.RoleIds.Add(id);
                }

                if (repository.DoesExist(parameters.Data.SiteUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    this.Log().Info($"Adding Site - {parameters.Data.SiteName}.");
                    updatedSite = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedSite = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedSite;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteSiteByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<ISiteRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(Site), nameof(Site.SiteUid));
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SiteCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteSite(DeleteParameters<Site> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<ISiteRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.SiteUid, true, nameof(Site), nameof(Site.SiteUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SiteCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsSiteReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<ISiteRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsSiteUnique(Site data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<ISiteRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Brand Operations

        public Brand[] GetAllBrands(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IBrandRepository>();
                IEnumerable<Brand> brands = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return brands.ToArray();
            });
        }

        public Brand GetBrand(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IBrandRepository>();
                var brand = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (brand == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(string.Format("Brand with BrandUid of {0} is not in database",
                            parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return brand;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public Brand SaveBrand(SaveParameters<Brand> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (!parameters.DoNotValidateAuthorization)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<IBrandRepository>();
                Brand updatedEntity = null;
                if (repository.IsUnique(parameters.Data) == false)
                {
                    if (parameters.ThrowExceptionIfDuplicate)
                    {
                        var ex =
                            new DuplicateIndexException(
                                string.Format("Brand with Name of '{0}' cannot be saved because it is a duplicate.",
                                    parameters.Data.BrandName));
                        var detail = new ExceptionDetailEx(ex);
                        throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                    }
                    return parameters.Data;
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.BrandUid == Guid.Empty)
                {
                    parameters.Data.BrandUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.BrandUid) == false)
                {
                    this.Log().Info($"Saving brand: {parameters.Data.BrandName}");
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedEntity;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteBrandByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<IBrandRepository>();

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteBrand(DeleteParameters<Brand> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<IBrandRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsBrandReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IBrandRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsBrandUnique(Brand data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IBrandRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region CredentialReaderDataFormat Operations

        public CredentialReaderDataFormat[] GetAllCredentialReaderDataFormats(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialReaderDataFormatRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public CredentialReaderDataFormat GetCredentialReaderDataFormat(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialReaderDataFormatRepository>();
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format(
                                "CredentialReaderDataFormat with CredentialReaderDataFormatUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public CredentialReaderDataFormat SaveCredentialReaderDataFormat(
            SaveParameters<CredentialReaderDataFormat> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (!parameters.DoNotValidateAuthorization)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialReaderDataFormatRepository>();

                CredentialReaderDataFormat updatedEntity = null;
                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format(
                                "CredentialReaderDataFormat with Name of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.DataFormatName));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.CredentialReaderDataFormatUid == Guid.Empty)
                {
                    parameters.Data.CredentialReaderDataFormatUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.CredentialReaderDataFormatUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    this.Log().Info($"Adding Credential Reader Data Format - {parameters.Data.DataFormatName}.");
                    updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedEntity;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteCredentialReaderDataFormatByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialReaderDataFormatRepository>();

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteCredentialReaderDataFormat(DeleteParameters<CredentialReaderDataFormat> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialReaderDataFormatRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsCredentialReaderDataFormatReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialReaderDataFormatRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsCredentialReaderDataFormatUnique(CredentialReaderDataFormat data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialReaderDataFormatRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Credential Reader Type Operations

        public CredentialReaderType[] GetAllCredentialReaderTypes(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialReaderTypeRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public CredentialReaderType GetCredentialReaderType(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialReaderTypeRepository>();
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format(
                                "CredentialReaderType with CredentialReaderTypeUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public CredentialReaderType SaveCredentialReaderType(SaveParameters<CredentialReaderType> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (!parameters.DoNotValidateAuthorization)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialReaderTypeRepository>();

                CredentialReaderType updatedEntity = null;
                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format(
                                "CredentialReaderType with Name of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.ReaderTypeName));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.CredentialReaderTypeUid == Guid.Empty)
                {
                    parameters.Data.CredentialReaderTypeUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.CredentialReaderTypeUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    this.Log().Info($"Adding Credential Reader Type - {parameters.Data.ReaderTypeName}.");
                    updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedEntity;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteCredentialReaderTypeByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialReaderTypeRepository>();

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteCredentialReaderType(DeleteParameters<CredentialReaderType> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialReaderTypeRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsCredentialReaderTypeReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialReaderTypeRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsCredentialReaderTypeUnique(CredentialReaderType data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialReaderTypeRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Feature Operations

        public Feature[] GetAllFeatures(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IFeatureRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public Feature GetFeature(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IFeatureRepository>();
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(string.Format("Feature with FeatureUid of {0} is not in database",
                            parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public Feature SaveFeature(SaveParameters<Feature> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (!parameters.DoNotValidateAuthorization)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<IFeatureRepository>();

                Feature updatedEntity = null;
                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format(
                                "Feature with Description of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.Description));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.FeatureUid == Guid.Empty)
                {
                    parameters.Data.FeatureUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.FeatureUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    this.Log().Info($"Adding Feature - {parameters.Data.FeatureCode}.");
                    updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                foreach (var fi in parameters.Data.FeatureItems)
                {
                    fi.FeatureUid = updatedEntity.FeatureUid;
                    var fiparams = new SaveParameters<FeatureItem>(fi, parameters);
                    SaveFeatureItem(fiparams);
                }
                return updatedEntity;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteFeatureByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<IFeatureRepository>();

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteFeature(DeleteParameters<Feature> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<IFeatureRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsFeatureReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IFeatureRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsFeatureUnique(Feature data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IFeatureRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Feature Item Operations

        public FeatureItem[] GetAllFeatureItemsForFeature(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IFeatureItemRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public FeatureItem GetFeatureItem(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IFeatureItemRepository>();
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(string.Format(
                            "FeatureItem with FeatureItemUid of {0} is not in database", parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public FeatureItem SaveFeatureItem(SaveParameters<FeatureItem> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<IFeatureItemRepository>();

                FeatureItem updatedEntity = null;
                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format("FeatureItem with Code of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.Code));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.FeatureItemUid == Guid.Empty)
                {
                    parameters.Data.FeatureItemUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.FeatureItemUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedEntity;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteFeatureItemByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<IFeatureItemRepository>();

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteFeatureItem(DeleteParameters<FeatureItem> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<IFeatureItemRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsFeatureItemReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IFeatureItemRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsFeatureItemUnique(FeatureItem data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IFeatureItemRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Credential Reader Type Feature Map Operations

        public CredentialReaderTypeFeatureMap[] GetAllCredentialReaderTypeFeatureMapForCredentialReaderType(
            GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialReaderTypeFeatureMapRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public CredentialReaderTypeFeatureMap[] GetAllCredentialReaderTypeFeatureMapForFeature(
            GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialReaderTypeFeatureMapRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public CredentialReaderTypeFeatureMap GetCredentialReaderTypeFeatureMap(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialReaderTypeFeatureMapRepository>();
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format(
                                "CredentialReaderTypeFeatureMap with CredentialReaderTypeFeatureMapUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public CredentialReaderTypeFeatureMap SaveCredentialReaderTypeFeatureMap(
            SaveParameters<CredentialReaderTypeFeatureMap> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialReaderTypeFeatureMapRepository>();

                CredentialReaderTypeFeatureMap updatedEntity = null;
                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format(
                                "CredentialReaderTypeFeatureMap with CredentialReaderTypeFeatureMapUid of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.CredentialReaderTypeFeatureMapUid));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.CredentialReaderTypeFeatureMapUid == Guid.Empty)
                {
                    parameters.Data.CredentialReaderTypeFeatureMapUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.CredentialReaderTypeFeatureMapUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedEntity;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteCredentialReaderTypeFeatureMapByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialReaderTypeFeatureMapRepository>();

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteCredentialReaderTypeFeatureMap(DeleteParameters<CredentialReaderTypeFeatureMap> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialReaderTypeFeatureMapRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsCredentialReaderTypeFeatureMapReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialReaderTypeFeatureMapRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsCredentialReaderTypeFeatureMapUnique(CredentialReaderTypeFeatureMap data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialReaderTypeFeatureMapRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region AccessPortalType Operations

        public AccessPortalType[] GetAllAccessPortalTypes(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalTypeRepository>();
                IEnumerable<AccessPortalType> portalTypes = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return portalTypes.ToArray();
            });
        }

        public AccessPortalType GetAccessPortalType(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalTypeRepository>();
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("AccessPortalType with AccessPortalTypeUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public AccessPortalType SaveAccessPortalType(SaveParameters<AccessPortalType> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (!parameters.DoNotValidateAuthorization)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalTypeRepository>();

                AccessPortalType updatedEntity = null;
                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format(
                                "AccessPortalType with Name of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.AccessPortalTypeDescription));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.AccessPortalTypeUid == Guid.Empty)
                {
                    parameters.Data.AccessPortalTypeUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.AccessPortalTypeUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    this.Log().Info($"Adding Access Portal Type - {parameters.Data.Name}.");
                    updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedEntity;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteAccessPortalTypeByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalTypeRepository>();

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteAccessPortalType(DeleteParameters<AccessPortalType> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalTypeRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsAccessPortalTypeReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalTypeRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsAccessPortalTypeUnique(AccessPortalType data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalTypeRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region AccessPortal Operations

        public ArrayResponse<AccessPortal> GetAllAccessPortals(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
                var data = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<AccessPortal>)data;
            });
        }

        public ArrayResponse<AccessPortalListItemCommands> GetAllAccessPortalsList(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
                var items = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);

                var ri = new List<AccessPortalListItemCommands>();
                foreach (var i in items.Items)
                {
                    ri.Add(i.ToAccessPortalListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, items.PageNumber, items.PageSize, items.TotalItemCount);
            });

        }

        public ArrayResponse<AccessPortal> GetAccessPortalsByTextSearch(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.UniqueId != Guid.Empty)
                    parameters.CurrentEntityId = parameters.UniqueId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);

                //if (parameters.UniqueId != Guid.Empty)
                //    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
                var data = repository.GetByNameOrComments(
                    ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<AccessPortal>)data;
            });

        }

        public ArrayResponse<AccessPortalListItemCommands> GetAccessPortalsListByTextSearch(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.UniqueId != Guid.Empty)
                    parameters.CurrentEntityId = parameters.UniqueId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);

                //if (parameters.UniqueId != Guid.Empty)
                //    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
                var data = repository.GetByNameOrComments(
                    ApplicationUserSessionHeader, parameters);

                var ri = new List<AccessPortalListItemCommands>();
                foreach (var i in data.Items)
                {
                    ri.Add(i.ToAccessPortalListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }

        public ArrayResponse<AccessPortal> GetAllAccessPortalsForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.UniqueId != Guid.Empty)
                    parameters.CurrentEntityId = parameters.UniqueId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);

                //if (parameters.UniqueId != Guid.Empty)
                //    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
                var portals = repository.GetAllAccessPortalsForEntity(
                    ApplicationUserSessionHeader, parameters);
                this.Log().Info($"GetAllAccessPortalsForEntity - {portals?.Items?.Length} items.");
                return (ArrayResponse<AccessPortal>)portals;
            });
        }

        public ArrayResponse<AccessPortalListItemCommands> GetAllAccessPortalsListForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.UniqueId != Guid.Empty)
                    parameters.CurrentEntityId = parameters.UniqueId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);

                //if (parameters.UniqueId != Guid.Empty)
                //    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
                var data = repository.GetAllAccessPortalsForEntity(ApplicationUserSessionHeader, parameters);

                var ri = new List<AccessPortalListItemCommands>();
                foreach (var i in data.Items)
                {
                    ri.Add(i.ToAccessPortalListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }

        public ArrayResponse<AccessPortal> GetAllAccessPortalsForRegion(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfRegion(parameters.UniqueId, true);
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
                var portals = repository.GetAllAccessPortalsForRegion(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<AccessPortal>)portals;
            });
        }

        public ArrayResponse<AccessPortalListItemCommands> GetAllAccessPortalsListForRegion(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfRegion(parameters.UniqueId, true);
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
                var data = repository.GetAllAccessPortalsForRegion(
                    ApplicationUserSessionHeader, parameters);

                var ri = new List<AccessPortalListItemCommands>();
                foreach (var i in data.Items)
                {
                    ri.Add(i.ToAccessPortalListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }

        public ArrayResponse<AccessPortal> GetAllAccessPortalsForSite(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfSite(parameters.UniqueId, true);
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
                var portals = repository.GetAllAccessPortalsForSite(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<AccessPortal>)portals;
            });
        }

        public ArrayResponse<AccessPortalListItemCommands> GetAllAccessPortalsListForSite(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfSite(parameters.UniqueId, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
                var data = repository.GetAllAccessPortalsForSite(ApplicationUserSessionHeader, parameters);

                var ri = new List<AccessPortalListItemCommands>();
                foreach (var i in data.Items)
                {
                    ri.Add(i.ToAccessPortalListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }

        public ArrayResponse<AccessPortal> GetAllAccessPortalsForCluster(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfCluster(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
                var portals = repository.GetAllAccessPortalsForCluster(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<AccessPortal>)portals;
            });
        }

        public ArrayResponse<AccessPortalListItemCommands> GetAllAccessPortalsListForCluster(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfCluster(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
                var data = repository.GetAllAccessPortalsForCluster(ApplicationUserSessionHeader, parameters);

                var ri = new List<AccessPortalListItemCommands>();
                foreach (var i in data.Items)
                {
                    ri.Add(i.ToAccessPortalListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }

        public ArrayResponse<AccessPortal> GetAllAccessPortalsForGalaxyPanel(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfGalaxyPanel(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
                var portals = repository.GetAllAccessPortalsForGalaxyPanel(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<AccessPortal>)portals;
            });
        }

        public ArrayResponse<AccessPortalListItemCommands> GetAllAccessPortalsListForGalaxyPanel(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfGalaxyPanel(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
                var data = repository.GetAllAccessPortalsForGalaxyPanel(ApplicationUserSessionHeader, parameters);

                var ri = new List<AccessPortalListItemCommands>();
                foreach (var i in data.Items)
                {
                    ri.Add(i.ToAccessPortalListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }
        public ArrayResponse<AccessPortalListItem> GetAccessPortalListItemsForGalaxyPanel(GetParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (!parameters.DoNotValidateAuthorization)
                {
                    parameters.CurrentEntityId = GetEntityIdOfGalaxyPanel(parameters, true);

                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);
                }

                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();

                var portals = repository.GetAccessPortalListForGalaxyPanel(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<AccessPortalListItem>)portals;
            });
        }

        public AccessPortalListItem GetAccessPortalListItem(GetParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();

                var entityId = repository.GetEntityId(parameters.UniqueId);
                if (entityId == Guid.Empty)
                {
                    NotFoundException ex =
                        new NotFoundException($"{nameof(AccessPortal)} with {nameof(AccessPortal.AccessPortalUid)} of {parameters.UniqueId} not found");
                    ExceptionDetailEx detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }
                parameters.CurrentEntityId = entityId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);

                var portal = repository.GetAccessPortalListItem(ApplicationUserSessionHeader, parameters);
                return portal;
            });
        }

        public ArrayResponse<ActivityHistoryEvent> GetAccessPortalActivityHistoryEvents(
            ActivityHistoryEventSearchParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var tempParametersCurrentEntityId = parameters.CurrentEntityId;
                if (parameters.CurrentEntityId != Guid.Empty)
                {
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);
                }
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();

                if (parameters.AccessPortalUid != Guid.Empty)
                {
                    parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.AccessPortalUid, true,
                        nameof(AccessPortal), nameof(AccessPortal.AccessPortalUid));
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);
                }

                if (parameters.PersonUid != Guid.Empty)
                {
                    var personRepo = _DataRepositoryFactory.GetDataRepository<IPersonRepository>();
                    parameters.CurrentEntityId = GetEntityIdOf(personRepo, parameters.PersonUid, true, nameof(Person),
                        nameof(Person.PersonUid));
                }

                //if (parameters.CredentialUid != Guid.Empty)
                //{
                //    var personRepo = _DataRepositoryFactory.GetDataRepository<ICredentialRepository>();
                //    parameters.CurrentEntityId = GetEntityIdOf(personRepo, parameters.PersonUid, true, nameof(Person),
                //        nameof(Person.PersonUid));
                //}

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);
                var data = repository.GetActivityHistoryEvents(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<ActivityHistoryEvent>)data;
            });
        }

        public AccessPortal GetAccessPortal(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(AccessPortal), nameof(AccessPortal.AccessPortalUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("AccessPortal with AccessPortalUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        public ValidationProblemDetails ValidateAccessPortal(SaveParameters<AccessPortal> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var response = new ValidationProblemDetails();
                var errorsArray = new List<string>();
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
                var exists = false;

                if (parameters.Data.AccessPortalUid != Guid.Empty)
                {
                    exists = repository.DoesExist(parameters.Data.AccessPortalUid);
                }

                //parameters.CurrentEntityId = GetEntityIdOfCluster(parameters.Data.ClusterUid, true);
                //if (!exists)
                //    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPermissionCanAddId);
                //else
                //    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPermissionCanUpdateId);

                //var clusterRepo = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();
                //var clusterExists = clusterRepo.DoesExist(parameters.Data.ClusterUid);
                //if (!clusterExists)
                //{
                //    errorsArray.Clear();
                //    errorsArray.Add($"The {nameof(parameters.Data.ClusterUid)} value {parameters.Data.ClusterUid} does not exist in the database.");
                //    response.Errors.Add($"{nameof(parameters.Data.ClusterUid)}", errorsArray.ToArray());
                //    return response;
                //}

                // Force the entity to match the cluster
                parameters.Data.EntityId = parameters.CurrentEntityId;

                response = repository.Validate(parameters.Data, parameters, ApplicationUserSessionHeader);

                if (response.Errors.Any())
                {
                    return response;
                }

                return null;

            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public AccessPortal SaveAccessPortal(SaveParameters<AccessPortal> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
                //var exists = false;
                //if (parameters.Data.AccessPortalUid != Guid.Empty)
                //{
                //    var existingItem = repository.Get(parameters.Data.AccessPortalUid, ApplicationUserSessionHeader,
                //        new GetParametersWithPhoto()
                //        {

                //        });
                //    if (existingItem != null)
                //    {
                //        exists = true;
                //        if (parameters.Data.EntityId == Guid.Empty)
                //            parameters.Data.EntityId = existingItem.EntityId;
                //        else
                //        {
                //            if (parameters.Data.EntityId != existingItem.EntityId)
                //            {
                //                throw new DataValidationException($"The {nameof(AccessPortal.EntityId)} cannot be changed.");
                //            }
                //        }
                //    }
                //}

                //if (parameters.Data.EntityId == Guid.Empty)
                //    parameters.Data.EntityId = ApplicationUserSessionHeader.CurrentEntityId;

                var exists = VerifyEntityIdMatches(repository, parameters.Data.AccessPortalUid, parameters.Data, true, nameof(AccessPortal.EntityId));
                parameters.CurrentEntityId = parameters.Data.EntityId;

                if (exists)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanUpdateId);
                else
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanAddId);

                AccessPortal updatedEntity = null;

                var validationResults = ValidateAccessPortal(parameters);
                if (validationResults != null && !validationResults.IsValid)
                {
                    var dve = new DataValidationException($"{nameof(AccessPortal)} contains invalid or illegal values.");
                    foreach (var e in validationResults.Errors)
                    {
                        int x = 0;
                        foreach (var s in e.Value)
                            dve.AddValidationRuleMessage(e.Key, s);
                    }

                    throw dve;
                }



                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format("AccessPortal with Name of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.PortalName));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.AccessPortalUid == Guid.Empty)
                {
                    parameters.Data.AccessPortalUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.AccessPortalUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    this.Log().Info($"Adding Access Portal - {parameters.Data.Name}.");
                    updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                //if (parameters.Data.IsPanelDataDirty)
                //{
                // Now send to the panels
                var sendParameters = new SendDataParameters<AccessPortal_PanelLoadData>()
                { PopulateDataFromDatabase = true, ApplicationUserSessionHeader = this.ApplicationUserSessionHeader };
                sendParameters.Data.AccessPortalUid = updatedEntity.AccessPortalUid;
                Globals.Instance.MessageBroker.SendMessage(
                    new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendAccessPortalSettingsToHardware, sendParameters));
                //}
                return updatedEntity;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteAccessPortalByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(AccessPortal), nameof(AccessPortal.AccessPortalUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteAccessPortal(DeleteParameters<AccessPortal> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.AccessPortalUid, true, nameof(AccessPortal), nameof(AccessPortal.AccessPortalUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsAccessPortalReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsAccessPortalUnique(AccessPortal data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        public AccessPortalGalaxyCommonEditingData GetAccessPortalGalaxyCommonEditingData(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var editingData = new AccessPortalGalaxyCommonEditingData();
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);

                if (!parameters.IsExcluded(nameof(editingData.AccessPortalTypes)))
                {
                    var accessPortalTypeRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalTypeRepository>();
                    editingData.AccessPortalTypes = accessPortalTypeRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(editingData.ElevatorControlTypes)))
                {
                    var elevatorControlTypeRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalElevatorControlTypeRepository>();
                    editingData.ElevatorControlTypes = elevatorControlTypeRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(editingData.AutomaticForgivePassbackFrequencies)))
                {
                    var automaticForgiveFrequencyRepository = _DataRepositoryFactory.GetDataRepository<IAutomaticForgivePassbackFrequencyRepository>();
                    editingData.AutomaticForgivePassbackFrequencies = automaticForgiveFrequencyRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(editingData.PinRequiredModes)))
                {
                    var pinRequiredModeRepository = _DataRepositoryFactory.GetDataRepository<IPinRequiredModeRepository>();
                    editingData.PinRequiredModes = pinRequiredModeRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(editingData.MultiFactorModes)))
                {
                    var multiFactorModeRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalMultiFactorModeRepository>();
                    editingData.MultiFactorModes.Add(multiFactorModeRepository.Get(GalaxySMS.Common.Constants.AccessPortalMultiFactorModeIds.SingleFactor,
                        ApplicationUserSessionHeader, parameters));
                }

                if (!parameters.IsExcluded(nameof(editingData.DeferToServerBehaviors)))
                {
                    var deferToServerBehaviorRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalDeferToServerBehaviorRepository>();
                    editingData.DeferToServerBehaviors = deferToServerBehaviorRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(editingData.NoServerReplyBehaviors)))
                {
                    var noServerReplyBehaviorRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalNoServerReplyBehaviorRepository>();
                    editingData.NoServerReplyBehaviors = noServerReplyBehaviorRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(editingData.LockPushButtonBehaviors)))
                {
                    var lockPushButtonBehaviorRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalLockPushButtonBehaviorRepository>();
                    editingData.LockPushButtonBehaviors = lockPushButtonBehaviorRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(editingData.AuxiliaryOutputModes)))
                {
                    var auxiliaryOutputModeRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalAuxiliaryOutputModeRepository>();
                    editingData.AuxiliaryOutputModes = auxiliaryOutputModeRepository.GetAll(ApplicationUserSessionHeader, new GetParametersWithPhoto(parameters) { IncludeMemberCollections = true }).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(editingData.AlertEventTypes)))
                {
                    var alertEventTypeRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalAlertEventTypeRepository>();
                    editingData.AlertEventTypes = alertEventTypeRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(editingData.AreaTypes)))
                {
                    var areaTypeRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalAreaTypeRepository>();
                    editingData.AreaTypes = areaTypeRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(editingData.TimeScheduleTypes)))
                {
                    var scheduleTypeRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalScheduleTypeRepository>();
                    editingData.TimeScheduleTypes = scheduleTypeRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(editingData.Commands)))
                {
                    var apCommandRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalCommandRepository>();
                    var cmds = apCommandRepository.GetAll(ApplicationUserSessionHeader, parameters);
                    editingData.Commands = cmds.Where(o => o.IsActive == true).ToCollection();
                }

                return editingData;
            });
        }

        public AccessPortalGalaxyPanelSpecificEditingData GetAccessPortalGalaxyPanelSpecificEditingData(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var editingData = new AccessPortalGalaxyPanelSpecificEditingData();

                parameters.CurrentEntityId = GetEntityIdOfAccessPortal(parameters.UniqueId, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);

                if (!parameters.IsExcluded(nameof(editingData.ContactSupervisionTypes)))
                {
                    var contactSupervisionTypeRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalContactSupervisionTypeRepository>();
                    editingData.ContactSupervisionTypes = contactSupervisionTypeRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(editingData.LiquidCrystalDisplays)))
                {
                    var lcdRepository = _DataRepositoryFactory.GetDataRepository<ILiquidCrystalDisplayRepository>();
                    editingData.LiquidCrystalDisplays = lcdRepository.GetAllLiquidCrystalDisplaysForAccessPoint(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                //if (!parameters.IsExcluded(nameof(editingData.ElevatorControlTypes)))
                //{
                //    var elevatorControlTypeRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalElevatorControlTypeRepository>();
                //    editingData.ElevatorControlTypes = elevatorControlTypeRepository.GetByAccessPortalUid(ApplicationUserSessionHeader, parameters).ToCollection();
                //}

                if (!parameters.IsExcluded(nameof(editingData.ElevatorRelaysInterfaceBoardSections)))
                {
                    var elevatorRelayInterfaceBoardSectionRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionRepository>();
                    var elevatorRelayChannelParams = new GetParametersWithPhoto(parameters);
                    elevatorRelayChannelParams.GetInt16 = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.ElevatorRelays;
                    editingData.ElevatorRelaysInterfaceBoardSections = elevatorRelayInterfaceBoardSectionRepository.GetAllGalaxyInterfaceBoardSectionsForAccessPortalUidModeCode(ApplicationUserSessionHeader, elevatorRelayChannelParams).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(editingData.Areas)))
                {
                    var areaRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyAreaRepository>();
                    editingData.Areas = areaRepository.GetAllGalaxyAreasForAccessPortal(ApplicationUserSessionHeader, parameters).Items.ToCollection();
                }

                if (!parameters.IsExcluded(nameof(editingData.TimeSchedules)))
                {
                    var timeScheduleRepository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
                    editingData.TimeSchedules = timeScheduleRepository.GetAllTimeSchedulesForAccessPortal(ApplicationUserSessionHeader, parameters).Items.ToCollection();
                }

                if (!parameters.IsExcluded(nameof(editingData.AccessGroups)))
                {
                    var accessGroupRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyAccessGroupRepository>();
                    editingData.AccessGroups = accessGroupRepository.GetAllGalaxyAccessGroupsForAccessPortal(ApplicationUserSessionHeader, parameters).Items.ToCollection();
                }

                if (!parameters.IsExcluded(nameof(editingData.InputOutputGroups)))
                {
                    var inputOutputGroupRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyInputOutputGroupRepository>();
                    var ioGroupParams = new GetParametersWithPhoto(parameters);
                    ioGroupParams.IncludeMemberCollections = true;
                    editingData.InputOutputGroups = inputOutputGroupRepository
                        .GetAllGalaxyInputOutputGroupsForAccessPortal(ApplicationUserSessionHeader, ioGroupParams).Items.ToCollection();
                }

                return editingData;
            });
        }

        //public bool ExecuteAccessPortalCommand(CommandParameters<AccessPortalCommandAction> parameters)
        //{
        //    return ExecuteFaultHandledOperation(() =>
        //    {
        //        var permissionId = Guid.Empty;
        //        if (parameters.Data.CommandAction == AccessPortalCommandActionCode.None)
        //        {
        //            if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.AccessPortalCommandIds.Pulse)
        //                parameters.Data.CommandAction = AccessPortalCommandActionCode.Pulse;
        //            else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.AccessPortalCommandIds.Unlock)
        //                parameters.Data.CommandAction = AccessPortalCommandActionCode.Unlock;
        //            else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.AccessPortalCommandIds.Lock)
        //                parameters.Data.CommandAction = AccessPortalCommandActionCode.Lock;
        //            else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.AccessPortalCommandIds.Enable)
        //                parameters.Data.CommandAction = AccessPortalCommandActionCode.Enable;
        //            else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.AccessPortalCommandIds.Disable)
        //                parameters.Data.CommandAction = AccessPortalCommandActionCode.Disable;
        //            else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.AccessPortalCommandIds.AuxRelayOn)
        //                parameters.Data.CommandAction = AccessPortalCommandActionCode.AuxRelayOn;
        //            else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.AccessPortalCommandIds.AuxRelayOff)
        //                parameters.Data.CommandAction = AccessPortalCommandActionCode.AuxRelayOff;
        //            else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.AccessPortalCommandIds.SetLedTemporaryState)
        //                parameters.Data.CommandAction = AccessPortalCommandActionCode.SetLedTemporaryState;
        //            else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.AccessPortalCommandIds.RequestStatus)
        //                parameters.Data.CommandAction = AccessPortalCommandActionCode.RequestStatus;
        //        }

        //        switch (parameters.Data.CommandAction)
        //        {
        //            case AccessPortalCommandActionCode.Pulse:
        //                permissionId = PermissionIds.GalaxySMSAccessPortalCommandPermission.UnlockMomentarily;
        //                parameters.Data.CommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.Pulse;
        //                break;

        //            case AccessPortalCommandActionCode.Unlock:
        //                permissionId = PermissionIds.GalaxySMSAccessPortalCommandPermission.Unlock;
        //                parameters.Data.CommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.Unlock;
        //                break;

        //            case AccessPortalCommandActionCode.Lock:
        //                permissionId = PermissionIds.GalaxySMSAccessPortalCommandPermission.Lock;
        //                parameters.Data.CommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.Lock;
        //                break;

        //            case AccessPortalCommandActionCode.Enable:
        //                permissionId = PermissionIds.GalaxySMSAccessPortalCommandPermission.Enable;
        //                parameters.Data.CommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.Enable;
        //                break;

        //            case AccessPortalCommandActionCode.Disable:
        //                permissionId = PermissionIds.GalaxySMSAccessPortalCommandPermission.Disable;
        //                parameters.Data.CommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.Disable;
        //                break;

        //            case AccessPortalCommandActionCode.AuxRelayOn:
        //                permissionId = PermissionIds.GalaxySMSAccessPortalCommandPermission.Relay2On;
        //                parameters.Data.CommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.AuxRelayOn;
        //                break;

        //            case AccessPortalCommandActionCode.AuxRelayOff:
        //                permissionId = PermissionIds.GalaxySMSAccessPortalCommandPermission.Relay2Off;
        //                parameters.Data.CommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.AuxRelayOff;
        //                break;

        //            case AccessPortalCommandActionCode.SetLedTemporaryState:
        //                permissionId = PermissionIds.GalaxySMSAccessPortalCommandPermission.SetLedTemporaryState;
        //                parameters.Data.CommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.SetLedTemporaryState;
        //                break;

        //            case AccessPortalCommandActionCode.RequestStatus:
        //                permissionId = PermissionIds.GalaxySMSAccessPortalCommandPermission.RequestStatus;
        //                parameters.Data.CommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.RequestStatus;
        //                break;

        //            case AccessPortalCommandActionCode.None:
        //            default:
        //                throw new ArgumentOutOfRangeException();
        //        }

        //        parameters.CurrentEntityId = GetEntityIdOfAccessPortal(parameters.Data.AccessPortalUid, true);

        //        // Verify that the caller (user) has permission to execute the requested command
        //        ValidateAuthorizationAndSetupDeviceOperation(parameters, permissionId, DeviceTypeCode.None);

        //        var commandRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalCommandRepository>();
        //        var cmd = commandRepository.Get(parameters.Data.CommandUid, ApplicationUserSessionHeader, new GetParametersWithPhoto());
        //        if (cmd == null || cmd.IsActive == false)
        //        {
        //            // throw new UnauthorizedAccessException();
        //            throw new ApplicationException($"{MagicExceptionStrings.forbidden} - {parameters.Data.CommandAction} command is not active.");
        //        }

        //        var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
        //        var ap = repository.GetHardwareInformation(ApplicationUserSessionHeader, parameters.Data.AccessPortalUid);
        //        if (ap != null && ap.ClusterNumber != 0 && ap.PanelNumber != 0 && ap.BoardNumber != 0 && ap.SectionNumber != 0)
        //        {
        //            // Verify that the caller is permitted to execute this command for this device
        //            if (!repository.DoesUserHavePermission(ApplicationUserSessionHeader, parameters.Data.AccessPortalUid, permissionId))
        //            {
        //                throw new UnauthorizedAccessException($"UserName '{this.ApplicationUserSessionHeader.UserName}' does not have permissions to execute the {parameters.Data.CommandAction} command on access portal {ap.PortalName}");
        //            }

        //            ValidateUserHasEntityAccess(ap.EntityId, true);

        //            var apPanelData = repository.GetAccessPortalPanelLoadData(ApplicationUserSessionHeader, new GetParametersWithPhoto() { UniqueId = parameters.Data.AccessPortalUid });
        //            var getFullParams = new GetParametersWithPhoto()
        //            {
        //                UniqueId = parameters.Data.AccessPortalUid,
        //                IncludePhoto = false,
        //                IncludeMemberCollections = true,
        //            };
        //            getFullParams.ExcludeMemberCollectionSettings.Add(nameof(AccessPortal.AccessGroups));
        //            getFullParams.ExcludeMemberCollectionSettings.Add(nameof(AccessPortal.AlertEvents));
        //            getFullParams.ExcludeMemberCollectionSettings.Add(nameof(AccessPortal.Areas));
        //            getFullParams.ExcludeMemberCollectionSettings.Add(nameof(AccessPortal.Commands));
        //            getFullParams.ExcludeMemberCollectionSettings.Add(nameof(AccessPortal.EntityIds));
        //            getFullParams.ExcludeMemberCollectionSettings.Add(nameof(AccessPortal.GalaxyHardwareAddress));
        //            getFullParams.ExcludeMemberCollectionSettings.Add(nameof(AccessPortal.Schedules));
        //            getFullParams.ExcludeMemberCollectionSettings.Add(nameof(AccessPortal.Notes));
        //            getFullParams.ExcludeMemberCollectionSettings.Add(nameof(AccessPortal.Properties));

        //            var apFull = repository.Get(getFullParams.UniqueId, ApplicationUserSessionHeader, getFullParams);
        //            if (apFull != null)
        //            {
        //                var auxOutput = apFull.AuxiliaryOutputs.FirstOrDefault();
        //                if (auxOutput != null)
        //                {
        //                    // Prevent Aux relay commands that shouldn't be sent based on the mode of the auxiliary output.
        //                    switch (parameters.Data.CommandAction)
        //                    {
        //                        case AccessPortalCommandActionCode.AuxRelayOn:
        //                            if (auxOutput.AccessPortalAuxiliaryOutputModeUid == GalaxySMS.Common.Constants.AccessPortalAuxiliaryOutputModeIds.Follows ||
        //                                auxOutput.AccessPortalAuxiliaryOutputModeUid == GalaxySMS.Common.Constants.AccessPortalAuxiliaryOutputModeIds.Latching ||
        //                                auxOutput.AccessPortalAuxiliaryOutputModeUid == GalaxySMS.Common.Constants.AccessPortalAuxiliaryOutputModeIds.Timeout)
        //                            {
        //                                var ex = new NotFoundException($"Command {parameters.Data.CommandAction} cannot be sent to AccessPortal {apFull.Name} because the auxiliary output (Relay 2) is configured for the follows, timeout or latching mode");
        //                                var detail = new ExceptionDetailEx(ex);
        //                                throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
        //                            }
        //                            break;

        //                        case AccessPortalCommandActionCode.AuxRelayOff:
        //                            if (auxOutput.AccessPortalAuxiliaryOutputModeUid == GalaxySMS.Common.Constants.AccessPortalAuxiliaryOutputModeIds.Timeout)
        //                            {
        //                                var ex = new NotFoundException($"Command {parameters.Data.CommandAction} cannot be sent to AccessPortal {apFull.Name} because the auxiliary output (Relay 2) is configured for the timeout mode");
        //                                var detail = new ExceptionDetailEx(ex);
        //                                throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
        //                            }
        //                            break;
        //                    }
        //                }
        //            }

        //            parameters.Data.AccessPortalHardwareInformation = ap;
        //            if (parameters.OperationUid == Guid.Empty)
        //                parameters.OperationUid = GuidUtilities.GenerateComb();

        //            var sendParameters = new SendDataParameters<AccessPortalCommandAction>()
        //            {
        //                PopulateDataFromDatabase = false,
        //                ApplicationUserSessionHeader = this.ApplicationUserSessionHeader,
        //                Data = parameters.Data,
        //                SendToAddress = new BoardSectionNodeHardwareAddress()
        //                {
        //                    ClusterGroupId = ap.ClusterGroupId,
        //                    ClusterNumber = ap.ClusterNumber,
        //                    PanelNumber = ap.PanelNumber,
        //                    CpuId = 3,
        //                    BoardNumber = ap.BoardNumber,
        //                    SectionNumber = ap.SectionNumber,
        //                    NodeNumber = ap.NodeNumber
        //                }
        //            };

        //            Globals.Instance.MessageBroker.SendMessage(
        //                new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendAccessPortalCommandToHardware, sendParameters));

        //        }
        //        return false;
        //    });
        //}
        public CommandResponse<AccessPortalCommandAction> ExecuteAccessPortalCommand(CommandParameters<AccessPortalCommandAction> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.OperationUid == Guid.Empty)
                    parameters.OperationUid = GuidUtilities.GenerateComb();
                parameters.RequestDateTime = DateTimeOffset.UtcNow;

                var response = new CommandResponse<AccessPortalCommandAction>(parameters) { ApproximateDuration = Globals.Instance.ApproximateDuration, TimeoutSeconds = Globals.Instance.CommandTimeoutSeconds };

                var permissionId = Guid.Empty;
                if (parameters.Data.CommandAction == AccessPortalCommandActionCode.None)
                {
                    if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.AccessPortalCommandIds.Pulse)
                        parameters.Data.CommandAction = AccessPortalCommandActionCode.Pulse;
                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.AccessPortalCommandIds.Unlock)
                        parameters.Data.CommandAction = AccessPortalCommandActionCode.Unlock;
                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.AccessPortalCommandIds.Lock)
                        parameters.Data.CommandAction = AccessPortalCommandActionCode.Lock;
                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.AccessPortalCommandIds.Enable)
                        parameters.Data.CommandAction = AccessPortalCommandActionCode.Enable;
                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.AccessPortalCommandIds.Disable)
                        parameters.Data.CommandAction = AccessPortalCommandActionCode.Disable;
                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.AccessPortalCommandIds.AuxRelayOn)
                        parameters.Data.CommandAction = AccessPortalCommandActionCode.AuxRelayOn;
                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.AccessPortalCommandIds.AuxRelayOff)
                        parameters.Data.CommandAction = AccessPortalCommandActionCode.AuxRelayOff;
                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.AccessPortalCommandIds.SetLedTemporaryState)
                        parameters.Data.CommandAction = AccessPortalCommandActionCode.SetLedTemporaryState;
                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.AccessPortalCommandIds.RequestStatus)
                        parameters.Data.CommandAction = AccessPortalCommandActionCode.RequestStatus;
                }

                switch (parameters.Data.CommandAction)
                {
                    case AccessPortalCommandActionCode.Pulse:
                        permissionId = PermissionIds.GalaxySMSAccessPortalCommandPermission.UnlockMomentarily;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.Pulse;
                        break;

                    case AccessPortalCommandActionCode.Unlock:
                        permissionId = PermissionIds.GalaxySMSAccessPortalCommandPermission.Unlock;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.Unlock;
                        break;

                    case AccessPortalCommandActionCode.Lock:
                        permissionId = PermissionIds.GalaxySMSAccessPortalCommandPermission.Lock;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.Lock;
                        break;

                    case AccessPortalCommandActionCode.Enable:
                        permissionId = PermissionIds.GalaxySMSAccessPortalCommandPermission.Enable;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.Enable;
                        break;

                    case AccessPortalCommandActionCode.Disable:
                        permissionId = PermissionIds.GalaxySMSAccessPortalCommandPermission.Disable;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.Disable;
                        break;

                    case AccessPortalCommandActionCode.AuxRelayOn:
                        permissionId = PermissionIds.GalaxySMSAccessPortalCommandPermission.Relay2On;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.AuxRelayOn;
                        break;

                    case AccessPortalCommandActionCode.AuxRelayOff:
                        permissionId = PermissionIds.GalaxySMSAccessPortalCommandPermission.Relay2Off;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.AuxRelayOff;
                        break;

                    case AccessPortalCommandActionCode.SetLedTemporaryState:
                        permissionId = PermissionIds.GalaxySMSAccessPortalCommandPermission.SetLedTemporaryState;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.SetLedTemporaryState;
                        break;

                    case AccessPortalCommandActionCode.RequestStatus:
                        permissionId = PermissionIds.GalaxySMSAccessPortalCommandPermission.RequestStatus;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.RequestStatus;
                        break;

                    case AccessPortalCommandActionCode.None:
                    default:
                        throw new ArgumentOutOfRangeException();
                }

                parameters.CurrentEntityId = GetEntityIdOfAccessPortal(parameters.Data.AccessPortalUid, true);

                // Verify that the caller (user) has permission to execute the requested command
                ValidateAuthorizationAndSetupDeviceOperation(parameters, permissionId, DeviceType.None);

                switch (parameters.Data.CommandAction)
                {
                    case AccessPortalCommandActionCode.None:
                    case AccessPortalCommandActionCode.RequestStatus:
                    case AccessPortalCommandActionCode.SetLedTemporaryState:
                        break;

                    default:
                        var commandRepository =
                            _DataRepositoryFactory.GetDataRepository<IAccessPortalCommandRepository>();
                        var cmd = commandRepository.Get(parameters.Data.CommandUid, ApplicationUserSessionHeader,
                            new GetParametersWithPhoto());
                        if (cmd != null && cmd.IsActive == false)
                        {
                            // throw new UnauthorizedAccessException();
                            throw new ApplicationException(
                                $"{MagicExceptionStrings.forbidden} - {parameters.Data.CommandAction} command is not active.");
                        }

                        break;
                }

                var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
                var ap = repository.GetHardwareInformation(ApplicationUserSessionHeader, parameters.Data.AccessPortalUid);
                if (ap != null && ap.ClusterNumber != 0 && ap.PanelNumber != 0 && ap.BoardNumber != 0 && ap.SectionNumber != 0)
                {
                    // Verify that the caller is permitted to execute this command for this device
                    if (!repository.DoesUserHavePermission(ApplicationUserSessionHeader, parameters.Data.AccessPortalUid, permissionId, ap.EntityId))
                    {
                        throw new UnauthorizedAccessException($"UserName '{this.ApplicationUserSessionHeader.UserName}' does not have permissions to execute the {parameters.Data.CommandAction} command on access portal {ap.PortalName}");
                    }

                    ValidateUserHasEntityAccess(ap.EntityId, true);

                    var cpuRepo = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuRepository>();
                    var getHardwareAddressParameters = new GetHardwareAddressParameters() { GalaxyPanelUid = ap.GalaxyPanelUid };
                    var cpus = cpuRepo.GetGalaxyCpuInformation(ApplicationUserSessionHeader, getHardwareAddressParameters);
                    //                    response.IsPanelOnline = ap.PanelConnectedCount != 0;

                    var panelSentTo = new PanelCommandResponseInfo()
                    { GalaxyPanelUid = ap.GalaxyPanelUid };

                    foreach (var c in cpus)
                    {
                        if (c.CpuIsActive)
                        {
                            panelSentTo.Cpus.Add(new CpuCommandResponseInfo()
                            {
                                CpuUid = c.CpuUid,
                                IsCpuOnline = c.IsConnected
                            });
                            if (c.IsConnected)
                                panelSentTo.IsPanelOnline = c.IsConnected;
                        }
                    }
                    response.PanelsSentTo.Add(panelSentTo);


                    var apPanelData = repository.GetAccessPortalPanelLoadData(ApplicationUserSessionHeader, new GetParametersWithPhoto() { UniqueId = parameters.Data.AccessPortalUid });
                    var getFullParams = new GetParametersWithPhoto()
                    {
                        UniqueId = parameters.Data.AccessPortalUid,
                        IncludePhoto = false,
                        IncludeMemberCollections = true,
                    };
                    getFullParams.ExcludeMemberCollectionSettings.Add(nameof(AccessPortal.AccessGroups));
                    getFullParams.ExcludeMemberCollectionSettings.Add(nameof(AccessPortal.AlertEvents));
                    getFullParams.ExcludeMemberCollectionSettings.Add(nameof(AccessPortal.Areas));
                    getFullParams.ExcludeMemberCollectionSettings.Add(nameof(AccessPortal.Commands));
                    getFullParams.ExcludeMemberCollectionSettings.Add(nameof(AccessPortal.EntityIds));
                    getFullParams.ExcludeMemberCollectionSettings.Add(nameof(AccessPortal.GalaxyHardwareAddress));
                    getFullParams.ExcludeMemberCollectionSettings.Add(nameof(AccessPortal.Schedules));
                    getFullParams.ExcludeMemberCollectionSettings.Add(nameof(AccessPortal.Notes));
                    getFullParams.ExcludeMemberCollectionSettings.Add(nameof(AccessPortal.Properties));

                    var apFull = repository.Get(getFullParams.UniqueId, ApplicationUserSessionHeader, getFullParams);
                    if (apFull != null)
                    {
                        var auxOutput = apFull.AuxiliaryOutputs.FirstOrDefault();
                        if (auxOutput != null)
                        {
                            // Prevent Aux relay commands that shouldn't be sent based on the mode of the auxiliary output.
                            switch (parameters.Data.CommandAction)
                            {
                                case AccessPortalCommandActionCode.AuxRelayOn:
                                    if (auxOutput.AccessPortalAuxiliaryOutputModeUid == GalaxySMS.Common.Constants.AccessPortalAuxiliaryOutputModeIds.Follows ||
                                        auxOutput.AccessPortalAuxiliaryOutputModeUid == GalaxySMS.Common.Constants.AccessPortalAuxiliaryOutputModeIds.Latching ||
                                        auxOutput.AccessPortalAuxiliaryOutputModeUid == GalaxySMS.Common.Constants.AccessPortalAuxiliaryOutputModeIds.Timeout)
                                    {
                                        var ex = new NotFoundException($"Command {parameters.Data.CommandAction} cannot be sent to AccessPortal {apFull.Name} because the auxiliary output (Relay 2) is configured for the follows, timeout or latching mode");
                                        var detail = new ExceptionDetailEx(ex);
                                        throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                                    }
                                    break;

                                case AccessPortalCommandActionCode.AuxRelayOff:
                                    if (auxOutput.AccessPortalAuxiliaryOutputModeUid == GalaxySMS.Common.Constants.AccessPortalAuxiliaryOutputModeIds.Timeout)
                                    {
                                        var ex = new NotFoundException($"Command {parameters.Data.CommandAction} cannot be sent to AccessPortal {apFull.Name} because the auxiliary output (Relay 2) is configured for the timeout mode");
                                        var detail = new ExceptionDetailEx(ex);
                                        throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                                    }
                                    break;
                            }
                        }
                    }

                    parameters.Data.AccessPortalHardwareInformation = ap;

                    var sendParameters = new SendDataParameters<AccessPortalCommandAction>()
                    {
                        RequestDateTime = DateTimeOffset.UtcNow,
                        PopulateDataFromDatabase = false,
                        ApplicationUserSessionHeader = this.ApplicationUserSessionHeader,
                        Data = parameters.Data,
                        OperationUid = parameters.OperationUid,
                        NotifySignalRSession = parameters.NotifySignalRSession,
                        SendToAddress = new BoardSectionNodeHardwareAddress()
                        {
                            ClusterGroupId = ap.ClusterGroupId,
                            ClusterNumber = ap.ClusterNumber,
                            PanelNumber = ap.PanelNumber,
                            CpuId = 3,
                            BoardNumber = ap.BoardNumber,
                            SectionNumber = ap.SectionNumber,
                            NodeNumber = ap.NodeNumber
                        }
                    };


                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendAccessPortalCommandToHardware, sendParameters));

                    return response;
                }
                return response;
            });
        }
        #endregion

        #region InputDevice Operations

        public ArrayResponse<InputDevice> GetAllInputDevices(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();
                var data = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<InputDevice>)data;
            });
        }

        public ArrayResponse<InputDeviceListItemCommands> GetAllInputDevicesList(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();
                var data = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);

                var ri = new List<InputDeviceListItemCommands>();
                foreach (var i in data.Items)
                {
                    ri.Add(i.ToInputDeviceListItemCommands());
                }

                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });

        }

        public ArrayResponse<InputDevice> GetInputDevicesByTextSearch(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.UniqueId != Guid.Empty)
                    parameters.CurrentEntityId = parameters.UniqueId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanViewId);

                //if (parameters.UniqueId != Guid.Empty)
                //    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();
                var data = repository.GetByNameOrComments(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<InputDevice>)data;
            });

        }

        public ArrayResponse<InputDeviceListItemCommands> GetInputDevicesListByTextSearch(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.UniqueId != Guid.Empty)
                    parameters.CurrentEntityId = parameters.UniqueId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanViewId);

                //if (parameters.UniqueId != Guid.Empty)
                //    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();
                var data = repository.GetByNameOrComments(
                    ApplicationUserSessionHeader, parameters);

                var ri = new List<InputDeviceListItemCommands>();
                foreach (var i in data.Items)
                {
                    ri.Add(i.ToInputDeviceListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }

        public ArrayResponse<InputDevice> GetAllInputDevicesForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.UniqueId != Guid.Empty)
                    parameters.CurrentEntityId = parameters.UniqueId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanViewId);

                //if (parameters.UniqueId != Guid.Empty)
                //    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();
                var data = repository.GetAllInputDevicesForEntity(
                    ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<InputDevice>)data;
            });
        }

        public ArrayResponse<InputDeviceListItemCommands> GetAllInputDevicesListForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.UniqueId != Guid.Empty)
                    parameters.CurrentEntityId = parameters.UniqueId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanViewId);

                //if (parameters.UniqueId != Guid.Empty)
                //    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();
                var data = repository.GetAllInputDevicesForEntity(
                    ApplicationUserSessionHeader, parameters);

                var ri = new List<InputDeviceListItemCommands>();
                foreach (var i in data.Items)
                {
                    ri.Add(i.ToInputDeviceListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }

        public ArrayResponse<InputDevice> GetAllInputDevicesForRegion(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfRegion(parameters.UniqueId, true);
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();
                var data = repository.GetAllInputDevicesForRegion(
                    ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<InputDevice>)data;
            });
        }

        public ArrayResponse<InputDeviceListItemCommands> GetAllInputDevicesListForRegion(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfRegion(parameters.UniqueId, true);
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();
                var data = repository.GetAllInputDevicesForRegion(
                    ApplicationUserSessionHeader, parameters);

                var ri = new List<InputDeviceListItemCommands>();
                foreach (var i in data.Items)
                {
                    ri.Add(i.ToInputDeviceListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }

        public ArrayResponse<InputDevice> GetAllInputDevicesForSite(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfSite(parameters.UniqueId, true);
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();
                var data = repository.GetAllInputDevicesForSite(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<InputDevice>)data;
            });
        }

        public ArrayResponse<InputDeviceListItemCommands> GetAllInputDevicesListForSite(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfSite(parameters.UniqueId, true);
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();
                var data = repository.GetAllInputDevicesForSite(ApplicationUserSessionHeader, parameters);

                var ri = new List<InputDeviceListItemCommands>();
                foreach (var i in data.Items)
                {
                    ri.Add(i.ToInputDeviceListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }

        public ArrayResponse<InputDevice> GetAllInputDevicesForCluster(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfCluster(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();
                var data = repository.GetAllInputDevicesForCluster(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<InputDevice>)data;
            });
        }

        public ArrayResponse<InputDeviceListItemCommands> GetAllInputDevicesListForCluster(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfCluster(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();
                var data = repository.GetAllInputDevicesForCluster(ApplicationUserSessionHeader, parameters);

                var ri = new List<InputDeviceListItemCommands>();
                foreach (var i in data.Items)
                {
                    ri.Add(i.ToInputDeviceListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }

        public ArrayResponse<InputDevice> GetAllInputDevicesForGalaxyPanel(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfGalaxyPanel(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();
                var data = repository.GetAllInputDevicesForGalaxyPanel(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<InputDevice>)data;
            });
        }

        public ArrayResponse<InputDeviceListItemCommands> GetAllInputDevicesListForGalaxyPanel(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfGalaxyPanel(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();
                var data = repository.GetAllInputDevicesForGalaxyPanel(ApplicationUserSessionHeader, parameters);

                var ri = new List<InputDeviceListItemCommands>();
                foreach (var i in data.Items)
                {
                    ri.Add(i.ToInputDeviceListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }
        public ArrayResponse<InputDeviceListItem> GetInputDeviceListItemsForGalaxyPanel(GetParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (!parameters.DoNotValidateAuthorization)
                {
                    parameters.CurrentEntityId = GetEntityIdOfGalaxyPanel(parameters, true);

                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanViewId);
                }

                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();
                var data = repository.GetInputDeviceListForGalaxyPanel(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<InputDeviceListItem>)data;
            });
        }

        public InputDeviceListItem GetInputDeviceListItem(GetParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();
                var portal = repository.GetInputDeviceListItem(ApplicationUserSessionHeader, parameters);

                return portal;
            });
        }

        public InputDevice GetInputDevice(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(InputDevice), nameof(InputDevice.InputDeviceUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("InputDevice with InputDeviceUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }


        [OperationBehavior(TransactionScopeRequired = true)]
        public InputDevice SaveInputDevice(SaveParameters<InputDevice> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //if (parameters.Data.EntityId == Guid.Empty)
                //    parameters.Data.EntityId = ApplicationUserSessionHeader.CurrentEntityId;

                //parameters.CurrentEntityId = parameters.Data.EntityId;

                //ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanAddId);

                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();
                var exists = VerifyEntityIdMatches(repository, parameters.Data.InputDeviceUid, parameters.Data, true, nameof(InputDevice.EntityId));
                parameters.CurrentEntityId = parameters.Data.EntityId;
                if (!parameters.DoNotValidateAuthorization)
                {
                    if (exists)
                        ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanUpdateId);
                    else
                        ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanAddId);
                }

                InputDevice updatedEntity = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format("InputDevice with Name of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.InputName));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.InputDeviceUid == Guid.Empty)
                {
                    parameters.Data.InputDeviceUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.InputDeviceUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    this.Log().Info($"Adding Input Device - {parameters.Data.Name}.");
                    updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                //if (parameters.Data.IsPanelDataDirty)
                //{
                // Now send to the panels
                var sendParameters = new SendDataParameters<InputDevice_PanelLoadData>()
                { PopulateDataFromDatabase = true, ApplicationUserSessionHeader = this.ApplicationUserSessionHeader };
                sendParameters.Data.InputDeviceUid = updatedEntity.InputDeviceUid;
                Globals.Instance.MessageBroker.SendMessage(
                    new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendInputDeviceSettingsToHardware, sendParameters));
                //}
                return updatedEntity;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteInputDeviceByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(InputDevice), nameof(InputDevice.InputDeviceUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteInputDevice(DeleteParameters<InputDevice> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.InputDeviceUid, true, nameof(InputDevice), nameof(InputDevice.InputDeviceUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsInputDeviceReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsInputDeviceUnique(InputDevice data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }


        public InputDeviceGalaxyCommonEditingData GetInputDeviceGalaxyCommonEditingData(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var editingData = new InputDeviceGalaxyCommonEditingData();
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanViewId);

                var inputModeRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyInputModeRepository>();
                var delayTypeRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyInputDelayTypeRepository>();
                var alertEventTypeRepository = _DataRepositoryFactory.GetDataRepository<IInputDeviceAlertEventTypeRepository>();

                editingData.GalaxyInputModes = inputModeRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                editingData.GalaxyDelayTypes = delayTypeRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                editingData.AlertEventTypes = alertEventTypeRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                return editingData;
            });
        }

        public InputDeviceHardwareSpecificEditingData GetInputDeviceHardwareSpecificEditingData(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var editingData = new InputDeviceHardwareSpecificEditingData();
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanViewId);

                var contactSupervisionTypeRepository = _DataRepositoryFactory.GetDataRepository<IInputDeviceSupervisionTypeRepository>();
                //var lcdRepository = _DataRepositoryFactory.GetDataRepository<ILiquidCrystalDisplayRepository>();
                //var elevatorControlTypeRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalElevatorControlTypeRepository>();
                //var elevatorRelayInterfaceBoardSectionRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionRepository>();
                //var areaRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyAreaRepository>();
                var timeScheduleRepository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
                var inputOutputGroupRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyInputOutputGroupRepository>();
                //var accessGroupRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyAccessGroupRepository>();

                editingData.ContactSupervisionTypes = contactSupervisionTypeRepository.GetAllInputDeviceSupervisionTypeForInputDevice(ApplicationUserSessionHeader, parameters).ToCollection();

                //editingData.LiquidCrystalDisplays = lcdRepository.GetAllLiquidCrystalDisplaysForAccessPoint(ApplicationUserSessionHeader, parameters).ToCollection();

                //editingData.ElevatorControlTypes = elevatorControlTypeRepository.GetByAccessPortalUid(ApplicationUserSessionHeader, parameters).ToCollection();

                //var elevatorRelayChannelParams = new GetParametersWithPhoto(parameters);
                //elevatorRelayChannelParams.GetInt16 = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.ElevatorRelays;
                //editingData.ElevatorRelaysInterfaceBoardSections = elevatorRelayInterfaceBoardSectionRepository.GetAllGalaxyInterfaceBoardSectionsForAccessPortalUidModeCode(ApplicationUserSessionHeader, elevatorRelayChannelParams).ToCollection();

                //editingData.Areas = areaRepository.GetAllGalaxyAreasForAccessPortal(ApplicationUserSessionHeader, parameters).ToCollection();
                editingData.TimeSchedules = timeScheduleRepository.GetAllTimeSchedulesForInputDevice(ApplicationUserSessionHeader, parameters).Items.ToCollection();
                //editingData.AccessGroups = accessGroupRepository.GetAllGalaxyAccessGroupsForAccessPortal(ApplicationUserSessionHeader, parameters).ToCollection();

                var ioGroupParams = new GetParametersWithPhoto(parameters);
                ioGroupParams.IncludeMemberCollections = true;
                editingData.InputOutputGroups = inputOutputGroupRepository.GetAllGalaxyInputOutputGroupsForInputDevice(ApplicationUserSessionHeader, ioGroupParams).Items.ToCollection();


                return editingData;
            });
        }

        public CommandResponse<InputDeviceCommandAction> ExecuteInputDeviceCommand(CommandParameters<InputDeviceCommandAction> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.OperationUid == Guid.Empty)
                    parameters.OperationUid = GuidUtilities.GenerateComb();
                parameters.RequestDateTime = DateTimeOffset.UtcNow;

                var response = new CommandResponse<InputDeviceCommandAction>(parameters) { ApproximateDuration = Globals.Instance.ApproximateDuration, TimeoutSeconds = Globals.Instance.CommandTimeoutSeconds };

                var permissionId = Guid.Empty;
                if (parameters.Data.CommandAction == InputDeviceCommandActionCode.None)
                {
                    if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.InputCommandIds.Shunt)
                        parameters.Data.CommandAction = InputDeviceCommandActionCode.Shunt;
                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.InputCommandIds.Unshunt)
                        parameters.Data.CommandAction = InputDeviceCommandActionCode.Unshunt;
                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.InputCommandIds.Disable)
                        parameters.Data.CommandAction = InputDeviceCommandActionCode.Disable;
                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.InputCommandIds.Enable)
                        parameters.Data.CommandAction = InputDeviceCommandActionCode.Enable;
                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.InputCommandIds.ReadVoltages)
                        parameters.Data.CommandAction = InputDeviceCommandActionCode.ReadVoltages;

                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.InputCommandIds.RequestStatus)
                        parameters.Data.CommandAction = InputDeviceCommandActionCode.RequestStatus;
                }

                switch (parameters.Data.CommandAction)
                {
                    case InputDeviceCommandActionCode.Shunt:
                        permissionId = PermissionIds.GalaxySMSInputCommandPermission.Shunt;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.InputCommandIds.Shunt;
                        break;

                    case InputDeviceCommandActionCode.Unshunt:
                        permissionId = PermissionIds.GalaxySMSInputCommandPermission.Unshunt;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.InputCommandIds.Unshunt;
                        break;

                    case InputDeviceCommandActionCode.Enable:
                        permissionId = PermissionIds.GalaxySMSInputCommandPermission.Enable;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.InputCommandIds.Enable;
                        break;

                    case InputDeviceCommandActionCode.Disable:
                        permissionId = PermissionIds.GalaxySMSInputCommandPermission.Disable;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.InputCommandIds.Disable;
                        break;

                    case InputDeviceCommandActionCode.RequestStatus:
                        permissionId = PermissionIds.GalaxySMSInputCommandPermission.RequestStatus;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.InputCommandIds.RequestStatus;
                        break;

                    case InputDeviceCommandActionCode.ReadVoltages:
                        permissionId = PermissionIds.GalaxySMSInputCommandPermission.ReadVoltages;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.InputCommandIds.ReadVoltages;
                        break;

                    case InputDeviceCommandActionCode.None:
                    default:
                        throw new ArgumentOutOfRangeException();
                }

                parameters.CurrentEntityId = GetEntityIdOfInputDevice(parameters.Data.InputDeviceUid, true);

                // Verify that the caller (user) has permission to execute the requested command
                ValidateAuthorizationAndSetupDeviceOperation(parameters, permissionId, DeviceType.None);
                switch (parameters.Data.CommandAction)
                {
                    case InputDeviceCommandActionCode.None:
                    case InputDeviceCommandActionCode.RequestStatus:
                    case InputDeviceCommandActionCode.ReadVoltages:
                        break;

                    default:
                        var commandRepository = _DataRepositoryFactory.GetDataRepository<IInputCommandRepository>();
                        var cmd = commandRepository.Get(parameters.Data.CommandUid, ApplicationUserSessionHeader,
                            new GetParametersWithPhoto());
                        if (cmd != null && cmd.IsActive == false)
                        {
                            // throw new UnauthorizedAccessException();
                            throw new ApplicationException(
                                $"{MagicExceptionStrings.forbidden} - {parameters.Data.CommandAction} command is not active.");
                        }

                        break;
                }
                // Verify that the caller is permitted to execute this command for this device

                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();

                var id = repository.GetHardwareInformation(ApplicationUserSessionHeader, parameters.Data.InputDeviceUid);
                if (id != null && id.ClusterNumber != 0 && id.PanelNumber != 0 && id.BoardNumber != 0 && id.SectionNumber != 0)
                {
                    // Verify that the caller is permitted to execute this command for this device
                    if (!repository.DoesUserHavePermission(ApplicationUserSessionHeader, parameters.Data.InputDeviceUid, permissionId, id.EntityId))
                    {
                        throw new UnauthorizedAccessException($"UserName '{this.ApplicationUserSessionHeader.UserName}' does not have permissions to execute the {parameters.Data.CommandAction} command on input device {id.InputName}");
                    }

                    ValidateUserHasEntityAccess(id.EntityId, true);


                    var cpuRepo = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuRepository>();
                    var getHardwareAddressParameters = new GetHardwareAddressParameters() { GalaxyPanelUid = id.GalaxyPanelUid };
                    var cpus = cpuRepo.GetGalaxyCpuInformation(ApplicationUserSessionHeader, getHardwareAddressParameters);
                    //                    response.IsPanelOnline = ap.PanelConnectedCount != 0;

                    var panelSentTo = new PanelCommandResponseInfo()
                    { GalaxyPanelUid = id.GalaxyPanelUid };

                    foreach (var c in cpus)
                    {
                        if (c.CpuIsActive)
                        {
                            panelSentTo.Cpus.Add(new CpuCommandResponseInfo()
                            {
                                CpuUid = c.CpuUid,
                                IsCpuOnline = c.IsConnected
                            });
                            if (c.IsConnected)
                                panelSentTo.IsPanelOnline = c.IsConnected;
                        }
                    }
                    response.PanelsSentTo.Add(panelSentTo);

                    parameters.Data.InputDeviceHardwareInformation = id;
                    if (parameters.OperationUid == Guid.Empty)
                        parameters.OperationUid = GuidUtilities.GenerateComb();

                    var sendParameters = new SendDataParameters<InputDeviceCommandAction>()
                    {
                        PopulateDataFromDatabase = false,
                        ApplicationUserSessionHeader = this.ApplicationUserSessionHeader,
                        Data = parameters.Data,
                        OperationUid = parameters.OperationUid,
                        NotifySignalRSession = parameters.NotifySignalRSession,
                        SendToAddress = new BoardSectionNodeHardwareAddress()
                        {
                            ClusterGroupId = id.ClusterGroupId,
                            ClusterNumber = id.ClusterNumber,
                            PanelNumber = id.PanelNumber,
                            CpuId = 3,
                            BoardNumber = id.BoardNumber,
                            SectionNumber = id.SectionNumber,
                            ModuleNumber = id.ModuleNumber,
                            NodeNumber = id.NodeNumber
                        }
                    };

                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendInputDeviceCommandToHardware, sendParameters));
                    return response;
                }
                return response;
            });
        }

        public ArrayResponse<ActivityHistoryEvent> GetInputDeviceActivityHistoryEvents(ActivityHistoryEventSearchParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.InputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();
                var data = repository.GetActivityHistoryEvents(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<ActivityHistoryEvent>)data;
            });
        }


        #endregion

        #region OutputDevice Operations

        public ArrayResponse<OutputDevice> GetAllOutputDevices(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
                var data = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<OutputDevice>)data;
            });
        }

        public ArrayResponse<OutputDeviceListItemCommands> GetAllOutputDevicesList(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
                var data = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);

                var ri = new List<OutputDeviceListItemCommands>();
                foreach (var i in data.Items)
                {
                    ri.Add(i.ToOutputDeviceListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });

        }

        public ArrayResponse<OutputDevice> GetOutputDevicesByTextSearch(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.UniqueId != Guid.Empty)
                    parameters.CurrentEntityId = parameters.UniqueId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanViewId);

                //if (parameters.UniqueId != Guid.Empty)
                //    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
                var data = repository.GetByNameOrComments(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<OutputDevice>)data;
            });

        }

        public ArrayResponse<OutputDeviceListItemCommands> GetOutputDevicesListByTextSearch(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.UniqueId != Guid.Empty)
                    parameters.CurrentEntityId = parameters.UniqueId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanViewId);

                //if (parameters.UniqueId != Guid.Empty)
                //    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
                var data = repository.GetByNameOrComments(
                    ApplicationUserSessionHeader, parameters);

                var ri = new List<OutputDeviceListItemCommands>();
                foreach (var i in data.Items)
                {
                    ri.Add(i.ToOutputDeviceListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }

        public ArrayResponse<OutputDevice> GetAllOutputDevicesForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.UniqueId != Guid.Empty)
                    parameters.CurrentEntityId = parameters.UniqueId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanViewId);

                //if (parameters.UniqueId != Guid.Empty)
                //    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
                var data = repository.GetAllOutputDevicesForEntity(
                    ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<OutputDevice>)data;
            });
        }

        public ArrayResponse<OutputDeviceListItemCommands> GetAllOutputDevicesListForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.UniqueId != Guid.Empty)
                    parameters.CurrentEntityId = parameters.UniqueId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanViewId);

                //if (parameters.UniqueId != Guid.Empty)
                //    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
                var data = repository.GetAllOutputDevicesForEntity(
                    ApplicationUserSessionHeader, parameters);

                var ri = new List<OutputDeviceListItemCommands>();
                foreach (var i in data.Items)
                {
                    ri.Add(i.ToOutputDeviceListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }

        public ArrayResponse<OutputDevice> GetAllOutputDevicesForRegion(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfRegion(parameters.UniqueId, true);
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
                var data = repository.GetAllOutputDevicesForRegion(
                    ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<OutputDevice>)data;
            });
        }

        public ArrayResponse<OutputDeviceListItemCommands> GetAllOutputDevicesListForRegion(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfRegion(parameters.UniqueId, true);
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
                var data = repository.GetAllOutputDevicesForRegion(
                    ApplicationUserSessionHeader, parameters);

                var ri = new List<OutputDeviceListItemCommands>();
                foreach (var i in data.Items)
                {
                    ri.Add(i.ToOutputDeviceListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }

        public ArrayResponse<OutputDevice> GetAllOutputDevicesForSite(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfSite(parameters.UniqueId, true);
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
                var data = repository.GetAllOutputDevicesForSite(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<OutputDevice>)data;
            });
        }

        public ArrayResponse<OutputDeviceListItemCommands> GetAllOutputDevicesListForSite(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfSite(parameters.UniqueId, true);
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
                var data = repository.GetAllOutputDevicesForSite(ApplicationUserSessionHeader, parameters);

                var ri = new List<OutputDeviceListItemCommands>();
                foreach (var i in data.Items)
                {
                    ri.Add(i.ToOutputDeviceListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }

        public ArrayResponse<OutputDevice> GetAllOutputDevicesForCluster(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfCluster(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
                var data = repository.GetAllOutputDevicesForCluster(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<OutputDevice>)data;
            });
        }

        public ArrayResponse<OutputDeviceListItemCommands> GetAllOutputDevicesListForCluster(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfCluster(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
                var data = repository.GetAllOutputDevicesForCluster(ApplicationUserSessionHeader, parameters);

                var ri = new List<OutputDeviceListItemCommands>();
                foreach (var i in data.Items)
                {
                    ri.Add(i.ToOutputDeviceListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }

        public ArrayResponse<OutputDevice> GetAllOutputDevicesForGalaxyPanel(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfGalaxyPanel(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
                var data = repository.GetAllOutputDevicesForGalaxyPanel(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<OutputDevice>)data;
            });
        }

        public ArrayResponse<OutputDeviceListItemCommands> GetAllOutputDevicesListForGalaxyPanel(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfGalaxyPanel(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
                var data = repository.GetAllOutputDevicesForGalaxyPanel(ApplicationUserSessionHeader, parameters);

                var ri = new List<OutputDeviceListItemCommands>();
                foreach (var i in data.Items)
                {
                    ri.Add(i.ToOutputDeviceListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }

        public ArrayResponse<OutputDeviceListItem> GetOutputDeviceListItemsForGalaxyPanel(GetParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (!parameters.DoNotValidateAuthorization)
                {
                    parameters.CurrentEntityId = GetEntityIdOfGalaxyPanel(parameters, true);

                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanViewId);
                }
                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
                var data = repository.GetOutputDeviceListForGalaxyPanel(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<OutputDeviceListItem>)data;
            });
        }

        public OutputDeviceListItem GetOutputDeviceListItem(GetParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
                var portal = repository.GetOutputDeviceListItem(ApplicationUserSessionHeader, parameters);

                return portal;
            });
        }

        public OutputDevice GetOutputDevice(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(InputDevice), nameof(InputDevice.InputDeviceUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("OutputDevice with OutputDeviceUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public OutputDevice SaveOutputDevice(SaveParameters<OutputDevice> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //if (parameters.Data.EntityId == Guid.Empty)
                //    parameters.Data.EntityId = ApplicationUserSessionHeader.CurrentEntityId;

                //parameters.CurrentEntityId = parameters.Data.EntityId;

                //ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanAddId);

                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
                var exists = VerifyEntityIdMatches(repository, parameters.Data.OutputDeviceUid, parameters.Data, true, nameof(OutputDevice.EntityId));
                parameters.CurrentEntityId = parameters.Data.EntityId;
                if (!parameters.DoNotValidateAuthorization)
                {
                    if (exists)
                        ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanUpdateId);
                    else
                        ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanAddId);
                }
                OutputDevice updatedEntity = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format("OutputDevice with Name of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.OutputName));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.OutputDeviceUid == Guid.Empty)
                {
                    parameters.Data.OutputDeviceUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.OutputDeviceUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    this.Log().Info($"Adding Output Device - {parameters.Data.Name}.");
                    updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                //if (parameters.Data.IsPanelDataDirty)
                //{
                // Now send to the panels
                var sendParameters = new SendDataParameters<OutputDevice_PanelLoadData>()
                { PopulateDataFromDatabase = true, ApplicationUserSessionHeader = this.ApplicationUserSessionHeader };
                sendParameters.Data.OutputDeviceUid = updatedEntity.OutputDeviceUid;
                Globals.Instance.MessageBroker.SendMessage(
                    new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendOutputDeviceSettingsToHardware, sendParameters));
                //}
                return updatedEntity;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteOutputDeviceByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(InputDevice), nameof(InputDevice.InputDeviceUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteOutputDevice(DeleteParameters<OutputDevice> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.OutputDeviceUid, true, nameof(OutputDevice), nameof(OutputDevice.OutputDeviceUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsOutputDeviceReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsOutputDeviceUnique(OutputDevice data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        public OutputDeviceGalaxyCommonEditingData GetOutputDeviceGalaxyCommonEditingData(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var editingData = new OutputDeviceGalaxyCommonEditingData();
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanViewId);

                var outputModeRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyOutputModeRepository>();
                var inputSourceRelationshipTypeRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyOutputInputSourceRelationshipRepository>();
                var inputSourceModeRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyOutputInputSourceModeRepository>();
                var inputSourceTriggerConditionRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyOutputInputSourceTriggerConditionRepository>();

                editingData.GalaxyOutputModes = outputModeRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                editingData.InputSourceRelationshipTypes = inputSourceRelationshipTypeRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                editingData.InputSourceModes = inputSourceModeRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                editingData.InputSourceTriggerConditions = inputSourceTriggerConditionRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();

                return editingData;
            });
        }

        public OutputDeviceHardwareSpecificEditingData GetOutputDeviceHardwareSpecificEditingData(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var editingData = new OutputDeviceHardwareSpecificEditingData();
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanViewId);

                //var lcdRepository = _DataRepositoryFactory.GetDataRepository<ILiquidCrystalDisplayRepository>();
                //var elevatorControlTypeRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalElevatorControlTypeRepository>();
                //var elevatorRelayInterfaceBoardSectionRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionRepository>();
                //var areaRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyAreaRepository>();
                var timeScheduleRepository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
                var inputOutputGroupRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyInputOutputGroupRepository>();
                //var accessGroupRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyAccessGroupRepository>();

                //editingData.LiquidCrystalDisplays = lcdRepository.GetAllLiquidCrystalDisplaysForAccessPoint(ApplicationUserSessionHeader, parameters).ToCollection();

                //editingData.ElevatorControlTypes = elevatorControlTypeRepository.GetByAccessPortalUid(ApplicationUserSessionHeader, parameters).ToCollection();

                //var elevatorRelayChannelParams = new GetParametersWithPhoto(parameters);
                //elevatorRelayChannelParams.GetInt16 = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.ElevatorRelays;
                //editingData.ElevatorRelaysInterfaceBoardSections = elevatorRelayInterfaceBoardSectionRepository.GetAllGalaxyInterfaceBoardSectionsForAccessPortalUidModeCode(ApplicationUserSessionHeader, elevatorRelayChannelParams).ToCollection();

                //editingData.Areas = areaRepository.GetAllGalaxyAreasForAccessPortal(ApplicationUserSessionHeader, parameters).ToCollection();
                editingData.TimeSchedules = timeScheduleRepository.GetAllTimeSchedulesForOutputDevice(ApplicationUserSessionHeader, parameters).Items.ToCollection();
                //editingData.AccessGroups = accessGroupRepository.GetAllGalaxyAccessGroupsForAccessPortal(ApplicationUserSessionHeader, parameters).ToCollection();

                var ioGroupParams = new GetParametersWithPhoto(parameters);
                ioGroupParams.IncludeMemberCollections = true;
                editingData.InputOutputGroups = inputOutputGroupRepository.GetAllGalaxyInputOutputGroupsForOutputDevice(ApplicationUserSessionHeader, ioGroupParams).Items.ToCollection();


                return editingData;
            });
        }

        public CommandResponse<OutputDeviceCommandAction> ExecuteOutputDeviceCommand(CommandParameters<OutputDeviceCommandAction> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.OperationUid == Guid.Empty)
                    parameters.OperationUid = GuidUtilities.GenerateComb();
                parameters.RequestDateTime = DateTimeOffset.UtcNow;

                var response = new CommandResponse<OutputDeviceCommandAction>(parameters) { ApproximateDuration = Globals.Instance.ApproximateDuration, TimeoutSeconds = Globals.Instance.CommandTimeoutSeconds };

                var permissionId = Guid.Empty;
                if (parameters.Data.CommandAction == OutputDeviceCommandActionCode.None)
                {
                    if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.OutputCommandIds.On)
                        parameters.Data.CommandAction = OutputDeviceCommandActionCode.On;
                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.OutputCommandIds.Off)
                        parameters.Data.CommandAction = OutputDeviceCommandActionCode.Off;
                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.OutputCommandIds.Disable)
                        parameters.Data.CommandAction = OutputDeviceCommandActionCode.Disable;
                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.OutputCommandIds.Enable)
                        parameters.Data.CommandAction = OutputDeviceCommandActionCode.Enable;

                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.OutputCommandIds.RequestStatus)
                        parameters.Data.CommandAction = OutputDeviceCommandActionCode.RequestStatus;
                }

                switch (parameters.Data.CommandAction)
                {
                    case OutputDeviceCommandActionCode.On:
                        permissionId = PermissionIds.GalaxySMSOutputCommandPermission.On;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.OutputCommandIds.On;
                        break;

                    case OutputDeviceCommandActionCode.Off:
                        permissionId = PermissionIds.GalaxySMSOutputCommandPermission.Off;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.OutputCommandIds.Off;
                        break;

                    case OutputDeviceCommandActionCode.Enable:
                        permissionId = PermissionIds.GalaxySMSOutputCommandPermission.Enable;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.OutputCommandIds.Enable;
                        break;

                    case OutputDeviceCommandActionCode.Disable:
                        permissionId = PermissionIds.GalaxySMSOutputCommandPermission.Disable;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.OutputCommandIds.Disable;
                        break;

                    case OutputDeviceCommandActionCode.RequestStatus:
                        permissionId = PermissionIds.GalaxySMSOutputCommandPermission.RequestStatus;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.OutputCommandIds.RequestStatus;
                        break;

                    case OutputDeviceCommandActionCode.None:
                    default:
                        throw new ArgumentOutOfRangeException();
                }

                parameters.CurrentEntityId = GetEntityIdOfOutputDevice(parameters.Data.OutputDeviceUid, true);
                // Verify that the caller (user) has permission to execute the requested command
                ValidateAuthorizationAndSetupDeviceOperation(parameters, permissionId, DeviceType.None);

                switch (parameters.Data.CommandAction)
                {
                    case OutputDeviceCommandActionCode.None:
                    case OutputDeviceCommandActionCode.RequestStatus:
                        break;

                    default:
                        var commandRepository = _DataRepositoryFactory.GetDataRepository<IOutputCommandRepository>();
                        var cmd = commandRepository.Get(parameters.Data.CommandUid, ApplicationUserSessionHeader, new GetParametersWithPhoto());
                        if (cmd == null || cmd.IsActive == false)
                        {
                            // throw new UnauthorizedAccessException();
                            throw new ApplicationException($"{MagicExceptionStrings.forbidden} - {parameters.Data.CommandAction} command is not active.");
                        }
                        break;
                }

                // Verify that the caller is permitted to execute this command for this device
                // Check output mode/type and prevent commands such as on/off to Follows type and other types that do not support specific commands
                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
                var od = repository.GetHardwareInformation(ApplicationUserSessionHeader, parameters.Data.OutputDeviceUid);

                if (od != null && od.ClusterNumber != 0 && od.PanelNumber != 0 && od.BoardNumber != 0 && od.SectionNumber != 0)
                {
                    // Verify that the caller is permitted to execute this command for this device
                    if (!repository.DoesUserHavePermission(ApplicationUserSessionHeader, parameters.Data.OutputDeviceUid, permissionId, od.EntityId))
                    {
                        throw new UnauthorizedAccessException($"UserName '{this.ApplicationUserSessionHeader.UserName}' does not have permissions to execute the {parameters.Data.CommandAction} command on output device '{od.OutputName}'");
                    }

                    ValidateUserHasEntityAccess(od.EntityId, true);

                    var cpuRepo = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuRepository>();
                    var getHardwareAddressParameters = new GetHardwareAddressParameters() { GalaxyPanelUid = od.GalaxyPanelUid };
                    var cpus = cpuRepo.GetGalaxyCpuInformation(ApplicationUserSessionHeader, getHardwareAddressParameters);
                    //                    response.IsPanelOnline = ap.PanelConnectedCount != 0;

                    var panelSentTo = new PanelCommandResponseInfo()
                    { GalaxyPanelUid = od.GalaxyPanelUid };

                    foreach (var c in cpus)
                    {
                        if (c.CpuIsActive)
                        {
                            panelSentTo.Cpus.Add(new CpuCommandResponseInfo()
                            {
                                CpuUid = c.CpuUid,
                                IsCpuOnline = c.IsConnected
                            });
                            if (c.IsConnected)
                                panelSentTo.IsPanelOnline = c.IsConnected;
                        }
                    }
                    response.PanelsSentTo.Add(panelSentTo);


                    parameters.Data.OutputDeviceHardwareInformation = od;
                    if (parameters.OperationUid == Guid.Empty)
                        parameters.OperationUid = GuidUtilities.GenerateComb();

                    var sendParameters = new SendDataParameters<OutputDeviceCommandAction>()
                    {
                        PopulateDataFromDatabase = false,
                        ApplicationUserSessionHeader = this.ApplicationUserSessionHeader,
                        Data = parameters.Data,
                        OperationUid = parameters.OperationUid,
                        NotifySignalRSession = parameters.NotifySignalRSession,
                        SendToAddress = new BoardSectionNodeHardwareAddress()
                        {
                            ClusterGroupId = od.ClusterGroupId,
                            ClusterNumber = od.ClusterNumber,
                            PanelNumber = od.PanelNumber,
                            CpuId = 3,
                            BoardNumber = od.BoardNumber,
                            SectionNumber = od.SectionNumber,
                            ModuleNumber = od.ModuleNumber,
                            NodeNumber = od.NodeNumber
                        }
                    };

                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendOutputDeviceCommandToHardware, sendParameters));

                    return response;
                }
                return response;
            });
        }
        public ArrayResponse<ActivityHistoryEvent> GetOutputDeviceActivityHistoryEvents(
            ActivityHistoryEventSearchParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.OutputDeviceCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
                var data = repository.GetActivityHistoryEvents(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<ActivityHistoryEvent>)data;
            });
        }


        #endregion

        #region Time Schedule Operations

        public ArrayResponse<TimeSchedule> GetAllTimeSchedules(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
                var data = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<TimeSchedule>)data;
            });
        }

        public ArrayResponse<TimeScheduleListItem> GetAllTimeSchedulesList(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
           {
               ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
               var repository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
               var data = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);

               var ri = new List<TimeScheduleListItem>();
               foreach (var s in data.Items)
               {
                   ri.Add(s.ToListItem());
               }
               return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
           });

        }

        public ArrayResponse<TimeScheduleListItem> GetAllTimeSchedulesForEntityList(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
           {
               ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);

               if (parameters.UniqueId != Guid.Empty && parameters.UniqueId != EntityIds.GalaxySMS_SystemEntity_Id)
                   ValidateUserHasEntityAccess(parameters.UniqueId, true);

               var repository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
               var data = repository.GetAllTimeSchedulesForEntity(ApplicationUserSessionHeader, parameters);
               var ri = new List<TimeScheduleListItem>();
               foreach (var s in data.Items)
               {
                   ri.Add(s.ToListItem());
               }
               return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
           });

        }

        public ArrayResponse<TimeSchedule> GetAllTimeSchedulesForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);

                if (parameters.UniqueId != Guid.Empty && parameters.UniqueId != EntityIds.GalaxySMS_SystemEntity_Id)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
                var data = repository.GetAllTimeSchedulesForEntity(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<TimeSchedule>)data;
            });
        }

        public ArrayResponse<TimeSchedule> GetAllTimeSchedulesForMappedEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
                var data = repository.GetAllTimeSchedulesForMappedEntity(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<TimeSchedule>)data;
            });
        }

        public ArrayResponse<TimeSchedule> GetAllTimeSchedulesForCluster(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfCluster(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
                var data = repository.GetAllTimeSchedulesForGalaxyCluster(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<TimeSchedule>)data;
            });
        }


        public ArrayResponse<TimeScheduleListItem> GetAllTimeSchedulesForClusterList(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfCluster(parameters, true);
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);

                var repository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
                var data = repository.GetAllTimeSchedulesForGalaxyCluster(ApplicationUserSessionHeader, parameters);
                var ri = new List<TimeScheduleListItem>();
                foreach (var s in data.Items)
                {
                    ri.Add(s.ToListItem());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });

        }

        public ArrayResponse<TimeSchedule> GetAllTimeSchedulesForAssaAbloyDsr(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
                var data = repository.GetAllTimeSchedulesForAssaAbloyDsr(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<TimeSchedule>)data;
            });
        }

        public ArrayResponse<TimeScheduleClusterItem> GetTimeScheduleClusterItems(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
                var data = repository.GetTimeScheduleClusterItems(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<TimeScheduleClusterItem>)data;
            });
        }

        public TimeSchedule GetTimeSchedule(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(TimeSchedule), nameof(TimeSchedule.TimeScheduleUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("TimeSchedule with TimeScheduleUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public TimeSchedule SaveTimeSchedule(SaveParameters<TimeSchedule> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //if (parameters.Data.EntityId == Guid.Empty)
                //    parameters.Data.EntityId = ApplicationUserSessionHeader.CurrentEntityId;

                //parameters.CurrentEntityId = parameters.Data.EntityId;

                //ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();

                var exists = VerifyEntityIdMatches(repository, parameters.Data.TimeScheduleUid, parameters.Data, true, nameof(TimeSchedule.EntityId));
                parameters.CurrentEntityId = parameters.Data.EntityId;

                if (exists)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanUpdateId);
                else
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanAddId);

                TimeSchedule updatedEntity = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format("TimeSchedule with Name of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.Display));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.TimeScheduleUid == Guid.Empty)
                {
                    parameters.Data.TimeScheduleUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }

                if (repository.DoesExist(parameters.Data.TimeScheduleUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    this.Log().Info($"Adding Time Schedule - {parameters.Data.Display}.");
                    updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);

                    var autoMapTimeSchedules = repository.GetAutoMapTimeSchedulesForEntity(updatedEntity.EntityId);
                    if (autoMapTimeSchedules)
                    {
                        // Now automatically map to every cluster that has room for it
                        var clusterRepo = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();
                        var clusterTimeScheduleMapRepo = _DataRepositoryFactory
                            .GetDataRepository<IGalaxyClusterTimeScheduleMapRepository>();
                        var clusters = clusterRepo.GetAllClustersForEntity(ApplicationUserSessionHeader,
                            new GetParametersWithPhoto()
                            {
                                UniqueId = parameters.Data.EntityId
                            });

                        foreach (var c in clusters)
                        {
                            var panelTimeScheduleNumber =
                                clusterTimeScheduleMapRepo.GetLowestAvailablePanelTimeScheduleNumber(c.ClusterUid);
                            if (panelTimeScheduleNumber > TimeScheduleLimits.Never &&
                                panelTimeScheduleNumber < TimeScheduleLimits.Always)
                            {
                                var clusterTimeScheduleMap = new GalaxyClusterTimeScheduleMap()
                                {
                                    GalaxyClusterTimeScheduleMapUid = GuidUtilities.GenerateComb(),
                                    ClusterUid = c.ClusterUid,
                                    TimeScheduleUid = updatedEntity.TimeScheduleUid,
                                    PanelScheduleNumber = panelTimeScheduleNumber,
                                    InsertDate = DateTimeOffset.Now,
                                    InsertName = ApplicationUserSessionHeader.UserName,
                                    UpdateDate = DateTimeOffset.Now,
                                    UpdateName = ApplicationUserSessionHeader.UserName,
                                    ConcurrencyValue = 0
                                };

                                var savedItem = clusterTimeScheduleMapRepo.Add(clusterTimeScheduleMap, ApplicationUserSessionHeader, parameters);

                            }
                        }
                    }

                    updatedEntity = repository.Get(updatedEntity.TimeScheduleUid, ApplicationUserSessionHeader, new GetParametersWithPhoto(parameters)
                    {
                        IncludeMemberCollections = true
                    });
                }
                else
                {
                    parameters.IncludeMemberCollections = true;
                    updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }


                //if (parameters.Data.IsPanelDataDirty)
                //{
                // Now send to the panels
                var sendParameters = new SendDataParameters<TimeSchedule_PanelLoadData>()
                { PopulateDataFromDatabase = true, ApplicationUserSessionHeader = this.ApplicationUserSessionHeader };
                sendParameters.Data.TimeScheduleUid = updatedEntity.TimeScheduleUid;
                Globals.Instance.MessageBroker.SendMessage(
                    new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendTimeScheduleToHardware, sendParameters));
                //}

                return updatedEntity;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteTimeScheduleByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(TimeSchedule), nameof(TimeSchedule.TimeScheduleUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteTimeSchedule(DeleteParameters<TimeSchedule> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.TimeScheduleUid, true, nameof(TimeSchedule), nameof(TimeSchedule.TimeScheduleUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsTimeScheduleReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsTimeScheduleUnique(TimeSchedule data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        public bool IsTimeScheduleActive(Guid timeScheduleUid, GalaxySMS.Common.Enums.TimeScheduleType scheduleType,
            Guid clusterUid, DateTimeOffset dateTime)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                if (timeScheduleUid == GalaxySMS.Common.Constants.TimeScheduleIds.TimeSchedule_Never)
                    return false;
                if (timeScheduleUid == GalaxySMS.Common.Constants.TimeScheduleIds.TimeSchedule_Always)
                    return true;

                var repository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();

                bReturn = repository.IsTimeScheduleActive(timeScheduleUid, scheduleType, clusterUid, dateTime);
                return bReturn;
            });
        }

        public GalaxyClusterTimeScheduleMap SetTimeScheduleToClusterMapping(Guid timeScheduleUid, Guid clusterUid,
            bool isMapped, bool fifteenMinuteFormatUsesHolidays)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                GalaxyClusterTimeScheduleMap bReturn = null;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyClusterTimeScheduleMapRepository>();
                var existingItem = repository.GetByClusterUidAndTimeScheduleUid(ApplicationUserSessionHeader, clusterUid, timeScheduleUid);

                if (timeScheduleUid == GalaxySMS.Common.Constants.TimeScheduleIds.TimeSchedule_Never ||
                    timeScheduleUid == GalaxySMS.Common.Constants.TimeScheduleIds.TimeSchedule_Always)
                    return existingItem;

                if (existingItem == null && isMapped == true)
                {
                    var panelTimeScheduleNumber = repository.GetLowestAvailablePanelTimeScheduleNumber(clusterUid);
                    if (panelTimeScheduleNumber > TimeScheduleLimits.Never &&
                        panelTimeScheduleNumber < TimeScheduleLimits.Always)
                    {
                        existingItem = new GalaxyClusterTimeScheduleMap()
                        {
                            GalaxyClusterTimeScheduleMapUid = GuidUtilities.GenerateComb(),
                            TimeScheduleUid = timeScheduleUid,
                            ClusterUid = clusterUid,
                            PanelScheduleNumber = panelTimeScheduleNumber,
                            FifteenMinuteFormatUsesHolidays = fifteenMinuteFormatUsesHolidays,
                            InsertName = LoginName,
                            InsertDate = DateTimeOffset.Now,
                            UpdateName = LoginName,
                            UpdateDate = DateTimeOffset.Now,
                            ConcurrencyValue = 0
                        };
                        var updatedItem = repository.Add(existingItem, ApplicationUserSessionHeader, null);
                        return updatedItem;
                    }
                }
                else if (existingItem != null && isMapped)
                    return existingItem;
                else if (existingItem != null && isMapped == false)
                {
                    var cnt = repository.Remove(existingItem.GalaxyClusterTimeScheduleMapUid, ApplicationUserSessionHeader);
                }
                existingItem = repository.GetByClusterUidAndTimeScheduleUid(ApplicationUserSessionHeader, clusterUid, timeScheduleUid);
                return existingItem;
            });
        }

        public bool CanTimeScheduleBeUnmappedFromCluster(Guid timeScheduleUid, Guid clusterUid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var bReturn = false;
                if (timeScheduleUid == GalaxySMS.Common.Constants.TimeScheduleIds.TimeSchedule_Never ||
                    timeScheduleUid == GalaxySMS.Common.Constants.TimeScheduleIds.TimeSchedule_Always)
                    return bReturn;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyClusterTimeScheduleMapRepository>();
                bReturn = repository.CanTimeScheduleBeUnmappedFromCluster(timeScheduleUid, clusterUid);
                return bReturn;
            });
        }

        public bool CanTimeScheduleBeDeleted(Guid timeScheduleUid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var bReturn = false;
                if (timeScheduleUid == GalaxySMS.Common.Constants.TimeScheduleIds.TimeSchedule_Never ||
                    timeScheduleUid == GalaxySMS.Common.Constants.TimeScheduleIds.TimeSchedule_Always)
                    return bReturn;
                var repository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
                bReturn = repository.CanTimeScheduleBeDeleted(timeScheduleUid);
                return bReturn;
            });
        }

        public TimeScheduleUsageData GetTimeScheduleUsageInformation(Guid timeScheduleUid, Guid clusterUid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var returnData = new TimeScheduleUsageData();
                if (timeScheduleUid == GalaxySMS.Common.Constants.TimeScheduleIds.TimeSchedule_Never ||
                    timeScheduleUid == GalaxySMS.Common.Constants.TimeScheduleIds.TimeSchedule_Always)
                    return returnData;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyClusterTimeScheduleMapRepository>();
                returnData = repository.GetTimeScheduleUsageData(timeScheduleUid, clusterUid);
                return returnData;
            });
        }

        #endregion

        #region Time Period Operations

        public TimePeriod[] GetAllTimePeriods(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ITimePeriodRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }
        public ListItemBase[] GetAllTimePeriodsList(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
           {
               ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
               var repository = _DataRepositoryFactory.GetDataRepository<ITimePeriodRepository>();
               IEnumerable<TimePeriod> timePeriods = repository.GetAll(ApplicationUserSessionHeader, parameters);

               var ri = new List<ListItemBase>();
               foreach (var s in timePeriods)
               {
                   ri.Add(s.ToListItemBase());
               }
               return ri.ToArray();
           });

        }

        public ListItemBase[] GetAllTimePeriodsForEntityList(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
           {
               ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);

               if (parameters.UniqueId != Guid.Empty)
                   ValidateUserHasEntityAccess(parameters.UniqueId, true);

               var repository = _DataRepositoryFactory.GetDataRepository<ITimePeriodRepository>();
               IEnumerable<TimePeriod> timePeriods = repository.GetAllTimePeriodsForEntity(ApplicationUserSessionHeader, parameters);
               var ri = new List<ListItemBase>();
               foreach (var s in timePeriods)
               {
                   ri.Add(s.ToListItemBase());
               }
               return ri.ToArray();
           });

        }

        public TimePeriod[] GetAllTimePeriodsForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);

                if (parameters.UniqueId != Guid.Empty)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<ITimePeriodRepository>();
                var data = repository.GetAllTimePeriodsForEntity(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public TimePeriod GetTimePeriod(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ITimePeriodRepository>();
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(string.Format("TimePeriod with TimePeriodUid of {0} is not in database",
                            parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        public TimePeriod FindTimePeriodByTimes(GetParameters<TimePeriod> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ITimePeriodRepository>();
                var data = repository.FindMatchingTimePeriodByTimes(ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(string.Format("TimePeriod with Times of {0} - {1} is not in database",
                            parameters.Data.StartTime, parameters.Data.EndTime));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public TimePeriod SaveTimePeriod(SaveParameters<TimePeriod> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //if (parameters.Data.EntityId == Guid.Empty)
                //    parameters.Data.EntityId = ApplicationUserSessionHeader.CurrentEntityId;

                //parameters.CurrentEntityId = parameters.Data.EntityId;

                //ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<ITimePeriodRepository>();
                var exists = VerifyEntityIdMatches(repository, parameters.Data.TimePeriodUid, parameters.Data, true, nameof(TimePeriod.EntityId));
                parameters.CurrentEntityId = parameters.Data.EntityId;

                if (exists)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanUpdateId);
                else
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanAddId);

                TimePeriod updatedEntity = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format("TimePeriod with Name of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.Name));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.TimePeriodUid == Guid.Empty)
                {
                    parameters.Data.TimePeriodUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.TimePeriodUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    this.Log().Info($"Adding Time Period - {parameters.Data.Name}.");
                    updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedEntity;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteTimePeriodByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<ITimePeriodRepository>();

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteTimePeriod(DeleteParameters<TimePeriod> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<ITimePeriodRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsTimePeriodReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<ITimePeriodRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsTimePeriodUnique(TimePeriod data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<ITimePeriodRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Galaxy Time Period Operations
        public ArrayResponse<GalaxyTimePeriod> GetAllGalaxyTimePeriods(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyTimePeriodRepository>();
                var data = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<GalaxyTimePeriod>)data;
            });
        }
        public ArrayResponse<GalaxyTimePeriodListItem> GetAllGalaxyTimePeriodsList(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyTimePeriodRepository>();
                var data = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);

                var ri = new List<GalaxyTimePeriodListItem>();
                foreach (var s in data.Items)
                {
                    ri.Add(s.ToListItem());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }
        public ArrayResponse<GalaxyTimePeriod> GetAllGalaxyTimePeriodsForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);

                if (parameters.UniqueId != Guid.Empty && parameters.UniqueId != EntityIds.GalaxySMS_SystemEntity_Id)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyTimePeriodRepository>();
                var data = repository.GetAllGalaxyTimePeriodsForEntity(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<GalaxyTimePeriod>)data;
            });
        }
        public ArrayResponse<GalaxyTimePeriodListItem> GetAllGalaxyTimePeriodsListForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);

                if (parameters.UniqueId != Guid.Empty && parameters.UniqueId != EntityIds.GalaxySMS_SystemEntity_Id)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyTimePeriodRepository>();
                var data = repository.GetAllGalaxyTimePeriodsForEntity(ApplicationUserSessionHeader, parameters);

                var ri = new List<GalaxyTimePeriodListItem>();
                foreach (var s in data.Items)
                {
                    ri.Add(s.ToListItem());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }

        public GalaxyTimePeriod GetGalaxyTimePeriod(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyTimePeriodRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(GalaxyTimePeriod), nameof(GalaxyTimePeriod.GalaxyTimePeriodUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("GalaxyTimePeriod with GalaxyTimePeriodUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public GalaxyTimePeriod SaveGalaxyTimePeriod(SaveParameters<GalaxyTimePeriod> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.Data.EntityId == Guid.Empty)
                    parameters.Data.EntityId = ApplicationUserSessionHeader.CurrentEntityId;

                parameters.CurrentEntityId = parameters.Data.EntityId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyTimePeriodRepository>();

                GalaxyTimePeriod updatedEntity = null;

                if (parameters.Data.PanelTimePeriodNumber == 0 && parameters.Data.EntityId != GalaxySMS.Common.Constants.EntityIds.GalaxySMS_SystemEntity_Id)
                    parameters.Data.PanelTimePeriodNumber = repository.GetAvailablePanelTimePeriodNumber(ApplicationUserSessionHeader, new GetParametersWithPhoto() { });

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format("GalaxyTimePeriod with Name of '{0}' cannot be saved because it is a duplicate Display of PanelTimePeriodNumber value.",
                                parameters.Data.Display));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.GalaxyTimePeriodUid == Guid.Empty)
                {
                    parameters.Data.GalaxyTimePeriodUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.GalaxyTimePeriodUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    this.Log().Info($"Adding Galaxy Time Period - {parameters.Data.Display}.");
                    updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }


                //if (parameters.Data.IsPanelDataDirty)
                //{
                //Now send to the panels
                var sendParameters = new SendDataParameters<GalaxyTimePeriod_PanelLoadData>()
                { PopulateDataFromDatabase = true, ApplicationUserSessionHeader = this.ApplicationUserSessionHeader };
                sendParameters.Data.GalaxyTimePeriodUid = updatedEntity.GalaxyTimePeriodUid;
                Globals.Instance.MessageBroker.SendMessage(
                    new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendGalaxyTimePeriodToHardware, sendParameters));
                //}

                return updatedEntity;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyTimePeriodByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyTimePeriodRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(GalaxyTimePeriod), nameof(GalaxyTimePeriod.GalaxyTimePeriodUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyTimePeriod(DeleteParameters<GalaxyTimePeriod> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyTimePeriodRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.GalaxyTimePeriodUid, true, nameof(GalaxyTimePeriod), nameof(GalaxyTimePeriod.GalaxyTimePeriodUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsGalaxyTimePeriodReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyTimePeriodRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsGalaxyTimePeriodUnique(GalaxyTimePeriod data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyTimePeriodRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Day Type Operations

        public ArrayResponse<DayType> GetAllDayTypes(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IDayTypeRepository>();
                var data = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<DayType>)data;
            });
        }

        public ArrayResponse<DayTypeListItem> GetAllDayTypesList(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IDayTypeRepository>();
                var data = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);

                var ri = new List<DayTypeListItem>();
                foreach (var o in data.Items)
                {
                    ri.Add(o.ToDayTypeListItem());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }

        public ArrayResponse<DayType> GetAllDayTypesForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (!parameters.DoNotValidateAuthorization)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);

                if (parameters.UniqueId != Guid.Empty && parameters.UniqueId != EntityIds.GalaxySMS_SystemEntity_Id)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IDayTypeRepository>();
                var data = repository.GetAllDayTypesForEntity(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<DayType>)data;
            });
        }

        public ArrayResponse<DayTypeListItem> GetAllDayTypesListForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);

                if (parameters.UniqueId != Guid.Empty && parameters.UniqueId != EntityIds.GalaxySMS_SystemEntity_Id)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IDayTypeRepository>();
                var data = repository.GetAllDayTypesForEntity(ApplicationUserSessionHeader, parameters);

                var ri = new List<DayTypeListItem>();
                foreach (var o in data.Items)
                {
                    ri.Add(o.ToDayTypeListItem());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });

        }

        public ArrayResponse<DayType> GetAllDayTypesForMappedEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IDayTypeRepository>();
                var data = repository.GetAllDayTypesForMappedEntity(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<DayType>)data;
            });
        }

        public ArrayResponse<DayTypeListItem> GetAllDayTypesListForMappedEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IDayTypeRepository>();
                var data = repository.GetAllDayTypesForMappedEntity(ApplicationUserSessionHeader, parameters);

                var ri = new List<DayTypeListItem>();
                foreach (var o in data.Items)
                {
                    ri.Add(o.ToDayTypeListItem());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });

        }

        public ArrayResponse<DayType> GetAllDayTypesForCluster(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfCluster(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IDayTypeRepository>();
                var data = repository.GetAllDayTypesForGalaxyCluster(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<DayType>)data;
            });
        }
        public ArrayResponse<DayTypeListItem> GetAllDayTypesListForCluster(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfCluster(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IDayTypeRepository>();
                var data = repository.GetAllDayTypesForGalaxyCluster(ApplicationUserSessionHeader, parameters);

                var ri = new List<DayTypeListItem>();
                foreach (var o in data.Items)
                {
                    ri.Add(o.ToDayTypeListItem());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });

        }

        public ArrayResponse<DayType> GetAllDayTypesForAssaAbloyDsr(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IDayTypeRepository>();
                var data = repository.GetAllDayTypesForAssaAbloyDsr(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<DayType>)data;
            });
        }

        public ArrayResponse<DayTypeListItem> GetAllDayTypesListForAssaAbloyDsr(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IDayTypeRepository>();
                var data = repository.GetAllDayTypesForAssaAbloyDsr(ApplicationUserSessionHeader, parameters);

                var ri = new List<DayTypeListItem>();
                foreach (var o in data.Items)
                {
                    ri.Add(o.ToDayTypeListItem());
                }

                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }


        public DayType GetDayType(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IDayTypeRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(DayType), nameof(DayType.DayTypeUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("DayType with DayTypeUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        public DayTypeDateValidationError[] ValidateDatesForDayType(DayType data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var results = new List<DayTypeDateValidationError>();
                var repository = _DataRepositoryFactory.GetDataRepository<IDateTypeRepository>();
                int x = 0;
                foreach (var d in data.Dates)
                {
                    var dtInfo = repository.GetDateDayTypeInfo(data.EntityId, d.Date);
                    if (dtInfo != null && dtInfo.DayTypeUid != data.DayTypeUid)
                    {
                        results.Add(new DayTypeDateValidationError()
                        {
                            Index = x,
                            Date = d.Date,
                            DayTypeUid = dtInfo.DayTypeUid,
                            DayTypeName = dtInfo.Name
                        });
                    }

                    x++;
                }

                return results.ToArray();
            });
        }


        [OperationBehavior(TransactionScopeRequired = true)]
        public DayType SaveDayType(SaveParameters<DayType> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IDayTypeRepository>();

                var exists = VerifyEntityIdMatches(repository, parameters.Data.DayTypeUid, parameters.Data, true, nameof(DayType.EntityId));
                parameters.CurrentEntityId = parameters.Data.EntityId;

                if (exists)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanUpdateId);
                else
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanAddId);

                DayType updatedEntity = null;
                if (parameters.Data.DayTypeUid == Guid.Empty)
                {
                    DayType existingDayType = null;
                    if (parameters.Data.DayTypeCode == DayTypeCode.DayType0)
                    {
                        var opt = parameters.OptionValue(
                            SaveDayTypeOption.SelectIsActiveFalseDayTypeForReuse.ToString());
                        if (!string.IsNullOrEmpty(opt))
                        {
                            existingDayType = repository.GetLowestInActiveByEntityId(parameters.Data.EntityId, true);
                            if (existingDayType == null)
                            {
                                var ex = new ApplicationException(
                                    "All DayTypes are used. New DayType cannot be created");
                                var detail = new ExceptionDetailEx(ex);
                                throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                            }

                            parameters.Data.DayTypeUid = existingDayType.DayTypeUid;
                            parameters.Data.DayTypeCode = existingDayType.DayTypeCode;
                            parameters.Data.IsActive = true;
                            // Pretend it is a newly inserted record by updating InsertName and InsertDate

                            parameters.Data.InsertName = LoginName;
                            parameters.Data.InsertDate = DateTimeOffset.Now;
                            parameters.Data.ConcurrencyValue = existingDayType.ConcurrencyValue;

                        }
                    }

                    if (existingDayType == null)
                    {
                        existingDayType = repository.GetByEntityIdAndDayTypeCode(parameters.Data.EntityId,
                            parameters.Data.DayTypeCode, false);
                        if (existingDayType != null)
                        {
                            parameters.Data.DayTypeUid = existingDayType.DayTypeUid;
                            parameters.Data.ConcurrencyValue = existingDayType.ConcurrencyValue;
                        }
                        else
                            parameters.Data.DayTypeUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                    }
                }

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format("DayType with Name of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.Name));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                /*                if (parameters.Data.DayTypeUid == Guid.Empty)
                                {
                                    var existingDayType = repository.GetByEntityIdAndDayTypeCode(parameters.Data.EntityId,
                                        parameters.Data.DayTypeCode, false);
                                    if (existingDayType != null)
                                    {
                                        parameters.Data.DayTypeUid = existingDayType.DayTypeUid;
                                        parameters.Data.ConcurrencyValue = existingDayType.ConcurrencyValue;
                                    }
                                    else
                                        parameters.Data.DayTypeUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                                }
                */
                if (repository.DoesExist(parameters.Data.DayTypeUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    this.Log().Info($"Adding Day Type - {parameters.Data.Name}, EntityId:{parameters.Data.EntityId}.");
                    updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedEntity;
            });
        }


        [OperationBehavior(TransactionScopeRequired = true)]
        public ArrayResponse<DayType> EnsureDefaultDayTypesExistForEntity(SaveParameters<DayType> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.CurrentEntityId == Guid.Empty)
                    parameters.CurrentEntityId = ApplicationUserSessionHeader.CurrentEntityId;
                if (!parameters.DoNotValidateAuthorization)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanAddId);

                var existingDayTypes = GetAllDayTypesForEntity(new GetParametersWithPhoto(parameters));
                var dayTypes = new List<DayType>();

                DayType dayType = null;
                DayType existingDayType = existingDayTypes.Items.FirstOrDefault(i => i.DayTypeCode == (GalaxySMS.Common.Enums.DayTypeCode.Sunday) || i.Name == SharedResources.Resources.DayType_Name_Sunday);
                if (existingDayType == null)
                {
                    dayType = new DayType()
                    {
                        Name = SharedResources.Resources.DayType_Name_Sunday,
                        EntityId = parameters.CurrentEntityId,//ApplicationUserSessionHeader.CurrentEntityId,
                        DayTypeCode = DayTypeCode.Sunday,
                        IsActive = true
                    };
                    dayTypes.Add(dayType);
                }

                existingDayType = existingDayTypes.Items.FirstOrDefault(i => i.DayTypeCode == (GalaxySMS.Common.Enums.DayTypeCode.Monday) || i.Name == SharedResources.Resources.DayType_Name_Monday);
                if (existingDayType == null)
                {
                    dayType = new DayType()
                    {
                        Name = SharedResources.Resources.DayType_Name_Monday,
                        EntityId = parameters.CurrentEntityId,//ApplicationUserSessionHeader.CurrentEntityId,
                        DayTypeCode = GalaxySMS.Common.Enums.DayTypeCode.Monday,
                        IsActive = true
                    };
                    dayTypes.Add(dayType);
                }


                existingDayType = existingDayTypes.Items.FirstOrDefault(i => i.DayTypeCode == (GalaxySMS.Common.Enums.DayTypeCode.Tuesday) || i.Name == SharedResources.Resources.DayType_Name_Tuesday);
                if (existingDayType == null)
                {
                    dayType = new DayType()
                    {
                        Name = SharedResources.Resources.DayType_Name_Tuesday,
                        EntityId = parameters.CurrentEntityId,//ApplicationUserSessionHeader.CurrentEntityId,
                        DayTypeCode = GalaxySMS.Common.Enums.DayTypeCode.Tuesday,
                        IsActive = true
                    };
                    dayTypes.Add(dayType);

                }

                existingDayType = existingDayTypes.Items.FirstOrDefault(i => i.DayTypeCode == (GalaxySMS.Common.Enums.DayTypeCode.Wednesday) || i.Name == SharedResources.Resources.DayType_Name_Wednesday);
                if (existingDayType == null)
                {
                    dayType = new DayType()
                    {
                        Name = SharedResources.Resources.DayType_Name_Wednesday,
                        EntityId = parameters.CurrentEntityId,//ApplicationUserSessionHeader.CurrentEntityId,
                        DayTypeCode = GalaxySMS.Common.Enums.DayTypeCode.Wednesday,
                        IsActive = true
                    };
                    dayTypes.Add(dayType);

                }

                existingDayType = existingDayTypes.Items.FirstOrDefault(i => i.DayTypeCode == (GalaxySMS.Common.Enums.DayTypeCode.Thursday) || i.Name == SharedResources.Resources.DayType_Name_Thursday);
                if (existingDayType == null)
                {
                    dayType = new DayType()
                    {
                        Name = SharedResources.Resources.DayType_Name_Thursday,
                        EntityId = parameters.CurrentEntityId,//ApplicationUserSessionHeader.CurrentEntityId,
                        DayTypeCode = GalaxySMS.Common.Enums.DayTypeCode.Thursday,
                        IsActive = true
                    };
                    dayTypes.Add(dayType);

                }

                existingDayType = existingDayTypes.Items.FirstOrDefault(i => i.DayTypeCode == (GalaxySMS.Common.Enums.DayTypeCode.Friday) || i.Name == SharedResources.Resources.DayType_Name_Friday);
                if (existingDayType == null)
                {
                    dayType = new DayType()
                    {
                        Name = SharedResources.Resources.DayType_Name_Friday,
                        EntityId = parameters.CurrentEntityId,//ApplicationUserSessionHeader.CurrentEntityId,
                        DayTypeCode = GalaxySMS.Common.Enums.DayTypeCode.Friday,
                        IsActive = true
                    };
                    dayTypes.Add(dayType);

                }

                existingDayType = existingDayTypes.Items.FirstOrDefault(i => i.DayTypeCode == (GalaxySMS.Common.Enums.DayTypeCode.Saturday) || i.Name == SharedResources.Resources.DayType_Name_Saturday);
                if (existingDayType == null)
                {
                    dayType = new DayType()
                    {
                        Name = SharedResources.Resources.DayType_Name_Saturday,
                        EntityId = parameters.CurrentEntityId,//ApplicationUserSessionHeader.CurrentEntityId,
                        DayTypeCode = GalaxySMS.Common.Enums.DayTypeCode.Saturday,
                        IsActive = true
                    };
                    dayTypes.Add(dayType);

                }

                existingDayType = existingDayTypes.Items.FirstOrDefault(i => i.DayTypeCode == (GalaxySMS.Common.Enums.DayTypeCode.Weekday) || i.Name == SharedResources.Resources.DayType_Name_Weekday);
                if (existingDayType == null)
                {
                    dayType = new DayType()
                    {
                        Name = SharedResources.Resources.DayType_Name_Weekday,
                        EntityId = parameters.CurrentEntityId,//ApplicationUserSessionHeader.CurrentEntityId,
                        DayTypeCode = GalaxySMS.Common.Enums.DayTypeCode.Weekday,
                        IsActive = true
                    };
                    dayTypes.Add(dayType);

                }

                existingDayType = existingDayTypes.Items.FirstOrDefault(i => i.DayTypeCode == (GalaxySMS.Common.Enums.DayTypeCode.Weekend) || i.Name == SharedResources.Resources.DayType_Name_Weekend);
                if (existingDayType == null)
                {
                    dayType = new DayType()
                    {
                        Name = SharedResources.Resources.DayType_Name_Weekend,
                        EntityId = parameters.CurrentEntityId,//ApplicationUserSessionHeader.CurrentEntityId,
                        DayTypeCode = GalaxySMS.Common.Enums.DayTypeCode.Weekend,
                        IsActive = true
                    };
                    dayTypes.Add(dayType);

                }

                for (var x = DayTypeCode.DayType0; x <= DayTypeCode.DayType90; x++)
                {
                    var s = string.Format(SharedResources.Resources.DayType_Name_x, (int)x);
                    existingDayType = existingDayTypes.Items.FirstOrDefault(i => i.DayTypeCode == x || i.Name == s);
                    if (existingDayType == null)
                    {
                        dayType = new DayType()
                        {
                            Name = s,
                            EntityId = parameters.CurrentEntityId,//ApplicationUserSessionHeader.CurrentEntityId,
                            DayTypeCode = x
                        };
                        dayTypes.Add(dayType);
                    }
                }

                var repository = _DataRepositoryFactory.GetDataRepository<IDayTypeRepository>();

                foreach (var dt in dayTypes)
                {
                    var p = new SaveParameters<DayType>(dt, parameters)
                    {
                        DoNotValidateAuthorization = parameters.DoNotValidateAuthorization
                    };

                    SaveDayType(p);
                }

                var getParamsForEntity = new GetParametersWithPhoto(parameters);

                var dayTypesForEntity = GetAllDayTypesForEntity(getParamsForEntity);

                var dateTypeDefaultBehavior = GetDateTypeDefaultBehaviorForEntity(getParamsForEntity);

                if (dateTypeDefaultBehavior == null)
                {
                    dateTypeDefaultBehavior = new DateTypeDefaultBehavior();
                    var firstOrDefault = dayTypesForEntity.Items.FirstOrDefault(d => d.DayTypeCode == DayTypeCode.Sunday);
                    if (firstOrDefault != null)
                        dateTypeDefaultBehavior.SundayDayTypeUid = firstOrDefault.DayTypeUid;

                    firstOrDefault = dayTypesForEntity.Items.FirstOrDefault(d => d.DayTypeCode == DayTypeCode.Monday);
                    if (firstOrDefault != null)
                        dateTypeDefaultBehavior.MondayDayTypeUid = firstOrDefault.DayTypeUid;

                    firstOrDefault = dayTypesForEntity.Items.FirstOrDefault(d => d.DayTypeCode == DayTypeCode.Tuesday);
                    if (firstOrDefault != null)
                        dateTypeDefaultBehavior.TuesdayDayTypeUid = firstOrDefault.DayTypeUid;

                    firstOrDefault = dayTypesForEntity.Items.FirstOrDefault(d => d.DayTypeCode == DayTypeCode.Wednesday);
                    if (firstOrDefault != null)
                        dateTypeDefaultBehavior.WednesdayDayTypeUid = firstOrDefault.DayTypeUid;

                    firstOrDefault = dayTypesForEntity.Items.FirstOrDefault(d => d.DayTypeCode == DayTypeCode.Thursday);
                    if (firstOrDefault != null)
                        dateTypeDefaultBehavior.ThursdayDayTypeUid = firstOrDefault.DayTypeUid;

                    firstOrDefault = dayTypesForEntity.Items.FirstOrDefault(d => d.DayTypeCode == DayTypeCode.Friday);
                    if (firstOrDefault != null)
                        dateTypeDefaultBehavior.FridayDayTypeUid = firstOrDefault.DayTypeUid;

                    firstOrDefault = dayTypesForEntity.Items.FirstOrDefault(d => d.DayTypeCode == DayTypeCode.Saturday);
                    if (firstOrDefault != null)
                        dateTypeDefaultBehavior.SaturdayDayTypeUid = firstOrDefault.DayTypeUid;

                    dateTypeDefaultBehavior.EntityId = parameters.CurrentEntityId;

                    var savedDateTypeDefaultBehavior = SaveDateTypeDefaultBehavior(new SaveParameters<DateTypeDefaultBehavior>(dateTypeDefaultBehavior) { DoNotValidateAuthorization = parameters.DoNotValidateAuthorization });
                }
                return dayTypesForEntity;
            });

        }


        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteDayTypeByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IDayTypeRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(DayType), nameof(DayType.DayTypeUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteDayType(DeleteParameters<DayType> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IDayTypeRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.DayTypeUid, true, nameof(DayType), nameof(DayType.DayTypeUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsDayTypeReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IDayTypeRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsDayTypeUnique(DayType data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IDayTypeRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Date Type Operations

        public ArrayResponse<DateType> GetAllDateTypes(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IDateTypeRepository>();
                var data = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<DateType>)data;
            });
        }

        public ArrayResponse<DateType> GetAllDateTypesForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);

                if (parameters.UniqueId != Guid.Empty && parameters.UniqueId != EntityIds.GalaxySMS_SystemEntity_Id)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IDateTypeRepository>();
                var data = repository.GetAllDateTypesForEntity(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<DateType>)data;
            });
        }

        public ArrayResponse<DateType> GetAllDateTypesForMappedEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IDateTypeRepository>();
                var data = repository.GetAllDateTypesForMappedEntity(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<DateType>)data;
            });
        }


        public ArrayResponse<DateType> GetAllDateTypesForDayType(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IDateTypeRepository>();
                var data = repository.GetAllDateTypesForDayType(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<DateType>)data;
            });
        }

        public DateType GetDateType(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IDateTypeRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(DateType), nameof(DateType.DateTypeUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("DateType with DateTypeUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public DateType SaveDateType(SaveParameters<DateType> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.Data.DayTypeUid == Guid.Empty)
                    throw new DataValidationException($"The {nameof(DateType.DayTypeUid)} is missing.");

                var repository = _DataRepositoryFactory.GetDataRepository<IDateTypeRepository>();
                var exists = false;
                if (parameters.Data.DateTypeUid != Guid.Empty)
                {
                    var existingItem = repository.Get(parameters.Data.DateTypeUid, ApplicationUserSessionHeader,
                        new GetParametersWithPhoto());
                    if (existingItem != null)
                    {
                        exists = true;
                        if (parameters.Data.EntityId != Guid.Empty &&
                            parameters.Data.EntityId != existingItem.EntityId)
                            throw new DataValidationException($"The {nameof(DateType.EntityId)} cannot be changed.");
                    }
                }

                parameters.CurrentEntityId = GetEntityIdOfDayType(parameters.Data.DayTypeUid, true);
                if (exists)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanUpdateId);
                else
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanAddId);

                parameters.Data.EntityId = parameters.CurrentEntityId;

                DateType updatedEntity = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format("DateType with Date of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.Date));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                if (parameters.Data.DayTypeUid == Guid.Empty)
                {   // if there is no day type, then delete the record
                    if (parameters.Data.DateTypeUid != Guid.Empty)
                    {
                        var deleteParameters = new DeleteParameters<DateType>(parameters);
                        var i = DeleteDateType(deleteParameters);
                    }
                }
                else
                {
                    parameters.Data.UpdateDate = DateTimeOffset.Now;
                    parameters.Data.UpdateName = LoginName;
                    if (parameters.Data.DateTypeUid == Guid.Empty)
                    {
                        parameters.Data.DateTypeUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                    }
                    if (repository.DoesExist(parameters.Data.DateTypeUid) == false)
                    {
                        parameters.Data.InsertDate = DateTimeOffset.Now;
                        parameters.Data.InsertName = LoginName;
                        this.Log().Info($"Adding Date Type - {parameters.Data.Date}.");
                        updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                    }
                    else
                    {
                        updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                    }

                    if (parameters.Data.IsPanelDataDirty && parameters.Data.Date.IsWithinTheNextYear())
                    {
                        // Now send to the panels
                        var sendParameters = new SendDataParameters<DateType_PanelLoadData>()
                        { PopulateDataFromDatabase = true, ApplicationUserSessionHeader = this.ApplicationUserSessionHeader };
                        sendParameters.Data.DateTypeUid = updatedEntity.DateTypeUid;
                        sendParameters.Data.Date_x = updatedEntity.Date;
                        Globals.Instance.MessageBroker.SendMessage(
                            new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendSavedDateTypeDataToHardware, sendParameters));
                    }
                }

                return updatedEntity;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteDateTypeByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IDateTypeRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(DateType), nameof(DateType.DateTypeUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanDeleteId);

                // Grab a list of clusters that must be updated to remove the date from their day type/holiday tables
                var clustersThatUseDateType = repository.GetClustersThatUseDateType(ApplicationUserSessionHeader, new GetParametersWithPhoto()
                {
                    UniqueId = parameters.UniqueId,
                });

                var d = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, null);

                int retValue = repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);

                if (d != null)
                {
                    if (d.Date.IsWithinTheNextYear())
                    {
                        // Now send to the panels
                        var sendParameters = new SendDataParameters<DateType_GetClustersThatUseDateType>()
                        { PopulateDataFromDatabase = true, ApplicationUserSessionHeader = this.ApplicationUserSessionHeader, Collection = clustersThatUseDateType.ToList() };
                        sendParameters.Data.Date_x = d.Date;
                        Globals.Instance.MessageBroker.SendMessage(
                            new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendDateTypeDataToClusters, sendParameters));
                    }
                }
                return retValue;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteDateType(DeleteParameters<DateType> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IDateTypeRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.DateTypeUid, true, nameof(DateType), nameof(DateType.DateTypeUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanDeleteId);

                if (repository.DoesExist(parameters.Data.DateTypeUid))
                {
                    // Grab a list of clusters that must be updated to remove the date from their day type/holiday tables
                    var clustersThatUseDateType = repository.GetClustersThatUseDateType(ApplicationUserSessionHeader, new GetParametersWithPhoto()
                    {
                        UniqueId = parameters.Data.DateTypeUid,
                    });
                    int retValue = repository.Remove(parameters.Data, ApplicationUserSessionHeader);

                    if (parameters.Data.Date.IsWithinTheNextYear())
                    {
                        // Now send to the panels
                        var sendParameters = new SendDataParameters<DateType_GetClustersThatUseDateType>()
                        { PopulateDataFromDatabase = true, ApplicationUserSessionHeader = this.ApplicationUserSessionHeader, Collection = clustersThatUseDateType.ToList() };
                        sendParameters.Data.Date_x = parameters.Data.Date;
                        Globals.Instance.MessageBroker.SendMessage(
                            new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendDateTypeDataToClusters, sendParameters));
                    }

                    return retValue;
                }
                return 0;
            });
        }

        public bool IsDateTypeReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IDateTypeRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsDateTypeUnique(DateType data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IDateTypeRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region DateTypeDefaultBehavior Operations
        public DateTypeDefaultBehavior GetDateTypeDefaultBehaviorForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (!parameters.DoNotValidateAuthorization)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);


                var repository = _DataRepositoryFactory.GetDataRepository<IDateTypeDefaultBehaviorRepository>();
                var data = repository.Get(parameters.CurrentEntityId, ApplicationUserSessionHeader, parameters);
                return data;
            });

        }

        public DateTypeDefaultBehavior GetDateTypeDefaultBehavior(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IDateTypeDefaultBehaviorRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(DateTypeDefaultBehavior), nameof(DateTypeDefaultBehavior.EntityId));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("DateTypeDefaultBehavior with EntityId of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });

        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public DateTypeDefaultBehavior SaveDateTypeDefaultBehavior(SaveParameters<DateTypeDefaultBehavior> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (!parameters.DoNotValidateAuthorization)
                {
                    if (parameters.Data.EntityId == Guid.Empty)
                        parameters.Data.EntityId = ApplicationUserSessionHeader.CurrentEntityId;
                    parameters.CurrentEntityId = parameters.Data.EntityId;

                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanUpdateId);
                }

                if (parameters.Data.EntityId == Guid.Empty)
                    parameters.Data.EntityId = ApplicationUserSessionHeader.CurrentEntityId;

                var repository = _DataRepositoryFactory.GetDataRepository<IDateTypeDefaultBehaviorRepository>();
                var dayTypesRepo = _DataRepositoryFactory.GetDataRepository<IDayTypeRepository>();
                var dayTypesForEntity = dayTypesRepo.GetAllDayTypesForEntity(ApplicationUserSessionHeader,
                    new GetParametersWithPhoto()
                    {
                        UniqueId = parameters.Data.EntityId
                    });

                if (parameters.Data.SundayDayTypeUid != Guid.Empty)
                    VerifyDayTypeEntitiesMatch(parameters.Data.SundayDayTypeUid, dayTypesForEntity, nameof(DateTypeDefaultBehavior.SundayDayTypeUid));

                if (parameters.Data.MondayDayTypeUid != Guid.Empty)
                    VerifyDayTypeEntitiesMatch(parameters.Data.SundayDayTypeUid, dayTypesForEntity, nameof(DateTypeDefaultBehavior.MondayDayTypeUid));

                if (parameters.Data.TuesdayDayTypeUid != Guid.Empty)
                    VerifyDayTypeEntitiesMatch(parameters.Data.SundayDayTypeUid, dayTypesForEntity, nameof(DateTypeDefaultBehavior.TuesdayDayTypeUid));

                if (parameters.Data.WednesdayDayTypeUid != Guid.Empty)
                    VerifyDayTypeEntitiesMatch(parameters.Data.SundayDayTypeUid, dayTypesForEntity, nameof(DateTypeDefaultBehavior.WednesdayDayTypeUid));

                if (parameters.Data.ThursdayDayTypeUid != Guid.Empty)
                    VerifyDayTypeEntitiesMatch(parameters.Data.SundayDayTypeUid, dayTypesForEntity, nameof(DateTypeDefaultBehavior.ThursdayDayTypeUid));

                if (parameters.Data.FridayDayTypeUid != Guid.Empty)
                    VerifyDayTypeEntitiesMatch(parameters.Data.SundayDayTypeUid, dayTypesForEntity, nameof(DateTypeDefaultBehavior.FridayDayTypeUid));

                if (parameters.Data.SaturdayDayTypeUid != Guid.Empty)
                    VerifyDayTypeEntitiesMatch(parameters.Data.SundayDayTypeUid, dayTypesForEntity, nameof(DateTypeDefaultBehavior.SaturdayDayTypeUid));

                DateTypeDefaultBehavior updatedEntity = null;
                //if (repository.IsUnique(parameters.Data) == false)
                //{
                //    var ex =
                //        new DuplicateIndexException(
                //            string.Format("DateTypeDefaultBehavior with EntityId of '{0}' cannot be saved because it is a duplicate.",
                //                parameters.Data.EntityId));
                //    var detail = new ExceptionDetailEx(ex);
                //    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                //}

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                //if (parameters.Data.EntityId == Guid.Empty)
                //{
                //    parameters.Data.EntityId = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                //}

                if (repository.DoesExist(parameters.Data.EntityId) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedEntity;
            });
        }

        private static void VerifyDayTypeEntitiesMatch(Guid dayTypeUid, IArrayResponse<DayType> dayTypesForEntity, string propertyName)
        {
            var dt = dayTypesForEntity.Items.FirstOrDefault(o => o.DayTypeUid == dayTypeUid);
            if (dt == null)
                throw new DataValidationException(
                    $"The {propertyName} value {dayTypeUid} is not permitted because it is from a different entity. The day type must be on the same entity as the item being saved.");
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteDateTypeDefaultBehaviorByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IDateTypeDefaultBehaviorRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(DateTypeDefaultBehavior), nameof(DateTypeDefaultBehavior.EntityId));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteDateTypeDefaultBehavior(DeleteParameters<DateTypeDefaultBehavior> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IDateTypeDefaultBehaviorRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.EntityId, true, nameof(DateTypeDefaultBehavior), nameof(DateTypeDefaultBehavior.EntityId));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsDateTypeDefaultBehaviorReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IDateTypeDefaultBehaviorRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsDateTypeDefaultBehaviorUnique(DateTypeDefaultBehavior data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IDateTypeDefaultBehaviorRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }
        #endregion

        #region SeedDatabase operations

        [OperationBehavior(TransactionScopeRequired = true)]
        public bool SeedDatabase(SaveParameters<SeedDatabaseRequest> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.DoNotValidateAuthorization = true;
                var ambientTransaction = Transaction.Current;

                var brandRepository = _DataRepositoryFactory.GetDataRepository<IBrandRepository>();
                var credentialReaderDataFormatRepository =
                    _DataRepositoryFactory.GetDataRepository<ICredentialReaderDataFormatRepository>();
                var credentialReaderTypeRepository =
                    _DataRepositoryFactory.GetDataRepository<ICredentialReaderTypeRepository>();
                var accessPortalTypeRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalTypeRepository>();
                var featureRepository = _DataRepositoryFactory.GetDataRepository<IFeatureRepository>();
                var entityRepository = _DataRepositoryFactory.GetDataRepository<IGcsEntityRepository>();
                var clusterTypeRepository = _DataRepositoryFactory.GetDataRepository<IClusterTypeRepository>();
                var clusterCommandRepository = _DataRepositoryFactory.GetDataRepository<IClusterCommandRepository>();
                var galaxyPanelModelRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelModelRepository>();
                var galaxyPanelAlertEventTypeRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelAlertEventTypeRepository>();
                var galaxyPanelCommandRepository =
                    _DataRepositoryFactory.GetDataRepository<IGalaxyPanelCommandRepository>();
                var galaxyCpuModelRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuModelRepository>();
                var interfaceBoardTypeRepository =
                    _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardTypeRepository>();
                var interfaceBoardSectionModeRepository =
                    _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionModeRepository>();
                var galaxyHardwareModuleTypeRepository =
                    _DataRepositoryFactory.GetDataRepository<IGalaxyHardwareModuleTypeRepository>();
                var credentialDataLengthRepository =
                    _DataRepositoryFactory.GetDataRepository<ICredentialDataLengthRepository>();
                var timeScheduleTypeRepository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleTypeRepository>();
                var timeScheduleRepository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
                var galaxyTimePeriodRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyTimePeriodRepository>();
                var timeZoneRepository = _DataRepositoryFactory.GetDataRepository<ITimeZoneRepository>();
                var clusterLedBehaviorModeRepository =
                    _DataRepositoryFactory.GetDataRepository<IClusterLedBehaviorModeRepository>();
                var entityMapPermissionLevelRepository =
                    _DataRepositoryFactory.GetDataRepository<IEntityMapPermissionLevelRepository>();
                var galaxyInputDelayTypeRepository =
                    _DataRepositoryFactory.GetDataRepository<IGalaxyInputDelayTypeRepository>();
                var galaxyInputModeRepository =
                    _DataRepositoryFactory.GetDataRepository<IGalaxyInputModeRepository>();
                var inputDeviceAlertEventTypeRepository =
                    _DataRepositoryFactory.GetDataRepository<IInputDeviceAlertEventTypeRepository>();
                var inputDeviceSupervisionTypeRepository =
                    _DataRepositoryFactory.GetDataRepository<IInputDeviceSupervisionTypeRepository>();

                var galaxyOutputModeRepository =
                    _DataRepositoryFactory.GetDataRepository<IGalaxyOutputModeRepository>();
                var galaxyOutputInputSourceRelationshipRepository =
                    _DataRepositoryFactory.GetDataRepository<IGalaxyOutputInputSourceRelationshipRepository>();
                var galaxyOutputInputSourceTriggerConditionRepository =
                    _DataRepositoryFactory.GetDataRepository<IGalaxyOutputInputSourceTriggerConditionRepository>();
                var galaxyOutputInputSourceModeRepository =
                    _DataRepositoryFactory.GetDataRepository<IGalaxyOutputInputSourceModeRepository>();

                var accessPortalAreaTypeRepository =
                    _DataRepositoryFactory.GetDataRepository<IAccessPortalAreaTypeRepository>();
                var accessPortalScheduleTypeRepository =
                    _DataRepositoryFactory.GetDataRepository<IAccessPortalScheduleTypeRepository>();
                var accessPortalAlertEventTypeRepository =
                    _DataRepositoryFactory.GetDataRepository<IAccessPortalAlertEventTypeRepository>();
                var accessPortalAuxiliaryOutputModeRepository =
                    _DataRepositoryFactory.GetDataRepository<IAccessPortalAuxiliaryOutputModeRepository>();
                var automaticForgivePassbackFrequencyRepository =
                    _DataRepositoryFactory.GetDataRepository<IAutomaticForgivePassbackFrequencyRepository>();
                var pinRequiredModeRepository = _DataRepositoryFactory.GetDataRepository<IPinRequiredModeRepository>();
                var accessPortalElevatorControlTypeRepository =
                    _DataRepositoryFactory.GetDataRepository<IAccessPortalElevatorControlTypeRepository>();
                var accessPortalLockPushButtonBehaviorRepository =
                    _DataRepositoryFactory.GetDataRepository<IAccessPortalLockPushButtonBehaviorRepository>();
                var accessPortalContactSupervisionTypeRepository =
                    _DataRepositoryFactory.GetDataRepository<IAccessPortalContactSupervisionTypeRepository>();
                var accessPortalNoServerReplyBehaviorRepository =
                    _DataRepositoryFactory.GetDataRepository<IAccessPortalNoServerReplyBehaviorRepository>();
                var accessPortalDeferToServerBehaviorRepository =
                    _DataRepositoryFactory.GetDataRepository<IAccessPortalDeferToServerBehaviorRepository>();
                var accessPortalMultiFactorModeRepository =
                    _DataRepositoryFactory.GetDataRepository<IAccessPortalMultiFactorModeRepository>();

                var genderRepository =
                    _DataRepositoryFactory.GetDataRepository<IGenderRepository>();
                var personActiveStatusTypeRepository =
                    _DataRepositoryFactory.GetDataRepository<IPersonActiveStatusTypeRepository>();
                var userDefinedPropertyTypeRepository =
                    _DataRepositoryFactory.GetDataRepository<IUserDefinedPropertyTypeRepository>();
                var cellCarrierRepository =
                    _DataRepositoryFactory.GetDataRepository<ICellCarrierRepository>();
                var credentialFormatRepository =
                    _DataRepositoryFactory.GetDataRepository<ICredentialFormatRepository>();
                var personActivationModeRepository =
                    _DataRepositoryFactory.GetDataRepository<IPersonActivationModeRepository>();
                var personExpirationModeRepository =
                    _DataRepositoryFactory.GetDataRepository<IPersonExpirationModeRepository>();
                var personCredentialRoleRepository =
                    _DataRepositoryFactory.GetDataRepository<IPersonCredentialRoleRepository>();
                var personLcdMessageDisplayModeRepository =
                    _DataRepositoryFactory.GetDataRepository<IPersonLcdMessageDisplayModeRepository>();
                var badgeTemplateRepository =
                    _DataRepositoryFactory.GetDataRepository<IBadgeTemplateRepository>();
                var accessProfileRepository =
                    _DataRepositoryFactory.GetDataRepository<IAccessProfileRepository>();

                var accessPortalCommandRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalCommandRepository>();
                var inputOutputGroupCommandRepository = _DataRepositoryFactory.GetDataRepository<IInputOutputGroupCommandRepository>();
                var inputCommandRepository = _DataRepositoryFactory.GetDataRepository<IInputCommandRepository>();
                var outputCommandRepository = _DataRepositoryFactory.GetDataRepository<IOutputCommandRepository>();
                var galaxyActivityEventTypeRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyActivityEventTypeRepository>();

                var interfaceBoardSectionCommandRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionCommandRepository>();

                var mercScpTypeRepository = _DataRepositoryFactory.GetDataRepository<IMercScpTypeRepository>();
                var mercSioTypeRepository = _DataRepositoryFactory.GetDataRepository<IMercSioTypeRepository>();
                var mercScpGroupRepository = _DataRepositoryFactory.GetDataRepository<IMercScpGroupRepository>();

                var entities = entityRepository.GetAll(ApplicationUserSessionHeader, new GetParametersWithPhoto() { IncludeMemberCollections = false });
                var entityIds = entities.Select(o => o.EntityId).ToList();

                foreach (var brand in parameters.Data.Brands)
                {
                    if (brandRepository.DoesExist(brand.BrandUid) == false &&
                        IsBrandUnique(brand))
                    {
                        var saveParameters = new SaveParameters<Brand>(brand, parameters);
                        saveParameters.ThrowExceptionIfDuplicate = false;
                        saveParameters.DoNotValidateAuthorization = parameters.DoNotValidateAuthorization;
                        SaveBrand(saveParameters);
                    }
                }

                foreach (var credentialReaderDataFormat in parameters.Data.CredentialReaderDataFormats)
                {
                    if (
                        credentialReaderDataFormatRepository.DoesExist(
                            credentialReaderDataFormat.CredentialReaderDataFormatUid) == false &&
                        IsCredentialReaderDataFormatUnique(credentialReaderDataFormat))
                    {
                        var saveParameters = new SaveParameters<CredentialReaderDataFormat>(credentialReaderDataFormat,
                            parameters);
                        saveParameters.DoNotValidateAuthorization = parameters.DoNotValidateAuthorization;
                        SaveCredentialReaderDataFormat(saveParameters);
                    }
                }

                foreach (var credentialReaderType in parameters.Data.CredentialReaderTypes)
                {
                    if (credentialReaderTypeRepository.DoesExist(credentialReaderType.CredentialReaderTypeUid) == false &&
                        IsCredentialReaderTypeUnique(credentialReaderType))
                    {
                        var saveParameters = new SaveParameters<CredentialReaderType>(credentialReaderType, parameters);
                        saveParameters.DoNotValidateAuthorization = parameters.DoNotValidateAuthorization;
                        SaveCredentialReaderType(saveParameters);
                    }
                }

                foreach (var accessPortalType in parameters.Data.AccessPortalTypes)
                {
                    if (accessPortalTypeRepository.DoesExist(accessPortalType.AccessPortalTypeUid) == false &&
                        IsAccessPortalTypeUnique(accessPortalType))
                    {
                        var saveParameters = new SaveParameters<AccessPortalType>(accessPortalType, parameters);
                        saveParameters.DoNotValidateAuthorization = parameters.DoNotValidateAuthorization;
                        SaveAccessPortalType(saveParameters);
                    }
                }

                foreach (var feature in parameters.Data.Features)
                {
                    if (featureRepository.DoesExist(feature.FeatureUid) == false &&
                        IsFeatureUnique(feature))
                    {
                        var saveParameters = new SaveParameters<Feature>(feature, parameters);
                        saveParameters.DoNotValidateAuthorization = parameters.DoNotValidateAuthorization;
                        SaveFeature(saveParameters);
                    }
                }

                #region ClusterTypes

                var clusterTypes = new List<ClusterType>();

                //var clusterType = new ClusterType()
                //{
                //    ClusterTypeUid = GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx,
                //    Display = SharedResources.Resources.ClusterType_6xxHybrid_Display,
                //    Description = SharedResources.Resources.ClusterType_6xxHybrid_Description,
                //    TypeCode = GalaxySMS.Common.Enums.ClusterType.Hybrid6xx.ToString(),
                //    IsActive = true,
                //    IsDefault = true,
                //    UniqueResourceName = GalaxySMS.Common.Enums.ClusterType.Hybrid6xx.ToString()
                //};
                //clusterTypes.Add(clusterType);

                var clusterType = new ClusterType()
                {
                    ClusterTypeUid = GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635,
                    Display = SharedResources.Resources.ClusterType_635Only_Display,
                    Description = SharedResources.Resources.ClusterType_635Only_Description,
                    TypeCode = GalaxySMS.Common.Enums.ClusterType.Only635.ToString(),
                    IsActive = true,
                    IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.ClusterType.Only635.ToString()
                };
                clusterTypes.Add(clusterType);

                //clusterType = new ClusterType()
                //{
                //    ClusterTypeUid = GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600,
                //    Display = SharedResources.Resources.ClusterType_600Only_Display,
                //    Description = SharedResources.Resources.ClusterType_600Only_Description,
                //    TypeCode = GalaxySMS.Common.Enums.ClusterType.Only600.ToString(),
                //    IsActive = true,
                //    IsDefault = false,
                //    UniqueResourceName = GalaxySMS.Common.Enums.ClusterType.Only600.ToString()
                //};
                //clusterTypes.Add(clusterType);

                clusterType = new ClusterType()
                {
                    ClusterTypeUid = GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only7xx,
                    Display = SharedResources.Resources.ClusterType_7xxOnly_Display,
                    Description = SharedResources.Resources.ClusterType_7xxOnly_Description,
                    TypeCode = GalaxySMS.Common.Enums.ClusterType.Only7xx.ToString(),
                    IsActive = true,
                    IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.ClusterType.Only7xx.ToString()
                };
                clusterTypes.Add(clusterType);

                clusterType = new ClusterType()
                {
                    ClusterTypeUid = GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid7xx,
                    Display = SharedResources.Resources.ClusterType_Hybrid7xx_Display,
                    Description = SharedResources.Resources.ClusterType_Hybrid7xx_Description,
                    TypeCode = GalaxySMS.Common.Enums.ClusterType.Hybrid7xx.ToString(),
                    IsActive = true,
                    IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.ClusterType.Hybrid7xx.ToString()
                };
                clusterTypes.Add(clusterType);

                #endregion

                #region ClusterCommands

                var clusterCommands = new List<ClusterCommand>();
                var clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_Ping,
                    Display = SharedResources.Resources.ClusterPanelCommand_Ping_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_Ping_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.Ping,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.Ping.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only7xx);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid7xx);
                clusterCommands.Add(clusterCommand);

                clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_GetInfo,
                    Display = SharedResources.Resources.ClusterPanelCommand_GetControllerInformation_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_GetControllerInformation_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RequestControllerInformation,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RequestControllerInformation.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only7xx);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid7xx);
                clusterCommands.Add(clusterCommand);

                clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_GetLoggingInfo,
                    Display = SharedResources.Resources.ClusterPanelCommand_GetLoggingInformation_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_GetLoggingInformation_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RequestLoggingInformation,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RequestLoggingInformation.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only7xx);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid7xx);
                clusterCommands.Add(clusterCommand);

                clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_GetCardCount,
                    Display = SharedResources.Resources.ClusterPanelCommand_GetCardCount_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_GetCardCount_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RequestCredentialCount,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RequestCredentialCount.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only7xx);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid7xx);
                clusterCommands.Add(clusterCommand);

                clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ActivateCrisisMode,
                    Display = SharedResources.Resources.ClusterPanelCommand_ActivateCrisisMode_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_ActivateCrisisMode_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ActivateCrisisMode,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ActivateCrisisMode.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only7xx);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid7xx);
                clusterCommands.Add(clusterCommand);

                clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ResetCrisisMode,
                    Display = SharedResources.Resources.ClusterPanelCommand_ResetCrisisMode_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_ResetCrisisMode_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ResetCrisisMode,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ResetCrisisMode.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only7xx);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid7xx);
                clusterCommands.Add(clusterCommand);

                clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ForgivePassback,
                    Display = SharedResources.Resources.ClusterPanelCommand_ForgivePassback_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_ForgivePassback_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ForgivePassbackForCredential,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ForgivePassbackForCredential.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only7xx);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid7xx);
                clusterCommands.Add(clusterCommand);


                clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_EnableCredential,
                    Display = SharedResources.Resources.ClusterPanelCommand_EnableCredential_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_EnableCredential_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.EnableCredential,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.EnableCredential.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only7xx);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid7xx);
                clusterCommands.Add(clusterCommand);


                clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_DisableCredential,
                    Display = SharedResources.Resources.ClusterPanelCommand_DisableCredential_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_DisableCredential_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.DisableCredential,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.DisableCredential.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only7xx);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid7xx);
                clusterCommands.Add(clusterCommand);

                clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ForgiveAllPassback,
                    Display = SharedResources.Resources.ClusterPanelCommand_ForgiveAllPassback_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_ForgiveAllPassback_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ForgivePassbackForAllCredentials,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ForgivePassbackForAllCredentials.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only7xx);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid7xx);
                clusterCommands.Add(clusterCommand);

                clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_StartLogging,
                    Display = SharedResources.Resources.ClusterPanelCommand_StartLogging_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_StartLogging_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.StartLogging,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.StartLogging.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only7xx);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid7xx);
                clusterCommands.Add(clusterCommand);

                clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_StopLogging,
                    Display = SharedResources.Resources.ClusterPanelCommand_StopLogging_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_StopLogging_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.StopLogging,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.StopLogging.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only7xx);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid7xx);
                clusterCommands.Add(clusterCommand);

                clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_RecalibrateInputOutput,
                    Display = SharedResources.Resources.ClusterPanelCommand_RecalibrateIO_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_RecalibrateIO_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RecalibrateInputsAndOutputs,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RecalibrateInputsAndOutputs.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only7xx);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid7xx);
                clusterCommands.Add(clusterCommand);

                clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ResetControllerWarm,
                    Display = SharedResources.Resources.ClusterPanelCommand_ResetCpuWarm_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_ResetCpuWarm_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ResetCpuWarm,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ResetCpuWarm.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only7xx);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid7xx);
                clusterCommands.Add(clusterCommand);

                clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ResetControllerCold,
                    Display = SharedResources.Resources.ClusterPanelCommand_ResetCpuCold_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_ResetCpuCold_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ResetCpuCold,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ResetCpuCold.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only7xx);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid7xx);
                clusterCommands.Add(clusterCommand);

                clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_RetransmitLoggingBuffer,
                    Display = SharedResources.Resources.ClusterPanelCommand_RetransmitLoggingBuffer_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_RetransmitLoggingBuffer_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RetransmitLoggingBuffer,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RetransmitLoggingBuffer.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only7xx);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid7xx);
                clusterCommands.Add(clusterCommand);

                clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ClearLoggingBuffer,
                    Display = SharedResources.Resources.ClusterPanelCommand_ClearLoggingBuffer_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_ClearLoggingBuffer_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ClearLoggingBuffer,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ClearLoggingBuffer.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only7xx);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid7xx);
                clusterCommands.Add(clusterCommand);

                clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds
                            .GalaxyClusterCommand_EnableDaughterBoardFlashUpdate,
                    Display = SharedResources.Resources.ClusterPanelCommand_EnableDaughterBoardFlashUpdate_Display,
                    Description =
                        SharedResources.Resources.ClusterPanelCommand_EnableDaughterBoardFlashUpdate_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.EnableDaughterBoardFlashUpdate,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.EnableDaughterBoardFlashUpdate.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only7xx);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid7xx);
                clusterCommands.Add(clusterCommand);

                clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_DeleteAllCredentials,
                    Display = SharedResources.Resources.ClusterPanelCommand_DeleteAllCredentials_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_DeleteAllCredentials_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ClearAllCredentials,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ClearAllCredentials.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only7xx);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid7xx);
                clusterCommands.Add(clusterCommand);


                clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_BeginFlashLoad,
                    Display = SharedResources.Resources.ClusterPanelCommand_BeginFlashLoad_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_BeginFlashLoad_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.BeginFlashLoad,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.BeginFlashLoad.ToString(),
                    IsActive = true,
                    IsFlashingCommand = true
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommands.Add(clusterCommand);

                clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ValidateFlash,
                    Display = SharedResources.Resources.ClusterPanelCommand_ValidateFlash_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_ValidateFlash_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ValidateFlash,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ValidateFlash.ToString(),
                    IsActive = true,
                    IsFlashingCommand = true
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommands.Add(clusterCommand);


                clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ValidateAndBurnFlash,
                    Display = SharedResources.Resources.ClusterPanelCommand_ValidateAndBurnFlash_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_ValidateAndBurnFlash_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ValidateAndBurnFlash,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ValidateAndBurnFlash.ToString(),
                    IsActive = true,
                    IsFlashingCommand = true
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommands.Add(clusterCommand);


                clusterCommand = new ClusterCommand()
                {
                    ClusterCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_RequestBoardInformation,
                    Display = SharedResources.Resources.ClusterPanelCommand_RequestBoardInformation_Display,//"Request Board Information",//
                    Description = SharedResources.Resources.ClusterPanelCommand_RequestBoardInformation_Description,//"Request data about all boards that are installed in the panel",//
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RequestBoardInformation,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RequestBoardInformation.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx);
                //clusterCommand.ClusterTypeIds.Add(
                //    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only600);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only635);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only7xx);
                clusterCommand.ClusterTypeIds.Add(
                    GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid7xx);
                clusterCommands.Add(clusterCommand);
                #endregion

                #region Galaxy Panel Models

                var galaxyPanelModels = new List<GalaxyPanelModel>();

                var galaxyPanelModel = new GalaxyPanelModel()
                {
                    GalaxyPanelModelUid = GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600,
                    Display = SharedResources.Resources.GalaxyPanelType_600_Display,
                    Description = SharedResources.Resources.GalaxyPanelType_600_Description,
                    TypeCode = GalaxySMS.Common.Enums.GalaxyPanelModel.GalaxyPanel600.ToString(),
                    IsActive = false,
                    IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyPanelModel.GalaxyPanel600.ToString()
                };
                galaxyPanelModels.Add(galaxyPanelModel);

                galaxyPanelModel = new GalaxyPanelModel()
                {
                    GalaxyPanelModelUid = GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635,
                    Display = SharedResources.Resources.GalaxyPanelType_635_Display,
                    Description = SharedResources.Resources.GalaxyPanelType_635_Description,
                    TypeCode = GalaxySMS.Common.Enums.GalaxyPanelModel.GalaxyPanel635.ToString(),
                    IsActive = true,
                    IsDefault = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyPanelModel.GalaxyPanel635.ToString()
                };
                galaxyPanelModels.Add(galaxyPanelModel);

                galaxyPanelModel = new GalaxyPanelModel()
                {
                    GalaxyPanelModelUid = GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708,
                    Display = SharedResources.Resources.GalaxyPanelType_708_Display,
                    Description = SharedResources.Resources.GalaxyPanelType_708_Description,
                    TypeCode = GalaxySMS.Common.Enums.GalaxyPanelModel.GalaxyPanel708.ToString(),
                    IsActive = true,
                    IsDefault = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyPanelModel.GalaxyPanel708.ToString()
                };
                galaxyPanelModels.Add(galaxyPanelModel);

                //galaxyPanelModel = new GalaxyPanelModel()
                //{
                //    GalaxyPanelModelUid = GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_500,
                //    Display = SharedResources.Resources.GalaxyPanelType_5xxi_Display,
                //    Description = SharedResources.Resources.GalaxyPanelType_5xxi_Description,
                //    TypeCode = GalaxySMS.Common.Enums.GalaxyPanelModel.GalaxyPanel5xxi.ToString(),
                //    IsActive = false,
                //    IsDefault = false,
                //    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyPanelModel.GalaxyPanel5xx.ToString()
                //};
                //galaxyPanelModels.Add(galaxyPanelModel);

                #endregion

                #region Galaxy Panel Alert Event Types

                var galaxyPanelAlertEventTypes = new List<GalaxySMSBusinessEntities.GalaxyPanelAlertEventType>();

                var galaxyPanelAlertEventType = new GalaxySMSBusinessEntities.GalaxyPanelAlertEventType()
                {
                    GalaxyPanelAlertEventTypeUid = GalaxySMS.Common.Constants.GalaxyPanelAlertEventTypeIds.LowBattery,
                    Tag = GalaxySMS.Common.Enums.GalaxyPanelAlertEventType.LowBattery.ToString(),
                    Display = SharedResources.Resources.GalaxyPanelAlertEventType_LowBattery_Display,
                    Description = SharedResources.Resources.GalaxyPanelAlertEventType_LowBattery_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyPanelAlertEventType.LowBattery.ToString(),
                    CanAcknowledge = true,
                    CanHaveInputOutputGroupOffset = true,
                    CanHaveSchedule = true,
                    CanHaveAudio = true,
                    CanHaveInstructions = true
                };
                galaxyPanelAlertEventTypes.Add(galaxyPanelAlertEventType);

                galaxyPanelAlertEventType = new GalaxySMSBusinessEntities.GalaxyPanelAlertEventType()
                {
                    GalaxyPanelAlertEventTypeUid = GalaxySMS.Common.Constants.GalaxyPanelAlertEventTypeIds.ACFailure,
                    Tag = GalaxySMS.Common.Enums.GalaxyPanelAlertEventType.ACFailure.ToString(),
                    Display = SharedResources.Resources.GalaxyPanelAlertEventType_ACFailure_Display,
                    Description = SharedResources.Resources.GalaxyPanelAlertEventType_ACFailure_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyPanelAlertEventType.ACFailure.ToString(),
                    CanAcknowledge = true,
                    CanHaveInputOutputGroupOffset = true,
                    CanHaveSchedule = true,
                    CanHaveAudio = true,
                    CanHaveInstructions = true
                };
                galaxyPanelAlertEventTypes.Add(galaxyPanelAlertEventType);

                galaxyPanelAlertEventType = new GalaxySMSBusinessEntities.GalaxyPanelAlertEventType()
                {
                    GalaxyPanelAlertEventTypeUid = GalaxySMS.Common.Constants.GalaxyPanelAlertEventTypeIds.Tamper,
                    Tag = GalaxySMS.Common.Enums.GalaxyPanelAlertEventType.Tamper.ToString(),
                    Display = SharedResources.Resources.GalaxyPanelAlertEventType_Tamper_Display,
                    Description = SharedResources.Resources.GalaxyPanelAlertEventType_Tamper_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyPanelAlertEventType.Tamper.ToString(),
                    CanAcknowledge = true,
                    CanHaveInputOutputGroupOffset = true,
                    CanHaveSchedule = true,
                    CanHaveAudio = true,
                    CanHaveInstructions = true
                };
                galaxyPanelAlertEventTypes.Add(galaxyPanelAlertEventType);

                galaxyPanelAlertEventType = new GalaxySMSBusinessEntities.GalaxyPanelAlertEventType()
                {
                    GalaxyPanelAlertEventTypeUid = GalaxySMS.Common.Constants.GalaxyPanelAlertEventTypeIds.EmergencyUnlock,
                    Tag = GalaxySMS.Common.Enums.GalaxyPanelAlertEventType.EmergencyUnlock.ToString(),
                    Display = SharedResources.Resources.GalaxyPanelAlertEventType_EmergencyUnlock_Display,
                    Description = SharedResources.Resources.GalaxyPanelAlertEventType_EmergencyUnlock_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyPanelAlertEventType.EmergencyUnlock.ToString(),
                    CanAcknowledge = true,
                    CanHaveInputOutputGroupOffset = true,
                    CanHaveSchedule = true,
                    CanHaveAudio = true,
                    CanHaveInstructions = true
                };
                galaxyPanelAlertEventTypes.Add(galaxyPanelAlertEventType);

                #endregion

                #region Galaxy Cpu Models

                var galaxyCpuModels = new List<GalaxyCpuModel>();

                var galaxyCpuModel = new GalaxyCpuModel()
                {
                    GalaxyCpuModelUid = GalaxySMS.Common.Constants.GalaxyCpuTypeIds.GalaxyCpuType_600,
                    Display = SharedResources.Resources.GalaxyCpuModel_600_Display,
                    Description = SharedResources.Resources.GalaxyCpuModel_600_Description,
                    TypeCode = GalaxySMS.Common.Enums.CpuModel.Cpu600.ToString(),
                    IsActive = false,
                    IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.CpuModel.Cpu600.ToString()
                };
                galaxyCpuModels.Add(galaxyCpuModel);

                galaxyCpuModel = new GalaxyCpuModel()
                {
                    GalaxyCpuModelUid = GalaxySMS.Common.Constants.GalaxyCpuTypeIds.GalaxyCpuType_635,
                    Display = SharedResources.Resources.GalaxyCpuModel_635_Display,
                    Description = SharedResources.Resources.GalaxyCpuModel_635_Description,
                    TypeCode = GalaxySMS.Common.Enums.CpuModel.Cpu635.ToString(),
                    IsActive = true,
                    IsDefault = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CpuModel.Cpu635.ToString()
                };
                galaxyCpuModels.Add(galaxyCpuModel);

                galaxyCpuModel = new GalaxyCpuModel()
                {
                    GalaxyCpuModelUid = GalaxySMS.Common.Constants.GalaxyCpuTypeIds.GalaxyCpuType_708,
                    Display = SharedResources.Resources.GalaxyCpuModel_708_Display,
                    Description = SharedResources.Resources.GalaxyCpuModel_708_Description,
                    TypeCode = GalaxySMS.Common.Enums.CpuModel.Cpu708.ToString(),
                    IsActive = true,
                    IsDefault = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CpuModel.Cpu708.ToString()
                };
                galaxyCpuModels.Add(galaxyCpuModel);

                //galaxyPanelModel = new GalaxyPanelModel()
                //{
                //    GalaxyPanelModelUid = GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_500,
                //    Display = SharedResources.Resources.GalaxyPanelType_5xxi_Display,
                //    Description = SharedResources.Resources.GalaxyPanelType_5xxi_Description,
                //    TypeCode = GalaxySMS.Common.Enums.GalaxyPanelModel.GalaxyPanel5xxi.ToString(),
                //    IsActive = false,
                //    IsDefault = false,
                //    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyPanelModel.GalaxyPanel5xx.ToString()
                //};
                //galaxyPanelModels.Add(galaxyPanelModel);

                #endregion

                #region GalaxyPanelCommands

                var galaxyPanelCommands = new List<GalaxyPanelCommand>();
                var galaxyPanelCommand = new GalaxyPanelCommand()
                {
                    GalaxyPanelCommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_Ping,
                    Display = SharedResources.Resources.ClusterPanelCommand_Ping_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_Ping_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.Ping,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.Ping.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                galaxyPanelCommands.Add(galaxyPanelCommand);

                galaxyPanelCommand = new GalaxyPanelCommand()
                {
                    GalaxyPanelCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_GetInfo,
                    Display = SharedResources.Resources.ClusterPanelCommand_GetControllerInformation_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_GetControllerInformation_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RequestControllerInformation,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RequestControllerInformation.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                galaxyPanelCommands.Add(galaxyPanelCommand);

                galaxyPanelCommand = new GalaxyPanelCommand()
                {
                    GalaxyPanelCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_GetLoggingInfo,
                    Display = SharedResources.Resources.ClusterPanelCommand_GetLoggingInformation_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_GetLoggingInformation_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RequestLoggingInformation,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RequestLoggingInformation.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                galaxyPanelCommands.Add(galaxyPanelCommand);

                galaxyPanelCommand = new GalaxyPanelCommand()
                {
                    GalaxyPanelCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_GetCardCount,
                    Display = SharedResources.Resources.ClusterPanelCommand_GetCardCount_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_GetCardCount_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RequestCredentialCount,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RequestCredentialCount.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                galaxyPanelCommands.Add(galaxyPanelCommand);

                galaxyPanelCommand = new GalaxyPanelCommand()
                {
                    GalaxyPanelCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ActivateCrisisMode,
                    Display = SharedResources.Resources.ClusterPanelCommand_ActivateCrisisMode_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_ActivateCrisisMode_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ActivateCrisisMode,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ActivateCrisisMode.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                galaxyPanelCommands.Add(galaxyPanelCommand);

                galaxyPanelCommand = new GalaxyPanelCommand()
                {
                    GalaxyPanelCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ResetCrisisMode,
                    Display = SharedResources.Resources.ClusterPanelCommand_ResetCrisisMode_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_ResetCrisisMode_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ResetCrisisMode,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ResetCrisisMode.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                galaxyPanelCommands.Add(galaxyPanelCommand);

                //galaxyPanelCommand = new GalaxyPanelCommand()
                //{
                //    GalaxyPanelCommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ForgivePassback,
                //    Display = SharedResources.Resources.ClusterPanelCommand_ForgivePassback_Display,
                //    Description = SharedResources.Resources.ClusterPanelCommand_ForgivePassback_Description,
                //    CommandCode = (short) GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ForgivePassback,
                //    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ForgivePassback.ToString()
                //};
                //galaxyPanelCommands.Add(galaxyPanelCommand);

                //galaxyPanelCommand = new GalaxyPanelCommand()
                //{
                //    GalaxyPanelCommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ForgiveAllPassback,
                //    Display = SharedResources.Resources.ClusterPanelCommand_ForgiveAllPassback_Display,
                //    Description = SharedResources.Resources.ClusterPanelCommand_ForgiveAllPassback_Description,
                //    CommandCode = (short) GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ForgiveAllPassback,
                //    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ForgiveAllPassback.ToString()
                //};
                //galaxyPanelCommands.Add(galaxyPanelCommand);

                galaxyPanelCommand = new GalaxyPanelCommand()
                {
                    GalaxyPanelCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_StartLogging,
                    Display = SharedResources.Resources.ClusterPanelCommand_StartLogging_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_StartLogging_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.StartLogging,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.StartLogging.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                galaxyPanelCommands.Add(galaxyPanelCommand);

                galaxyPanelCommand = new GalaxyPanelCommand()
                {
                    GalaxyPanelCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_StopLogging,
                    Display = SharedResources.Resources.ClusterPanelCommand_StopLogging_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_StopLogging_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.StopLogging,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.StopLogging.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                galaxyPanelCommands.Add(galaxyPanelCommand);

                //galaxyPanelCommand = new GalaxyPanelCommand()
                //{
                //    GalaxyPanelCommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_RecalibrateInputOutput,
                //    Display = SharedResources.Resources.ClusterPanelCommand_RecalibrateIO_Display,
                //    Description = SharedResources.Resources.ClusterPanelCommand_RecalibrateIO_Description,
                //    CommandCode = (short) GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RecalibrateIO,
                //    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RecalibrateIO.ToString()
                //};
                //galaxyPanelCommands.Add(galaxyPanelCommand);

                galaxyPanelCommand = new GalaxyPanelCommand()
                {
                    GalaxyPanelCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ResetControllerWarm,
                    Display = SharedResources.Resources.ClusterPanelCommand_ResetCpuWarm_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_ResetCpuWarm_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ResetCpuWarm,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ResetCpuWarm.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                galaxyPanelCommands.Add(galaxyPanelCommand);


                galaxyPanelCommand = new GalaxyPanelCommand()
                {
                    GalaxyPanelCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ResetControllerCold,
                    Display = SharedResources.Resources.ClusterPanelCommand_ResetCpuCold_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_ResetCpuCold_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ResetCpuCold,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ResetCpuCold.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                galaxyPanelCommands.Add(galaxyPanelCommand);

                galaxyPanelCommand = new GalaxyPanelCommand()
                {
                    GalaxyPanelCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_RetransmitLoggingBuffer,
                    Display = SharedResources.Resources.ClusterPanelCommand_RetransmitLoggingBuffer_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_RetransmitLoggingBuffer_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RetransmitLoggingBuffer,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RetransmitLoggingBuffer.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                galaxyPanelCommands.Add(galaxyPanelCommand);

                galaxyPanelCommand = new GalaxyPanelCommand()
                {
                    GalaxyPanelCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ClearLoggingBuffer,
                    Display = SharedResources.Resources.ClusterPanelCommand_ClearLoggingBuffer_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_ClearLoggingBuffer_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ClearLoggingBuffer,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ClearLoggingBuffer.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                galaxyPanelCommands.Add(galaxyPanelCommand);

                galaxyPanelCommand = new GalaxyPanelCommand()
                {
                    GalaxyPanelCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds
                            .GalaxyClusterCommand_EnableDaughterBoardFlashUpdate,
                    Display = SharedResources.Resources.ClusterPanelCommand_EnableDaughterBoardFlashUpdate_Display,
                    Description =
                        SharedResources.Resources.ClusterPanelCommand_EnableDaughterBoardFlashUpdate_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.EnableDaughterBoardFlashUpdate,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.EnableDaughterBoardFlashUpdate.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                galaxyPanelCommands.Add(galaxyPanelCommand);

                galaxyPanelCommand = new GalaxyPanelCommand()
                {
                    GalaxyPanelCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_DeleteAllCredentials,
                    Display = SharedResources.Resources.ClusterPanelCommand_DeleteAllCredentials_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_DeleteAllCredentials_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ClearAllCredentials,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ClearAllCredentials.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                galaxyPanelCommands.Add(galaxyPanelCommand);


                galaxyPanelCommand = new GalaxyPanelCommand()
                {
                    GalaxyPanelCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_BeginFlashLoad,
                    Display = SharedResources.Resources.ClusterPanelCommand_BeginFlashLoad_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_BeginFlashLoad_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.BeginFlashLoad,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.BeginFlashLoad.ToString(),
                    IsActive = true,
                    IsFlashingCommand = true
                };
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyPanelCommands.Add(galaxyPanelCommand);


                galaxyPanelCommand = new GalaxyPanelCommand()
                {
                    GalaxyPanelCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ValidateFlash,
                    Display = SharedResources.Resources.ClusterPanelCommand_ValidateFlash_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_ValidateFlash_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ValidateFlash,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ValidateFlash.ToString(),
                    IsActive = true,
                    IsFlashingCommand = true
                };
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyPanelCommands.Add(galaxyPanelCommand);


                galaxyPanelCommand = new GalaxyPanelCommand()
                {
                    GalaxyPanelCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ValidateAndBurnFlash,
                    Display = SharedResources.Resources.ClusterPanelCommand_ValidateAndBurnFlash_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_ValidateAndBurnFlash_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ValidateAndBurnFlash,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.ValidateAndBurnFlash.ToString(),
                    IsActive = true,
                    IsFlashingCommand = true
                };
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyPanelCommands.Add(galaxyPanelCommand);



                galaxyPanelCommand = new GalaxyPanelCommand()
                {
                    GalaxyPanelCommandUid =
                        GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_RequestBoardInformation,
                    Display = SharedResources.Resources.ClusterPanelCommand_RequestBoardInformation_Display,
                    Description = SharedResources.Resources.ClusterPanelCommand_RequestBoardInformation_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RequestBoardInformation,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyCpuCommandActionCode.RequestBoardInformation.ToString(),
                    IsActive = true,
                    IsFlashingCommand = false
                };
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyPanelCommand.GalaxyPanelModelIds.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                galaxyPanelCommands.Add(galaxyPanelCommand);

                #endregion

                #region Galaxy Interface Board Types

                var galaxyInterfaceBoardTypes = new List<InterfaceBoardType>();

                //var interfaceBoardType = new InterfaceBoardType()
                //{
                //    InterfaceBoardTypeUid =
                //        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds.GalaxyInterfaceBoardType_CardTourManager,
                //    TypeCode = (short)GalaxySMS.Common.Enums.GalaxyInterfaceBoardType.CardTourManagerCpu,
                //    NumberOfSections = 1,
                //    Model = string.Empty,
                //    Display = SharedResources.Resources.GalaxyInterfaceBoardType_CardTourManager_Display,
                //    Description = SharedResources.Resources.GalaxyInterfaceBoardType_CardTourManager_Description,
                //    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyInterfaceBoardType.CardTourManagerCpu.ToString()
                //};
                //interfaceBoardType.GalaxyPanelModelUids.Add(GalaxyPanelTypeIds.GalaxyPanelType_635);



                var interfaceBoardType = new InterfaceBoardType()
                {
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds.GalaxyInterfaceBoardType_Veridt_ReaderModule,
                    TypeCode = (short)GalaxySMS.Common.Enums.GalaxyInterfaceBoardType.Veridt_ReaderModule,
                    NumberOfSections = 1,
                    Model = string.Empty,
                    Display = SharedResources.Resources.GalaxyInterfaceBoardType_Veridt_ReaderModule_Display,
                    Description = SharedResources.Resources.GalaxyInterfaceBoardType_Veridt_ReaderModule_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyInterfaceBoardType.Veridt_ReaderModule.ToString()
                };
                interfaceBoardType.GalaxyPanelModelUids.Add(GalaxyPanelTypeIds.GalaxyPanelType_635);
                //var imageSource = new BitmapImage(new Uri("pack://application:,,,/GalaxySMS.Resources;component/Images/BoardType/CardTourManager.png", UriKind.Absolute));
                //interfaceBoardType.gcsBinaryResource.BinaryResource = imageSource.ToByteArray();

                galaxyInterfaceBoardTypes.Add(interfaceBoardType);


                interfaceBoardType = new InterfaceBoardType()
                {
                    InterfaceBoardTypeUid =
                                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds.GalaxyInterfaceBoardType_Veridt_Cpu,
                    TypeCode = (short)GalaxySMS.Common.Enums.GalaxyInterfaceBoardType.Veridt_Cpu,
                    NumberOfSections = 1,
                    Model = string.Empty,
                    Display = SharedResources.Resources.GalaxyInterfaceBoardType_Veridt_Cpu_Display,
                    Description = SharedResources.Resources.GalaxyInterfaceBoardType_Veridt_Cpu_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyInterfaceBoardType.Veridt_Cpu.ToString()
                };
                interfaceBoardType.GalaxyPanelModelUids.Add(GalaxyPanelTypeIds.GalaxyPanelType_635);
                //var imageSource = new BitmapImage(new Uri("pack://application:,,,/GalaxySMS.Resources;component/Images/BoardType/CardTourManager.png", UriKind.Absolute));
                //interfaceBoardType.gcsBinaryResource.BinaryResource = imageSource.ToByteArray();

                galaxyInterfaceBoardTypes.Add(interfaceBoardType);


                interfaceBoardType = new InterfaceBoardType()
                {
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DigitalInputOutput600,
                    TypeCode = (short)GalaxySMS.Common.Enums.GalaxyInterfaceBoardType.DigitalInputOutputBoard600,
                    NumberOfSections = 2,
                    Model = GalaxySMS.Common.Enums.GalaxyModel.Model600.ToString(),
                    Display = SharedResources.Resources.GalaxyInterfaceBoardType_DigitalInputOutput_Display,
                    Description = SharedResources.Resources.GalaxyInterfaceBoardType_DigitalInputOutput_Description,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.GalaxyInterfaceBoardType.DigitalInputOutputBoard600.ToString()
                };
                interfaceBoardType.GalaxyPanelModelUids.Add(GalaxyPanelTypeIds.GalaxyPanelType_600);
                interfaceBoardType.GalaxyPanelModelUids.Add(GalaxyPanelTypeIds.GalaxyPanelType_635);

                //imageSource = new BitmapImage(new Uri("pack://application:,,,/GalaxySMS.Resources;component/Images/BoardType/CardTourManager.png", UriKind.Absolute));
                //interfaceBoardType.gcsBinaryResource.BinaryResource = imageSource.ToByteArray();

                galaxyInterfaceBoardTypes.Add(interfaceBoardType);

                // The 600 DSI is not supported with this platform
                //interfaceBoardType = new InterfaceBoardType()
                //{
                //    InterfaceBoardTypeUid =
                //        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                //            .GalaxyInterfaceBoardType_DualSerialInterface600,
                //    TypeCode = (short)GalaxySMS.Common.Enums.GalaxyInterfaceBoardType.DualSerialInterfaceBoard600,
                //    NumberOfSections = 2,
                //    Model = GalaxySMS.Common.Enums.GalaxyModel.Model600.ToString(),
                //    Display = SharedResources.Resources.GalaxyInterfaceBoardType_DigitalSerialInterface600_Display,
                //    Description =
                //        SharedResources.Resources.GalaxyInterfaceBoardType_DigitalSerialInterface600_Description,
                //    UniqueResourceName =
                //        GalaxySMS.Common.Enums.GalaxyInterfaceBoardType.DualSerialInterfaceBoard600.ToString()
                //};
                //interfaceBoardType.GalaxyPanelModelUids.Add(GalaxyPanelTypeIds.GalaxyPanelType_600);
                //interfaceBoardType.GalaxyPanelModelUids.Add(GalaxyPanelTypeIds.GalaxyPanelType_635);
                //galaxyInterfaceBoardTypes.Add(interfaceBoardType);

                interfaceBoardType = new InterfaceBoardType()
                {
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DualSerialInterface635,
                    TypeCode = (short)GalaxySMS.Common.Enums.GalaxyInterfaceBoardType.DualSerialInterfaceBoard635,
                    NumberOfSections = 2,
                    Model = GalaxySMS.Common.Enums.GalaxyModel.Model635.ToString(),
                    Display = SharedResources.Resources.GalaxyInterfaceBoardType_DigitalSerialInterface635_Display,
                    Description =
                        SharedResources.Resources.GalaxyInterfaceBoardType_DigitalSerialInterface635_Description,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.GalaxyInterfaceBoardType.DualSerialInterfaceBoard635.ToString()
                };
                interfaceBoardType.GalaxyPanelModelUids.Add(GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardTypes.Add(interfaceBoardType);

                interfaceBoardType = new InterfaceBoardType()
                {
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DualReaderInterface600,
                    TypeCode = (short)GalaxySMS.Common.Enums.GalaxyInterfaceBoardType.DualReaderInterfaceBoard600,
                    NumberOfSections = 2,
                    Model = GalaxySMS.Common.Enums.GalaxyModel.Model600.ToString(),
                    Display = SharedResources.Resources.GalaxyInterfaceBoardType_DualReaderInterface600_Display,
                    Description = SharedResources.Resources.GalaxyInterfaceBoardType_DualReaderInterface600_Description,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.GalaxyInterfaceBoardType.DualReaderInterfaceBoard600.ToString()
                };
                interfaceBoardType.GalaxyPanelModelUids.Add(GalaxyPanelTypeIds.GalaxyPanelType_600);
                interfaceBoardType.GalaxyPanelModelUids.Add(GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardTypes.Add(interfaceBoardType);

                interfaceBoardType = new InterfaceBoardType()
                {
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DualReaderInterface635,
                    TypeCode = (short)GalaxySMS.Common.Enums.GalaxyInterfaceBoardType.DualReaderInterfaceBoard635,
                    NumberOfSections = 2,
                    Model = GalaxySMS.Common.Enums.GalaxyModel.Model635.ToString(),
                    Display = SharedResources.Resources.GalaxyInterfaceBoardType_DualReaderInterface635_Display,
                    Description = SharedResources.Resources.GalaxyInterfaceBoardType_DualReaderInterface635_Description,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.GalaxyInterfaceBoardType.DualReaderInterfaceBoard635.ToString()
                };
                interfaceBoardType.GalaxyPanelModelUids.Add(GalaxyPanelTypeIds.GalaxyPanelType_600);
                interfaceBoardType.GalaxyPanelModelUids.Add(GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardTypes.Add(interfaceBoardType);

                interfaceBoardType = new InterfaceBoardType()
                {
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_OtisElevatorInterface,
                    TypeCode = (short)GalaxySMS.Common.Enums.GalaxyInterfaceBoardType.OtisElevatorInterface,
                    NumberOfSections = 1,
                    Model = GalaxySMS.Common.Enums.GalaxyModel.Model635.ToString(),
                    Display = SharedResources.Resources.GalaxyInterfaceBoardType_OtisElevatorInterface_Display,
                    Description = SharedResources.Resources.GalaxyInterfaceBoardType_OtisElevatorInterface_Description,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.GalaxyInterfaceBoardType.OtisElevatorInterface.ToString()
                };
                interfaceBoardType.GalaxyPanelModelUids.Add(GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardTypes.Add(interfaceBoardType);

                interfaceBoardType = new InterfaceBoardType()
                {
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_KoneElevatorInterface,
                    TypeCode = (short)GalaxySMS.Common.Enums.GalaxyInterfaceBoardType.KoneElevatorInterface,
                    NumberOfSections = 1,
                    Model = GalaxySMS.Common.Enums.GalaxyModel.Model635.ToString(),
                    Display = SharedResources.Resources.GalaxyInterfaceBoardType_KoneElevatorInterface_Display,
                    Description = SharedResources.Resources.GalaxyInterfaceBoardType_KoneElevatorInterface_Description,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.GalaxyInterfaceBoardType.KoneElevatorInterface.ToString()
                };
                interfaceBoardType.GalaxyPanelModelUids.Add(GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardTypes.Add(interfaceBoardType);

                #endregion

                #region Galaxy Interface Board Section Mode

                var galaxyInterfaceBoardSectionModes = new List<InterfaceBoardSectionMode>();

                // Dual Reader Interface Modes
                // Unused
                var galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.DualReaderInterface600ModeIds.ReaderInterfaceMode_Unused,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DualReaderInterface600,
                    Display = SharedResources.Resources.ReaderInterfaceMode_Unused_Display,
                    Description = SharedResources.Resources.ReaderInterfaceMode_Unused_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.ReaderInterfaceSectionMode.Unused,
                    UniqueResourceName = GalaxySMS.Common.Enums.ReaderInterfaceSectionMode.Unused.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.DualReaderInterface635ModeIds.ReaderInterfaceMode_Unused,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DualReaderInterface635,
                    Display = SharedResources.Resources.ReaderInterfaceMode_Unused_Display,
                    Description = SharedResources.Resources.ReaderInterfaceMode_Unused_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.ReaderInterfaceSectionMode.Unused,
                    UniqueResourceName = GalaxySMS.Common.Enums.ReaderInterfaceSectionMode.Unused.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                // Access Portal
                galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.DualReaderInterface600ModeIds.ReaderInterfaceMode_AccessPortal,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DualReaderInterface600,
                    Display = SharedResources.Resources.ReaderInterfaceMode_AccessPortal_Display,
                    Description = SharedResources.Resources.ReaderInterfaceMode_AccessPortal_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.ReaderInterfaceSectionMode.AccessPortal,
                    UniqueResourceName = GalaxySMS.Common.Enums.ReaderInterfaceSectionMode.AccessPortal.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);

                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);


                galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.DualReaderInterface635ModeIds.ReaderInterfaceMode_AccessPortal,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DualReaderInterface635,
                    Display = SharedResources.Resources.ReaderInterfaceMode_AccessPortal_Display,
                    Description = SharedResources.Resources.ReaderInterfaceMode_AccessPortal_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.ReaderInterfaceSectionMode.AccessPortal,
                    UniqueResourceName = GalaxySMS.Common.Enums.ReaderInterfaceSectionMode.AccessPortal.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                //// Credential Reader Only
                //galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                //{
                //    InterfaceBoardSectionModeUid = GalaxySMS.Common.Constants.DualReaderInterface600ModeIds.ReaderInterfaceMode_CredentialReaderOnly,
                //    InterfaceBoardTypeUid = GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds.GalaxyInterfaceBoardType_DualReaderInterface600,
                //    Display = SharedResources.Resources.ReaderInterfaceMode_CredentialReaderOnly_Display,
                //    Description = SharedResources.Resources.ReaderInterfaceMode_CredentialReaderOnly_Description,
                //    ModeCode = (short) GalaxySMS.Common.Enums.ReaderInterfaceSectionMode.CredentialReaderOnly,
                //    UniqueResourceName = GalaxySMS.Common.Enums.ReaderInterfaceSectionMode.CredentialReaderOnly.ToString()
                //};
                //galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                //galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                //galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.DualReaderInterface635ModeIds
                            .ReaderInterfaceMode_CredentialReaderOnly,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DualReaderInterface635,
                    Display = SharedResources.Resources.ReaderInterfaceMode_CredentialReaderOnly_Display,
                    Description = SharedResources.Resources.ReaderInterfaceMode_CredentialReaderOnly_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.ReaderInterfaceSectionMode.CredentialReaderOnly,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.ReaderInterfaceSectionMode.CredentialReaderOnly.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);


                // DIO Modes
                galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.DigitalInputOutputBoardInterfaceSectionModeIds.DIOSectionMode_Outputs,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DigitalInputOutput600,
                    Display = SharedResources.Resources.DigitalInputOutputInterfaceMode_Outputs_Display,
                    Description = SharedResources.Resources.DigitalInputOutputInterfaceMode_Outputs_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.DigitalInputOutputBoardInterfaceSectionMode.Outputs,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.DigitalInputOutputBoardInterfaceSectionMode.Outputs.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.DigitalInputOutputBoardInterfaceSectionModeIds.DIOSectionMode_Inputs,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DigitalInputOutput600,
                    Display = SharedResources.Resources.DigitalInputOutputInterfaceMode_Inputs_Display,
                    Description = SharedResources.Resources.DigitalInputOutputInterfaceMode_Inputs_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.DigitalInputOutputBoardInterfaceSectionMode.Inputs,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.DigitalInputOutputBoardInterfaceSectionMode.Inputs.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                // DSI Modes 
                // Unused
                //galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                //{
                //    InterfaceBoardSectionModeUid =
                //        GalaxySMS.Common.Constants.DualSerialInterface600ChannelModeIds.DualSerialChannelMode_Unused,
                //    InterfaceBoardTypeUid =
                //        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                //            .GalaxyInterfaceBoardType_DualSerialInterface600,
                //    Display = SharedResources.Resources.DualSerialInterfaceBoardMode_Unused_Display,
                //    Description = SharedResources.Resources.DualSerialInterfaceBoardMode_Unused_Description,
                //    ModeCode = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.Unused,
                //    UniqueResourceName = GalaxySMS.Common.Enums.DualSerialChannelMode.Unused.ToString()
                //};
                //galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                //    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                //galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                //    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                //galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.DualSerialInterface635ChannelModeIds.DualSerialChannelMode_Unused,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DualSerialInterface635,
                    Display = SharedResources.Resources.DualSerialInterfaceBoardMode_Unused_Display,
                    Description = SharedResources.Resources.DualSerialInterfaceBoardMode_Unused_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.Unused,
                    UniqueResourceName = GalaxySMS.Common.Enums.DualSerialChannelMode.Unused.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                // Elevator Relays
                //galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                //{
                //    InterfaceBoardSectionModeUid =
                //        GalaxySMS.Common.Constants.DualSerialInterface600ChannelModeIds
                //            .DualSerialChannelMode_ElevatorRelays,
                //    InterfaceBoardTypeUid =
                //        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                //            .GalaxyInterfaceBoardType_DualSerialInterface600,
                //    Display = SharedResources.Resources.DualSerialInterfaceBoardMode_ElevatorRelays_Display,
                //    Description = SharedResources.Resources.DualSerialInterfaceBoardMode_ElevatorRelays_Description,
                //    ModeCode = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.ElevatorRelays,
                //    UniqueResourceName = GalaxySMS.Common.Enums.DualSerialChannelMode.ElevatorRelays.ToString()
                //};
                //galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                //    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                //galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                //    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                //galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.DualSerialInterface635ChannelModeIds
                            .DualSerialChannelMode_ElevatorRelays,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DualSerialInterface635,
                    Display = SharedResources.Resources.DualSerialInterfaceBoardMode_ElevatorRelays_Display,
                    Description = SharedResources.Resources.DualSerialInterfaceBoardMode_ElevatorRelays_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.ElevatorRelays,
                    UniqueResourceName = GalaxySMS.Common.Enums.DualSerialChannelMode.ElevatorRelays.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);


                // Output Relay Modules
                //galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                //{
                //    InterfaceBoardSectionModeUid =
                //        GalaxySMS.Common.Constants.DualSerialInterface600ChannelModeIds
                //            .DualSerialChannelMode_OutputRelays,
                //    InterfaceBoardTypeUid =
                //        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                //            .GalaxyInterfaceBoardType_DualSerialInterface600,
                //    Display = SharedResources.Resources.DualSerialInterfaceBoardMode_OutputRelayModules_Display,
                //    Description = SharedResources.Resources.DualSerialInterfaceBoardMode_OutputRelayModules_Description,
                //    ModeCode = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.OutputRelays,
                //    UniqueResourceName = GalaxySMS.Common.Enums.DualSerialChannelMode.OutputRelays.ToString()
                //};
                //galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                //    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                //galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                //    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                //galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.DualSerialInterface635ChannelModeIds
                            .DualSerialChannelMode_OutputRelays,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DualSerialInterface635,
                    Display = SharedResources.Resources.DualSerialInterfaceBoardMode_OutputRelayModules_Display,
                    Description = SharedResources.Resources.DualSerialInterfaceBoardMode_OutputRelayModules_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.OutputRelays,
                    UniqueResourceName = GalaxySMS.Common.Enums.DualSerialChannelMode.OutputRelays.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                // Cypress Clock Display
                //galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                //{
                //    InterfaceBoardSectionModeUid =
                //        GalaxySMS.Common.Constants.DualSerialInterface600ChannelModeIds
                //            .DualSerialChannelMode_CypressClockDisplay,
                //    InterfaceBoardTypeUid =
                //        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                //            .GalaxyInterfaceBoardType_DualSerialInterface600,
                //    Display = SharedResources.Resources.DualSerialInterfaceBoardMode_CypressClockDisplay_Display,
                //    Description = SharedResources.Resources.DualSerialInterfaceBoardMode_CypressClockDisplay_Description,
                //    ModeCode = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.CypressClockDisplay,
                //    UniqueResourceName = GalaxySMS.Common.Enums.DualSerialChannelMode.CypressClockDisplay.ToString()
                //};
                //galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                //    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                //galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                //    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                //galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.DualSerialInterface635ChannelModeIds
                            .DualSerialChannelMode_CypressClockDisplay,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DualSerialInterface635,
                    Display = SharedResources.Resources.DualSerialInterfaceBoardMode_CypressClockDisplay_Display,
                    Description = SharedResources.Resources.DualSerialInterfaceBoardMode_CypressClockDisplay_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.CypressClockDisplay,
                    UniqueResourceName = GalaxySMS.Common.Enums.DualSerialChannelMode.CypressClockDisplay.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                // Cypress LCD 4x20 Mode
                //galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                //{
                //    InterfaceBoardSectionModeUid =
                //        GalaxySMS.Common.Constants.DualSerialInterface600ChannelModeIds
                //            .DualSerialChannelMode_LCD_4x20Display,
                //    InterfaceBoardTypeUid =
                //        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                //            .GalaxyInterfaceBoardType_DualSerialInterface600,
                //    Display = SharedResources.Resources.DualSerialInterfaceBoardMode_CypressLCDDisplay_Display,
                //    Description = SharedResources.Resources.DualSerialInterfaceBoardMode_CypressLCDDisplay_Description,
                //    ModeCode = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.LCD_4x20Display,
                //    UniqueResourceName = GalaxySMS.Common.Enums.DualSerialChannelMode.LCD_4x20Display.ToString()
                //};
                //galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                //    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                //galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                //    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                //galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.DualSerialInterface635ChannelModeIds
                            .DualSerialChannelMode_LCD_4x20Display,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DualSerialInterface635,
                    Display = SharedResources.Resources.DualSerialInterfaceBoardMode_CypressLCDDisplay_Display,
                    Description = SharedResources.Resources.DualSerialInterfaceBoardMode_CypressLCDDisplay_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.LCD_4x20Display,
                    UniqueResourceName = GalaxySMS.Common.Enums.DualSerialChannelMode.LCD_4x20Display.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);


                // Veridt
                //galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                //{
                //    InterfaceBoardSectionModeUid =
                //        GalaxySMS.Common.Constants.DualSerialInterface600ChannelModeIds.DualSerialChannelMode_VeridtCac,
                //    InterfaceBoardTypeUid =
                //        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                //            .GalaxyInterfaceBoardType_DualSerialInterface600,
                //    Display = SharedResources.Resources.DualSerialInterfaceBoardMode_VeridtCAC_Display,
                //    Description = SharedResources.Resources.DualSerialInterfaceBoardMode_VeridtCAC_Description,
                //    ModeCode = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.VeridtCac,
                //    UniqueResourceName = GalaxySMS.Common.Enums.DualSerialChannelMode.VeridtCac.ToString()
                //};
                //galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                //    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                //galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                //    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                //galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.DualSerialInterface635ChannelModeIds.DualSerialChannelMode_VeridtCac,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DualSerialInterface635,
                    Display = SharedResources.Resources.DualSerialInterfaceBoardMode_VeridtCAC_Display,
                    Description = SharedResources.Resources.DualSerialInterfaceBoardMode_VeridtCAC_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.VeridtCac,
                    UniqueResourceName = GalaxySMS.Common.Enums.DualSerialChannelMode.VeridtCac.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);


                // Allegion PIM Wiegand Mode
                //galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                //{
                //    InterfaceBoardSectionModeUid =
                //        GalaxySMS.Common.Constants.DualSerialInterface600ChannelModeIds
                //            .DualSerialChannelMode_AllegionPimWiegand,
                //    InterfaceBoardTypeUid =
                //        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                //            .GalaxyInterfaceBoardType_DualSerialInterface600,
                //    Display = SharedResources.Resources.DualSerialInterfaceBoardMode_AllegionPimWiegand_Display,
                //    Description = SharedResources.Resources.DualSerialInterfaceBoardMode_AllegionPimWiegand_Description,
                //    ModeCode = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.AllegionPimWiegand,
                //    UniqueResourceName = GalaxySMS.Common.Enums.DualSerialChannelMode.AllegionPimWiegand.ToString()
                //};
                //galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                //    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                //galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                //    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                //galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.DualSerialInterface635ChannelModeIds
                            .DualSerialChannelMode_AllegionPimWiegand,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DualSerialInterface635,
                    Display = SharedResources.Resources.DualSerialInterfaceBoardMode_AllegionPimWiegand_Display,
                    Description = SharedResources.Resources.DualSerialInterfaceBoardMode_AllegionPimWiegand_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.AllegionPimWiegand,
                    UniqueResourceName = GalaxySMS.Common.Enums.DualSerialChannelMode.AllegionPimWiegand.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);


                // Allegion PIM ABA Mode
                //galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                //{
                //    InterfaceBoardSectionModeUid =
                //        GalaxySMS.Common.Constants.DualSerialInterface600ChannelModeIds
                //            .DualSerialChannelMode_AllegionPimAba,
                //    InterfaceBoardTypeUid =
                //        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                //            .GalaxyInterfaceBoardType_DualSerialInterface600,
                //    Display = SharedResources.Resources.DualSerialInterfaceBoardMode_AllegionPimABA_Display,
                //    Description = SharedResources.Resources.DualSerialInterfaceBoardMode_AllegionPimABA_Description,
                //    ModeCode = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.AllegionPimAba,
                //    UniqueResourceName = GalaxySMS.Common.Enums.DualSerialChannelMode.AllegionPimAba.ToString()
                //};
                //galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                //    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                //galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                //    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                //galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.DualSerialInterface635ChannelModeIds
                            .DualSerialChannelMode_AllegionPimAba,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DualSerialInterface635,
                    Display = SharedResources.Resources.DualSerialInterfaceBoardMode_AllegionPimABA_Display,
                    Description = SharedResources.Resources.DualSerialInterfaceBoardMode_AllegionPimABA_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.AllegionPimAba,
                    UniqueResourceName = GalaxySMS.Common.Enums.DualSerialChannelMode.AllegionPimAba.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                // The following are not supported on 600 series CPUs
                // Assa Abloy Aperio
                //galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                //{
                //    InterfaceBoardSectionModeUid =
                //        GalaxySMS.Common.Constants.DualSerialInterface600ChannelModeIds
                //            .DualSerialChannelMode_AssaAbloyAperio,
                //    InterfaceBoardTypeUid =
                //        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                //            .GalaxyInterfaceBoardType_DualSerialInterface600,
                //    Display = SharedResources.Resources.DualSerialInterfaceBoardMode_AssaAbloyAperio_Display,
                //    Description = SharedResources.Resources.DualSerialInterfaceBoardMode_AssaAbloyAperio_Description,
                //    ModeCode = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.AssaAbloyAperio,
                //    UniqueResourceName = GalaxySMS.Common.Enums.DualSerialChannelMode.AssaAbloyAperio.ToString()
                //};
                //galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                //    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                //galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.DualSerialInterface635ChannelModeIds
                            .DualSerialChannelMode_AssaAbloyAperio,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DualSerialInterface635,
                    Display = SharedResources.Resources.DualSerialInterfaceBoardMode_AssaAbloyAperio_Display,
                    Description = SharedResources.Resources.DualSerialInterfaceBoardMode_AssaAbloyAperio_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.AssaAbloyAperio,
                    UniqueResourceName = GalaxySMS.Common.Enums.DualSerialChannelMode.AssaAbloyAperio.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                // Salto Sallis
                //galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                //{
                //    InterfaceBoardSectionModeUid =
                //        GalaxySMS.Common.Constants.DualSerialInterface600ChannelModeIds
                //            .DualSerialChannelMode_SaltoSallis,
                //    InterfaceBoardTypeUid =
                //        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                //            .GalaxyInterfaceBoardType_DualSerialInterface600,
                //    Display = SharedResources.Resources.DualSerialInterfaceBoardMode_SaltoSallisRF_Display,
                //    Description = SharedResources.Resources.DualSerialInterfaceBoardMode_SaltoSallisRF_Description,
                //    ModeCode = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.SaltoSallis,
                //    UniqueResourceName = GalaxySMS.Common.Enums.DualSerialChannelMode.SaltoSallis.ToString()
                //};
                //galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                //    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                //galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.DualSerialInterface635ChannelModeIds
                            .DualSerialChannelMode_SaltoSallis,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DualSerialInterface635,
                    Display = SharedResources.Resources.DualSerialInterfaceBoardMode_SaltoSallisRF_Display,
                    Description = SharedResources.Resources.DualSerialInterfaceBoardMode_SaltoSallisRF_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.SaltoSallis,
                    UniqueResourceName = GalaxySMS.Common.Enums.DualSerialChannelMode.SaltoSallis.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                // The following modes are only supported by the Model 635 DSI and 635 CPU
                // RS-485 Door Module
                galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.DualSerialInterface635ChannelModeIds
                            .DualSerialChannelMode_RS485DoorModule,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DualSerialInterface635,
                    Display = SharedResources.Resources.DualSerialInterfaceBoardMode_RS485DoorModules_Display,
                    Description = SharedResources.Resources.DualSerialInterfaceBoardMode_RS485DoorModules_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.RS485DoorModule,
                    UniqueResourceName = GalaxySMS.Common.Enums.DualSerialChannelMode.RS485DoorModule.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                // RS-485 Input Module
                galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.DualSerialInterface635ChannelModeIds
                            .DualSerialChannelMode_RS485InputModule,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DualSerialInterface635,
                    Display = SharedResources.Resources.DualSerialInterfaceBoardMode_RS485InputModules_Display,
                    Description = SharedResources.Resources.DualSerialInterfaceBoardMode_RS485InputModules_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.DualSerialChannelMode.RS485InputModule,
                    UniqueResourceName = GalaxySMS.Common.Enums.DualSerialChannelMode.RS485InputModule.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                //// Card Tour Manager 
                //galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                //{
                //    InterfaceBoardSectionModeUid =
                //        GalaxySMS.Common.Constants.CardTourManagerBoardInterfaceSectionModeIds.CTMSectionMode_CTM,
                //    InterfaceBoardTypeUid =
                //        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds.GalaxyInterfaceBoardType_CardTourManager,
                //    Display = SharedResources.Resources.CardTourManagerBoardInterfaceSectionMode_CTM_Display,
                //    Description = SharedResources.Resources.CardTourManagerBoardInterfaceSectionMode_CTM_Description,
                //    ModeCode = (short)GalaxySMS.Common.Enums.CardTourManagerBoardInterfaceSectionMode.CTM,
                //    UniqueResourceName = GalaxySMS.Common.Enums.CardTourManagerBoardInterfaceSectionMode.CTM.ToString()
                //};
                //galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                //    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                //galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);


                // Otis Elevator Manager 
                galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.OtisElevatorManagerBoardInterfaceSectionModeIds
                            .OtisElevatorManagerSectionMode_OEI,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_OtisElevatorInterface,
                    Display = SharedResources.Resources.OtisElevatorManagerBoardInterfaceSectionMode_OEI_Display,
                    Description = SharedResources.Resources.OtisElevatorManagerBoardInterfaceSectionMode_OEI_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.OtisElevatorManagerBoardInterfaceSectionMode.OEI,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.OtisElevatorManagerBoardInterfaceSectionMode.OEI.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                // KONE Elevator Manager 
                galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.KoneElevatorManagerBoardInterfaceSectionModeIds
                            .KoneElevatorManagerSectionMode_KEI,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_KoneElevatorInterface,
                    Display = SharedResources.Resources.KoneElevatorManagerBoardInterfaceSectionMode_KEI_Display,
                    Description = SharedResources.Resources.KoneElevatorManagerBoardInterfaceSectionMode_KEI_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.KoneElevatorManagerBoardInterfaceSectionMode.KEI,
                    UniqueResourceName = GalaxySMS.Common.Enums.KoneElevatorManagerBoardInterfaceSectionMode.KEI.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);


                // Veridt CPU Board 
                galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.VeridtCpuBoardInterfaceSectionModeIds.VeridtCpuBoardInterfaceSectionMode_Cpu,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds.GalaxyInterfaceBoardType_Veridt_Cpu,
                    Display = SharedResources.Resources.VeridtCpuBoardInterfaceSectionMode_Display,
                    Description = SharedResources.Resources.VeridtCpuBoardInterfaceSectionMode_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.VeridtCpuBoardInterfaceSectionMode.VeridtCpu,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.VeridtCpuBoardInterfaceSectionMode.VeridtCpu.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);

                // Veridt Reader Board 
                galaxyInterfaceBoardSectionMode = new InterfaceBoardSectionMode()
                {
                    InterfaceBoardSectionModeUid =
                        GalaxySMS.Common.Constants.VeridtReaderModuleBoardInterfaceSectionModeIds.VeridtReaderModuleBoardInterfaceSectionMode_Reader,
                    InterfaceBoardTypeUid =
                        GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds.GalaxyInterfaceBoardType_Veridt_ReaderModule,
                    Display = SharedResources.Resources.VeridtReaderBoardInterfaceSectionMode_Display,
                    Description = SharedResources.Resources.VeridtReaderBoardInterfaceSectionMode_Description,
                    ModeCode = (short)GalaxySMS.Common.Enums.VeridtReaderBoardInterfaceSectionMode.VeridtReader,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.VeridtReaderBoardInterfaceSectionMode.VeridtReader.ToString()
                };
                galaxyInterfaceBoardSectionMode.GalaxyPanelModelUids.Add(
                    GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                galaxyInterfaceBoardSectionModes.Add(galaxyInterfaceBoardSectionMode);
                #endregion

                #region Galaxy Interface Board Section Commands

                var galaxyInterfaceBoardSectionCommands = new List<GalaxyInterfaceBoardSectionCommand>();

                var galaxyInterfaceBoardSectionCommand = new GalaxyInterfaceBoardSectionCommand()
                {
                    GalaxyInterfaceBoardSectionCommandUid = GalaxySMS.Common.Constants.GalaxyInterfaceBoardSectionCommandIds.GalaxyInterfaceBoardSectionCommand_RequestSerialChannelRS485DeviceInfo,
                    Display = SharedResources.Resources.GalaxyInterfaceBoardSectionCommand_RequestSerialChannelRS485DeviceInfo_Display,
                    Description = SharedResources.Resources.GalaxyInterfaceBoardSectionCommand_RequestSerialChannelRS485DeviceInfo_Description,
                    CommandCode = (short)GalaxySMS.Common.Enums.GalaxyInterfaceBoardSectionCommandActionCode.RequestSerialChannelRS485DeviceInfo,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyInterfaceBoardSectionCommandActionCode.RequestSerialChannelRS485DeviceInfo.ToString(),
                    IsActive = true
                };
                galaxyInterfaceBoardSectionCommand.InterfaceBoardSectionModeIds.Add(GalaxySMS.Common.Constants.DualSerialInterface635ChannelModeIds
                            .DualSerialChannelMode_RS485InputModule);
                galaxyInterfaceBoardSectionCommand.InterfaceBoardSectionModeIds.Add(GalaxySMS.Common.Constants.DualSerialInterface635ChannelModeIds
                            .DualSerialChannelMode_RS485DoorModule);

                galaxyInterfaceBoardSectionCommands.Add(galaxyInterfaceBoardSectionCommand);
                #endregion

                #region Galaxy Hardware Module Types

                var hardwareModuleTypes = new List<GalaxyHardwareModuleType>();

                var moduleType = new GalaxyHardwareModuleType()
                {
                    GalaxyHardwareModuleTypeUid =
                        GalaxySMS.Common.Constants.GalaxyHardwareModuleTypeIds.GalaxyHardwareModuleType_RelayModule8,
                    Display = SharedResources.Resources.GalaxyHardwareModuleType_RelayModule8_Display,
                    Description = SharedResources.Resources.GalaxyHardwareModuleType_RelayModule8_Description,
                    ModuleTypeCode = (short)GalaxySMS.Common.Enums.GalaxyHardwareModuleType.RelayModule8,
                    NumberOfNodes = 8,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyHardwareModuleType.RelayModule8.ToString()
                };
                hardwareModuleTypes.Add(moduleType);

                moduleType = new GalaxyHardwareModuleType()
                {
                    GalaxyHardwareModuleTypeUid =
                        GalaxySMS.Common.Constants.GalaxyHardwareModuleTypeIds.GalaxyHardwareModuleType_InputModule16,
                    Display = SharedResources.Resources.GalaxyHardwareModuleType_InputModule16_Display,
                    Description = SharedResources.Resources.GalaxyHardwareModuleType_InputModule16_Description,
                    ModuleTypeCode = (short)GalaxySMS.Common.Enums.GalaxyHardwareModuleType.InputModule16,
                    NumberOfNodes = 16,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyHardwareModuleType.InputModule16.ToString()
                };
                hardwareModuleTypes.Add(moduleType);

                moduleType = new GalaxyHardwareModuleType()
                {
                    GalaxyHardwareModuleTypeUid =
                        GalaxySMS.Common.Constants.GalaxyHardwareModuleTypeIds.GalaxyHardwareModuleType_RemoteDoorModule,
                    Display = SharedResources.Resources.GalaxyHardwareModuleType_RemoteDoorModule_Display,
                    Description = SharedResources.Resources.GalaxyHardwareModuleType_RemoteDoorModule_Description,
                    ModuleTypeCode = (short)GalaxySMS.Common.Enums.GalaxyHardwareModuleType.RemoteDoorModule,
                    NumberOfNodes = 16, // Maximum of 16 doors per channel
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyHardwareModuleType.RemoteDoorModule.ToString()
                };
                hardwareModuleTypes.Add(moduleType);

                moduleType = new GalaxyHardwareModuleType()
                {
                    GalaxyHardwareModuleTypeUid =
                        GalaxySMS.Common.Constants.GalaxyHardwareModuleTypeIds.GalaxyHardwareModuleType_CypressLCD,
                    Display = SharedResources.Resources.GalaxyHardwareModuleType_CypressLCD_Display,
                    Description = SharedResources.Resources.GalaxyHardwareModuleType_CypressLCD_Description,
                    ModuleTypeCode = (short)GalaxySMS.Common.Enums.GalaxyHardwareModuleType.CypressLCD,
                    NumberOfNodes = 16,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyHardwareModuleType.CypressLCD.ToString()
                };
                hardwareModuleTypes.Add(moduleType);

                moduleType = new GalaxyHardwareModuleType()
                {
                    GalaxyHardwareModuleTypeUid =
                        GalaxySMS.Common.Constants.GalaxyHardwareModuleTypeIds.GalaxyHardwareModuleType_AllegionPIM,
                    Display = SharedResources.Resources.GalaxyHardwareModuleType_AllegionPIM_Display,
                    Description = SharedResources.Resources.GalaxyHardwareModuleType_AllegionPIM_Description,
                    ModuleTypeCode = (short)GalaxySMS.Common.Enums.GalaxyHardwareModuleType.AllegionPIM,
                    NumberOfNodes = 16,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyHardwareModuleType.AllegionPIM.ToString()
                };
                hardwareModuleTypes.Add(moduleType);

                moduleType = new GalaxyHardwareModuleType()
                {
                    GalaxyHardwareModuleTypeUid =
                        GalaxySMS.Common.Constants.GalaxyHardwareModuleTypeIds.GalaxyHardwareModuleType_SaltoSallisHub,
                    Display = SharedResources.Resources.GalaxyHardwareModuleType_SaltoSallisHub_Display,
                    Description = SharedResources.Resources.GalaxyHardwareModuleType_SaltoSallisHub_Description,
                    ModuleTypeCode = (short)GalaxySMS.Common.Enums.GalaxyHardwareModuleType.SaltoSallisHub,
                    NumberOfNodes = 16,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyHardwareModuleType.SaltoSallisHub.ToString()
                };
                hardwareModuleTypes.Add(moduleType);

                moduleType = new GalaxyHardwareModuleType()
                {
                    GalaxyHardwareModuleTypeUid =
                        GalaxySMS.Common.Constants.GalaxyHardwareModuleTypeIds
                            .GalaxyHardwareModuleType_AssaAbloyAperioHub,
                    Display = SharedResources.Resources.GalaxyHardwareModuleType_AssaAbloyAperioHub_Display,
                    Description = SharedResources.Resources.GalaxyHardwareModuleType_AssaAbloyAperioHub_Description,
                    ModuleTypeCode = (short)GalaxySMS.Common.Enums.GalaxyHardwareModuleType.AssaAbloyAperioHub,
                    NumberOfNodes = 16,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyHardwareModuleType.AssaAbloyAperioHub.ToString()
                };
                hardwareModuleTypes.Add(moduleType);

                moduleType = new GalaxyHardwareModuleType()
                {
                    GalaxyHardwareModuleTypeUid =
                        GalaxySMS.Common.Constants.GalaxyHardwareModuleTypeIds.GalaxyHardwareModuleType_ReaderPortModule,
                    Display = SharedResources.Resources.GalaxyHardwareModuleType_ReaderPortModule_Display,
                    Description = SharedResources.Resources.GalaxyHardwareModuleType_ReaderPortModule_Description,
                    ModuleTypeCode = (short)GalaxySMS.Common.Enums.GalaxyHardwareModuleType.ReaderPortModule,
                    NumberOfNodes = 1,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyHardwareModuleType.ReaderPortModule.ToString()
                };
                hardwareModuleTypes.Add(moduleType);

                moduleType = new GalaxyHardwareModuleType()
                {
                    GalaxyHardwareModuleTypeUid =
                        GalaxySMS.Common.Constants.GalaxyHardwareModuleTypeIds
                            .GalaxyHardwareModuleType_DigitalInputOutputInputModule,
                    Display = SharedResources.Resources.GalaxyHardwareModuleType_DigitalInputOutputInputModule_Display,
                    Description =
                        SharedResources.Resources.GalaxyHardwareModuleType_DigitalInputOutputInputModule_Description,
                    ModuleTypeCode =
                        (short)GalaxySMS.Common.Enums.GalaxyHardwareModuleType.DigitalInputOutputInputModule,
                    NumberOfNodes = 8,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.GalaxyHardwareModuleType.DigitalInputOutputInputModule.ToString()
                };
                hardwareModuleTypes.Add(moduleType);


                moduleType = new GalaxyHardwareModuleType()
                {
                    GalaxyHardwareModuleTypeUid =
                        GalaxySMS.Common.Constants.GalaxyHardwareModuleTypeIds
                            .GalaxyHardwareModuleType_DigitalInputOutputOutputModule,
                    Display = SharedResources.Resources.GalaxyHardwareModuleType_DigitalInputOutputOutputModule_Display,
                    Description =
                        SharedResources.Resources.GalaxyHardwareModuleType_DigitalInputOutputOutputModule_Description,
                    ModuleTypeCode =
                        (short)GalaxySMS.Common.Enums.GalaxyHardwareModuleType.DigitalInputOutputOutputModule,
                    NumberOfNodes = 4,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.GalaxyHardwareModuleType.DigitalInputOutputOutputModule.ToString()
                };
                hardwareModuleTypes.Add(moduleType);

                #endregion

                #region Credential Data Lengths

                var credentialDataLengths = new List<CredentialDataLength>();

                var credentialDataLength = new CredentialDataLength()
                {
                    CredentialDataLengthUid = GalaxySMS.Common.Constants.CredentialDataLengthIds.Standard48Bits,
                    Display = SharedResources.Resources.CredentialDataLength_Standard48Bits_Display,
                    Description = SharedResources.Resources.CredentialDataLength_Standard48Bits_Description,
                    DataLength = (short)GalaxySMS.Common.Constants.CredentialDataByteArrayLength.Standard48Bit,//(short)GalaxySMS.Common.Enums.CredentialDataSize.Standard48Bits,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialDataSize.Standard48Bits.ToString()
                };
                credentialDataLengths.Add(credentialDataLength);

                credentialDataLength = new CredentialDataLength()
                {
                    CredentialDataLengthUid = GalaxySMS.Common.Constants.CredentialDataLengthIds.Extended256Bits,
                    Display = SharedResources.Resources.CredentialDataLength_Extended256Bits_Display,
                    Description = SharedResources.Resources.CredentialDataLength_Extended256Bits_Description,
                    DataLength = (short)GalaxySMS.Common.Constants.CredentialDataByteArrayLength.Extended256Bits,//(short)GalaxySMS.Common.Enums.CredentialDataSize.Extended256Bits,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialDataSize.Extended256Bits.ToString()
                };
                credentialDataLengths.Add(credentialDataLength);

                #endregion

                #region Time Schedule Types

                var timeScheduleTypes = new List<TimeScheduleType>();

                var timeScheduleType = new TimeScheduleType()
                {
                    TimeScheduleTypeUid =
                        GalaxySMS.Common.Constants.TimeScheduleTypeIds.TimeScheduleType_GalaxyLegacy15MinuteInterval,
                    Display = SharedResources.Resources.TimeScheduleType_GalaxyLegacy15MinuteInterval_Display,
                    Description = SharedResources.Resources.TimeScheduleType_GalaxyLegacy15MinuteInterval_Description,
                    ScheduleTypeCode = (short)GalaxySMS.Common.Enums.TimeScheduleType.GalaxyFifteenMinuteInterval,
                    UniqueResourceName = GalaxySMS.Common.Enums.TimeScheduleType.GalaxyFifteenMinuteInterval.ToString()
                };
                timeScheduleTypes.Add(timeScheduleType);

                timeScheduleType = new TimeScheduleType()
                {
                    TimeScheduleTypeUid =
                        GalaxySMS.Common.Constants.TimeScheduleTypeIds.TimeScheduleType_GalaxyMinuteInterval,
                    Display = SharedResources.Resources.TimeScheduleType_Galaxy1MinuteInterval_Display,
                    Description = SharedResources.Resources.TimeScheduleType_Galaxy1MinuteInterval_Description,
                    ScheduleTypeCode = (short)GalaxySMS.Common.Enums.TimeScheduleType.GalaxyOneMinuteInterval,
                    UniqueResourceName = GalaxySMS.Common.Enums.TimeScheduleType.GalaxyOneMinuteInterval.ToString()
                };
                timeScheduleTypes.Add(timeScheduleType);

                timeScheduleType = new TimeScheduleType()
                {
                    TimeScheduleTypeUid = GalaxySMS.Common.Constants.TimeScheduleTypeIds.TimeScheduleType_AssaAbloyDsr,
                    Display = SharedResources.Resources.TimeScheduleType_AssaAbloyDsr_Display,
                    Description = SharedResources.Resources.TimeScheduleType_AssaAbloyDsr_Description,
                    ScheduleTypeCode = (short)GalaxySMS.Common.Enums.TimeScheduleType.AssaAbloyDsr,
                    UniqueResourceName = GalaxySMS.Common.Enums.TimeScheduleType.AssaAbloyDsr.ToString()
                };
                timeScheduleTypes.Add(timeScheduleType);

                #endregion

                #region Time Schedules

                var timeSchedules = new List<TimeSchedule>();

                var timeSchedule = new TimeSchedule()
                {
                    TimeScheduleUid = GalaxySMS.Common.Constants.TimeScheduleIds.TimeSchedule_Never,
                    Display = SharedResources.Resources.TimeScheduleName_Never,
                    Description = SharedResources.Resources.TimeScheduleName_NeverDescription,
                    EntityId = GalaxySMS.Common.Constants.EntityIds.GalaxySMS_SystemEntity_Id,
                    UniqueResourceName = GalaxySMS.Common.Enums.TimeScheduleNumbers.TimeScheduleNever.ToString()
                };
                timeSchedules.Add(timeSchedule);

                timeSchedule = new TimeSchedule()
                {
                    TimeScheduleUid = GalaxySMS.Common.Constants.TimeScheduleIds.TimeSchedule_Always,
                    Display = SharedResources.Resources.TimeScheduleName_Always,
                    Description = SharedResources.Resources.TimeScheduleName_AlwaysDescription,
                    EntityId = GalaxySMS.Common.Constants.EntityIds.GalaxySMS_SystemEntity_Id,
                    UniqueResourceName = GalaxySMS.Common.Enums.TimeScheduleNumbers.TimeScheduleAlways.ToString()
                };
                timeSchedules.Add(timeSchedule);
                #endregion

                #region Galaxy Time Periods

                var galaxyTimePeriods = new List<GalaxyTimePeriod>();

                var timePeriod = new GalaxyTimePeriod()
                {
                    GalaxyTimePeriodUid = GalaxySMS.Common.Constants.GalaxyTimePeriodIds.TimePeriod_Never,
                    Display = SharedResources.Resources.GalaxyTimePeriodName_Never,
                    Description = SharedResources.Resources.GalaxyTimePeriodName_NeverDescription,
                    PanelTimePeriodNumber = (int)GalaxyTimePeriodNumbers.TimePeriodNever,
                    EntityId = GalaxySMS.Common.Constants.EntityIds.GalaxySMS_SystemEntity_Id,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyTimePeriodNumbers.TimePeriodNever.ToString()
                };
                galaxyTimePeriods.Add(timePeriod);

                timePeriod = new GalaxyTimePeriod()
                {
                    GalaxyTimePeriodUid = GalaxySMS.Common.Constants.GalaxyTimePeriodIds.TimePeriod_Always,
                    Display = SharedResources.Resources.GalaxyTimePeriodName_Always,
                    Description = SharedResources.Resources.GalaxyTimePeriodName_AlwaysDescription,
                    PanelTimePeriodNumber = (int)GalaxyTimePeriodNumbers.TimePeriodAlways,
                    EntityId = GalaxySMS.Common.Constants.EntityIds.GalaxySMS_SystemEntity_Id,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyTimePeriodNumbers.TimePeriodAlways.ToString()
                };
                galaxyTimePeriods.Add(timePeriod);

                #endregion

                #region Cluster LED Behavior Modes

                var ledBehaviors = new List<ClusterLedBehaviorMode>();

                var ledBehavior = new ClusterLedBehaviorMode()
                {
                    ClusterLedBehaviorModeUid = GalaxySMS.Common.Constants.ClusterLedBehaviorIds.SteadyHigh,
                    LedBehaviorCode = (short)GalaxySMS.Common.Enums.ClusterLedBehavior.SteadyHigh,
                    Display = SharedResources.Resources.ClusterLedBehavior_SteadyHigh_Display,
                    Description = SharedResources.Resources.ClusterLedBehavior_SteadyHigh_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.ClusterLedBehavior.SteadyHigh.ToString()
                };
                ledBehaviors.Add(ledBehavior);

                ledBehavior = new ClusterLedBehaviorMode()
                {
                    ClusterLedBehaviorModeUid = GalaxySMS.Common.Constants.ClusterLedBehaviorIds.SteadyLow,
                    LedBehaviorCode = (short)GalaxySMS.Common.Enums.ClusterLedBehavior.SteadyLow,
                    Display = SharedResources.Resources.ClusterLedBehavior_SteadyLow_Display,
                    Description = SharedResources.Resources.ClusterLedBehavior_SteadyLow_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.ClusterLedBehavior.SteadyLow.ToString()
                };
                ledBehaviors.Add(ledBehavior);

                ledBehavior = new ClusterLedBehaviorMode()
                {
                    ClusterLedBehaviorModeUid = GalaxySMS.Common.Constants.ClusterLedBehaviorIds.Strobe,
                    LedBehaviorCode = (short)GalaxySMS.Common.Enums.ClusterLedBehavior.Strobe,
                    Display = SharedResources.Resources.ClusterLedBehavior_Strobe_Display,
                    Description = SharedResources.Resources.ClusterLedBehavior_Strobe_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.ClusterLedBehavior.Strobe.ToString()
                };
                ledBehaviors.Add(ledBehavior);

                ledBehavior = new ClusterLedBehaviorMode()
                {
                    ClusterLedBehaviorModeUid = GalaxySMS.Common.Constants.ClusterLedBehaviorIds.StrobeRapid,
                    LedBehaviorCode = (short)GalaxySMS.Common.Enums.ClusterLedBehavior.StrobeRapid,
                    Display = SharedResources.Resources.ClusterLedBehavior_StrobeRapid_Display,
                    Description = SharedResources.Resources.ClusterLedBehavior_StrobeRapid_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.ClusterLedBehavior.StrobeRapid.ToString()
                };
                ledBehaviors.Add(ledBehavior);

                #endregion

                #region Entity Map Permission Levels

                var entityMapPermissionLevels = new List<EntityMapPermissionLevel>();

                var permLevel = new EntityMapPermissionLevel()
                {
                    EntityMapPermissionLevelUid =
                        GalaxySMS.Common.Constants.EntityPermissionLevelIds.PermissionLevel_None_Id,
                    Display = SharedResources.Resources.EntityPermissionLevel_None_Display,
                    Description = SharedResources.Resources.EntityPermissionLevel_None_Description,
                    CanView = false,
                    CanEdit = false,
                    CanAdd = false,
                    CanDelete = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.EntityPermissionLevel.None.ToString()
                };
                entityMapPermissionLevels.Add(permLevel);

                permLevel = new EntityMapPermissionLevel()
                {
                    EntityMapPermissionLevelUid =
                        GalaxySMS.Common.Constants.EntityPermissionLevelIds.PermissionLevel_ViewOnly_Id,
                    Display = SharedResources.Resources.EntityPermissionLevel_ViewOnly_Display,
                    Description = SharedResources.Resources.EntityPermissionLevel_ViewOnly_Description,
                    CanView = true,
                    CanEdit = false,
                    CanAdd = false,
                    CanDelete = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.EntityPermissionLevel.View.ToString()
                };
                entityMapPermissionLevels.Add(permLevel);


                //permLevel = new EntityMapPermissionLevel()
                //{
                //    EntityMapPermissionLevelUid = GalaxySMS.Common.Constants.EntityPermissionLevelIds.PermissionLevel_ViewEdit_Id,
                //    Display = SharedResources.Resources.EntityPermissionLevel_ViewEdit_Display,
                //    Description = SharedResources.Resources.EntityPermissionLevel_ViewEdit_Description,
                //    CanView = true,
                //    CanEdit = true,
                //    CanAdd = true,
                //    CanDelete= false,
                //    UniqueResourceName = GalaxySMS.Common.Enums.EntityPermissionLevel.ViewEdit.ToString()
                //};
                //entityMapPermissionLevels.Add(permLevel);

                //permLevel = new EntityMapPermissionLevel()
                //{
                //    EntityMapPermissionLevelUid = GalaxySMS.Common.Constants.EntityPermissionLevelIds.PermissionLevel_ViewEditDelete_Id,
                //    Display = SharedResources.Resources.EntityPermissionLevel_ViewEditDelete_Display,
                //    Description = SharedResources.Resources.EntityPermissionLevel_ViewEditDelete_Description,
                //    CanView = true,
                //    CanEdit = true,
                //    CanAdd = true,
                //    CanDelete=true,
                //    UniqueResourceName = GalaxySMS.Common.Enums.EntityPermissionLevel.ViewEditDelete.ToString()
                //};
                //entityMapPermissionLevels.Add(permLevel);

                #endregion

                #region GalaxyInputDelayTypes

                var galaxyInputDelayTypes = new List<GalaxyInputDelayType>();

                var delayType = new GalaxyInputDelayType()
                {
                    GalaxyInputDelayTypeUid = GalaxySMS.Common.Constants.GalaxyInputDelayTypeIds.Entry,
                    Code = (short)GalaxySMS.Common.Enums.GalaxyInputDelayType.Entry,
                    IsActive = true,
                    IsDefault = true,
                    Display = SharedResources.Resources.GalaxyInputDelayType_Entry_Display,
                    Description = SharedResources.Resources.GalaxyInputDelayType_Entry_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyInputDelayType.Entry.ToString()
                };
                galaxyInputDelayTypes.Add(delayType);

                delayType = new GalaxyInputDelayType()
                {
                    GalaxyInputDelayTypeUid = GalaxySMS.Common.Constants.GalaxyInputDelayTypeIds.Dwell,
                    Code = (short)GalaxySMS.Common.Enums.GalaxyInputDelayType.Dwell,
                    IsActive = true,
                    IsDefault = false,
                    Display = SharedResources.Resources.GalaxyInputDelayType_Dwell_Display,
                    Description = SharedResources.Resources.GalaxyInputDelayType_Dwell_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyInputDelayType.Dwell.ToString()
                };
                galaxyInputDelayTypes.Add(delayType);

                #endregion

                #region GalaxyInputModes

                var galaxyInputModes = new List<GalaxyInputMode>();

                var inputMode = new GalaxyInputMode()
                {
                    GalaxyInputModeUid = GalaxySMS.Common.Constants.GalaxyInputModeIds.Standard,
                    Code = (short)GalaxySMS.Common.Enums.GalaxyInputMode.Standard,
                    IsActive = true,
                    IsDefault = true,
                    Display = SharedResources.Resources.GalaxyInputMode_Standard_Display,
                    Description = SharedResources.Resources.GalaxyInputMode_Standard_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyInputMode.Standard.ToString()
                };
                galaxyInputModes.Add(inputMode);

                inputMode = new GalaxyInputMode()
                {
                    GalaxyInputModeUid = GalaxySMS.Common.Constants.GalaxyInputModeIds.Arming,
                    Code = (short)GalaxySMS.Common.Enums.GalaxyInputMode.Arming,
                    IsActive = true,
                    IsDefault = false,
                    Display = SharedResources.Resources.GalaxyInputMode_Arming_Display,
                    Description = SharedResources.Resources.GalaxyInputMode_Arming_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.GalaxyInputMode.Arming.ToString()
                };
                galaxyInputModes.Add(inputMode);

                #endregion

                #region Input Device Alert Event Types

                var inputDeviceAlertEventTypes = new List<GalaxySMS.Business.Entities.InputDeviceAlertEventType>();

                var inputDeviceAlertEventType = new GalaxySMS.Business.Entities.InputDeviceAlertEventType()
                {
                    InputDeviceAlertEventTypeUid = GalaxySMS.Common.Constants.InputDeviceAlertEventTypeIds.StateChange,
                    Tag = GalaxySMS.Common.Enums.InputDeviceAlertEventType.StateChange.ToString(),
                    Display = SharedResources.Resources.InputDeviceAlertEventType_StateChange_Display,
                    Description = SharedResources.Resources.InputDeviceAlertEventType_StateChange_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.InputDeviceAlertEventType.StateChange.ToString(),
                    CanAcknowledge = true,
                    CanHaveInputOutputGroupOffset = true,
                    CanHaveSchedule = true,
                    CanHaveAudio = true,
                    CanHaveInstructions = true
                };
                inputDeviceAlertEventTypes.Add(inputDeviceAlertEventType);



                #endregion

                #region Access Portal Commands

                var accessPortalCommands = new List<AccessPortalCommand>();

                var accessPortalCommand = new AccessPortalCommand()
                {
                    AccessPortalCommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.Pulse,
                    Display = SharedResources.Resources.AccessPortalCommand_UnlockMomentarily_Name,
                    Description = SharedResources.Resources.AccessPortalCommand_UnlockMomentarily_Description,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalCommandActionCode.Pulse.ToString()
                };
                accessPortalCommand.AccessPortalTypeIds.Add(GalaxySMS.Common.Constants.AccessPortalTypeIds.AccessPortalType_StandardEntryPoint_StandardWiegand);
                accessPortalCommand.AccessPortalTypeIds.Add(GalaxySMS.Common.Constants.AccessPortalTypeIds.AccessPortalType_StandardEntryPoint_StandardDataClock);
                accessPortalCommand.AccessPortalTypeIds.Add(GalaxySMS.Common.Constants.AccessPortalTypeIds.AccessPortalType_StandardEntryPoint_AssaIpEnabledLock);

                accessPortalCommand.AccessPortalCommandChoices.Add(new AccessPortalCommandChoice()
                {
                    ChoiceTypeCode = (int)CommandChoiceCode.Execute,
                    Display = SharedResources.Resources.AccessPortalCommandChoice_Execute_UnlockMomentarily_Display,
                    Description = SharedResources.Resources.AccessPortalCommandChoice_Execute_UnlockMomentarily_Description,
                    ApproxWaitTime = 1
                });

                accessPortalCommand.AccessPortalCommandChoices.Add(new AccessPortalCommandChoice()
                {
                    ChoiceTypeCode = (int)CommandChoiceCode.Cancel,
                    Display = SharedResources.Resources.AccessPortalCommandChoice_Cancel_UnlockMomentarily_Display,
                    Description = SharedResources.Resources.AccessPortalCommandChoice_Cancel_UnlockMomentarily_Description,
                    ApproxWaitTime = 0
                });

                accessPortalCommands.Add(accessPortalCommand);

                accessPortalCommand = new AccessPortalCommand()
                {
                    AccessPortalCommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.Unlock,
                    Display = SharedResources.Resources.AccessPortalCommand_Unlock_Name,
                    Description = SharedResources.Resources.AccessPortalCommand_Unlock_Description,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalCommandActionCode.Unlock.ToString()
                };
                accessPortalCommand.AccessPortalTypeIds.Add(GalaxySMS.Common.Constants.AccessPortalTypeIds.AccessPortalType_StandardEntryPoint_StandardWiegand);
                accessPortalCommand.AccessPortalTypeIds.Add(GalaxySMS.Common.Constants.AccessPortalTypeIds.AccessPortalType_StandardEntryPoint_StandardDataClock);
                accessPortalCommand.AccessPortalTypeIds.Add(GalaxySMS.Common.Constants.AccessPortalTypeIds.AccessPortalType_StandardEntryPoint_AssaIpEnabledLock);
                accessPortalCommands.Add(accessPortalCommand);

                accessPortalCommand = new AccessPortalCommand()
                {
                    AccessPortalCommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.Lock,
                    Display = SharedResources.Resources.AccessPortalCommand_Lock_Name,
                    Description = SharedResources.Resources.AccessPortalCommand_Lock_Description,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalCommandActionCode.Lock.ToString()
                };
                accessPortalCommand.AccessPortalTypeIds.Add(GalaxySMS.Common.Constants.AccessPortalTypeIds.AccessPortalType_StandardEntryPoint_StandardWiegand);
                accessPortalCommand.AccessPortalTypeIds.Add(GalaxySMS.Common.Constants.AccessPortalTypeIds.AccessPortalType_StandardEntryPoint_StandardDataClock);
                accessPortalCommand.AccessPortalTypeIds.Add(GalaxySMS.Common.Constants.AccessPortalTypeIds.AccessPortalType_StandardEntryPoint_AssaIpEnabledLock);
                accessPortalCommands.Add(accessPortalCommand);

                accessPortalCommand = new AccessPortalCommand()
                {
                    AccessPortalCommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.Enable,
                    Display = SharedResources.Resources.AccessPortalCommand_Enable_Name,
                    Description = SharedResources.Resources.AccessPortalCommand_Enable_Description,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalCommandActionCode.Enable.ToString()
                };
                accessPortalCommand.AccessPortalTypeIds.Add(GalaxySMS.Common.Constants.AccessPortalTypeIds.AccessPortalType_StandardEntryPoint_StandardWiegand);
                accessPortalCommand.AccessPortalTypeIds.Add(GalaxySMS.Common.Constants.AccessPortalTypeIds.AccessPortalType_StandardEntryPoint_StandardDataClock);
                accessPortalCommand.AccessPortalTypeIds.Add(GalaxySMS.Common.Constants.AccessPortalTypeIds.AccessPortalType_StandardEntryPoint_AssaIpEnabledLock);
                accessPortalCommands.Add(accessPortalCommand);

                accessPortalCommand = new AccessPortalCommand()
                {
                    AccessPortalCommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.Disable,
                    Display = SharedResources.Resources.AccessPortalCommand_Disable_Name,
                    Description = SharedResources.Resources.AccessPortalCommand_Disable_Description,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalCommandActionCode.Disable.ToString()
                };
                accessPortalCommand.AccessPortalTypeIds.Add(GalaxySMS.Common.Constants.AccessPortalTypeIds.AccessPortalType_StandardEntryPoint_StandardWiegand);
                accessPortalCommand.AccessPortalTypeIds.Add(GalaxySMS.Common.Constants.AccessPortalTypeIds.AccessPortalType_StandardEntryPoint_StandardDataClock);
                accessPortalCommand.AccessPortalTypeIds.Add(GalaxySMS.Common.Constants.AccessPortalTypeIds.AccessPortalType_StandardEntryPoint_AssaIpEnabledLock);
                accessPortalCommands.Add(accessPortalCommand);

                accessPortalCommand = new AccessPortalCommand()
                {
                    AccessPortalCommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.AuxRelayOn,
                    Display = SharedResources.Resources.AccessPortalCommand_AuxRelayOn_Name,
                    Description = SharedResources.Resources.AccessPortalCommand_AuxRelayOn_Description,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalCommandActionCode.AuxRelayOn.ToString()
                };
                accessPortalCommand.AccessPortalTypeIds.Add(GalaxySMS.Common.Constants.AccessPortalTypeIds.AccessPortalType_StandardEntryPoint_StandardWiegand);
                accessPortalCommand.AccessPortalTypeIds.Add(GalaxySMS.Common.Constants.AccessPortalTypeIds.AccessPortalType_StandardEntryPoint_StandardDataClock);
                accessPortalCommands.Add(accessPortalCommand);

                accessPortalCommand = new AccessPortalCommand()
                {
                    AccessPortalCommandUid = GalaxySMS.Common.Constants.AccessPortalCommandIds.AuxRelayOff,
                    Display = SharedResources.Resources.AccessPortalCommand_AuxRelayOff_Name,
                    Description = SharedResources.Resources.AccessPortalCommand_AuxRelayOff_Description,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalCommandActionCode.AuxRelayOff.ToString()
                };
                accessPortalCommand.AccessPortalTypeIds.Add(GalaxySMS.Common.Constants.AccessPortalTypeIds.AccessPortalType_StandardEntryPoint_StandardWiegand);
                accessPortalCommand.AccessPortalTypeIds.Add(GalaxySMS.Common.Constants.AccessPortalTypeIds.AccessPortalType_StandardEntryPoint_StandardDataClock);
                accessPortalCommands.Add(accessPortalCommand);

                #endregion

                #region Access Portal Area Types

                var accessPortalAreaTypes = new List<AccessPortalAreaType>();

                var accessPortalAreaType = new AccessPortalAreaType()
                {
                    AccessPortalAreaTypeUid = GalaxySMS.Common.Constants.AccessPortalAreaTypeIds.FromArea,
                    Tag = GalaxySMS.Common.Enums.AccessPortalAreaType.FromArea.ToString(),
                    Display = SharedResources.Resources.AccessPortalAreaType_FromArea_Display,
                    Description = SharedResources.Resources.AccessPortalAreaType_FromArea_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalAreaType.FromArea.ToString()
                };
                accessPortalAreaTypes.Add(accessPortalAreaType);

                accessPortalAreaType = new AccessPortalAreaType()
                {
                    AccessPortalAreaTypeUid = GalaxySMS.Common.Constants.AccessPortalAreaTypeIds.ToArea,
                    Tag = GalaxySMS.Common.Enums.AccessPortalAreaType.ToArea.ToString(),
                    Display = SharedResources.Resources.AccessPortalAreaType_ToArea_Display,
                    Description = SharedResources.Resources.AccessPortalAreaType_ToArea_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalAreaType.ToArea.ToString()
                };
                accessPortalAreaTypes.Add(accessPortalAreaType);

                accessPortalAreaType = new AccessPortalAreaType()
                {
                    AccessPortalAreaTypeUid = GalaxySMS.Common.Constants.AccessPortalAreaTypeIds.WhosInArea,
                    Tag = GalaxySMS.Common.Enums.AccessPortalAreaType.WhosInArea.ToString(),
                    Display = SharedResources.Resources.AccessPortalAreaType_WhosInArea_Display,
                    Description = SharedResources.Resources.AccessPortalAreaType_WhosInArea_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalAreaType.WhosInArea.ToString()
                };
                accessPortalAreaTypes.Add(accessPortalAreaType);
                #endregion

                #region Access Portal Schedule Types

                var accessPortalScheduleTypes = new List<AccessPortalScheduleType>();

                var accessPortalScheduleType = new AccessPortalScheduleType()
                {
                    AccessPortalScheduleTypeUid = GalaxySMS.Common.Constants.AccessPortalScheduleTypeIds.AutomaticUnlock,
                    Tag = GalaxySMS.Common.Enums.AccessPortalScheduleType.AutomaticUnlock.ToString(),
                    Display = SharedResources.Resources.AccessPortalScheduleType_AutomaticUnlock_Display,
                    Description = SharedResources.Resources.AccessPortalScheduleType_AutomaticUnlock_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalScheduleType.AutomaticUnlock.ToString()
                };
                accessPortalScheduleTypes.Add(accessPortalScheduleType);

                accessPortalScheduleType = new AccessPortalScheduleType()
                {
                    AccessPortalScheduleTypeUid = GalaxySMS.Common.Constants.AccessPortalScheduleTypeIds.PinRequired,
                    Tag = GalaxySMS.Common.Enums.AccessPortalScheduleType.PinRequired.ToString(),
                    Display = SharedResources.Resources.AccessPortalScheduleType_PinRequired_Display,
                    Description = SharedResources.Resources.AccessPortalScheduleType_PinRequired_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalScheduleType.PinRequired.ToString()
                };
                accessPortalScheduleTypes.Add(accessPortalScheduleType);

                accessPortalScheduleType = new AccessPortalScheduleType()
                {
                    AccessPortalScheduleTypeUid =
                        GalaxySMS.Common.Constants.AccessPortalScheduleTypeIds.DisableForcedOpen,
                    Tag = GalaxySMS.Common.Enums.AccessPortalScheduleType.DisableForcedOpen.ToString(),
                    Display = SharedResources.Resources.AccessPortalScheduleType_DisableForcedOpen_Display,
                    Description = SharedResources.Resources.AccessPortalScheduleType_DisableForcedOpen_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalScheduleType.DisableForcedOpen.ToString()
                };
                accessPortalScheduleTypes.Add(accessPortalScheduleType);

                accessPortalScheduleType = new AccessPortalScheduleType()
                {
                    AccessPortalScheduleTypeUid =
                        GalaxySMS.Common.Constants.AccessPortalScheduleTypeIds.DisableOpenTooLong,
                    Tag = GalaxySMS.Common.Enums.AccessPortalScheduleType.DisableOpenTooLong.ToString(),
                    Display = SharedResources.Resources.AccessPortalScheduleType_DisableOpenTooLong_Display,
                    Description = SharedResources.Resources.AccessPortalScheduleType_DisableOpenTooLong_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalScheduleType.DisableOpenTooLong.ToString()
                };
                accessPortalScheduleTypes.Add(accessPortalScheduleType);

                accessPortalScheduleType = new AccessPortalScheduleType()
                {
                    AccessPortalScheduleTypeUid = GalaxySMS.Common.Constants.AccessPortalScheduleTypeIds.CrisisUnlock,
                    Tag = GalaxySMS.Common.Enums.AccessPortalScheduleType.CrisisUnlock.ToString(),
                    Display = SharedResources.Resources.AccessPortalScheduleType_CrisisUnlock_Display,
                    Description = SharedResources.Resources.AccessPortalScheduleType_CrisisUnlock_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalScheduleType.CrisisUnlock.ToString()
                };
                accessPortalScheduleTypes.Add(accessPortalScheduleType);

                accessPortalScheduleType = new AccessPortalScheduleType()
                {
                    AccessPortalScheduleTypeUid = GalaxySMS.Common.Constants.AccessPortalScheduleTypeIds.AuxiliaryOutput,
                    Tag = GalaxySMS.Common.Enums.AccessPortalScheduleType.AuxiliaryOutput.ToString(),
                    Display = SharedResources.Resources.AccessPortalScheduleType_AuxiliaryOutput_Display,
                    Description = SharedResources.Resources.AccessPortalScheduleType_AuxiliaryOutput_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalScheduleType.AuxiliaryOutput.ToString()
                };
                accessPortalScheduleTypes.Add(accessPortalScheduleType);
                //var accessPortalScheduleTypeRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalScheduleTypeRepository>();

                #endregion

                #region Access Portal Alert Event Types

                var accessPortalAlertEventTypes = new List<AccessPortalAlertEventType>();

                var accessPortalAlertEventType = new AccessPortalAlertEventType()
                {
                    AccessPortalAlertEventTypeUid = GalaxySMS.Common.Constants.AccessPortalAlertEventTypeIds.ForcedOpen,
                    Tag = GalaxySMS.Common.Enums.AccessPortalAlertEventType.ForcedOpen.ToString(),
                    Display = SharedResources.Resources.AccessPortalAlertEventType_ForcedOpen_Display,
                    Description = SharedResources.Resources.AccessPortalAlertEventType_ForcedOpen_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalAlertEventType.ForcedOpen.ToString(),
                    CanAcknowledge = true,
                    CanHaveInputOutputGroupOffset = true,
                    CanHaveSchedule = true,
                    CanHaveAudio = true,
                    CanHaveInstructions = true
                };
                accessPortalAlertEventTypes.Add(accessPortalAlertEventType);

                accessPortalAlertEventType = new AccessPortalAlertEventType()
                {
                    AccessPortalAlertEventTypeUid = GalaxySMS.Common.Constants.AccessPortalAlertEventTypeIds.OpenTooLong,
                    Tag = GalaxySMS.Common.Enums.AccessPortalAlertEventType.OpenTooLong.ToString(),
                    Display = SharedResources.Resources.AccessPortalAlertEventType_OpenTooLong_Display,
                    Description = SharedResources.Resources.AccessPortalAlertEventType_OpenTooLong_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalAlertEventType.OpenTooLong.ToString(),
                    CanAcknowledge = true,
                    CanHaveInputOutputGroupOffset = true,
                    CanHaveSchedule = true,
                    CanHaveAudio = true,
                    CanHaveInstructions = true
                };
                accessPortalAlertEventTypes.Add(accessPortalAlertEventType);

                accessPortalAlertEventType = new AccessPortalAlertEventType()
                {
                    AccessPortalAlertEventTypeUid =
                        GalaxySMS.Common.Constants.AccessPortalAlertEventTypeIds.InvalidAccessAttempt,
                    Tag = GalaxySMS.Common.Enums.AccessPortalAlertEventType.InvalidAccessAttempt.ToString(),
                    Display = SharedResources.Resources.AccessPortalAlertEventType_InvalidAccessAttempt_Display,
                    Description = SharedResources.Resources.AccessPortalAlertEventType_InvalidAccessAttempt_Description,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.AccessPortalAlertEventType.InvalidAccessAttempt.ToString(),
                    CanAcknowledge = true,
                    CanHaveInputOutputGroupOffset = true,
                    CanHaveSchedule = true,
                    CanHaveAudio = true,
                    CanHaveInstructions = true
                };
                accessPortalAlertEventTypes.Add(accessPortalAlertEventType);

                accessPortalAlertEventType = new AccessPortalAlertEventType()
                {
                    AccessPortalAlertEventTypeUid =
                        GalaxySMS.Common.Constants.AccessPortalAlertEventTypeIds.PassbackViolation,
                    Tag = GalaxySMS.Common.Enums.AccessPortalAlertEventType.PassbackViolation.ToString(),
                    Display = SharedResources.Resources.AccessPortalAlertEventType_PassbackViolation_Display,
                    Description = SharedResources.Resources.AccessPortalAlertEventType_PassbackViolation_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalAlertEventType.PassbackViolation.ToString(),
                    CanAcknowledge = true,
                    CanHaveInputOutputGroupOffset = true,
                    CanHaveSchedule = true,
                    CanHaveAudio = true,
                    CanHaveInstructions = true
                };
                accessPortalAlertEventTypes.Add(accessPortalAlertEventType);

                accessPortalAlertEventType = new AccessPortalAlertEventType()
                {
                    AccessPortalAlertEventTypeUid = GalaxySMS.Common.Constants.AccessPortalAlertEventTypeIds.DuressAuxiliaryFunction,
                    Tag = GalaxySMS.Common.Enums.AccessPortalAlertEventType.Duress.ToString(),
                    Display = SharedResources.Resources.AccessPortalAlertEventType_Duress_Display,
                    Description = SharedResources.Resources.AccessPortalAlertEventType_Duress_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalAlertEventType.Duress.ToString(),
                    CanAcknowledge = true,
                    CanHaveInputOutputGroupOffset = true,
                    CanHaveSchedule = true,
                    CanHaveAudio = true,
                    CanHaveInstructions = true
                };
                accessPortalAlertEventTypes.Add(accessPortalAlertEventType);

                accessPortalAlertEventType = new AccessPortalAlertEventType()
                {
                    AccessPortalAlertEventTypeUid =
                        GalaxySMS.Common.Constants.AccessPortalAlertEventTypeIds.ReaderHeartbeat,
                    Tag = GalaxySMS.Common.Enums.AccessPortalAlertEventType.ReaderHeartbeat.ToString(),
                    Display = SharedResources.Resources.AccessPortalAlertEventType_ReaderHeartbeat_Display,
                    Description = SharedResources.Resources.AccessPortalAlertEventType_ReaderHeartbeat_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalAlertEventType.ReaderHeartbeat.ToString(),
                    CanAcknowledge = true,
                    CanHaveInputOutputGroupOffset = true,
                    CanHaveSchedule = true,
                    CanHaveAudio = true,
                    CanHaveInstructions = true
                };
                accessPortalAlertEventTypes.Add(accessPortalAlertEventType);

                accessPortalAlertEventType = new AccessPortalAlertEventType()
                {
                    AccessPortalAlertEventTypeUid =
                        GalaxySMS.Common.Constants.AccessPortalAlertEventTypeIds.AccessGranted,
                    Tag = GalaxySMS.Common.Enums.AccessPortalAlertEventType.AccessGranted.ToString(),
                    Display = SharedResources.Resources.AccessPortalAlertEventType_AccessGranted_Display,
                    Description = SharedResources.Resources.AccessPortalAlertEventType_AccessGranted_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalAlertEventType.AccessGranted.ToString(),
                    CanAcknowledge = false,
                    CanHaveInputOutputGroupOffset = true,
                    CanHaveSchedule = false,
                    CanHaveAudio = true,
                    CanHaveInstructions = false
                };
                accessPortalAlertEventTypes.Add(accessPortalAlertEventType);

                accessPortalAlertEventType = new AccessPortalAlertEventType()
                {
                    AccessPortalAlertEventTypeUid =
                        GalaxySMS.Common.Constants.AccessPortalAlertEventTypeIds.AccessGrantedDisarmInputOutputGroup1,
                    Tag =
                        GalaxySMS.Common.Enums.AccessPortalAlertEventType.AccessGrantedDisarmInputOutputGroup1.ToString(),
                    Display =
                        SharedResources.Resources
                            .AccessPortalAlertEventType_AccessGrantedDisarmInputOutputGroup1_Display,
                    Description =
                        SharedResources.Resources
                            .AccessPortalAlertEventType_AccessGrantedDisarmInputOutputGroup1_Description,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.AccessPortalAlertEventType.AccessGrantedDisarmInputOutputGroup1.ToString(),
                    CanAcknowledge = false,
                    CanHaveInputOutputGroupOffset = false,
                    CanHaveSchedule = false,
                    CanHaveAudio = false,
                    CanHaveInstructions = false
                };
                accessPortalAlertEventTypes.Add(accessPortalAlertEventType);


                accessPortalAlertEventType = new AccessPortalAlertEventType()
                {
                    AccessPortalAlertEventTypeUid =
                        GalaxySMS.Common.Constants.AccessPortalAlertEventTypeIds.AccessGrantedDisarmInputOutputGroup2,
                    Tag =
                        GalaxySMS.Common.Enums.AccessPortalAlertEventType.AccessGrantedDisarmInputOutputGroup2.ToString(),
                    Display =
                        SharedResources.Resources
                            .AccessPortalAlertEventType_AccessGrantedDisarmInputOutputGroup2_Display,
                    Description =
                        SharedResources.Resources
                            .AccessPortalAlertEventType_AccessGrantedDisarmInputOutputGroup2_Description,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.AccessPortalAlertEventType.AccessGrantedDisarmInputOutputGroup2.ToString(),
                    CanAcknowledge = false,
                    CanHaveInputOutputGroupOffset = false,
                    CanHaveSchedule = false,
                    CanHaveAudio = false,
                    CanHaveInstructions = false
                };
                accessPortalAlertEventTypes.Add(accessPortalAlertEventType);

                accessPortalAlertEventType = new AccessPortalAlertEventType()
                {
                    AccessPortalAlertEventTypeUid =
                        GalaxySMS.Common.Constants.AccessPortalAlertEventTypeIds.AccessGrantedDisarmInputOutputGroup3,
                    Tag =
                        GalaxySMS.Common.Enums.AccessPortalAlertEventType.AccessGrantedDisarmInputOutputGroup3.ToString(),
                    Display =
                        SharedResources.Resources
                            .AccessPortalAlertEventType_AccessGrantedDisarmInputOutputGroup3_Display,
                    Description =
                        SharedResources.Resources
                            .AccessPortalAlertEventType_AccessGrantedDisarmInputOutputGroup3_Description,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.AccessPortalAlertEventType.AccessGrantedDisarmInputOutputGroup3.ToString(),
                    CanAcknowledge = false,
                    CanHaveInputOutputGroupOffset = false,
                    CanHaveSchedule = false,
                    CanHaveAudio = false,
                    CanHaveInstructions = false
                };
                accessPortalAlertEventTypes.Add(accessPortalAlertEventType);

                accessPortalAlertEventType = new AccessPortalAlertEventType()
                {
                    AccessPortalAlertEventTypeUid =
                        GalaxySMS.Common.Constants.AccessPortalAlertEventTypeIds.AccessGrantedDisarmInputOutputGroup4,
                    Tag =
                        GalaxySMS.Common.Enums.AccessPortalAlertEventType.AccessGrantedDisarmInputOutputGroup4.ToString(),
                    Display =
                        SharedResources.Resources
                            .AccessPortalAlertEventType_AccessGrantedDisarmInputOutputGroup4_Display,
                    Description =
                        SharedResources.Resources
                            .AccessPortalAlertEventType_AccessGrantedDisarmInputOutputGroup4_Description,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.AccessPortalAlertEventType.AccessGrantedDisarmInputOutputGroup4.ToString(),
                    CanAcknowledge = false,
                    CanHaveInputOutputGroupOffset = false,
                    CanHaveSchedule = false,
                    CanHaveAudio = false,
                    CanHaveInstructions = false
                };
                accessPortalAlertEventTypes.Add(accessPortalAlertEventType);

                accessPortalAlertEventType = new AccessPortalAlertEventType()
                {
                    AccessPortalAlertEventTypeUid = GalaxySMS.Common.Constants.AccessPortalAlertEventTypeIds.DoorGroup,
                    Tag = GalaxySMS.Common.Enums.AccessPortalAlertEventType.DoorGroup.ToString(),
                    Display = SharedResources.Resources.AccessPortalAlertEventType_DoorGroup_Display,
                    Description = SharedResources.Resources.AccessPortalAlertEventType_DoorGroup_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalAlertEventType.DoorGroup.ToString(),
                    CanAcknowledge = false,
                    CanHaveInputOutputGroupOffset = true,
                    CanHaveSchedule = false,
                    CanHaveAudio = false,
                    CanHaveInstructions = false
                };
                accessPortalAlertEventTypes.Add(accessPortalAlertEventType);


                accessPortalAlertEventType = new AccessPortalAlertEventType()
                {
                    AccessPortalAlertEventTypeUid = GalaxySMS.Common.Constants.AccessPortalAlertEventTypeIds.LockedBy,
                    Tag = GalaxySMS.Common.Enums.AccessPortalAlertEventType.LockedBy.ToString(),
                    Display = SharedResources.Resources.AccessPortalAlertEventType_LockedBy_Display,
                    Description = SharedResources.Resources.AccessPortalAlertEventType_LockedBy_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalAlertEventType.LockedBy.ToString(),
                    CanAcknowledge = false,
                    CanHaveInputOutputGroupOffset = false,
                    CanHaveSchedule = false,
                    CanHaveAudio = false,
                    CanHaveInstructions = false
                };
                accessPortalAlertEventTypes.Add(accessPortalAlertEventType);

                accessPortalAlertEventType = new AccessPortalAlertEventType()
                {
                    AccessPortalAlertEventTypeUid = GalaxySMS.Common.Constants.AccessPortalAlertEventTypeIds.UnlockedBy,
                    Tag = GalaxySMS.Common.Enums.AccessPortalAlertEventType.UnlockedBy.ToString(),
                    Display = SharedResources.Resources.AccessPortalAlertEventType_UnlockedBy_Display,
                    Description = SharedResources.Resources.AccessPortalAlertEventType_UnlockedBy_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalAlertEventType.UnlockedBy.ToString(),
                    CanAcknowledge = false,
                    CanHaveInputOutputGroupOffset = false,
                    CanHaveSchedule = false,
                    CanHaveAudio = false,
                    CanHaveInstructions = false
                };
                accessPortalAlertEventTypes.Add(accessPortalAlertEventType);

                #endregion

                #region Access Portal Auxiliary Output Mode

                var accessPortalAuxiliaryOutputModes = new List<AccessPortalAuxiliaryOutputMode>();

                var accessPortalAuxiliaryOutputMode = new AccessPortalAuxiliaryOutputMode()
                {
                    AccessPortalAuxiliaryOutputModeUid =
                        GalaxySMS.Common.Constants.AccessPortalAuxiliaryOutputModeIds.Follows,
                    Display = SharedResources.Resources.AccessPortalAuxiliaryOutputMode_Follows_Display,
                    Description = SharedResources.Resources.AccessPortalAuxiliaryOutputMode_Follows_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalAuxiliaryOutputMode.Follows.ToString(),
                    Code = (short)GalaxySMS.Common.Enums.AccessPortalAuxiliaryOutputMode.Follows,
                    IsActive = true,
                    IsDefault = true
                };
                accessPortalAuxiliaryOutputModes.Add(accessPortalAuxiliaryOutputMode);

                accessPortalAuxiliaryOutputMode = new AccessPortalAuxiliaryOutputMode()
                {
                    AccessPortalAuxiliaryOutputModeUid =
                        GalaxySMS.Common.Constants.AccessPortalAuxiliaryOutputModeIds.Timeout,
                    Display = SharedResources.Resources.AccessPortalAuxiliaryOutputMode_Timeout_Display,
                    Description = SharedResources.Resources.AccessPortalAuxiliaryOutputMode_Timeout_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalAuxiliaryOutputMode.Timeout.ToString(),
                    Code = (short)GalaxySMS.Common.Enums.AccessPortalAuxiliaryOutputMode.Timeout,
                    IsActive = true
                };
                accessPortalAuxiliaryOutputModes.Add(accessPortalAuxiliaryOutputMode);

                accessPortalAuxiliaryOutputMode = new AccessPortalAuxiliaryOutputMode()
                {
                    AccessPortalAuxiliaryOutputModeUid =
                        GalaxySMS.Common.Constants.AccessPortalAuxiliaryOutputModeIds.Scheduled,
                    Display = SharedResources.Resources.AccessPortalAuxiliaryOutputMode_Scheduled_Display,
                    Description = SharedResources.Resources.AccessPortalAuxiliaryOutputMode_Scheduled_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalAuxiliaryOutputMode.Scheduled.ToString(),
                    Code = (short)GalaxySMS.Common.Enums.AccessPortalAuxiliaryOutputMode.Scheduled,
                    IsActive = true
                };
                accessPortalAuxiliaryOutputModes.Add(accessPortalAuxiliaryOutputMode);

                accessPortalAuxiliaryOutputMode = new AccessPortalAuxiliaryOutputMode()
                {
                    AccessPortalAuxiliaryOutputModeUid =
                        GalaxySMS.Common.Constants.AccessPortalAuxiliaryOutputModeIds.Latching,
                    Display = SharedResources.Resources.AccessPortalAuxiliaryOutputMode_Latching_Display,
                    Description = SharedResources.Resources.AccessPortalAuxiliaryOutputMode_Latching_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalAuxiliaryOutputMode.Latching.ToString(),
                    Code = (short)GalaxySMS.Common.Enums.AccessPortalAuxiliaryOutputMode.Latching,
                    IsActive = true
                };
                accessPortalAuxiliaryOutputModes.Add(accessPortalAuxiliaryOutputMode);
                #endregion

                #region Access Portal Automatic Forgive Frequency

                var automaticForgivePassbackFrequencies = new List<AutomaticForgivePassbackFrequency>();

                var automaticForgivePassbackFrequency = new AutomaticForgivePassbackFrequency()
                {
                    AutomaticForgivePassbackFrequencyUid =
                        GalaxySMS.Common.Constants.AutomaticForgivePassbackFrequencyIds.Never,
                    Display = SharedResources.Resources.AutomaticForgivePassbackFrequency_Never_Display,
                    Description = SharedResources.Resources.AutomaticForgivePassbackFrequency_Never_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AutomaticForgivePassbackFrequency.Never.ToString(),
                    Code = (short)GalaxySMS.Common.Enums.AutomaticForgivePassbackFrequency.Never,
                    IsActive = true,
                    IsDefault = true
                };
                automaticForgivePassbackFrequencies.Add(automaticForgivePassbackFrequency);

                automaticForgivePassbackFrequency = new AutomaticForgivePassbackFrequency()
                {
                    AutomaticForgivePassbackFrequencyUid =
                        GalaxySMS.Common.Constants.AutomaticForgivePassbackFrequencyIds.OncePerDay,
                    Display = SharedResources.Resources.AutomaticForgivePassbackFrequency_OncePerDay_Display,
                    Description = SharedResources.Resources.AutomaticForgivePassbackFrequency_OncePerDay_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AutomaticForgivePassbackFrequency.OncePerDay.ToString(),
                    Code = (short)GalaxySMS.Common.Enums.AutomaticForgivePassbackFrequency.OncePerDay,
                    IsActive = true,
                    IsDefault = false
                };
                automaticForgivePassbackFrequencies.Add(automaticForgivePassbackFrequency);

                automaticForgivePassbackFrequency = new AutomaticForgivePassbackFrequency()
                {
                    AutomaticForgivePassbackFrequencyUid =
                        GalaxySMS.Common.Constants.AutomaticForgivePassbackFrequencyIds.TwicePerDay,
                    Display = SharedResources.Resources.AutomaticForgivePassbackFrequency_TwicePerDay_Display,
                    Description = SharedResources.Resources.AutomaticForgivePassbackFrequency_TwicePerDay_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AutomaticForgivePassbackFrequency.TwicePerDay.ToString(),
                    Code = (short)GalaxySMS.Common.Enums.AutomaticForgivePassbackFrequency.TwicePerDay,
                    IsActive = true,
                    IsDefault = false
                };
                automaticForgivePassbackFrequencies.Add(automaticForgivePassbackFrequency);

                automaticForgivePassbackFrequency = new AutomaticForgivePassbackFrequency()
                {
                    AutomaticForgivePassbackFrequencyUid =
                        GalaxySMS.Common.Constants.AutomaticForgivePassbackFrequencyIds.FourTimesPerDay,
                    Display = SharedResources.Resources.AutomaticForgivePassbackFrequency_FourTimesPerDay_Display,
                    Description =
                        SharedResources.Resources.AutomaticForgivePassbackFrequency_FourTimesPerDay_Description,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.AutomaticForgivePassbackFrequency.FourTimesPerDay.ToString(),
                    Code = (short)GalaxySMS.Common.Enums.AutomaticForgivePassbackFrequency.FourTimesPerDay,
                    IsActive = true,
                    IsDefault = false
                };
                automaticForgivePassbackFrequencies.Add(automaticForgivePassbackFrequency);

                automaticForgivePassbackFrequency = new AutomaticForgivePassbackFrequency()
                {
                    AutomaticForgivePassbackFrequencyUid =
                        GalaxySMS.Common.Constants.AutomaticForgivePassbackFrequencyIds.EveryTwoHours,
                    Display = SharedResources.Resources.AutomaticForgivePassbackFrequency_EveryTwoHours_Display,
                    Description = SharedResources.Resources.AutomaticForgivePassbackFrequency_EveryTwoHours_Description,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.AutomaticForgivePassbackFrequency.EveryTwoHours.ToString(),
                    Code = (short)GalaxySMS.Common.Enums.AutomaticForgivePassbackFrequency.EveryTwoHours,
                    IsActive = true,
                    IsDefault = false
                };
                automaticForgivePassbackFrequencies.Add(automaticForgivePassbackFrequency);

                automaticForgivePassbackFrequency = new AutomaticForgivePassbackFrequency()
                {
                    AutomaticForgivePassbackFrequencyUid =
                        GalaxySMS.Common.Constants.AutomaticForgivePassbackFrequencyIds.EveryHour,
                    Display = SharedResources.Resources.AutomaticForgivePassbackFrequency_EveryHour_Display,
                    Description = SharedResources.Resources.AutomaticForgivePassbackFrequency_EveryHour_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AutomaticForgivePassbackFrequency.EveryHour.ToString(),
                    Code = (short)GalaxySMS.Common.Enums.AutomaticForgivePassbackFrequency.EveryHour,
                    IsActive = true,
                    IsDefault = false
                };
                automaticForgivePassbackFrequencies.Add(automaticForgivePassbackFrequency);

                automaticForgivePassbackFrequency = new AutomaticForgivePassbackFrequency()
                {
                    AutomaticForgivePassbackFrequencyUid =
                        GalaxySMS.Common.Constants.AutomaticForgivePassbackFrequencyIds.EveryThirtyMinutes,
                    Display = SharedResources.Resources.AutomaticForgivePassbackFrequency_EveryThirtyMinutes_Display,
                    Description =
                        SharedResources.Resources.AutomaticForgivePassbackFrequency_EveryThirtyMinutes_Description,
                    UniqueResourceName =
                        GalaxySMS.Common.Enums.AutomaticForgivePassbackFrequency.EveryThirtyMinutes.ToString(),
                    Code = (short)GalaxySMS.Common.Enums.AutomaticForgivePassbackFrequency.EveryThirtyMinutes,
                    IsActive = true,
                    IsDefault = false
                };
                automaticForgivePassbackFrequencies.Add(automaticForgivePassbackFrequency);
                #endregion

                #region Access Portal Pin Required Modes
                var pinRequiredModes = new List<PinRequiredMode>();

                var pinRequiredMode = new PinRequiredMode()
                {
                    PinRequiredModeUid = GalaxySMS.Common.Constants.PinRequiredModeIds.RequiredForAccessDecision,
                    Display = SharedResources.Resources.PinRequiredMode_RequiredForAccessDecision_Display,
                    Description = SharedResources.Resources.PinRequiredMode_RequiredForAccessDecision_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PinRequiredMode.RequiredForAccessDecision.ToString(),
                    Code = (short)GalaxySMS.Common.Enums.PinRequiredMode.RequiredForAccessDecision,
                    IsActive = true,
                    IsDefault = true
                };
                pinRequiredModes.Add(pinRequiredMode);

                pinRequiredMode = new PinRequiredMode()
                {
                    PinRequiredModeUid = GalaxySMS.Common.Constants.PinRequiredModeIds.InformationalOnly,
                    Display = SharedResources.Resources.PinRequiredMode_InformationalOnly_Display,
                    Description = SharedResources.Resources.PinRequiredMode_InformationalOnly_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PinRequiredMode.InformationalOnly.ToString(),
                    Code = (short)GalaxySMS.Common.Enums.PinRequiredMode.InformationalOnly,
                    IsActive = true,
                    IsDefault = true
                };
                pinRequiredModes.Add(pinRequiredMode);

                pinRequiredMode = new PinRequiredMode()
                {
                    PinRequiredModeUid = GalaxySMS.Common.Constants.PinRequiredModeIds.SpecifiesRecloseTime,
                    Display = SharedResources.Resources.PinRequiredMode_SpecifiesRecloseTime_Display,
                    Description = SharedResources.Resources.PinRequiredMode_SpecifiesRecloseTime_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PinRequiredMode.SpecifiesRecloseTime.ToString(),
                    Code = (short)GalaxySMS.Common.Enums.PinRequiredMode.SpecifiesRecloseTime,
                    IsActive = true,
                    IsDefault = true
                };
                pinRequiredModes.Add(pinRequiredMode);
                #endregion

                #region Access Portal Lock Push Button Behaviors
                var accessPortalLockPushButtonBehaviors = new List<AccessPortalLockPushButtonBehavior>();

                var accessPortalLockPushButtonBehavior = new AccessPortalLockPushButtonBehavior()
                {
                    AccessPortalLockPushButtonBehaviorUid = GalaxySMS.Common.Constants.AccessPortalLockPushButtonBehaviorIds.None,
                    Display = SharedResources.Resources.AccessPortalLockPushButtonBehavior_None_Display,
                    Description = SharedResources.Resources.AccessPortalLockPushButtonBehavior_None_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalLockPushButtonBehavior.None.ToString(),
                    Code = (short)GalaxySMS.Common.Enums.AccessPortalLockPushButtonBehavior.None,
                    IsActive = true,
                    IsDefault = true
                };
                accessPortalLockPushButtonBehaviors.Add(accessPortalLockPushButtonBehavior);

                accessPortalLockPushButtonBehavior = new AccessPortalLockPushButtonBehavior()
                {
                    AccessPortalLockPushButtonBehaviorUid = GalaxySMS.Common.Constants.AccessPortalLockPushButtonBehaviorIds.Office,
                    Display = SharedResources.Resources.AccessPortalLockPushButtonBehavior_Office_Display,
                    Description = SharedResources.Resources.AccessPortalLockPushButtonBehavior_Office_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalLockPushButtonBehavior.Office.ToString(),
                    Code = (short)GalaxySMS.Common.Enums.AccessPortalLockPushButtonBehavior.Office,
                    IsActive = true,
                    IsDefault = false
                };
                accessPortalLockPushButtonBehaviors.Add(accessPortalLockPushButtonBehavior);

                accessPortalLockPushButtonBehavior = new AccessPortalLockPushButtonBehavior()
                {
                    AccessPortalLockPushButtonBehaviorUid = GalaxySMS.Common.Constants.AccessPortalLockPushButtonBehaviorIds.Privacy,
                    Display = SharedResources.Resources.AccessPortalLockPushButtonBehavior_Privacy_Display,
                    Description = SharedResources.Resources.AccessPortalLockPushButtonBehavior_Privacy_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalLockPushButtonBehavior.Privacy.ToString(),
                    Code = (short)GalaxySMS.Common.Enums.AccessPortalLockPushButtonBehavior.Privacy,
                    IsActive = true,
                    IsDefault = false
                };
                accessPortalLockPushButtonBehaviors.Add(accessPortalLockPushButtonBehavior);
                #endregion

                #region Access Portal No Reply from Server Behavior
                var accessPortalNoServerReplyBehaviors = new List<AccessPortalNoServerReplyBehavior>();

                var accessPortalNoServerReplyBehavior = new AccessPortalNoServerReplyBehavior()
                {
                    AccessPortalNoServerReplyBehaviorUid = GalaxySMS.Common.Constants.AccessPortalNoServerReplyBehaviorIds.FollowPanelDecision,
                    Display = SharedResources.Resources.AccessPortalLockPushButtonBehavior_FollowPanelDecision_Display,
                    Description = SharedResources.Resources.AccessPortalNoServerReplyBehavior_FollowPanelDecision_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalNoServerReplyBehavior.FollowPanelDecision.ToString(),
                    Code = (short)GalaxySMS.Common.Enums.AccessPortalNoServerReplyBehavior.FollowPanelDecision,
                    IsActive = true,
                    IsDefault = true
                };
                accessPortalNoServerReplyBehaviors.Add(accessPortalNoServerReplyBehavior);

                accessPortalNoServerReplyBehavior = new AccessPortalNoServerReplyBehavior()
                {
                    AccessPortalNoServerReplyBehaviorUid = GalaxySMS.Common.Constants.AccessPortalNoServerReplyBehaviorIds.AlwaysDenyAccess,
                    Display = SharedResources.Resources.AccessPortalLockPushButtonBehavior_AlwaysDenyAccess_Display,
                    Description = SharedResources.Resources.AccessPortalNoServerReplyBehavior_AlwaysDenyAccess_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalNoServerReplyBehavior.AlwaysDenyAccess.ToString(),
                    Code = GalaxySMS.Common.Enums.AccessPortalNoServerReplyBehavior.AlwaysDenyAccess,
                    IsActive = true,
                    IsDefault = false
                };
                accessPortalNoServerReplyBehaviors.Add(accessPortalNoServerReplyBehavior);

                accessPortalNoServerReplyBehavior = new AccessPortalNoServerReplyBehavior()
                {
                    AccessPortalNoServerReplyBehaviorUid = GalaxySMS.Common.Constants.AccessPortalNoServerReplyBehaviorIds.AlwaysGrantAccess,
                    Display = SharedResources.Resources.AccessPortalLockPushButtonBehavior_AlwaysGrantAccess_Display,
                    Description = SharedResources.Resources.AccessPortalNoServerReplyBehavior_AlwaysGrantAccess_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalNoServerReplyBehavior.AlwaysGrantAccess.ToString(),
                    Code = GalaxySMS.Common.Enums.AccessPortalNoServerReplyBehavior.AlwaysGrantAccess,
                    IsActive = true,
                    IsDefault = false
                };
                accessPortalNoServerReplyBehaviors.Add(accessPortalNoServerReplyBehavior);
                #endregion

                #region Access Portal Defer to Server Behavior
                var accessPortalDeferToServerBehaviors = new List<AccessPortalDeferToServerBehavior>();

                var accessPortalDeferToServerBehavior = new AccessPortalDeferToServerBehavior()
                {
                    AccessPortalDeferToServerBehaviorUid = GalaxySMS.Common.Constants.AccessPortalDeferToServerBehaviorIds.Never,
                    Display = SharedResources.Resources.AccessPortalDeferToServerBehavior_Never_Display,
                    Description = SharedResources.Resources.AccessPortalDeferToServerBehavior_Never_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalDeferToServerBehavior.Never.ToString(),
                    Code = GalaxySMS.Common.Enums.AccessPortalDeferToServerBehavior.Never,
                    IsActive = true,
                    IsDefault = true
                };
                accessPortalDeferToServerBehaviors.Add(accessPortalDeferToServerBehavior);

                accessPortalDeferToServerBehavior = new AccessPortalDeferToServerBehavior()
                {
                    AccessPortalDeferToServerBehaviorUid = GalaxySMS.Common.Constants.AccessPortalDeferToServerBehaviorIds.Always,
                    Display = SharedResources.Resources.AccessPortalDeferToServerBehavior_Always_Display,
                    Description = SharedResources.Resources.AccessPortalDeferToServerBehavior_Always_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalDeferToServerBehavior.Always.ToString(),
                    Code = GalaxySMS.Common.Enums.AccessPortalDeferToServerBehavior.Always,
                    IsActive = true,
                    IsDefault = false
                };
                accessPortalDeferToServerBehaviors.Add(accessPortalDeferToServerBehavior);

                accessPortalDeferToServerBehavior = new AccessPortalDeferToServerBehavior()
                {
                    AccessPortalDeferToServerBehaviorUid = GalaxySMS.Common.Constants.AccessPortalDeferToServerBehaviorIds.WhenPanelWouldDenyAccess,
                    Display = SharedResources.Resources.AccessPortalDeferToServerBehavior_WhenPanelWouldDenyAccess_Display,
                    Description = SharedResources.Resources.AccessPortalDeferToServerBehavior_WhenPanelWouldDenyAccess_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalDeferToServerBehavior.WhenPanelWouldDenyAccess.ToString(),
                    Code = GalaxySMS.Common.Enums.AccessPortalDeferToServerBehavior.WhenPanelWouldDenyAccess,
                    IsActive = true,
                    IsDefault = false
                };
                accessPortalDeferToServerBehaviors.Add(accessPortalDeferToServerBehavior);

                accessPortalDeferToServerBehavior = new AccessPortalDeferToServerBehavior()
                {
                    AccessPortalDeferToServerBehaviorUid = GalaxySMS.Common.Constants.AccessPortalDeferToServerBehaviorIds.WhenPanelWouldGrantAccess,
                    Display = SharedResources.Resources.AccessPortalDeferToServerBehavior_WhenPanelWouldGrantAccess_Display,
                    Description = SharedResources.Resources.AccessPortalDeferToServerBehavior_WhenPanelWouldGrantAccess_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalDeferToServerBehavior.WhenPanelWouldGrantAccess.ToString(),
                    Code = GalaxySMS.Common.Enums.AccessPortalDeferToServerBehavior.WhenPanelWouldGrantAccess,
                    IsActive = true,
                    IsDefault = false
                };
                accessPortalDeferToServerBehaviors.Add(accessPortalDeferToServerBehavior);
                #endregion

                #region Access Portal Multi Factor Mode
                var accessPortalMultiFactorModes = new List<AccessPortalMultiFactorMode>();

                var accessPortalMultiFactorMode = new AccessPortalMultiFactorMode()
                {
                    AccessPortalMultiFactorModeUid = GalaxySMS.Common.Constants.AccessPortalMultiFactorModeIds.SingleFactor,
                    Display = SharedResources.Resources.AccessPortalMultiFactorMode_SingleFactor_Display,
                    Description = SharedResources.Resources.AccessPortalMultiFactorMode_SingleFactor_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalMultiFactorModeCode.SingleFactor.ToString(),
                    Code = (short)GalaxySMS.Common.Enums.AccessPortalMultiFactorModeCode.SingleFactor,
                };
                accessPortalMultiFactorModes.Add(accessPortalMultiFactorMode);

                accessPortalMultiFactorMode = new AccessPortalMultiFactorMode()
                {
                    AccessPortalMultiFactorModeUid = GalaxySMS.Common.Constants.AccessPortalMultiFactorModeIds.TwoFactor,
                    Display = SharedResources.Resources.AccessPortalMultiFactorMode_TwoFactor_Display,
                    Description = SharedResources.Resources.AccessPortalMultiFactorMode_TwoFactor_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalMultiFactorModeCode.TwoFactor.ToString(),
                    Code = (short)GalaxySMS.Common.Enums.AccessPortalMultiFactorModeCode.TwoFactor,
                };
                accessPortalMultiFactorModes.Add(accessPortalMultiFactorMode);

                accessPortalMultiFactorMode = new AccessPortalMultiFactorMode()
                {
                    AccessPortalMultiFactorModeUid = GalaxySMS.Common.Constants.AccessPortalMultiFactorModeIds.ThreeFactor,
                    Display = SharedResources.Resources.AccessPortalMultiFactorMode_ThreeFactor_Display,
                    Description = SharedResources.Resources.AccessPortalMultiFactorMode_ThreeFactor_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.AccessPortalMultiFactorModeCode.ThreeFactor.ToString(),
                    Code = (short)GalaxySMS.Common.Enums.AccessPortalMultiFactorModeCode.ThreeFactor,
                };
                accessPortalMultiFactorModes.Add(accessPortalMultiFactorMode);
                #endregion

                #region Galaxy Activity Event Type

                var standardColor = System.Drawing.Color.Black.ToArgb();
                var alarmAlertColor = System.Drawing.Color.Red.ToArgb();
                var positiveColor = System.Drawing.Color.Green.ToArgb();
                var unlockedColor = System.Drawing.Color.Green.ToArgb();
                var troubleColor = System.Drawing.Color.DarkOrange.ToArgb();
                var noticeColor = System.Drawing.Color.Coral.ToArgb();
                var whoCaresColor = System.Drawing.Color.Gray.ToArgb();

                var galaxyActivityEventTypes = new List<GalaxyActivityEventType>();

                var galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DoorForcedOpen,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DoorForcedOpen,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DoorForcedOpen_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorForcedOpen.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorForcedOpen.ToString(),
                    ForeColor = alarmAlertColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DoorLeftOpen,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DoorLeftOpen,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DoorLeftOpen_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorLeftOpen.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorLeftOpen.ToString(),
                    ForeColor = alarmAlertColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DoorClosed,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DoorClosed,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DoorClosed_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorClosed.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorClosed.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.ReadError,
                    Display = SharedResources.Resources.PanelActivityLogMessage_ReadError,
                    Description = SharedResources.Resources.PanelActivityLogMessage_ReadError_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.ReadError.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.ReadError.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DoorContactShunted,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DoorContactShunted,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DoorContactShunted_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorContactShunted.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorContactShunted.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DoorRequestToExit,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DoorRequestToExit,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DoorRequestToExit_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorRequestToExit.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorRequestToExit.ToString(),
                    ForeColor = positiveColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DoorUnlockBySchedule,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DoorUnlockBySchedule,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DoorUnlockBySchedule_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorUnlockBySchedule.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorUnlockBySchedule.ToString(),
                    ForeColor = unlockedColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DoorLockBySchedule,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DoorLockBySchedule,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DoorLockBySchedule_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorLockBySchedule.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorLockBySchedule.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CpuWarmReset,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CpuWarmReset,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CpuWarmReset_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CpuWarmReset.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CpuWarmReset.ToString(),
                    ForeColor = noticeColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CpuColdReset,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CpuColdReset,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CpuColdReset_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CpuColdReset.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CpuColdReset.ToString(),
                    ForeColor = alarmAlertColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DoorDelayedUnlock,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DoorDelayedUnlock,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DoorDelayedUnlock_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorDelayedUnlock.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorDelayedUnlock.ToString(),
                    ForeColor = unlockedColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);



                //galaxyActivityEventType = new GalaxyActivityEventType()
                //{
                //    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.PointInTroubleOpenCircuit,
                //    Display = SharedResources.Resources.PanelActivityLogMessage_PointInTroubleOpenCircuit,
                //    Description = SharedResources.Resources.PanelActivityLogMessage_PointInTroubleOpenCircuit_Description,
                //    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.PointInTroubleOpenCircuit.ToString(),
                //    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.PointInTroubleOpenCircuit.ToString(),
                //    ForeColor = troubleColor
                //};

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.PointInTrouble,
                    Display = SharedResources.Resources.PanelActivityLogMessage_PointInTrouble,
                    Description = SharedResources.Resources.PanelActivityLogMessage_PointInTrouble_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.PointInTrouble.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.PointInTrouble.ToString(),
                    ForeColor = troubleColor,
                    DeviceType = nameof(InputDevice)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.PointTroubleShortCircuit,
                    Display = SharedResources.Resources.PanelActivityLogMessage_PointTroubleShortCircuit,
                    Description = SharedResources.Resources.PanelActivityLogMessage_PointTroubleShortCircuit_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.PointTroubleShortCircuit.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.PointTroubleShortCircuit.ToString(),
                    ForeColor = troubleColor,
                    DeviceType = nameof(InputDevice)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.PointSecureUnarmed,
                    Display = SharedResources.Resources.PanelActivityLogMessage_PointSecureUnarmed,
                    Description = SharedResources.Resources.PanelActivityLogMessage_PointSecureUnarmed_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.PointSecureUnarmed.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.PointSecureUnarmed.ToString(),
                    ForeColor = whoCaresColor,
                    DeviceType = nameof(InputDevice)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.PointAlarmUnarmed,
                    Display = SharedResources.Resources.PanelActivityLogMessage_PointAlarmUnarmed,
                    Description = SharedResources.Resources.PanelActivityLogMessage_PointAlarmUnarmed_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.PointAlarmUnarmed.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.PointAlarmUnarmed.ToString(),
                    ForeColor = whoCaresColor,
                    DeviceType = nameof(InputDevice)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.PointSecureArmed,
                    Display = SharedResources.Resources.PanelActivityLogMessage_PointSecureArmed,
                    Description = SharedResources.Resources.PanelActivityLogMessage_PointSecureArmed_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.PointSecureArmed.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.PointSecureArmed.ToString(),
                    ForeColor = positiveColor,
                    DeviceType = nameof(InputDevice)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.PointAlarmArmed,
                    Display = SharedResources.Resources.PanelActivityLogMessage_PointAlarmArmed,
                    Description = SharedResources.Resources.PanelActivityLogMessage_PointAlarmArmed_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.PointAlarmArmed.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.PointAlarmArmed.ToString(),
                    ForeColor = alarmAlertColor,
                    DeviceType = nameof(InputDevice)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                //galaxyActivityEventType = new GalaxyActivityEventType()
                //{
                //    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.PointShuntedByCommand,
                //    Display = SharedResources.Resources.PanelActivityLogMessage_PointShuntedByCommand,
                //    Description = SharedResources.Resources.PanelActivityLogMessage_PointShuntedByCommand_Description,
                //    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.PointShuntedByCommand.ToString(),
                //    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.PointShuntedByCommand.ToString(),
                //    ForeColor = standardColor
                //};
                //galaxyActivityEventTypes.Add(galaxyActivityEventType);

                //galaxyActivityEventType = new GalaxyActivityEventType()
                //{
                //    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.PointUnshuntedByCommand,
                //    Display = SharedResources.Resources.PanelActivityLogMessage_PointUnshuntedByCommand,
                //    Description = SharedResources.Resources.PanelActivityLogMessage_PointUnshuntedByCommand_Description,
                //    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.PointUnshuntedByCommand.ToString(),
                //    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.PointUnshuntedByCommand.ToString(),
                //    ForeColor = standardColor
                //};
                //galaxyActivityEventTypes.Add(galaxyActivityEventType);

                //galaxyActivityEventType = new GalaxyActivityEventType()
                //{
                //    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.PointTakenOutOfServiceByCommand,
                //    Display = SharedResources.Resources.PanelActivityLogMessage_PointTakenOutOfServiceByCommand,
                //    Description = SharedResources.Resources.PanelActivityLogMessage_PointTakenOutOfServiceByCommand_Description,
                //    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.PointTakenOutOfServiceByCommand.ToString(),
                //    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.PointTakenOutOfServiceByCommand.ToString(),
                //    ForeColor = standardColor
                //};
                //galaxyActivityEventTypes.Add(galaxyActivityEventType);

                //galaxyActivityEventType = new GalaxyActivityEventType()
                //{
                //    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.PointReturnedToServiceByCommand,
                //    Display = SharedResources.Resources.PanelActivityLogMessage_PointReturnedToServiceByCommand,
                //    Description = SharedResources.Resources.PanelActivityLogMessage_PointReturnedToServiceByCommand_Description,
                //    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.PointReturnedToServiceByCommand.ToString(),
                //    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.PointReturnedToServiceByCommand.ToString(),
                //    ForeColor = standardColor
                //};
                //galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.OutputOffBySchedule,
                    Display = SharedResources.Resources.PanelActivityLogMessage_OutputOffBySchedule,
                    Description = SharedResources.Resources.PanelActivityLogMessage_OutputOffBySchedule_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.OutputOffBySchedule.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.OutputOffBySchedule.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(OutputDevice)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.OutputOnBySchedule,
                    Display = SharedResources.Resources.PanelActivityLogMessage_OutputOnBySchedule,
                    Description = SharedResources.Resources.PanelActivityLogMessage_OutputOnBySchedule_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.OutputOnBySchedule.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.OutputOnBySchedule.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(OutputDevice)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                //galaxyActivityEventType = new GalaxyActivityEventType()
                //{
                //    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.OutputOnByCommand,
                //    Display = SharedResources.Resources.PanelActivityLogMessage_OutputOnByCommand,
                //    Description = SharedResources.Resources.PanelActivityLogMessage_OutputOnByCommand_Description,
                //    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.OutputOnByCommand.ToString(),
                //    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.OutputOnByCommand.ToString(),
                //    ForeColor = standardColor
                //};
                //galaxyActivityEventTypes.Add(galaxyActivityEventType);

                //galaxyActivityEventType = new GalaxyActivityEventType()
                //{
                //    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.OutputOffByCommand,
                //    Display = SharedResources.Resources.PanelActivityLogMessage_OutputOffByCommand,
                //    Description = SharedResources.Resources.PanelActivityLogMessage_OutputOffByCommand_Description,
                //    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.OutputOffByCommand.ToString(),
                //    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.OutputOffByCommand.ToString(),
                //    ForeColor = standardColor
                //};
                //galaxyActivityEventTypes.Add(galaxyActivityEventType);

                //galaxyActivityEventType = new GalaxyActivityEventType()
                //{
                //    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.OutputTakenOutOfServiceByCommand,
                //    Display = SharedResources.Resources.PanelActivityLogMessage_OutputTakenOutOfServiceByCommand,
                //    Description = SharedResources.Resources.PanelActivityLogMessage_OutputTakenOutOfServiceByCommand_Description,
                //    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.OutputTakenOutOfServiceByCommand.ToString(),
                //    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.OutputTakenOutOfServiceByCommand.ToString(),
                //    ForeColor = standardColor
                //};
                //galaxyActivityEventTypes.Add(galaxyActivityEventType);

                //galaxyActivityEventType = new GalaxyActivityEventType()
                //{
                //    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.OutputReturnedToServiceByCommand,
                //    Display = SharedResources.Resources.PanelActivityLogMessage_OutputReturnedToServiceByCommand,
                //    Description = SharedResources.Resources.PanelActivityLogMessage_OutputReturnedToServiceByCommand_Description,
                //    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.OutputReturnedToServiceByCommand.ToString(),
                //    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.OutputReturnedToServiceByCommand.ToString(),
                //    ForeColor = standardColor
                //};
                //galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.IoGroupDisarmedBySchedule,
                    Display = SharedResources.Resources.PanelActivityLogMessage_IoGroupDisarmedBySchedule,
                    Description = SharedResources.Resources.PanelActivityLogMessage_IoGroupDisarmedBySchedule_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.IoGroupDisarmedBySchedule.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.IoGroupDisarmedBySchedule.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(InputOutputGroup)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.IoGroupArmedBySchedule,
                    Display = SharedResources.Resources.PanelActivityLogMessage_IoGroupArmedBySchedule,
                    Description = SharedResources.Resources.PanelActivityLogMessage_IoGroupArmedBySchedule_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.IoGroupArmedBySchedule.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.IoGroupArmedBySchedule.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(InputOutputGroup)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.IoGroupArmedByCommand,
                    Display = SharedResources.Resources.PanelActivityLogMessage_IoGroupArmedByCommand,
                    Description = SharedResources.Resources.PanelActivityLogMessage_IoGroupArmedByCommand_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.IoGroupArmedByCommand.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.IoGroupArmedByCommand.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(InputOutputGroup)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.IoGroupDisarmedByCommand,
                    Display = SharedResources.Resources.PanelActivityLogMessage_IoGroupDisarmedByCommand,
                    Description = SharedResources.Resources.PanelActivityLogMessage_IoGroupDisarmedByCommand_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.IoGroupDisarmedByCommand.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.IoGroupDisarmedByCommand.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(InputOutputGroup)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.IoGroupShuntedByCommand,
                    Display = SharedResources.Resources.PanelActivityLogMessage_IoGroupShuntedByCommand,
                    Description = SharedResources.Resources.PanelActivityLogMessage_IoGroupShuntedByCommand_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.IoGroupShuntedByCommand.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.IoGroupShuntedByCommand.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(InputOutputGroup)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.IoGroupUnshuntedByCommand,
                    Display = SharedResources.Resources.PanelActivityLogMessage_IoGroupUnshuntedByCommand,
                    Description = SharedResources.Resources.PanelActivityLogMessage_IoGroupUnshuntedByCommand_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.IoGroupUnshuntedByCommand.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.IoGroupUnshuntedByCommand.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(InputOutputGroup)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.IoGroupArmByCard,
                    Display = SharedResources.Resources.PanelActivityLogMessage_IoGroupArmByCard,
                    Description = SharedResources.Resources.PanelActivityLogMessage_IoGroupArmByCard_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.IoGroupArmByCard.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.IoGroupArmByCard.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(InputOutputGroup)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.IoGroupDisarmByCard,
                    Display = SharedResources.Resources.PanelActivityLogMessage_IoGroupDisarmByCard,
                    Description = SharedResources.Resources.PanelActivityLogMessage_IoGroupDisarmByCard_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.IoGroupDisarmByCard.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.IoGroupDisarmByCard.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(InputOutputGroup)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DeviceOffline,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DeviceOffline,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DeviceOffline_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DeviceOffline.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DeviceOffline.ToString(),
                    ForeColor = troubleColor,
                    DeviceType = "Device"
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DeviceOnline,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DeviceOnline,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DeviceOnline_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DeviceOnline.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DeviceOnline.ToString(),
                    ForeColor = positiveColor,
                    DeviceType = "Device"
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.Relay2OffBySchedule,
                    Display = SharedResources.Resources.PanelActivityLogMessage_Relay2OffBySchedule,
                    Description = SharedResources.Resources.PanelActivityLogMessage_Relay2OffBySchedule_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.Relay2OffBySchedule.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.Relay2OffBySchedule.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.Relay2OnBySchedule,
                    Display = SharedResources.Resources.PanelActivityLogMessage_Relay2OnBySchedule,
                    Description = SharedResources.Resources.PanelActivityLogMessage_Relay2OnBySchedule_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.Relay2OnBySchedule.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.Relay2OnBySchedule.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DoorContactTroubleOpenCircuit,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DoorContactTroubleOpenCircuit,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DoorContactTroubleOpenCircuit_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorContactTroubleOpenCircuit.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorContactTroubleOpenCircuit.ToString(),
                    ForeColor = troubleColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DoorContactTroubleShortCircuit,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DoorContactTroubleShortCircuit,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DoorContactTroubleShortCircuit_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorContactTroubleShortCircuit.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorContactTroubleShortCircuit.ToString(),
                    ForeColor = troubleColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DoorHeartbeartAlarm,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DoorHeartbeartAlarm,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DoorHeartbeartAlarm_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorHeartbeartAlarm.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorHeartbeartAlarm.ToString(),
                    ForeColor = alarmAlertColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DoorHeartbeatRestored,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DoorHeartbeatRestored,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DoorHeartbeatRestored_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorHeartbeatRestored.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorHeartbeatRestored.ToString(),
                    ForeColor = positiveColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DoorContactTroubleCleared,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DoorContactTroubleCleared,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DoorContactTroubleCleared_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorContactTroubleCleared.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorContactTroubleCleared.ToString(),
                    ForeColor = positiveColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.BoardCommunicationStopped,
                    Display = SharedResources.Resources.PanelActivityLogMessage_BoardCommunicationStopped,
                    Description = SharedResources.Resources.PanelActivityLogMessage_BoardCommunicationStopped_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.BoardCommunicationStopped.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.BoardCommunicationStopped.ToString(),
                    ForeColor = alarmAlertColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.BoardCommunicationStarted,
                    Display = SharedResources.Resources.PanelActivityLogMessage_BoardCommunicationStarted,
                    Description = SharedResources.Resources.PanelActivityLogMessage_BoardCommunicationStarted_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.BoardCommunicationStarted.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.BoardCommunicationStarted.ToString(),
                    ForeColor = positiveColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.ReaderHeartbeatStopped,
                    Display = SharedResources.Resources.PanelActivityLogMessage_ReaderHeartbeatStopped,
                    Description = SharedResources.Resources.PanelActivityLogMessage_ReaderHeartbeatStopped_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderHeartbeatStopped.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderHeartbeatStopped.ToString(),
                    ForeColor = alarmAlertColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.ReaderHeartbeatStarted,
                    Display = SharedResources.Resources.PanelActivityLogMessage_ReaderHeartbeatStarted,
                    Description = SharedResources.Resources.PanelActivityLogMessage_ReaderHeartbeatStarted_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderHeartbeatStarted.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderHeartbeatStarted.ToString(),
                    ForeColor = positiveColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.ReaderLowBattery,
                    Display = SharedResources.Resources.PanelActivityLogMessage_ReaderLowBattery,
                    Description = SharedResources.Resources.PanelActivityLogMessage_ReaderLowBattery_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderLowBattery.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderLowBattery.ToString(),
                    ForeColor = noticeColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.ReaderBatteryFlat,
                    Display = SharedResources.Resources.PanelActivityLogMessage_ReaderBatteryFlat,
                    Description = SharedResources.Resources.PanelActivityLogMessage_ReaderBatteryFlat_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderBatteryFlat.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderBatteryFlat.ToString(),
                    ForeColor = noticeColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.ReaderBatteryOk,
                    Display = SharedResources.Resources.PanelActivityLogMessage_ReaderBatteryOk,
                    Description = SharedResources.Resources.PanelActivityLogMessage_ReaderBatteryOk_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderBatteryOk.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderBatteryOk.ToString(),
                    ForeColor = positiveColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CredentialNotInPanelMemory,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CredentialNotInPanelMemory,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CredentialNotInPanelMemory_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CredentialNotInPanelMemory.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CredentialNotInPanelMemory.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CredentialNotInPanelMemoryReverse,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CredentialNotInPanelMemoryReverse,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CredentialNotInPanelMemoryReverse_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CredentialNotInPanelMemoryReverse.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CredentialNotInPanelMemoryReverse.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.AccessGrantedNoCardCodeLookup,
                    Display = SharedResources.Resources.PanelActivityLogMessage_AccessGrantedNoCardCodeLookup,
                    Description = SharedResources.Resources.PanelActivityLogMessage_AccessGrantedNoCardCodeLookup_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.AccessGrantedNoCardCodeLookup.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.AccessGrantedNoCardCodeLookup.ToString(),
                    ForeColor = unlockedColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.AccessDeniedAttemptPivCardExpired,
                    Display = SharedResources.Resources.PanelActivityLogMessage_AccessDeniedAttemptPivCardExpired,
                    Description = SharedResources.Resources.PanelActivityLogMessage_AccessDeniedAttemptPivCardExpired_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.AccessDeniedAttemptPivCardExpired.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.AccessDeniedAttemptPivCardExpired.ToString(),
                    ForeColor = noticeColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.AccessDenied,
                    Display = SharedResources.Resources.PanelActivityLogMessage_AccessDenied,
                    Description = SharedResources.Resources.PanelActivityLogMessage_AccessDenied_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.AccessDenied.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.AccessDenied.ToString(),
                    ForeColor = noticeColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.AccessGranted,
                    Display = SharedResources.Resources.PanelActivityLogMessage_AccessGranted,
                    Description = SharedResources.Resources.PanelActivityLogMessage_AccessGranted_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.AccessGranted.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.AccessGranted.ToString(),
                    ForeColor = unlockedColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);


                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.AccessGrantedDoorNotOpened,
                    Display = SharedResources.Resources.PanelActivityLogMessage_AccessGrantedDoorNotOpened,
                    Description = SharedResources.Resources.PanelActivityLogMessage_AccessGrantedDoorNotOpened_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.AccessGrantedDoorNotOpened.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.AccessGrantedDoorNotOpened.ToString(),
                    ForeColor = unlockedColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);


                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.AutoUnlockActivatedByAccessGranted,
                    Display = SharedResources.Resources.PanelActivityLogMessage_AutoUnlockActivatedByAccessGranted,
                    Description = SharedResources.Resources.PanelActivityLogMessage_AutoUnlockActivatedByAccessGranted_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.AutoUnlockActivatedByAccessGranted.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.AutoUnlockActivatedByAccessGranted.ToString(),
                    ForeColor = unlockedColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CredentialDoublePresentDoorUnlocked,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CredentialDoublePresentDoorUnlocked,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CredentialDoublePresentDoorUnlocked_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CredentialDoublePresentDoorUnlocked.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CredentialDoublePresentDoorUnlocked.ToString(),
                    ForeColor = unlockedColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CredentialDoublePresentDoorLocked,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CredentialDoublePresentDoorLocked,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CredentialDoublePresentDoorLocked_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CredentialDoublePresentDoorLocked.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CredentialDoublePresentDoorLocked.ToString(),
                    ForeColor = unlockedColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.AccessGrantedWithPinData,
                    Display = SharedResources.Resources.PanelActivityLogMessage_AccessGrantedWithPinData,
                    Description = SharedResources.Resources.PanelActivityLogMessage_AccessGrantedWithPinData_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.AccessGrantedWithPinData.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.AccessGrantedWithPinData.ToString(),
                    ForeColor = unlockedColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DuressAuxiliaryFunction,
                    Display = SharedResources.Resources.PanelActivityLogMessage_Duress,
                    Description = SharedResources.Resources.PanelActivityLogMessage_Duress_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DuressAuxiliaryFunction.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DuressAuxiliaryFunction.ToString(),
                    ForeColor = alarmAlertColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.PassbackViolation,
                    Display = SharedResources.Resources.PanelActivityLogMessage_PassbackViolation,
                    Description = SharedResources.Resources.PanelActivityLogMessage_PassbackViolation_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.PassbackViolation.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.PassbackViolation.ToString(),
                    ForeColor = noticeColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.IncorrectPinEntered,
                    Display = SharedResources.Resources.PanelActivityLogMessage_IncorrectPinEntered,
                    Description = SharedResources.Resources.PanelActivityLogMessage_IncorrectPinEntered_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.IncorrectPinEntered.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.IncorrectPinEntered.ToString(),
                    ForeColor = noticeColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.PassbackForgivenForUser,
                    Display = SharedResources.Resources.PanelActivityLogMessage_PassbackForgivenForUser,
                    Description = SharedResources.Resources.PanelActivityLogMessage_PassbackForgivenForUser_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.PassbackForgivenForUser.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.PassbackForgivenForUser.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.PassbackForgivenForAllUsers,
                    Display = SharedResources.Resources.PanelActivityLogMessage_PassbackForgivenForAllUsers,
                    Description = SharedResources.Resources.PanelActivityLogMessage_PassbackForgivenForAllUsers_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.PassbackForgivenForAllUsers.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.PassbackForgivenForAllUsers.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CredentialActivated,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CredentialActivated,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CredentialActivated_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CredentialActivated.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CredentialActivated.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CredentialDeactivated,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CredentialDeactivated,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CredentialDeactivated_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CredentialDeactivated.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CredentialDeactivated.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.OtisElevatorAudit,
                    Display = SharedResources.Resources.PanelActivityLogMessage_OtisElevatorAudit,
                    Description = SharedResources.Resources.PanelActivityLogMessage_OtisElevatorAudit_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.OtisElevatorAudit.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.OtisElevatorAudit.ToString(),
                    ForeColor = standardColor,
                    DeviceType = "Elevator"
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.ReaderRadioInterferenceDetected,
                    Display = SharedResources.Resources.PanelActivityLogMessage_ReaderRadioInterferenceDetected,
                    Description = SharedResources.Resources.PanelActivityLogMessage_ReaderRadioInterferenceDetected_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderRadioInterferenceDetected.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderRadioInterferenceDetected.ToString(),
                    ForeColor = noticeColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.ReaderRadioInterferenceCleared,
                    Display = SharedResources.Resources.PanelActivityLogMessage_ReaderRadioInterferenceCleared,
                    Description = SharedResources.Resources.PanelActivityLogMessage_ReaderRadioInterferenceCleared_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderRadioInterferenceCleared.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderRadioInterferenceCleared.ToString(),
                    ForeColor = positiveColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CpuTamperRestored,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CpuTamperRestored,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CpuTamperRestored_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CpuTamperRestored.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CpuTamperRestored.ToString(),
                    ForeColor = positiveColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CpuTamperAlarm,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CpuTamperAlarm,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CpuTamperAlarm_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CpuTamperAlarm.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CpuTamperAlarm.ToString(),
                    ForeColor = troubleColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CpuLowBatteryRestored,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CpuLowBatteryRestored,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CpuLowBatteryRestored_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CpuLowBatteryRestored.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CpuLowBatteryRestored.ToString(),
                    ForeColor = positiveColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CpuLowBatteryAlarm,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CpuLowBatteryAlarm,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CpuLowBatteryAlarm_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CpuLowBatteryAlarm.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CpuLowBatteryAlarm.ToString(),
                    ForeColor = troubleColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CpuAcFailureRestored,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CpuAcFailureRestored,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CpuAcFailureRestored_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CpuAcFailureRestored.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CpuAcFailureRestored.ToString(),
                    ForeColor = positiveColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CpuAcFailureAlarm,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CpuAcFailureAlarm,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CpuAcFailureAlarm_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CpuAcFailureAlarm.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CpuAcFailureAlarm.ToString(),
                    ForeColor = troubleColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.EmergencyUnlockInactive,
                    Display = SharedResources.Resources.PanelActivityLogMessage_EmergencyUnlockInactive,
                    Description = SharedResources.Resources.PanelActivityLogMessage_EmergencyUnlockInactive_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.EmergencyUnlockInactive.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.EmergencyUnlockInactive.ToString(),
                    ForeColor = positiveColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.EmergencyUnlockActive,
                    Display = SharedResources.Resources.PanelActivityLogMessage_EmergencyUnlockActive,
                    Description = SharedResources.Resources.PanelActivityLogMessage_EmergencyUnlockActive_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.EmergencyUnlockActive.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.EmergencyUnlockActive.ToString(),
                    ForeColor = alarmAlertColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.ReaderTamperAlarm,
                    Display = SharedResources.Resources.PanelActivityLogMessage_ReaderTamperAlarm,
                    Description = SharedResources.Resources.PanelActivityLogMessage_ReaderTamperAlarm_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderTamperAlarm.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderTamperAlarm.ToString(),
                    ForeColor = troubleColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.ReaderTamperRestored,
                    Display = SharedResources.Resources.PanelActivityLogMessage_ReaderTamperRestored,
                    Description = SharedResources.Resources.PanelActivityLogMessage_ReaderTamperRestored_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderTamperRestored.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderTamperRestored.ToString(),
                    ForeColor = positiveColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DoorModuleAdapterTamperSafe,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DoorModuleAdapterTamperSafe,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DoorModuleAdapterTamperSafe_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorModuleAdapterTamperSafe.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorModuleAdapterTamperSafe.ToString(),
                    ForeColor = positiveColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DoorModuleAdapterTamperAlarm,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DoorModuleAdapterTamperAlarm,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DoorModuleAdapterTamperAlarm_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorModuleAdapterTamperAlarm.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorModuleAdapterTamperAlarm.ToString(),
                    ForeColor = troubleColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CrisisModeActivated,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CrisisModeActivated,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CrisisModeActivated_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CrisisModeActivated.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CrisisModeActivated.ToString(),
                    ForeColor = noticeColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CrisisModeDeActivated,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CrisisModeDeActivated,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CrisisModeDeActivated_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CrisisModeDeActivated.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CrisisModeDeActivated.ToString(),
                    ForeColor = positiveColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CrisisModeDeActivatedByCommand,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CrisisModeDeActivatedByCommand,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CrisisModeDeActivatedByCommand_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CrisisModeDeActivatedByCommand.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CrisisModeDeActivatedByCommand.ToString(),
                    ForeColor = positiveColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CrisisModeActivatedByCommand,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CrisisModeActivatedByCommand,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CrisisModeActivatedByCommand_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CrisisModeActivatedByCommand.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CrisisModeActivatedByCommand.ToString(),
                    ForeColor = noticeColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CpuTurnLoggingOn,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CpuTurnLoggingOn,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CpuTurnLoggingOn_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CpuTurnLoggingOn.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CpuTurnLoggingOn.ToString(),
                    ForeColor = whoCaresColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CpuTurnLoggingOff,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CpuTurnLoggingOff,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CpuTurnLoggingOff_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CpuTurnLoggingOff.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CpuTurnLoggingOff.ToString(),
                    ForeColor = whoCaresColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DualSerialInterfaceRelayBoardOffline,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DualSerialInterfaceRelayBoardOffline,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DualSerialInterfaceRelayBoardOffline_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DualSerialInterfaceRelayBoardOffline.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DualSerialInterfaceRelayBoardOffline.ToString(),
                    ForeColor = troubleColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DualSerialInterfaceRelayBoardOnline,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DualSerialInterfaceRelayBoardOnline,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DualSerialInterfaceRelayBoardOnline_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DualSerialInterfaceRelayBoardOnline.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DualSerialInterfaceRelayBoardOnline.ToString(),
                    ForeColor = positiveColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DualSerialInterfaceDoorModuleOffline,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DualSerialInterfaceDoorModuleOffline,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DualSerialInterfaceDoorModuleOffline_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DualSerialInterfaceDoorModuleOffline.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DualSerialInterfaceDoorModuleOffline.ToString(),
                    ForeColor = troubleColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DualSerialInterfaceDoorModuleOnline,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DualSerialInterfaceDoorModuleOnline,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DualSerialInterfaceDoorModuleOnline_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DualSerialInterfaceDoorModuleOnline.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DualSerialInterfaceDoorModuleOnline.ToString(),
                    ForeColor = positiveColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);


                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DualSerialInterfaceInputModuleOffline,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DualSerialInterfaceInputModuleOffline,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DualSerialInterfaceInputModuleOffline_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DualSerialInterfaceInputModuleOffline.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DualSerialInterfaceInputModuleOffline.ToString(),
                    ForeColor = troubleColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DualSerialInterfaceInputModuleOnline,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DualSerialInterfaceInputModuleOnline,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DualSerialInterfaceInputModuleOnline_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DualSerialInterfaceInputModuleOnline.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DualSerialInterfaceInputModuleOnline.ToString(),
                    ForeColor = positiveColor,
                    DeviceType = nameof(GalaxyPanel)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);
                //galaxyActivityEventType = new GalaxyActivityEventType()
                //{
                //    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CardTourStarting,
                //    Display = SharedResources.Resources.PanelActivityLogMessage_CardTourStarting,
                //    Description = SharedResources.Resources.PanelActivityLogMessage_CardTourStarting_Description,
                //    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CardTourStarting.ToString(),
                //    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CardTourStarting.ToString(),
                //    ForeColor = standardColor
                //};
                //galaxyActivityEventTypes.Add(galaxyActivityEventType);

                //galaxyActivityEventType = new GalaxyActivityEventType()
                //{
                //    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CardTourContinuing,
                //    Display = SharedResources.Resources.PanelActivityLogMessage_CardTourContinuing,
                //    Description = SharedResources.Resources.PanelActivityLogMessage_CardTourContinuing_Description,
                //    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CardTourContinuing.ToString(),
                //    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CardTourContinuing.ToString(),
                //    ForeColor = standardColor
                //};
                //galaxyActivityEventTypes.Add(galaxyActivityEventType);

                //galaxyActivityEventType = new GalaxyActivityEventType()
                //{
                //    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CardTourCompleted,
                //    Display = SharedResources.Resources.PanelActivityLogMessage_CardTourCompleted,
                //    Description = SharedResources.Resources.PanelActivityLogMessage_CardTourCompleted_Description,
                //    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CardTourCompleted.ToString(),
                //    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CardTourCompleted.ToString(),
                //    ForeColor = standardColor
                //};
                //galaxyActivityEventTypes.Add(galaxyActivityEventType);

                //galaxyActivityEventType = new GalaxyActivityEventType()
                //{
                //    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CardTourOverdue,
                //    Display = SharedResources.Resources.PanelActivityLogMessage_CardTourOverdue,
                //    Description = SharedResources.Resources.PanelActivityLogMessage_CardTourOverdue_Description,
                //    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CardTourOverdue.ToString(),
                //    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CardTourOverdue.ToString(),
                //    ForeColor = noticeColor
                //};
                //galaxyActivityEventTypes.Add(galaxyActivityEventType);

                //galaxyActivityEventType = new GalaxyActivityEventType()
                //{
                //    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CardTourIncorrectStartReader,
                //    Display = SharedResources.Resources.PanelActivityLogMessage_CardTourIncorrectStartReader,
                //    Description = SharedResources.Resources.PanelActivityLogMessage_CardTourIncorrectStartReader_Description,
                //    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CardTourIncorrectStartReader.ToString(),
                //    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CardTourIncorrectStartReader.ToString(),
                //    ForeColor = standardColor
                //};
                //galaxyActivityEventTypes.Add(galaxyActivityEventType);

                //galaxyActivityEventType = new GalaxyActivityEventType()
                //{
                //    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CardTourNonExistantTour,
                //    Display = SharedResources.Resources.PanelActivityLogMessage_CardTourNonExistantTour,
                //    Description = SharedResources.Resources.PanelActivityLogMessage_CardTourNonExistantTour_Description,
                //    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CardTourNonExistantTour.ToString(),
                //    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CardTourNonExistantTour.ToString(),
                //    ForeColor = standardColor
                //};
                //galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandUnlockDoor,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandUnlockDoor,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandUnlockDoor_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandUnlockDoor.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandUnlockDoor.ToString(),
                    ForeColor = unlockedColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandLockDoor,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandLockDoor,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandLockDoor_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandLockDoor.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandLockDoor.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandDisableDoor,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandDisableDoor,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandDisableDoor_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandDisableDoor.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandDisableDoor.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandEnableDoor,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandEnableDoor,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandEnableDoor_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandEnableDoor.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandEnableDoor.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandPulseDoor,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandPulseDoor,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandPulseDoor_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandPulseDoor.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandPulseDoor.ToString(),
                    ForeColor = unlockedColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandRelay2Off,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandRelay2Off,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandRelay2Off_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandRelay2Off.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandRelay2Off.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandRelay2On,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandRelay2On,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandRelay2On_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandRelay2On.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandRelay2On.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandUnlockDoorGroup,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandUnlockDoorGroup,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandUnlockDoorGroup_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandUnlockDoorGroup.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandUnlockDoorGroup.ToString(),
                    ForeColor = unlockedColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandLockDoorGroup,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandLockDoorGroup,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandLockDoorGroup_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandLockDoorGroup.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandLockDoorGroup.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandDisableDoorGroup,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandDisableDoorGroup,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandDisableDoorGroup_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandDisableDoorGroup.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandDisableDoorGroup.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandEnableDoorGroup,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandEnableDoorGroup,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandEnableDoorGroup_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandEnableDoorGroup.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandEnableDoorGroup.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandShuntIOGroup,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandShuntIOGroup,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandShuntIOGroup_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandShuntIOGroup.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandShuntIOGroup.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(InputOutputGroup)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandUnshuntIOGroup,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandUnshuntIOGroup,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandUnshuntIOGroup_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandUnshuntIOGroup.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandUnshuntIOGroup.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(InputOutputGroup)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandDisableInput,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandDisableInput,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandDisableInput_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandDisableInput.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandDisableInput.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(InputDevice)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandEnableInput,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandEnableInput,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandEnableInput_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandEnableInput.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandEnableInput.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(InputDevice)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandArmIOGroup,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandArmIOGroup,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandArmIOGroup_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandArmIOGroup.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandArmIOGroup.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(InputOutputGroup)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandDisarmIOGroup,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandDisarmIOGroup,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandDisarmIOGroup_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandDisarmIOGroup.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandDisarmIOGroup.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(InputOutputGroup)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandShuntInput,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandShuntInput,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandShuntInput_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandShuntInput.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandShuntInput.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(InputDevice)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandUnshuntInput,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandUnshuntInput,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandUnshuntInput_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandUnshuntInput.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandUnshuntInput.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(InputDevice)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandOutputOn,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandOutputOn,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandOutputOn_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandOutputOn.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandOutputOn.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(OutputDevice)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandOutputOff,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandOutputOff,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandOutputOff_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandOutputOff.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandOutputOff.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(OutputDevice)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandOutputEnable,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandOutputEnable,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandOutputEnable_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandOutputEnable.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandOutputEnable.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(OutputDevice)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandOutputDisable,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandOutputDisable,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandOutputDisable_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandOutputDisable.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandOutputDisable.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(OutputDevice)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandElevatorPulse,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandElevatorPulse,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandElevatorPulse_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandElevatorPulse.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandElevatorPulse.ToString(),
                    ForeColor = unlockedColor,
                    DeviceType = "Elevator"
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandElevatorEarlyOn,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandElevatorEarlyOn,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandElevatorEarlyOn_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandElevatorEarlyOn.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandElevatorEarlyOn.ToString(),
                    ForeColor = standardColor,
                    DeviceType = "Elevator"
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandElevatorEarlyOff,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandElevatorEarlyOff,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandElevatorEarlyOff_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandElevatorEarlyOff.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandElevatorEarlyOff.ToString(),
                    ForeColor = standardColor,
                    DeviceType = "Elevator"
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandElevatorCancelEarlyOn,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandElevatorCancelEarlyOn,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandElevatorCancelEarlyOn_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandElevatorCancelEarlyOn.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandElevatorCancelEarlyOn.ToString(),
                    ForeColor = standardColor,
                    DeviceType = "Elevator"
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.CommandElevatorCancelEarlyOff,
                    Display = SharedResources.Resources.PanelActivityLogMessage_CommandElevatorCancelEarlyOff,
                    Description = SharedResources.Resources.PanelActivityLogMessage_CommandElevatorCancelEarlyOff_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandElevatorCancelEarlyOff.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.CommandElevatorCancelEarlyOff.ToString(),
                    ForeColor = standardColor,
                    DeviceType = "Elevator"
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.ReaderPrivacyModeEntered,
                    Display = SharedResources.Resources.PanelActivityLogMessage_ReaderPrivacyModeEntered,
                    Description = SharedResources.Resources.PanelActivityLogMessage_ReaderPrivacyModeEntered_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderPrivacyModeEntered.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderPrivacyModeEntered.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.ReaderPrivacyModeExited,
                    Display = SharedResources.Resources.PanelActivityLogMessage_ReaderPrivacyModeExited,
                    Description = SharedResources.Resources.PanelActivityLogMessage_ReaderPrivacyModeExited_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderPrivacyModeExited.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderPrivacyModeExited.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.ReaderOfficeModeEntered,
                    Display = SharedResources.Resources.PanelActivityLogMessage_ReaderOfficeModeEntered,
                    Description = SharedResources.Resources.PanelActivityLogMessage_ReaderOfficeModeEntered_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderOfficeModeEntered.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderOfficeModeEntered.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.ReaderOfficeModeExited,
                    Display = SharedResources.Resources.PanelActivityLogMessage_ReaderOfficeModeExited,
                    Description = SharedResources.Resources.PanelActivityLogMessage_ReaderOfficeModeExited_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderOfficeModeExited.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderOfficeModeExited.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.ReaderNdeMagnetAlertNeedsCalibrated,
                    Display = SharedResources.Resources.PanelActivityLogMessage_ReaderNdeMagnetAlertNeedsCalibrated,
                    Description = SharedResources.Resources.PanelActivityLogMessage_ReaderNdeMagnetAlertNeedsCalibrated_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderNdeMagnetAlertNeedsCalibrated.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderNdeMagnetAlertNeedsCalibrated.ToString(),
                    ForeColor = noticeColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.ReaderNdeMagnetSafeCalibrated,
                    Display = SharedResources.Resources.PanelActivityLogMessage_ReaderNdeMagnetSafeCalibrated,
                    Description = SharedResources.Resources.PanelActivityLogMessage_ReaderNdeMagnetSafeCalibrated_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderNdeMagnetSafeCalibrated.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.ReaderNdeMagnetSafeCalibrated.ToString(),
                    ForeColor = positiveColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.DoorContactChange,
                    Display = SharedResources.Resources.PanelActivityLogMessage_DoorContactChange,
                    Description = SharedResources.Resources.PanelActivityLogMessage_DoorContactChange_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorContactChange.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.DoorContactChange.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.VeridtReaderTamperAlarm,
                    Display = SharedResources.Resources.PanelActivityLogMessage_VeridtReaderTamperAlarm,
                    Description = SharedResources.Resources.PanelActivityLogMessage_VeridtReaderTamperAlarm_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.VeridtReaderTamperAlarm.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.VeridtReaderTamperAlarm.ToString(),
                    ForeColor = troubleColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.VeridtReaderTamperSafe,
                    Display = SharedResources.Resources.PanelActivityLogMessage_VeridtReaderTamperSafe,
                    Description = SharedResources.Resources.PanelActivityLogMessage_VeridtReaderTamperSafe_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.VeridtReaderTamperSafe.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.VeridtReaderTamperSafe.ToString(),
                    ForeColor = positiveColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.VeridtCardCertificateProblem,
                    Display = SharedResources.Resources.PanelActivityLogMessage_VeridtCardCertificateProblem,
                    Description = SharedResources.Resources.PanelActivityLogMessage_VeridtCardCertificateProblem_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.VeridtCardCertificateProblem.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.VeridtCardCertificateProblem.ToString(),
                    ForeColor = noticeColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);

                galaxyActivityEventType = new GalaxyActivityEventType()
                {
                    GalaxyActivityEventTypeUid = GalaxySMS.Common.Constants.PanelActivityLogMessageCodeIds.VeridtReaderFactorModeSet,
                    Display = SharedResources.Resources.PanelActivityLogMessage_VeridtReaderFactorModeSet,
                    Description = SharedResources.Resources.PanelActivityLogMessage_VeridtReaderFactorModeSet_Description,
                    UniqueResourceName = GalaxySMS.Common.Enums.PanelActivityEventCode.VeridtReaderFactorModeSet.ToString(),
                    EventType = GalaxySMS.Common.Enums.PanelActivityEventCode.VeridtReaderFactorModeSet.ToString(),
                    ForeColor = standardColor,
                    DeviceType = nameof(AccessPortal)
                };
                galaxyActivityEventTypes.Add(galaxyActivityEventType);
                #endregion

                #region Gender

                var genders = new List<Gender>();

                var gender = new Gender()
                {
                    GenderUid = GalaxySMS.Common.Constants.GenderIds.Male,
                    Display = SharedResources.Resources.GenderMale_Display,
                    Description = SharedResources.Resources.GenderMale_Description,
                    GenderCode = "M",
                    EntityId = GalaxySMS.Common.Constants.EntityIds.GalaxySMS_SystemEntity_Id,
                    UniqueResourceName = GalaxySMS.Common.Enums.GenderCodes.Male.ToString()
                };
                genders.Add(gender);

                gender = new Gender()
                {
                    GenderUid = GalaxySMS.Common.Constants.GenderIds.Female,
                    Display = SharedResources.Resources.GenderFemale_Display,
                    Description = SharedResources.Resources.GenderFemale_Description,
                    GenderCode = "F",
                    EntityId = GalaxySMS.Common.Constants.EntityIds.GalaxySMS_SystemEntity_Id,
                    UniqueResourceName = GalaxySMS.Common.Enums.GenderCodes.Female.ToString()
                };
                genders.Add(gender);

                #endregion

                #region Person Active Status Type

                var personActiveStatusTypes = new List<PersonActiveStatusType>();

                var statusType = new PersonActiveStatusType()
                {
                    PersonActiveStatusTypeUid = GalaxySMS.Common.Constants.PersonActiveStatusTypeIds.Active,
                    Display = SharedResources.Resources.PersonActiveStatusType_Active_Display,
                    Description = SharedResources.Resources.PersonActiveStatusType_Active_Description,
                    PersonInactiveState = false,
                    EntityId = GalaxySMS.Common.Constants.EntityIds.GalaxySMS_SystemEntity_Id,
                    UniqueResourceName = GalaxySMS.Common.Enums.PersonActiveStatusTypes.Active.ToString()
                };
                personActiveStatusTypes.Add(statusType);

                statusType = new PersonActiveStatusType()
                {
                    PersonActiveStatusTypeUid = GalaxySMS.Common.Constants.PersonActiveStatusTypeIds.Inactive,
                    Display = SharedResources.Resources.PersonActiveStatusType_Inactive_Display,
                    Description = SharedResources.Resources.PersonActiveStatusType_Inactive_Description,
                    PersonInactiveState = true,
                    EntityId = GalaxySMS.Common.Constants.EntityIds.GalaxySMS_SystemEntity_Id,
                    UniqueResourceName = GalaxySMS.Common.Enums.PersonActiveStatusTypes.Inactive.ToString()
                };
                personActiveStatusTypes.Add(statusType);


                #endregion

                #region Cell Carriers
                var cellCarriers = new List<CellCarrier>();
                // MMS = > 160 characters
                // SSM = <= 160 characters
                var carrier = new CellCarrier()
                {
                    CarrierName = SharedResources.Resources.CellCarrier_ATT,
                    SMSSuffix = "txt.att.net",
                    MMSSuffix = "mms.att.net",
                };
                cellCarriers.Add(carrier);

                carrier = new CellCarrier()
                {
                    CarrierName = SharedResources.Resources.CellCarrier_Alltel,
                    SMSSuffix = "message.alltel.com",
                    MMSSuffix = "mms.alltelwireless.com",
                };
                cellCarriers.Add(carrier);

                carrier = new CellCarrier()
                {
                    CarrierName = SharedResources.Resources.CellCarrier_Boost_Mobile,
                    SMSSuffix = "myboostmobile.com",
                    MMSSuffix = "myboostmobile.com",
                };
                cellCarriers.Add(carrier);

                carrier = new CellCarrier()
                {
                    CarrierName = SharedResources.Resources.CellCarrier_Cricket_Wireless,
                    SMSSuffix = "",
                    MMSSuffix = "mms.cricketwireless.net",
                };
                cellCarriers.Add(carrier);

                carrier = new CellCarrier()
                {
                    CarrierName = SharedResources.Resources.CellCarrier_Project_Fi,
                    SMSSuffix = "",
                    MMSSuffix = "msg.fi.google.com",
                };
                cellCarriers.Add(carrier);

                carrier = new CellCarrier()
                {
                    CarrierName = SharedResources.Resources.CellCarrier_Sprint,
                    SMSSuffix = "messaging.sprintpcs.com",
                    MMSSuffix = "pm.sprint.com",
                };
                cellCarriers.Add(carrier);

                carrier = new CellCarrier()
                {
                    CarrierName = SharedResources.Resources.CellCarrier_T_Mobile,
                    SMSSuffix = "tmomail.net",
                    MMSSuffix = "tmomail.net",
                };
                cellCarriers.Add(carrier);

                carrier = new CellCarrier()
                {
                    CarrierName = SharedResources.Resources.CellCarrier_U_S_Cellular,
                    SMSSuffix = "email.uscc.net",
                    MMSSuffix = "mms.uscc.net",
                };
                cellCarriers.Add(carrier);

                carrier = new CellCarrier()
                {
                    CarrierName = SharedResources.Resources.CellCarrier_Verizon,
                    SMSSuffix = "vtext.com",
                    MMSSuffix = "vzwpix.com",
                };
                cellCarriers.Add(carrier);

                carrier = new CellCarrier()
                {
                    CarrierName = SharedResources.Resources.CellCarrier_Virgin_Mobile,
                    SMSSuffix = "vmobl.com",
                    MMSSuffix = "vmpix.com",
                };
                cellCarriers.Add(carrier);

                carrier = new CellCarrier()
                {
                    CarrierName = SharedResources.Resources.CellCarrier_Republic_Wireless,
                    SMSSuffix = "text.republicwireless.com",
                    MMSSuffix = "",
                };
                cellCarriers.Add(carrier);

                carrier = new CellCarrier()
                {
                    CarrierName = SharedResources.Resources.CellCarrier_Tracfone,
                    SMSSuffix = "mmst5.tracfone.com",
                    MMSSuffix = "",
                };
                cellCarriers.Add(carrier);

                carrier = new CellCarrier()
                {
                    CarrierName = SharedResources.Resources.CellCarrier_Metro_PCS,
                    SMSSuffix = "mymetropcs.com",
                    MMSSuffix = "",
                };
                cellCarriers.Add(carrier);

                carrier = new CellCarrier()
                {
                    CarrierName = SharedResources.Resources.CellCarrier_Ptel,
                    SMSSuffix = "ptel.com",
                    MMSSuffix = "",
                };
                cellCarriers.Add(carrier);

                carrier = new CellCarrier()
                {
                    CarrierName = SharedResources.Resources.CellCarrier_Suncom,
                    SMSSuffix = "tms.suncom.com",
                    MMSSuffix = "",
                };
                cellCarriers.Add(carrier);

                carrier = new CellCarrier()
                {
                    CarrierName = SharedResources.Resources.CellCarrier_Ting,
                    SMSSuffix = "message.ting.com",
                    MMSSuffix = "",
                };
                cellCarriers.Add(carrier);

                carrier = new CellCarrier()
                {
                    CarrierName = SharedResources.Resources.CellCarrier_Consumer_Cellular,
                    SMSSuffix = "cingularme.com",
                    MMSSuffix = "",
                };
                cellCarriers.Add(carrier);

                carrier = new CellCarrier()
                {
                    CarrierName = SharedResources.Resources.CellCarrier_C_Spire,
                    SMSSuffix = "cspire1.com",
                    MMSSuffix = "",
                };
                cellCarriers.Add(carrier);

                carrier = new CellCarrier()
                {
                    CarrierName = SharedResources.Resources.CellCarrier_Page_Plus,
                    SMSSuffix = "vtext.com",
                    MMSSuffix = "",
                };
                cellCarriers.Add(carrier);

                //carrier = new CellCarrier()
                //{
                //    CarrierName = SharedResources.Resources.,
                //    SMSSuffix = "",
                //    MMSSuffix = "",
                //};
                //cellCarriers.Add(carrier);

                //carrier = new CellCarrier()
                //{
                //    CarrierName = SharedResources.Resources.,
                //    SMSSuffix = "",
                //    MMSSuffix = "",
                //};
                //cellCarriers.Add(carrier);
                #endregion

                #region Credential Formats
                var credentialFormats = new List<GalaxySMSBusinessEntities.CredentialFormat>();

                #region HID 26 Bit
                var credentialFormat = new GalaxySMSBusinessEntities.CredentialFormat()
                {
                    CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.Standard26Bit,
                    Display = SharedResources.Resources.GalaxyCredentialFormat_26_Bit_Standard_Wiegand_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_26_Bit_Standard_Wiegand_Description,
                    CredentialFormatCode = GalaxySMS.Common.Enums.CredentialFormatCodes.Standard26Bit,
                    BitLength = Credential26BitWiegandFormat.TotalBitLength,// 26,
                    IsEnabled = true,
                    BatchLoadIncrementField = 2,
                    BatchLoadSupported = true,
                    BiometricEnrollmentSupported = true,
                    BiometricIdField = 2,
                    UseCardNumber = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.Standard26Bit.ToString(),
                    IsDirty = true
                };
                credentialFormat.EntityIds.AddRange(entityIds);

                credentialFormat.CredentialFormatDataFields.Add(new GalaxySMSBusinessEntities.CredentialFormatDataField()
                {
                    FieldName = "FacilityCode",
                    Display = SharedResources.Resources.GalaxyCredentialFormat_HID_26Bit_Standard_FacilityCode_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_HID_26Bit_Standard_FacilityCode_Description,
                    StartsAt = Credential26BitWiegandFormat.FacilityCodeStartBitPosition,//2,
                    BitLength = Credential26BitWiegandFormat.FacilityCodeBitLength,//8,
                    MinimumValue = Credential26BitWiegandFormat.FacilityCodeMinimumValue,//0,
                    MaximumValue = Credential26BitWiegandFormat.FacilityCodeMaximumValue,//255,
                    FieldNumber = 1,
                    IsReadOnly = false,
                    IsVisible = true,
                    DefaultValue = 0,
                    IsDirty = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.Standard26Bit.ToString() + "FacilityCode",
                });
                credentialFormat.CredentialFormatDataFields.Add(new GalaxySMSBusinessEntities.CredentialFormatDataField()
                {
                    FieldName = "IdCode",
                    Display = SharedResources.Resources.GalaxyCredentialFormat_HID_26Bit_Standard_IdCode_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_HID_26Bit_Standard_IdCode_Description,
                    StartsAt = Credential26BitWiegandFormat.IdCodeStartBitPosition,//9,
                    BitLength = Credential26BitWiegandFormat.IdCodeBitLength,//16,
                    MinimumValue = Credential26BitWiegandFormat.IdCodeMinimumValue,//0,
                    MaximumValue = Credential26BitWiegandFormat.IdCodeMaximumValue,//65535,
                    FieldNumber = 2,
                    IsReadOnly = false,
                    IsVisible = true,
                    DefaultValue = 0,
                    IsDirty = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.Standard26Bit.ToString() + "IdCode",
                });
                credentialFormat.CredentialFormatParities.Add(new GalaxySMSBusinessEntities.CredentialFormatParity()
                {
                    ParityType = CredentialParityTypes.Even,
                    HexMaskUlong = Credential26BitWiegandFormat.EvenParityMask,
                    HexMask = BitConverter.GetBytes(Credential26BitWiegandFormat.EvenParityMask),
                    BitPosition = Credential26BitWiegandFormat.EvenParityBitPosition,//1,
                    ComputeSequence = Credential26BitWiegandFormat.EvenParityComputeSequence,//1,
                    IsDirty = true
                });
                credentialFormat.CredentialFormatParities.Add(new GalaxySMSBusinessEntities.CredentialFormatParity()
                {
                    ParityType = CredentialParityTypes.Odd,
                    HexMaskUlong = Credential26BitWiegandFormat.OddParityMask,
                    HexMask = BitConverter.GetBytes(Credential26BitWiegandFormat.OddParityMask),
                    BitPosition = Credential26BitWiegandFormat.OddParityBitPosition,//26,
                    ComputeSequence = Credential26BitWiegandFormat.OddParityComputeSequence,//2,
                    IsDirty = true
                });
                credentialFormats.Add(credentialFormat);
                #endregion

                #region BQT 36 Bit
                credentialFormat = new GalaxySMSBusinessEntities.CredentialFormat()
                {
                    CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.Bqt36Bit,
                    Display = SharedResources.Resources.GalaxyCredentialFormat_BQT_36Bit_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_BQT_36Bit_Description,
                    CredentialFormatCode = GalaxySMS.Common.Enums.CredentialFormatCodes.Bqt36Bit,
                    BitLength = CredentialBQT36BitFormat.TotalBitLength,//36,
                    IsEnabled = true,
                    BatchLoadIncrementField = 2,
                    BatchLoadSupported = true,
                    BiometricEnrollmentSupported = false,
                    BiometricIdField = 2,
                    UseCardNumber = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.Bqt36Bit.ToString(),
                    IsDirty = true
                };
                credentialFormat.EntityIds.AddRange(entityIds);

                credentialFormat.CredentialFormatDataFields.Add(new GalaxySMSBusinessEntities.CredentialFormatDataField()
                {
                    FieldName = "FacilityCode",
                    Display = SharedResources.Resources.GalaxyCredentialFormat_BQT_36Bit_FacilityCode_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_BQT_36Bit_FacilityCode_Description,
                    StartsAt = CredentialBQT36BitFormat.FacilityCodeStartBitPosition,//5,
                    BitLength = CredentialBQT36BitFormat.FacilityCodeBitLength,//10,
                    MinimumValue = CredentialBQT36BitFormat.FacilityCodeMinimumValue,//0,
                    MaximumValue = CredentialBQT36BitFormat.FacilityCodeMaximumValue,//1023,
                    FieldNumber = 1,
                    IsReadOnly = false,
                    IsVisible = true,
                    DefaultValue = 0,
                    IsDirty = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.Bqt36Bit.ToString() + "FacilityCode",
                });
                credentialFormat.CredentialFormatDataFields.Add(new GalaxySMSBusinessEntities.CredentialFormatDataField()
                {
                    FieldName = "IdCode",
                    Display = SharedResources.Resources.GalaxyCredentialFormat_BQT_36Bit_IdCode_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_BQT_36Bit_IdCode_Description,
                    StartsAt = CredentialBQT36BitFormat.IdCodeStartBitPosition,//
                    BitLength = CredentialBQT36BitFormat.IdCodeBitLength,
                    MinimumValue = CredentialBQT36BitFormat.IdCodeMinimumValue,//0,
                    MaximumValue = CredentialBQT36BitFormat.IdCodeMaximumValue,// 1048575,
                    FieldNumber = 2,
                    IsReadOnly = false,
                    IsVisible = true,
                    DefaultValue = 0,
                    IsDirty = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.Bqt36Bit.ToString() + "IdCode",
                });
                credentialFormat.CredentialFormatDataFields.Add(new GalaxySMSBusinessEntities.CredentialFormatDataField()
                {
                    FieldName = "IssueCode",
                    Display = SharedResources.Resources.GalaxyCredentialFormat_BQT_36Bit_IssueCode_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_BQT_36Bit_IssueCode_Description,
                    StartsAt = CredentialBQT36BitFormat.IssueCodeStartBitPosition,//2,
                    BitLength = CredentialBQT36BitFormat.IssueCodeBitLength,// 4,
                    MinimumValue = CredentialBQT36BitFormat.IssueCodeMinimumValue,//0,
                    MaximumValue = CredentialBQT36BitFormat.IssueCodeMaximumValue,//15,
                    FieldNumber = 3,
                    IsReadOnly = false,
                    IsVisible = true,
                    DefaultValue = 0,
                    IsDirty = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.Bqt36Bit.ToString() + "IssueCode",
                });
                credentialFormat.CredentialFormatParities.Add(new GalaxySMSBusinessEntities.CredentialFormatParity()
                {
                    ParityType = CredentialParityTypes.Even,
                    HexMaskUlong = CredentialBQT36BitFormat.EvenParityMask,
                    HexMask = BitConverter.GetBytes(CredentialBQT36BitFormat.EvenParityMask),
                    BitPosition = CredentialBQT36BitFormat.EvenParityBitPosition,//1,
                    ComputeSequence = CredentialBQT36BitFormat.EvenParityComputeSequence,
                    IsDirty = true
                });
                credentialFormat.CredentialFormatParities.Add(new GalaxySMSBusinessEntities.CredentialFormatParity()
                {
                    ParityType = CredentialParityTypes.Odd,
                    HexMaskUlong = CredentialBQT36BitFormat.OddParityMask,
                    HexMask = BitConverter.GetBytes(CredentialBQT36BitFormat.OddParityMask),
                    BitPosition = CredentialBQT36BitFormat.OddParityBitPosition,//36,
                    ComputeSequence = CredentialBQT36BitFormat.OddParityComputeSequence,
                    IsDirty = true
                });

                credentialFormats.Add(credentialFormat);
                #endregion

                #region Cypress 37 Bit
                credentialFormat = new GalaxySMSBusinessEntities.CredentialFormat()
                {
                    CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.Cypress37Bit,
                    Display = SharedResources.Resources.GalaxyCredentialFormat_Cypress_37Bit_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_Cypress_37Bit_Description,
                    CredentialFormatCode = GalaxySMS.Common.Enums.CredentialFormatCodes.Cypress37Bit,
                    BitLength = CredentialCypress37BitFormat.TotalBitLength,
                    IsEnabled = true,
                    BatchLoadIncrementField = 2,
                    BatchLoadSupported = true,
                    BiometricEnrollmentSupported = false,
                    BiometricIdField = 2,
                    UseCardNumber = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.Cypress37Bit.ToString(),
                    IsDirty = true
                };
                credentialFormat.EntityIds.AddRange(entityIds);

                credentialFormat.CredentialFormatDataFields.Add(new GalaxySMSBusinessEntities.CredentialFormatDataField()
                {
                    FieldName = "FacilityCode",
                    Display = SharedResources.Resources.GalaxyCredentialFormat_Cypress_37Bit_FacilityCode_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_Cypress_37Bit_FacilityCode_Description,
                    StartsAt = CredentialCypress37BitFormat.FacilityCodeStartBitPosition, //2,
                    BitLength = CredentialCypress37BitFormat.FacilityCodeBitLength,// 8,
                    MinimumValue = CredentialCypress37BitFormat.FacilityCodeMinimumValue,// 0,
                    MaximumValue = CredentialCypress37BitFormat.FacilityCodeMaximumValue,// 255,
                    FieldNumber = 1,
                    IsReadOnly = false,
                    IsVisible = true,
                    DefaultValue = 0,
                    IsDirty = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.Cypress37Bit.ToString() + "FacilityCode",
                });
                credentialFormat.CredentialFormatDataFields.Add(new GalaxySMSBusinessEntities.CredentialFormatDataField()
                {
                    FieldName = "IdCode",
                    Display = SharedResources.Resources.GalaxyCredentialFormat_Cypress_37Bit_IdCode_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_Cypress_37Bit_IdCode_Description,
                    StartsAt = CredentialCypress37BitFormat.IdCodeStartBitPosition, //2,
                    BitLength = CredentialCypress37BitFormat.IdCodeBitLength,// 8,
                    MinimumValue = CredentialCypress37BitFormat.IdCodeMinimumValue,// 0,
                    MaximumValue = CredentialCypress37BitFormat.IdCodeMaximumValue,// 255,
                    FieldNumber = 2,
                    IsReadOnly = false,
                    IsVisible = true,
                    DefaultValue = 0,
                    IsDirty = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.Cypress37Bit.ToString() + "IdCode",
                });
                credentialFormat.CredentialFormatParities.Add(new GalaxySMSBusinessEntities.CredentialFormatParity()
                {
                    ParityType = CredentialParityTypes.Even,
                    HexMaskUlong = CredentialCypress37BitFormat.EvenParityMask,
                    HexMask = BitConverter.GetBytes(CredentialCypress37BitFormat.EvenParityMask),
                    BitPosition = CredentialCypress37BitFormat.EvenParityBitPosition,
                    ComputeSequence = CredentialCypress37BitFormat.EvenParityComputeSequence,
                    IsDirty = true
                });
                credentialFormat.CredentialFormatParities.Add(new GalaxySMSBusinessEntities.CredentialFormatParity()
                {
                    ParityType = CredentialParityTypes.Odd,
                    HexMaskUlong = CredentialCypress37BitFormat.OddParityMask,
                    HexMask = BitConverter.GetBytes(CredentialCypress37BitFormat.OddParityMask),
                    BitPosition = CredentialCypress37BitFormat.OddParityBitPosition,// 37,
                    ComputeSequence = CredentialCypress37BitFormat.OddParityComputeSequence,
                    IsDirty = true
                });
                credentialFormats.Add(credentialFormat);
                #endregion

                #region Galaxy Keypad
                credentialFormat = new GalaxySMSBusinessEntities.CredentialFormat()
                {
                    CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.GalaxyKeypad,
                    Display = SharedResources.Resources.GalaxyCredentialFormat_Galaxy_Keypad_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_Galaxy_Keypad_Description,
                    CredentialFormatCode = GalaxySMS.Common.Enums.CredentialFormatCodes.GalaxyKeypad,
                    BitLength = 32,
                    IsEnabled = false,
                    BatchLoadIncrementField = 1,
                    BatchLoadSupported = false,
                    BiometricEnrollmentSupported = false,
                    BiometricIdField = 21,
                    UseCardNumber = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.GalaxyKeypad.ToString(),
                    IsDirty = true
                };
                credentialFormat.EntityIds.AddRange(entityIds);

                credentialFormats.Add(credentialFormat);
                #endregion

                #region HID 37 Bit H10304
                credentialFormat = new GalaxySMSBusinessEntities.CredentialFormat()
                {
                    CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.H1030437Bit,
                    Display = SharedResources.Resources.GalaxyCredentialFormat_HID_37Bit_H10304_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_HID_37Bit_H10304_Description,
                    CredentialFormatCode = GalaxySMS.Common.Enums.CredentialFormatCodes.H1030437Bit,
                    BitLength = CredentialHIDH1030437BitFormat.TotalBitLength,
                    IsEnabled = true,
                    BatchLoadIncrementField = 2,
                    BatchLoadSupported = true,
                    BiometricEnrollmentSupported = false,
                    BiometricIdField = 2,
                    UseCardNumber = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.H1030437Bit.ToString(),
                    IsDirty = true
                };
                credentialFormat.EntityIds.AddRange(entityIds);

                credentialFormat.CredentialFormatDataFields.Add(new GalaxySMSBusinessEntities.CredentialFormatDataField()
                {
                    FieldName = "FacilityCode",
                    Display = SharedResources.Resources.GalaxyCredentialFormat_HID_37Bit_H10304_FacilityCode_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_HID_37Bit_H10304_FacilityCode_Description,
                    StartsAt = CredentialHIDH1030437BitFormat.FacilityCodeStartBitPosition,
                    BitLength = CredentialHIDH1030437BitFormat.FacilityCodeBitLength,
                    MinimumValue = CredentialHIDH1030437BitFormat.FacilityCodeMinimumValue,
                    MaximumValue = CredentialHIDH1030437BitFormat.FacilityCodeMaximumValue,
                    FieldNumber = 1,
                    IsReadOnly = false,
                    IsVisible = true,
                    DefaultValue = 0,
                    IsDirty = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.H1030437Bit.ToString() + "FacilityCode",
                });
                credentialFormat.CredentialFormatDataFields.Add(new GalaxySMSBusinessEntities.CredentialFormatDataField()
                {
                    FieldName = "IdCode",
                    Display = SharedResources.Resources.GalaxyCredentialFormat_HID_37Bit_H10304_IdCode_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_HID_37Bit_H10304_IdCode_Description,
                    StartsAt = CredentialHIDH1030437BitFormat.IdCodeStartBitPosition,
                    BitLength = CredentialHIDH1030437BitFormat.IdCodeBitLength,
                    MinimumValue = CredentialHIDH1030437BitFormat.IdCodeMinimumValue,
                    MaximumValue = CredentialHIDH1030437BitFormat.IdCodeMaximumValue,
                    FieldNumber = 2,
                    IsReadOnly = false,
                    IsVisible = true,
                    DefaultValue = 0,
                    IsDirty = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.H1030437Bit.ToString() + "IdCode",
                });
                credentialFormat.CredentialFormatParities.Add(new GalaxySMSBusinessEntities.CredentialFormatParity()
                {
                    ParityType = CredentialParityTypes.Even,
                    HexMaskUlong = CredentialHIDH1030437BitFormat.EvenParityMask,
                    HexMask = BitConverter.GetBytes(CredentialHIDH1030437BitFormat.EvenParityMask),
                    BitPosition = CredentialHIDH1030437BitFormat.EvenParityBitPosition,// 37,
                    ComputeSequence = CredentialHIDH1030437BitFormat.EvenParityComputeSequence,
                    IsDirty = true
                });
                credentialFormat.CredentialFormatParities.Add(new GalaxySMSBusinessEntities.CredentialFormatParity()
                {
                    ParityType = CredentialParityTypes.Odd,
                    HexMaskUlong = CredentialHIDH1030437BitFormat.OddParityMask,
                    HexMask = BitConverter.GetBytes(CredentialHIDH1030437BitFormat.OddParityMask),
                    BitPosition = CredentialHIDH1030437BitFormat.OddParityBitPosition,// 37,
                    ComputeSequence = CredentialHIDH1030437BitFormat.OddParityComputeSequence,
                    IsDirty = true
                });
                credentialFormats.Add(credentialFormat);
                #endregion

                #region HID 37 Bit H10302
                credentialFormat = new GalaxySMSBusinessEntities.CredentialFormat()
                {
                    CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.H1030237Bit,
                    Display = SharedResources.Resources.GalaxyCredentialFormat_HID_37Bit_H10302_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_HID_37Bit_H10302_Description,
                    CredentialFormatCode = GalaxySMS.Common.Enums.CredentialFormatCodes.H1030237Bit,
                    BitLength = CredentialHIDH1030237BitFormat.TotalBitLength,
                    IsEnabled = true,
                    BatchLoadIncrementField = 1,
                    BatchLoadSupported = true,
                    BiometricEnrollmentSupported = false,
                    BiometricIdField = 1,
                    UseCardNumber = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.H1030237Bit.ToString(),
                    IsDirty = true
                };
                credentialFormat.EntityIds.AddRange(entityIds);

                credentialFormat.CredentialFormatDataFields.Add(new GalaxySMSBusinessEntities.CredentialFormatDataField()
                {
                    FieldName = "IdCode",
                    Display = SharedResources.Resources.GalaxyCredentialFormat_HID_37Bit_H10302_IdCode_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_HID_37Bit_H10302_IdCode_Description,
                    StartsAt = CredentialHIDH1030237BitFormat.IdCodeStartBitPosition,
                    BitLength = CredentialHIDH1030237BitFormat.IdCodeBitLength,
                    MinimumValue = CredentialHIDH1030237BitFormat.IdCodeMinimumValue,
                    MaximumValue = CredentialHIDH1030237BitFormat.IdCodeMaximumValue,
                    FieldNumber = 1,
                    IsReadOnly = false,
                    IsVisible = true,
                    DefaultValue = 0,
                    IsDirty = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.H1030237Bit.ToString() + "IdCode",
                });
                credentialFormat.CredentialFormatParities.Add(new GalaxySMSBusinessEntities.CredentialFormatParity()
                {
                    ParityType = CredentialParityTypes.Even,
                    HexMaskUlong = CredentialHIDH1030237BitFormat.EvenParityMask,
                    HexMask = BitConverter.GetBytes(CredentialHIDH1030237BitFormat.EvenParityMask),
                    BitPosition = CredentialHIDH1030237BitFormat.EvenParityBitPosition,// 37,
                    ComputeSequence = CredentialHIDH1030237BitFormat.EvenParityComputeSequence,
                    IsDirty = true
                });
                credentialFormat.CredentialFormatParities.Add(new GalaxySMSBusinessEntities.CredentialFormatParity()
                {
                    ParityType = CredentialParityTypes.Odd,
                    HexMaskUlong = CredentialHIDH1030237BitFormat.OddParityMask,
                    HexMask = BitConverter.GetBytes(CredentialHIDH1030237BitFormat.OddParityMask),
                    BitPosition = CredentialHIDH1030237BitFormat.OddParityBitPosition,// 37,
                    ComputeSequence = CredentialHIDH1030237BitFormat.OddParityComputeSequence,
                    IsDirty = true
                });
                credentialFormats.Add(credentialFormat);
                #endregion

                #region HID Corporate 1000 35 Bit
                credentialFormat = new GalaxySMSBusinessEntities.CredentialFormat()
                {
                    CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.Corporate1K35Bit,
                    Display = SharedResources.Resources.GalaxyCredentialFormat_HID_Corporate1000_35Bit_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_HID_Corporate1000_35Bit_Description,
                    CredentialFormatCode = GalaxySMS.Common.Enums.CredentialFormatCodes.Corporate1K35Bit,
                    BitLength = CredentialHIDCorporate1K35BitFormat.TotalBitLength, //35,
                    IsEnabled = true,
                    BatchLoadIncrementField = 2,
                    BatchLoadSupported = true,
                    BiometricEnrollmentSupported = true,
                    BiometricIdField = 2,
                    UseCardNumber = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.Corporate1K35Bit.ToString(),
                    IsDirty = true
                };
                credentialFormat.EntityIds.AddRange(entityIds);

                credentialFormat.CredentialFormatDataFields.Add(new GalaxySMSBusinessEntities.CredentialFormatDataField()
                {
                    FieldName = "CompanyCode",
                    Display = SharedResources.Resources.GalaxyCredentialFormat_HID_Corporate1000_35Bit_CompanyCode_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_HID_Corporate1000_35Bit_CompanyCode_Description,
                    StartsAt = CredentialHIDCorporate1K35BitFormat.CompanyCodeStartBitPosition,//3,
                    BitLength = CredentialHIDCorporate1K35BitFormat.CompanyCodeBitLength,//12,
                    MinimumValue = CredentialHIDCorporate1K35BitFormat.CompanyCodeMinimumValue,
                    MaximumValue = CredentialHIDCorporate1K35BitFormat.CompanyCodeMaximumValue,
                    FieldNumber = 1,
                    IsReadOnly = false,
                    IsVisible = true,
                    DefaultValue = 0,
                    IsDirty = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.Corporate1K35Bit.ToString() + "CompanyCode",
                });
                credentialFormat.CredentialFormatDataFields.Add(new GalaxySMSBusinessEntities.CredentialFormatDataField()
                {
                    FieldName = "IdCode",
                    Display = SharedResources.Resources.GalaxyCredentialFormat_HID_Corporate1000_35Bit_IdCode_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_HID_Corporate1000_35Bit_IdCode_Description,
                    StartsAt = CredentialHIDCorporate1K35BitFormat.IdCodeStartBitPosition,//25,
                    BitLength = CredentialHIDCorporate1K35BitFormat.IdCodeBitLength,//20,
                    MinimumValue = CredentialHIDCorporate1K35BitFormat.IdCodeMinimumValue,//0,
                    MaximumValue = CredentialHIDCorporate1K35BitFormat.IdCodeMaximumValue,//1048575,
                    FieldNumber = 2,
                    IsReadOnly = false,
                    IsVisible = true,
                    DefaultValue = 0,
                    IsDirty = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.Corporate1K35Bit.ToString() + "IdCode",
                });
                credentialFormat.CredentialFormatParities.Add(new GalaxySMSBusinessEntities.CredentialFormatParity()
                {
                    ParityType = CredentialParityTypes.Even,
                    HexMaskUlong = CredentialHIDCorporate1K35BitFormat.EvenParityMask,
                    HexMask = BitConverter.GetBytes(CredentialHIDCorporate1K35BitFormat.EvenParityMask),
                    BitPosition = CredentialHIDCorporate1K35BitFormat.EvenParityBitPosition,//34
                    ComputeSequence = CredentialHIDCorporate1K35BitFormat.EvenParityComputeSequence, //1,
                    IsDirty = true
                });
                credentialFormat.CredentialFormatParities.Add(new GalaxySMSBusinessEntities.CredentialFormatParity()
                {
                    ParityType = CredentialParityTypes.Odd,
                    HexMaskUlong = CredentialHIDCorporate1K35BitFormat.OddParityLSBMask,
                    HexMask = BitConverter.GetBytes(CredentialHIDCorporate1K35BitFormat.OddParityLSBMask),
                    BitPosition = CredentialHIDCorporate1K35BitFormat.OddParityLSBBitPosition,//1,
                    ComputeSequence = CredentialHIDCorporate1K35BitFormat.OddParityLSBComputeSequence, //2,
                    IsDirty = true
                });
                credentialFormat.CredentialFormatParities.Add(new GalaxySMSBusinessEntities.CredentialFormatParity()
                {
                    ParityType = CredentialParityTypes.Odd,
                    HexMaskUlong = CredentialHIDCorporate1K35BitFormat.OddParityMSBMask,
                    HexMask = BitConverter.GetBytes(CredentialHIDCorporate1K35BitFormat.OddParityMSBMask),
                    BitPosition = CredentialHIDCorporate1K35BitFormat.OddParityMSBBitPosition,//35,
                    ComputeSequence = CredentialHIDCorporate1K35BitFormat.OddParityMSBComputeSequence, //3,
                    IsDirty = true
                });
                credentialFormats.Add(credentialFormat);
                #endregion

                #region HID Corporate 1000 48 Bit
                credentialFormat = new GalaxySMSBusinessEntities.CredentialFormat()
                {
                    CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.Corporate1K48Bit,
                    Display = SharedResources.Resources.GalaxyCredentialFormat_HID_Corporate1000_48Bit_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_HID_Corporate1000_48Bit_Description,
                    CredentialFormatCode = GalaxySMS.Common.Enums.CredentialFormatCodes.Corporate1K48Bit,
                    BitLength = CredentialHIDCorporate1K48BitFormat.TotalBitLength, // 48
                    IsEnabled = true,
                    BatchLoadIncrementField = 2,
                    BatchLoadSupported = true,
                    BiometricEnrollmentSupported = true,
                    BiometricIdField = 2,
                    UseCardNumber = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.Corporate1K48Bit.ToString()
                };
                credentialFormat.CredentialFormatDataFields.Add(new GalaxySMSBusinessEntities.CredentialFormatDataField()
                {
                    FieldName = "CompanyCode",
                    Display = SharedResources.Resources.GalaxyCredentialFormat_HID_Corporate1000_48Bit_CompanyCode_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_HID_Corporate1000_48Bit_CompanyCode_Description,
                    StartsAt = CredentialHIDCorporate1K48BitFormat.CompanyCodeStartBitPosition,//3,
                    BitLength = CredentialHIDCorporate1K48BitFormat.CompanyCodeBitLength,//22,
                    MinimumValue = CredentialHIDCorporate1K48BitFormat.CompanyCodeMinimumValue, //0,
                    MaximumValue = CredentialHIDCorporate1K48BitFormat.CompanyCodeMaximumValue, // 4194303
                    FieldNumber = 1,
                    IsReadOnly = false,
                    IsVisible = true,
                    DefaultValue = 0,
                    IsDirty = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.Corporate1K48Bit.ToString() + "CompanyCode",
                });
                credentialFormat.EntityIds.AddRange(entityIds);

                credentialFormat.CredentialFormatDataFields.Add(new GalaxySMSBusinessEntities.CredentialFormatDataField()
                {
                    FieldName = "IdCode",
                    Display = SharedResources.Resources.GalaxyCredentialFormat_HID_Corporate1000_48Bit_IdCode_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_HID_Corporate1000_48Bit_IdCode_Description,
                    StartsAt = CredentialHIDCorporate1K48BitFormat.IdCodeStartBitPosition,//25,
                    BitLength = CredentialHIDCorporate1K48BitFormat.IdCodeBitLength,//23,
                    MinimumValue = CredentialHIDCorporate1K48BitFormat.IdCodeMinimumValue,//0,
                    MaximumValue = CredentialHIDCorporate1K48BitFormat.IdCodeMaximumValue,//8388607,
                    FieldNumber = 2,
                    IsReadOnly = false,
                    IsVisible = true,
                    DefaultValue = 0,
                    IsDirty = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.Corporate1K48Bit.ToString() + "IdCode",
                });
                credentialFormat.CredentialFormatParities.Add(new GalaxySMSBusinessEntities.CredentialFormatParity()
                {
                    ParityType = CredentialParityTypes.Even,
                    HexMaskUlong = CredentialHIDCorporate1K48BitFormat.EvenParityMask,
                    HexMask = BitConverter.GetBytes(CredentialHIDCorporate1K48BitFormat.EvenParityMask),
                    BitPosition = CredentialHIDCorporate1K48BitFormat.EvenParityBitPosition,//2,
                    ComputeSequence = CredentialHIDCorporate1K48BitFormat.EvenParityComputeSequence,//1,
                    IsDirty = true
                });
                credentialFormat.CredentialFormatParities.Add(new GalaxySMSBusinessEntities.CredentialFormatParity()
                {
                    ParityType = CredentialParityTypes.Odd,
                    HexMaskUlong = CredentialHIDCorporate1K48BitFormat.OddParityLSBMask,
                    HexMask = BitConverter.GetBytes(CredentialHIDCorporate1K48BitFormat.OddParityLSBMask),
                    BitPosition = CredentialHIDCorporate1K48BitFormat.OddParityLSBBitPosition,//48,
                    ComputeSequence = CredentialHIDCorporate1K48BitFormat.OddParityLSBComputeSequence,//2,
                    IsDirty = true
                });
                credentialFormat.CredentialFormatParities.Add(new GalaxySMSBusinessEntities.CredentialFormatParity()
                {
                    ParityType = CredentialParityTypes.Odd,
                    HexMaskUlong = CredentialHIDCorporate1K48BitFormat.OddParityMSBMask,
                    HexMask = BitConverter.GetBytes(CredentialHIDCorporate1K48BitFormat.OddParityMSBMask),
                    BitPosition = CredentialHIDCorporate1K48BitFormat.OddParityMSBBitPosition,//1,
                    ComputeSequence = CredentialHIDCorporate1K48BitFormat.OddParityMSBComputeSequence,//3,
                    IsDirty = true
                });
                credentialFormats.Add(credentialFormat);
                #endregion

                #region MagStripe Bar-code ABA 
                credentialFormat = new GalaxySMSBusinessEntities.CredentialFormat()
                {
                    CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.MagneticStripeBarcodeAba,
                    Display = SharedResources.Resources.GalaxyCredentialFormat_Magstripe_Barcode_ABA_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_Magstripe_Barcode_ABA_Description,
                    CredentialFormatCode = GalaxySMS.Common.Enums.CredentialFormatCodes.MagneticStripeBarcodeAba,
                    BitLength = 256,
                    IsEnabled = true,
                    BatchLoadIncrementField = 1,
                    BatchLoadSupported = true,
                    BiometricEnrollmentSupported = true,
                    BiometricIdField = 1,
                    UseCardNumber = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.MagneticStripeBarcodeAba.ToString(),
                    IsDirty = true
                };
                credentialFormat.EntityIds.AddRange(entityIds);

                credentialFormats.Add(credentialFormat);
                #endregion

                #region Numeric Card Code
                credentialFormat = new GalaxySMSBusinessEntities.CredentialFormat()
                {
                    CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.NumericCardCode,
                    Display = SharedResources.Resources.GalaxyCredentialFormat_NumericCardCode_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_NumericCardCode_Description,
                    CredentialFormatCode = GalaxySMS.Common.Enums.CredentialFormatCodes.NumericCardCode,
                    BitLength = 256,
                    IsEnabled = true,
                    BatchLoadIncrementField = 1,
                    BatchLoadSupported = true,
                    BiometricEnrollmentSupported = true,
                    BiometricIdField = 1,
                    UseCardNumber = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.NumericCardCode.ToString(),
                    IsDirty = true
                };
                credentialFormat.EntityIds.AddRange(entityIds);

                credentialFormats.Add(credentialFormat);
                #endregion

                #region US Government ID
                credentialFormat = new GalaxySMSBusinessEntities.CredentialFormat()
                {
                    CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.USGovernmentID,
                    Display = SharedResources.Resources.GalaxyCredentialFormat_US_Government_FASCN_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_US_Government_FASCN_Description,
                    CredentialFormatCode = GalaxySMS.Common.Enums.CredentialFormatCodes.USGovernmentID,
                    BitLength = 256,
                    IsEnabled = true,
                    BatchLoadIncrementField = 1,
                    BatchLoadSupported = false,
                    BiometricEnrollmentSupported = false,
                    BiometricIdField = 1,
                    UseCardNumber = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.USGovernmentID.ToString(),
                    IsDirty = true
                };
                credentialFormat.EntityIds.AddRange(entityIds);

                credentialFormats.Add(credentialFormat);
                #endregion

                #region XceedId 40 Bit
                credentialFormat = new GalaxySMSBusinessEntities.CredentialFormat()
                {
                    CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.XceedId40Bit,
                    Display = SharedResources.Resources.GalaxyCredentialFormat_XceedId_40_Bit_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_XceedId_40_Bit_Description,
                    CredentialFormatCode = GalaxySMS.Common.Enums.CredentialFormatCodes.XceedId40Bit,
                    BitLength = CredentialXceedId40BitFormat.TotalBitLength,
                    IsEnabled = true,
                    BatchLoadIncrementField = 2,
                    BatchLoadSupported = true,
                    BiometricEnrollmentSupported = true,
                    BiometricIdField = 2,
                    UseCardNumber = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.XceedId40Bit.ToString(),
                    IsDirty = true
                };
                credentialFormat.EntityIds.AddRange(entityIds);

                credentialFormat.CredentialFormatDataFields.Add(new GalaxySMSBusinessEntities.CredentialFormatDataField()
                {
                    FieldName = "SiteCode",
                    Display = SharedResources.Resources.GalaxyCredentialFormat_XceedId_40_Bit_SiteCode_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_XceedId_40_Bit_SiteCode_Description,
                    StartsAt = CredentialXceedId40BitFormat.SiteCodeStartBitPosition,
                    BitLength = CredentialXceedId40BitFormat.SiteCodeBitLength,
                    MinimumValue = CredentialXceedId40BitFormat.SiteCodeMinimumValue,
                    MaximumValue = CredentialXceedId40BitFormat.SiteCodeMaximumValue,
                    FieldNumber = 1,
                    IsReadOnly = false,
                    IsVisible = true,
                    DefaultValue = 0,
                    IsDirty = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.XceedId40Bit.ToString() + "SiteCode",
                });
                credentialFormat.CredentialFormatDataFields.Add(new GalaxySMSBusinessEntities.CredentialFormatDataField()
                {
                    FieldName = "IdCode",
                    Display = SharedResources.Resources.GalaxyCredentialFormat_XceedId_40_Bit_IdCode_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_XceedId_40_Bit_IdCode_Description,
                    StartsAt = CredentialXceedId40BitFormat.IdCodeStartBitPosition,
                    BitLength = CredentialXceedId40BitFormat.IdCodeBitLength,
                    MinimumValue = CredentialXceedId40BitFormat.IdCodeMinimumValue,
                    MaximumValue = CredentialXceedId40BitFormat.IdCodeMaximumValue,
                    FieldNumber = 2,
                    IsReadOnly = false,
                    IsVisible = true,
                    DefaultValue = 0,
                    IsDirty = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.XceedId40Bit.ToString() + "IdCode",
                });
                credentialFormat.CredentialFormatParities.Add(new GalaxySMSBusinessEntities.CredentialFormatParity()
                {
                    ParityType = CredentialParityTypes.Even,
                    HexMaskUlong = CredentialXceedId40BitFormat.EvenParityMask,
                    HexMask = BitConverter.GetBytes(CredentialXceedId40BitFormat.EvenParityMask),
                    BitPosition = CredentialXceedId40BitFormat.EvenParityBitPosition,//1,
                    ComputeSequence = CredentialXceedId40BitFormat.EvenParityComputeSequence,//3,
                    IsDirty = true
                });
                credentialFormat.CredentialFormatParities.Add(new GalaxySMSBusinessEntities.CredentialFormatParity()
                {
                    ParityType = CredentialParityTypes.Odd,
                    HexMaskUlong = CredentialXceedId40BitFormat.OddParityMask,
                    HexMask = BitConverter.GetBytes(CredentialXceedId40BitFormat.OddParityMask),
                    BitPosition = CredentialXceedId40BitFormat.OddParityBitPosition,//1,
                    ComputeSequence = CredentialXceedId40BitFormat.OddParityComputeSequence,//3,
                    IsDirty = true
                });
                credentialFormats.Add(credentialFormat);


                #endregion

                #region Software House 37 Bit
                credentialFormat = new GalaxySMSBusinessEntities.CredentialFormat()
                {
                    CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.SoftwareHouse37Bit,
                    Display = SharedResources.Resources.GalaxyCredentialFormat_SoftwareHouse_37Bit_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_SoftwareHouse_37Bit_Description,
                    CredentialFormatCode = GalaxySMS.Common.Enums.CredentialFormatCodes.SoftwareHouse37Bit,
                    BitLength = CredentialSoftwareHouse37BitFormat.TotalBitLength,
                    IsEnabled = true,
                    BatchLoadIncrementField = 3,
                    BatchLoadSupported = true,
                    BiometricEnrollmentSupported = false,
                    BiometricIdField = 3,
                    UseCardNumber = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.SoftwareHouse37Bit.ToString(),
                    IsDirty = true
                };
                credentialFormat.EntityIds.AddRange(entityIds);

                credentialFormat.CredentialFormatDataFields.Add(new GalaxySMSBusinessEntities.CredentialFormatDataField()
                {
                    FieldName = "FacilityCode",
                    Display = SharedResources.Resources.GalaxyCredentialFormat_SoftwareHouse_37Bit_FacilityCode_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_SoftwareHouse_37Bit_FacilityCode_Description,
                    StartsAt = CredentialSoftwareHouse37BitFormat.FacilityCodeStartBitPosition, //2,
                    BitLength = CredentialSoftwareHouse37BitFormat.FacilityCodeBitLength,// 8,
                    MinimumValue = CredentialSoftwareHouse37BitFormat.FacilityCodeMinimumValue,// 0,
                    MaximumValue = CredentialSoftwareHouse37BitFormat.FacilityCodeMaximumValue,// 255,
                    FieldNumber = 1,
                    IsReadOnly = false,
                    IsVisible = true,
                    DefaultValue = 0,
                    IsDirty = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.SoftwareHouse37Bit.ToString() + "FacilityCode",
                });
                credentialFormat.CredentialFormatDataFields.Add(new GalaxySMSBusinessEntities.CredentialFormatDataField()
                {
                    FieldName = "SiteCode",
                    Display = SharedResources.Resources.GalaxyCredentialFormat_SoftwareHouse_37Bit_SiteCode_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_SoftwareHouse_37Bit_SiteCode_Description,
                    StartsAt = CredentialSoftwareHouse37BitFormat.SiteCodeStartBitPosition, //2,
                    BitLength = CredentialSoftwareHouse37BitFormat.SiteCodeBitLength,// 8,
                    MinimumValue = CredentialSoftwareHouse37BitFormat.SiteCodeMinimumValue,// 0,
                    MaximumValue = CredentialSoftwareHouse37BitFormat.SiteCodeMaximumValue,// 255,
                    FieldNumber = 2,
                    IsReadOnly = false,
                    IsVisible = true,
                    DefaultValue = 0,
                    IsDirty = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.SoftwareHouse37Bit.ToString() + "SiteCode",
                });
                credentialFormat.CredentialFormatDataFields.Add(new GalaxySMSBusinessEntities.CredentialFormatDataField()
                {
                    FieldName = "IdCode",
                    Display = SharedResources.Resources.GalaxyCredentialFormat_SoftwareHouse_37Bit_IdCode_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_SoftwareHouse_37Bit_IdCode_Description,
                    StartsAt = CredentialSoftwareHouse37BitFormat.IdCodeStartBitPosition, //2,
                    BitLength = CredentialSoftwareHouse37BitFormat.IdCodeBitLength,// 8,
                    MinimumValue = CredentialSoftwareHouse37BitFormat.IdCodeMinimumValue,// 0,
                    MaximumValue = CredentialSoftwareHouse37BitFormat.IdCodeMaximumValue,// 255,
                    FieldNumber = 3,
                    IsReadOnly = false,
                    IsVisible = true,
                    DefaultValue = 0,
                    IsDirty = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.SoftwareHouse37Bit.ToString() + "IdCode",
                });
                credentialFormat.CredentialFormatParities.Add(new GalaxySMSBusinessEntities.CredentialFormatParity()
                {
                    ParityType = CredentialParityTypes.Even,
                    HexMaskUlong = CredentialSoftwareHouse37BitFormat.EvenParityMask,
                    HexMask = BitConverter.GetBytes(CredentialSoftwareHouse37BitFormat.EvenParityMask),
                    BitPosition = CredentialSoftwareHouse37BitFormat.EvenParityBitPosition,
                    ComputeSequence = CredentialSoftwareHouse37BitFormat.EvenParityComputeSequence,
                    IsDirty = true
                });
                credentialFormat.CredentialFormatParities.Add(new GalaxySMSBusinessEntities.CredentialFormatParity()
                {
                    ParityType = CredentialParityTypes.Odd,
                    HexMaskUlong = CredentialSoftwareHouse37BitFormat.OddParityMask,
                    HexMask = BitConverter.GetBytes(CredentialSoftwareHouse37BitFormat.OddParityMask),
                    BitPosition = CredentialSoftwareHouse37BitFormat.OddParityBitPosition,// 37,
                    ComputeSequence = CredentialSoftwareHouse37BitFormat.OddParityComputeSequence,
                    IsDirty = true
                });
                credentialFormats.Add(credentialFormat);
                #endregion

                #region Bluetooth Farpointe Conekt Mobile
                credentialFormat = new GalaxySMSBusinessEntities.CredentialFormat()
                {
                    CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.BtFarpointeConektMobile,
                    Display = SharedResources.Resources.GalaxyCredentialFormat_BluetoothFarpointeConektMobile_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_BluetoothFarpointeConektMobile_Description,
                    CredentialFormatCode = GalaxySMS.Common.Enums.CredentialFormatCodes.BtFarpointeConektMobile,
                    BitLength = 256,
                    IsEnabled = true,
                    BatchLoadIncrementField = 1,
                    BatchLoadSupported = true,
                    BiometricEnrollmentSupported = true,
                    BiometricIdField = 1,
                    UseCardNumber = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.BtFarpointeConektMobile.ToString(),
                    IsDirty = true
                };
                credentialFormat.EntityIds.AddRange(entityIds);

                credentialFormats.Add(credentialFormat);
                #endregion

                #region Bluetooth Hid Mobile Access
                credentialFormat = new GalaxySMSBusinessEntities.CredentialFormat()
                {
                    CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.BtHidMobileAccess,
                    Display = SharedResources.Resources.GalaxyCredentialFormat_BluetoothHidMobileAccess_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_BluetoothHidMobileAccess_Description,
                    CredentialFormatCode = GalaxySMS.Common.Enums.CredentialFormatCodes.BtHidMobileAccess,
                    BitLength = 256,
                    IsEnabled = true,
                    BatchLoadIncrementField = 1,
                    BatchLoadSupported = true,
                    BiometricEnrollmentSupported = true,
                    BiometricIdField = 1,
                    UseCardNumber = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.BtHidMobileAccess.ToString(),
                    IsDirty = true
                };
                credentialFormat.EntityIds.AddRange(entityIds);

                credentialFormats.Add(credentialFormat);
                #endregion

                #region Bluetooth Stid Mobile Id
                credentialFormat = new GalaxySMSBusinessEntities.CredentialFormat()
                {
                    CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.BtStidMobileId,
                    Display = SharedResources.Resources.GalaxyCredentialFormat_BluetoothStidMobileId_Display,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_BluetoothStidMobileId_Description,
                    CredentialFormatCode = GalaxySMS.Common.Enums.CredentialFormatCodes.BtStidMobileId,
                    BitLength = 256,
                    IsEnabled = true,
                    BatchLoadIncrementField = 1,
                    BatchLoadSupported = true,
                    BiometricEnrollmentSupported = true,
                    BiometricIdField = 1,
                    UseCardNumber = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.BtStidMobileId.ToString(),
                    IsDirty = true
                };
                credentialFormat.EntityIds.AddRange(entityIds);

                credentialFormats.Add(credentialFormat);
                #endregion

                #region Bluetooth Allegion
                credentialFormat = new GalaxySMSBusinessEntities.CredentialFormat()
                {
                    CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.BtAllegion,
                    Display = SharedResources.Resources.GalaxyCredentialFormat_BluetoothAllegion_Description,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_BluetoothAllegion_Description,
                    CredentialFormatCode = GalaxySMS.Common.Enums.CredentialFormatCodes.BtAllegion,
                    BitLength = 256,
                    IsEnabled = true,
                    BatchLoadIncrementField = 1,
                    BatchLoadSupported = true,
                    BiometricEnrollmentSupported = true,
                    BiometricIdField = 1,
                    UseCardNumber = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.BtAllegion.ToString(),
                    IsDirty = true
                };
                credentialFormat.EntityIds.AddRange(entityIds);

                credentialFormats.Add(credentialFormat);
                #endregion

                #region Bluetooth BAS-IP
                credentialFormat = new GalaxySMSBusinessEntities.CredentialFormat()
                {
                    CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.BtBasIp,
                    Display = SharedResources.Resources.GalaxyCredentialFormat_BluetoothBasIp_Description,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_BluetoothBasIp_Description,
                    CredentialFormatCode = GalaxySMS.Common.Enums.CredentialFormatCodes.BtBasIp,
                    BitLength = 256,
                    IsEnabled = true,
                    BatchLoadIncrementField = 1,
                    BatchLoadSupported = true,
                    BiometricEnrollmentSupported = true,
                    BiometricIdField = 1,
                    UseCardNumber = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.BtBasIp.ToString(),
                    IsDirty = true
                };
                credentialFormat.EntityIds.AddRange(entityIds);

                credentialFormats.Add(credentialFormat);
                #endregion

                #region BAS-IP QR
                credentialFormat = new GalaxySMSBusinessEntities.CredentialFormat()
                {
                    CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.BasIpQr,
                    Display = SharedResources.Resources.GalaxyCredentialFormat_BasIpQr_Description,
                    Description = SharedResources.Resources.GalaxyCredentialFormat_BasIpQr_Description,
                    CredentialFormatCode = GalaxySMS.Common.Enums.CredentialFormatCodes.BasIpQr,
                    BitLength = 256,
                    IsEnabled = true,
                    BatchLoadIncrementField = 1,
                    BatchLoadSupported = true,
                    BiometricEnrollmentSupported = true,
                    BiometricIdField = 1,
                    UseCardNumber = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.CredentialFormatCodes.BasIpQr.ToString(),
                    IsDirty = true
                };
                credentialFormat.EntityIds.AddRange(entityIds);

                credentialFormats.Add(credentialFormat);
                #endregion


                #endregion

                #region Person Activation Mode

                var personActivationModes = new List<PersonActivationMode>();

                var activationMode = new PersonActivationMode()
                {
                    PersonActivationModeUid = PersonActivationModeIds.ImmediatelyActive,
                    Display = SharedResources.Resources.PersonActivationMode_ImmediatelyActive_Display,
                    Description = SharedResources.Resources.PersonActivationMode_ImmediatelyActive_Description,
                    Code = PersonActivationModes.ImmediatelyActive,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.PersonActivationModes.ImmediatelyActive.ToString()
                };
                personActivationModes.Add(activationMode);

                activationMode = new PersonActivationMode()
                {
                    PersonActivationModeUid = PersonActivationModeIds.ActivateByDate,
                    Display = SharedResources.Resources.PersonActivationMode_ActivateByDate_Display,
                    Description = SharedResources.Resources.PersonActivationMode_ActivateByDate_Description,
                    Code = PersonActivationModes.ActivateByDate,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.PersonActivationModes.ActivateByDate.ToString()
                };
                personActivationModes.Add(activationMode);

                activationMode = new PersonActivationMode()
                {
                    PersonActivationModeUid = PersonActivationModeIds.ActivateByDateAndTime,
                    Display = SharedResources.Resources.PersonActivationMode_ActivateByDateAndTime_Display,
                    Description = SharedResources.Resources.PersonActivationMode_ActivateByDateAndTime_Description,
                    Code = PersonActivationModes.ActivateByDateAndTime,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.PersonActivationModes.ActivateByDateAndTime.ToString()
                };
                personActivationModes.Add(activationMode);

                #endregion

                #region Person Expiration Mode

                var personExpirationModes = new List<PersonExpirationMode>();

                var expirationMode = new PersonExpirationMode()
                {
                    PersonExpirationModeUid = PersonExpirationModeIds.NeverExpires,
                    Display = SharedResources.Resources.PersonExpirationMode_NeverExpires_Display,
                    Description = SharedResources.Resources.PersonExpirationMode_NeverExpires_Description,
                    Code = PersonExpirationModes.NeverExpires,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.PersonExpirationModes.NeverExpires.ToString()
                };
                personExpirationModes.Add(expirationMode);

                expirationMode = new PersonExpirationMode()
                {
                    PersonExpirationModeUid = PersonExpirationModeIds.ExpireByDate,
                    Display = SharedResources.Resources.PersonExpirationMode_ExpireByDate_Display,
                    Description = SharedResources.Resources.PersonExpirationMode_ExpireByDate_Description,
                    Code = PersonExpirationModes.ExpireByDate,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.PersonExpirationModes.ExpireByDate.ToString()
                };
                personExpirationModes.Add(expirationMode);

                expirationMode = new PersonExpirationMode()
                {
                    PersonExpirationModeUid = PersonExpirationModeIds.ExpireByUsageCount,
                    Display = SharedResources.Resources.PersonExpirationMode_ExpireByUsageCount_Display,
                    Description = SharedResources.Resources.PersonExpirationMode_ExpireByUsageCount_Description,
                    Code = PersonExpirationModes.ExpireByUsageCount,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.PersonExpirationModes.ExpireByUsageCount.ToString()
                };
                personExpirationModes.Add(expirationMode);

                expirationMode = new PersonExpirationMode()
                {
                    PersonExpirationModeUid = PersonExpirationModeIds.ExpireByDateAndTime,
                    Display = SharedResources.Resources.PersonExpirationMode_ExpireByDateAndTime_Display,
                    Description = SharedResources.Resources.PersonExpirationMode_ExpireByDateAndTime_Description,
                    Code = PersonExpirationModes.ExpireByDateAndTime,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.PersonExpirationModes.ExpireByDateAndTime.ToString()
                };
                personExpirationModes.Add(expirationMode);

                expirationMode = new PersonExpirationMode()
                {
                    PersonExpirationModeUid = PersonExpirationModeIds.ExpireByDateAndTimeAndUsageCount,
                    Display = SharedResources.Resources.PersonExpirationMode_ExpireByDateAndTimeAndUsageCount_Display,
                    Description = SharedResources.Resources.PersonExpirationMode_ExpireByDateAndTimeAndUsageCount_Description,
                    Code = PersonExpirationModes.ExpireByDateAndTimeAndUsageCount,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.PersonExpirationModes.ExpireByDateAndTimeAndUsageCount.ToString()
                };
                personExpirationModes.Add(expirationMode);
                #endregion

                #region Person Credential Role

                var personCredentialRoles = new List<PersonCredentialRole>();

                var credentialRole = new PersonCredentialRole()
                {
                    PersonCredentialRoleUid = GalaxySMS.Common.Constants.PersonCredentialRoleIds.AccessControl,
                    Display = SharedResources.Resources.PersonCredentialRole_AccessControl_Display,
                    Description = SharedResources.Resources.PersonCredentialRole_AccessControl_Description,
                    Code = PersonCredentialRoles.AccessControl,
                    IsActive = true,
                    IsDefault = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.PersonCredentialRoles.AccessControl.ToString()
                };
                personCredentialRoles.Add(credentialRole);

                credentialRole = new PersonCredentialRole()
                {
                    PersonCredentialRoleUid = GalaxySMS.Common.Constants.PersonCredentialRoleIds.AlarmControl,
                    Display = SharedResources.Resources.PersonCredentialRole_AlarmControl_Display,
                    Description = SharedResources.Resources.PersonCredentialRole_AlarmControl_Description,
                    Code = PersonCredentialRoles.AlarmControl,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.PersonCredentialRoles.AlarmControl.ToString()
                };
                personCredentialRoles.Add(credentialRole);

                #endregion

                #region Badge Template

                var badgeTemplates = new List<BadgeTemplate>();

                var badgeTemplate = new BadgeTemplate()
                {
                    BadgeTemplateUid = GalaxySMS.Common.Constants.BadgeTemplateIds.BadgeTemplateUid_None,
                    EntityId = GalaxySMS.Common.Constants.EntityIds.GalaxySMS_SystemEntity_Id,
                    BadgeSystemTypeUid = GalaxySMS.Common.Constants.BadgeSystemTypeIds.None,
                    TemplateName = SharedResources.Resources.BadgeTemplate_None_TemplateName,
                    TemplateId = GalaxySMS.Common.Constants.BadgeTemplateIds.BadgeTemplateId_None,
                    Description = SharedResources.Resources.BadgeTemplate_None_Description,
                };
                badgeTemplates.Add(badgeTemplate);

                #endregion

                #region Access Profiles

                var accessProfiles = new List<AccessProfile>();

                var accessProfile = new AccessProfile
                {
                    AccessProfileUid = GalaxySMS.Common.Constants.AccessProfileIds.AccessProfileId_None,
                    EntityId = GalaxySMS.Common.Constants.EntityIds.GalaxySMS_SystemEntity_Id,
                    AccessProfileName = SharedResources.Resources.AccessProfile_None_AccessProfileName,
                    Comments = SharedResources.Resources.AccessProfile_None_Comments,
                };
                accessProfiles.Add(accessProfile);

                #endregion

                #region Lcd Message Display Mode

                var personLcdMessageDisplayModes = new List<PersonLcdMessageDisplayMode>();

                var lcdMessageDisplayMode = new PersonLcdMessageDisplayMode()
                {
                    Display = SharedResources.Resources.PersonLcdMessageDisplayMode_DoNotDisplay_Display,
                    Description = SharedResources.Resources.PersonLcdMessageDisplayMode_DoNotDisplay_Description,
                    Code = PersonLcdMessageDisplayModes.DoNotDisplay,
                    UniqueResourceName = GalaxySMS.Common.Enums.PersonLcdMessageDisplayModes.DoNotDisplay.ToString()
                };
                personLcdMessageDisplayModes.Add(lcdMessageDisplayMode);

                lcdMessageDisplayMode = new PersonLcdMessageDisplayMode()
                {
                    Display = SharedResources.Resources.PersonLcdMessageDisplayMode_DisplayEveryTime_Display,
                    Description = SharedResources.Resources.PersonLcdMessageDisplayMode_DisplayEveryTime_Description,
                    Code = PersonLcdMessageDisplayModes.DisplayEveryTime,
                    UniqueResourceName = GalaxySMS.Common.Enums.PersonLcdMessageDisplayModes.DisplayEveryTime.ToString()
                };
                personLcdMessageDisplayModes.Add(lcdMessageDisplayMode);

                lcdMessageDisplayMode = new PersonLcdMessageDisplayMode()
                {
                    Display = SharedResources.Resources.PersonLcdMessageDisplayMode_DisplayForDateTimeRange_Display,
                    Description = SharedResources.Resources.PersonLcdMessageDisplayMode_DisplayForDateTimeRange_Description,
                    Code = PersonLcdMessageDisplayModes.DisplayForDateTimeRange,
                    UniqueResourceName = GalaxySMS.Common.Enums.PersonLcdMessageDisplayModes.DisplayForDateTimeRange.ToString()
                };
                personLcdMessageDisplayModes.Add(lcdMessageDisplayMode);

                #endregion

                #region Input Output (Access Portal) Group Commands

                var inputOutputGroupCommands = new List<InputOutputGroupCommand>();

                var ioGroupCommand = new InputOutputGroupCommand()
                {
                    InputOutputGroupCommandUid = GalaxySMS.Common.Constants.InputOutputGroupCommandIds.Arm,
                    Display = SharedResources.Resources.InputOutputGroupCommand_Arm_Name,
                    Description = SharedResources.Resources.InputOutputGroupCommand_Arm_Description,
                    CommandCode = (short)GCS.PanelProtocols.Enums.PacketDataCodeTo6xx.CommandArmIOGroup,
                    IsActive = true,
                    IsAccessPortalGroupCommand = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.InputOutputGroupCommandActionCode.Arm.ToString()
                };
                inputOutputGroupCommands.Add(ioGroupCommand);

                ioGroupCommand = new InputOutputGroupCommand()
                {
                    InputOutputGroupCommandUid = GalaxySMS.Common.Constants.InputOutputGroupCommandIds.Disarm,
                    Display = SharedResources.Resources.InputOutputGroupCommand_Disarm_Name,
                    Description = SharedResources.Resources.InputOutputGroupCommand_Disarm_Description,
                    CommandCode = (short)GCS.PanelProtocols.Enums.PacketDataCodeTo6xx.CommandDisarmIOGroup,
                    IsActive = true,
                    IsAccessPortalGroupCommand = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.InputOutputGroupCommandActionCode.Disarm.ToString()
                };
                inputOutputGroupCommands.Add(ioGroupCommand);

                ioGroupCommand = new InputOutputGroupCommand()
                {
                    InputOutputGroupCommandUid = GalaxySMS.Common.Constants.InputOutputGroupCommandIds.Shunt,
                    Display = SharedResources.Resources.InputOutputGroupCommand_Shunt_Name,
                    Description = SharedResources.Resources.InputOutputGroupCommand_Shunt_Description,
                    CommandCode = (short)GCS.PanelProtocols.Enums.PacketDataCodeTo6xx.CommandShuntIOGroup,
                    IsActive = true,
                    IsAccessPortalGroupCommand = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.InputOutputGroupCommandActionCode.Shunt.ToString()
                };
                inputOutputGroupCommands.Add(ioGroupCommand);

                ioGroupCommand = new InputOutputGroupCommand()
                {
                    InputOutputGroupCommandUid = GalaxySMS.Common.Constants.InputOutputGroupCommandIds.Unshunt,
                    Display = SharedResources.Resources.InputOutputGroupCommand_Unshunt_Name,
                    Description = SharedResources.Resources.InputOutputGroupCommand_Unshunt_Description,
                    CommandCode = (short)GCS.PanelProtocols.Enums.PacketDataCodeTo6xx.CommandUnshuntIOGroup,
                    IsActive = true,
                    IsAccessPortalGroupCommand = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.InputOutputGroupCommandActionCode.Unshunt.ToString()
                };
                inputOutputGroupCommands.Add(ioGroupCommand);

                ioGroupCommand = new InputOutputGroupCommand()
                {
                    InputOutputGroupCommandUid = GalaxySMS.Common.Constants.InputOutputGroupCommandIds.UnlockAccessPortals,
                    Display = SharedResources.Resources.AccessPortalGroupCommand_Unlock_Name,
                    Description = SharedResources.Resources.AccessPortalGroupCommand_Unlock_Description,
                    CommandCode = (short)GCS.PanelProtocols.Enums.PacketDataCodeTo6xx.CommandUnlockDoorGroup,
                    IsActive = true,
                    IsAccessPortalGroupCommand = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.InputOutputGroupCommandActionCode.UnlockAccessPortals.ToString()
                };
                inputOutputGroupCommands.Add(ioGroupCommand);

                ioGroupCommand = new InputOutputGroupCommand()
                {
                    InputOutputGroupCommandUid = GalaxySMS.Common.Constants.InputOutputGroupCommandIds.LockAccessPortals,
                    Display = SharedResources.Resources.AccessPortalGroupCommand_Lock_Name,
                    Description = SharedResources.Resources.AccessPortalGroupCommand_Lock_Description,
                    CommandCode = (short)GCS.PanelProtocols.Enums.PacketDataCodeTo6xx.CommandLockDoorGroup,
                    IsActive = true,
                    IsAccessPortalGroupCommand = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.InputOutputGroupCommandActionCode.LockAccessPortals.ToString()
                };
                inputOutputGroupCommands.Add(ioGroupCommand);

                ioGroupCommand = new InputOutputGroupCommand()
                {
                    InputOutputGroupCommandUid = GalaxySMS.Common.Constants.InputOutputGroupCommandIds.DisableAccessPortals,
                    Display = SharedResources.Resources.AccessPortalGroupCommand_Disable_Name,
                    Description = SharedResources.Resources.AccessPortalGroupCommand_Disable_Description,
                    CommandCode = (short)GCS.PanelProtocols.Enums.PacketDataCodeTo6xx.CommandDisableDoorGroup,
                    IsActive = true,
                    IsAccessPortalGroupCommand = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.InputOutputGroupCommandActionCode.DisableAccessPortals.ToString()
                };
                inputOutputGroupCommands.Add(ioGroupCommand);

                ioGroupCommand = new InputOutputGroupCommand()
                {
                    InputOutputGroupCommandUid = GalaxySMS.Common.Constants.InputOutputGroupCommandIds.EnableAccessPortals,
                    Display = SharedResources.Resources.AccessPortalGroupCommand_Enable_Name,
                    Description = SharedResources.Resources.AccessPortalGroupCommand_Enable_Description,
                    CommandCode = (short)GCS.PanelProtocols.Enums.PacketDataCodeTo6xx.CommandEnableDoorGroup,
                    IsActive = true,
                    IsAccessPortalGroupCommand = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.InputOutputGroupCommandActionCode.EnableAccessPortals.ToString()
                };
                inputOutputGroupCommands.Add(ioGroupCommand);

                #region Input Commands

                var inputCommands = new List<InputCommand>();

                var inputCommand = new InputCommand()
                {
                    InputCommandUid = GalaxySMS.Common.Constants.InputCommandIds.Shunt,
                    Display = SharedResources.Resources.InputCommand_Shunt_Name,
                    Description = SharedResources.Resources.InputCommand_Shunt_Description,
                    CommandCode = (short)GCS.PanelProtocols.Enums.PacketDataCodeTo6xx.CommandShuntInput,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.InputDeviceCommandActionCode.Shunt.ToString()
                };
                inputCommand.GalaxyPanelModelIds.Add(GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                inputCommand.GalaxyPanelModelIds.Add(GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                inputCommand.GalaxyPanelModelIds.Add(GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                inputCommands.Add(inputCommand);

                inputCommand = new InputCommand()
                {
                    InputCommandUid = GalaxySMS.Common.Constants.InputCommandIds.Unshunt,
                    Display = SharedResources.Resources.InputCommand_Unshunt_Name,
                    Description = SharedResources.Resources.InputCommand_Unshunt_Description,
                    CommandCode = (short)GCS.PanelProtocols.Enums.PacketDataCodeTo6xx.CommandUnshuntInput,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.InputDeviceCommandActionCode.Unshunt.ToString()
                };
                inputCommand.GalaxyPanelModelIds.Add(GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                inputCommand.GalaxyPanelModelIds.Add(GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                inputCommand.GalaxyPanelModelIds.Add(GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                inputCommands.Add(inputCommand);

                inputCommand = new InputCommand()
                {
                    InputCommandUid = GalaxySMS.Common.Constants.InputCommandIds.Disable,
                    Display = SharedResources.Resources.InputCommand_Disable_Name,
                    Description = SharedResources.Resources.InputCommand_Disable_Description,
                    CommandCode = (short)GCS.PanelProtocols.Enums.PacketDataCodeTo6xx.CommandDisableInput,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.InputDeviceCommandActionCode.Disable.ToString()
                };
                inputCommand.GalaxyPanelModelIds.Add(GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                inputCommand.GalaxyPanelModelIds.Add(GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                inputCommand.GalaxyPanelModelIds.Add(GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                inputCommands.Add(inputCommand);

                inputCommand = new InputCommand()
                {
                    InputCommandUid = GalaxySMS.Common.Constants.InputCommandIds.Enable,
                    Display = SharedResources.Resources.InputCommand_Enable_Name,
                    Description = SharedResources.Resources.InputCommand_Enable_Description,
                    CommandCode = (short)GCS.PanelProtocols.Enums.PacketDataCodeTo6xx.CommandEnableInput,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.InputDeviceCommandActionCode.Enable.ToString()
                };
                inputCommand.GalaxyPanelModelIds.Add(GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600);
                inputCommand.GalaxyPanelModelIds.Add(GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635);
                inputCommand.GalaxyPanelModelIds.Add(GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708);
                inputCommands.Add(inputCommand);
                #endregion

                #region Output Commands

                var outputCommands = new List<OutputCommand>();

                var outputCommand = new OutputCommand()
                {
                    OutputCommandUid = GalaxySMS.Common.Constants.OutputCommandIds.On,
                    Display = SharedResources.Resources.OutputCommand_On_Name,
                    Description = SharedResources.Resources.OutputCommand_On_Description,
                    CommandCode = (short)GCS.PanelProtocols.Enums.PacketDataCodeTo6xx.CommandOutputOn,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.OutputDeviceCommandActionCode.On.ToString()
                };
                outputCommands.Add(outputCommand);

                outputCommand = new OutputCommand()
                {
                    OutputCommandUid = GalaxySMS.Common.Constants.OutputCommandIds.Off,
                    Display = SharedResources.Resources.OutputCommand_Off_Name,
                    Description = SharedResources.Resources.OutputCommand_Off_Description,
                    CommandCode = (short)GCS.PanelProtocols.Enums.PacketDataCodeTo6xx.CommandOutputOff,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.OutputDeviceCommandActionCode.Off.ToString()
                };
                outputCommands.Add(outputCommand);

                outputCommand = new OutputCommand()
                {
                    OutputCommandUid = GalaxySMS.Common.Constants.OutputCommandIds.Disable,
                    Display = SharedResources.Resources.OutputCommand_Disable_Name,
                    Description = SharedResources.Resources.OutputCommand_Disable_Description,
                    CommandCode = (short)GCS.PanelProtocols.Enums.PacketDataCodeTo6xx.CommandOutputDisable,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.OutputDeviceCommandActionCode.Disable.ToString()
                };
                outputCommands.Add(outputCommand);

                outputCommand = new OutputCommand()
                {
                    OutputCommandUid = GalaxySMS.Common.Constants.OutputCommandIds.Enable,
                    Display = SharedResources.Resources.OutputCommand_Enable_Name,
                    Description = SharedResources.Resources.OutputCommand_Enable_Description,
                    CommandCode = (short)GCS.PanelProtocols.Enums.PacketDataCodeTo6xx.CommandOutputEnable,
                    IsActive = true,
                    UniqueResourceName = GalaxySMS.Common.Enums.OutputDeviceCommandActionCode.Enable.ToString()
                };
                outputCommands.Add(outputCommand);
                #endregion


                #endregion

                #region Mercury SCP Types

                var mercScpTypes = new List<GalaxySMS.Business.Entities.MercScpType>();

                var mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.Lp1501,
                    Display = SharedResources.Resources.MercScpType_Lp1501_Display,
                    Description = SharedResources.Resources.MercScpType_Lp1501_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.LP1501.ToString(),//.Lp1501.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.LP1501,
                    MaxReaders = 17,
                    MaxInputs = 130,
                    MaxOutputs = 130,
                    MaxSio485Ports = 8,
                    OnboardReaders = 2,
                    OnboardInputs = 2,
                    OnboardOutputs = 2,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.LP1501.ToString(),//MercScpType.Lp1501.ToString()

                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.Lp1502,
                    Display = SharedResources.Resources.MercScpType_Lp1502_Display,
                    Description = SharedResources.Resources.MercScpType_Lp1502_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.LP1502.ToString(),//MercScpType.Lp1502.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.LP1502,
                    MaxReaders = 64,
                    MaxInputs = 520,
                    MaxOutputs = 516,
                    MaxSio485Ports = 8,
                    OnboardReaders = 4,
                    OnboardInputs = 8,
                    OnboardOutputs = 4,                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.LP1502.ToString(),//MercScpType.Lp1502.ToString()
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.Lp2500,
                    Display = SharedResources.Resources.MercScpType_Lp2500_Display,
                    Description = SharedResources.Resources.MercScpType_Lp2500_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.LP2500.ToString(),//MercScpType.Lp2500.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.LP2500,
                    MaxReaders = 64,
                    MaxInputs = 1024,
                    MaxOutputs = 1024,
                    MaxSio485Ports = 32,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.LP2500.ToString(),//MercScpType.Lp2500.ToString()
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.Lp4502,
                    Display = SharedResources.Resources.MercScpType_Lp4502_Display,
                    Description = SharedResources.Resources.MercScpType_Lp4502_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.LP4502.ToString(),//MercScpType.Lp4502.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.LP4502,
                    MaxReaders = 64,
                    MaxInputs = 1024,
                    MaxOutputs = 1024,
                    MaxSio485Ports = 32,//??
                    OnboardReaders = 2,
                    OnboardInputs = 8,
                    OnboardOutputs = 4,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.LP4502.ToString(),//MercScpType.Lp4502.ToString()
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.SCP,
                    Display = SharedResources.Resources.MercScpType_SCP_Display,
                    Description = SharedResources.Resources.MercScpType_SCP_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.SCP.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.SCP,
                    MaxReaders = 0,
                    MaxInputs = 0,
                    MaxOutputs = 0,
                    MaxSio485Ports = 0,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.SCP.ToString(),
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.SCPC,
                    Display = SharedResources.Resources.MercScpType_SCPC_Display,
                    Description = SharedResources.Resources.MercScpType_SCPC_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.SCPC.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.SCPC,
                    MaxReaders = 0,
                    MaxInputs = 0,
                    MaxOutputs = 0,
                    MaxSio485Ports = 0,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.SCPC.ToString(),
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.SCPE,
                    Display = SharedResources.Resources.MercScpType_SCPE_Display,
                    Description = SharedResources.Resources.MercScpType_SCPE_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.SCPE.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.SCPE,
                    MaxReaders = 0,
                    MaxInputs = 0,
                    MaxOutputs = 0,
                    MaxSio485Ports = 0,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.SCPE.ToString(),
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.PW5000,
                    Display = SharedResources.Resources.MercScpType_PW5000_Display,
                    Description = SharedResources.Resources.MercScpType_PW5000_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.PW5000.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.PW5000,
                    MaxReaders = 0,
                    MaxInputs = 0,
                    MaxOutputs = 0,
                    MaxSio485Ports = 0,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.PW5000.ToString(),
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.PW5000A,
                    Display = SharedResources.Resources.MercScpType_PW5000A_Display,
                    Description = SharedResources.Resources.MercScpType_PW5000A_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.PW5000A.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.PW5000A,
                    MaxReaders = 0,
                    MaxInputs = 0,
                    MaxOutputs = 0,
                    MaxSio485Ports = 0,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.PW5000A.ToString(),
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.PW3000,
                    Display = SharedResources.Resources.MercScpType_PW3000_Display,
                    Description = SharedResources.Resources.MercScpType_PW3000_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.PW3000.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.PW3000,
                    MaxReaders = 0,
                    MaxInputs = 0,
                    MaxOutputs = 0,
                    MaxSio485Ports = 0,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.PW3000.ToString(),
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.EP1501,
                    Display = SharedResources.Resources.MercScpType_EP1501_Display,
                    Description = SharedResources.Resources.MercScpType_EP1501_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.EP1501.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.EP1501,
                    MaxReaders = 0,
                    MaxInputs = 0,
                    MaxOutputs = 0,
                    MaxSio485Ports = 0,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.EP1501.ToString(),
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.EP1502,
                    Display = SharedResources.Resources.MercScpType_EP1502_Display,
                    Description = SharedResources.Resources.MercScpType_EP1502_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.EP1502.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.EP1502,
                    MaxReaders = 0,
                    MaxInputs = 0,
                    MaxOutputs = 0,
                    MaxSio485Ports = 0,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.EP1502.ToString(),
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.EP2500,
                    Display = SharedResources.Resources.MercScpType_EP2500_Display,
                    Description = SharedResources.Resources.MercScpType_EP2500_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.EP2500.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.EP2500,
                    MaxReaders = 0,
                    MaxInputs = 0,
                    MaxOutputs = 0,
                    MaxSio485Ports = 0,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.EP2500.ToString(),
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.EP4502,
                    Display = SharedResources.Resources.MercScpType_EP4502_Display,
                    Description = SharedResources.Resources.MercScpType_EP4502_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.EP4502.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.EP4502,
                    MaxReaders = 0,
                    MaxInputs = 0,
                    MaxOutputs = 0,
                    MaxSio485Ports = 0,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.EP4502.ToString(),
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.PW6000,
                    Display = SharedResources.Resources.MercScpType_PW6000_Display,
                    Description = SharedResources.Resources.MercScpType_PW6000_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.PW6000.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.PW6000,
                    MaxReaders = 0,
                    MaxInputs = 0,
                    MaxOutputs = 0,
                    MaxSio485Ports = 0,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.PW6000.ToString(),
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.PRO3200,
                    Display = SharedResources.Resources.MercScpType_PRO3200_Display,
                    Description = SharedResources.Resources.MercScpType_PRO3200_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.PRO3200.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.PRO3200,
                    MaxReaders = 0,
                    MaxInputs = 0,
                    MaxOutputs = 0,
                    MaxSio485Ports = 0,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.PRO3200.ToString(),
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.NXT,
                    Display = SharedResources.Resources.MercScpType_NXT_Display,
                    Description = SharedResources.Resources.MercScpType_NXT_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.NXT.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.NXT,
                    MaxReaders = 0,
                    MaxInputs = 0,
                    MaxOutputs = 0,
                    MaxSio485Ports = 0,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.NXT.ToString(),
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.MIRS4,
                    Display = SharedResources.Resources.MercScpType_MIRS4_Display,
                    Description = SharedResources.Resources.MercScpType_MIRS4_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.MIRS4.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.MIRS4,
                    MaxReaders = 0,
                    MaxInputs = 0,
                    MaxOutputs = 0,
                    MaxSio485Ports = 0,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.MIRS4.ToString(),
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.MIXL16,
                    Display = SharedResources.Resources.MercScpType_MIXL16_Display,
                    Description = SharedResources.Resources.MercScpType_MIXL16_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.MIXL16.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.MIXL16,
                    MaxReaders = 0,
                    MaxInputs = 0,
                    MaxOutputs = 0,
                    MaxSio485Ports = 0,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.MIXL16.ToString(),
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.MSICS,
                    Display = SharedResources.Resources.MercScpType_MSICS_Display,
                    Description = SharedResources.Resources.MercScpType_MSICS_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.MSICS.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.MSICS,
                    MaxReaders = 0,
                    MaxInputs = 0,
                    MaxOutputs = 0,
                    MaxSio485Ports = 0,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.MSICS.ToString(),
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.M5IC,
                    Display = SharedResources.Resources.MercScpType_M5IC_Display,
                    Description = SharedResources.Resources.MercScpType_M5IC_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.M5IC.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.M5IC,
                    MaxReaders = 0,
                    MaxInputs = 0,
                    MaxOutputs = 0,
                    MaxSio485Ports = 0,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.M5IC.ToString(),
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.SSC,
                    Display = SharedResources.Resources.MercScpType_SSC_Display,
                    Description = SharedResources.Resources.MercScpType_SSC_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.SSC.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.SSC,
                    MaxReaders = 0,
                    MaxInputs = 0,
                    MaxOutputs = 0,
                    MaxSio485Ports = 0,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.SSC.ToString(),
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.AP2,
                    Display = SharedResources.Resources.MercScpType_AP2_Display,
                    Description = SharedResources.Resources.MercScpType_AP2_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.AP2.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.AP2,
                    MaxReaders = 0,
                    MaxInputs = 0,
                    MaxOutputs = 0,
                    MaxSio485Ports = 0,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.AP2.ToString(),
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.X1100,
                    Display = SharedResources.Resources.MercScpType_X1100_Display,
                    Description = SharedResources.Resources.MercScpType_X1100_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.X1100.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.X1100,
                    MaxReaders = 0,
                    MaxInputs = 0,
                    MaxOutputs = 0,
                    MaxSio485Ports = 0,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.X1100.ToString(),
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.PW7000,
                    Display = SharedResources.Resources.MercScpType_PW7000_Display,
                    Description = SharedResources.Resources.MercScpType_PW7000_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.PW7000.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.PW7000,
                    MaxReaders = 0,
                    MaxInputs = 0,
                    MaxOutputs = 0,
                    MaxSio485Ports = 0,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.PW7000.ToString(),
                };
                mercScpTypes.Add(mercScpType);

                mercScpType = new GalaxySMS.Business.Entities.MercScpType()
                {
                    MercScpTypeUid = GalaxySMS.Common.Constants.MercScpTypeIds.PRO4200,
                    Display = SharedResources.Resources.MercScpType_PRO4200_Display,
                    Description = SharedResources.Resources.MercScpType_PRO4200_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercuryPanelType.PRO4200.ToString(),
                    TypeCodeValue = (int)GalaxySMS.Common.Enums.MercuryPanelType.PRO4200,
                    MaxReaders = 0,
                    MaxInputs = 0,
                    MaxOutputs = 0,
                    MaxSio485Ports = 0,//??
                    OnboardReaders = 0,
                    OnboardInputs = 0,
                    OnboardOutputs = 0,
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercuryPanelType.PRO4200.ToString(),
                };
                mercScpTypes.Add(mercScpType);

                #endregion

                #region Mercury Sio Types

                var mercSioTypes = new List<GalaxySMS.Business.Entities.MercSioType>();

                var mercSioType = new GalaxySMS.Business.Entities.MercSioType()
                {
                    MercSioTypeUid = GalaxySMS.Common.Constants.MercSioTypeIds.Mr50_S3,
                    Display = SharedResources.Resources.MercSioType_Mr50_S3_Display,
                    Description = SharedResources.Resources.MercSioType_Mr50_S3_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercSioType.Mr50S3.ToString(),
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercSioType.Mr50S3.ToString()
                };
                mercSioTypes.Add(mercSioType);

                mercSioType = new GalaxySMS.Business.Entities.MercSioType()
                {
                    MercSioTypeUid = GalaxySMS.Common.Constants.MercSioTypeIds.Mr52_S3,
                    Display = SharedResources.Resources.MercSioType_Mr52_S3_Display,
                    Description = SharedResources.Resources.MercSioType_Mr52_S3_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercSioType.Mr52S3.ToString(),
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercSioType.Mr52S3.ToString()
                };
                mercSioTypes.Add(mercSioType);

                mercSioType = new GalaxySMS.Business.Entities.MercSioType()
                {
                    MercSioTypeUid = GalaxySMS.Common.Constants.MercSioTypeIds.Mr62e,
                    Display = SharedResources.Resources.MercSioType_Mr62e_Display,
                    Description = SharedResources.Resources.MercSioType_Mr62e_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercSioType.Mr62e.ToString(),
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercSioType.Mr62e.ToString()
                };
                mercSioTypes.Add(mercSioType);

                mercSioType = new GalaxySMS.Business.Entities.MercSioType()
                {
                    MercSioTypeUid = GalaxySMS.Common.Constants.MercSioTypeIds.Mr16In_S3,
                    Display = SharedResources.Resources.MercSioType_Mr16In_Display,
                    Description = SharedResources.Resources.MercSioType_Mr16In_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercSioType.Mr16InS3.ToString(),
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercSioType.Mr16InS3.ToString()
                };
                mercSioTypes.Add(mercSioType);

                mercSioType = new GalaxySMS.Business.Entities.MercSioType()
                {
                    MercSioTypeUid = GalaxySMS.Common.Constants.MercSioTypeIds.Mr16Out_S3,
                    Display = SharedResources.Resources.MercSioType_Mr16Out_Display,
                    Description = SharedResources.Resources.MercSioType_Mr16Out_Description,
                    TypeCode = GalaxySMS.Common.Enums.MercSioType.Mr16OutS3.ToString(),
                    //IsActive = true,
                    //IsDefault = false,
                    UniqueResourceName = GalaxySMS.Common.Enums.MercSioType.Mr16OutS3.ToString()
                };
                mercSioTypes.Add(mercSioType);

                #endregion

                //#region Mercury Scp Groups
                //var mercScpGroups = new List<GalaxySMS.Business.Entities.MercScpGroup>();

                //var mercScpGroup = new GalaxySMS.Business.Entities.MercScpGroup()
                //{
                //    MercScpGroupUid = MercScpGroupIds.Default,
                //    EntityId = EntityIds.GalaxySMS_DefaultEntity_Id,
                //    SiteUid = SiteIds.Default,
                //    Name = SharedResources.Resources.Mercury_ScpGroup_Default_Name,
                //    Description = SharedResources.Resources.Mercury_ScpGroup_Default_Description,
                //    IsActive = true,
                //    NumberOfTransactions = 100000,
                //    NumberOfOperatingModes = 1,
                //    OperatingModeType = 0,
                //    AllowConnection = true
                //};
                //mercScpGroups.Add(mercScpGroup);


                //#endregion

                #region Insert the data into the database

                foreach (var ct in clusterTypes)
                {
                    if (clusterTypeRepository.DoesExist(ct.ClusterTypeUid) == false &&
                        IsClusterTypeUnique(ct))
                    {
                        var saveParameters = new SaveParameters<ClusterType>(ct, parameters);
                        this.Log().Info($"Saving Cluster Type - {ct.Display}");
                        saveParameters.DoNotValidateAuthorization = parameters.DoNotValidateAuthorization;
                        SaveClusterType(saveParameters);
                    }
                }

                foreach (var cc in clusterCommands)
                {
                    if (clusterCommandRepository.DoesExist(cc.ClusterCommandUid) == false &&
                        IsClusterCommandUnique(cc))
                    {
                        var saveParameters = new SaveParameters<ClusterCommand>(cc, parameters);
                        this.Log().Info($"Saving Cluster Command - {cc.Display}");
                        saveParameters.DoNotValidateAuthorization = parameters.DoNotValidateAuthorization;
                        SaveClusterCommand(saveParameters);
                    }
                }

                foreach (var gpm in galaxyPanelModels)
                {
                    if (galaxyPanelModelRepository.DoesExist(gpm.GalaxyPanelModelUid) == false &&
                        IsGalaxyPanelModelUnique(gpm))
                    {
                        var saveParameters = new SaveParameters<GalaxyPanelModel>(gpm, parameters);
                        this.Log().Info($"Saving Galaxy Panel Model - {gpm.Display}");
                        saveParameters.DoNotValidateAuthorization = parameters.DoNotValidateAuthorization;
                        SaveGalaxyPanelModel(saveParameters);
                    }
                }

                foreach (var o in galaxyPanelAlertEventTypes)
                {
                    if (galaxyPanelAlertEventTypeRepository.DoesExist(o.GalaxyPanelAlertEventTypeUid) == false &&
                        galaxyPanelAlertEventTypeRepository.IsUnique(o))
                    {
                        UpdateProperties(o);
                        this.Log().Info($"Saving Galaxy Panel Alert Event Type - {o.Display}");
                        galaxyPanelAlertEventTypeRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var gpc in galaxyPanelCommands)
                {
                    var bp = false;
                    if (gpc.GalaxyPanelCommandUid == GalaxySMS.Common.Constants.GalaxyClusterCommandIds
                            .GalaxyClusterCommand_RequestBoardInformation)
                        bp = true;
                    var doesExist = galaxyPanelCommandRepository.DoesExist(gpc.GalaxyPanelCommandUid);
                    var isUnique = IsGalaxyPanelCommandUnique(gpc);
                    if (galaxyPanelCommandRepository.DoesExist(gpc.GalaxyPanelCommandUid) == false &&
                        IsGalaxyPanelCommandUnique(gpc))
                    {
                        var saveParameters = new SaveParameters<GalaxyPanelCommand>(gpc, parameters);
                        this.Log().Info($"Saving Galaxy Panel Command Type - {gpc.Display}");
                        saveParameters.DoNotValidateAuthorization = parameters.DoNotValidateAuthorization;
                        SaveGalaxyPanelCommand(saveParameters);
                    }
                }

                foreach (var cpumodel in galaxyCpuModels)
                {
                    if (galaxyCpuModelRepository.DoesExist(cpumodel.GalaxyCpuModelUid) == false &&
                        IsGalaxyCpuModelUnique(cpumodel))
                    {
                        var saveParameters = new SaveParameters<GalaxyCpuModel>(cpumodel, parameters);
                        this.Log().Info($"Saving Galaxy Cpu Model - {cpumodel.Display}");
                        saveParameters.DoNotValidateAuthorization = parameters.DoNotValidateAuthorization;
                        SaveGalaxyCpuModel(saveParameters);
                    }
                }

                foreach (var ibt in galaxyInterfaceBoardTypes)
                {
                    if (interfaceBoardTypeRepository.DoesExist(ibt.InterfaceBoardTypeUid) == false &&
                        IsGalaxyInterfaceBoardTypeUnique(ibt))
                    {
                        var saveParameters = new SaveParameters<InterfaceBoardType>(ibt, parameters);
                        this.Log().Info($"Saving Galaxy Interface Board Type - {ibt.Display}");
                        saveParameters.DoNotValidateAuthorization = parameters.DoNotValidateAuthorization;
                        SaveGalaxyInterfaceBoardType(saveParameters);
                    }
                }

                foreach (var ibsm in galaxyInterfaceBoardSectionModes)
                {
                    if (interfaceBoardSectionModeRepository.DoesExist(ibsm.InterfaceBoardSectionModeUid) == false &&
                        IsGalaxyInterfaceBoardSectionModeUnique(ibsm))
                    {
                        var saveParameters = new SaveParameters<InterfaceBoardSectionMode>(ibsm, parameters);
                        this.Log().Info($"Saving Galaxy Interface Board Section Mode - {ibsm.Display}");
                        saveParameters.DoNotValidateAuthorization = parameters.DoNotValidateAuthorization;
                        SaveGalaxyInterfaceBoardSectionMode(saveParameters);
                    }
                }

                foreach (var ibsc in galaxyInterfaceBoardSectionCommands)
                {
                    if (interfaceBoardSectionCommandRepository.DoesExist(ibsc.GalaxyInterfaceBoardSectionCommandUid) == false &&
                        IsGalaxyInterfaceBoardSectionCommandUnique(ibsc))
                    {
                        var saveParameters = new SaveParameters<GalaxyInterfaceBoardSectionCommand>(ibsc, parameters);
                        this.Log().Info($"Saving Galaxy Interface Board Section Command - {ibsc.Display}");
                        saveParameters.DoNotValidateAuthorization = parameters.DoNotValidateAuthorization;
                        SaveGalaxyInterfaceBoardSectionCommand(saveParameters);
                    }
                }

                foreach (var mt in hardwareModuleTypes)
                {
                    if (galaxyHardwareModuleTypeRepository.DoesExist(mt.GalaxyHardwareModuleTypeUid) == false &&
                        IsGalaxyHardwareModuleTypeUnique(mt))
                    {
                        var saveParameters = new SaveParameters<GalaxyHardwareModuleType>(mt, parameters);
                        this.Log().Info($"Saving Galaxy Hardware Module Type - {mt.Display}");
                        saveParameters.DoNotValidateAuthorization = parameters.DoNotValidateAuthorization;
                        SaveGalaxyHardwareModuleType(saveParameters);
                    }
                }

                foreach (var cdl in credentialDataLengths)
                {
                    if (credentialDataLengthRepository.DoesExist(cdl.CredentialDataLengthUid) == false &&
                        credentialDataLengthRepository.IsUnique(cdl))
                    {
                        UpdateProperties(cdl);
                        this.Log().Info($"Saving Credential Data Length - {cdl.Display}");
                        credentialDataLengthRepository.Add(cdl, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var tst in timeScheduleTypes)
                {
                    if (timeScheduleTypeRepository.DoesExist(tst.TimeScheduleTypeUid) == false &&
                        timeScheduleTypeRepository.IsUnique(tst))
                    {
                        UpdateProperties(tst);
                        this.Log().Info($"Saving Time Schedule Type - {tst.Display}");
                        timeScheduleTypeRepository.Add(tst, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var tz in TimeZoneInfo.GetSystemTimeZones())
                {
                    var timeZone = new GalaxySMS.Business.Entities.TimeZone(tz);
                    //SaveTimeZone(new SaveParameters<GalaxySMS.Business.Entities.TimeZone>(timeZone, parameters));
                    if (timeZoneRepository.DoesTimeZoneIdExist(timeZone.Id) == false &&
                       timeZoneRepository.IsUnique(timeZone))
                    {
                        UpdateProperties(timeZone);
                        this.Log().Info($"Saving Time Zone - {tz.DisplayName}");
                        timeZoneRepository.Add(timeZone, ApplicationUserSessionHeader, parameters);
                    }
                }

                var tempEntityId = ApplicationUserSessionHeader.CurrentEntityId;
                foreach (var e in entityIds.Where(o => o != GalaxySMS.Common.Constants.EntityIds.GalaxySMS_SystemEntity_Id))
                {
                    ApplicationUserSessionHeader.CurrentEntityId = e;
                    var saveParameters = new SaveParameters<DayType>()
                    { CurrentEntityId = e };
                    saveParameters.DoNotValidateAuthorization = parameters.DoNotValidateAuthorization;
                    EnsureDefaultDayTypesExistForEntity(saveParameters);
                }
                ApplicationUserSessionHeader.CurrentEntityId = tempEntityId;

                foreach (var p in galaxyTimePeriods)
                {
                    if (galaxyTimePeriodRepository.DoesExist(p.GalaxyTimePeriodUid) == false &&
                        galaxyTimePeriodRepository.IsUnique(p))
                    {
                        UpdateProperties(p);
                        this.Log().Info($"Saving Galaxy Time Period - {p.Display}");
                        galaxyTimePeriodRepository.Add(p, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var sch in timeSchedules)
                {
                    if (timeScheduleRepository.DoesExist(sch.TimeScheduleUid) == false &&
                        timeScheduleRepository.IsUnique(sch))
                    {
                        UpdateProperties(sch);
                        this.Log().Info($"Saving Time Schedule - {sch.Display}");
                        timeScheduleRepository.Add(sch, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var led in ledBehaviors)
                {
                    if (clusterLedBehaviorModeRepository.DoesExist(led.ClusterLedBehaviorModeUid) == false &&
                        clusterLedBehaviorModeRepository.IsUnique(led))
                    {
                        UpdateProperties(led);
                        this.Log().Info($"Saving LED Behavior - {led.Display}");
                        clusterLedBehaviorModeRepository.Add(led, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var p in entityMapPermissionLevels)
                {
                    if (entityMapPermissionLevelRepository.DoesExist(p.EntityMapPermissionLevelUid) == false &&
                        entityMapPermissionLevelRepository.IsUnique(p))
                    {
                        UpdateProperties(p);
                        entityMapPermissionLevelRepository.Add(p, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var t in galaxyInputDelayTypes)
                {
                    if (galaxyInputDelayTypeRepository.DoesExist(t.GalaxyInputDelayTypeUid) == false &&
                        galaxyInputDelayTypeRepository.IsUnique(t))
                    {
                        UpdateProperties(t);
                        this.Log().Info($"Saving Galaxy Input Delay Type - {t.Display}");
                        galaxyInputDelayTypeRepository.Add(t, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var m in galaxyInputModes)
                {
                    if (galaxyInputModeRepository.DoesExist(m.GalaxyInputModeUid) == false &&
                        galaxyInputModeRepository.IsUnique(m))
                    {
                        UpdateProperties(m);
                        this.Log().Info($"Saving Galaxy Input Mode - {m.Display}");
                        galaxyInputModeRepository.Add(m, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in inputDeviceAlertEventTypes)
                {
                    if (inputDeviceAlertEventTypeRepository.DoesExist(o.InputDeviceAlertEventTypeUid) == false &&
                        inputDeviceAlertEventTypeRepository.IsUnique(o))
                    {
                        UpdateProperties(o);
                        this.Log().Info($"Saving Input Device Alert Event Type - {o.Display}");
                        inputDeviceAlertEventTypeRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                // The InputDeviceSupervisionTypes cannot be added until sometime after the InterfaceBoardSectionMode records are build
                foreach (var supervisionType in parameters.Data.InputDeviceSupervisionTypes)
                {
                    if (inputDeviceSupervisionTypeRepository.DoesExist(supervisionType.InputDeviceSupervisionTypeUid) ==
                        false &&
                        inputDeviceSupervisionTypeRepository.IsUnique(supervisionType))
                    {
                        UpdateProperties(supervisionType);
                        this.Log().Info($"Saving Input Device Supervision Type - {supervisionType.Display}");
                        inputDeviceSupervisionTypeRepository.Add(supervisionType, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var supervisionType in parameters.Data.AccessPortalContactSupervisionTypes)
                {
                    if (accessPortalContactSupervisionTypeRepository.DoesExist(supervisionType.AccessPortalContactSupervisionTypeUid) ==
                        false &&
                        accessPortalContactSupervisionTypeRepository.IsUnique(supervisionType))
                    {
                        UpdateProperties(supervisionType);
                        this.Log().Info($"Saving Access Portal Contact Supervision Type - {supervisionType.Display}");
                        accessPortalContactSupervisionTypeRepository.Add(supervisionType, ApplicationUserSessionHeader, parameters);
                    }
                }

                // The AccessPortalElevatorControlType cannot be added until sometime after the PanelModel records are build
                foreach (var elevatorControlType in parameters.Data.AccessPortalElevatorControlTypes)
                {
                    if (accessPortalElevatorControlTypeRepository.DoesExist(elevatorControlType.AccessPortalElevatorControlTypeUid) ==
                        false &&
                        accessPortalElevatorControlTypeRepository.IsUnique(elevatorControlType))
                    {
                        UpdateProperties(elevatorControlType);
                        this.Log().Info($"Saving Access Portal Elevator Control Type - {elevatorControlType.Display}");
                        accessPortalElevatorControlTypeRepository.Add(elevatorControlType, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in accessPortalCommands)
                {
                    if (accessPortalCommandRepository.DoesExist(o.AccessPortalCommandUid) == false &&
                        accessPortalCommandRepository.IsUnique(o))
                    {
                        UpdateProperties(o);
                        this.Log().Info($"Saving Access Portal Command - {o.Display}");
                        accessPortalCommandRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in inputOutputGroupCommands)
                {
                    if (inputOutputGroupCommandRepository.DoesExist(o.InputOutputGroupCommandUid) == false &&
                        inputOutputGroupCommandRepository.IsUnique(o))
                    {
                        UpdateProperties(o);
                        this.Log().Info($"Saving Input Output Group Command - {o.Display}");
                        inputOutputGroupCommandRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in inputCommands)
                {
                    if (inputCommandRepository.DoesExist(o.InputCommandUid) == false &&
                        inputCommandRepository.IsUnique(o))
                    {
                        UpdateProperties(o);
                        this.Log().Info($"Saving Input Command - {o.Display}");
                        inputCommandRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in outputCommands)
                {
                    if (outputCommandRepository.DoesExist(o.OutputCommandUid) == false &&
                        outputCommandRepository.IsUnique(o))
                    {
                        UpdateProperties(o);
                        this.Log().Info($"Saving Output Command - {o.Display}");
                        outputCommandRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }


                foreach (var m in parameters.Data.GalaxyOutputModes)
                {
                    if (galaxyOutputModeRepository.DoesExist(m.GalaxyOutputModeUid) == false &&
                        galaxyOutputModeRepository.IsUnique(m))
                    {
                        UpdateProperties(m);
                        this.Log().Info($"Saving Galaxy Output Mode - {m.Display}");
                        galaxyOutputModeRepository.Add(m, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var m in parameters.Data.GalaxyOutputInputSourceRelationships)
                {
                    if (galaxyOutputInputSourceRelationshipRepository.DoesExist(m.GalaxyOutputInputSourceRelationshipUid) == false &&
                        galaxyOutputInputSourceRelationshipRepository.IsUnique(m))
                    {
                        UpdateProperties(m);
                        this.Log().Info($"Saving Galaxy Output Input Source Relationship - {m.Display}");
                        galaxyOutputInputSourceRelationshipRepository.Add(m, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var m in parameters.Data.GalaxyOutputInputSourceTriggerConditions)
                {
                    if (galaxyOutputInputSourceTriggerConditionRepository.DoesExist(m.GalaxyOutputInputSourceTriggerConditionUid) == false &&
                        galaxyOutputInputSourceTriggerConditionRepository.IsUnique(m))
                    {
                        UpdateProperties(m);
                        this.Log().Info($"Saving Galaxy Output Input Source Trigger Condition - {m.Display}");
                        galaxyOutputInputSourceTriggerConditionRepository.Add(m, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var m in parameters.Data.GalaxyOutputInputSourceModes)
                {
                    if (galaxyOutputInputSourceModeRepository.DoesExist(m.GalaxyOutputInputSourceModeUid) == false &&
                        galaxyOutputInputSourceModeRepository.IsUnique(m))
                    {
                        UpdateProperties(m);
                        this.Log().Info($"Saving Galaxy Output Input Source Mode - {m.Display}");
                        galaxyOutputInputSourceModeRepository.Add(m, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in accessPortalAreaTypes)
                {
                    if (accessPortalAreaTypeRepository.DoesExist(o.AccessPortalAreaTypeUid) == false &&
                        accessPortalAreaTypeRepository.IsUnique(o))
                    {
                        UpdateProperties(o);
                        this.Log().Info($"Saving Access Portal Area Type - {o.Display}");
                        accessPortalAreaTypeRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in accessPortalScheduleTypes)
                {
                    if (accessPortalScheduleTypeRepository.DoesExist(o.AccessPortalScheduleTypeUid) == false &&
                        accessPortalScheduleTypeRepository.IsUnique(o))
                    {
                        UpdateProperties(o);
                        this.Log().Info($"Saving Access Portal Schedule Type - {o.Display}");
                        accessPortalScheduleTypeRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in accessPortalAlertEventTypes)
                {
                    if (accessPortalAlertEventTypeRepository.DoesExist(o.AccessPortalAlertEventTypeUid) == false &&
                        accessPortalAlertEventTypeRepository.IsUnique(o))
                    {
                        UpdateProperties(o);
                        this.Log().Info($"Saving Access Portal Alert Event Type - {o.Display}");
                        accessPortalAlertEventTypeRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in accessPortalAuxiliaryOutputModes)
                {
                    if (accessPortalAuxiliaryOutputModeRepository.DoesExist(o.AccessPortalAuxiliaryOutputModeUid) == false &&
                        accessPortalAuxiliaryOutputModeRepository.IsUnique(o))
                    {
                        UpdateProperties(o);
                        this.Log().Info($"Saving Access Portal Auxiliary Output Mode - {o.Display}");
                        accessPortalAuxiliaryOutputModeRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in automaticForgivePassbackFrequencies)
                {
                    if (automaticForgivePassbackFrequencyRepository.DoesExist(o.AutomaticForgivePassbackFrequencyUid) == false &&
                        automaticForgivePassbackFrequencyRepository.IsUnique(o))
                    {
                        UpdateProperties(o);
                        this.Log().Info($"Saving Automatic Forgive Passback Frequency - {o.Display}");
                        automaticForgivePassbackFrequencyRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in pinRequiredModes)
                {
                    if (pinRequiredModeRepository.DoesExist(o.PinRequiredModeUid) == false &&
                        pinRequiredModeRepository.IsUnique(o))
                    {
                        UpdateProperties(o);
                        this.Log().Info($"Saving PIN Required Mode - {o.Display}");
                        pinRequiredModeRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in accessPortalLockPushButtonBehaviors)
                {
                    if (accessPortalLockPushButtonBehaviorRepository.DoesExist(o.AccessPortalLockPushButtonBehaviorUid) == false &&
                        accessPortalLockPushButtonBehaviorRepository.IsUnique(o))
                    {
                        UpdateProperties(o);
                        this.Log().Info($"Saving Access Portal Lock Push Button Behavior - {o.Display}");
                        accessPortalLockPushButtonBehaviorRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in accessPortalNoServerReplyBehaviors)
                {
                    if (accessPortalNoServerReplyBehaviorRepository.DoesExist(o.AccessPortalNoServerReplyBehaviorUid) == false &&
                        accessPortalNoServerReplyBehaviorRepository.IsUnique(o))
                    {
                        UpdateProperties(o);
                        this.Log().Info($"Saving Access Portal No Server Reply Behavior - {o.Display}");
                        accessPortalNoServerReplyBehaviorRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in accessPortalDeferToServerBehaviors)
                {
                    if (accessPortalDeferToServerBehaviorRepository.DoesExist(o.AccessPortalDeferToServerBehaviorUid) == false &&
                        accessPortalDeferToServerBehaviorRepository.IsUnique(o))
                    {
                        UpdateProperties(o);
                        this.Log().Info($"Saving Access Portal Defer To Server Behavior - {o.Display}");
                        accessPortalDeferToServerBehaviorRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in accessPortalMultiFactorModes)
                {
                    if (accessPortalMultiFactorModeRepository.DoesExist(o.AccessPortalMultiFactorModeUid) == false &&
                        accessPortalMultiFactorModeRepository.IsUnique(o))
                    {
                        UpdateProperties(o);
                        this.Log().Info($"Saving Access Portal Multi-Factor Mode - {o.Display}");
                        accessPortalMultiFactorModeRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in galaxyActivityEventTypes)
                {
                    if (galaxyActivityEventTypeRepository.DoesExist(o.GalaxyActivityEventTypeUid) == false &&
                        galaxyActivityEventTypeRepository.IsUnique(o))
                    {
                        UpdateProperties(o);
                        this.Log().Info($"Saving Galaxy Activity Event Type - {o.Display}");
                        galaxyActivityEventTypeRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in genders)
                {
                    if (genderRepository.DoesExist(o.GenderUid) == false &&
                        genderRepository.IsUnique(o))
                    {
                        UpdateProperties(o);
                        this.Log().Info($"Saving Gender - {o.Display}");
                        genderRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in personActiveStatusTypes)
                {
                    if (personActiveStatusTypeRepository.DoesExist(o.PersonActiveStatusTypeUid) == false &&
                        personActiveStatusTypeRepository.IsUnique(o))
                    {
                        UpdateProperties(o);
                        this.Log().Info($"Saving Person Active Status Type - {o.Display}");
                        personActiveStatusTypeRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in cellCarriers)
                {
                    if (cellCarrierRepository.DoesExist(o.CellCarrierUid) == false &&
                        cellCarrierRepository.IsUnique(o))
                    {
                        UpdateProperties(o);
                        this.Log().Info($"Saving Cell Carrier - {o.CarrierName}");
                        cellCarrierRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in credentialFormats)
                {
                    if (credentialFormatRepository.DoesExist(o.CredentialFormatUid) == false &&
                        credentialFormatRepository.IsUnique(o))
                    {
                        if (o.CredentialFormatUid == Guid.Empty)
                            o.CredentialFormatUid = GuidUtilities.GenerateComb();
                        UpdateProperties(o);
                        this.Log().Info($"Saving Credential Format - {o.Display}");
                        credentialFormatRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in personActivationModes)
                {
                    if (personActivationModeRepository.DoesExist(o.PersonActivationModeUid) == false &&
                        personActivationModeRepository.IsUnique(o))
                    {
                        //o.PersonActivationModeUid = GuidUtilities.GenerateComb();
                        UpdateProperties(o);
                        this.Log().Info($"Saving Person Activation Mode - {o.Display}");
                        personActivationModeRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in personExpirationModes)
                {
                    if (personExpirationModeRepository.DoesExist(o.PersonExpirationModeUid) == false &&
                        personExpirationModeRepository.IsUnique(o))
                    {
                        //o.PersonExpirationModeUid = GuidUtilities.GenerateComb();
                        UpdateProperties(o);
                        this.Log().Info($"Saving Person Expiration Mode - {o.Display}");
                        personExpirationModeRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in personCredentialRoles)
                {
                    if (personCredentialRoleRepository.DoesExist(o.PersonCredentialRoleUid) == false &&
                        personCredentialRoleRepository.IsUnique(o))
                    {
                        //                        o.PersonCredentialRoleUid = GuidUtilities.GenerateComb();
                        UpdateProperties(o);
                        this.Log().Info($"Saving Person Credential Role - {o.Display}");
                        personCredentialRoleRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in badgeTemplates)
                {
                    if (badgeTemplateRepository.DoesExist(o.BadgeTemplateUid) == false &&
                        badgeTemplateRepository.IsUnique(o))
                    {
                        if (o.BadgeTemplateUid == Guid.Empty)
                            o.BadgeTemplateUid = GuidUtilities.GenerateComb();
                        UpdateProperties(o);
                        this.Log().Info($"Saving Badge Template - {o.TemplateName}");
                        badgeTemplateRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in accessProfiles)
                {
                    if (accessProfileRepository.DoesExist(o.AccessProfileUid) == false &&
                        accessProfileRepository.IsUnique(o))
                    {
                        if (o.AccessProfileUid == Guid.Empty)
                            o.AccessProfileUid = GuidUtilities.GenerateComb();
                        UpdateProperties(o);
                        this.Log().Info($"Saving Access Profile - {o.AccessProfileName}");
                        accessProfileRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in personLcdMessageDisplayModes)
                {
                    if (personLcdMessageDisplayModeRepository.DoesExist(o.PersonLcdMessageDisplayModeUid) == false &&
                        personLcdMessageDisplayModeRepository.IsUnique(o))
                    {
                        o.PersonLcdMessageDisplayModeUid = GuidUtilities.GenerateComb();
                        UpdateProperties(o);
                        this.Log().Info($"Saving Person LCD Display Mode - {o.Display}");
                        personLcdMessageDisplayModeRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var o in mercScpTypes)
                {
                    if (mercScpTypeRepository.DoesExist(o.MercScpTypeUid) == false &&
                        mercScpTypeRepository.IsUnique(o))
                    {
                        //o.MercScpTypeUid = GuidUtilities.GenerateComb();
                        UpdateProperties(o);
                        this.Log().Info($"Saving Mercury SCP Type - {o.Display}");
                        mercScpTypeRepository.Add(o, ApplicationUserSessionHeader, parameters);
                    }
                }

                //foreach (var o in mercScpGroups)
                //{
                //    if (mercScpGroupRepository.DoesExist(o.MercScpGroupUid) == false &&
                //        mercScpGroupRepository.IsUnique(o))
                //    {
                //        //o.MercScpTypeUid = GuidUtilities.GenerateComb();
                //        UpdateProperties(o);
                //        this.Log().Info($"Saving Mercury SCP Group  - {o.Name}");
                //        mercScpGroupRepository.Add(o, ApplicationUserSessionHeader, parameters);
                //    }
                //}

                //foreach (var o in mercSioTypes)
                //{
                //    if (mercSioTypeRepository.DoesExist(o.MercSioTypeUid) == false &&
                //        mercSioTypeRepository.IsUnique(o))
                //    {
                //        o.MercSioTypeUid = GuidUtilities.GenerateComb();
                //        UpdateProperties(o);
                //        this.Log().Info($"Saving Mercury SIO Type - {o.Display}");
                //        mercSioTypeRepository.Add(o, ApplicationUserSessionHeader, parameters);
                //    }
                //}

                //var tempEntityId = ApplicationUserSessionHeader.CurrentEntityId;
                //foreach (var e in entityIds.Where(o => o != GalaxySMS.Common.Constants.EntityIds.GalaxySMS_SystemEntity_Id))
                //{
                //    ApplicationUserSessionHeader.CurrentEntityId = e;
                //    EnsureDefaultDayTypesExistForEntity(new SaveParameters<DayType> { CurrentEntityId = e });
                //}
                //ApplicationUserSessionHeader.CurrentEntityId = tempEntityId;
                return true;
            });

            #endregion
        }

        #endregion

        #region Assa Abloy DSR Operations

        public AssaDsr[] GetAllAssaDsrs(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaDsrRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public AssaDsr[] GetAllAssaDsrsForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);

                if (parameters.UniqueId != Guid.Empty)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IAssaDsrRepository>();
                var data = repository.Get(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public AssaDsr GetAssaDsr(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaDsrRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(AssaDsr), nameof(AssaDsr.AssaDsrUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(string.Format("Assa DSR with AssaDsrUid of {0} is not in database",
                            parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public AssaDsr SaveAssaDsr(SaveParameters<AssaDsr> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.Data.EntityId == Guid.Empty)
                    parameters.Data.EntityId = ApplicationUserSessionHeader.CurrentEntityId;

                parameters.CurrentEntityId = parameters.Data.EntityId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanUpdateId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaDsrRepository>();

                AssaDsr updatedEntity = null;
                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format("AssaDsr with Name of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.Name));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.AssaDsrUid == Guid.Empty)
                {
                    parameters.Data.AssaDsrUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.AssaDsrUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                foreach (var accessPoint in parameters.Data.AssaAccessPoints)
                {
                    var currentAp = (from ap in updatedEntity.AssaAccessPoints
                                     where ap.AssaAccessPointUid == accessPoint.AssaAccessPointUid
                                     select ap).FirstOrDefault();
                    if (currentAp.SiteUid != accessPoint.SiteUid)
                    {
                        var apSaveParameters = new SaveParameters<AssaAccessPoint>(parameters);
                        apSaveParameters.Data = accessPoint;
                        var savedAccessPoint = SaveAssaAccessPoint(apSaveParameters);
                        updatedEntity.AssaAccessPoints.Remove(currentAp);
                        updatedEntity.AssaAccessPoints.Add(savedAccessPoint);
                    }
                }

                return updatedEntity;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteAssaDsrByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaDsrRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(AssaDsr), nameof(AssaDsr.AssaDsrUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteAssaDsr(DeleteParameters<AssaDsr> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaDsrRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.AssaDsrUid, true, nameof(AssaDsr), nameof(AssaDsr.AssaDsrUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsAssaDsrReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaDsrRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsAssaDsrUnique(AssaDsr data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaDsrRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public AssaDsr ImportAssaAccessPointsFromDsr(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var dsr = GetAssaDsr(parameters);
                if (dsr != null)
                {
                    var dsrConnectionParameters = new DsrConnectionParameters()
                    {
                        IpAddress = dsr.ServerIpAddress,
                        Port = (uint)dsr.ServerPort,
                        UseHttps = dsr.UseHttps
                    };

                    var dsrManagementProxy = new DsrManagementProxy(dsrConnectionParameters);
                    var dsrAccessControlProxy = new DsrAccessControlProxy(dsrConnectionParameters);

                    var methodName = DsrManagementServiceMethodNames.ListAllAccessPoints;
                    IEnumerable<AccessPoint> accessPoints = new List<AccessPoint>();
                    var accessPointTypes = GetAllAssaAccessPointTypes(parameters).ToList();
                    Task.Run(async () => { accessPoints = await dsrManagementProxy.GetAllAccessPointsAsync(); }).Wait();

                    if (accessPoints != null)
                    {
                        foreach (var accessPoint in accessPoints)
                        {
                            var accessPointType = (from apt in accessPointTypes
                                                   where apt.Id == accessPoint.accessPointType.id
                                                   select apt).FirstOrDefault();
                            if (accessPointType == null)
                            {
                                var saveAccessPointTypeParameters = new SaveParameters<AssaAccessPointType>(parameters);
                                saveAccessPointTypeParameters.Data.Id = accessPoint.accessPointType.id;
                                saveAccessPointTypeParameters.Data.DisplayName = accessPoint.accessPointType.displayName;
                                accessPointType = SaveAssaAccessPointType(saveAccessPointTypeParameters);
                                accessPointTypes.Add(accessPointType);
                            }
                            var p = new GetParametersWithPhoto()
                            {
                                GetString = accessPoint.id,
                                ThrowExceptionIfNotFound = false
                            };
                            var assaAccessPoint = GetAssaAccessPointByAssaUniqueId(p) ?? new AssaAccessPoint();

                            assaAccessPoint.AccessPointName = accessPoint.GetAttribute(AccessPointAttribute.DESCRIPTION);
                            if (string.IsNullOrEmpty(assaAccessPoint.AccessPointName))
                                assaAccessPoint.AccessPointName = accessPoint.serialNumber;
                            assaAccessPoint.AssaDsrUid = dsr.AssaDsrUid;
                            assaAccessPoint.AssaAccessPointTypeUid = accessPointType.AssaAccessPointTypeUid;
                            assaAccessPoint.AssaUniqueId = accessPoint.id;
                            assaAccessPoint.SerialNumber = accessPoint.serialNumber;
                            if (assaAccessPoint.SiteUid == Guid.Empty)
                                // only change the site if the SiteUid is Empty, which means this is a new lock being imported
                                assaAccessPoint.SiteUid = parameters.CurrentSiteUid;
                            assaAccessPoint.FirmwareVersion =
                                accessPoint.GetAttribute(AccessPointAttribute.FIRMWARE_VERSION);
                            if (string.IsNullOrEmpty(assaAccessPoint.FirmwareVersion))
                                assaAccessPoint.FirmwareVersion =
                                    SharedResources.Resources.AssaAbloyAccessPoint_FirmwareVersionUnknown;

                            var saveAccessPointParameters = new SaveParameters<AssaAccessPoint>(assaAccessPoint,
                                parameters);
                            try
                            {
                                assaAccessPoint = SaveAssaAccessPoint(saveAccessPointParameters);
                            }
                            catch (Exception ex)
                            {
                                this.Log().ErrorFormat("Importing Assa Abloy Access Point error: {0}", ex.ToString());
                            }
                        }
                    }
                }
                return GetAssaDsr(parameters);
            });
        }

        #endregion

        #region Assa Access Point Operations

        public AssaAccessPoint[] GetAllAssaAccessPoints(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaAccessPointRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public AssaAccessPoint[] GetAllAssaAccessPointsForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.UniqueId != Guid.Empty)
                    parameters.CurrentEntityId = parameters.UniqueId;
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                //if (parameters.UniqueId != Guid.Empty)
                //    ValidateUserHasEntityAccess(parameters.UniqueId, true);
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaAccessPointRepository>();
                var data = repository.GetAllAssaAccessPointsForEntity(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public AssaAccessPoint[] GetAllAssaAccessPointsForSite(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfSite(parameters.UniqueId, true);
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaAccessPointRepository>();
                var data = repository.GetAllAssaAccessPointsForSite(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public AssaAccessPoint[] GetAllAssaAccessPointsFromDsr(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaAccessPointRepository>();
                var data = repository.Get(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public AssaAccessPoint GetAssaAccessPoint(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaAccessPointRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(AssaAccessPoint), nameof(AssaAccessPoint.AssaAccessPointUid));
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("AssaAccessPoint with AssaAccessPointUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        public AssaAccessPoint GetAssaAccessPointByAssaUniqueId(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaAccessPointRepository>();
                var data = repository.GetAssaAccessPointsByAssaUniqueId(ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(string.Format("AssaAccessPoint with UniqueId of {0} is not in database",
                            parameters.GetString));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        public AssaAccessPoint GetAssaAccessPointByAssaSerialNumber(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaAccessPointRepository>();
                var data = repository.GetAssaAccessPointsBySerialNumber(ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("AssaAccessPoint with SerialNumber of {0} is not in database",
                                parameters.GetString));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public AssaAccessPoint SaveAssaAccessPoint(SaveParameters<AssaAccessPoint> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //if (parameters.Data.EntityId == Guid.Empty)
                //    parameters.Data.EntityId = ApplicationUserSessionHeader.CurrentEntityId;

                //parameters.CurrentEntityId = parameters.Data.EntityId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanUpdateId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaAccessPointRepository>();

                AssaAccessPoint updatedEntity = null;
                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format(
                                "AssaAccessPoint with Name of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.AccessPointName));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.AssaAccessPointUid == Guid.Empty)
                {
                    parameters.Data.AssaAccessPointUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.AssaAccessPointUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedEntity;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteAssaAccessPointByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaAccessPointRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(AssaAccessPoint), nameof(AssaAccessPoint.AssaAccessPointUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteAssaAccessPoint(DeleteParameters<AssaAccessPoint> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaAccessPointRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.AssaDsrUid, true, nameof(AssaAccessPoint), nameof(AssaAccessPoint.AssaAccessPointUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsAssaAccessPointReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaAccessPointRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsAssaAccessPointUnique(AssaAccessPoint data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaAccessPointRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Assa Access Point Type Operations

        public AssaAccessPointType[] GetAllAssaAccessPointTypes(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaAccessPointTypeRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public AssaAccessPointType GetAssaAccessPointTypeById(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaAccessPointTypeRepository>();
                var data = repository.GetAssaAccessPointTypeById(ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(string.Format("AssaAccessPointType with Id of {0} is not in database",
                            parameters.GetString));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        public AssaAccessPointType GetAssaAccessPointType(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaAccessPointTypeRepository>();
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("AssaAccessPointType with AssaAccessPointTypeUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }
                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public AssaAccessPointType SaveAssaAccessPointType(SaveParameters<AssaAccessPointType> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanUpdateId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaAccessPointTypeRepository>();

                AssaAccessPointType updatedEntity = null;
                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex = new DuplicateIndexException(
                        string.Format("AssaAccessPointType with Id of '{0}' cannot be saved because it is a duplicate.",
                            parameters.Data.Id));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.AssaAccessPointTypeUid == Guid.Empty)
                {
                    parameters.Data.AssaAccessPointTypeUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.AssaAccessPointTypeUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedEntity;
            });
        }

        #endregion

        #region Assa Day Period Operations

        public AssaDayPeriod[] GetAllAssaDayPeriods(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaDayPeriodRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public AssaDayPeriod[] GetAllAssaDayPeriodsForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                if (parameters.UniqueId != Guid.Empty)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaDayPeriodRepository>();
                var data = repository.GetAllAssaDayPeriodsForEntity(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public AssaDayPeriod GetAssaDayPeriod(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaDayPeriodRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(AssaDayPeriod), nameof(AssaDayPeriod.AssaDayPeriodUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("AssaDayPeriod with AssaDayPeriodUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public AssaDayPeriod SaveAssaDayPeriod(SaveParameters<AssaDayPeriod> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.Data.EntityId == Guid.Empty)
                    parameters.Data.EntityId = ApplicationUserSessionHeader.CurrentEntityId;

                parameters.CurrentEntityId = parameters.Data.EntityId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaDayPeriodRepository>();

                AssaDayPeriod updatedEntity = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format("AssaDayPeriod with Name of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.Name));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                if (parameters.Data.TimePeriods.Count > 0)
                {
                    // build a new list of time periods by finding existing time periods OR inserting new ones
                    var timePeriods = parameters.Data.TimePeriods.ToList();
                    var removeTp = new List<TimePeriod>();
                    // Ensure that the TimePeriods are saved.
                    foreach (var tp in parameters.Data.TimePeriods)
                    {
                        var findTimePeriodParameters = new GetParameters<TimePeriod>(parameters, tp);
                        findTimePeriodParameters.ThrowExceptionIfNotFound = false;
                        var existingTimePeriod = FindTimePeriodByTimes(findTimePeriodParameters);
                        if (existingTimePeriod != null)
                        {
                            timePeriods.Add(existingTimePeriod);
                        }
                        else
                        {
                            // create a new TimePeriod record. If the incoming TimePeriod was existing before, but the Start or End time
                            // was changed, then the TimePeriodUid must be set to Guid.Empty so that a completely new Time Period will be created.
                            // If the TimePeriodUid is not set to Guid.Empty, then the existing TimePeriod will be changed and potentially
                            // impact other DayPeriods that use the same time period
                            var saveTimePeriodParameters = new SaveParameters<TimePeriod>(tp, parameters);
                            saveTimePeriodParameters.Data.TimePeriodUid = Guid.Empty;
                            var savedTimePeriod = SaveTimePeriod(saveTimePeriodParameters);
                            timePeriods.Add(savedTimePeriod);
                        }
                        removeTp.Add(tp);
                    }
                    foreach (var tp in removeTp)
                        timePeriods.Remove(tp);
                    // now replace the TimePeriods collection with the new one
                    parameters.Data.TimePeriods = timePeriods.DistinctBy(tp => tp.TimePeriodUid).ToCollection();
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.AssaDayPeriodUid == Guid.Empty)
                {
                    parameters.Data.AssaDayPeriodUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (string.IsNullOrEmpty(parameters.Data.AssaDsrDayPeriodId))
                    parameters.Data.AssaDsrDayPeriodId = parameters.Data.AssaDayPeriodUid.ToString();

                if (repository.DoesExist(parameters.Data.AssaDayPeriodUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                // Now maintain the AssaDayPeriodTimePeriod mapping records
                var assaDayPeriodTimePeriodRepository =
                    _DataRepositoryFactory.GetDataRepository<IAssaDayPeriodTimePeriodRepository>();

                var deleteTheseAssaDayPeriodTimePeriods = (from adptp in parameters.Data.AssaDayPeriodTimePeriods
                                                           where
                                                           !(from tp in parameters.Data.TimePeriods select tp.TimePeriodUid).ToList()
                                                               .Contains(adptp.TimePeriodUid)
                                                           select adptp).ToList();

                var addTheseAssaDayPeriodTimePeriods = (from tp in parameters.Data.TimePeriods
                                                        where
                                                        !(from adptp in parameters.Data.AssaDayPeriodTimePeriods select adptp.TimePeriodUid).ToList()
                                                            .Contains(tp.TimePeriodUid)
                                                        select tp).ToList();

                foreach (var tp in addTheseAssaDayPeriodTimePeriods)
                {
                    var assaDayPeriodTimePeriod =
                    (from adptp in parameters.Data.AssaDayPeriodTimePeriods
                     where adptp.TimePeriodUid == tp.TimePeriodUid
                     select adptp).FirstOrDefault();
                    if (assaDayPeriodTimePeriod == null)
                    {
                        assaDayPeriodTimePeriod = new AssaDayPeriodTimePeriod();
                        assaDayPeriodTimePeriod.AssaDayPeriodUid = GuidUtilities.GenerateComb();
                        assaDayPeriodTimePeriod.TimePeriodUid = tp.TimePeriodUid;
                        assaDayPeriodTimePeriod.AssaDayPeriodUid = updatedEntity.AssaDayPeriodUid;
                        assaDayPeriodTimePeriod.InsertDate = DateTimeOffset.Now;
                        assaDayPeriodTimePeriod.InsertName = LoginName;
                        assaDayPeriodTimePeriod.UpdateDate = assaDayPeriodTimePeriod.InsertDate;
                        assaDayPeriodTimePeriod.UpdateName = assaDayPeriodTimePeriod.InsertName;
                        assaDayPeriodTimePeriodRepository.Add(assaDayPeriodTimePeriod, ApplicationUserSessionHeader, parameters);
                    }
                }

                foreach (var adptp in deleteTheseAssaDayPeriodTimePeriods)
                {
                    var numberRemoved = assaDayPeriodTimePeriodRepository.Remove(adptp.AssaDayPeriodTimePeriodUid, ApplicationUserSessionHeader);
                }

                //foreach (var assaDayPeriodTimePeriod in parameters.Data.AssaDayPeriodTimePeriods)
                //{
                //    var tp = (from tps in parameters.Data.TimePeriods where tps.TimePeriodUid == assaDayPeriodTimePeriod.TimePeriodUid select tps).FirstOrDefault();
                //    var tp1 = parameters.Data.TimePeriods.Where(t => t.TimePeriodUid == assaDayPeriodTimePeriod.TimePeriodUid).FirstOrDefault();
                //}
                return repository.Get(updatedEntity.AssaDayPeriodUid, ApplicationUserSessionHeader, null);
                //return updatedEntity;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteAssaDayPeriodByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaDayPeriodRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(AssaDayPeriod), nameof(AssaDayPeriod.AssaDayPeriodUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteAssaDayPeriod(DeleteParameters<AssaDayPeriod> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaDayPeriodRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.AssaDayPeriodUid, true, nameof(AssaDayPeriod), nameof(AssaDayPeriod.AssaDayPeriodUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.TimeScheduleCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsAssaDayPeriodReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaDayPeriodRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsAssaDayPeriodUnique(AssaDayPeriod data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IAssaDayPeriodRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Assa DSR Operations

        public AssaAccessPoint AssaConfirmAccessPoint(SaveParameters<AssaAccessPoint> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var getParameters = new GetParametersWithPhoto(parameters as SaveParameters);
                getParameters.UniqueId = parameters.Data.AssaDsrUid;
                var dsr = GetAssaDsr(getParameters);
                if (dsr != null)
                {
                    var dsrConnectionParameters = new DsrConnectionParameters()
                    {
                        IpAddress = dsr.ServerIpAddress,
                        Port = (uint)dsr.ServerPort,
                        UseHttps = dsr.UseHttps
                    };

                    var _dsrManagementProxy = new DsrManagementProxy(dsrConnectionParameters);
                    var _dsrAccessControlProxy = new DsrAccessControlProxy(dsrConnectionParameters);
                    var methodName = DsrManagementServiceMethodNames.ConfirmAccessPoint;

                    Task.Run(async () =>
                    {
                        var data = await _dsrManagementProxy.ConfirmAccessPointAsync(parameters.Data.AssaUniqueId, true);
                        var ap = await _dsrManagementProxy.GetAccessPointStatusAsync(parameters.Data.AssaUniqueId);
                        parameters.Data.AccessPoint.confirmed = ap.accessPoint.confirmed;
                        //parameters.Data.AccessPoint = ap.accessPoint;
                    }).Wait();
                }
                return parameters.Data;
            });
        }

        #endregion

        #region Cluster Type Operations

        public ClusterType[] GetAllClusterTypes(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterTypeRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public ClusterType GetClusterType(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterTypeRepository>();
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(string.Format(
                            "ClusterType with ClusterTypeUid of {0} is not in database", parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public ClusterType SaveClusterType(SaveParameters<ClusterType> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (!parameters.DoNotValidateAuthorization)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterTypeRepository>();

                ClusterType updatedItem = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format(
                                "ClusterType with Display of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.Display));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.ClusterTypeUid == Guid.Empty)
                {
                    parameters.Data.ClusterTypeUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.ClusterTypeUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedItem;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteClusterTypeByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterTypeRepository>();

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteClusterType(DeleteParameters<ClusterType> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterTypeRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsClusterTypeReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterTypeRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsClusterTypeUnique(ClusterType data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterTypeRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Cluster Command Operations

        public ClusterCommand[] GetAllClusterCommands(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterCommandRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public ClusterCommand[] GetClusterCommandsByClusterType(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterCommandRepository>();
                var data = repository.GetAllClusterCommandsForClusterType(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public ClusterCommand GetClusterCommand(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterCommandRepository>();
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("ClusterCommand with ClusterCommandUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public ClusterCommand SaveClusterCommand(SaveParameters<ClusterCommand> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (!parameters.DoNotValidateAuthorization)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterCommandRepository>();

                ClusterCommand updatedItem = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format(
                                "ClusterCommand with Display of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.Display));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.ClusterCommandUid == Guid.Empty)
                {
                    parameters.Data.ClusterCommandUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.ClusterCommandUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedItem;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteClusterCommandByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterCommandRepository>();

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteClusterCommand(DeleteParameters<ClusterCommand> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterCommandRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsClusterCommandReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterCommandRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsClusterCommandUnique(ClusterCommand data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterCommandRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Cluster Operations

        //        public Cluster[] GetAllClusters(GetParametersWithPhoto parameters)
        public ArrayResponse<Cluster> GetAllClusters(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();
                //var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                //return Helpers.ToArrayResponse<Cluster>(data.ToArray(), 0, 0, 0);
                var data = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<Cluster>)data;

            });
        }

        public ArrayResponse<ClusterListItemCommands> GetAllClustersList(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();
                //                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);
                //                var ri = new List<ListItemBase>();
                //foreach (var o in data)
                //{
                //    ri.Add(o.ToListItemBase());
                //}
                //return ri.ToArray();
                var data = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);
                var ri = new List<ClusterListItemCommands>();
                var totalItemCount = 0;
                foreach (var o in data.Items)
                {
                    if (totalItemCount == 0)
                        totalItemCount = o.TotalRowCount;
                    ri.Add(o.ToClusterListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, parameters.PageNumber, parameters.PageSize, totalItemCount);
            });
        }

        //        public Cluster[] GetAllClustersForEntity(GetParametersWithPhoto parameters)
        //{
        //    return ExecuteFaultHandledOperation(() =>
        //    {
        //        ValidateAuthorizationAndSetupOperation(parameters,
        //            PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
        //        var repository = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();

        //        if (parameters.UniqueId != Guid.Empty)
        //            ValidateUserHasEntityAccess(parameters.UniqueId, true);

        //        var data = repository.GetAllClustersForEntity(ApplicationUserSessionHeader, parameters);

        //        return data.ToArray();
        //    });
        //}
        public ArrayResponse<Cluster> GetAllClustersForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();

                if (parameters.UniqueId != Guid.Empty)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var data = repository.GetAllClustersForEntityPaged(ApplicationUserSessionHeader, parameters);
                return (ArrayResponse<Cluster>)data;
            });
        }

        public ArrayResponse<ClusterListItemCommands> GetAllClustersForEntityList(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);

                if (parameters.UniqueId != Guid.Empty)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();
                var data = repository.GetAllClustersForEntityPaged(ApplicationUserSessionHeader, parameters);
                var ri = new List<ClusterListItemCommands>();
                var totalItemCount = 0;
                foreach (var o in data.Items)
                {
                    if (totalItemCount == 0)
                        totalItemCount = o.TotalRowCount;
                    ri.Add(o.ToClusterListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, parameters.PageNumber, parameters.PageSize, totalItemCount);
            });
        }

        public ArrayResponse<ClusterGalaxyPanelMinimal> GetClustersWithGalaxyPanelInfo(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);

                if (parameters.UniqueId != Guid.Empty)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var clusterUids = parameters.GetString.ToIEnumerableGuid(',');
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelRepository>();
                var ri = new List<ClusterGalaxyPanelMinimal>();
                var totalItemCount = clusterUids.Count();
                foreach (var uid in clusterUids)
                {
                    var item = new ClusterGalaxyPanelMinimal()
                    {
                        ClusterUid = uid
                    };
                    parameters.UniqueId = uid;
                    var data = repository.GetAllGalaxyPanelsForCluster(ApplicationUserSessionHeader, parameters);
                    foreach (var o in data.Items)
                    {
                        item.GalaxyPanels.Add(new GalaxyPanelMinimal()
                        {
                            GalaxyPanelUid = o.GalaxyPanelUid,
                            PanelName = o.PanelName,
                            PanelNumber = o.PanelNumber,
                            Location = o.Location,
                            DisabledCommandIds = o.DisabledCommandIds,
                            ActiveCpuCount = o.ActiveCpuCount,
                            AccessPortalCount = o.AccessPortalCount,
                            ElevatorOutputCount = o.ElevatorOutputCount,
                            InputDeviceCount = o.InputDeviceCount,
                            InterfaceBoardCount = o.InterfaceBoardCount,
                            OutputDeviceCount = o.OutputDeviceCount
                        });
                    }
                    ri.Add(item);
                }

                return ArrayResponseHelpers.ToArrayResponse(ri, parameters.PageNumber, parameters.PageSize, totalItemCount);
            });
        }

        public ArrayResponse<Cluster> GetAllClustersForSite(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfSite(parameters.UniqueId, true);
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();
                var data = repository.GetAllClustersForSitePaged(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<Cluster>)data;
            });
        }


        public ArrayResponse<ClusterListItemCommands> GetAllClustersForSiteList(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();
                var data = repository.GetAllClustersForSitePaged(ApplicationUserSessionHeader, parameters);
                var ri = new List<ClusterListItemCommands>();
                var totalItemCount = 0;
                foreach (var o in data.Items)
                {
                    if (totalItemCount == 0)
                        totalItemCount = o.TotalRowCount;
                    ri.Add(o.ToClusterListItemCommands());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, parameters.PageNumber, parameters.PageSize, totalItemCount);
            });
        }

        public Cluster GetCluster(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(Cluster), nameof(Cluster.ClusterUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(string.Format("Cluster with ClusterUid of {0} is not in database",
                            parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                // Verify that the user has permissions to the entity that the cluster is associated with
                ValidateEntityAuthorizationAndSetupOperation(data.EntityId, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);

                return data;
            });
        }
        public Cluster GetClusterByHardwareAddress(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();
                var data = repository.GetByHardwareAddress(ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException($"Cluster with ClusterGroupId:{parameters.ClusterGroupId}, ClusterNumber:{parameters.ClusterNumber} is not in database");
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                // Verify that the user has permissions to the entity that the cluster is associated with
                ValidateEntityAuthorizationAndSetupOperation(data.EntityId, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);

                return data;
            });
        }

        public ValidationProblemDetails ValidateCluster(SaveParameters<Cluster> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var response = new ValidationProblemDetails();
                var errorsArray = new List<string>();
                var exists = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();

                if (parameters.Data.ClusterUid != Guid.Empty)
                {
                    var existingItem = repository.Get(parameters.Data.ClusterUid, ApplicationUserSessionHeader,
                        new GetParametersWithPhoto());
                    if (existingItem != null)
                    {
                        exists = true;
                        // Verify that the SiteUid is not being changed
                        if (parameters.Data.SiteUid == Guid.Empty)
                            parameters.Data.SiteUid = existingItem.SiteUid;
                        if (parameters.Data.SiteUid != existingItem.SiteUid)
                        {
                            errorsArray.Add($"The {nameof(Cluster.SiteUid)} cannot be changed.");
                        }

                        // Verify that the EntityId is not being changed
                        if (parameters.Data.EntityId == Guid.Empty)
                            parameters.Data.EntityId = existingItem.EntityId;
                        if (parameters.Data.EntityId != existingItem.EntityId)
                            errorsArray.Add($"The {nameof(Cluster.EntityId)} cannot be changed.");
                    }
                }

                if (!exists)
                {
                    if (parameters.Data.SiteUid == Guid.Empty)
                        parameters.Data.SiteUid = parameters.CurrentSiteUid;
                    if (parameters.Data.SiteUid == Guid.Empty)
                        parameters.Data.SiteUid = ApplicationUserSessionHeader.CurrentSiteId;

                    if (parameters.Data.EntityId == Guid.Empty && parameters.Data.SiteUid == Guid.Empty)
                    {
                        errorsArray.Add($"The {nameof(Cluster.EntityId)} and {nameof(Cluster.SiteUid)} properties are both missing. One of these properties are required.");
                    }
                }

                //if (parameters.Data.SiteUid == Guid.Empty)
                //{
                //    var siteRepo = _DataRepositoryFactory.GetDataRepository<ISiteRepository>();
                //    var sites = siteRepo.GetAllSitesForEntity(ApplicationUserSessionHeader,
                //        new GetParametersWithPhoto()
                //        {
                //            CurrentEntityId = parameters.Data.EntityId
                //        });
                //    if (sites.Count() != 1)
                //        errorsArray.Add($"The {nameof(Cluster.SiteUid)} is missing.");
                //    var s = sites.FirstOrDefault();
                //    if (s != null)
                //        parameters.Data.SiteUid = s.SiteUid;
                //}


                var siteRepo = _DataRepositoryFactory.GetDataRepository<ISiteRepository>();
                var sites = siteRepo.GetAllSitesForEntity(ApplicationUserSessionHeader,
                    new GetParametersWithPhoto()
                    {
                        CurrentEntityId = parameters.Data.EntityId
                    });
                Site s = null;
                if (parameters.Data.SiteUid == Guid.Empty)
                    parameters.Data.SiteUid = CurrentSiteId;
                if (parameters.Data.SiteUid != Guid.Empty)
                    s = sites.FirstOrDefault(o => o.SiteUid == parameters.Data.SiteUid);
                else
                {
                    s = sites.FirstOrDefault();
                }
                if (s != null)
                    parameters.Data.SiteUid = s.SiteUid;
                else
                {
                    if (parameters.Data.SiteUid == Guid.Empty)
                        errorsArray.Add(
                            $"The property {nameof(parameters.Data.SiteUid)} is required.");
                    else
                        errorsArray.Add(
                            $"Cannot add the cluster to the specified site. Make sure a valid {nameof(parameters.Data.SiteUid)} value is specified.");
                }


                if (errorsArray.Any())
                {
                    response.Errors.Add($"{nameof(Cluster)}", errorsArray.ToArray());
                    return response;
                }

                parameters.CurrentEntityId = GetEntityIdOfSite(parameters.Data.SiteUid, true);
                if (exists)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanUpdateId);
                else
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);

                if (parameters.Data.CrisisActivateInputOutputGroupUid.HasValue &&
                    parameters.Data.CrisisActivateInputOutputGroupUid != Guid.Empty)
                {
                    var crisisIoGroupEntityId = GetEntityIdOfInputOutputGroup(parameters.Data.CrisisActivateInputOutputGroupUid.Value, true);
                    if (crisisIoGroupEntityId != parameters.Data.EntityId)
                        errorsArray.Add($"The {nameof(Cluster.CrisisActivateInputOutputGroupUid)} value {parameters.Data.CrisisActivateInputOutputGroupUid} is not permitted because it is from a different cluster. The input-output group must be on the same cluster as the cluser being saved.");
                }

                if (parameters.Data.CrisisResetInputOutputGroupUid.HasValue &&
                    parameters.Data.CrisisResetInputOutputGroupUid != parameters.Data.CrisisActivateInputOutputGroupUid &&
                    parameters.Data.CrisisResetInputOutputGroupUid != Guid.Empty)
                {
                    var crisisIoGroupEntityId = GetEntityIdOfInputOutputGroup(parameters.Data.CrisisResetInputOutputGroupUid.Value, true);
                    if (crisisIoGroupEntityId != parameters.Data.EntityId)
                        errorsArray.Add($"The {nameof(Cluster.CrisisResetInputOutputGroupUid)} value {parameters.Data.CrisisResetInputOutputGroupUid} is not permitted because it is from a different cluster. The input-output group must be on the same cluster as the cluser being saved.");
                }

                parameters.Data.EntityId = parameters.CurrentEntityId;

                var scheduleMapRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyClusterTimeScheduleMapRepository>();

                if (parameters.Data.ClusterNumber < 1)
                {
                    parameters.Data.ClusterNumber = repository.GetAvailableClusterNumber(parameters.Data.ClusterGroupId);
                }

                if (repository.IsUnique(parameters.Data) == false)
                {
                    if (repository.IsClusterNameUnique(parameters.Data) == false)
                    {
                        errorsArray.Add($"Cluster with Name of '{parameters.Data.Name}' cannot be saved because it is a duplicate.");
                    }

                    if (repository.IsClusterAddressUnique(parameters.Data) == false)
                    {
                        errorsArray.Add(
                                $"Cluster with {nameof(Cluster.ClusterGroupId)}: {parameters.Data.ClusterGroupId} and {nameof(Cluster.ClusterNumber)}: {parameters.Data.ClusterNumber} cannot be saved because it is a duplicate.");
                    }
                }

                if (errorsArray.Any())
                {
                    response.Errors.Add($"{nameof(parameters.Data.ClusterUid)}", errorsArray.ToArray());
                    errorsArray.Clear();
                }

                var timeScheduleRepository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
                var autoMapSchedules = timeScheduleRepository.GetAutoMapTimeSchedulesForEntity(parameters.Data.EntityId);
                var schedules = timeScheduleRepository.GetAllTimeSchedulesForEntity(
                    ApplicationUserSessionHeader, new GetParametersWithPhoto()
                    {
                        UniqueId = parameters.CurrentEntityId
                    });

                if (!autoMapSchedules)
                {
                    if (parameters.Data.TimeSchedules != null && parameters.Data.TimeSchedules.Any())
                    {
                        var x = 0;

                        foreach (var ts in parameters.Data.TimeSchedules)
                        {
                            if (ts.Selected)
                            {
                                if (schedules.Items.FirstOrDefault(o => o.TimeScheduleUid == ts.TimeScheduleUid) == null)
                                {
                                    errorsArray.Add(
                                        $"The {nameof(parameters.Data.TimeSchedules)} value {ts.TimeScheduleUid} is not permitted because it does not exist for entity {parameters.CurrentEntityId}.");
                                    response.Errors.Add($"{nameof(parameters.Data.TimeSchedules)}[{x}]", errorsArray.ToArray());
                                    errorsArray.Clear();
                                }
                            }

                            x++;
                        }
                    }
                }

                if (response.Errors.Any())
                {
                    return response;
                }

                return null;

            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public Cluster SaveCluster(SaveParameters<Cluster> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                Cluster existingItem = null;
                var clusterHardwareAddressChanged = false;
                var timeZoneChanged = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();
                var exists = false;
                if (parameters.Data.ClusterUid != Guid.Empty)
                {
                    existingItem = repository.Get(parameters.Data.ClusterUid, ApplicationUserSessionHeader,
                        new GetParametersWithPhoto());
                    if (existingItem != null)
                    {
                        exists = true;
                        // Verify that the SiteUid is not being changed
                        if (parameters.Data.SiteUid == Guid.Empty)
                            parameters.Data.SiteUid = existingItem.SiteUid;
                        if (parameters.Data.SiteUid != existingItem.SiteUid)
                            throw new DataValidationException($"The {nameof(Cluster.SiteUid)} cannot be changed.");

                        // Verify that the EntityId is not being changed
                        if (parameters.Data.EntityId == Guid.Empty)
                            parameters.Data.EntityId = existingItem.EntityId;
                        if (parameters.Data.EntityId != existingItem.EntityId)
                            throw new DataValidationException($"The {nameof(Cluster.EntityId)} cannot be changed.");

                        if (existingItem.ClusterGroupId != parameters.Data.ClusterGroupId || existingItem.ClusterNumber != parameters.Data.ClusterNumber)
                            clusterHardwareAddressChanged = true;
                        if (existingItem.TimeZoneId != parameters.Data.TimeZoneId)
                            timeZoneChanged = true;
                    }
                }

                if (!exists)
                {
                    if (parameters.Data.SiteUid == Guid.Empty)
                        parameters.Data.SiteUid = parameters.CurrentSiteUid;
                    if (parameters.Data.SiteUid == Guid.Empty)
                        parameters.Data.SiteUid = ApplicationUserSessionHeader.CurrentSiteId;

                    if (parameters.Data.EntityId == Guid.Empty && parameters.Data.SiteUid == Guid.Empty)
                    {
                        throw new DataValidationException(
                            $"The {nameof(Cluster.EntityId)} and {nameof(Cluster.SiteUid)} properties are both missing. One of these properties are required.");
                    }
                }

                //// Start by validating the SiteUid value. 
                //// If empty, the user session CurrentSiteId will be used. If that has not been set, then an exception is thrown.
                //if (parameters.Data.SiteUid == Guid.Empty)
                //{
                //    parameters.Data.SiteUid = ApplicationUserSessionHeader.CurrentSiteId;
                //}

                if (parameters.Data.SiteUid == Guid.Empty)
                {
                    var siteRepo = _DataRepositoryFactory.GetDataRepository<ISiteRepository>();
                    var sites = siteRepo.GetAllSitesForEntity(ApplicationUserSessionHeader,
                        new GetParametersWithPhoto()
                        {
                            CurrentEntityId = parameters.Data.EntityId
                        });
                    if (sites.Count() != 1)
                        throw new DataValidationException($"The {nameof(Cluster.SiteUid)} is missing.");
                    var s = sites.FirstOrDefault();
                    if (s != null)
                        parameters.Data.SiteUid = s.SiteUid;
                }

                parameters.CurrentEntityId = GetEntityIdOfSite(parameters.Data.SiteUid, true);
                if (exists)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanUpdateId);
                else
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);

                if (parameters.Data.CrisisActivateInputOutputGroupUid.HasValue &&
                    parameters.Data.CrisisActivateInputOutputGroupUid != Guid.Empty)
                {
                    var crisisIoGroupEntityId =
                        GetEntityIdOfInputOutputGroup(parameters.Data.CrisisActivateInputOutputGroupUid.Value, true);
                    if (crisisIoGroupEntityId != parameters.Data.EntityId)
                        throw new DataValidationException($"The {nameof(Cluster.CrisisActivateInputOutputGroupUid)} value {parameters.Data.CrisisActivateInputOutputGroupUid} is not permitted because it is from a different cluster. The input-output group must be on the same cluster as the cluser being saved.");
                }

                if (parameters.Data.CrisisResetInputOutputGroupUid.HasValue &&
                    parameters.Data.CrisisResetInputOutputGroupUid != parameters.Data.CrisisActivateInputOutputGroupUid &&
                    parameters.Data.CrisisResetInputOutputGroupUid != Guid.Empty)
                {
                    var crisisIoGroupEntityId =
                        GetEntityIdOfInputOutputGroup(parameters.Data.CrisisResetInputOutputGroupUid.Value, true);
                    if (crisisIoGroupEntityId != parameters.Data.EntityId)
                        throw new DataValidationException($"The {nameof(Cluster.CrisisResetInputOutputGroupUid)} value {parameters.Data.CrisisResetInputOutputGroupUid} is not permitted because it is from a different cluster. The input-output group must be on the same cluster as the cluser being saved.");
                }

                // Possibly validate the TemplateAccessPortalUid here

                //parameters.Data.SiteUid = parameters.cURR;
                parameters.Data.EntityId = parameters.CurrentEntityId;

                var scheduleMapRepository =
                    _DataRepositoryFactory.GetDataRepository<IGalaxyClusterTimeScheduleMapRepository>();

                if (parameters.Data.ClusterNumber < 1)
                {
                    parameters.Data.ClusterNumber = repository.GetAvailableClusterNumber(parameters.Data.ClusterGroupId);
                }

                if (repository.IsUnique(parameters.Data) == false)
                {
                    if (repository.IsClusterNameUnique(parameters.Data) == false)
                    {
                        var ex = new DuplicateIndexException($"Cluster with Name of '{parameters.Data.Name}' cannot be saved because it is a duplicate.");
                        var detail = new ExceptionDetailEx(ex);
                        throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                    }

                    if (repository.IsClusterAddressUnique(parameters.Data) == false)
                    {
                        var ex =
                            new DuplicateIndexException(
                                $"Cluster with {nameof(Cluster.ClusterGroupId)}: {parameters.Data.ClusterGroupId} and {nameof(Cluster.ClusterNumber)}: {parameters.Data.ClusterNumber} cannot be saved because it is a duplicate.");
                        var detail = new ExceptionDetailEx(ex);
                        throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                    }
                }

                Cluster updatedItem = null;

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.ClusterUid == Guid.Empty)
                {
                    parameters.Data.ClusterUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }


                var timeScheduleRepository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
                var autoMapSchedules = timeScheduleRepository.GetAutoMapTimeSchedulesForEntity(parameters.Data.EntityId);
                var schedules = timeScheduleRepository.GetAllTimeSchedulesForEntity(
                    ApplicationUserSessionHeader, new GetParametersWithPhoto()
                    {
                        UniqueId = parameters.CurrentEntityId
                    });

                if (!autoMapSchedules)
                {
                    if (parameters.Data.TimeSchedules != null && parameters.Data.TimeSchedules.Any())
                    {
                        foreach (var ts in parameters.Data.TimeSchedules.Where(o => o.Selected))
                        {
                            if (schedules.Items.FirstOrDefault(o => o.TimeScheduleUid == ts.TimeScheduleUid) == null)
                                throw new DataValidationException($"The {nameof(ts.TimeScheduleUid)} value {ts.TimeScheduleUid} is not permitted because it does not exist for entity {parameters.CurrentEntityId}.");
                        }
                    }
                }

                if (repository.DoesExist(parameters.Data.ClusterUid) == false)
                {
                    // New cluster
                    if (parameters.Data.RoleIds == null || !parameters.Data.RoleIds.Any())
                    {
                        var roleRepository = _DataRepositoryFactory.GetDataRepository<IGcsRoleRepository>();
                        var roleParams = new GetParametersWithPhoto() { IncludeMemberCollections = true, RefreshCache = true };
                        roleParams.ExcludeMemberCollectionSettings.Add(nameof(gcsRole.RolePermissions));
                        roleParams.ExcludeMemberCollectionSettings.Add(nameof(gcsRole.DeviceFilters.Regions));
                        var roles = roleRepository.GetAllRolesForEntity(parameters.CurrentEntityId, roleParams);
                        parameters.Data.RoleIds = roles.Where(o => o.DeviceFilters.IncludeAllClusters == true).Select(o => o.RoleId).ToCollection();

                        //parameters.Data.RoleIds = roleRepository.GetAllPrimaryKeyUids(parameters.CurrentEntityId).ToCollection();
                    }
                    if (parameters.Data.TimeSchedules == null || !parameters.Data.TimeSchedules.Any())
                    {
                        if (parameters.Data.TimeSchedules == null)
                            parameters.Data.TimeSchedules = new HashSet<TimeScheduleSelect>();
                        else
                        {
                            parameters.Data.TimeSchedules = parameters.Data.TimeSchedules.ToList();
                        }
                    }

                    if (autoMapSchedules)
                    {
                        // ignore any incoming schedule data  if automap is enabled
                        parameters.Data.TimeSchedules.Clear();
                        foreach (var ts in schedules.Items.Take(TimeScheduleLimits.HighestDefinableNumber)
                                     .OrderBy(o => o.InsertDate))
                        {
                            parameters.Data.TimeSchedules.Add(new TimeScheduleSelect(ts)
                            {
                                Selected = true
                            });
                        }
                    }

                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);

                    //// Add the never and always time schedule mappings
                    //var neverScheduleMap = new GalaxyClusterTimeScheduleMap();
                    //neverScheduleMap.GalaxyClusterTimeScheduleMapUid = GuidUtilities.GenerateComb();
                    //neverScheduleMap.ClusterUid = updatedItem.ClusterUid;
                    //neverScheduleMap.TimeScheduleUid = GalaxySMS.Common.Constants.TimeScheduleIds.TimeSchedule_Never;
                    //neverScheduleMap.PanelScheduleNumber =
                    //    (int)GalaxySMS.Common.Enums.TimeScheduleNumbers.TimeScheduleNever;
                    //UpdateProperties(neverScheduleMap);

                    //scheduleMapRepository.Add(neverScheduleMap, ApplicationUserSessionHeader, null, parameters);

                    //var alwaysScheduleMap = new GalaxyClusterTimeScheduleMap();
                    //alwaysScheduleMap.GalaxyClusterTimeScheduleMapUid = GuidUtilities.GenerateComb();
                    //alwaysScheduleMap.ClusterUid = updatedItem.ClusterUid;
                    //alwaysScheduleMap.TimeScheduleUid = GalaxySMS.Common.Constants.TimeScheduleIds.TimeSchedule_Always;
                    //alwaysScheduleMap.PanelScheduleNumber =
                    //    (int)GalaxySMS.Common.Enums.TimeScheduleNumbers.TimeScheduleAlways;
                    //UpdateProperties(alwaysScheduleMap);

                    //scheduleMapRepository.Add(alwaysScheduleMap, ApplicationUserSessionHeader, null, parameters);
                }
                else
                {
                    if (autoMapSchedules)
                        parameters.Data.TimeSchedules = new HashSet<TimeScheduleSelect>();

                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                // Now deal with the children

                //var existingItems = scheduleMapRepository.GetAllGalaxyClusterTimeScheduleMapForCluster(ApplicationUserSessionHeader, new GetParametersWithPhoto() { UniqueId = updatedItem.ClusterUid });
                //var deleteThese = existingItems.Where(i => !parameters.Data.GalaxyClusterTimeScheduleMaps.Any(i2 => i2.TimeScheduleUid == i.TimeScheduleUid));
                //foreach (var item in deleteThese)
                //{   // don't delete the never and always mappings
                //    if (item.TimeScheduleUid != GalaxySMS.Common.Constants.TimeScheduleIds.TimeSchedule_Never &&
                //    item.TimeScheduleUid != GalaxySMS.Common.Constants.TimeScheduleIds.TimeSchedule_Always)
                //        scheduleMapRepository.Remove(item.GalaxyClusterTimeScheduleMapUid, ApplicationUserSessionHeader, null);
                //}

                //foreach (var i in parameters.Data.GalaxyClusterTimeScheduleMaps)
                //{

                //}

                if (existingItem == null)
                {   // New cluster
                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.NewClusterSaved, new ClusterAddress()
                        {
                            ClusterGroupId = updatedItem.ClusterGroupId,
                            ClusterNumber = updatedItem.ClusterNumber,
                            ClusterUid = updatedItem.ClusterUid
                        }));
                }

                if (clusterHardwareAddressChanged && existingItem != null)
                {   // force existing panels that are connected from the old cluster address to disconnect and re-connect
                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.ClusterAddressChanged, new ClusterAddress()
                        {
                            ClusterGroupId = existingItem.ClusterGroupId,
                            ClusterNumber = existingItem.ClusterNumber,
                            ClusterUid = existingItem.ClusterUid
                        }));

                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.ClusterAddressChanged, new ClusterAddress()
                        {
                            ClusterGroupId = updatedItem.ClusterGroupId,
                            ClusterNumber = updatedItem.ClusterNumber,
                            ClusterUid = updatedItem.ClusterUid
                        }));
                }
                else if (parameters.Data.IsPanelDataDirty)
                {
                    // Now send to the panels
                    var sendParameters = new SendDataParameters<Cluster_CommonPanelLoadData>()
                    { PopulateDataFromDatabase = true, ApplicationUserSessionHeader = this.ApplicationUserSessionHeader };
                    sendParameters.Data.ClusterUid = updatedItem.ClusterUid;
                    sendParameters.SendToAddress.ClusterUid = updatedItem.ClusterUid;
                    //sendParameters.SendToAddress.PanelNumber = (int)CpuHardwareAddress.SystemPanelAddress.AllPanels;
                    //sendParameters.SendToAddress.CpuId = (short)CpuHardwareAddress.CpuNumber.Both;
                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendClusterSettingsToHardware, sendParameters));
                }

                if (timeZoneChanged)
                {
                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.ClusterTimeZoneChanged, new ClusterTimeZone()
                        {
                            ClusterGroupId = updatedItem.ClusterGroupId,
                            ClusterNumber = updatedItem.ClusterNumber,
                            ClusterUid = updatedItem.ClusterUid,
                            TimeZoneId = updatedItem.TimeZoneId
                        }));
                }

                return updatedItem;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteClusterByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(Cluster), nameof(Cluster.ClusterUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);

                var existingItem = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, new GetParametersWithPhoto());
                if (existingItem != null)
                {
                    // Verify that the user has permissions to the entity that the cluster is associated with
                    ValidateEntityAuthorizationAndSetupOperation(existingItem.EntityId, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                    var x = repository.Remove(existingItem.ClusterUid, ApplicationUserSessionHeader);

                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.ClusterAddressChanged, new ClusterAddress()
                        {
                            ClusterGroupId = existingItem.ClusterGroupId,
                            ClusterNumber = existingItem.ClusterNumber,
                            ClusterUid = existingItem.ClusterUid
                        }));
                    return x;
                }
                var ex = new NotFoundException(string.Format("Cluster with ClusterUid of {0} is not in database", parameters.UniqueId));
                var detail = new ExceptionDetailEx(ex);
                throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteCluster(DeleteParameters<Cluster> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.ClusterUid, true, nameof(Cluster), nameof(Cluster.ClusterUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                var existingItem = repository.Get(parameters.Data.ClusterUid, ApplicationUserSessionHeader, new GetParametersWithPhoto());

                var x = repository.Remove(parameters.Data, ApplicationUserSessionHeader);

                if (existingItem != null)
                {
                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.ClusterAddressChanged, new ClusterAddress()
                        {
                            ClusterGroupId = existingItem.ClusterGroupId,
                            ClusterNumber = existingItem.ClusterNumber,
                            ClusterUid = existingItem.ClusterUid
                        }));
                }

                return x;
            });
        }

        public bool IsClusterReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsClusterUnique(Cluster data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        public ClusterEditingData GetClusterEditingData(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var clusterEditingData = new ClusterEditingData();
                ValidateAuthorizationAndSetupOperation(parameters,
                    PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);

                if (!parameters.IsExcluded(nameof(ClusterEditingData.ClusterTypes)))
                {
                    var clusterTypeRepository = _DataRepositoryFactory.GetDataRepository<IClusterTypeRepository>();
                    clusterEditingData.ClusterTypes =
                        clusterTypeRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(ClusterEditingData.CredentialDataLengths)))
                {
                    var credentialDataLengthRepository =
                        _DataRepositoryFactory.GetDataRepository<ICredentialDataLengthRepository>();
                    clusterEditingData.CredentialDataLengths =
                        credentialDataLengthRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(ClusterEditingData.TimeScheduleTypes)))
                {
                    var timeScheduleTypeRepository =
                        _DataRepositoryFactory.GetDataRepository<ITimeScheduleTypeRepository>();
                    clusterEditingData.TimeScheduleTypes =
                        timeScheduleTypeRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(ClusterEditingData.LedBehaviorModes)))
                {
                    var clusterLedBehaviorModeRepository =
                        _DataRepositoryFactory.GetDataRepository<IClusterLedBehaviorModeRepository>();
                    clusterEditingData.LedBehaviorModes =
                        clusterLedBehaviorModeRepository.GetAll(ApplicationUserSessionHeader, parameters)
                            .ToCollection();
                }

                if (!parameters.IsExcluded(nameof(ClusterEditingData.AccessPortalTypes)))
                {
                    var accessPortalTypeRepository =
                        _DataRepositoryFactory.GetDataRepository<IAccessPortalTypeRepository>();
                    clusterEditingData.AccessPortalTypes =
                        accessPortalTypeRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(ClusterEditingData.TimeZones)))
                {
                    var timeZoneRepository = _DataRepositoryFactory.GetDataRepository<ITimeZoneRepository>();
                    var timeZones = timeZoneRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                    foreach (var tz in timeZones)
                    {
                        clusterEditingData.TimeZones.Add(new TimeZoneListItem()
                        {
                            Id = tz.Id,
                            DisplayName = tz.DisplayName
                        });
                    }
                }

                if (!parameters.IsExcluded(nameof(ClusterEditingData.AccessRuleOverrideTimeoutValues)))
                {
                    clusterEditingData.AccessRuleOverrideTimeoutValues.Add(new StringIntPair(
                        string.Format(GalaxySMS.Resources.Resources.ClusterAccessRuleOverride_Disabled),
                        (0)));

                    for (short seconds = 0; seconds < 10; seconds++)
                    {
                        for (short tenths = 0; tenths < 10; tenths++)
                        {
                            if (seconds + tenths != 0)
                            {
                                clusterEditingData.AccessRuleOverrideTimeoutValues.Add(new StringIntPair(
                                    string.Format(GalaxySMS.Resources.Resources.ClusterAccessRuleOverrideTimeout_Format,
                                        seconds, tenths),
                                    ((seconds * 100) + tenths * 10)));
                            }
                        }
                    }
                }

                if (!parameters.IsExcluded(nameof(ClusterEditingData.UnlimitedCredentialTimeoutValues)))
                {
                    clusterEditingData.UnlimitedCredentialTimeoutValues.Add(new StringIntPair(
                        string.Format(GalaxySMS.Resources.Resources.UnlimitedCredential_Disabled),
                        (0)));

                    for (short seconds = 0; seconds < 10; seconds++)
                    {
                        for (short tenths = 0; tenths < 10; tenths++)
                        {
                            if (seconds + tenths != 0)
                            {
                                clusterEditingData.UnlimitedCredentialTimeoutValues.Add(new StringIntPair(
                                    string.Format(GalaxySMS.Resources.Resources.UnlimitedCredentialTimeout_Format,
                                        seconds, tenths),
                                    ((seconds * 100) + tenths * 10)));
                            }
                        }
                    }
                }

                if (!parameters.IsExcluded(nameof(ClusterEditingData.Entities)))
                {
                    var entityRepository = _DataRepositoryFactory.GetDataRepository<IGcsEntityRepository>();
                    var regionRepository = _DataRepositoryFactory.GetDataRepository<IRegionRepository>();
                    var siteRepository = _DataRepositoryFactory.GetDataRepository<ISiteRepository>();
                    var permittedEntities = entityRepository.GetEntitiesForUser(ApplicationUserSessionHeader.UserId,
                        ApplicationUserSessionHeader, parameters);
                    foreach (var e in permittedEntities.Where(o =>
                                 o.EntityId != GalaxySMS.Common.Constants.EntityIds.GalaxySMS_SystemEntity_Id))
                    {
                        var newE = new gcsEntityListItem()
                        {
                            EntityId = e.EntityId,
                            EntityName = e.EntityName,
                            Image = e.gcsBinaryResource?.BinaryResource
                        };

                        var sites = siteRepository.GetAllSitesForEntity(ApplicationUserSessionHeader,
                            new GetParametersWithPhoto(parameters)
                            {
                                UniqueId = e.EntityId,
                                IncludeMemberCollections = false
                            });

                        var regions = regionRepository.GetAllRegionSelectionItemsForEntity(ApplicationUserSessionHeader,
                            new GetParametersWithPhoto(parameters)
                            {
                                CurrentEntityId = e.EntityId,
                                IncludeMemberCollections = false
                            });

                        foreach (var r in regions)
                        {
                            var newR = new RegionListItem()
                            {
                                RegionUid = r.RegionUid,
                                RegionName = r.RegionName,
                                Image = r.Photo
                            };

                            var regionSites = sites.Where(o => o.RegionUid == r.RegionUid).ToList();
                            foreach (var s in regionSites)
                            {
                                var newS = new SiteListItem()
                                {
                                    SiteUid = s.SiteUid,
                                    SiteName = s.SiteName,
                                    Image = s.gcsBinaryResource?.BinaryResource
                                };
                                newR.Sites.Add(newS);
                            }

                            newE.Regions.Add(newR);
                        }

                        clusterEditingData.Entities.Add(newE);
                    }
                }

                if (!parameters.IsExcluded(nameof(ClusterEditingData.ClusterCommands)) &&
                    !parameters.IsExcluded(nameof(ClusterEditingData.ClusterFlashingCommands)))
                {
                    var clusterCommandRepository =
                        _DataRepositoryFactory.GetDataRepository<IClusterCommandRepository>();
                    if (!parameters.IsExcluded(nameof(ClusterEditingData.ClusterCommands)))
                        clusterEditingData.ClusterCommands = clusterCommandRepository.GetAllClusterCommandsForClusterType(ApplicationUserSessionHeader,
                                new GetParametersWithPhoto() { UniqueId = parameters.UniqueId }).ToCollection();

                    if (!parameters.IsExcluded(nameof(ClusterEditingData.ClusterFlashingCommands)))
                        clusterEditingData.ClusterFlashingCommands = clusterCommandRepository.GetAllClusterFlashingCommandsForClusterType(ApplicationUserSessionHeader,
                                new GetParametersWithPhoto() { UniqueId = parameters.UniqueId }).ToCollection();
                }

                return clusterEditingData;
            });
        }

        // This does not support loading data to panels on more than one cluster
        public LoadDataCommandResponse<ClusterDataLoadParameters> SendClusterDataToPanels(CommandParameters<ClusterDataLoadParameters> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);

                if (parameters.OperationUid == Guid.Empty)
                    parameters.OperationUid = GuidUtilities.GenerateComb();
                parameters.RequestDateTime = DateTimeOffset.UtcNow;

                var response = new LoadDataCommandResponse<ClusterDataLoadParameters>(parameters) { ApproximateDuration = 60, TimeoutSeconds = Globals.Instance.LoadDataTimeoutSeconds };

                // Now send to the panels
                var sendParameters = new SendDataParameters<object>()
                { PopulateDataFromDatabase = true, ApplicationUserSessionHeader = this.ApplicationUserSessionHeader, OperationUid = parameters.OperationUid };
                sendParameters.SendToAddress.ClusterUid = parameters.Data.ClusterUid;
                sendParameters.SendToAddress.PanelUid = parameters.Data.GalaxyPanelUid;
                sendParameters.SendToAddress.CpuUid = parameters.Data.CpuUid;

                if (parameters.Data.CpuAddresses.Count == 1)
                {
                    sendParameters.SendToAddress.ClusterGroupId = parameters.Data.CpuAddresses[0].ClusterGroupId;
                    sendParameters.SendToAddress.ClusterNumber = parameters.Data.CpuAddresses[0].ClusterNumber;
                    sendParameters.SendToAddress.PanelNumber = parameters.Data.CpuAddresses[0].PanelNumber;
                    sendParameters.SendToAddress.CpuId = parameters.Data.CpuAddresses[0].CpuId;
                }

                var clusterUid = sendParameters.SendToAddress.ClusterUid;
                var panelUid = sendParameters.SendToAddress.PanelUid;
                var cpuUid = sendParameters.SendToAddress.CpuUid;

                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuRepository>();
                var cpuInfo = new List<GalaxyCpuDatabaseInformation>();

                if (sendParameters.SendToAddress.ClusterUid != Guid.Empty)
                {
                    var getHardwareAddressParameters = new GetHardwareAddressParameters() { ClusterUid = sendParameters.SendToAddress.ClusterUid };
                    cpuInfo.AddRange(repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader, getHardwareAddressParameters));
                }

                if (sendParameters.SendToAddress.PanelUid != Guid.Empty)
                {
                    var getHardwareAddressParameters = new GetHardwareAddressParameters() { GalaxyPanelUid = sendParameters.SendToAddress.PanelUid };
                    var cpusForPanels = repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader,
                        getHardwareAddressParameters);
                    foreach (var c in cpusForPanels)
                    {
                        var existingCpu = cpuInfo.FirstOrDefault(o => o.CpuUid == c.CpuUid);
                        if (existingCpu == null)
                            cpuInfo.Add(c);
                    }
                }

                if (sendParameters.SendToAddress.CpuUid != Guid.Empty)
                {
                    var getHardwareAddressParameters = new GetHardwareAddressParameters() { CpuUid = sendParameters.SendToAddress.CpuUid };
                    var cpusForCpu = repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader, getHardwareAddressParameters);
                    foreach (var c in cpusForCpu)
                    {
                        var existingCpu = cpuInfo.FirstOrDefault(o => o.CpuUid == c.CpuUid);
                        if (existingCpu == null)
                            cpuInfo.Add(c);
                    }
                }

                var galaxyPanelUid = Guid.Empty;
                var cpusOnlineCount = 0;

                // Now spin through the cpuInfo collection and send the command to each one
                foreach (var c in cpuInfo)
                {
                    if (clusterUid == Guid.Empty)
                    {
                        clusterUid = c.ClusterUid;
                        //sendParameters.SendToAddress.ClusterGroupId = c.ClusterGroupId;
                        //sendParameters.SendToAddress.ClusterNumber = c.ClusterNumber;
                    }
                    //if (sendParameters.SendToAddress.PanelUid == Guid.Empty)
                    //{
                    //    sendParameters.SendToAddress.PanelUid = c.GalaxyPanelUid;
                    //    //sendParameters.SendToAddress.PanelNumber = c.PanelNumber;
                    //}
                    //if (sendParameters.SendToAddress.CpuUid == Guid.Empty)
                    //{
                    //    sendParameters.SendToAddress.CpuUid = c.CpuUid;
                    //    //sendParameters.SendToAddress.CpuId = c.CpuNumber;
                    //}

                    if (c.CpuIsActive)
                    {
                        var panelSentTo =
                            response.PanelsSentTo.FirstOrDefault(o => o.GalaxyPanelUid == c.GalaxyPanelUid);
                        if (panelSentTo == null)
                        {
                            panelSentTo = new PanelCommandResponseInfo()
                            {
                                GalaxyPanelUid = c.GalaxyPanelUid
                            };
                            response.PanelsSentTo.Add(panelSentTo);
                        }

                        panelSentTo.Cpus.Add(new CpuCommandResponseInfo()
                        {
                            CpuUid = c.CpuUid,
                            IsCpuOnline = c.IsConnected
                        });
                        if (c.IsConnected)
                        {
                            panelSentTo.IsPanelOnline = c.IsConnected;
                            if (galaxyPanelUid == Guid.Empty)
                                galaxyPanelUid = c.GalaxyPanelUid;
                            cpusOnlineCount++;
                        }
                    }
                }

                LoadDataCounts counts = null;
                if (galaxyPanelUid != Guid.Empty)
                {
                    var galaxyPanelRepo = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelRepository>();
                    counts = galaxyPanelRepo.GetLoadDataCounts(galaxyPanelUid, parameters.Data.LoadDataSettings);
                }


                if (parameters.Data.LoadDataSettings.ClusterSharedSettings)
                {
                    response.NotificationCounts.ClusterSharedSettingsCount = cpusOnlineCount * 7;

                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendClusterSettingsToHardware, new SendDataParameters<Cluster_CommonPanelLoadData>(sendParameters)
                        {
                            Data = new Cluster_CommonPanelLoadData()
                            {
                                ClusterUid = clusterUid//parameters.Data.ClusterUid,
                            },
                        }));
                }

                if (parameters.Data.LoadDataSettings.PanelAlarms)
                {
                    response.NotificationCounts.PanelAlarmsCount = cpusOnlineCount;
                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendPanelAlarmsToHardware, new SendDataParameters<GalaxyPanelAlarmSettings_PanelLoadData>(sendParameters)
                        {
                            Data = new GalaxyPanelAlarmSettings_PanelLoadData()
                            {
                                ClusterUid = clusterUid,//parameters.Data.ClusterUid,
                                GalaxyPanelUid = parameters.Data.GalaxyPanelUid
                            }
                        }));
                }

                if (parameters.Data.LoadDataSettings.TimeSchedules)
                {
                    if (counts != null)
                        response.NotificationCounts.TimeSchedulesCount = counts.TimeSchedulesCount * cpusOnlineCount;
                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendAllTimeSchedulesToHardware, new SendDataParameters<TimeSchedule_PanelLoadData>(sendParameters)
                        {
                            Data = new TimeSchedule_PanelLoadData() { ClusterUid = clusterUid }// parameters.Data.ClusterUid, }
                        }));
                }

                if (parameters.Data.LoadDataSettings.AllCardData)
                {
                    if (counts != null)
                        response.NotificationCounts.AllCardDataCount = counts.AllCardDataCount * cpusOnlineCount;

                    var sendDeleteParameters = new SendDataParameters<CredentialToDeleteFromCpu>()
                    {
                        PopulateDataFromDatabase = true,
                        ApplicationUserSessionHeader = this.ApplicationUserSessionHeader,
                    };
                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendDeletedCredentialsToHardware, sendDeleteParameters));

                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendAllCredentialDataToHardware, new SendDataParameters<Credential_PanelLoadData>(sendParameters)
                        {
                            Data = new Credential_PanelLoadData() { ClusterUid = clusterUid }//parameters.Data.ClusterUid, }
                        }));
                }

                //if (parameters.Data.LoadDataSettings.CardChanges)
                //    Globals.Instance.MessageBroker.SendMessage(
                //        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendCredentialChangesToHardware, sendParameters));

                if (parameters.Data.LoadDataSettings.InputOutputGroups)
                {
                    if (counts != null)
                        response.NotificationCounts.InputOutputGroupCount = counts.InputOutputGroupCount * cpusOnlineCount;

                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendAllClusterInputOutputGroupsToHardware, new SendDataParameters<InputOutputGroup_PanelLoadData>(sendParameters)
                        {
                            Data = new InputOutputGroup_PanelLoadData() { ClusterUid = clusterUid }// parameters.Data.ClusterUid, }
                        }));
                }

                if (parameters.Data.LoadDataSettings.AccessPortalsInputsOutputs)
                {
                    if (counts != null)
                    {
                        response.NotificationCounts.AccessPortalsInputsOutputsCount = counts.AccessPortalsInputsOutputsCount * cpusOnlineCount;
                        response.NotificationCounts.AccessRulesCount = counts.AccessPortalAccessRulesCount * cpusOnlineCount;
                    }

                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendAccessPortalsToHardware, new SendDataParameters<GalaxyInterfaceBoardSection_PanelLoadData>(sendParameters)
                        {
                            Data = new GalaxyInterfaceBoardSection_PanelLoadData()
                            {
                                ClusterUid = clusterUid,// parameters.Data.ClusterUid,
                                GalaxyPanelUid = parameters.Data.GalaxyPanelUid,
                            }
                        }));
                }

                if (parameters.Data.LoadDataSettings.AccessRules)
                {
                    if (counts != null)
                        response.NotificationCounts.AccessRulesCount = counts.AccessRulesCount * cpusOnlineCount;

                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendAccessGroupSettingsToHardware, new SendDataParameters<AccessGroup_PanelLoadData>(sendParameters)
                        {
                            SendToAddress = new BoardSectionNodeHardwareAddress()
                            {
                                ClusterUid = clusterUid,//parameters.Data.ClusterUid,
                                PanelUid = parameters.Data.GalaxyPanelUid,
                                CpuUid = parameters.Data.CpuUid
                            },

                        }));
                }

                //if (parameters.Data.LoadDataSettings.InputOutputDevices)
                //    Globals.Instance.MessageBroker.SendMessage(
                //        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendInputOutputDevicesToHardware, new SendDataParameters<GalaxyInterfaceBoardSection_PanelLoadData>(sendParameters)
                //        {
                //            Data = new GalaxyInterfaceBoardSection_PanelLoadData()
                //            {
                //                ClusterUid = parameters.Data.ClusterUid,
                //                GalaxyPanelUid = parameters.Data.GalaxyPanelUid,
                //            }
                //        }));

                //Globals.Instance.MessageBroker.SendMessage(
                //    new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendLoadDataFinished, new SendDataParameters(sendParameters)
                //    {
                //        SendToAddress = new BoardSectionNodeHardwareAddress()
                //        {
                //            ClusterUid = clusterUid,//parameters.Data.ClusterUid,
                //            PanelUid = parameters.Data.GalaxyPanelUid,
                //            CpuUid = parameters.Data.CpuUid
                //        }
                //    }));

                return response;
            });
        }

        //public CommandResponse<ClusterDataLoadParameters> SendClusterDataToPanels(
        //    CommandParameters<ClusterDataLoadParameters> parameters)
        //{
        //    return ExecuteFaultHandledOperation(() =>
        //    {
        //        ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);

        //        if (parameters.OperationUid == Guid.Empty)
        //            parameters.OperationUid = GuidUtilities.GenerateComb();
        //        parameters.RequestDateTime = DateTimeOffset.UtcNow;

        //        var response = new CommandResponse<ClusterDataLoadParameters>(parameters) { ApproximateDuration = 60 };

        //        // Now send to the panels
        //        var sendParameters = new SendDataParameters<object>()
        //        { PopulateDataFromDatabase = true, ApplicationUserSessionHeader = this.ApplicationUserSessionHeader };
        //        sendParameters.SendToAddress.ClusterUid = parameters.Data.ClusterUid;
        //        sendParameters.SendToAddress.PanelUid = parameters.Data.GalaxyPanelUid;
        //        sendParameters.SendToAddress.CpuUid = parameters.Data.CpuUid;

        //        if (parameters.Data.CpuAddresses.Count == 1)
        //        {
        //            sendParameters.SendToAddress.ClusterGroupId = parameters.Data.CpuAddresses[0].ClusterGroupId;
        //            sendParameters.SendToAddress.ClusterNumber = parameters.Data.CpuAddresses[0].ClusterNumber;
        //            sendParameters.SendToAddress.PanelNumber = parameters.Data.CpuAddresses[0].PanelNumber;
        //            sendParameters.SendToAddress.CpuId = parameters.Data.CpuAddresses[0].CpuId;
        //        }


        //        if (parameters.Data.LoadDataSettings.ClusterSharedSettings)
        //        {    Globals.Instance.MessageBroker.SendMessage(
        //                new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendClusterSettingsToHardware, new SendDataParameters<Cluster_CommonPanelLoadData>(sendParameters)
        //                {
        //                    Data = new Cluster_CommonPanelLoadData()
        //                    {
        //                        ClusterUid = parameters.Data.ClusterUid,
        //                    },
        //                }));
        //        }
        //        if (parameters.Data.LoadDataSettings.PanelAlarms)
        //        {
        //            Globals.Instance.MessageBroker.SendMessage(
        //                new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendPanelAlarmsToHardware, new SendDataParameters<GalaxyPanelAlarmSettings_PanelLoadData>(sendParameters)
        //                {
        //                    Data = new GalaxyPanelAlarmSettings_PanelLoadData()
        //                    {
        //                        ClusterUid = parameters.Data.ClusterUid,
        //                        GalaxyPanelUid = parameters.Data.GalaxyPanelUid
        //                    }
        //                }));
        //        }

        //        if (parameters.Data.LoadDataSettings.TimeSchedules)
        //        {
        //            Globals.Instance.MessageBroker.SendMessage(
        //                new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendAllTimeSchedulesToHardware, new SendDataParameters<TimeSchedule_PanelLoadData>(sendParameters)
        //                {
        //                    Data = new TimeSchedule_PanelLoadData() { ClusterUid = parameters.Data.ClusterUid, }
        //                }));
        //        }

        //        if (parameters.Data.LoadDataSettings.AllCardData)
        //        {
        //            var sendDeleteParameters = new SendDataParameters<CredentialToDeleteFromCpu>()
        //            {
        //                PopulateDataFromDatabase = true,
        //                ApplicationUserSessionHeader = this.ApplicationUserSessionHeader,
        //            };
        //            Globals.Instance.MessageBroker.SendMessage(
        //                new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendDeletedCredentialsToHardware, sendDeleteParameters));

        //            Globals.Instance.MessageBroker.SendMessage(
        //                new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendAllCredentialDataToHardware, new SendDataParameters<Credential_PanelLoadData>(sendParameters)
        //                {
        //                    Data = new Credential_PanelLoadData() { ClusterUid = parameters.Data.ClusterUid, }
        //                }));

        //        }

        //        if (parameters.Data.LoadDataSettings.CardChanges)
        //            Globals.Instance.MessageBroker.SendMessage(
        //                new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendCredentialChangesToHardware, sendParameters));

        //        if (parameters.Data.LoadDataSettings.LoadIoGroups)
        //            Globals.Instance.MessageBroker.SendMessage(
        //                new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendAllClusterInputOutputGroupsToHardware, new SendDataParameters<InputOutputGroup_PanelLoadData>(sendParameters)
        //                {
        //                    Data = new InputOutputGroup_PanelLoadData() { ClusterUid = parameters.Data.ClusterUid, }
        //                }));

        //        if (parameters.Data.LoadDataSettings.AccessPortals)
        //        {
        //            Globals.Instance.MessageBroker.SendMessage(
        //                new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendAccessPortalsToHardware, new SendDataParameters<GalaxyInterfaceBoardSection_PanelLoadData>(sendParameters)
        //                {
        //                    Data = new GalaxyInterfaceBoardSection_PanelLoadData()
        //                    {
        //                        ClusterUid = parameters.Data.ClusterUid,
        //                        GalaxyPanelUid = parameters.Data.GalaxyPanelUid,
        //                    }
        //                }));
        //        }
        //        else if (parameters.Data.LoadDataSettings.AccessRules)
        //        {
        //            Globals.Instance.MessageBroker.SendMessage(
        //                new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendAccessGroupSettingsToHardware, new SendDataParameters<AccessGroup_PanelLoadData>(sendParameters)
        //                {
        //                    SendToAddress = new BoardSectionNodeHardwareAddress()
        //                    {
        //                        ClusterUid = parameters.Data.ClusterUid,
        //                        PanelUid = parameters.Data.GalaxyPanelUid,
        //                        CpuUid = parameters.Data.CpuUid
        //                    },

        //                }));
        //        }

        //        if (parameters.Data.LoadDataSettings.InputOutputDevices)
        //            Globals.Instance.MessageBroker.SendMessage(
        //                new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendInputOutputDevicesToHardware, new SendDataParameters<GalaxyInterfaceBoardSection_PanelLoadData>(sendParameters)
        //                {
        //                    Data = new GalaxyInterfaceBoardSection_PanelLoadData()
        //                    {
        //                        ClusterUid = parameters.Data.ClusterUid,
        //                        GalaxyPanelUid = parameters.Data.GalaxyPanelUid,
        //                    }
        //                }));

        //        return response;
        //    });
        //}

        [OperationBehavior(TransactionScopeRequired = true)]
        public BackgroundJobInfo<LoadDataCommandResponse<ClusterDataLoadParameters>> SendClusterDataToPanelsJob(CommandParameters<ClusterDataLoadParameters> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);

                if (parameters.OperationUid == Guid.Empty)
                    parameters.OperationUid = GuidUtilities.GenerateComb();
                parameters.RequestDateTime = DateTimeOffset.UtcNow;

                var response = new LoadDataCommandResponse<ClusterDataLoadParameters>(parameters) { ApproximateDuration = 60, TimeoutSeconds = Globals.Instance.LoadDataTimeoutSeconds };

                // Now send to the panels
                var sendParameters = new SendDataParameters<object>()
                { PopulateDataFromDatabase = true, ApplicationUserSessionHeader = this.ApplicationUserSessionHeader, OperationUid = parameters.OperationUid };
                sendParameters.SendToAddress.ClusterUid = parameters.Data.ClusterUid;
                sendParameters.SendToAddress.PanelUid = parameters.Data.GalaxyPanelUid;
                sendParameters.SendToAddress.CpuUid = parameters.Data.CpuUid;

                if (parameters.Data.CpuAddresses.Count == 1)
                {
                    sendParameters.SendToAddress.ClusterGroupId = parameters.Data.CpuAddresses[0].ClusterGroupId;
                    sendParameters.SendToAddress.ClusterNumber = parameters.Data.CpuAddresses[0].ClusterNumber;
                    sendParameters.SendToAddress.PanelNumber = parameters.Data.CpuAddresses[0].PanelNumber;
                    sendParameters.SendToAddress.CpuId = parameters.Data.CpuAddresses[0].CpuId;
                }

                var clusterUid = sendParameters.SendToAddress.ClusterUid;
                var panelUid = sendParameters.SendToAddress.PanelUid;
                var cpuUid = sendParameters.SendToAddress.CpuUid;

                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuRepository>();
                var cpuInfo = new List<GalaxyCpuDatabaseInformation>();

                if (sendParameters.SendToAddress.ClusterUid != Guid.Empty)
                {
                    var getHardwareAddressParameters = new GetHardwareAddressParameters() { ClusterUid = sendParameters.SendToAddress.ClusterUid };
                    cpuInfo.AddRange(repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader, getHardwareAddressParameters));
                }

                if (sendParameters.SendToAddress.PanelUid != Guid.Empty)
                {
                    var getHardwareAddressParameters = new GetHardwareAddressParameters() { GalaxyPanelUid = sendParameters.SendToAddress.PanelUid };
                    var cpusForPanels = repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader,
                        getHardwareAddressParameters);
                    foreach (var c in cpusForPanels)
                    {
                        var existingCpu = cpuInfo.FirstOrDefault(o => o.CpuUid == c.CpuUid);
                        if (existingCpu == null)
                            cpuInfo.Add(c);
                    }
                }

                if (sendParameters.SendToAddress.CpuUid != Guid.Empty)
                {
                    var getHardwareAddressParameters = new GetHardwareAddressParameters() { CpuUid = sendParameters.SendToAddress.CpuUid };
                    var cpusForCpu = repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader, getHardwareAddressParameters);
                    foreach (var c in cpusForCpu)
                    {
                        var existingCpu = cpuInfo.FirstOrDefault(o => o.CpuUid == c.CpuUid);
                        if (existingCpu == null)
                            cpuInfo.Add(c);
                    }
                }

                var galaxyPanelUid = Guid.Empty;
                var cpusOnlineCount = 0;
                // Now spin through the cpuInfo collection and send the command to each one
                foreach (var c in cpuInfo)
                {
                    if (clusterUid == Guid.Empty)
                    {
                        clusterUid = c.ClusterUid;
                        //sendParameters.SendToAddress.ClusterGroupId = c.ClusterGroupId;
                        //sendParameters.SendToAddress.ClusterNumber = c.ClusterNumber;
                    }
                    //if (sendParameters.SendToAddress.PanelUid == Guid.Empty)
                    //{
                    //    sendParameters.SendToAddress.PanelUid = c.GalaxyPanelUid;
                    //    //sendParameters.SendToAddress.PanelNumber = c.PanelNumber;
                    //}
                    //if (sendParameters.SendToAddress.CpuUid == Guid.Empty)
                    //{
                    //    sendParameters.SendToAddress.CpuUid = c.CpuUid;
                    //    //sendParameters.SendToAddress.CpuId = c.CpuNumber;
                    //}

                    if (c.CpuIsActive)
                    {
                        var panelSentTo =
                            response.PanelsSentTo.FirstOrDefault(o => o.GalaxyPanelUid == c.GalaxyPanelUid);
                        if (panelSentTo == null)
                        {
                            panelSentTo = new PanelCommandResponseInfo()
                            {
                                GalaxyPanelUid = c.GalaxyPanelUid
                            };
                            response.PanelsSentTo.Add(panelSentTo);
                        }

                        panelSentTo.Cpus.Add(new CpuCommandResponseInfo()
                        {
                            CpuUid = c.CpuUid,
                            IsCpuOnline = c.IsConnected
                        });
                        if (c.IsConnected)
                        {
                            panelSentTo.IsPanelOnline = c.IsConnected;
                            if (galaxyPanelUid == Guid.Empty)
                                galaxyPanelUid = c.GalaxyPanelUid;
                            cpusOnlineCount++;
                        }
                    }
                }

                LoadDataCounts counts = null;
                if (galaxyPanelUid != Guid.Empty)
                {
                    var galaxyPanelRepo = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelRepository>();
                    counts = galaxyPanelRepo.GetLoadDataCounts(galaxyPanelUid, parameters.Data.LoadDataSettings);

                    if (counts != null)
                    {
                        if (parameters.Data.LoadDataSettings.ClusterSharedSettings)
                            response.NotificationCounts.ClusterSharedSettingsCount = cpusOnlineCount * 7;

                        if (parameters.Data.LoadDataSettings.PanelAlarms)
                            response.NotificationCounts.PanelAlarmsCount = cpusOnlineCount;

                        if (parameters.Data.LoadDataSettings.AccessPortalsInputsOutputs)
                        {
                            response.NotificationCounts.AccessPortalsInputsOutputsCount =
                                counts.AccessPortalsInputsOutputsCount * cpusOnlineCount;
                            response.NotificationCounts.AccessRulesCount =
                                counts.AccessPortalAccessRulesCount * cpusOnlineCount;
                        }

                        if (parameters.Data.LoadDataSettings.AccessRules)
                            response.NotificationCounts.AccessRulesCount += counts.AccessRulesCount * cpusOnlineCount;

                        if (parameters.Data.LoadDataSettings.AllCardData)
                            response.NotificationCounts.AllCardDataCount = counts.AllCardDataCount * cpusOnlineCount;

                        if (parameters.Data.LoadDataSettings.InputOutputGroups)
                            response.NotificationCounts.InputOutputGroupCount = counts.InputOutputGroupCount * cpusOnlineCount;

                        if (parameters.Data.LoadDataSettings.TimeSchedules)
                            response.NotificationCounts.TimeSchedulesCount = counts.TimeSchedulesCount * cpusOnlineCount;
                    }
                }

                // Assign a jobId and fill the SaveParameters.BackgroundJobId property. This will be used by the SaveEntity method to update the 
                // BackgroundJob tables.
                parameters.BackgroundJobId = GuidUtilities.GenerateComb();
                var jobParameters = new SaveJobParameters<CommandParameters<ClusterDataLoadParameters>>()
                {
                    JobId = parameters.BackgroundJobId,
                    SaveParameters = new SaveParameters<CommandParameters<ClusterDataLoadParameters>>(parameters) { },
                    UserSessionData = ApplicationUserSessionHeader as ApplicationUserSessionHeader
                };

                var responseInfo = new BackgroundJobInfo<LoadDataCommandResponse<ClusterDataLoadParameters>>(response)
                {
                    JobId = jobParameters.JobId,
                    DataType = nameof(CommandParameters<ClusterDataLoadParameters>),
                    JobType = BackgroundJobOperationType.ExecuteCommand,
                    State = BackgroundJobState.Queued,
                    ItemName = parameters.Data.GalaxyPanelUid.ToString()
                };

                responseInfo.DataItemUid = parameters.BackgroundJobId;
                responseInfo.EntityId = parameters.BackgroundJobId;

                var bgJob = new BackgroundJob()
                {
                    BackgroundJobUid = jobParameters.JobId,
                    UserId = UserSessionToken.UserData.UserId,
                    State = responseInfo.State.ToString(),
                    JobType = responseInfo.JobType.ToString(),
                    DataType = responseInfo.DataType,
                    ItemName = responseInfo.ItemName,
                    InsertDate = DateTimeOffset.Now,
                    InsertName = LoginName,
                    UpdateDate = DateTimeOffset.Now,
                    UpdateName = LoginName,
                    ConcurrencyValue = 0
                };


                bgJob.DataItemUid = responseInfo.EntityId;
                bgJob.EntityId = responseInfo.EntityId;


                //// If EntityId is empty, most likely this is a new insert. If this is the case AND there is a parent entity id specified
                //// then use the parent entity id. This will allow the signalR hub to notify listeners who have joined the parent entity id group to 
                //// recieve job completion notifications
                //if (bgJob.EntityId == Guid.Empty && entity.ParentEntityId.HasValue)
                //    bgJob.EntityId = entity.ParentEntityId.Value;

                SaveBackgroundJob(bgJob, string.Empty, _DataRepositoryFactory);

                IJobMessageHandler recorder = new JobMessageHandler();
                recorder.HandleMessage(jobParameters);

                return responseInfo;

                //if (parameters.Data.LoadDataSettings.ClusterSharedSettings)
                //{
                //    Globals.Instance.MessageBroker.SendMessage(
                //        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendClusterSettingsToHardware, new SendDataParameters<Cluster_CommonPanelLoadData>(sendParameters)
                //        {
                //            Data = new Cluster_CommonPanelLoadData()
                //            {
                //                ClusterUid = clusterUid//parameters.Data.ClusterUid,
                //            },
                //        }));
                //}

                //if (parameters.Data.LoadDataSettings.PanelAlarms)
                //{
                //    Globals.Instance.MessageBroker.SendMessage(
                //        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendPanelAlarmsToHardware, new SendDataParameters<GalaxyPanelAlarmSettings_PanelLoadData>(sendParameters)
                //        {
                //            Data = new GalaxyPanelAlarmSettings_PanelLoadData()
                //            {
                //                ClusterUid = clusterUid,//parameters.Data.ClusterUid,
                //                GalaxyPanelUid = parameters.Data.GalaxyPanelUid
                //            }
                //        }));
                //}

                //if (parameters.Data.LoadDataSettings.TimeSchedules)
                //{
                //    Globals.Instance.MessageBroker.SendMessage(
                //        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendAllTimeSchedulesToHardware, new SendDataParameters<TimeSchedule_PanelLoadData>(sendParameters)
                //        {
                //            Data = new TimeSchedule_PanelLoadData() { ClusterUid = clusterUid }// parameters.Data.ClusterUid, }
                //        }));
                //}

                //if (parameters.Data.LoadDataSettings.AllCardData)
                //{
                //    var sendDeleteParameters = new SendDataParameters<CredentialToDeleteFromCpu>()
                //    {
                //        PopulateDataFromDatabase = true,
                //        ApplicationUserSessionHeader = this.ApplicationUserSessionHeader,
                //    };
                //    Globals.Instance.MessageBroker.SendMessage(
                //        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendDeletedCredentialsToHardware, sendDeleteParameters));

                //    Globals.Instance.MessageBroker.SendMessage(
                //        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendAllCredentialDataToHardware, new SendDataParameters<Credential_PanelLoadData>(sendParameters)
                //        {
                //            Data = new Credential_PanelLoadData() { ClusterUid = clusterUid }//parameters.Data.ClusterUid, }
                //        }));
                //}

                ////if (parameters.Data.LoadDataSettings.CardChanges)
                ////    Globals.Instance.MessageBroker.SendMessage(
                ////        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendCredentialChangesToHardware, sendParameters));

                //if (parameters.Data.LoadDataSettings.InputOutputGroups)
                //    Globals.Instance.MessageBroker.SendMessage(
                //        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendAllClusterInputOutputGroupsToHardware, new SendDataParameters<InputOutputGroup_PanelLoadData>(sendParameters)
                //        {
                //            Data = new InputOutputGroup_PanelLoadData() { ClusterUid = clusterUid }// parameters.Data.ClusterUid, }
                //        }));

                //if (parameters.Data.LoadDataSettings.AccessPortalsInputsOutputs)
                //{
                //    Globals.Instance.MessageBroker.SendMessage(
                //        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendAccessPortalsToHardware, new SendDataParameters<GalaxyInterfaceBoardSection_PanelLoadData>(sendParameters)
                //        {
                //            Data = new GalaxyInterfaceBoardSection_PanelLoadData()
                //            {
                //                ClusterUid = clusterUid,// parameters.Data.ClusterUid,
                //                GalaxyPanelUid = parameters.Data.GalaxyPanelUid,
                //            }
                //        }));
                //}
                //else if (parameters.Data.LoadDataSettings.AccessRules)
                //{
                //    Globals.Instance.MessageBroker.SendMessage(
                //        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendAccessGroupSettingsToHardware, new SendDataParameters<AccessGroup_PanelLoadData>(sendParameters)
                //        {
                //            SendToAddress = new BoardSectionNodeHardwareAddress()
                //            {
                //                ClusterUid = clusterUid,//parameters.Data.ClusterUid,
                //                PanelUid = parameters.Data.GalaxyPanelUid,
                //                CpuUid = parameters.Data.CpuUid
                //            },

                //        }));
                //}

                ////if (parameters.Data.LoadDataSettings.InputOutputDevices)
                ////    Globals.Instance.MessageBroker.SendMessage(
                ////        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendInputOutputDevicesToHardware, new SendDataParameters<GalaxyInterfaceBoardSection_PanelLoadData>(sendParameters)
                ////        {
                ////            Data = new GalaxyInterfaceBoardSection_PanelLoadData()
                ////            {
                ////                ClusterUid = parameters.Data.ClusterUid,
                ////                GalaxyPanelUid = parameters.Data.GalaxyPanelUid,
                ////            }
                ////        }));
            });
        }

        #endregion

        #region Galaxy Panel Model Operations

        public
            GalaxyPanelModel
            []
            GetAllGalaxyPanelModels(GetParametersWithPhoto parameters)
        {
            return
                ExecuteFaultHandledOperation(() =>
                    {
                        ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);

                        var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelModelRepository>();

                        var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                        return
                            data.ToArray
                                ();
                    }
                )
                ;
        }

        public
            GalaxyPanelModel GetGalaxyPanelModel(GetParametersWithPhoto parameters)
        {
            return
                ExecuteFaultHandledOperation(() =>
                {
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                    var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelModelRepository>();

                    var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                    if
                    (data
                     == null &&
                     parameters.ThrowExceptionIfNotFound
                    )
                    {
                        var ex =
                            new NotFoundException(
                                string.Format("GalaxyPanelModel with GalaxyPanelModelUid of {0} is not in database",
                                    parameters.UniqueId));
                        var detail = new ExceptionDetailEx(ex);
                        throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                    }

                    return
                        data;
                });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public GalaxyPanelModel SaveGalaxyPanelModel(SaveParameters<GalaxyPanelModel> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (!parameters.DoNotValidateAuthorization)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelModelRepository>();

                GalaxyPanelModel updatedItem = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format(
                                "GalaxyPanelModel with Display of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.Display));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.GalaxyPanelModelUid == Guid.Empty)
                {
                    parameters.Data.GalaxyPanelModelUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.GalaxyPanelModelUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedItem;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyPanelModelByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId
                );
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelModelRepository>();

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyPanelModel(DeleteParameters<GalaxyPanelModel> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId
                );
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelModelRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsGalaxyPanelModelReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelModelRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsGalaxyPanelModelUnique(GalaxyPanelModel data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelModelRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Galaxy Panel Command Operations

        public GalaxyPanelCommand[] GetAllGalaxyPanelCommands(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelCommandRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyPanelCommand[] GetGalaxyPanelCommandsByPanelModel(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelCommandRepository>();
                var data = repository.GetAllGalaxyPanelCommandForPanelModel(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyPanelCommand GetGalaxyPanelCommand(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelCommandRepository>();
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("GalaxyPanelCommand with GalaxyPanelCommandUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public GalaxyPanelCommand SaveGalaxyPanelCommand(SaveParameters<GalaxyPanelCommand> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (!parameters.DoNotValidateAuthorization)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelCommandRepository>();

                GalaxyPanelCommand updatedItem = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format(
                                "GalaxyPanelCommand with Display of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.Display));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.GalaxyPanelCommandUid == Guid.Empty)
                {
                    parameters.Data.GalaxyPanelCommandUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.GalaxyPanelCommandUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedItem;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyPanelCommandByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId
                );
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelCommandRepository>();

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyPanelCommand(DeleteParameters<GalaxyPanelCommand> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId
                );
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelCommandRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsGalaxyPanelCommandReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelCommandRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsGalaxyPanelCommandUnique(GalaxyPanelCommand data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelCommandRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Galaxy Panel Operations

        public ArrayResponse<GalaxyPanel> GetAllGalaxyPanels(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelRepository>();
                var data = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<GalaxyPanel>)data;
            });
        }

        public ArrayResponse<GalaxyPanel> GetAllGalaxyPanelsForCluster(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfCluster(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelRepository>();
                var data = repository.GetAllGalaxyPanelsForCluster(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<GalaxyPanel>)data;
            });
        }

        //public GalaxyPanel[] GetAllGalaxyPanelsForEntity(GetParametersWithPhoto parameters)
        //{
        //    return ExecuteFaultHandledOperation(() =>
        //    {
        //        ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
        //        var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelRepository>();
        //        var data = repository.GetAllGalaxyPanelsForEntity(ApplicationUserSessionHeader, parameters);

        //        return data.ToArray();
        //    });
        //}

        //public GalaxyPanel[] GetAllGalaxyPanelsForRegion(GetParametersWithPhoto parameters)
        //{
        //    return ExecuteFaultHandledOperation(() =>
        //    {
        //        ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
        //        var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelRepository>();
        //        var data = repository.GetAllGalaxyPanelsForRegion(ApplicationUserSessionHeader, parameters);

        //        return data.ToArray();
        //    });
        //}

        public ArrayResponse<GalaxyPanel> GetAllGalaxyPanelsForSite(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfSite(parameters.UniqueId, true);
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelRepository>();
                var data = repository.GetAllGalaxyPanelsForSite(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<GalaxyPanel>)data;
            });
        }

        public GalaxyPanel GetGalaxyPanel(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(GalaxyPanel), nameof(GalaxyPanel.GalaxyPanelUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(string.Format(
                            "GalaxyPanel with GalaxyPanelUid of {0} is not in database", parameters.
                                UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        public GalaxyPanel GetGalaxyPanelByHardwareAddress(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelRepository>();
                var data = repository.GetByHardwareAddress(ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var msg = string.Empty;
                    if (parameters.ClusterUid == Guid.Empty)
                    {
                        msg = $"GalaxyPanel with ClusterGroupId:{parameters.ClusterGroupId}, ClusterNumber:{parameters.ClusterNumber}, PanelNumber:{parameters.PanelNumber} is not in database";
                    }
                    else
                        msg = $"GalaxyPanel with ClusterUid:{parameters.ClusterUid}, PanelNumber:{parameters.PanelNumber} is not in database";
                    var ex = new NotFoundException(msg);
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        public ValidationProblemDetails ValidateGalaxyPanel(SaveParameters<GalaxyPanel> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var response = new ValidationProblemDetails();
                var errorsArray = new List<string>();
                var clusterRepo = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();
                var clusterExists = clusterRepo.DoesExist(parameters.Data.ClusterUid);
                if (!clusterExists)
                {
                    errorsArray.Add(
                        $"The {nameof(parameters.Data.ClusterUid)} value {parameters.Data.ClusterUid} does not exist in the database.");
                    response.Errors.Add($"{nameof(parameters.Data.ClusterUid)}", errorsArray.ToArray());
                    return response;
                }

                var editorDataParams = new GetParametersWithPhoto()
                {
                    UniqueId = parameters.Data.ClusterUid
                };
                editorDataParams.ExcludeMemberCollectionSettings.Add(nameof(GalaxyPanelEditingData.GalaxyPanelModel635Commands));
                var editorData = GetGalaxyPanelEditingData(editorDataParams);

                var boardIndex = 0;
                foreach (var b in parameters.Data.InterfaceBoards)
                {
                    errorsArray.Clear();
                    var sections = new List<GalaxyInterfaceBoardSection>();
                    if (b.InterfaceBoardSections != null)
                        sections = b.InterfaceBoardSections.ToList();

                    var boardType =
                        editorData.InterfaceBoardTypes.FirstOrDefault(o =>
                            o.InterfaceBoardTypeUid == b.InterfaceBoardTypeUid);
                    var sectionModes =
                        editorData.InterfaceBoardSectionModes.Where(o =>
                            o.InterfaceBoardTypeUid == b.InterfaceBoardTypeUid);

                    if (boardType != null)
                    {
                        if (sections.Count > boardType.NumberOfSections)
                        {
                            errorsArray.Add($"There are {sections.Count} sections specified. BoardType {boardType.TypeCode} can have {boardType.NumberOfSections} sections.");
                        }
                    }

                    var sectionIndex = 0;
                    foreach (var s in sections)
                    {
                        var sectionCount = sections.Count(o => o.SectionNumber == s.SectionNumber);
                        if (sectionCount > 1)
                        {
                            errorsArray.Add($"There are {sectionCount} sections specified with SectionNumber {s.SectionNumber}. SectionNumbers must be unique.");
                        }

                        if (boardType != null)
                        {
                            var sectionMode = sectionModes.FirstOrDefault(o =>
                                    o.InterfaceBoardSectionModeUid == s.InterfaceBoardSectionModeUid);

                            if (sectionMode == null)
                                errorsArray.Add($"InterfaceBoardSections[{sectionIndex}].SectionMode is not valid for BoardType {boardType.TypeCode}.");
                        }

                        sectionIndex++;
                    }

                    if (b.InterfaceBoardTypeUid == GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                            .GalaxyInterfaceBoardType_DualReaderInterface600)
                    {
                        // there must be two sections, numbered 1 & 2
                        var invalidSections = sections.Where(o => o.SectionNumber < 1 || o.SectionNumber > 2);
                        foreach (var s in invalidSections)
                        {
                            errorsArray.Add(
                                $"Invalid section number {s.SectionNumber}. This board type can only have section numbers 1 and 2");
                        }
                    }
                    else if (b.InterfaceBoardTypeUid == GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                                 .GalaxyInterfaceBoardType_DualReaderInterface635)
                    {
                        var invalidSections = sections.Where(o => o.SectionNumber < 1 || o.SectionNumber > 2);
                        foreach (var s in invalidSections)
                        {
                            //sections.Remove(s);
                            errorsArray.Add(
                                $"Invalid section number {s.SectionNumber}. This board type can only have section numbers 1 and 2");
                        }
                    }
                    else if (b.InterfaceBoardTypeUid == GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                                 .GalaxyInterfaceBoardType_DualSerialInterface635)
                    {
                        var invalidSections = sections.Where(o => o.SectionNumber < 1 || o.SectionNumber > 2);
                        foreach (var s in invalidSections)
                        {
                            //sections.Remove(s);
                            errorsArray.Add($"Invalid section number {s.SectionNumber}. This board type can only have section numbers 1 and 2");
                        }

                        foreach (var s in sections)
                        {
                            var sectionMode = sectionModes.FirstOrDefault(o =>
                                o.InterfaceBoardSectionModeUid == s.InterfaceBoardSectionModeUid);

                            if (s.InterfaceBoardSectionModeUid != DualSerialInterface635ChannelModeIds
                                    .DualSerialChannelMode_AllegionPimAba &&
                                s.InterfaceBoardSectionModeUid != DualSerialInterface635ChannelModeIds
                                    .DualSerialChannelMode_AllegionPimWiegand &&
                                s.InterfaceBoardSectionModeUid != DualSerialInterface635ChannelModeIds
                                    .DualSerialChannelMode_AssaAbloyAperio &&
                                s.InterfaceBoardSectionModeUid != DualSerialInterface635ChannelModeIds
                                    .DualSerialChannelMode_CypressClockDisplay &&
                                s.InterfaceBoardSectionModeUid != DualSerialInterface635ChannelModeIds
                                    .DualSerialChannelMode_ElevatorRelays &&
                                s.InterfaceBoardSectionModeUid != DualSerialInterface635ChannelModeIds
                                    .DualSerialChannelMode_LCD_4x20Display &&
                                s.InterfaceBoardSectionModeUid != DualSerialInterface635ChannelModeIds
                                    .DualSerialChannelMode_OutputRelays &&
                                s.InterfaceBoardSectionModeUid != DualSerialInterface635ChannelModeIds
                                    .DualSerialChannelMode_SaltoSallis &&
                                s.InterfaceBoardSectionModeUid != DualSerialInterface635ChannelModeIds
                                    .DualSerialChannelMode_RS485DoorModule &&
                                s.InterfaceBoardSectionModeUid != DualSerialInterface635ChannelModeIds
                                    .DualSerialChannelMode_RS485InputModule &&
                                s.InterfaceBoardSectionModeUid !=
                                DualSerialInterface635ChannelModeIds.DualSerialChannelMode_Shell &&
                                s.InterfaceBoardSectionModeUid !=
                                DualSerialInterface635ChannelModeIds.DualSerialChannelMode_Unused &&
                                s.InterfaceBoardSectionModeUid != DualSerialInterface635ChannelModeIds
                                    .DualSerialChannelMode_VeridtCac)
                                errorsArray.Add(
                                    $"Invalid InterfaceBoardSectionModeUid ({s.InterfaceBoardSectionModeUid}) or SectionType ({sectionMode.ModeCode}) value for board type ({b.InterfaceBoardTypeUid})");
                        }
                    }
                    else if (b.InterfaceBoardTypeUid == GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                                 .GalaxyInterfaceBoardType_DigitalInputOutput600)
                    {

                    }
                    else if (b.InterfaceBoardTypeUid == GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                                 .GalaxyInterfaceBoardType_KoneElevatorInterface)
                    {

                    }
                    else if (b.InterfaceBoardTypeUid == GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                                 .GalaxyInterfaceBoardType_OtisElevatorInterface)
                    {

                    }
                    else if (b.InterfaceBoardTypeUid ==
                             GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds.GalaxyInterfaceBoardType_Veridt_Cpu)
                    {

                    }
                    else if (b.InterfaceBoardTypeUid == GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                                 .GalaxyInterfaceBoardType_Veridt_ReaderModule)
                    {

                    }
                    //else if (b.InterfaceBoardTypeUid == Common.Constants.GalaxyInterfaceBoardTypeIds.GalaxyInterfaceBoardType_CardTourManager)
                    //{

                    //}
                    //else if (b.InterfaceBoardTypeUid == Common.Constants.GalaxyInterfaceBoardTypeIds.GalaxyInterfaceBoardType_DualSerialInterface600)
                    //{
                    //    var invalidSections = sections.Where(o => o.SectionNumber < 1 || o.SectionNumber > 2);
                    //    foreach (var s in invalidSections)
                    //    {
                    //        //sections.Remove(s);
                    //        errorsArray.Add($"Invalid section number {s.SectionNumber}. This board type can only have section numbers 1 and 2");
                    //    }
                    //    foreach (var s in sections)
                    //    {
                    //        // If the InterfaceBoardSectionModeUid is not specified, then use the SectionType enum and assign the correct Uid value
                    //        if (s.InterfaceBoardSectionModeUid == Guid.Empty)
                    //        {
                    //            switch (s.SectionMode)
                    //            {
                    //                case PanelInterfaceBoardSectionType.DsiIngersolRandPimClockData:
                    //                    s.InterfaceBoardSectionModeUid = DualSerialInterface600ChannelModeIds.DualSerialChannelMode_AllegionPimAba;
                    //                    break;

                    //                case PanelInterfaceBoardSectionType.DsiIngersolRandPimWiegand:
                    //                    s.InterfaceBoardSectionModeUid = DualSerialInterface600ChannelModeIds.DualSerialChannelMode_AllegionPimWiegand;
                    //                    break;

                    //                case PanelInterfaceBoardSectionType.DsiAssaAbloyAperio:
                    //                    s.InterfaceBoardSectionModeUid = DualSerialInterface600ChannelModeIds.DualSerialChannelMode_AssaAbloyAperio;
                    //                    break;

                    //                case PanelInterfaceBoardSectionType.DsiCypressClockDisplay:
                    //                    s.InterfaceBoardSectionModeUid = DualSerialInterface600ChannelModeIds.DualSerialChannelMode_CypressClockDisplay;
                    //                    break;

                    //                case PanelInterfaceBoardSectionType.DsiElevatorControlRelays:
                    //                    s.InterfaceBoardSectionModeUid = DualSerialInterface600ChannelModeIds.DualSerialChannelMode_ElevatorRelays;
                    //                    break;

                    //                case PanelInterfaceBoardSectionType.DsiLcd4x20Display:
                    //                    s.InterfaceBoardSectionModeUid = DualSerialInterface600ChannelModeIds.DualSerialChannelMode_LCD_4x20Display;
                    //                    break;

                    //                case PanelInterfaceBoardSectionType.DsiOutputControlRelays:
                    //                    s.InterfaceBoardSectionModeUid = DualSerialInterface600ChannelModeIds.DualSerialChannelMode_OutputRelays;
                    //                    break;

                    //                case PanelInterfaceBoardSectionType.DsiSalto:
                    //                    s.InterfaceBoardSectionModeUid = DualSerialInterface600ChannelModeIds.DualSerialChannelMode_SaltoSallis;
                    //                    break;

                    //                case PanelInterfaceBoardSectionType.DrmSection:
                    //                case PanelInterfaceBoardSectionType.None:
                    //                case PanelInterfaceBoardSectionType.Dio8X4Outputs:
                    //                case PanelInterfaceBoardSectionType.Dio8X4Inputs:
                    //                case PanelInterfaceBoardSectionType.DsiRs485DoorModule:
                    //                case PanelInterfaceBoardSectionType.DsiRs485InputModule:
                    //                case PanelInterfaceBoardSectionType.OtisElevatorInterfaceCpu:
                    //                //case PanelInterfaceBoardSectionType.CardTourManagerCpu:
                    //                case PanelInterfaceBoardSectionType.KoneElevatorInterfaceCpu:
                    //                case PanelInterfaceBoardSectionType.VeridtCpu:
                    //                case PanelInterfaceBoardSectionType.VeridtReader:
                    //                    break;
                    //            }
                    //        }
                    //        if (s.InterfaceBoardSectionModeUid != DualSerialInterface600ChannelModeIds.DualSerialChannelMode_AllegionPimAba &&
                    //            s.InterfaceBoardSectionModeUid != DualSerialInterface600ChannelModeIds.DualSerialChannelMode_AllegionPimWiegand &&
                    //            s.InterfaceBoardSectionModeUid != DualSerialInterface600ChannelModeIds.DualSerialChannelMode_AssaAbloyAperio &&
                    //            s.InterfaceBoardSectionModeUid != DualSerialInterface600ChannelModeIds.DualSerialChannelMode_CypressClockDisplay &&
                    //            s.InterfaceBoardSectionModeUid != DualSerialInterface600ChannelModeIds.DualSerialChannelMode_ElevatorRelays &&
                    //            s.InterfaceBoardSectionModeUid != DualSerialInterface600ChannelModeIds.DualSerialChannelMode_LCD_4x20Display &&
                    //            s.InterfaceBoardSectionModeUid != DualSerialInterface600ChannelModeIds.DualSerialChannelMode_OutputRelays &&
                    //            s.InterfaceBoardSectionModeUid != DualSerialInterface600ChannelModeIds.DualSerialChannelMode_SaltoSallis &&
                    //            s.InterfaceBoardSectionModeUid != DualSerialInterface600ChannelModeIds.DualSerialChannelMode_Shell &&
                    //            s.InterfaceBoardSectionModeUid != DualSerialInterface600ChannelModeIds.DualSerialChannelMode_Unused &&
                    //            s.InterfaceBoardSectionModeUid != DualSerialInterface600ChannelModeIds.DualSerialChannelMode_VeridtCac)
                    //            return BadRequest($"Invalid InterfaceBoardSectionModeUid ({s.InterfaceBoardSectionModeUid}) or SectionType ({s.SectionMode}) value for board type ({b.InterfaceBoardTypeUid})");
                    //    }
                    //}
                    if (errorsArray.Any())
                        response.Errors.Add($"{nameof(GalaxyInterfaceBoard)}[{boardIndex}]", errorsArray.ToArray());
                    boardIndex++;
                }

                var aeIndex = 0;
                foreach (var ae in parameters.Data.AlertEvents)
                {
                    errorsArray.Clear();
                    if (ae.GalaxyPanelAlertEventTypeUid == Guid.Empty)
                    {
                        errorsArray.Add($"{nameof(ae.GalaxyPanelAlertEventTypeUid)} value {ae.GalaxyPanelAlertEventTypeUid} is not valid.");
                    }
                    else
                    {
                        var aeCount = parameters.Data.AlertEvents.Count(o =>
                            o.GalaxyPanelAlertEventTypeUid == ae.GalaxyPanelAlertEventTypeUid);
                        if (aeCount > 1)
                        {
                            errorsArray.Add(
                                $"There are {aeCount} alert events specified with GalaxyPanelAlertEventTypeUid {ae.GalaxyPanelAlertEventTypeUid}. GalaxyPanelAlertEventTypeUid must be unique.");
                        }
                    }

                    if (ae.AcknowledgeTimeScheduleUid != Guid.Empty)
                    {
                        var ts = editorData.TimeSchedules.FirstOrDefault(o => o.TimeScheduleUid == ae.AcknowledgeTimeScheduleUid);
                        if (ts == null)
                        {
                            errorsArray.Add($"{nameof(ae.AcknowledgeTimeScheduleUid)} value {ae.AcknowledgeTimeScheduleUid} is not valid for {nameof(parameters.Data.ClusterUid)} {parameters.Data.ClusterUid}.");
                        }
                    }

                    if (ae.InputOutputGroupAssignmentUid.HasValue && ae.InputOutputGroupAssignmentUid.Value != Guid.Empty && ae.InputOutputGroupUid == Guid.Empty)
                    {
                        ae.InputOutputGroupUid =
                            InputOutputGroupHelpers.GetInputOutputUidFromInputOutputGroupAssignmentUid(ae.InputOutputGroupAssignmentUid.Value);
                    }

                    if (ae.InputOutputGroupUid != Guid.Empty)
                    {
                        var ts = editorData.InputOutputGroups.FirstOrDefault(o => o.InputOutputGroupUid == ae.InputOutputGroupUid);
                        if (ts == null)
                        {
                            errorsArray.Add($"{nameof(ae.InputOutputGroupUid)} value {ae.InputOutputGroupUid} is not valid for {nameof(parameters.Data.ClusterUid)} {parameters.Data.ClusterUid}.");
                        }
                    }

                    if (ae.InputOutputGroupAssignmentUid.HasValue && ae.InputOutputGroupAssignmentUid.Value != Guid.Empty)
                    {
                        if (!InputOutputGroupHelpers.IsInputOutputGroupAssignmentAssociatedWithInputOutputGroup(ae.InputOutputGroupAssignmentUid.Value, ae.InputOutputGroupUid))
                        {
                            errorsArray.Add($"{nameof(ae.InputOutputGroupAssignmentUid)} value {ae.InputOutputGroupAssignmentUid} is not valid for {nameof(ae.InputOutputGroupUid)} {ae.InputOutputGroupUid}.");
                        }
                    }

                    if (errorsArray.Any())
                        response.Errors.Add($"{nameof(parameters.Data.AlertEvents)}[{aeIndex}]", errorsArray.ToArray());
                    aeIndex++;
                }

                if (response.Errors.Any())
                {
                    return response;
                }

                return null;

            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public GalaxyPanel SaveGalaxyPanel(SaveParameters<GalaxyPanel> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var panelAddressChanged = false;
                GalaxyPanel existingItem = null;

                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelRepository>();
                // Must validate EntityId is set correctly. If an update, the parent Uid may not be specified. If this is the case, the
                // it must be obtained before permissions can be validated
                var entityId = Guid.Empty;
                if (parameters.Data.GalaxyPanelUid != Guid.Empty)
                {
                    entityId = repository.GetEntityId(parameters.Data.GalaxyPanelUid);
                    existingItem = repository.Get(parameters.Data.GalaxyPanelUid, ApplicationUserSessionHeader, new GetParametersWithPhoto()
                    {
                        IncludeCommands = false,
                        IncludeMemberCollections = false,
                        IncludeHardwareAddress = false,
                        IncludePhoto = false
                    });
                    if (existingItem != null && (existingItem.PanelNumber != parameters.Data.PanelNumber))
                    {
                        panelAddressChanged = true;
                    }
                }
                if (entityId == Guid.Empty && parameters.Data.ClusterUid != Guid.Empty)
                {
                    entityId = repository.GetParentEntityId(parameters.Data.ClusterUid);
                }

                if (entityId == Guid.Empty)
                {
                    var ex = new ApplicationException($"Cannot validate entityId for GalaxyPanel");
                    var detail = new ExceptionDetailEx(ex) { PreferredHttpStatusCode = HttpStatusCode.BadRequest };
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.CurrentEntityId = entityId;

                if (repository.DoesExist(parameters.Data.GalaxyPanelUid))
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanUpdateId);
                else
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);

                GalaxyPanel updatedItem = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    if (repository.IsPanelNameUnique(parameters.Data) == false)
                    {
                        var ex =
                            new DuplicateIndexException(
                                string.Format(
                                    "GalaxyPanel with Name of '{0}' cannot be saved because it is a duplicate.",
                                    parameters.Data.PanelName));
                        var detail = new ExceptionDetailEx(ex);
                        throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                    }

                    if (repository.IsPanelNumberUnique(parameters.Data) == false)
                    {
                        var ex =
                            new DuplicateIndexException(
                                string.Format(
                                    "GalaxyPanel with PanelNumber of '{0}' cannot be saved because it is a duplicate.",
                                    parameters.Data.PanelNumber));
                        var detail = new ExceptionDetailEx(ex);
                        throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                    }
                }

                var dirtyBoards = parameters.Data.InterfaceBoards.Where(b => b.GalaxyInterfaceBoardUid == Guid.Empty || b.IsAnythingDirty == true).ToCollection();
                var newCpuNumbers = parameters.Data.Cpus.Where(c => c.CpuUid == Guid.Empty).Select(o => o.CpuNumber).ToList();
                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.GalaxyPanelUid == Guid.Empty)
                {
                    parameters.Data.GalaxyPanelUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }

                if (repository.DoesExist(parameters.Data.GalaxyPanelUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                    if (!newCpuNumbers.Any())
                    {
                        foreach (var cpu in updatedItem.Cpus)
                        {
                            newCpuNumbers.Add(cpu.CpuNumber);
                        }
                    }
                }
                else
                {
                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                var newCpus = updatedItem.Cpus.Where(p => newCpuNumbers.Contains(p.CpuNumber)).ToList();
                foreach (var cpu in newCpus)
                {
                    //////////////////////////////////////////////////////////////////////////////////////////
                    var cpuRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuRepository>();
                    var cpuInfo = cpuRepository.GetGalaxyCpuInformation(this.ApplicationUserSessionHeader, new GetHardwareAddressParameters()
                    {
                        CpuUid = cpu.CpuUid,
                    });

                    // Notify the communication connection about the new data.
                    var sendParameters = new SendDataParameters<GalaxyCpuDatabaseInformation>()
                    { PopulateDataFromDatabase = false, ApplicationUserSessionHeader = this.ApplicationUserSessionHeader };
                    sendParameters.Data = cpuInfo.FirstOrDefault();
                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.GalaxyCpuDatabaseInformationSaved, sendParameters));
                }

                // for each board that has dirty data, push the section(s) to the panel
                foreach (var dirtyBoard in dirtyBoards)
                {
                    foreach (var section in dirtyBoard.InterfaceBoardSections.Where(s => s.IsAnythingDirty).ToCollection())
                    {
                        var sendParameters = new SendDataParameters<GalaxyInterfaceBoardSection_PanelLoadData>()
                        { PopulateDataFromDatabase = true, ApplicationUserSessionHeader = this.ApplicationUserSessionHeader };
                        sendParameters.Data.GalaxyInterfaceBoardSectionUid = section.GalaxyInterfaceBoardSectionUid;
                        Globals.Instance.MessageBroker.SendMessage(
                            new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendInterfaceBoardSectionDataToHardware, sendParameters));
                    }
                }

                if (existingItem == null)
                {   // New Panel
                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.NewPanelSaved, new CpuHardwareAddress()
                        {
                            ClusterGroupId = updatedItem.ClusterGroupId,
                            ClusterNumber = updatedItem.ClusterNumber,
                            PanelNumber = updatedItem.PanelNumber,
                            ClusterUid = updatedItem.ClusterUid,
                            PanelUid = updatedItem.GalaxyPanelUid,
                            CpuId = (Int32)CpuHardwareAddress.CpuNumber.Both
                        }));
                }


                if (panelAddressChanged && existingItem != null)
                {
                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.PanelAddressChanged,
                            new CpuHardwareAddress()
                            {
                                ClusterGroupId = existingItem.ClusterGroupId,
                                ClusterNumber = existingItem.ClusterNumber,
                                PanelNumber = existingItem.PanelNumber,
                                ClusterUid = existingItem.ClusterUid,
                                PanelUid = existingItem.GalaxyPanelUid,
                                CpuId = (Int32)CpuHardwareAddress.CpuNumber.Both
                            }));

                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.PanelAddressChanged, new CpuHardwareAddress()
                        {
                            ClusterGroupId = updatedItem.ClusterGroupId,
                            ClusterNumber = updatedItem.ClusterNumber,
                            PanelNumber = updatedItem.PanelNumber,
                            ClusterUid = updatedItem.ClusterUid,
                            PanelUid = updatedItem.GalaxyPanelUid,
                            CpuId = (Int32)CpuHardwareAddress.CpuNumber.Both
                        }));
                }
                else
                {
                    var sendParameters2 = new SendDataParameters<GalaxyCpuDatabaseInformation>()
                    {
                        PopulateDataFromDatabase = false,
                        ApplicationUserSessionHeader = this.ApplicationUserSessionHeader
                    };
                    sendParameters2.Data = new GalaxyCpuDatabaseInformation()
                    {
                        GalaxyPanelUid = updatedItem.GalaxyPanelUid,
                        ClusterGroupId = updatedItem.ClusterGroupId,
                        ClusterNumber = updatedItem.ClusterNumber,
                        PanelNumber = updatedItem.PanelNumber,
                        CpuNumber = (short)CpuHardwareAddress.CpuNumber.Both
                    };
                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendRefreshGalaxyPanelDataFromDb,
                            sendParameters2));


                    Globals.Instance.MessageBroker.SendMessage(new PDSAMessageBrokerMessage(
                        MessageBrokerMessageNames.SendPanelAlarmsToHardware,
                        new SendDataParameters<GalaxyPanelAlarmSettings_PanelLoadData>()
                        {
                            PopulateDataFromDatabase = true,
                            ApplicationUserSessionHeader = this.ApplicationUserSessionHeader,
                            Data = new GalaxyPanelAlarmSettings_PanelLoadData()
                            { GalaxyPanelUid = parameters.Data.GalaxyPanelUid }
                        }));
                }

                return updatedItem;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyPanelByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(GalaxyPanel), nameof(GalaxyPanel.GalaxyPanelUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);

                var existingItem = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, new GetParametersWithPhoto());
                if (existingItem != null)
                {
                    // Verify that the user has permissions to the entity that the cluster is associated with
                    ValidateEntityAuthorizationAndSetupOperation(existingItem.EntityId, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                    var x = repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);

                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.PanelDeleted, new CpuHardwareAddress()
                        {
                            ClusterGroupId = existingItem.ClusterGroupId,
                            ClusterNumber = existingItem.ClusterNumber,
                            ClusterUid = existingItem.ClusterUid,
                            PanelNumber = existingItem.PanelNumber,
                            PanelUid = existingItem.GalaxyPanelUid,
                            CpuId = (Int32)CpuHardwareAddress.CpuNumber.Both
                        }));
                    return x;
                }

                return 0;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyPanel(DeleteParameters<GalaxyPanel> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.GalaxyPanelUid, true, nameof(GalaxyPanel), nameof(GalaxyPanel.GalaxyPanelUid));

                var existingItem = repository.Get(parameters.Data.GalaxyPanelUid, ApplicationUserSessionHeader, new GetParametersWithPhoto()
                {
                    IncludeMemberCollections = false,
                    IncludePhoto = false
                });
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);
                var x = repository.Remove(parameters.Data, ApplicationUserSessionHeader);

                if (existingItem != null)
                {
                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.PanelDeleted, new CpuHardwareAddress()
                        {
                            ClusterGroupId = existingItem.ClusterGroupId,
                            ClusterNumber = existingItem.ClusterNumber,
                            ClusterUid = existingItem.ClusterUid,
                            PanelNumber = existingItem.PanelNumber,
                            PanelUid = existingItem.GalaxyPanelUid,
                            CpuId = (Int32)CpuHardwareAddress.CpuNumber.Both
                        }));
                }

                return x;
            });
        }

        public bool IsGalaxyPanelReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsGalaxyPanelUnique(GalaxyPanel data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        public GalaxyPanelEditingData GetGalaxyPanelEditingData(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var panelEditingData = new GalaxyPanelEditingData();
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                if (!parameters.IsExcluded(nameof(GalaxyPanelEditingData.PanelModels)))
                {
                    var panelModelRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelModelRepository>();
                    panelEditingData.PanelModels =
                        panelModelRepository.GetAll(ApplicationUserSessionHeader, parameters).OrderBy(o => o.
                            Display).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(GalaxyPanelEditingData.CpuModels)))
                {
                    var cpuModelRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuModelRepository>();
                    panelEditingData.CpuModels =
                        cpuModelRepository.GetAll(ApplicationUserSessionHeader, parameters).OrderBy(o => o.Display)
                            .ToCollection();
                }

                if (!parameters.IsExcluded(nameof(GalaxyPanelEditingData.InterfaceBoardTypes)))
                {
                    var interfaceBoardTypeRepository =
                        _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardTypeRepository>();

                    panelEditingData.InterfaceBoardTypes =
                        interfaceBoardTypeRepository.GetAll(ApplicationUserSessionHeader, parameters).
                            OrderBy(o => o.Display).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(GalaxyPanelEditingData.InterfaceBoardSectionModes)))
                {
                    var interfaceBoardSectionModeRepository = _DataRepositoryFactory.GetDataRepository<
                        IGalaxyInterfaceBoardSectionModeRepository>();
                    panelEditingData.InterfaceBoardSectionModes =
                        interfaceBoardSectionModeRepository.GetAll(ApplicationUserSessionHeader,
                            parameters).OrderBy(o => o.Display).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(GalaxyPanelEditingData.GalaxyHardwareModuleTypes)))
                {
                    var hardwareModuleTypeRepository =
                        _DataRepositoryFactory.GetDataRepository<IGalaxyHardwareModuleTypeRepository>();
                    panelEditingData.GalaxyHardwareModuleTypes =
                        hardwareModuleTypeRepository.GetAll(ApplicationUserSessionHeader,
                            parameters).OrderBy(o => o.Display).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(GalaxyPanelEditingData.InputOutputGroups)))
                {
                    var ioGroupRepository =
                        _DataRepositoryFactory.GetDataRepository<IGalaxyInputOutputGroupRepository>();
                    panelEditingData.InputOutputGroups = ioGroupRepository.GetAllGalaxyInputOutputGroupsForCluster(ApplicationUserSessionHeader, parameters).Items.OrderBy(o => o.Display).ToCollection();
                }


                if (!parameters.IsExcluded(nameof(GalaxyPanelEditingData.AlertEventTypes)))
                {
                    var alertEventTypeRepository =
                        _DataRepositoryFactory.GetDataRepository<IGalaxyPanelAlertEventTypeRepository>();
                    panelEditingData.AlertEventTypes = alertEventTypeRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(GalaxyPanelEditingData.TimeSchedules)))
                {
                    var timeScheduleRepository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
                    parameters.IncludeMemberCollections = false;
                    panelEditingData.TimeSchedules = timeScheduleRepository.GetAllTimeSchedulesForGalaxyCluster(ApplicationUserSessionHeader, parameters).Items.ToCollection();
                }

                if (!parameters.IsExcluded(nameof(GalaxyPanelEditingData.GalaxyPanelModel635Commands)))
                {
                    var _galaxyPanelCommandRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelCommandRepository>();
                    panelEditingData.GalaxyPanelModel635Commands = _galaxyPanelCommandRepository.GetAllGalaxyPanelCommandForPanelModel(ApplicationUserSessionHeader, new GetParametersWithPhoto() { UniqueId = GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635 }).ToCollection();
                }

                //if (!parameters.IsExcluded(nameof(GalaxyPanelEditingData.GalaxyPanelModel600Commands)))
                //{
                //    var _galaxyPanelCommandRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelCommandRepository>();
                //    panelEditingData.GalaxyPanelModel600Commands = _galaxyPanelCommandRepository.GetAllGalaxyPanelCommandForPanelModel(ApplicationUserSessionHeader, new GetParametersWithPhoto() { UniqueId = GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600 }).ToCollection();
                //}


                return panelEditingData;
            });
        }

        public ArrayResponse<ActivityHistoryEvent> GetGalaxyPanelActivityHistoryEvents(
            ActivityHistoryEventSearchParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelRepository>();
                var data = repository.GetActivityHistoryEvents(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<ActivityHistoryEvent>)data;
            });
        }


        #endregion

        #region Galaxy CPU Model Operations

        public GalaxyCpuModel[] GetAllGalaxyCpuModels(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuModelRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyCpuModel GetGalaxyCpuModel(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuModelRepository>();
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("GalaxyCpuModel with GalaxyCpuModelUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public GalaxyCpuModel SaveGalaxyCpuModel(SaveParameters<GalaxyCpuModel> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (!parameters.DoNotValidateAuthorization)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuModelRepository>();

                GalaxyCpuModel updatedItem = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format(
                                "GalaxyCpuModel with Display of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.Display));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.GalaxyCpuModelUid == Guid.Empty)
                {
                    parameters.Data.GalaxyCpuModelUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.GalaxyCpuModelUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedItem;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyCpuModelByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId
                );
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuModelRepository>();

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyCpuModel(DeleteParameters<GalaxyCpuModel> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId
                );
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuModelRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsGalaxyCpuModelReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuModelRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsGalaxyCpuModelUnique(GalaxyCpuModel data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuModelRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Galaxy CPU Operations

        public GalaxyCpu[] GetAllGalaxyCpus(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyCpu[] GetAllGalaxyCpusForCluster(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfCluster(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuRepository>();
                var data = repository.GetAllGalaxyCpusForCluster(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyCpu[] GetAllGalaxyCpusForPanel(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuRepository>();
                var data = repository.GetAllGalaxyCpusForPanel(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyCpu GetGalaxyCpu(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(GalaxyCpu), nameof(GalaxyCpu.CpuUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(string.Format("GalaxyCpu with GalaxyCpuUid of {0} is not in database",
                            parameters.
                                UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public GalaxyCpu SaveGalaxyCpu(SaveParameters<GalaxyCpu> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var panelRepo = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelRepository>();
                var entityId = panelRepo.GetEntityId(parameters.Data.GalaxyPanelUid);
                if (entityId == null)
                {
                    var ex = new ApplicationException($"GalaxyPanel with GalaxyPanelUid:{parameters.Data.GalaxyPanelUid} does not exist");
                    var detail = new ExceptionDetailEx(ex) { PreferredHttpStatusCode = HttpStatusCode.BadRequest };
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.CurrentEntityId = entityId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuRepository>();

                GalaxyCpu updatedItem = null;

                if (parameters.Data.PanelNumber == 0 && parameters.Data.GalaxyPanelUid != Guid.Empty)
                {
                    var panel = panelRepo.Get(parameters.Data.GalaxyPanelUid, this.ApplicationUserSessionHeader, new GetParametersWithPhoto(parameters));
                    if (panel != null)
                    {
                        parameters.Data.ClusterGroupId = panel.ClusterGroupId;
                        parameters.Data.ClusterNumber = panel.ClusterNumber;
                        parameters.Data.PanelNumber = panel.PanelNumber;
                        if (parameters.Data.GalaxyCpuModelUid == Guid.Empty)
                        {
                            // If 600 is specified, force it to 635
                            if (panel.GalaxyPanelModelUid == GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635 ||
                                panel.GalaxyPanelModelUid == GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600)
                            {
                                parameters.Data.GalaxyCpuModelUid = GalaxySMS.Common.Constants.GalaxyCpuTypeIds.GalaxyCpuType_635;
                            }
                            //else if (panel.GalaxyPanelModelUid == GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600)
                            //{
                            //    parameters.Data.GalaxyCpuModelUid = GalaxySMS.Common.Constants.GalaxyCpuTypeIds.GalaxyCpuType_600;
                            //}
                            else if (panel.GalaxyPanelModelUid == GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708)
                            {
                                parameters.Data.GalaxyCpuModelUid = GalaxySMS.Common.Constants.GalaxyCpuTypeIds.GalaxyCpuType_708;
                            }

                        }
                    }

                }

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format("GalaxyCpu with Number of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.CpuNumber));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.CpuUid == Guid.Empty)
                {
                    parameters.Data.CpuUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.CpuUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedItem;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public GalaxyCpuDatabaseInformation SaveGalaxyCpuConnectionInfo(SaveParameters<CpuConnectionInfo> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);

                var getParameters = new GetParametersWithPhoto()
                {
                    ClusterGroupId = parameters.Data.GalaxyCpuInformation.ClusterGroupId,
                    ClusterNumber = parameters.Data.GalaxyCpuInformation.ClusterNumber,
                    PanelNumber = parameters.Data.GalaxyCpuInformation.PanelNumber,
                    GetInt16 = parameters.Data.GalaxyCpuInformation.CpuId
                };

                var cpuRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuRepository>();
                var cpu = cpuRepository.GetByHardwareAddress(this.ApplicationUserSessionHeader, getParameters);

                if (cpu != null)
                {
                    var ex =
                        new DuplicateIndexException($"GalaxyCpu with ClusterGroupId:'{getParameters.ClusterGroupId}', ClusterNumber:{getParameters.ClusterNumber}, PanelNumber:{getParameters.PanelNumber}, CpuNumber:{parameters.Data.GalaxyCpuInformation.CpuId} cannot be saved because it is a duplicate.");
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                // Verify the cluster and galaxy panel based on incoming hardware address values
                var clusterRepository = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();
                var cluster = clusterRepository.GetByHardwareAddress(this.ApplicationUserSessionHeader, getParameters);

                if (cluster != null)
                {
                    // Only if the incoming data does not specify a ClusterUid value, assign the ClusterUid to the existing cluster read from the database
                    if (parameters.Data.GalaxyCpuInformation.ClusterUid == Guid.Empty)
                        parameters.Data.GalaxyCpuInformation.ClusterUid = cluster.ClusterUid;
                    if (parameters.Data.GalaxyCpuInformation.ClusterUid != cluster.ClusterUid)
                    {   // throw exception indicating that the requested ClusterUid does not match the hardware address of the cpu
                        var ex = new ApplicationException($"Cannot save CPU to the requested Cluster with ClusterUid:{parameters.Data.GalaxyCpuInformation.ClusterUid} because it does not match the existing Cluster with ClusterGroupId:{parameters.Data.GalaxyCpuInformation.ClusterGroupId} and ClusterNumber:{parameters.Data.GalaxyCpuInformation.ClusterNumber}.");
                        var detail = new ExceptionDetailEx(ex);
                        throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                    }
                }
                // Check to see if a cluster exists based on ClusterGroupId and ClusterNumber
                if (cluster == null)
                {    // Must first create a cluster
                    cluster = new Cluster()
                    {
                        EntityId = base.CurrentEntityId,
                        SiteUid = base.CurrentSiteId,
                        ClusterName = $"Cluster Group #:{parameters.Data.GalaxyCpuInformation.ClusterGroupId}, Cluster #:{parameters.Data.GalaxyCpuInformation.ClusterNumber}",
                        ClusterNumber = parameters.Data.GalaxyCpuInformation.ClusterNumber,
                        ClusterGroupId = parameters.Data.GalaxyCpuInformation.ClusterGroupId,
                        AccessPortalTypeUid = GalaxySMS.Common.Constants.AccessPortalTypeIds.AccessPortalType_StandardEntryPoint_StandardWiegand,
                    };
                    cluster.SetDefaults();
                    switch (parameters.Data.GalaxyCpuInformation.InqueryReply.CardCodeFormat)
                    {
                        case CredentialDataSize.Standard48Bits:
                            cluster.CredentialDataLengthUid = GalaxySMS.Common.Constants.CredentialDataLengthIds.Standard48Bits;
                            break;
                        case CredentialDataSize.Extended256Bits:
                            cluster.CredentialDataLengthUid = GalaxySMS.Common.Constants.CredentialDataLengthIds.Extended256Bits;
                            break;
                    }

                    switch (parameters.Data.GalaxyCpuInformation.InqueryReply.ModelNumber)
                    {
                        //case CpuModel.Cpu600:
                        //    cluster.ClusterTypeUid = GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid6xx;
                        //    break;
                        case CpuModel.Cpu635:
                            cluster.ClusterTypeUid = GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Hybrid7xx;
                            break;
                        case CpuModel.Cpu708:
                            cluster.ClusterTypeUid = GalaxySMS.Common.Constants.GalaxyClusterTypeIds.GalaxyClusterType_Only7xx;
                            break;
                    }

                    var savedCluster = SaveCluster(new SaveParameters<Cluster>(parameters)
                    {
                        Data = cluster
                    });
                    parameters.Data.GalaxyCpuInformation.ClusterUid = savedCluster.ClusterUid;
                }

                var galaxyPanelRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelRepository>();
                var panel = galaxyPanelRepository.GetByHardwareAddress(this.ApplicationUserSessionHeader, getParameters);

                if (cpu == null)
                {
                    cpu = new GalaxyCpu()
                    {
                        ClusterGroupId = parameters.Data.GalaxyCpuInformation.ClusterGroupId,
                        ClusterNumber = parameters.Data.GalaxyCpuInformation.ClusterNumber,
                        PanelNumber = parameters.Data.GalaxyCpuInformation.PanelNumber,
                        CpuNumber = (short)parameters.Data.GalaxyCpuInformation.CpuId,
                        SerialNumber = parameters.Data.GalaxyCpuInformation.InqueryReply.SerialNumber,
                        IpAddress = parameters.Data.RemoteIpEndpoint.Split(':')[0],
                        DefaultEventLoggingOn = true,
                        IsActive = true,
                        Model = (int)parameters.Data.GalaxyCpuInformation.InqueryReply.ModelNumber
                    };
                }

                switch (parameters.Data.GalaxyCpuInformation.InqueryReply.ModelNumber)
                {
                    //case CpuModel.Cpu600:
                    //    cpu.GalaxyCpuModelUid = GalaxySMS.Common.Constants.GalaxyCpuTypeIds.GalaxyCpuType_600;
                    //    break;
                    case CpuModel.Cpu635:
                        cpu.GalaxyCpuModelUid = GalaxySMS.Common.Constants.GalaxyCpuTypeIds.GalaxyCpuType_635;
                        break;
                    case CpuModel.Cpu708:
                        cpu.GalaxyCpuModelUid = GalaxySMS.Common.Constants.GalaxyCpuTypeIds.GalaxyCpuType_708;
                        break;
                }


                if (panel == null)
                {   // Must first create a panel
                    panel = new GalaxyPanel()
                    {
                        ClusterUid = parameters.Data.GalaxyCpuInformation.ClusterUid,
                        PanelName = $"Cluster Group #:{parameters.Data.GalaxyCpuInformation.ClusterGroupId}, Cluster #:{parameters.Data.GalaxyCpuInformation.ClusterNumber}, Panel #:{parameters.Data.GalaxyCpuInformation.PanelNumber}",
                        ClusterGroupId = parameters.Data.GalaxyCpuInformation.ClusterGroupId,
                        ClusterNumber = parameters.Data.GalaxyCpuInformation.ClusterNumber,
                        PanelNumber = parameters.Data.GalaxyCpuInformation.PanelNumber,
                        Location = $"Cluster Group #:{parameters.Data.GalaxyCpuInformation.ClusterGroupId}, Cluster #:{parameters.Data.GalaxyCpuInformation.ClusterNumber}, Panel #:{parameters.Data.GalaxyCpuInformation.PanelNumber}",
                    };

                    switch (parameters.Data.GalaxyCpuInformation.InqueryReply.ModelNumber)
                    {
                        case CpuModel.Cpu600:
                            panel.GalaxyPanelModelUid = GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_600;
                            break;
                        case CpuModel.Cpu635:
                            panel.GalaxyPanelModelUid = GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_635;
                            break;
                        case CpuModel.Cpu708:
                            panel.GalaxyPanelModelUid = GalaxySMS.Common.Constants.GalaxyPanelTypeIds.GalaxyPanelType_708;
                            break;
                    }
                    panel.Cpus.Add(cpu);

                    var kvpSaveGalaxyPanelCpuOption = parameters.Options.FirstOrDefault(o => o.Key == nameof(GalaxySMS.Common.Enums.SaveGalaxyPanelCpuOption).ToString());

                    bool bSaveBoards = !string.IsNullOrEmpty(kvpSaveGalaxyPanelCpuOption.Key) &&
                                               !string.IsNullOrEmpty(kvpSaveGalaxyPanelCpuOption.Value) &&
                                               kvpSaveGalaxyPanelCpuOption.Value == SaveGalaxyPanelCpuOption.SaveBoards.ToString();
                    if (bSaveBoards)
                    {
                        foreach (var b in parameters.Data.GalaxyCpuInformation.Boards.Boards)
                        {
                            var newBoard = new GalaxyInterfaceBoard()
                            {
                                BoardNumber = b.BoardNumber,
                            };
                            switch (b.FlashPackage)
                            {
                                case GalaxyInterfaceBoardType.DualReaderInterfaceBoard600:
                                    newBoard.InterfaceBoardTypeUid = GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds.GalaxyInterfaceBoardType_DualReaderInterface600;
                                    break;
                                case GalaxyInterfaceBoardType.DigitalInputOutputBoard600:
                                    newBoard.InterfaceBoardTypeUid = GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds.GalaxyInterfaceBoardType_DigitalInputOutput600;
                                    break;
                                //case GalaxyInterfaceBoardType.DualSerialInterfaceBoard600:
                                //    newBoard.InterfaceBoardTypeUid = GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds.GalaxyInterfaceBoardType_DualSerialInterface600;
                                //    break;
                                case GalaxyInterfaceBoardType.DualSerialInterfaceBoard600:
                                case GalaxyInterfaceBoardType.DualReaderInterfaceBoard635:
                                    newBoard.InterfaceBoardTypeUid = GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds.GalaxyInterfaceBoardType_DualReaderInterface635;
                                    break;
                                case GalaxyInterfaceBoardType.OtisElevatorInterface:
                                    newBoard.InterfaceBoardTypeUid = GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds.GalaxyInterfaceBoardType_OtisElevatorInterface;
                                    break;
                                case GalaxyInterfaceBoardType.DualSerialInterfaceBoard635:
                                    newBoard.InterfaceBoardTypeUid = GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds.GalaxyInterfaceBoardType_DualSerialInterface635;
                                    break;
                                case GalaxyInterfaceBoardType.KoneElevatorInterface:
                                    newBoard.InterfaceBoardTypeUid = GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds.GalaxyInterfaceBoardType_KoneElevatorInterface;
                                    break;
                                case GalaxyInterfaceBoardType.Veridt_ReaderModule:
                                    newBoard.InterfaceBoardTypeUid = GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds.GalaxyInterfaceBoardType_Veridt_ReaderModule;
                                    break;
                                case GalaxyInterfaceBoardType.Veridt_Cpu:
                                    newBoard.InterfaceBoardTypeUid = GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds.GalaxyInterfaceBoardType_Veridt_Cpu;
                                    break;

                                case GalaxyInterfaceBoardType.None:
                                case GalaxyInterfaceBoardType.DualPortInterfaceBoard500:
                                case GalaxyInterfaceBoardType.Cpu600:
                                case GalaxyInterfaceBoardType.Cpu635:
                                default:
                                    throw new ArgumentOutOfRangeException();
                            }

                            panel.InterfaceBoards.Add(newBoard);
                        }
                    }

                    var savedPanel = SaveGalaxyPanel(new SaveParameters<GalaxyPanel>(parameters)
                    {
                        Data = panel
                    });
                    panel.GalaxyPanelUid = savedPanel.GalaxyPanelUid;

                    parameters.Data.GalaxyCpuInformation.PanelUid = savedPanel.GalaxyPanelUid;
                }
                else
                {
                    cpu.GalaxyPanelUid = panel.GalaxyPanelUid;
                    var savedCpu = SaveGalaxyCpu(new SaveParameters<GalaxyCpu>(parameters)
                    {
                        Data = cpu
                    });
                    cpu.CpuUid = savedCpu.CpuUid;
                }

                var cpuInfo = cpuRepository.GetGalaxyCpuInformation(this.ApplicationUserSessionHeader, new GetHardwareAddressParameters()
                {
                    CpuUid = cpu.CpuUid
                    //ClusterGroupId = parameters.Data.GalaxyCpuInformation.ClusterGroupId,
                    //ClusterNumber = parameters.Data.GalaxyCpuInformation.ClusterNumber,
                    //PanelNumber = parameters.Data.GalaxyCpuInformation.PanelNumber,
                    //CpuNumber = parameters.Data.GalaxyCpuInformation.CpuId,
                });

                // Notify the communication connection about the new data.
                var sendParameters = new SendDataParameters<GalaxyCpuDatabaseInformation>()
                { PopulateDataFromDatabase = false, ApplicationUserSessionHeader = this.ApplicationUserSessionHeader };
                sendParameters.Data = cpuInfo.FirstOrDefault();
                Globals.Instance.MessageBroker.SendMessage(
                    new PDSAMessageBrokerMessage(MessageBrokerMessageNames.GalaxyCpuDatabaseInformationSaved, sendParameters));

                return cpuInfo?.FirstOrDefault();
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyCpuByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {

                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(GalaxyCpu), nameof(GalaxyCpu.CpuUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyCpu(DeleteParameters<GalaxyCpu> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.CpuUid, true, nameof(GalaxyCpu), nameof(GalaxyCpu.CpuUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsGalaxyCpuReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsGalaxyCpuUnique(GalaxyCpu data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public GalaxyCpuLoggingControl SaveGalaxyCpuLoggingControl(ISaveParameters<GalaxyCpuLoggingControl> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuLoggingControlRepository>();

                repository.SaveCpuLoggingControl(ApplicationUserSessionHeader, parameters);

                return parameters.Data;
            });
        }


        public bool ExecuteGalaxyCpuCommand(CommandParameters<GalaxyCpuCommandAction> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var permissionId = Guid.Empty;

                switch (parameters.Data.CommandAction)
                {
                    case GalaxyCpuCommandActionCode.ResetCpuWarm:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.ResetPanelWarm;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ResetControllerWarm;
                        break;

                    case GalaxyCpuCommandActionCode.ResetCpuCold:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.ResetPanelCold;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ResetControllerCold;
                        break;

                    case GalaxyCpuCommandActionCode.ClearAllCredentials:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.DeleteAllCards;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_DeleteAllCredentials;
                        break;

                    case GalaxyCpuCommandActionCode.ForgivePassbackForCredential:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.ForgivePassback;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ForgivePassback;
                        break;

                    case GalaxyCpuCommandActionCode.ForgivePassbackForAllCredentials:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.ForgiveAllPassback;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ForgiveAllPassback;
                        break;

                    case GalaxyCpuCommandActionCode.ActivateCrisisMode:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.ActivateCrisisMode;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ActivateCrisisMode;
                        break;

                    case GalaxyCpuCommandActionCode.ResetCrisisMode:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.ResetCrisisMode;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ResetCrisisMode;
                        break;

                    case GalaxyCpuCommandActionCode.EnableCredential:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.EnableCredential;
                        //parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_EnableCredential;
                        break;

                    case GalaxyCpuCommandActionCode.DisableCredential:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.DisableCredential;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_DisableCredential;
                        break;

                    case GalaxyCpuCommandActionCode.EnableDaughterBoardFlashUpdate:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.LoadPanelFlash;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_EnableDaughterBoardFlashUpdate;
                        break;

                    case GalaxyCpuCommandActionCode.Ping:
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_Ping;
                        break;

                    case GalaxyCpuCommandActionCode.RequestControllerInformation:
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_GetInfo;
                        break;

                    case GalaxyCpuCommandActionCode.RequestCredentialCount:
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_GetCardCount;
                        break;

                    case GalaxyCpuCommandActionCode.RequestLoggingInformation:
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_GetLoggingInfo;
                        break;

                    case GalaxyCpuCommandActionCode.RecalibrateInputsAndOutputs:
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_RecalibrateInputOutput;
                        break;

                    case GalaxyCpuCommandActionCode.ClearLoggingBuffer:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.ClearLogBuffer;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ClearLoggingBuffer;
                        break;

                    case GalaxyCpuCommandActionCode.RetransmitLoggingBuffer:
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_RetransmitLoggingBuffer;
                        break;

                    case GalaxyCpuCommandActionCode.RequestInputOutputGroupCounters:
                        break;

                    case GalaxyCpuCommandActionCode.RequestBoardInformation:
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_RequestBoardInformation;
                        break;

                    default:
                        throw new ArgumentOutOfRangeException();
                }

                // Verify that the caller (user) has permission to execute the requested command
                ValidateAuthorizationAndSetupDeviceOperation(parameters, permissionId, DeviceType.None);

                var commandRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelCommandRepository>();
                var cmd = commandRepository.Get(parameters.Data.CommandUid, ApplicationUserSessionHeader, new GetParametersWithPhoto());
                if (cmd == null || cmd.IsActive == false)
                {
                    // throw new UnauthorizedAccessException();
                    throw new ApplicationException($"{MagicExceptionStrings.forbidden} - {parameters.Data.CommandAction} command is not active.");
                }

                // Verify that the caller is permitted to execute this command for this device

                // Examine the incoming parameters and figure out which cpus to send command to. 
                // Start by putting the appropriate Uid values in the correct collection
                if (parameters.Data.ClusterUid != Guid.Empty)
                {
                    parameters.Data.ClusterUids.Add(parameters.Data.ClusterUid);
                }
                else if (parameters.Data.GalaxyPanelUid != Guid.Empty)
                {
                    parameters.Data.GalaxyPanelUids.Add(parameters.Data.GalaxyPanelUid);
                }
                else if (parameters.Data.CpuUid != Guid.Empty)
                {
                    parameters.Data.CpuUids.Add(parameters.Data.CpuUid);
                }

                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuRepository>();
                var cpuInfo = new List<GalaxyCpuDatabaseInformation>();
                if (parameters.Data.ClusterUids?.Count > 0)
                {
                    foreach (var uid in parameters.Data.ClusterUids.Where(o => o != Guid.Empty).Distinct())
                    {
                        var getHardwareAddressParameters = new GetHardwareAddressParameters() { ClusterUid = uid };
                        cpuInfo.AddRange(repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader, getHardwareAddressParameters));
                    }
                }
                else if (parameters.Data.GalaxyPanelUids?.Count > 0)
                {
                    foreach (var uid in parameters.Data.GalaxyPanelUids.Where(o => o != Guid.Empty).Distinct())
                    {
                        var getHardwareAddressParameters = new GetHardwareAddressParameters() { GalaxyPanelUid = uid };
                        cpuInfo.AddRange(repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader, getHardwareAddressParameters));
                    }
                }
                else if (parameters.Data.CpuUids?.Count > 0)
                {
                    foreach (var uid in parameters.Data.CpuUids.Where(o => o != Guid.Empty).Distinct())
                    {
                        var getHardwareAddressParameters = new GetHardwareAddressParameters() { CpuUid = uid };
                        cpuInfo.AddRange(repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader, getHardwareAddressParameters));
                    }
                }
                else if (parameters.Data.ClusterAddresses?.Count > 0)
                {
                    foreach (var addr in parameters.Data.ClusterAddresses)
                    {
                        var getHardwareAddressParameters = new GetHardwareAddressParameters() { ClusterGroupId = addr.ClusterGroupId, ClusterNumber = addr.ClusterNumber };
                        var o = repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader, getHardwareAddressParameters);
                        if (!o.Any())
                        {
                            cpuInfo.Add(new GalaxyCpuDatabaseInformation()
                            {
                                ClusterGroupId = addr.ClusterGroupId,
                                ClusterNumber = addr.ClusterNumber,
                                PanelNumber = (int)CpuHardwareAddress.SystemPanelAddress.AllPanels,
                                CpuNumber = (short)CpuHardwareAddress.CpuNumber.Both,
                            });
                        }
                        else
                            cpuInfo.AddRange(o);
                    }
                }
                else if (parameters.Data.CpuAddresses?.Count > 0)
                {
                    foreach (var addr in parameters.Data.CpuAddresses)
                    {
                        var getHardwareAddressParameters = new GetHardwareAddressParameters() { ClusterGroupId = addr.ClusterGroupId, ClusterNumber = addr.ClusterNumber, PanelNumber = addr.PanelNumber, CpuNumber = (short)addr.CpuId };
                        var o = repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader, getHardwareAddressParameters);
                        if (!o.Any())
                        {
                            cpuInfo.Add(new GalaxyCpuDatabaseInformation()
                            {
                                ClusterGroupId = addr.ClusterGroupId,
                                ClusterNumber = addr.ClusterNumber,
                                PanelNumber = addr.PanelNumber,
                                CpuNumber = addr.CpuId,
                            });
                        }
                        else
                            cpuInfo.AddRange(o);

                    }
                }

                switch (parameters.Data.CommandAction)
                {
                    case GalaxyCpuCommandActionCode.ForgivePassbackForCredential:
                    case GalaxyCpuCommandActionCode.EnableCredential:
                    case GalaxyCpuCommandActionCode.DisableCredential:
                        if (parameters.Data.CredentialUid != Guid.Empty)
                        {
                            var credentialRepo = _DataRepositoryFactory.GetDataRepository<ICredentialRepository>();
                            var getParams = new GetParametersWithPhoto() { };
                            var cred = credentialRepo.Get(parameters.Data.CredentialUid, ApplicationUserSessionHeader, getParams);
                            if (cred != null)
                            {
                                if (parameters.Data.CommandAction != GalaxyCpuCommandActionCode.ForgivePassbackForCredential)
                                {
                                    getParams.UniqueId = cred.CredentialUid;
                                    var personCredRepo = _DataRepositoryFactory.GetDataRepository<IPersonCredentialRepository>();
                                    var pc = personCredRepo.GetByCredentialUid(ApplicationUserSessionHeader, getParams);
                                    if (pc != null)
                                    {
                                        pc.IsActive = parameters.Data.CommandAction ==
                                                      GalaxyCpuCommandActionCode.EnableCredential;
                                        pc.UpdateDate = DateTimeOffset.Now;
                                        pc.UpdateName = LoginName;
                                        personCredRepo.Update(pc, ApplicationUserSessionHeader, new SaveParameters());
                                    }
                                }
                                parameters.Data.CredentialBytes = cred.CardBinaryData;
                            }
                        }
                        else if (!string.IsNullOrEmpty(parameters.Data.CredentialBytesString))
                        {
                            switch (parameters.Data.StringEncodingFormat)
                            {
                                case StringEncodingFormat.None:
                                    break;
                                case StringEncodingFormat.Hexadecimal:
                                    int discardedCount = 0;
                                    parameters.Data.CredentialBytes = HexEncoding.GetBytesFromHexString(parameters.Data.CredentialBytesString, CredentialDataByteArrayLength.Extended256Bits, out discardedCount);
                                    break;
                                case StringEncodingFormat.Base64String:
                                    parameters.Data.CredentialBytes = parameters.Data.CredentialBytesString.ConvertBase64StringToByteArray();
                                    break;
                            }
                        }
                        break;
                }

                var uniqueClusterUids = cpuInfo.Select(o => o.ClusterUid).Distinct().ToList();
                if (uniqueClusterUids.Any())
                {
                    var clusterRepo = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();
                    foreach (var clusterUid in uniqueClusterUids)
                    {
                        // Verify that the caller is permitted to execute this command for this device
                        var entityId = GetEntityIdOfCluster(clusterUid, false);
                        if (!clusterRepo.DoesUserHavePermission(ApplicationUserSessionHeader, clusterUid, permissionId, entityId))
                        {
                            throw new UnauthorizedAccessException($"UserName '{this.ApplicationUserSessionHeader.UserName}' does not have permissions to execute the {parameters.Data.CommandAction} command on cluster {clusterUid}");
                        }
                    }
                }

                // Now spin through the cpuInfo collection and send the command to each one
                foreach (var c in cpuInfo)
                {
                    var sendParameters = new SendDataParameters<GalaxyCpuCommandAction>()
                    {
                        PopulateDataFromDatabase = false,
                        ApplicationUserSessionHeader = this.ApplicationUserSessionHeader,
                        Data = parameters.Data,
                        OperationUid = parameters.OperationUid,
                        NotifySignalRSession = parameters.NotifySignalRSession,
                        SendToAddress = new BoardSectionNodeHardwareAddress()
                        {
                            ClusterGroupId = c.ClusterGroupId,
                            ClusterNumber = c.ClusterNumber,
                            PanelNumber = c.PanelNumber,
                            CpuId = (short)c.CpuNumber,
                            ClusterUid = c.ClusterUid,
                            PanelUid = c.GalaxyPanelUid,
                            CpuUid = c.CpuUid
                        }
                    };

                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendCpuCommandToHardware, sendParameters));

                }
                return true;
            });
        }

        public CommandResponse<GalaxyCpuCommandAction> ExecuteClusterCommand(CommandParameters<GalaxyCpuCommandAction> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var permissionId = Guid.Empty;

                if (parameters.OperationUid == Guid.Empty)
                    parameters.OperationUid = GuidUtilities.GenerateComb();
                parameters.RequestDateTime = DateTimeOffset.UtcNow;

                var response = new CommandResponse<GalaxyCpuCommandAction>(parameters) { ApproximateDuration = Globals.Instance.ApproximateDuration, TimeoutSeconds = Globals.Instance.CommandTimeoutSeconds };

                switch (parameters.Data.CommandAction)
                {
                    case GalaxyCpuCommandActionCode.ResetCpuWarm:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.ResetPanelWarm;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ResetControllerWarm;
                        response.ApproximateDuration = 45;
                        break;

                    case GalaxyCpuCommandActionCode.ResetCpuCold:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.ResetPanelCold;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ResetControllerCold;
                        response.ApproximateDuration = 45;
                        break;

                    case GalaxyCpuCommandActionCode.ClearAllCredentials:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.DeleteAllCards;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_DeleteAllCredentials;
                        response.ApproximateDuration = 10;
                        break;

                    case GalaxyCpuCommandActionCode.ForgivePassbackForCredential:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.ForgivePassback;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ForgivePassback;
                        break;

                    case GalaxyCpuCommandActionCode.ForgivePassbackForAllCredentials:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.ForgiveAllPassback;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ForgiveAllPassback;
                        break;

                    case GalaxyCpuCommandActionCode.ActivateCrisisMode:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.ActivateCrisisMode;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ActivateCrisisMode;
                        break;

                    case GalaxyCpuCommandActionCode.ResetCrisisMode:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.ResetCrisisMode;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ResetCrisisMode;
                        break;

                    case GalaxyCpuCommandActionCode.EnableCredential:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.EnableCredential;
                        //parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_EnableCredential;
                        break;

                    case GalaxyCpuCommandActionCode.DisableCredential:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.DisableCredential;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_DisableCredential;
                        break;

                    case GalaxyCpuCommandActionCode.EnableDaughterBoardFlashUpdate:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.LoadPanelFlash;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_EnableDaughterBoardFlashUpdate;
                        break;

                    case GalaxyCpuCommandActionCode.Ping:
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_Ping;
                        break;

                    case GalaxyCpuCommandActionCode.RequestControllerInformation:
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_GetInfo;
                        break;

                    case GalaxyCpuCommandActionCode.RequestCredentialCount:
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_GetCardCount;
                        break;

                    case GalaxyCpuCommandActionCode.RequestLoggingInformation:
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_GetLoggingInfo;
                        break;

                    case GalaxyCpuCommandActionCode.RecalibrateInputsAndOutputs:
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_RecalibrateInputOutput;
                        break;

                    case GalaxyCpuCommandActionCode.ClearLoggingBuffer:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.ClearLogBuffer;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_ClearLoggingBuffer;
                        break;

                    case GalaxyCpuCommandActionCode.RetransmitLoggingBuffer:
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_RetransmitLoggingBuffer;
                        break;

                    case GalaxyCpuCommandActionCode.StartLogging:
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_StartLogging;
                        break;

                    case GalaxyCpuCommandActionCode.StopLogging:
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_StopLogging;
                        break;

                    case GalaxyCpuCommandActionCode.RequestBoardInformation:
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_RequestBoardInformation;
                        break;

                    case GalaxyCpuCommandActionCode.None:
                    case GalaxyCpuCommandActionCode.RequestInputOutputGroupCounters:
                    case GalaxyCpuCommandActionCode.BeginFlashLoad:
                    case GalaxyCpuCommandActionCode.ValidateFlash:
                    case GalaxyCpuCommandActionCode.ValidateAndBurnFlash:
                    default:
                        throw new ArgumentOutOfRangeException();
                }

                // Verify that the caller (user) has permission to execute the requested command
                ValidateAuthorizationAndSetupDeviceOperation(parameters, permissionId, DeviceType.None);

                var commandRepository = _DataRepositoryFactory.GetDataRepository<IClusterCommandRepository>();
                var cmd = commandRepository.Get(parameters.Data.CommandUid, ApplicationUserSessionHeader, new GetParametersWithPhoto());
                if (cmd == null || cmd.IsActive == false)
                {
                    // throw new UnauthorizedAccessException();
                    throw new ApplicationException($"{MagicExceptionStrings.forbidden} - {parameters.Data.CommandAction} command is not active.");
                }

                // Verify that the caller is permitted to execute this command for this device

                // Examine the incoming parameters and figure out which cpus to send command to. 
                // Start by putting the appropriate Uid values in the correct collection
                if (parameters.Data.ClusterUid != Guid.Empty)
                {
                    parameters.Data.ClusterUids.Add(parameters.Data.ClusterUid);
                }
                else if (parameters.Data.GalaxyPanelUid != Guid.Empty)
                {
                    parameters.Data.GalaxyPanelUids.Add(parameters.Data.GalaxyPanelUid);
                }
                else if (parameters.Data.CpuUid != Guid.Empty)
                {
                    parameters.Data.CpuUids.Add(parameters.Data.CpuUid);
                }

                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuRepository>();

                var cpuInfo = new List<GalaxyCpuDatabaseInformation>();
                if (parameters.Data.ClusterUids?.Count > 0)
                {
                    foreach (var uid in parameters.Data.ClusterUids.Where(o => o != Guid.Empty).Distinct())
                    {
                        var getHardwareAddressParameters = new GetHardwareAddressParameters() { ClusterUid = uid };
                        cpuInfo.AddRange(repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader, getHardwareAddressParameters));
                    }
                }

                if (parameters.Data.GalaxyPanelUids?.Count > 0)
                {
                    foreach (var uid in parameters.Data.GalaxyPanelUids.Where(o => o != Guid.Empty).Distinct())
                    {
                        var getHardwareAddressParameters = new GetHardwareAddressParameters() { GalaxyPanelUid = uid };
                        var cpusForPanels = repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader,
                            getHardwareAddressParameters);
                        foreach (var c in cpusForPanels)
                        {
                            var existingCpu = cpuInfo.FirstOrDefault(o => o.CpuUid == c.CpuUid);
                            if (existingCpu == null)
                                cpuInfo.Add(c);
                            //cpuInfo.AddRange(repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader,
                            //    getHardwareAddressParameters));
                        }
                    }
                }

                if (parameters.Data.CpuUids?.Count > 0)
                {
                    foreach (var uid in parameters.Data.CpuUids.Where(o => o != Guid.Empty).Distinct())
                    {
                        var getHardwareAddressParameters = new GetHardwareAddressParameters() { CpuUid = uid };
                        var cpusForCpu = repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader, getHardwareAddressParameters);
                        foreach (var c in cpusForCpu)
                        {
                            var existing = cpuInfo.FirstOrDefault(o => o.CpuUid == c.CpuUid);
                            if (existing == null)
                                cpuInfo.Add(c);
                            //cpuInfo.AddRange(repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader,
                            //    getHardwareAddressParameters));
                        }
                        //cpuInfo.AddRange(repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader, getHardwareAddressParameters));
                    }
                }

                if (!cpuInfo.Any())
                {
                    if (parameters.Data.ClusterAddresses?.Count > 0)
                    {
                        foreach (var addr in parameters.Data.ClusterAddresses)
                        {
                            var getHardwareAddressParameters = new GetHardwareAddressParameters()
                            { ClusterGroupId = addr.ClusterGroupId, ClusterNumber = addr.ClusterNumber };
                            cpuInfo.AddRange(repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader,
                                getHardwareAddressParameters));
                        }
                    }
                    else if (parameters.Data.CpuAddresses?.Count > 0)
                    {
                        foreach (var addr in parameters.Data.CpuAddresses)
                        {
                            var getHardwareAddressParameters = new GetHardwareAddressParameters()
                            {
                                ClusterGroupId = addr.ClusterGroupId,
                                ClusterNumber = addr.ClusterNumber,
                                PanelNumber = addr.PanelNumber,
                                CpuNumber = (short)addr.CpuId
                            };
                            cpuInfo.AddRange(repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader,
                                getHardwareAddressParameters));
                        }
                    }
                }

                switch (parameters.Data.CommandAction)
                {
                    case GalaxyCpuCommandActionCode.ForgivePassbackForCredential:
                    case GalaxyCpuCommandActionCode.EnableCredential:
                    case GalaxyCpuCommandActionCode.DisableCredential:
                        if (parameters.Data.CredentialUids == null)
                            parameters.Data.CredentialUids = new List<Guid>();

                        if (parameters.Data.CredentialUid != Guid.Empty)
                        {
                            if (!parameters.Data.CredentialUids.Contains(parameters.Data.CredentialUid))
                                parameters.Data.CredentialUids.Add(parameters.Data.CredentialUid);
                        }
                        if (parameters.Data.CredentialUids.Any())
                        {
                            var credentialRepo = _DataRepositoryFactory.GetDataRepository<ICredentialRepository>();
                            var getParams = new GetParametersWithPhoto() { };

                            foreach (var uid in parameters.Data.CredentialUids)
                            {
                                var cred = credentialRepo.Get(uid, ApplicationUserSessionHeader, getParams);
                                if (cred != null)
                                {
                                    if (parameters.Data.CommandAction != GalaxyCpuCommandActionCode.ForgivePassbackForCredential)
                                    {
                                        getParams.UniqueId = cred.CredentialUid;
                                        var personCredRepo = _DataRepositoryFactory.GetDataRepository<IPersonCredentialRepository>();
                                        var pc = personCredRepo.GetByCredentialUid(ApplicationUserSessionHeader,
                                            getParams);
                                        if (pc != null)
                                        {
                                            pc.IsActive = parameters.Data.CommandAction == GalaxyCpuCommandActionCode.EnableCredential;
                                            pc.UpdateDate = DateTimeOffset.Now;
                                            pc.UpdateName = LoginName;
                                            personCredRepo.Update(pc, ApplicationUserSessionHeader, new SaveParameters());
                                        }
                                    }

                                    parameters.Data.CredentialBytes = cred.CardBinaryData;
                                    parameters.Data.CredentialBytesList.Add(cred.CardBinaryData);
                                }
                            }
                        }
                        else if (!string.IsNullOrEmpty(parameters.Data.CredentialBytesString))
                        {
                            switch (parameters.Data.StringEncodingFormat)
                            {
                                case StringEncodingFormat.None:
                                    break;
                                case StringEncodingFormat.Hexadecimal:
                                    int discardedCount = 0;
                                    parameters.Data.CredentialBytes = HexEncoding.GetBytesFromHexString(parameters.Data.CredentialBytesString, CredentialDataByteArrayLength.Extended256Bits, out discardedCount);
                                    break;
                                case StringEncodingFormat.Base64String:
                                    parameters.Data.CredentialBytes = parameters.Data.CredentialBytesString.ConvertBase64StringToByteArray();
                                    break;
                            }
                        }
                        break;
                }

                var uniqueClusterUids = cpuInfo.Select(o => o.ClusterUid).Distinct().ToList();
                if (uniqueClusterUids.Any())
                {
                    var clusterRepo = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();
                    foreach (var clusterUid in uniqueClusterUids)
                    {
                        // Verify that the caller is permitted to execute this command for this device
                        var entityId = GetEntityIdOfCluster(clusterUid, false);
                        if (!clusterRepo.DoesUserHavePermission(ApplicationUserSessionHeader, clusterUid, permissionId, entityId))
                        {
                            throw new UnauthorizedAccessException($"UserName '{this.ApplicationUserSessionHeader.UserName}' does not have permissions to execute the {parameters.Data.CommandAction} command on cluster {clusterUid}");
                        }
                    }
                }

                // Now spin through the cpuInfo collection and send the command to each one
                foreach (var c in cpuInfo)
                {
                    if (c.CpuIsActive)
                    {
                        var panelSentTo =
                            response.PanelsSentTo.FirstOrDefault(o => o.GalaxyPanelUid == c.GalaxyPanelUid);
                        if (panelSentTo == null)
                        {
                            panelSentTo = new PanelCommandResponseInfo()
                            {
                                GalaxyPanelUid = c.GalaxyPanelUid
                            };
                            response.PanelsSentTo.Add(panelSentTo);
                        }

                        panelSentTo.Cpus.Add(new CpuCommandResponseInfo()
                        {
                            CpuUid = c.CpuUid,
                            IsCpuOnline = c.IsConnected
                        });
                        if (c.IsConnected)
                            panelSentTo.IsPanelOnline = c.IsConnected;

                        if (c.IsConnected)
                        {
                            var sendParameters = new SendDataParameters<GalaxyCpuCommandAction>()
                            {
                                PopulateDataFromDatabase = false,
                                ApplicationUserSessionHeader = this.ApplicationUserSessionHeader,
                                Data = parameters.Data,
                                OperationUid = parameters.OperationUid,
                                NotifySignalRSession = parameters.NotifySignalRSession,
                                SendToAddress = new BoardSectionNodeHardwareAddress()
                                {
                                    ClusterGroupId = c.ClusterGroupId,
                                    ClusterNumber = c.ClusterNumber,
                                    PanelNumber = c.PanelNumber,
                                    CpuId = (short)c.CpuNumber,
                                    ClusterUid = parameters.Data.ClusterUid
                                }
                            };

                            Globals.Instance.MessageBroker.SendMessage(
                                new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendClusterCommandToHardware,
                                    sendParameters));
                        }
                    }
                }
                return response;
            });
        }

        public bool ExecuteGalaxyLoadFlashCommand(CommandParameters<GalaxyLoadFlashCommandAction> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var permissionId = Guid.Empty;

                switch (parameters.Data.CommandAction)
                {
                    case GalaxyLoadFlashCommandActionCode.BeginFlashLoad:
                    case GalaxyLoadFlashCommandActionCode.BeginFlashLoadAutoValidateAndBurnFlashData:
                    case GalaxyLoadFlashCommandActionCode.BeginFlashLoadAutoValidateFlashData:
                    case GalaxyLoadFlashCommandActionCode.CancelFlashLoad:
                    case GalaxyLoadFlashCommandActionCode.PauseFlashLoad:
                    case GalaxyLoadFlashCommandActionCode.ResumeFlashLoad:
                    case GalaxyLoadFlashCommandActionCode.ValidateAndBurnFlashData:
                    case GalaxyLoadFlashCommandActionCode.ValidateFlashData:
                        permissionId = PermissionIds.GalaxySMSClusterCommandPermission.LoadPanelFlash;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyClusterCommandIds.GalaxyClusterCommand_EnableDaughterBoardFlashUpdate;
                        break;


                    default:
                        throw new ArgumentOutOfRangeException();
                }

                // Verify that the caller (user) has permission to execute the requested command
                ValidateAuthorizationAndSetupDeviceOperation(parameters, permissionId, DeviceType.None);

                var commandRepository = _DataRepositoryFactory.GetDataRepository<IClusterCommandRepository>();
                var cmd = commandRepository.Get(parameters.Data.CommandUid, ApplicationUserSessionHeader, new GetParametersWithPhoto());
                if (cmd == null || cmd.IsActive == false)
                {
                    // throw new UnauthorizedAccessException();
                    throw new ApplicationException($"{MagicExceptionStrings.forbidden} - {parameters.Data.CommandAction} command is not active.");
                }

                // Verify that the caller is permitted to execute this command for this device

                // Examine the incoming parameters and figure out which cpus to send command to. 
                // Start by putting the appropriate Uid values in the correct collection
                if (parameters.Data.ClusterUid != Guid.Empty)
                {
                    parameters.Data.ClusterUids.Add(parameters.Data.ClusterUid);
                }
                else if (parameters.Data.GalaxyPanelUid != Guid.Empty)
                {
                    parameters.Data.GalaxyPanelUids.Add(parameters.Data.GalaxyPanelUid);
                }
                else if (parameters.Data.CpuUid != Guid.Empty)
                {
                    parameters.Data.CpuUids.Add(parameters.Data.CpuUid);
                }

                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyCpuRepository>();
                var cpuInfo = new List<GalaxyCpuDatabaseInformation>();
                if (parameters.Data.ClusterUids?.Count > 0)
                {
                    foreach (var uid in parameters.Data.ClusterUids.Where(o => o != Guid.Empty).Distinct())
                    {
                        var getHardwareAddressParameters = new GetHardwareAddressParameters() { ClusterUid = uid };
                        cpuInfo.AddRange(repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader, getHardwareAddressParameters));
                    }
                }
                else if (parameters.Data.GalaxyPanelUids?.Count > 0)
                {
                    foreach (var uid in parameters.Data.GalaxyPanelUids.Where(o => o != Guid.Empty).Distinct())
                    {
                        var getHardwareAddressParameters = new GetHardwareAddressParameters() { GalaxyPanelUid = uid };
                        cpuInfo.AddRange(repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader, getHardwareAddressParameters));
                    }
                }
                else if (parameters.Data.CpuUids?.Count > 0)
                {
                    foreach (var uid in parameters.Data.CpuUids.Where(o => o != Guid.Empty).Distinct())
                    {
                        var getHardwareAddressParameters = new GetHardwareAddressParameters() { CpuUid = uid };
                        cpuInfo.AddRange(repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader, getHardwareAddressParameters));
                    }
                }
                else if (parameters.Data.ClusterAddresses?.Count > 0)
                {
                    foreach (var addr in parameters.Data.ClusterAddresses)
                    {
                        var getHardwareAddressParameters = new GetHardwareAddressParameters() { ClusterGroupId = addr.ClusterGroupId, ClusterNumber = addr.ClusterNumber };
                        cpuInfo.AddRange(repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader, getHardwareAddressParameters));
                    }
                }
                else if (parameters.Data.CpuAddresses?.Count > 0)
                {
                    foreach (var addr in parameters.Data.CpuAddresses)
                    {
                        var getHardwareAddressParameters = new GetHardwareAddressParameters() { ClusterGroupId = addr.ClusterGroupId, ClusterNumber = addr.ClusterNumber, PanelNumber = addr.PanelNumber, CpuNumber = (short)addr.CpuId };
                        cpuInfo.AddRange(repository.GetGalaxyCpuInformation(ApplicationUserSessionHeader, getHardwareAddressParameters));
                    }
                }

                switch (parameters.Data.CommandAction)
                {
                }

                // Now spin through the cpuInfo collection and send the command to each one
                foreach (var c in cpuInfo)
                {
                    var sendParameters = new SendDataParameters<GalaxyLoadFlashCommandAction>()
                    {
                        PopulateDataFromDatabase = false,
                        ApplicationUserSessionHeader = this.ApplicationUserSessionHeader,
                        Data = parameters.Data,
                        OperationUid = parameters.OperationUid,
                        NotifySignalRSession = parameters.NotifySignalRSession,
                        SendToAddress = new BoardSectionNodeHardwareAddress()
                        {
                            ClusterGroupId = c.ClusterGroupId,
                            ClusterNumber = c.ClusterNumber,
                            PanelNumber = c.PanelNumber,
                            CpuId = (short)c.CpuNumber,
                        }
                    };

                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendGalaxyFlashCommandToHardware, sendParameters));

                }
                return true;
            });
        }

        #endregion

        #region Galaxy Interface Board Type Operations

        public InterfaceBoardType[] GetAllGalaxyInterfaceBoardTypes(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardTypeRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public InterfaceBoardType GetGalaxyInterfaceBoardType(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardTypeRepository>();
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("InterfaceBoardType with InterfaceBoardTypeUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public InterfaceBoardType SaveGalaxyInterfaceBoardType(SaveParameters<InterfaceBoardType> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (!parameters.DoNotValidateAuthorization)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardTypeRepository>();

                InterfaceBoardType updatedItem = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format(
                                "InterfaceBoardType with TypeCode of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.TypeCode));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.InterfaceBoardTypeUid == Guid.Empty)
                {
                    parameters.Data.InterfaceBoardTypeUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.InterfaceBoardTypeUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedItem;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyInterfaceBoardTypeByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId
                );
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardTypeRepository>();

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyInterfaceBoardType(DeleteParameters<InterfaceBoardType> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId
                );
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardTypeRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsGalaxyInterfaceBoardTypeReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardTypeRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsGalaxyInterfaceBoardTypeUnique(InterfaceBoardType data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardTypeRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Galaxy Interface Board Section Modes Operations

        public InterfaceBoardSectionMode[] GetAllGalaxyInterfaceBoardSectionModes(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionModeRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public InterfaceBoardSectionMode[] GetAllGalaxyInterfaceBoardSectionModesForType(
            GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionModeRepository>();
                var data = repository.GetAllGalaxyInterfaceBoardSectionModesForType(ApplicationUserSessionHeader,
                    parameters);

                return data.ToArray();
            });
        }

        public InterfaceBoardSectionMode GetGalaxyInterfaceBoardSectionMode(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionModeRepository>();
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex = new NotFoundException(string.Format(
                        "InterfaceBoardSectionMode with InterfaceBoardSectionModeUid of {0} is not in database",
                        parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public InterfaceBoardSectionMode SaveGalaxyInterfaceBoardSectionMode(SaveParameters<InterfaceBoardSectionMode>
            parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (!parameters.DoNotValidateAuthorization)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionModeRepository>();

                InterfaceBoardSectionMode updatedItem = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format("Region with ModeCode of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.ModeCode));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.InterfaceBoardSectionModeUid == Guid.Empty)
                {
                    parameters.Data.InterfaceBoardSectionModeUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.InterfaceBoardSectionModeUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedItem;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyInterfaceBoardSectionModeByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId
                );
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionModeRepository>();

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyInterfaceBoardSectionMode(DeleteParameters<InterfaceBoardSectionMode> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId
                );
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionModeRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsGalaxyInterfaceBoardSectionModeReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionModeRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsGalaxyInterfaceBoardSectionModeUnique(InterfaceBoardSectionMode data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionModeRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Galaxy Hardware Module Type Operations

        public GalaxyHardwareModuleType[] GetAllGalaxyHardwareModuleTypes(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyHardwareModuleTypeRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyHardwareModuleType GetGalaxyHardwareModuleType(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyHardwareModuleTypeRepository>();
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex = new NotFoundException(string.Format(
                        "GalaxyHardwareModuleType with GalaxyHardwareModuleTypeUid of {0} is not in database",
                        parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public GalaxyHardwareModuleType SaveGalaxyHardwareModuleType(SaveParameters<GalaxyHardwareModuleType> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (!parameters.DoNotValidateAuthorization)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyHardwareModuleTypeRepository>();

                GalaxyHardwareModuleType updatedItem = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format(
                                "GalaxyHardwareModuleType with ModuleTypeCode of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.ModuleTypeCode));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.GalaxyHardwareModuleTypeUid == Guid.Empty)
                {
                    parameters.Data.GalaxyHardwareModuleTypeUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.GalaxyHardwareModuleTypeUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedItem;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyHardwareModuleTypeByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId
                );
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyHardwareModuleTypeRepository>();

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyHardwareModuleType(DeleteParameters<GalaxyHardwareModuleType> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId
                );
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyHardwareModuleTypeRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsGalaxyHardwareModuleTypeReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyHardwareModuleTypeRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsGalaxyHardwareModuleTypeUnique(GalaxyHardwareModuleType data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyHardwareModuleTypeRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Galaxy Interface Board Operations

        public GalaxyInterfaceBoard[] GetAllGalaxyInterfaceBoards(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyInterfaceBoard[] GetAllGalaxyInterfaceBoardsForCluster(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfCluster(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardRepository>();
                var data = repository.GetAllGalaxyInterfaceBoardsForCluster(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyInterfaceBoard[] GetAllGalaxyInterfaceBoardsForPanel(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardRepository>();
                var data = repository.GetAllGalaxyInterfaceBoardsForPanel(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyInterfaceBoard[] GetAllGalaxyInterfaceBoardsForPanelAddress(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardRepository>();
                var data = repository.GetAllGalaxyInterfaceBoardsForPanelAddress(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyInterfaceBoard GetGalaxyInterfaceBoard(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(GalaxyInterfaceBoardSection), nameof(GalaxyInterfaceBoardSection.GalaxyInterfaceBoardSectionUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex = new NotFoundException(string.Format(
                        "GalaxyInterfaceBoard with GalaxyInterfaceBoardUid of {0} is not in database",
                        parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public GalaxyInterfaceBoard SaveGalaxyInterfaceBoard(SaveParameters<GalaxyInterfaceBoard> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                // Must validate EntityId is set correctly. If an update, the parent Uid may not be specified. If this is the case, the
                // it must be obtained before permissions can be validated
                var entityId = Guid.Empty;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardRepository>();
                if (parameters.Data.GalaxyInterfaceBoardUid != Guid.Empty)
                {
                    entityId = repository.GetEntityId(parameters.Data.GalaxyInterfaceBoardUid);
                }
                if (entityId == Guid.Empty && parameters.Data.GalaxyPanelUid != Guid.Empty)
                {
                    entityId = repository.GetParentEntityId(parameters.Data.GalaxyPanelUid);
                }

                if (entityId == Guid.Empty)
                {
                    var ex = new ApplicationException($"Cannot validate entityId for GalaxyInterfaceBoard");
                    var detail = new ExceptionDetailEx(ex) { PreferredHttpStatusCode = HttpStatusCode.BadRequest };
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.CurrentEntityId = entityId;
                if (repository.DoesExist(parameters.Data.GalaxyInterfaceBoardUid) == false)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                else
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanUpdateId);


                //var ambientTransaction = Transaction.Current;
                //this.Log().LogTransactionInformation($"{this.GetType().Name}.{System.Reflection.MethodBase.GetCurrentMethod()?.Name}");

                GalaxyInterfaceBoard updatedItem = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format(
                                "GalaxyInterfaceBoard with BoardNumber of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.BoardNumber));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.GalaxyInterfaceBoardUid == Guid.Empty)
                {
                    parameters.Data.GalaxyInterfaceBoardUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.GalaxyInterfaceBoardUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedItem;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyInterfaceBoardByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(GalaxyInterfaceBoardSection), nameof(GalaxyInterfaceBoardSection.GalaxyInterfaceBoardSectionUid));
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyInterfaceBoard(DeleteParameters<GalaxyInterfaceBoard> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId
                );
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsGalaxyInterfaceBoardReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsGalaxyInterfaceBoardUnique(GalaxyInterfaceBoard data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        public ValidationProblemDetails ValidateGalaxyInterfaceBoard(SaveParameters<GalaxyInterfaceBoard> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var response = new ValidationProblemDetails();
                var errorsArray = new List<string>();

                var editorDataParams = new GetParametersWithPhoto()
                {
                };
                editorDataParams.ExcludeMemberCollectionSettings.Add(nameof(GalaxyPanelEditingData.GalaxyPanelModel635Commands));
                editorDataParams.ExcludeMemberCollectionSettings.Add(nameof(GalaxyPanelEditingData.TimeSchedules));
                editorDataParams.ExcludeMemberCollectionSettings.Add(nameof(GalaxyPanelEditingData.InputOutputGroups));

                var editorData = GetGalaxyPanelEditingData(editorDataParams);

                var sections = new List<GalaxyInterfaceBoardSection>();
                if (parameters.Data.InterfaceBoardSections != null)
                    sections = parameters.Data.InterfaceBoardSections.ToList();

                var boardType =
                    editorData.InterfaceBoardTypes.FirstOrDefault(o =>
                        o.InterfaceBoardTypeUid == parameters.Data.InterfaceBoardTypeUid);
                var sectionModes =
                    editorData.InterfaceBoardSectionModes.Where(o =>
                        o.InterfaceBoardTypeUid == parameters.Data.InterfaceBoardTypeUid);

                if (boardType != null)
                {
                    if (sections.Count > boardType.NumberOfSections)
                    {
                        errorsArray.Add($"There are {sections.Count} sections specified. BoardType {boardType.TypeCode} can have {boardType.NumberOfSections} sections.");
                    }
                }

                var sectionIndex = 0;
                foreach (var s in sections)
                {
                    var sectionCount = sections.Count(o => o.SectionNumber == s.SectionNumber);
                    if (sectionCount > 1)
                    {
                        errorsArray.Add($"There are {sectionCount} sections specified with SectionNumber {s.SectionNumber}. SectionNumbers must be unique.");
                    }

                    if (boardType != null)
                    {
                        var sectionMode = sectionModes.FirstOrDefault(o =>
                                o.InterfaceBoardSectionModeUid == s.InterfaceBoardSectionModeUid);

                        if (sectionMode == null)
                            errorsArray.Add($"InterfaceBoardSections[{sectionIndex}].SectionMode is not valid for BoardType {boardType.TypeCode}.");
                    }

                    sectionIndex++;
                }

                if (parameters.Data.InterfaceBoardTypeUid == GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                        .GalaxyInterfaceBoardType_DualReaderInterface600)
                {
                    // there must be two sections, numbered 1 & 2
                    var invalidSections = sections.Where(o => o.SectionNumber < 1 || o.SectionNumber > 2);
                    foreach (var s in invalidSections)
                    {
                        errorsArray.Add(
                            $"Invalid section number {s.SectionNumber}. This board type can only have section numbers 1 and 2");
                    }
                }
                else if (parameters.Data.InterfaceBoardTypeUid == GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                             .GalaxyInterfaceBoardType_DualReaderInterface635)
                {
                    var invalidSections = sections.Where(o => o.SectionNumber < 1 || o.SectionNumber > 2);
                    foreach (var s in invalidSections)
                    {
                        //sections.Remove(s);
                        errorsArray.Add(
                            $"Invalid section number {s.SectionNumber}. This board type can only have section numbers 1 and 2");
                    }
                }
                else if (parameters.Data.InterfaceBoardTypeUid == GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                             .GalaxyInterfaceBoardType_DualSerialInterface635)
                {
                    var invalidSections = sections.Where(o => o.SectionNumber < 1 || o.SectionNumber > 2);
                    foreach (var s in invalidSections)
                    {
                        //sections.Remove(s);
                        errorsArray.Add($"Invalid section number {s.SectionNumber}. This board type can only have section numbers 1 and 2");
                    }

                    foreach (var s in sections)
                    {
                        var sectionMode = sectionModes.FirstOrDefault(o =>
                            o.InterfaceBoardSectionModeUid == s.InterfaceBoardSectionModeUid);

                        if (s.InterfaceBoardSectionModeUid != DualSerialInterface635ChannelModeIds
                                .DualSerialChannelMode_AllegionPimAba &&
                            s.InterfaceBoardSectionModeUid != DualSerialInterface635ChannelModeIds
                                .DualSerialChannelMode_AllegionPimWiegand &&
                            s.InterfaceBoardSectionModeUid != DualSerialInterface635ChannelModeIds
                                .DualSerialChannelMode_AssaAbloyAperio &&
                            s.InterfaceBoardSectionModeUid != DualSerialInterface635ChannelModeIds
                                .DualSerialChannelMode_CypressClockDisplay &&
                            s.InterfaceBoardSectionModeUid != DualSerialInterface635ChannelModeIds
                                .DualSerialChannelMode_ElevatorRelays &&
                            s.InterfaceBoardSectionModeUid != DualSerialInterface635ChannelModeIds
                                .DualSerialChannelMode_LCD_4x20Display &&
                            s.InterfaceBoardSectionModeUid != DualSerialInterface635ChannelModeIds
                                .DualSerialChannelMode_OutputRelays &&
                            s.InterfaceBoardSectionModeUid != DualSerialInterface635ChannelModeIds
                                .DualSerialChannelMode_SaltoSallis &&
                            s.InterfaceBoardSectionModeUid != DualSerialInterface635ChannelModeIds
                                .DualSerialChannelMode_RS485DoorModule &&
                            s.InterfaceBoardSectionModeUid != DualSerialInterface635ChannelModeIds
                                .DualSerialChannelMode_RS485InputModule &&
                            s.InterfaceBoardSectionModeUid !=
                            DualSerialInterface635ChannelModeIds.DualSerialChannelMode_Shell &&
                            s.InterfaceBoardSectionModeUid !=
                            DualSerialInterface635ChannelModeIds.DualSerialChannelMode_Unused &&
                            s.InterfaceBoardSectionModeUid != DualSerialInterface635ChannelModeIds
                                .DualSerialChannelMode_VeridtCac)
                            errorsArray.Add(
                                $"Invalid InterfaceBoardSectionModeUid ({s.InterfaceBoardSectionModeUid}) or SectionType ({sectionMode.ModeCode}) value for board type ({parameters.Data.InterfaceBoardTypeUid})");
                    }
                }
                else if (parameters.Data.InterfaceBoardTypeUid == GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                             .GalaxyInterfaceBoardType_DigitalInputOutput600)
                {

                }
                else if (parameters.Data.InterfaceBoardTypeUid == GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                             .GalaxyInterfaceBoardType_KoneElevatorInterface)
                {

                }
                else if (parameters.Data.InterfaceBoardTypeUid == GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                             .GalaxyInterfaceBoardType_OtisElevatorInterface)
                {

                }
                else if (parameters.Data.InterfaceBoardTypeUid ==
                         GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds.GalaxyInterfaceBoardType_Veridt_Cpu)
                {

                }
                else if (parameters.Data.InterfaceBoardTypeUid == GalaxySMS.Common.Constants.GalaxyInterfaceBoardTypeIds
                             .GalaxyInterfaceBoardType_Veridt_ReaderModule)
                {

                }
                //else if (parameters.Data.InterfaceBoardTypeUid == Common.Constants.GalaxyInterfaceBoardTypeIds.GalaxyInterfaceBoardType_CardTourManager)
                //{

                //}
                //else if (parameters.Data.InterfaceBoardTypeUid == Common.Constants.GalaxyInterfaceBoardTypeIds.GalaxyInterfaceBoardType_DualSerialInterface600)
                //{
                //    var invalidSections = sections.Where(o => o.SectionNumber < 1 || o.SectionNumber > 2);
                //    foreach (var s in invalidSections)
                //    {
                //        //sections.Remove(s);
                //        errorsArray.Add($"Invalid section number {s.SectionNumber}. This board type can only have section numbers 1 and 2");
                //    }
                //    foreach (var s in sections)
                //    {
                //        // If the InterfaceBoardSectionModeUid is not specified, then use the SectionType enum and assign the correct Uid value
                //        if (s.InterfaceBoardSectionModeUid == Guid.Empty)
                //        {
                //            switch (s.SectionMode)
                //            {
                //                case PanelInterfaceBoardSectionType.DsiIngersolRandPimClockData:
                //                    s.InterfaceBoardSectionModeUid = DualSerialInterface600ChannelModeIds.DualSerialChannelMode_AllegionPimAba;
                //                    break;

                //                case PanelInterfaceBoardSectionType.DsiIngersolRandPimWiegand:
                //                    s.InterfaceBoardSectionModeUid = DualSerialInterface600ChannelModeIds.DualSerialChannelMode_AllegionPimWiegand;
                //                    break;

                //                case PanelInterfaceBoardSectionType.DsiAssaAbloyAperio:
                //                    s.InterfaceBoardSectionModeUid = DualSerialInterface600ChannelModeIds.DualSerialChannelMode_AssaAbloyAperio;
                //                    break;

                //                case PanelInterfaceBoardSectionType.DsiCypressClockDisplay:
                //                    s.InterfaceBoardSectionModeUid = DualSerialInterface600ChannelModeIds.DualSerialChannelMode_CypressClockDisplay;
                //                    break;

                //                case PanelInterfaceBoardSectionType.DsiElevatorControlRelays:
                //                    s.InterfaceBoardSectionModeUid = DualSerialInterface600ChannelModeIds.DualSerialChannelMode_ElevatorRelays;
                //                    break;

                //                case PanelInterfaceBoardSectionType.DsiLcd4x20Display:
                //                    s.InterfaceBoardSectionModeUid = DualSerialInterface600ChannelModeIds.DualSerialChannelMode_LCD_4x20Display;
                //                    break;

                //                case PanelInterfaceBoardSectionType.DsiOutputControlRelays:
                //                    s.InterfaceBoardSectionModeUid = DualSerialInterface600ChannelModeIds.DualSerialChannelMode_OutputRelays;
                //                    break;

                //                case PanelInterfaceBoardSectionType.DsiSalto:
                //                    s.InterfaceBoardSectionModeUid = DualSerialInterface600ChannelModeIds.DualSerialChannelMode_SaltoSallis;
                //                    break;

                //                case PanelInterfaceBoardSectionType.DrmSection:
                //                case PanelInterfaceBoardSectionType.None:
                //                case PanelInterfaceBoardSectionType.Dio8X4Outputs:
                //                case PanelInterfaceBoardSectionType.Dio8X4Inputs:
                //                case PanelInterfaceBoardSectionType.DsiRs485DoorModule:
                //                case PanelInterfaceBoardSectionType.DsiRs485InputModule:
                //                case PanelInterfaceBoardSectionType.OtisElevatorInterfaceCpu:
                //                //case PanelInterfaceBoardSectionType.CardTourManagerCpu:
                //                case PanelInterfaceBoardSectionType.KoneElevatorInterfaceCpu:
                //                case PanelInterfaceBoardSectionType.VeridtCpu:
                //                case PanelInterfaceBoardSectionType.VeridtReader:
                //                    break;
                //            }
                //        }
                //        if (s.InterfaceBoardSectionModeUid != DualSerialInterface600ChannelModeIds.DualSerialChannelMode_AllegionPimAba &&
                //            s.InterfaceBoardSectionModeUid != DualSerialInterface600ChannelModeIds.DualSerialChannelMode_AllegionPimWiegand &&
                //            s.InterfaceBoardSectionModeUid != DualSerialInterface600ChannelModeIds.DualSerialChannelMode_AssaAbloyAperio &&
                //            s.InterfaceBoardSectionModeUid != DualSerialInterface600ChannelModeIds.DualSerialChannelMode_CypressClockDisplay &&
                //            s.InterfaceBoardSectionModeUid != DualSerialInterface600ChannelModeIds.DualSerialChannelMode_ElevatorRelays &&
                //            s.InterfaceBoardSectionModeUid != DualSerialInterface600ChannelModeIds.DualSerialChannelMode_LCD_4x20Display &&
                //            s.InterfaceBoardSectionModeUid != DualSerialInterface600ChannelModeIds.DualSerialChannelMode_OutputRelays &&
                //            s.InterfaceBoardSectionModeUid != DualSerialInterface600ChannelModeIds.DualSerialChannelMode_SaltoSallis &&
                //            s.InterfaceBoardSectionModeUid != DualSerialInterface600ChannelModeIds.DualSerialChannelMode_Shell &&
                //            s.InterfaceBoardSectionModeUid != DualSerialInterface600ChannelModeIds.DualSerialChannelMode_Unused &&
                //            s.InterfaceBoardSectionModeUid != DualSerialInterface600ChannelModeIds.DualSerialChannelMode_VeridtCac)
                //            return BadRequest($"Invalid InterfaceBoardSectionModeUid ({s.InterfaceBoardSectionModeUid}) or SectionType ({s.SectionMode}) value for board type ({parameters.Data.InterfaceBoardTypeUid})");
                //    }
                //}
                if (errorsArray.Any())
                    response.Errors.Add($"{nameof(GalaxyInterfaceBoard)}", errorsArray.ToArray());


                if (response.Errors.Any())
                {
                    return response;
                }

                return null;

            });
        }

        #endregion

        #region Galaxy Interface Board Section Operations

        public GalaxyInterfaceBoardSection[] GetAllGalaxyInterfaceBoardSections(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyInterfaceBoardSection[] GetAllGalaxyInterfaceBoardSectionsForCluster(
            GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var entityId = GetEntityIdOfCluster(parameters, true);
                parameters.CurrentEntityId = entityId;
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionRepository>();
                var data = repository.GetAllGalaxyInterfaceBoardSectionsForCluster(ApplicationUserSessionHeader,
                    parameters);

                return data.ToArray();
            });
        }

        public GalaxyInterfaceBoardSection[] GetAllGalaxyInterfaceBoardSectionsForPanel(
            GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionRepository>();
                var data = repository.GetAllGalaxyInterfaceBoardSectionsForPanel(ApplicationUserSessionHeader,
                    parameters);

                return data.ToArray();
            });
        }

        public GalaxyInterfaceBoardSection[] GetAllGalaxyInterfaceBoardSectionsForPanelAddress(
            GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionRepository>();
                var data = repository.GetAllGalaxyInterfaceBoardSectionsForPanelAddress(ApplicationUserSessionHeader,
                    parameters);

                return data.ToArray();
            });
        }

        public GalaxyInterfaceBoardSection[] GetAllGalaxyInterfaceBoardSectionsForInterfaceBoard(GetParametersWithPhoto
            parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionRepository>();
                var data = repository.GetAllGalaxyInterfaceBoardSectionsForInterfaceBoard(ApplicationUserSessionHeader,
                    parameters);

                return data.ToArray();
            });
        }

        public GalaxyInterfaceBoardSection GetGalaxyInterfaceBoardSection(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(GalaxyInterfaceBoardSection), nameof(GalaxyInterfaceBoardSection.GalaxyInterfaceBoardSectionUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex = new NotFoundException(string.Format(
                        "GalaxyInterfaceBoardSection with GalaxyInterfaceBoardSectionUid of {0} is not in database",
                        parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public GalaxyInterfaceBoardSection SaveGalaxyInterfaceBoardSection(SaveParameters<GalaxyInterfaceBoardSection>
            parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                // Must validate EntityId is set correctly. If an update, the parent Uid may not be specified. If this is the case, the
                // it must be obtained before permissions can be validated
                var entityId = Guid.Empty;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionRepository>();
                if (parameters.Data.GalaxyInterfaceBoardSectionUid != Guid.Empty)
                {
                    entityId = repository.GetEntityId(parameters.Data.GalaxyInterfaceBoardSectionUid);
                }
                if (entityId == Guid.Empty && parameters.Data.GalaxyInterfaceBoardUid != Guid.Empty)
                {
                    entityId = repository.GetParentEntityId(parameters.Data.GalaxyInterfaceBoardUid);
                }

                if (entityId == Guid.Empty)
                {
                    var ex = new ApplicationException($"Cannot validate entityId for GalaxyInterfaceBoardSection");
                    var detail = new ExceptionDetailEx(ex) { PreferredHttpStatusCode = HttpStatusCode.BadRequest };
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.CurrentEntityId = entityId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);

                GalaxyInterfaceBoardSection updatedItem = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format(
                                "GalaxyInterfaceBoardSection with SectionNumber of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.SectionNumber));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.GalaxyInterfaceBoardSectionUid == Guid.Empty)
                {
                    parameters.Data.GalaxyInterfaceBoardSectionUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.GalaxyInterfaceBoardSectionUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedItem;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyInterfaceBoardSectionByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(GalaxyInterfaceBoardSection), nameof(GalaxyInterfaceBoardSection.GalaxyInterfaceBoardSectionUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyInterfaceBoardSection(DeleteParameters<GalaxyInterfaceBoardSection> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.GalaxyInterfaceBoardSectionUid, true, nameof(GalaxyInterfaceBoardSection), nameof(GalaxyInterfaceBoardSection.GalaxyInterfaceBoardSectionUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsGalaxyInterfaceBoardSectionReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsGalaxyInterfaceBoardSectionUnique(GalaxyInterfaceBoardSection data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }


        public bool ExecuteGalaxyInterfaceBoardSectionCommand(CommandParameters<GalaxyInterfaceBoardSectionCommandAction> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.Data.GalaxyInterfaceBoardSectionUid == Guid.Empty)
                {
                    var ex = new ApplicationException("parameters.Data.GalaxyInterfaceBoardSectionUid is not specified");
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                var permissionId = Guid.Empty;

                switch (parameters.Data.CommandAction)
                {
                    case GalaxyInterfaceBoardSectionCommandActionCode.RequestSerialChannelRS485DeviceInfo:
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.GalaxyInterfaceBoardSectionCommandIds.GalaxyInterfaceBoardSectionCommand_RequestSerialChannelRS485DeviceInfo;
                        break;

                    default:
                        throw new ArgumentOutOfRangeException();
                }

                // Verify that the caller (user) has permission to execute the requested command
                ValidateAuthorizationAndSetupDeviceOperation(parameters, permissionId, DeviceType.None);

                var commandRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionCommandRepository>();
                var cmd = commandRepository.Get(parameters.Data.CommandUid, ApplicationUserSessionHeader, new GetParametersWithPhoto());
                if (cmd == null || cmd.IsActive == false)
                {
                    // throw new UnauthorizedAccessException();
                    throw new ApplicationException($"{MagicExceptionStrings.forbidden} - {parameters.Data.CommandAction} command is not active.");
                }

                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionRepository>();
                var bsInfo = repository.GetGalaxyInterfaceBoardSectionPanelLoadData(ApplicationUserSessionHeader,
                    new GetParametersWithPhoto()
                    {
                        UniqueId = parameters.Data.GalaxyInterfaceBoardSectionUid,
                        IncludePhoto = false
                    });

                if (bsInfo != null)
                {
                    ValidateUserHasEntityAccess(bsInfo.EntityId, true);

                    if (parameters.OperationUid == Guid.Empty)
                        parameters.OperationUid = GuidUtilities.GenerateComb();
                    parameters.Data.InterfaceBoardSectionHardwareInformation = bsInfo;
                    var sendParameters = new SendDataParameters<GalaxyInterfaceBoardSectionCommandAction>()
                    {
                        PopulateDataFromDatabase = false,
                        ApplicationUserSessionHeader = this.ApplicationUserSessionHeader,
                        Data = parameters.Data,
                        OperationUid = parameters.OperationUid,
                        NotifySignalRSession = parameters.NotifySignalRSession,
                        SendToAddress = new BoardSectionNodeHardwareAddress()
                        {
                            ClusterGroupId = bsInfo.ClusterGroupId,
                            ClusterNumber = bsInfo.ClusterNumber,
                            PanelNumber = bsInfo.PanelNumber,
                            CpuId = 3,
                            BoardNumber = bsInfo.BoardNumber,
                            SectionNumber = bsInfo.SectionNumber,
                        }
                    };


                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendGalaxyInterfaceBoardSectionCommandToHardware, sendParameters));
                    return true;
                }
                return false;
            });
        }
        #endregion

        #region Galaxy Interface Board Section Command Operations

        public GalaxyInterfaceBoardSectionCommand[] GetAllGalaxyInterfaceBoardSectionCommands(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionCommandRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyInterfaceBoardSectionCommand GetGalaxyInterfaceBoardSectionCommand(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionCommandRepository>();
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex = new NotFoundException(string.Format(
                        "GalaxyInterfaceBoardSectionCommand with GalaxyInterfaceBoardSectionCommandUid of {0} is not in database",
                        parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public GalaxyInterfaceBoardSectionCommand SaveGalaxyInterfaceBoardSectionCommand(SaveParameters<GalaxyInterfaceBoardSectionCommand>
            parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (!parameters.DoNotValidateAuthorization)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionCommandRepository>();

                GalaxyInterfaceBoardSectionCommand updatedItem = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format(
                                "GalaxyInterfaceBoardSectionCommand cannot be saved because it is a duplicate."));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.GalaxyInterfaceBoardSectionCommandUid == Guid.Empty)
                {
                    parameters.Data.GalaxyInterfaceBoardSectionCommandUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.GalaxyInterfaceBoardSectionCommandUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedItem;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyInterfaceBoardSectionCommandByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId
                );
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionCommandRepository>();

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyInterfaceBoardSectionCommand(DeleteParameters<GalaxyInterfaceBoardSectionCommand> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId
                );
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionCommandRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsGalaxyInterfaceBoardSectionCommandReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionCommandRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsGalaxyInterfaceBoardSectionCommandUnique(GalaxyInterfaceBoardSectionCommand data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionCommandRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Galaxy Hardware Module Operations

        public GalaxyHardwareModule[] GetAllGalaxyHardwareModules(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyHardwareModuleRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyHardwareModule[] GetAllGalaxyHardwareModulesForCluster(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfCluster(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyHardwareModuleRepository>();
                var data = repository.GetAllGalaxyHardwareModulesForCluster(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyHardwareModule[] GetAllGalaxyHardwareModulesForPanel(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyHardwareModuleRepository>();
                var data = repository.GetAllGalaxyHardwareModulesForPanel(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyHardwareModule[] GetAllGalaxyHardwareModulesForPanelAddress(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyHardwareModuleRepository>();
                var data = repository.GetAllGalaxyHardwareModulesForPanelAddress(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyHardwareModule[] GetAllGalaxyHardwareModulesForInterfaceBoard(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyHardwareModuleRepository>();
                var data = repository.GetAllGalaxyHardwareModulesForInterfaceBoard(ApplicationUserSessionHeader,
                    parameters);

                return data.ToArray();
            });
        }

        public GalaxyHardwareModule[] GetAllGalaxyHardwareModulesForInterfaceBoardSection(
            GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyHardwareModuleRepository>();
                var data = repository.GetAllGalaxyHardwareModulesForInterfaceBoardSection(ApplicationUserSessionHeader,
                    parameters);

                return data.ToArray();
            });
        }

        public GalaxyHardwareModule GetGalaxyHardwareModule(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyHardwareModuleRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(GalaxyHardwareModule), nameof(GalaxyHardwareModule.GalaxyHardwareModuleUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex = new NotFoundException(string.Format(
                        "GalaxyHardwareModule with GalaxyHardwareModuleUid of {0} is not in database",
                        parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public GalaxyHardwareModule SaveGalaxyHardwareModule(SaveParameters<GalaxyHardwareModule> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                // Must validate EntityId is set correctly. If an update, the parent Uid may not be specified. If this is the case, the
                // it must be obtained before permissions can be validated
                var entityId = Guid.Empty;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyHardwareModuleRepository>();
                if (parameters.Data.GalaxyHardwareModuleUid != Guid.Empty)
                {
                    entityId = repository.GetEntityId(parameters.Data.GalaxyHardwareModuleUid);
                }
                if (entityId == Guid.Empty && parameters.Data.GalaxyInterfaceBoardSectionUid.HasValue && parameters.Data.GalaxyInterfaceBoardSectionUid.Value != Guid.Empty)
                {
                    entityId = repository.GetParentEntityId(parameters.Data.GalaxyInterfaceBoardSectionUid.Value);
                }

                if (entityId == Guid.Empty)
                {
                    var ex = new ApplicationException($"Cannot validate entityId for GalaxyHardwareModule");
                    var detail = new ExceptionDetailEx(ex) { PreferredHttpStatusCode = HttpStatusCode.BadRequest };
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.CurrentEntityId = entityId;

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);

                GalaxyHardwareModule updatedItem = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format(
                                "GalaxyHardwareModule with ModuleNumber of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.ModuleNumber));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.GalaxyHardwareModuleUid == Guid.Empty)
                {
                    parameters.Data.GalaxyHardwareModuleUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.GalaxyHardwareModuleUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedItem;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyHardwareModuleByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyHardwareModuleRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(GalaxyHardwareModule), nameof(GalaxyHardwareModule.GalaxyHardwareModuleUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyHardwareModule(DeleteParameters<GalaxyHardwareModule> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyHardwareModuleRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.GalaxyHardwareModuleUid, true, nameof(GalaxyHardwareModule), nameof(GalaxyHardwareModule.GalaxyHardwareModuleUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsGalaxyHardwareModuleReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyHardwareModuleRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsGalaxyHardwareModuleUnique(GalaxyHardwareModule data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyHardwareModuleRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Galaxy Interface Board Section Node Operations

        public GalaxyInterfaceBoardSectionNode[] GetAllGalaxyInterfaceBoardSectionNodes(
            GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionNodeRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyInterfaceBoardSectionNode[] GetAllGalaxyInterfaceBoardSectionNodesForCluster(GetParametersWithPhoto
            parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfCluster(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionNodeRepository>();
                var data = repository.GetAllGalaxyInterfaceBoardSectionNodesForCluster(ApplicationUserSessionHeader,
                    parameters);

                return data.ToArray();
            });
        }

        public GalaxyInterfaceBoardSectionNode[] GetAllGalaxyInterfaceBoardSectionNodesForPanel(GetParametersWithPhoto
            parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionNodeRepository>();
                var data = repository.GetAllGalaxyInterfaceBoardSectionNodesForPanel(ApplicationUserSessionHeader,
                    parameters);

                return data.ToArray();
            });
        }


        public GalaxyInterfaceBoardSectionNode[] GetAllGalaxyInterfaceBoardSectionNodesForPanelAddress(GetParametersWithPhoto
            parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionNodeRepository>();
                var data = repository.GetAllGalaxyInterfaceBoardSectionNodesForPanelAddress(ApplicationUserSessionHeader,
                    parameters);

                return data.ToArray();
            });
        }



        public GalaxyInterfaceBoardSectionNode[] GetAllGalaxyInterfaceBoardSectionNodesForInterfaceBoard(
            GetParametersWithPhoto
                parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionNodeRepository>();
                var data =
                    repository.GetAllGalaxyInterfaceBoardSectionNodesForInterfaceBoard(ApplicationUserSessionHeader,
                        parameters);

                return data.ToArray();
            });
        }

        public GalaxyInterfaceBoardSectionNode[] GetAllGalaxyInterfaceBoardSectionNodesForInterfaceBoardSection(
            GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionNodeRepository>();
                var data =
                    repository.GetAllGalaxyInterfaceBoardSectionNodesForInterfaceBoardSection(
                        ApplicationUserSessionHeader,
                        parameters);

                return data.ToArray();
            });
        }

        public GalaxyInterfaceBoardSectionNode[] GetAllGalaxyInterfaceBoardSectionNodesForGalaxyHardwareModule(
            GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionNodeRepository>();
                var data =
                    repository.GetAllGalaxyInterfaceBoardSectionNodesForGalaxyHardwareModule(
                        ApplicationUserSessionHeader,
                        parameters);

                return data.ToArray();
            });
        }

        public GalaxyInterfaceBoardSectionNode GetGalaxyInterfaceBoardSectionNode(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionNodeRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(GalaxyInterfaceBoardSectionNode), nameof(GalaxyInterfaceBoardSectionNode.GalaxyInterfaceBoardSectionNodeUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex = new NotFoundException(string.Format(
                        "GalaxyInterfaceBoardSectionNode with GalaxyInterfaceBoardSectionNodeUid of {0} is not in database",
                        parameters.UniqueId
                    ));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public GalaxyInterfaceBoardSectionNode SaveGalaxyInterfaceBoardSectionNode(SaveParameters<
            GalaxyInterfaceBoardSectionNode> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionNodeRepository>();

                GalaxyInterfaceBoardSectionNode updatedItem = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format(
                                "GalaxyInterfaceBoardSectionNode with NodeNumber of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.NodeNumber));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.GalaxyInterfaceBoardSectionNodeUid == Guid.Empty)
                {
                    parameters.Data.GalaxyInterfaceBoardSectionNodeUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.GalaxyInterfaceBoardSectionNodeUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedItem;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyInterfaceBoardSectionNodeByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionNodeRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(GalaxyInterfaceBoardSectionNode), nameof(GalaxyInterfaceBoardSectionNode.GalaxyInterfaceBoardSectionNodeUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyInterfaceBoardSectionNode(DeleteParameters<GalaxyInterfaceBoardSectionNode> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionNodeRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.GalaxyInterfaceBoardSectionNodeUid, true, nameof(GalaxyInterfaceBoardSectionNode), nameof(GalaxyInterfaceBoardSectionNode.GalaxyInterfaceBoardSectionNodeUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsGalaxyInterfaceBoardSectionNodeReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionNodeRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsGalaxyInterfaceBoardSectionNodeUnique(GalaxyInterfaceBoardSectionNode data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInterfaceBoardSectionNodeRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Galaxy CPU Flash Image Operations

        public GalaxyFlashImage[] GetAllGalaxyFlashImages(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyFlashImageRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyFlashImage[] GetAllGalaxyFlashImagesForGalaxyCpuModelTypeCode(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyFlashImageRepository>();
                var data = repository.GetFlashImagesByGalaxyCpuModelTypeCode(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyFlashImage[] GetAllGalaxyFlashImagesForGalaxyCpuModelUid(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyFlashImageRepository>();
                var data = repository.GetFlashImagesByGalaxyCpuModelUid(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyFlashImage GetGalaxyFlashImage(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.None);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyFlashImageRepository>();
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("GalaxyFlashImage with GalaxyFlashImageUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public GalaxyFlashImage SaveGalaxyFlashImage(SaveParameters<GalaxyFlashImage> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);

                var flashHelper = new GCS.Framework.Flash.GalaxyFlashImageHelper();
                if (flashHelper.ReadFlashS28Buffer(parameters.Data.Data))
                {
                    parameters.Data.Checksum = flashHelper.SumCheckString;
                    parameters.Data.Description = flashHelper.Description;
                    parameters.Data.Package = flashHelper.PackageString;
                    parameters.Data.Version = flashHelper.Version;
                    switch ((FlashPackageType)flashHelper.Package)
                    {
                        case FlashPackageType.Package635Cpu:
                            parameters.Data.GalaxyCpuModelUid = GalaxySMS.Common.Constants.GalaxyCpuTypeIds.GalaxyCpuType_635;
                            break;

                        //case FlashPackageType.Package600Cpu:
                        //    parameters.Data.GalaxyCpuModelUid = GalaxySMS.Common.Constants.GalaxyCpuTypeIds.GalaxyCpuType_600;
                        //    break;

                        default:
                            var ex =
                               new ApplicationException(
                                   $"Invalid flash package:{flashHelper.Package}");
                            var detail = new ExceptionDetailEx(ex);
                            throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                            break;
                    }
                }



                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyFlashImageRepository>();

                GalaxyFlashImage updatedItem = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            $"GalaxyFlashImage '{parameters.Data.Package}:{parameters.Data.Version}:{parameters.Data.DataFormat}:GalaxyCpuModelUid={parameters.Data.GalaxyCpuModelUid}' cannot be saved because it is a duplicate.");
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.GalaxyFlashImageUid == Guid.Empty)
                {
                    parameters.Data.GalaxyFlashImageUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.GalaxyFlashImageUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedItem;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyFlashImageByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId
                );
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyFlashImageRepository>();

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyFlashImage(DeleteParameters<GalaxyFlashImage> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId
                );
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyFlashImageRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsGalaxyFlashImageReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyFlashImageRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsGalaxyFlashImageUnique(GalaxyFlashImage data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyFlashImageRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Galaxy Access Group Operations

        public ArrayResponse<AccessGroupEx> GetAllAccessGroups(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPermissionCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAccessGroupRepository>();
                var data = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);

                var result = ConvertToAccessGroupExArray(parameters, data, repository);
                return result;
            });
        }

        private static ArrayResponse<AccessGroupEx> ConvertToAccessGroupExArray(GetParametersWithPhoto parameters, IArrayResponse<AccessGroup> data,
            IGalaxyAccessGroupRepository repository)
        {
            var items = new List<AccessGroupEx>();
            var includeCounts = false;
            var includeCountsOption = parameters.GetOption(GalaxySMS.Common.Constants.GetOptions.IncludeCounts);
            if (includeCountsOption.HasValue)
                includeCounts = includeCountsOption.Value;

            foreach (var e in data.Items)
            {
                var r = new AccessGroupEx(e);
                if (includeCounts)
                    r.Counts = repository.GetNewestCountsForAccessGroup(e.AccessGroupUid);
                items.Add(r);
            }

            var result = new ArrayResponse<AccessGroupEx>()
            {
                Items = items.ToArray(),
                PageItemCount = data.PageItemCount,
                PageNumber = data.PageNumber,
                PageSize = data.PageSize,
                TotalItemCount = data.TotalItemCount,
                TotalPageCount = data.TotalPageCount
            };
            return result;
        }

        public ArrayResponse<AccessGroupEx> GetAllAccessGroupsForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.UniqueId != Guid.Empty)
                    parameters.CurrentEntityId = parameters.UniqueId;
                if (parameters.CurrentEntityId == Guid.Empty)
                    parameters.CurrentEntityId = ApplicationUserSessionHeader.CurrentEntityId;
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPermissionCanViewId);
                if (parameters.UniqueId != Guid.Empty)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAccessGroupRepository>();
                var data = repository.GetAllGalaxyAccessGroupsForEntity(ApplicationUserSessionHeader, parameters);
                var result = ConvertToAccessGroupExArray(parameters, data, repository);
                return result;
            });
        }

        public ArrayResponse<AccessGroupEx> GetAllAccessGroupsForCluster(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfCluster(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPermissionCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAccessGroupRepository>();
                var data = repository.GetAllGalaxyAccessGroupsForCluster(ApplicationUserSessionHeader, parameters);

                var result = ConvertToAccessGroupExArray(parameters, data, repository);
                return result;
            });
        }

        public AccessGroupEx GetAccessGroup(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAccessGroupRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(AccessGroup), nameof(AccessGroup.AccessGroupUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPermissionCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(string.Format(
                            "AccessGroup with AccessGroupUid of {0} is not in database", parameters.
                                UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                var includeCounts = false;
                var includeCountsOption = parameters.GetOption(GalaxySMS.Common.Constants.GetOptions.IncludeCounts);
                if (includeCountsOption.HasValue)
                    includeCounts = includeCountsOption.Value;

                var result = new AccessGroupEx(data);
                if (includeCounts)
                    result.Counts = repository.GetNewestCountsForAccessGroup(result.AccessGroupUid);

                return result;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public AccessGroupEx SaveAccessGroup(SaveParameters<AccessGroup> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var exists = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAccessGroupRepository>();
                if (parameters.Data.AccessGroupUid != Guid.Empty)
                {
                    var existingItem = repository.Get(parameters.Data.AccessGroupUid, ApplicationUserSessionHeader, new GetParametersWithPhoto());
                    if (existingItem != null)
                    {
                        exists = true;
                        if (parameters.Data.ClusterUid == Guid.Empty)
                            parameters.Data.ClusterUid = existingItem.ClusterUid;
                        else
                        {
                            if (parameters.Data.ClusterUid != existingItem.ClusterUid)
                            {
                                throw new DataValidationException($"The {nameof(AccessGroup.ClusterUid)} cannot be changed.");
                            }
                        }
                    }
                }

                parameters.CurrentEntityId = GetEntityIdOfCluster(parameters.Data.ClusterUid, true);
                if (!exists)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPermissionCanAddId);
                else
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPermissionCanUpdateId);

                // Force the entity to match the cluster
                parameters.Data.EntityId = parameters.CurrentEntityId;

                // validate the crisis mode and default time schedule are on the same cluster as the access group being saved
                var crisisAccessGroupClusterUid = Guid.Empty;
                var defaultTimeScheduleEntityId = Guid.Empty;
                if (parameters.Data.CrisisModeAccessGroupUid.HasValue && parameters.Data.CrisisModeAccessGroupUid != Guid.Empty)
                {
                    crisisAccessGroupClusterUid = repository.GetClusterUidOf(parameters.Data.CrisisModeAccessGroupUid.Value);
                    if (crisisAccessGroupClusterUid != parameters.Data.ClusterUid)
                    {
                        throw new DataValidationException($"The {nameof(AccessGroup.CrisisModeAccessGroupUid)} value {parameters.Data.CrisisModeAccessGroupUid} is not permitted because it is from a different cluster. The crisis mode access group must be on the same cluster as the access group being saved.");
                    }
                }

                if (parameters.Data.DefaultTimeScheduleUid != Guid.Empty &&
                    parameters.Data.DefaultTimeScheduleUid != GalaxySMS.Common.Constants.TimeScheduleIds.TimeSchedule_Never &&
                    parameters.Data.DefaultTimeScheduleUid != GalaxySMS.Common.Constants.TimeScheduleIds.TimeSchedule_Always)
                {
                    defaultTimeScheduleEntityId = GetEntityIdOfTimeSchedule(parameters.Data.DefaultTimeScheduleUid, true);
                    if (defaultTimeScheduleEntityId != parameters.Data.EntityId)
                    {
                        throw new DataValidationException($"The {nameof(AccessGroup.DefaultTimeScheduleUid)} value {parameters.Data.DefaultTimeScheduleUid} is not permitted because it is from a different entity. The default time schedule must be on the same entity as the access group being saved.");
                    }
                    // Make sure the time schedule is mapped to the cluster as well.
                    var isTimeScheduleMappedToCluster = IsTimeScheduleMappedToCluster(parameters.Data.DefaultTimeScheduleUid, parameters.Data.ClusterUid);
                    if (!isTimeScheduleMappedToCluster)
                        throw new DataValidationException($"The {nameof(TimeSchedule)} value {parameters.Data.DefaultTimeScheduleUid} is not permitted because it is not mapped to the cluster of the access group being saved.");
                }

                AccessGroup updatedItem = null;

                var kvpChooseAvailableNumberOption = parameters.Options.FirstOrDefault(o => o.Key == nameof(GalaxySMS.Common.Enums.ChooseAvailableAccessGroupNumberRange).ToString());
                if (!string.IsNullOrEmpty(kvpChooseAvailableNumberOption.Key) &&
                !string.IsNullOrEmpty(kvpChooseAvailableNumberOption.Value) &&
                parameters.Data.AccessGroupNumber == (int)GalaxySMS.Common.Enums.AccessGroupNumber.NoAccess)
                {
                    var enumValue = GCS.Core.Common.Extensions.EnumExtensions.ParseEnum<ChooseAvailableAccessGroupNumberRange>(kvpChooseAvailableNumberOption.Value);
                    if (Enum.TryParse<ChooseAvailableAccessGroupNumberRange>(kvpChooseAvailableNumberOption.Value, out enumValue))
                    {
                        switch (enumValue)
                        {
                            case ChooseAvailableAccessGroupNumberRange.PreferStandardGroup:
                            case ChooseAvailableAccessGroupNumberRange.PreferExtendedGroup:
                            case ChooseAvailableAccessGroupNumberRange.RequireStandardGroup:
                            case ChooseAvailableAccessGroupNumberRange.RequireExtendedGroup:
                                var agnumber = repository.GetAvailableAccessGroupNumber(parameters.Data.ClusterUid, enumValue);
                                if (agnumber == 0)
                                    throw new Exception($"Unable to find an available AccessGroupNumber for ClusterUid: {parameters.Data.ClusterUid}. All access groups in the requested range have been allocated.");

                                parameters.Data.AccessGroupNumber = agnumber;
                                break;
                            default:
                                throw new Exception($"Invalid option {enumValue} specified");
                        }
                    }
                }

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException($"AccessGroup with AccessGroupName of '{parameters.Data.Display}', AccessGroupNumber: {parameters.Data.AccessGroupNumber} cannot be saved because it is a duplicate.");
                    var detail = new ExceptionDetailEx(ex)
                    {
                        PreferredHttpStatusCode = HttpStatusCode.BadRequest
                    };
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                if (!parameters.Ignore(nameof(parameters.Data.AccessPortals)))
                {
                    var validationResults = repository.Validate(parameters.Data);
                    if (validationResults != null && !validationResults.IsValid)
                    {
                        var dve = new DataValidationException($"{nameof(parameters.Data.AccessPortals)} contains invalid or illegal values.");
                        foreach (var e in validationResults.Errors)
                        {
                            int x = 0;
                            foreach (var s in e.Value)
                                dve.AddValidationRuleMessage(e.Key, s);
                        }

                        throw dve;
                    }
                }

                var now = repository.GetCurrentTimeForCluster(parameters.Data.ClusterUid);
                //                var now = DateTimeOffset.Now;

                parameters.Data.UpdateDate = now;//DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.AccessGroupUid == Guid.Empty)
                {
                    parameters.Data.AccessGroupUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.AccessGroupUid) == false)
                {
                    parameters.Data.InsertDate = now;//DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    //if (!repository.DoesClusterUidMatch(parameters.Data))
                    //{
                    //    var ex = new ApplicationException("AccessGroup.ClusterUid cannot be changed, it does not match the existing ClusterUid.");
                    //    var detail = new ExceptionDetailEx(ex)
                    //    {
                    //        PreferredHttpStatusCode = HttpStatusCode.BadRequest
                    //    };
                    //    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                    //}

                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }


                //if (parameters.Data.IsPanelDataDirty)
                //{
                // Now send to the panels
                var sendParameters = new SendDataParameters<AccessGroup_PanelLoadData>()
                { PopulateDataFromDatabase = true, ApplicationUserSessionHeader = this.ApplicationUserSessionHeader };
                sendParameters.Data.AccessGroupUid = updatedItem.AccessGroupUid;
                Globals.Instance.MessageBroker.SendMessage(
                    new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendAccessGroupSettingsToHardware, sendParameters));
                //}
                var result = new AccessGroupEx(updatedItem);
                result.Counts = repository.GetNewestCountsForAccessGroup(result.AccessGroupUid);
                return result;

            });
        }

        public ValidationProblemDetails ValidateAccessGroup(SaveParameters<AccessGroup> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var response = new ValidationProblemDetails();
                var errorsArray = new List<string>();
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAccessGroupRepository>();
                var exists = false;
                if (parameters.Data.AccessGroupUid != Guid.Empty)
                {
                    var existingItem = repository.Get(parameters.Data.AccessGroupUid, ApplicationUserSessionHeader, new GetParametersWithPhoto());
                    if (existingItem != null)
                    {
                        exists = true;
                        if (parameters.Data.ClusterUid == Guid.Empty)
                            parameters.Data.ClusterUid = existingItem.ClusterUid;
                        else
                        {
                            if (parameters.Data.ClusterUid != existingItem.ClusterUid)
                            {
                                errorsArray.Add($"The {nameof(AccessGroup.ClusterUid)} cannot be changed.");
                                response.Errors.Add($"{nameof(parameters.Data.ClusterUid)}", errorsArray.ToArray());
                                return response;
                            }
                        }
                    }
                }

                parameters.CurrentEntityId = GetEntityIdOfCluster(parameters.Data.ClusterUid, true);
                if (!exists)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPermissionCanAddId);
                else
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPermissionCanUpdateId);

                var clusterRepo = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();
                var clusterExists = clusterRepo.DoesExist(parameters.Data.ClusterUid);
                if (!clusterExists)
                {
                    errorsArray.Clear();
                    errorsArray.Add($"The {nameof(parameters.Data.ClusterUid)} value {parameters.Data.ClusterUid} does not exist in the database.");
                    response.Errors.Add($"{nameof(parameters.Data.ClusterUid)}", errorsArray.ToArray());
                    return response;
                }

                // Force the entity to match the cluster
                parameters.Data.EntityId = parameters.CurrentEntityId;

                response = repository.Validate(parameters.Data);

                if (response.Errors.Any())
                {
                    return response;
                }

                return null;

            });
        }

        public int GetAvailableAccessGroupNumber(Guid clusterUid, ChooseAvailableAccessGroupNumberRange rangeOption)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                int iReturn = GalaxySMS.Common.Constants.AccessGroupLimits.None;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAccessGroupRepository>();

                iReturn = repository.GetAvailableAccessGroupNumber(clusterUid, rangeOption);
                return iReturn;
            });

        }

        public AccessGroupEditingData GetAccessGroupEditingData(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var entityId = GetEntityIdOfCluster(parameters, true);

                parameters.CurrentEntityId = entityId;
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPermissionCanViewId);

                var accessPortalRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
                var timeScheduleRepository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
                var editingData = new AccessGroupEditingData();

                editingData.AccessPortals = accessPortalRepository.GetAllAccessPortalsForCluster(ApplicationUserSessionHeader, parameters).Items.ToCollection();
                editingData.TimeSchedules = timeScheduleRepository.GetAllTimeSchedulesForGalaxyCluster(ApplicationUserSessionHeader, parameters).Items.ToCollection();
                editingData.ClusterUid = parameters.ClusterUid;

                return editingData;
            });
        }

        private Guid GetEntityIdOfCluster(IGetParametersBase parameters, bool throwNotFoundException)
        {
            if (parameters.ClusterUid != Guid.Empty)
                return GetEntityIdOfCluster(parameters.ClusterUid, throwNotFoundException);
            if (parameters.UniqueId != Guid.Empty)
                return GetEntityIdOfCluster(parameters.UniqueId, throwNotFoundException);
            if (parameters.GetGuid != Guid.Empty)
                return GetEntityIdOfCluster(parameters.GetGuid, throwNotFoundException);
            return GetEntityIdOfCluster(parameters.ClusterGroupId, parameters.ClusterNumber, throwNotFoundException);
        }

        private Guid GetEntityIdOfCluster(Guid clusterUid, bool throwNotFoundException)
        {
            var repository = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();
            var entityId = repository.GetEntityId(clusterUid);
            if (entityId == Guid.Empty && throwNotFoundException)
            {
                if (entityId == Guid.Empty)
                {
                    NotFoundException ex = new NotFoundException($"{nameof(Cluster)} with {nameof(Cluster.ClusterUid)} of {clusterUid} not found");
                    ExceptionDetailEx detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }
            }
            return entityId;
        }

        private Guid GetEntityIdOfCluster(int clusterGroupId, int clusterNumber, bool throwNotFoundException)
        {
            var repository = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();
            var entityId = repository.GetEntityId(clusterGroupId, clusterNumber);
            if (entityId == Guid.Empty && throwNotFoundException)
            {
                if (entityId == Guid.Empty)
                {
                    NotFoundException ex = new NotFoundException($"{nameof(Cluster)} with {nameof(Cluster.ClusterGroupId)}: {clusterGroupId} and {nameof(Cluster.ClusterNumber)}: {clusterNumber} not found");
                    ExceptionDetailEx detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }
            }
            return entityId;
        }

        private Guid GetEntityIdOfGalaxyPanel(IGetParametersBase parameters, bool throwNotFoundException)
        {
            if (parameters.UniqueId != Guid.Empty)
                return GetEntityIdOfGalaxyPanel(parameters.UniqueId, throwNotFoundException);
            if (parameters.GetGuid != Guid.Empty)
                return GetEntityIdOfGalaxyPanel(parameters.GetGuid, throwNotFoundException);
            return GetEntityIdOfGalaxyPanel(parameters.ClusterGroupId, parameters.ClusterNumber, parameters.PanelNumber, throwNotFoundException);
        }

        private Guid GetEntityIdOfGalaxyPanel(Guid galaxyPanelUid, bool throwNotFoundException)
        {
            var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelRepository>();
            var entityId = repository.GetEntityId(galaxyPanelUid);
            if (entityId == Guid.Empty && throwNotFoundException)
            {
                if (entityId == Guid.Empty)
                {
                    NotFoundException ex = new NotFoundException($"{nameof(GalaxyPanel)} with {nameof(GalaxyPanel.GalaxyPanelUid)} of {galaxyPanelUid} not found");
                    ExceptionDetailEx detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }
            }
            return entityId;
        }

        private Guid GetEntityIdOfGalaxyPanel(int clusterGroupId, int clusterNumber, int panelNumber, bool throwNotFoundException)
        {
            var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelRepository>();
            var entityId = repository.GetEntityId(clusterGroupId, clusterNumber, panelNumber);
            if (entityId == Guid.Empty && throwNotFoundException)
            {
                if (entityId == Guid.Empty)
                {
                    NotFoundException ex = new NotFoundException($"{nameof(GalaxyPanel)} with {nameof(GalaxyPanel.ClusterGroupId)}: {clusterGroupId} and {nameof(GalaxyPanel.ClusterNumber)}: {clusterNumber} not found");
                    ExceptionDetailEx detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }
            }
            return entityId;
        }

        private Guid GetEntityIdOfRegion(Guid regionUid, bool throwNotFoundException)
        {
            var repository = _DataRepositoryFactory.GetDataRepository<IRegionRepository>();
            return GetEntityIdOf(repository, regionUid, throwNotFoundException, nameof(Region), nameof(Region.RegionUid));
        }

        private Guid GetEntityIdOfSite(Guid siteUid, bool throwNotFoundException)
        {
            return WcfManagerHelpers.GetEntityIdOfSite(siteUid, true, _DataRepositoryFactory);
            //var repository = _DataRepositoryFactory.GetDataRepository<ISiteRepository>();
            //return GetEntityIdOf(repository, siteUid, throwNotFoundException, nameof(Site), nameof(Site.SiteUid));
        }

        private Guid GetEntityIdOfAccessPortal(Guid accessPortalUid, bool throwNotFoundException)
        {
            var repository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
            return GetEntityIdOf(repository, accessPortalUid, throwNotFoundException, nameof(AccessPortal), nameof(AccessPortal.AccessPortalUid));
        }

        private Guid GetEntityIdOfInputDevice(Guid inputDeviceUid, bool throwNotFoundException)
        {
            var repository = _DataRepositoryFactory.GetDataRepository<IInputDeviceRepository>();
            return GetEntityIdOf(repository, inputDeviceUid, throwNotFoundException, nameof(InputDevice), nameof(InputDevice.InputDeviceUid));
        }

        private Guid GetEntityIdOfOutputDevice(Guid outputDeviceUid, bool throwNotFoundException)
        {
            var repository = _DataRepositoryFactory.GetDataRepository<IOutputDeviceRepository>();
            return GetEntityIdOf(repository, outputDeviceUid, throwNotFoundException, nameof(OutputDevice), nameof(OutputDevice.OutputDeviceUid));
        }

        public Guid GetEntityIdOfTimeSchedule(Guid timeScheduleUid, bool throwNotFoundException)
        {
            var repository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
            return GetEntityIdOf(repository, timeScheduleUid, throwNotFoundException, nameof(TimeSchedule), nameof(TimeSchedule.TimeScheduleUid));
        }

        private Guid GetEntityIdOfDayType(Guid dayTypeUid, bool throwNotFoundException)
        {
            var repository = _DataRepositoryFactory.GetDataRepository<IDayTypeRepository>();
            return GetEntityIdOf(repository, dayTypeUid, throwNotFoundException, nameof(DayType), nameof(DayType.DayTypeUid));
        }

        private Guid GetEntityIdOfAccessGroup(Guid accessGroupUid, bool throwNotFoundException)
        {
            var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAccessGroupRepository>();
            return GetEntityIdOf(repository, accessGroupUid, throwNotFoundException, nameof(AccessGroup), nameof(AccessGroup.AccessGroupUid));
        }

        private Guid GetEntityIdOfArea(Guid areaUid, bool throwNotFoundException)
        {
            var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAreaRepository>();
            return GetEntityIdOf(repository, areaUid, throwNotFoundException, nameof(Area), nameof(Area.AreaUid));
        }

        private Guid GetEntityIdOfInputOutputGroup(Guid inputOutputGroupUid, bool throwNotFoundException)
        {
            var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInputOutputGroupRepository>();
            return GetEntityIdOf(repository, inputOutputGroupUid, throwNotFoundException, nameof(InputOutputGroup), nameof(InputOutputGroup.InputOutputGroupUid));
        }


        private bool IsTimeScheduleMappedToCluster(Guid timeScheduleUid, Guid clusterUid)
        {
            var repository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
            return repository.IsTimeScheduleMappedToCluster(timeScheduleUid, clusterUid);
        }

        private Guid GetEntityIdOf(IHasGetEntityId repo, Guid uid, bool throwNotFoundException, string typeName, string propertyName)
        {
            return WcfManagerHelpers.GetEntityIdOf(repo, uid, throwNotFoundException, typeName, propertyName);
            //var entityId = repo.GetEntityId(uid);
            //if (entityId == Guid.Empty && throwNotFoundException)
            //{
            //    if (entityId == Guid.Empty)
            //    {
            //        NotFoundException ex = new NotFoundException($"{typeName} with {propertyName}: {uid} not found");
            //        ExceptionDetailEx detail = new ExceptionDetailEx(ex);
            //        throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
            //    }
            //}
            //return entityId;
        }

        private bool VerifyEntityIdMatches(IHasGetEntityId repository, Guid uid, IHasEntityId data,
            bool throwDataValidationException, string propertyName)
        {
            bool exists = false;
            if (uid != Guid.Empty)
            {
                var originalEntityId = data.EntityId;
                var existingItemEntityId = repository.GetEntityId(uid);
                if (existingItemEntityId != Guid.Empty)
                {
                    // the fact that existingItemEntityId != Guid.Empty means that the item exists
                    if (data.EntityId != Guid.Empty && data.EntityId != existingItemEntityId)
                    {
                        //throw new DataValidationException($"The {propertyName} cannot be changed.");
                        var ex = new DataValidationException($"The {propertyName} cannot be changed.");
                        var detail = new ExceptionDetailEx(ex) { PreferredHttpStatusCode = HttpStatusCode.BadRequest };
                        throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                    }
                    data.EntityId = existingItemEntityId;
                    exists = true;
                }
                else
                {
                    data.EntityId = originalEntityId;
                }
            }
            if (data.EntityId == Guid.Empty)
                data.EntityId = ApplicationUserSessionHeader.CurrentEntityId;

            return exists;
        }


        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteAccessGroupByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAccessGroupRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(AccessGroup), nameof(AccessGroup.AccessGroupUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPermissionCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteAccessGroup(DeleteParameters<AccessGroup> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAccessGroupRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.AccessGroupUid, true, nameof(AccessGroup), nameof(AccessGroup.AccessGroupUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPermissionCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsAccessGroupReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAccessGroupRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsAccessGroupUnique(AccessGroup data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAccessGroupRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }
        public ArrayResponse<AccessGroupPersonInfo> GetPersonInfoForAccessGroup(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPermissionCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAccessGroupRepository>();
                var data = repository.GetPersonInfoForAccessGroup(ApplicationUserSessionHeader, parameters);



                return (ArrayResponse<AccessGroupPersonInfo>)data;
            });
        }

        #endregion

        #region Galaxy Area Operations

        public ArrayResponse<Area> GetAllAreas(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAreaRepository>();
                var data = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<Area>)data;
            });
        }

        public ArrayResponse<Area> GetAllAreasForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);

                if (parameters.UniqueId != Guid.Empty)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAreaRepository>();
                var data = repository.GetAllGalaxyAreasForEntity(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<Area>)data;
            });
        }

        public ArrayResponse<Area> GetAllAreasForCluster(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfCluster(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAreaRepository>();
                var data = repository.GetAllGalaxyAreasForCluster(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<Area>)data;
            });
        }

        public Area GetArea(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAreaRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(Area), nameof(Area.AreaUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(string.Format("Area with AreaUid of {0} is not in database",
                            parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public Area SaveArea(SaveParameters<Area> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAreaRepository>();
                var exists = false;
                if (parameters.Data.AreaUid != Guid.Empty)
                {
                    var existingItem = repository.Get(parameters.Data.AreaUid, ApplicationUserSessionHeader,
                        new GetParametersWithPhoto()
                        {

                        });
                    if (existingItem != null)
                    {
                        exists = true;
                        if (parameters.Data.ClusterUid == Guid.Empty)
                            parameters.Data.ClusterUid = existingItem.ClusterUid;
                        else
                        {
                            if (parameters.Data.ClusterUid != existingItem.ClusterUid)
                            {
                                throw new DataValidationException($"The {nameof(AccessGroup.ClusterUid)} cannot be changed.");
                            }
                        }
                    }
                }

                parameters.CurrentEntityId = GetEntityIdOfCluster(parameters.Data.ClusterUid, true);
                if (!exists)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                else
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanUpdateId);

                // Force the entity to match the cluster
                parameters.Data.EntityId = parameters.CurrentEntityId;
                Area updatedItem = null;
                if (parameters.Data.AreaNumber == (int)GalaxySMS.Common.Constants.AreaLimits.None &&
                    parameters.Data.AreaUid == Guid.Empty)
                {
                    var areanumber = repository.GetAvailableAreaNumber(parameters.Data.ClusterUid);
                    if (areanumber == GalaxySMS.Common.Constants.AreaLimits.None)
                        throw new Exception($"Unable to find an available AreaNumber for ClusterUid: {parameters.Data.ClusterUid}. All areas have been allocated.");

                    parameters.Data.AreaNumber = areanumber;
                }

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format("Area with Name of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.Display));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.AreaUid == Guid.Empty)
                {
                    parameters.Data.AreaUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.AreaUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedItem;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteAreaByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAreaRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(Area), nameof(Area.AreaUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteArea(DeleteParameters<Area> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAreaRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.AreaUid, true, nameof(Area), nameof(Area.AreaUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsAreaReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAreaRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsAreaUnique(Area data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyAreaRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Galaxy Input Output Group Operations

        public ArrayResponse<InputOutputGroup> GetAllInputOutputGroups(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInputOutputGroupRepository>();
                var data = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<InputOutputGroup>)data;
            });
        }

        public ArrayResponse<InputOutputGroup> GetAllInputOutputGroupsForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);

                if (parameters.UniqueId != Guid.Empty)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInputOutputGroupRepository>();
                var data = repository.GetAllGalaxyInputOutputGroupsForEntity(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<InputOutputGroup>)data;
            });
        }

        public ArrayResponse<InputOutputGroup> GetAllInputOutputGroupsForCluster(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = GetEntityIdOfCluster(parameters, true);

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInputOutputGroupRepository>();
                var data = repository.GetAllGalaxyInputOutputGroupsForCluster(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<InputOutputGroup>)data;
            });
        }

        public ArrayResponse<InputOutputGroup> GetAllInputOutputGroupsForClusterAddress(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (!parameters.DoNotValidateAuthorization)
                {
                    var entityId = GetEntityIdOfCluster(parameters, true);
                    parameters.CurrentEntityId = entityId;
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                }

                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInputOutputGroupRepository>();
                var data = repository.GetAllInputOutputGroupSelectionItemsForClusterAddress(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<InputOutputGroup>)data;
            });
        }

        public InputOutputGroup GetInputOutputGroup(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInputOutputGroupRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(InputOutputGroup), nameof(InputOutputGroup.InputOutputGroupUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("InputOutputGroup with InputOutputGroupUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        public InputOutputGroup GetInputOutputGroupForClusterAddressAndInputOutputGroupNumber(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (!parameters.DoNotValidateAuthorization)
                {
                    var entityId = GetEntityIdOfCluster(parameters, true);
                    parameters.CurrentEntityId = entityId;

                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                }


                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInputOutputGroupRepository>();
                var data = repository.GetInputOutputGroupSelectionItemsForClusterAddressAndInputOutputGroupNumber(ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            $"InputOutputGroup with ClusterGroupId:{parameters.ClusterGroupId}, ClusterNumber:{parameters.ClusterNumber}, IOGroupNumber:{parameters.GetInt32} is not in database");
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        public InputOutputGroupAssignmentSource[] GetInputOutputGroupAssignmentSourcesForInputOutputGroup(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInputOutputGroupRepository>();
                var data = repository.GetInputOutputGroupAssignmentSourcesForInputOutputGroupUid(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public InputOutputGroup SaveInputOutputGroup(SaveParameters<InputOutputGroup> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                // Must validate EntityId is set correctly. If an update, the parent Uid may not be specified. If this is the case, the
                // it must be obtained before permissions can be validated
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInputOutputGroupRepository>();

                if (parameters.Data.InputOutputGroupUid != Guid.Empty)
                {
                    var existingItem = repository.Get(parameters.Data.InputOutputGroupUid, ApplicationUserSessionHeader,
                        new GetParametersWithPhoto()
                        {

                        });
                    if (existingItem != null)
                    {
                        if (parameters.Data.ClusterUid == Guid.Empty)
                            parameters.Data.ClusterUid = existingItem.ClusterUid;
                        else
                        {
                            if (parameters.Data.ClusterUid != existingItem.ClusterUid)
                            {
                                throw new DataValidationException($"The {nameof(AccessGroup.ClusterUid)} cannot be changed.");
                            }
                        }
                    }
                }

                parameters.CurrentEntityId = GetEntityIdOfCluster(parameters.Data.ClusterUid, true);
                if (parameters.Data.InputOutputGroupUid != Guid.Empty)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                else
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanUpdateId);

                // Force the entity to match the cluster
                parameters.Data.EntityId = parameters.CurrentEntityId;

                InputOutputGroup updatedItem = null;

                if (parameters.Data.IOGroupNumber == (int)GalaxySMS.Common.Enums.InputOutputGroupNumber.None &&
                    parameters.Data.InputOutputGroupUid == Guid.Empty)
                {
                    var iognumber = repository.GetAvailableInputOutputGroupNumber(parameters.Data.ClusterUid);
                    if (iognumber == GalaxySMS.Common.Constants.InputOutputGroupLimits.None)
                        throw new Exception($"Unable to find an available IOGroupNumber for ClusterUid: {parameters.Data.ClusterUid}. All input-output groups have been allocated.");

                    parameters.Data.IOGroupNumber = iognumber;
                }

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format(
                                "InputOutputGroup with Name of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.Display));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.InputOutputGroupUid == Guid.Empty)
                {
                    parameters.Data.InputOutputGroupUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.InputOutputGroupUid) == false)
                {
                    if (parameters.Data.RoleIds == null || !parameters.Data.RoleIds.Any())
                    {
                        var roleRepository = _DataRepositoryFactory.GetDataRepository<IGcsRoleRepository>();
                        parameters.Data.RoleIds = roleRepository.GetAllPrimaryKeyUids(parameters.CurrentEntityId).ToCollection();
                    }

                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                var sendParameters = new SendDataParameters<InputOutputGroup_PanelLoadData>()
                { PopulateDataFromDatabase = true, ApplicationUserSessionHeader = this.ApplicationUserSessionHeader };
                sendParameters.Data.InputOutputGroupUid = updatedItem.InputOutputGroupUid;
                Globals.Instance.MessageBroker.SendMessage(
                    new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendInputOutputGroupToHardware, sendParameters));

                return updatedItem;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteInputOutputGroupByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInputOutputGroupRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(InputOutputGroup), nameof(InputOutputGroup.InputOutputGroupUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteInputOutputGroup(DeleteParameters<InputOutputGroup> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInputOutputGroupRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.InputOutputGroupUid, true, nameof(InputOutputGroup), nameof(InputOutputGroup.InputOutputGroupUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsInputOutputGroupReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInputOutputGroupRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsInputOutputGroupUnique(InputOutputGroup data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInputOutputGroupRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }


        public bool ExecuteInputOutputGroupCommand(CommandParameters<InputOutputGroupCommandAction> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var permissionId = Guid.Empty;
                if (parameters.Data.CommandAction == InputOutputGroupCommandActionCode.None)
                {
                    if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.InputOutputGroupCommandIds.Arm)
                        parameters.Data.CommandAction = InputOutputGroupCommandActionCode.Arm;
                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.InputOutputGroupCommandIds.Disarm)
                        parameters.Data.CommandAction = InputOutputGroupCommandActionCode.Disarm;
                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.InputOutputGroupCommandIds.Shunt)
                        parameters.Data.CommandAction = InputOutputGroupCommandActionCode.Shunt;
                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.InputOutputGroupCommandIds.Unshunt)
                        parameters.Data.CommandAction = InputOutputGroupCommandActionCode.Unshunt;
                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.InputOutputGroupCommandIds.LockAccessPortals)
                        parameters.Data.CommandAction = InputOutputGroupCommandActionCode.LockAccessPortals;
                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.InputOutputGroupCommandIds.UnlockAccessPortals)
                        parameters.Data.CommandAction = InputOutputGroupCommandActionCode.UnlockAccessPortals;
                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.InputOutputGroupCommandIds.EnableAccessPortals)
                        parameters.Data.CommandAction = InputOutputGroupCommandActionCode.EnableAccessPortals;
                    else if (parameters.Data.CommandUid == GalaxySMS.Common.Constants.InputOutputGroupCommandIds.DisableAccessPortals)
                        parameters.Data.CommandAction = InputOutputGroupCommandActionCode.DisableAccessPortals;
                }

                switch (parameters.Data.CommandAction)
                {
                    case InputOutputGroupCommandActionCode.Arm:
                        permissionId = PermissionIds.GalaxySMSInputOutputGroupCommandPermission.Arm;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.InputOutputGroupCommandIds.Arm;
                        break;

                    case InputOutputGroupCommandActionCode.Disarm:
                        permissionId = PermissionIds.GalaxySMSInputOutputGroupCommandPermission.Disarm;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.InputOutputGroupCommandIds.Disarm;
                        break;

                    case InputOutputGroupCommandActionCode.Shunt:
                        permissionId = PermissionIds.GalaxySMSInputOutputGroupCommandPermission.Shunt;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.InputOutputGroupCommandIds.Shunt;
                        break;

                    case InputOutputGroupCommandActionCode.Unshunt:
                        permissionId = PermissionIds.GalaxySMSInputOutputGroupCommandPermission.Unshunt;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.InputOutputGroupCommandIds.Unshunt;
                        break;

                    case InputOutputGroupCommandActionCode.LockAccessPortals:
                        permissionId = PermissionIds.GalaxySMSAccessPortalGroupCommandPermission.Lock;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.InputOutputGroupCommandIds.LockAccessPortals;
                        break;

                    case InputOutputGroupCommandActionCode.UnlockAccessPortals:
                        permissionId = PermissionIds.GalaxySMSAccessPortalGroupCommandPermission.Unlock;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.InputOutputGroupCommandIds.UnlockAccessPortals;
                        break;

                    case InputOutputGroupCommandActionCode.EnableAccessPortals:
                        permissionId = PermissionIds.GalaxySMSAccessPortalGroupCommandPermission.Enable;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.InputOutputGroupCommandIds.EnableAccessPortals;
                        break;

                    case InputOutputGroupCommandActionCode.DisableAccessPortals:
                        permissionId = PermissionIds.GalaxySMSAccessPortalGroupCommandPermission.Disable;
                        parameters.Data.CommandUid = GalaxySMS.Common.Constants.InputOutputGroupCommandIds.DisableAccessPortals;
                        break;

                    case InputOutputGroupCommandActionCode.None:
                    default:
                        throw new ArgumentOutOfRangeException();
                }

                // Verify that the caller (user) has permission to execute the requested command
                ValidateAuthorizationAndSetupDeviceOperation(parameters, permissionId, DeviceType.None);

                var commandRepository = _DataRepositoryFactory.GetDataRepository<IInputOutputGroupCommandRepository>();
                var cmd = commandRepository.Get(parameters.Data.CommandUid, ApplicationUserSessionHeader, new GetParametersWithPhoto());
                if (cmd == null || cmd.IsActive == false)
                {
                    // throw new UnauthorizedAccessException();
                    throw new ApplicationException($"{MagicExceptionStrings.forbidden} - {parameters.Data.CommandAction} command is not active.");
                }

                // Verify that the caller is permitted to execute this command for this device

                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyInputOutputGroupRepository>();

                var iog = repository.GetInputOutputGroupPanelLoadData(ApplicationUserSessionHeader, new GetParametersWithPhoto()
                {
                    UniqueId = parameters.Data.InputOutputGroupUid,
                });

                if (iog != null)
                {
                    ValidateUserHasEntityAccess(iog.EntityId, true);
                    // Verify that the caller is permitted to execute this command for this device
                    if (!repository.DoesUserHavePermission(ApplicationUserSessionHeader, parameters.Data.InputOutputGroupUid, permissionId, iog.EntityId))
                    {
                        throw new UnauthorizedAccessException($"UserName '{this.ApplicationUserSessionHeader.UserName}' does not have permissions to execute the {parameters.Data.CommandAction} command on input-output group '{iog.InputOutputGroupName}'");
                    }

                    parameters.Data.InputOutputGroupNumber = (byte)iog.IOGroupNumber;
                    if (parameters.OperationUid == Guid.Empty)
                        parameters.OperationUid = GuidUtilities.GenerateComb();

                    var sendParameters = new SendDataParameters<InputOutputGroupCommandAction>()
                    {
                        PopulateDataFromDatabase = false,
                        ApplicationUserSessionHeader = this.ApplicationUserSessionHeader,
                        Data = parameters.Data,
                        OperationUid = parameters.OperationUid,
                        NotifySignalRSession = parameters.NotifySignalRSession,
                        SendToAddress = new BoardSectionNodeHardwareAddress()
                        {
                            ClusterGroupId = iog.ClusterGroupId,
                            ClusterNumber = iog.ClusterNumber,
                            PanelNumber = (int)CpuHardwareAddress.SystemPanelAddress.AllPanels,
                            CpuId = (short)CpuHardwareAddress.CpuNumber.Both,
                        }
                    };

                    Globals.Instance.MessageBroker.SendMessage(
                        new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendInputOutputGroupCommandToHardware, sendParameters));

                }
                return false;
            });
        }

        #endregion

        #region GalaxyClusterTimeScheduleMap Operations

        public GalaxyClusterTimeScheduleMap[] GetAllGalaxyClusterTimeScheduleMaps(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyClusterTimeScheduleMapRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyClusterTimeScheduleMap[] GetGalaxyClusterTimeScheduleMapByCluster(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var entityId = GetEntityIdOfCluster(parameters, true);
                parameters.CurrentEntityId = entityId;
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyClusterTimeScheduleMapRepository>();
                var data = repository.GetAllGalaxyClusterTimeScheduleMapForCluster(ApplicationUserSessionHeader,
                    parameters);

                return data.ToArray();
            });
        }

        public GalaxyClusterTimeScheduleMap[] GetGalaxyClusterTimeScheduleMapBySchedule(
            GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyClusterTimeScheduleMapRepository>();
                var data = repository.GetAllGalaxyClusterTimeScheduleMapForSchedule(ApplicationUserSessionHeader,
                    parameters);

                return data.ToArray();
            });
        }

        public GalaxyClusterTimeScheduleMap GetGalaxyClusterTimeScheduleMap(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyClusterTimeScheduleMapRepository>();
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex = new NotFoundException(string.Format(
                        "GalaxyClusterTimeScheduleMap with GalaxyClusterTimeScheduleMapUid of {0} is not in database",
                        parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public GalaxyClusterTimeScheduleMap SaveGalaxyClusterTimeScheduleMap(
            SaveParameters<GalaxyClusterTimeScheduleMap>
                parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanAddId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyClusterTimeScheduleMapRepository>();

                GalaxyClusterTimeScheduleMap updatedItem = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format(
                                "GalaxyClusterTimeScheduleMap with ID of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.GalaxyClusterTimeScheduleMapUid));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.GalaxyClusterTimeScheduleMapUid == Guid.Empty)
                {
                    parameters.Data.GalaxyClusterTimeScheduleMapUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.GalaxyClusterTimeScheduleMapUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedItem;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyClusterTimeScheduleMapByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId
                );
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyClusterTimeScheduleMapRepository>();

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyClusterTimeScheduleMap(DeleteParameters<GalaxyClusterTimeScheduleMap> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanDeleteId
                );
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyClusterTimeScheduleMapRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsGalaxyClusterTimeScheduleMapReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyClusterTimeScheduleMapRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsGalaxyClusterTimeScheduleMapUnique(GalaxyClusterTimeScheduleMap data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyClusterTimeScheduleMapRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }



        #endregion

        #region Access Profile Operations

        public ArrayResponse<AccessProfile> GetAllAccessProfiles(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessProfileCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessProfileRepository>();
                var data = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<AccessProfile>)data;
            });
        }

        public ArrayResponse<AccessProfileListItem> GetAllAccessProfilesList(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessPortalCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessProfileRepository>();
                var data = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);

                var ri = new List<AccessProfileListItem>();
                foreach (var i in data.Items)
                {
                    ri.Add(i.ToAccessPortalListItem());
                }

                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });

        }


        public ArrayResponse<AccessProfile> GetAllAccessProfilesForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessProfileCanViewId);

                if (parameters.UniqueId != Guid.Empty)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IAccessProfileRepository>();
                var data = repository.GetAllAccessProfilesForEntity(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<AccessProfile>)data;
            });
        }

        public ArrayResponse<AccessProfileListItem> GetAllAccessProfilesListForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                parameters.CurrentEntityId = parameters.UniqueId;
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessProfileCanViewId);

                if (parameters.UniqueId != Guid.Empty)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IAccessProfileRepository>();
                var data = repository.GetAllAccessProfilesForEntity(
                    ApplicationUserSessionHeader, parameters);

                var ri = new List<AccessProfileListItem>();
                foreach (var i in data.Items)
                {
                    ri.Add(i.ToAccessPortalListItem());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }

        public ArrayResponse<AccessProfile> GetAllAccessProfilesForMappedEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessProfileCanViewId);

                if (parameters.UniqueId != Guid.Empty)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IAccessProfileRepository>();
                var data = repository.GetAllAccessProfilesForMappedEntity(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<AccessProfile>)data;
            });
        }

        public AccessProfile GetAccessProfile(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessProfileRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(AccessProfile), nameof(AccessProfile.AccessProfileUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessProfileCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("AccessProfile with AccessProfileUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public AccessProfile SaveAccessProfile(SaveParameters<AccessProfile> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessProfileRepository>();

                var exists = VerifyEntityIdMatches(repository, parameters.Data.AccessProfileUid, parameters.Data, true, nameof(AccessProfile.EntityId));

                parameters.CurrentEntityId = parameters.Data.EntityId;
                if (!parameters.DoNotValidateAuthorization)
                {
                    if (exists)
                        ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessProfileCanUpdateId);
                    else
                        ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessProfileCanAddId);
                }

                AccessProfile updatedEntity = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format("AccessProfile with Name of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.AccessProfileName));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.AccessProfileUid == Guid.Empty)
                {
                    parameters.Data.AccessProfileUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.AccessProfileUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }


                ////if (parameters.Data.IsPanelDataDirty)
                ////{
                //// Now send to the panels
                //var sendParameters = new SendDataParameters<AccessProfile_PanelLoadData>()
                //{ PopulateDataFromDatabase = true, ApplicationUserSessionHeader = this.ApplicationUserSessionHeader };
                //sendParameters.Data.AccessProfileUid = updatedEntity.AccessProfileUid;
                //Globals.Instance.MessageBroker.SendMessage(
                //    new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendAccessProfileToHardware, sendParameters));
                ////}

                return updatedEntity;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteAccessProfileByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessProfileRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(AccessProfile), nameof(AccessProfile.AccessProfileUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessProfileCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteAccessProfile(DeleteParameters<AccessProfile> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessProfileRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.AccessProfileUid, true, nameof(AccessProfile), nameof(AccessProfile.AccessProfileUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessProfileCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsAccessProfileReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessProfileRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsAccessProfileUnique(AccessProfile data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IAccessProfileRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }


        public AccessProfileEditingData GetAccessProfileEditingData(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var editingData = new AccessProfileEditingData();
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessProfileCanViewId);

                var accessProfileRepository = _DataRepositoryFactory.GetDataRepository<IAccessProfileRepository>();
                var siteRepository = _DataRepositoryFactory.GetDataRepository<ISiteRepository>();

                editingData.AccessProfiles = accessProfileRepository.GetAllAccessProfilesForEntity(ApplicationUserSessionHeader, parameters).Items.ToCollection();
                editingData.Sites = siteRepository.GetAllSitesForEntity(ApplicationUserSessionHeader, parameters).ToCollection();
                parameters.IncludeMemberCollections = true;
                editingData.AccessAndAlarmControlPermissionsEditingData = GetAccessProfileClusterPermissionsEditingData(parameters);

                return editingData;
            });
        }

        public AccessAndAlarmControlPermissionsEditingData GetAccessProfileClusterPermissionsEditingData(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var accessAndAlarmControlPermissionsEditingData = new AccessAndAlarmControlPermissionsEditingData();
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.AccessProfileCanViewId);

                var regionRepository = _DataRepositoryFactory.GetDataRepository<IRegionRepository>();

                accessAndAlarmControlPermissionsEditingData.Regions = regionRepository.GetAllRegionSelectionItemsForEntity(ApplicationUserSessionHeader, parameters).ToCollection();
                return accessAndAlarmControlPermissionsEditingData;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int SyncPersonsWithAccessProfile(SaveParameters<AccessProfile> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanUpdateId);

                var persons = SearchPersons(new PersonSummarySearchParameters()
                {
                    SearchType = PersonSearchType.ByAccessProfileUid,
                    UniqueId = parameters.Data.AccessProfileUid
                });

                var syncParams = new GetParametersWithPhoto()
                {
                    IncludePhoto = false,
                    IncludeMemberCollections = false,
                };

                foreach (var p in persons)
                {
                    syncParams.PersonUid = p.PersonUid;
                    var syncedPerson = SyncPersonWithAccessProfile(syncParams);
                }
                return 1;
            });
        }

        #endregion

        #region Department Operations

        public ArrayResponse<Department> GetAllDepartments(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.DepartmentCanViewId);
                IDepartmentRepository repository = _DataRepositoryFactory.GetDataRepository<IDepartmentRepository>();
                var data = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<Department>)data;
            });
        }

        public ArrayResponse<Department> GetAllDepartmentsForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.DepartmentCanViewId);

                if (parameters.UniqueId != Guid.Empty)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                IDepartmentRepository repository = _DataRepositoryFactory.GetDataRepository<IDepartmentRepository>();
                var data = repository.GetAllDepartmentsForEntity(ApplicationUserSessionHeader, parameters);

                return (ArrayResponse<Department>)data;
            });
        }


        public ArrayResponse<ListItemBase> GetAllDepartmentsList(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.DepartmentCanViewId);
                IDepartmentRepository repository = _DataRepositoryFactory.GetDataRepository<IDepartmentRepository>();
                var data = repository.GetAllPaged(ApplicationUserSessionHeader, parameters);
                var ri = new List<ListItemBase>();
                foreach (var r in data.Items)
                {
                    ri.Add(r.ToListItemBase());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }

        public ArrayResponse<ListItemBase> GetAllDepartmentsListEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.DepartmentCanViewId);
                IDepartmentRepository repository = _DataRepositoryFactory.GetDataRepository<IDepartmentRepository>();
                var data = repository.GetPaged(ApplicationUserSessionHeader, parameters);
                var ri = new List<ListItemBase>();
                foreach (var r in data.Items)
                {
                    ri.Add(r.ToListItemBase());
                }
                return ArrayResponseHelpers.ToArrayResponse(ri, data.PageNumber, data.PageSize, data.TotalItemCount);
            });
        }


        public Department GetDepartment(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IDepartmentRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(Department), nameof(Department.DepartmentUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.DepartmentCanViewId);
                var region = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (region == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(string.Format("Department with DepartmentUid of {0} is not in database",
                            parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return region;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public Department SaveDepartment(SaveParameters<Department> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IDepartmentRepository>();

                var exists = VerifyEntityIdMatches(repository, parameters.Data.DepartmentUid, parameters.Data, true, nameof(Department.EntityId));
                parameters.CurrentEntityId = parameters.Data.EntityId;
                if (!parameters.DoNotValidateAuthorization)
                {
                    if (exists)
                        ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.DepartmentCanUpdateId);
                    else
                        ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.DepartmentCanAddId);
                }

                Department updatedDepartment = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format("Department with Name of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.DepartmentName));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.DepartmentUid == Guid.Empty)
                {
                    parameters.Data.DepartmentUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.DepartmentUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedDepartment = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedDepartment = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedDepartment;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteDepartmentByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IDepartmentRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(Department), nameof(Department.DepartmentUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.DepartmentCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteDepartment(DeleteParameters<Department> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IDepartmentRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.DepartmentUid, true, nameof(Department), nameof(Department.DepartmentUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.DepartmentCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsDepartmentReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IDepartmentRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsDepartmentUnique(Department data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IDepartmentRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Badge Template Operations

        public BadgeTemplate[] GetAllBadgeTemplates(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.BadgeTemplateCanViewId);
                IBadgeTemplateRepository repository = _DataRepositoryFactory.GetDataRepository<IBadgeTemplateRepository>();
                IEnumerable<BadgeTemplate> data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public BadgeTemplate[] GetAllBadgeTemplatesForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.BadgeTemplateCanViewId);

                if (parameters.UniqueId != Guid.Empty)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                IBadgeTemplateRepository repository = _DataRepositoryFactory.GetDataRepository<IBadgeTemplateRepository>();
                IEnumerable<BadgeTemplate> regions = repository.Get(ApplicationUserSessionHeader, parameters);

                return regions.ToArray();
            });
        }


        public ListItemBase[] GetAllBadgeTemplatesList(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.BadgeTemplateCanViewId);
                IBadgeTemplateRepository repository = _DataRepositoryFactory.GetDataRepository<IBadgeTemplateRepository>();
                var regions = repository.GetAll(ApplicationUserSessionHeader, parameters);
                var ri = new List<ListItemBase>();
                foreach (var r in regions)
                {
                    ri.Add(r.ToListItemBase());
                }
                return ri.ToArray();
            });
        }

        public ListItemBase[] GetAllBadgeTemplatesListEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.BadgeTemplateCanViewId);
                IBadgeTemplateRepository repository = _DataRepositoryFactory.GetDataRepository<IBadgeTemplateRepository>();
                IEnumerable<BadgeTemplate> regions = repository.Get(ApplicationUserSessionHeader, parameters);
                var ri = new List<ListItemBase>();
                foreach (var r in regions)
                {
                    ri.Add(r.ToListItemBase());
                }
                return ri.ToArray();
            });
        }


        public BadgeTemplate GetBadgeTemplate(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IBadgeTemplateRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(BadgeTemplate), nameof(BadgeTemplate.BadgeTemplateUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.BadgeTemplateCanViewId);
                var region = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (region == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(string.Format("BadgeTemplate with BadgeTemplateUid of {0} is not in database",
                            parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return region;
            });
        }

        private BadgeTemplate SaveBadgeTemplateWithoutValidateAuth(SaveParameters<BadgeTemplate> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IBadgeTemplateRepository>();

                BadgeTemplate updatedBadgeTemplate = null;
                if (parameters.Data.EntityId == Guid.Empty)
                    parameters.Data.EntityId = ApplicationUserSessionHeader.CurrentEntityId;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format("BadgeTemplate with Name of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.TemplateName));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.BadgeTemplateUid == Guid.Empty)
                {
                    parameters.Data.BadgeTemplateUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.BadgeTemplateUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedBadgeTemplate = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedBadgeTemplate = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedBadgeTemplate;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public BadgeTemplate SaveBadgeTemplate(SaveParameters<BadgeTemplate> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (parameters.Data.BadgeTemplateUid != Guid.Empty)
                {
                    var repository = _DataRepositoryFactory.GetDataRepository<IBadgeTemplateRepository>();
                    parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.BadgeTemplateUid, true, nameof(BadgeTemplate), nameof(BadgeTemplate.BadgeTemplateUid));
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.BadgeTemplateCanUpdateId);
                    if (parameters.Data.EntityId != Guid.Empty && parameters.CurrentEntityId != parameters.Data.EntityId)
                        throw new DataValidationException($"The {nameof(BadgeTemplate.EntityId)} cannot be changed.");

                    parameters.Data.EntityId = parameters.CurrentEntityId;
                }
                else
                {
                    if (parameters.Data.EntityId == Guid.Empty)
                        parameters.Data.EntityId = ApplicationUserSessionHeader.CurrentEntityId;

                    parameters.CurrentEntityId = parameters.Data.EntityId;
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.BadgeTemplateCanAddId);
                }

                return SaveBadgeTemplateWithoutValidateAuth(parameters);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteBadgeTemplateByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IBadgeTemplateRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(BadgeTemplate), nameof(BadgeTemplate.BadgeTemplateUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.BadgeTemplateCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteBadgeTemplate(DeleteParameters<BadgeTemplate> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IBadgeTemplateRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.BadgeTemplateUid, true, nameof(BadgeTemplate), nameof(BadgeTemplate.BadgeTemplateUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.BadgeTemplateCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsBadgeTemplateReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IBadgeTemplateRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsBadgeTemplateUnique(BadgeTemplate data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IBadgeTemplateRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region PersonRecordType Operations

        public PersonRecordType[] GetAllPersonRecordTypes(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonSelectionItemCanViewId);
                IPersonRecordTypeRepository repository = _DataRepositoryFactory.GetDataRepository<IPersonRecordTypeRepository>();
                IEnumerable<PersonRecordType> regions = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return regions.ToArray();
            });
        }

        public PersonRecordType[] GetAllPersonRecordTypesForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonSelectionItemCanViewId);

                if (parameters.UniqueId != Guid.Empty)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                IPersonRecordTypeRepository repository = _DataRepositoryFactory.GetDataRepository<IPersonRecordTypeRepository>();
                IEnumerable<PersonRecordType> regions = repository.GetAllPersonRecordTypesForEntity(ApplicationUserSessionHeader, parameters);

                return regions.ToArray();
            });
        }


        public ListItemBase[] GetAllPersonRecordTypesList(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonSelectionItemCanViewId);
                IPersonRecordTypeRepository repository = _DataRepositoryFactory.GetDataRepository<IPersonRecordTypeRepository>();
                var regions = repository.GetAll(ApplicationUserSessionHeader, parameters);
                var ri = new List<ListItemBase>();
                foreach (var r in regions)
                {
                    ri.Add(r.ToListItemBase());
                }
                return ri.ToArray();
            });
        }

        public ListItemBase[] GetAllPersonRecordTypesListEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonSelectionItemCanViewId);
                IPersonRecordTypeRepository repository = _DataRepositoryFactory.GetDataRepository<IPersonRecordTypeRepository>();
                IEnumerable<PersonRecordType> regions = repository.Get(ApplicationUserSessionHeader, parameters);
                var ri = new List<ListItemBase>();
                foreach (var r in regions)
                {
                    ri.Add(r.ToListItemBase());
                }
                return ri.ToArray();
            });
        }


        public PersonRecordType GetPersonRecordType(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IPersonRecordTypeRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(PersonRecordType), nameof(PersonRecordType.PersonRecordTypeUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonSelectionItemCanViewId);
                var region = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (region == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(string.Format("PersonRecordType with PersonRecordTypeUid of {0} is not in database",
                            parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return region;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public PersonRecordType SavePersonRecordType(SaveParameters<PersonRecordType> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IPersonRecordTypeRepository>();

                var exists = VerifyEntityIdMatches(repository, parameters.Data.PersonRecordTypeUid, parameters.Data, true, nameof(PersonRecordType.EntityId));
                parameters.CurrentEntityId = parameters.Data.EntityId;

                if (exists)
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonSelectionItemCanUpdateId);
                else
                    ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonSelectionItemCanAddId);

                PersonRecordType updatedPersonRecordType = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format("PersonRecordType with Name of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.Display));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                parameters.Data.UpdateDate = DateTimeOffset.Now;
                parameters.Data.UpdateName = LoginName;
                if (parameters.Data.PersonRecordTypeUid == Guid.Empty)
                {
                    parameters.Data.PersonRecordTypeUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.PersonRecordTypeUid) == false)
                {
                    parameters.Data.InsertDate = DateTimeOffset.Now;
                    parameters.Data.InsertName = LoginName;
                    updatedPersonRecordType = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedPersonRecordType = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }

                return updatedPersonRecordType;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeletePersonRecordTypeByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IPersonRecordTypeRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(PersonRecordType), nameof(PersonRecordType.PersonRecordTypeUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonSelectionItemCanDeleteId);

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeletePersonRecordType(DeleteParameters<PersonRecordType> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IPersonRecordTypeRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.PersonRecordTypeUid, true, nameof(PersonRecordType), nameof(PersonRecordType.PersonRecordTypeUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonSelectionItemCanDeleteId);

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }

        public bool IsPersonRecordTypeReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IPersonRecordTypeRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsPersonRecordTypeUnique(PersonRecordType data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IPersonRecordTypeRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        #endregion

        #region Person Operations
        public Person[] GetAllPersons(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IPersonRepository>();
                IEnumerable<Person> portals = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return portals.ToArray();
            });
        }

        public Person[] GetAllPersonsForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);

                if (parameters.UniqueId != Guid.Empty)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IPersonRepository>();
                IEnumerable<Person> portals = repository.GetAllPersonsForEntity(
                    ApplicationUserSessionHeader, parameters);

                return portals.ToArray();
            });
        }

        public Person GetPerson(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IPersonRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(Person), nameof(Person.PersonUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("Person with PersonUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                // Verify that the user has permissions to the entity that the person is associated with
                ValidateEntityAuthorizationAndSetupOperation(data.EntityId, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);

                return data;
            });
        }

        public PersonSummary[] SearchPersons(PersonSummarySearchParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IPersonRepository>();
                IEnumerable<PersonSummary> p = repository.SearchForPersonSummary(
                    ApplicationUserSessionHeader, parameters);

                return p.ToArray();
            });
        }

        public ArrayResponse<PersonSummary> SearchPersonsPaged(PersonSummarySearchParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IPersonRepository>();
                var results = repository.SearchForPersonSummaryPaged(
                    ApplicationUserSessionHeader, parameters);

                return results;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public Person SavePerson(SaveParameters<Person> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IPersonRepository>();
                if (parameters.Data.PersonUid != Guid.Empty)
                {   // See if the person already exists, validate permissions for the entity of the existing record
                    var existingItem = repository.Get(parameters.Data.PersonUid, ApplicationUserSessionHeader,
                        new GetParametersWithPhoto());
                    if (existingItem != null)
                    {
                        parameters.CurrentEntityId = existingItem.EntityId;
                        ValidateEntityAuthorizationAndSetupOperation(parameters.Data.EntityId, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanUpdateId);
                    }
                }

                if (parameters.Data.EntityId == Guid.Empty)
                    parameters.Data.EntityId = ApplicationUserSessionHeader.CurrentEntityId;

                parameters.CurrentEntityId = parameters.Data.EntityId;
                if (parameters.Data.PersonUid == Guid.Empty)
                    // Verify that the user has permissions to the entity that the person is associated with
                    ValidateEntityAuthorizationAndSetupOperation(parameters.Data.EntityId, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanAddId);
                else
                    ValidateEntityAuthorizationAndSetupOperation(parameters.Data.EntityId, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanUpdateId);


                Person updatedEntity = null;

                //// The PersonId is an optional property, however the API does not have it marked as mandatory, per the request of Denis (Ukranian team)
                //// For that reason, this code must auto-generate a unique value if it is not specified.
                //// If the user is already in the db and if the PersonId is null or empty, then the existing value should be used
                //// If the user does not exist in the database, then one must be generated 
                //if (string.IsNullOrEmpty(parameters.Data.PersonId))
                //{
                //    // First check to see if the person exists, if not, then generate one
                //    try
                //    {
                //        var personId = string.Empty;
                //        if (parameters.Data.PersonUid != Guid.Empty)
                //        {
                //            personId = repository.GetPersonIdForPerson(parameters.Data.PersonUid);

                //        }

                //        if (string.IsNullOrEmpty(personId))
                //        {
                //            personId = repository.GenerateUniquePersonId(parameters.Data.EntityId, ApplicationUserSessionHeader);
                //        }
                //        parameters.Data.PersonId = personId;
                //    }
                //    catch (Exception ex)
                //    {
                //        var detail = new ExceptionDetailEx(ex);
                //        throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                //    }
                //}

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format("Person with PersonId of '{0}' cannot be saved because it is a duplicate.",
                                parameters.Data.PersonId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                // Now check the credentials for duplicates
                CheckPersonCredentialsForDuplicates(parameters.Data.PersonCredentials);
                ValidatePersonReferences(parameters.Data);

                try
                {
                    var adding = false;
                    parameters.Data.UpdateDate = DateTimeOffset.Now;
                    parameters.Data.UpdateName = LoginName;
                    if (parameters.Data.PersonUid == Guid.Empty)
                    {
                        parameters.Data.PersonUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                    }
                    if (repository.DoesExist(parameters.Data.PersonUid) == false)
                    {
                        parameters.Data.InsertDate = DateTimeOffset.Now;
                        parameters.Data.InsertName = LoginName;
                        adding = true;
                        updatedEntity = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                    }
                    else
                    {
                        updatedEntity = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                    }


                    if (parameters.SavePhoto)
                    {
                        var deleteTheseUploadedFilesUids = new List<Guid>();
                        var uploadedFileRepository =
                            _DataRepositoryFactory.GetDataRepository<IUploadedFileRepository>();
                        var count = 0;

                        if (parameters.Data.IncludePhotos != null)
                        {
                            var dirtyPhotos = parameters.Data.PersonPhotos.ToList();
                            foreach (var photoFile in parameters.Data?.IncludePhotos)
                            {
                                if (!string.IsNullOrEmpty(photoFile))
                                {
                                    var uploadedFiles = uploadedFileRepository.GetForUniqueFilename(
                                        ApplicationUserSessionHeader,
                                        new GetParametersWithPhoto() { GetString = photoFile });
                                    if (!uploadedFiles.Any())
                                    {
                                        // Throw exception if a previously uploaded file is specified but does not exist
                                        var ex = new ApplicationException($"IncludePhoto {photoFile} does not exist");
                                        var detail = new ExceptionDetailEx(ex);
                                        throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                                    }

                                    foreach (var uploadedFile in uploadedFiles)
                                    {
                                        var originalFilenameParts = uploadedFile.OriginalFilename.Split('.');
                                        var uniqueFilename = uploadedFile.UniqueFilename;
                                        for (var x = 1; x < originalFilenameParts.Length; x++)
                                        {
                                            //uniqueFilename += $".{originalFilenameParts[x]}";
                                        }
                                        var pp = new PersonPhoto()
                                        {
                                            IsDirty = true,
                                            Tag = uploadedFile.Tag,
                                            PhotoImage = uploadedFile.PhotoImage,
                                            OriginalFilename = uploadedFile.OriginalFilename,
                                            ContentType = uploadedFile.ContentType,
                                            UniqueFilename = uniqueFilename,
                                            IsDefault = count == 0
                                        };
                                        dirtyPhotos.Add(pp);
                                        deleteTheseUploadedFilesUids.Add(uploadedFile.UploadedFileUid);
                                        count++;
                                    }
                                }
                            }

                            if (parameters.Data.IncludePhotos.Any())
                                parameters.Data.PersonPhotos = dirtyPhotos.ToCollection();
                        }

                        foreach (var dirtyPhoto in parameters.Data.PersonPhotos.Where(o => o.IsDirty))
                        {
                            if (string.IsNullOrEmpty(dirtyPhoto.Tag))
                                dirtyPhoto.Tag = "*";
                            if (string.IsNullOrEmpty(dirtyPhoto.OriginalFilename))
                                dirtyPhoto.OriginalFilename = $"BinaryDataTemp.jpg";

                            if (adding && count == 0)
                            {
                                dirtyPhoto.IsDefault = true;
                            }

                            count++;

                            var savePhotoParams = new SaveParameters<SavePhotoParameters>()
                            {
                                Data = new SavePhotoParameters()
                                {
                                    FileBinaryData = dirtyPhoto.PhotoImage,
                                    OwnerUid = updatedEntity.PersonUid,
                                    Tag = dirtyPhoto.Tag,
                                    OriginalFilename = dirtyPhoto.OriginalFilename,
                                    OriginalContentType = dirtyPhoto.ContentType,
                                    GenerateRandomFilename = true,
                                    IsDefault = dirtyPhoto.IsDefault,
                                    UseMagick = true
                                }
                            };

                            if (string.IsNullOrEmpty(savePhotoParams.Data.OriginalContentType))
                                savePhotoParams.Data.OriginalContentType = "image/jpeg";

                            if (!string.IsNullOrEmpty(dirtyPhoto.UniqueFilename))
                            {
                                savePhotoParams.Data.GenerateRandomFilename = false;
                                savePhotoParams.Data.SaveToFilename = dirtyPhoto.UniqueFilename;
                            }

                            savePhotoParams.Data.ScaleImages.Add(new ScaleImageParameters()
                            {
                                Tag = ScaledImageTagString.Original,
                                ScaleToWidth = 0
                            });
                            savePhotoParams.Data.ScaleImages.Add(new ScaleImageParameters()
                            {
                                Tag = ScaledImageTagString.Default,
                                ScaleToWidth = 224
                            });

                            savePhotoParams.Data.ScaleImages.Add(new ScaleImageParameters()
                            {
                                Tag = ScaledImageTagString.Small,
                                ScaleToWidth = 48
                            });

                            SavePersonPhoto(savePhotoParams);

                        }

                        // Clean up all uploaded files that were associated with the person
                        foreach (var uploadedFileUid in deleteTheseUploadedFilesUids)
                        {
                            uploadedFileRepository.Remove(uploadedFileUid, ApplicationUserSessionHeader);
                        }
                    }

                    updatedEntity = repository.Get(updatedEntity.PersonUid, ApplicationUserSessionHeader,
                                    new GetParametersWithPhoto()
                                    {
                                        IncludeScaledPhotos = true,
                                        IncludePhoto = true,
                                        IncludeMemberCollections = true,
                                        OmitPhotoBinaryData = true
                                    });

                }
                catch (DuplicateIndexException ex)
                {
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }
                catch (DataValidationException ex)
                {
                    throw ex;
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }
                catch (ApplicationException ex)
                {
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }
                //if (parameters.Data.IsPanelDataDirty ||
                //parameters.Data.PersonAccessControlProperty.IsPanelDataDirty)
                //{
                // Now send to the panels
                var sendParameters = new SendDataParameters<Credential_PanelLoadData>()
                { PopulateDataFromDatabase = true, ApplicationUserSessionHeader = this.ApplicationUserSessionHeader };
                sendParameters.Data.PersonUid = updatedEntity.PersonUid;
                Globals.Instance.MessageBroker.SendMessage(
                    new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendPersonCredentialDataToHardware, sendParameters));

                var sendDeleteParameters = new SendDataParameters<CredentialToDeleteFromCpu>()
                { PopulateDataFromDatabase = true, ApplicationUserSessionHeader = this.ApplicationUserSessionHeader };
                Globals.Instance.MessageBroker.SendMessage(
                    new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendDeletedCredentialsToHardware, sendDeleteParameters));


                //}
                return updatedEntity;
            });
        }

        // This will check a collection of PersonCredential objects to see if any of the credentials are duplicates. Exception will be thrown if so.
        private void CheckPersonCredentialsForDuplicates(IEnumerable<PersonCredential> personCredentials)
        {
            if (personCredentials?.Any() == false)
                return;

            var personCredentialRepository = _DataRepositoryFactory.GetDataRepository<IPersonCredentialRepository>();
            var credentialRepository = _DataRepositoryFactory.GetDataRepository<ICredentialRepository>();
            var personRepository = _DataRepositoryFactory.GetDataRepository<IPersonRepository>();

            foreach (var pc in personCredentials.Where(o => o.IsAnythingDirty))
            {
                // See if there is a credential in the database with the same values
                // If found, grab the personCredential that it is associated with. If found, compare the PersonUid to see if it belongs to a different record
                var existingCredentials = credentialRepository.GetByCredentialValues(ApplicationUserSessionHeader, new GetParametersWithPhoto<Credential>() { Data = pc.Credential });
                if (existingCredentials.Any())
                {
                    var existingPersonCredentials = personCredentialRepository.GetAllPersonCredentialsForCredential(ApplicationUserSessionHeader, new GetParametersWithPhoto() { UniqueId = existingCredentials.First().CredentialUid });
                    if (existingPersonCredentials != null & existingPersonCredentials.Any())
                    {
                        var existingPersonCredential = existingPersonCredentials.Where(epc => epc.PersonUid != pc.PersonUid);
                        if (existingPersonCredential != null && existingPersonCredential.Any())
                        {
                            var epc = existingPersonCredential.FirstOrDefault();
                            var person = personRepository.Get(epc.PersonUid, ApplicationUserSessionHeader, new GetParametersWithPhoto()
                            {
                                UniqueId = epc.PersonUid,
                                IncludeMemberCollections = false
                            });
                            if (person != null)
                            {
                                var ex =
                                    new DuplicateIndexException(
                                        string.Format("Credential '{0}' cannot be saved because it is a duplicate belonging to PersonUid:{1}, {2}.",
                                        pc.ToString(), person.PersonUid, person.PersonName));
                                var detail = new ExceptionDetailEx(ex);
                                throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                            }
                        }
                    }
                }

            }
        }

        // This will check a collection of PersonCredential objects to see if any of the credentials are duplicates. Exception will be thrown if so.
        private void ValidatePersonReferences(Person person)
        {
            if (person.PersonRecordTypeUid.HasValue && person.PersonRecordTypeUid != Guid.Empty)
            {
                var personRecordTypeRepository = _DataRepositoryFactory.GetDataRepository<IPersonRecordTypeRepository>();
                var prt = personRecordTypeRepository.Get(person.PersonRecordTypeUid.Value, ApplicationUserSessionHeader, null);
                if (prt == null || prt.EntityId != person.EntityId)
                {
                    var ex = new DataValidationException($"PersonRecordTypeUid {person.PersonRecordTypeUid.Value} cannot be assigned to this person because it does not exist or is not owned by EntityId {person.EntityId}.");
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }
            }

            if (person.PersonActiveStatusTypeUid.HasValue && person.PersonActiveStatusTypeUid != Guid.Empty)
            {
                var personActiveStatusTypeRepository = _DataRepositoryFactory.GetDataRepository<IPersonActiveStatusTypeRepository>();
                var past = personActiveStatusTypeRepository.Get(person.PersonActiveStatusTypeUid.Value, ApplicationUserSessionHeader, null);
                if (past == null || (past.EntityId != person.EntityId && past.EntityId != GalaxySMS.Common.Constants.EntityIds.GalaxySMS_SystemEntity_Id))
                {
                    var ex = new DataValidationException($"PersonActiveStatusTypeUid {person.PersonActiveStatusTypeUid.Value} cannot be assigned to this person because it does not exist or is not owned by EntityId {person.EntityId}.");
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }
            }

            if (person.GenderUid.HasValue && person.GenderUid != Guid.Empty)
            {
                var genderRepository = _DataRepositoryFactory.GetDataRepository<IGenderRepository>();
                var gender = genderRepository.Get(person.GenderUid.Value, ApplicationUserSessionHeader, null);
                if (gender == null || (gender.EntityId != person.EntityId && gender.EntityId != GalaxySMS.Common.Constants.EntityIds.GalaxySMS_SystemEntity_Id))
                {
                    var ex = new DataValidationException($"GenderUid {person.GenderUid.Value} cannot be assigned to this person because it does not exist or is not owned by EntityId {person.EntityId}.");
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }
            }

            if (person.DepartmentUid.HasValue && person.DepartmentUid != Guid.Empty)
            {
                var departmentRepository = _DataRepositoryFactory.GetDataRepository<IDepartmentRepository>();
                var department = departmentRepository.Get(person.DepartmentUid.Value, ApplicationUserSessionHeader, null);
                if (department == null || department.EntityId != person.EntityId)
                {
                    var ex = new DataValidationException($"DepartmentUid {person.DepartmentUid.Value} cannot be assigned to this person because it does not exist or is not owned by EntityId {person.EntityId}.");
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }
            }

            if (person.PersonAccessControlProperty != null)
            {
                if (person.PersonAccessControlProperty.AccessProfileUid != Guid.Empty)
                {
                    var accessProfileRepository = _DataRepositoryFactory.GetDataRepository<IAccessProfileRepository>();
                    var ap = accessProfileRepository.Get(person.PersonAccessControlProperty.AccessProfileUid, ApplicationUserSessionHeader, null);
                    if (ap == null || (ap.EntityId != person.EntityId && ap.EntityId != GalaxySMS.Common.Constants.EntityIds.GalaxySMS_SystemEntity_Id))
                    {
                        var ex = new DataValidationException($"PersonAccessControlProperty.AccessProfileUid {person.PersonAccessControlProperty.AccessProfileUid} cannot be assigned to this person because it is not owned by EntityId {person.EntityId}.");
                        var detail = new ExceptionDetailEx(ex);
                        throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                    }
                }
            }

            if (person.PersonCredentials != null && person.PersonCredentials.Any())
            {
                var badgeTemplateRepository = _DataRepositoryFactory.GetDataRepository<IBadgeTemplateRepository>();
                var credentialFormatRepository = _DataRepositoryFactory.GetDataRepository<ICredentialFormatRepository>();
                var credentialFormats = credentialFormatRepository.GetAllCredentialFormatsForEntity(ApplicationUserSessionHeader,
                    new GetParametersWithPhoto() { UniqueId = person.EntityId, IncludeMemberCollections = false });

                var pcIndex = 0;
                foreach (var pc in person.PersonCredentials)
                {
                    if (pc.BadgeTemplateUid != Guid.Empty && pc.BadgeTemplateUid != GalaxySMS.Common.Constants.BadgeTemplateIds.BadgeTemplateUid_None)
                    {
                        var badge = badgeTemplateRepository.Get(pc.BadgeTemplateUid, ApplicationUserSessionHeader, null);
                        if (badge == null || badge.EntityId != person.EntityId)
                        {
                            var ex = new DataValidationException($"PersonCredential[{pcIndex}].BadgeTemplateUid {pc.BadgeTemplateUid} cannot be assigned to the credential because it is not owned by EntityId {person.EntityId}.");
                            var detail = new ExceptionDetailEx(ex);
                            throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                        }
                    }

                    if (pc.DossierBadgeTemplateUid != Guid.Empty && pc.BadgeTemplateUid != GalaxySMS.Common.Constants.BadgeTemplateIds.BadgeTemplateUid_None)
                    {
                        var badge = badgeTemplateRepository.Get(pc.DossierBadgeTemplateUid, ApplicationUserSessionHeader, null);
                        if (badge == null || badge.EntityId != person.EntityId)
                        {
                            var ex = new DataValidationException($"PersonCredential[{pcIndex}].DossierBadgeTemplateUid {pc.DossierBadgeTemplateUid} cannot be assigned to the credential because it is not owned by EntityId {person.EntityId}.");
                            var detail = new ExceptionDetailEx(ex);
                            throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                        }
                    }
                    if (pc.Credential != null)
                    {
                        if (pc.Credential.CredentialFormatUid == Guid.Empty)
                        {
                            if (pc.Credential.Standard26Bit != null)
                                pc.Credential.CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.Standard26Bit;
                            else if (pc.Credential.Corporate1K35Bit != null)
                                pc.Credential.CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.Corporate1K35Bit;
                            else if (pc.Credential.Corporate1K48Bit != null)
                                pc.Credential.CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.Corporate1K48Bit;
                            else if (pc.Credential.Bqt36Bit != null)
                                pc.Credential.CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.Bqt36Bit;
                            else if (pc.Credential.Cypress37Bit != null)
                                pc.Credential.CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.Cypress37Bit;
                            else if (pc.Credential.H1030237Bit != null)
                                pc.Credential.CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.H1030237Bit;
                            else if (pc.Credential.H1030437Bit != null)
                                pc.Credential.CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.H1030437Bit;
                            else if (pc.Credential.PIV75Bit != null)
                                pc.Credential.CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.PIV75Bit;
                            else if (pc.Credential.SoftwareHouse37Bit != null)
                                pc.Credential.CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.SoftwareHouse37Bit;
                            else if (pc.Credential.XceedId40Bit != null)
                                pc.Credential.CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.XceedId40Bit;
                            else if (pc.Credential.CardNumber != null)
                                pc.Credential.CredentialFormatUid = GalaxySMS.Common.Constants.CredentialFormatIds.NumericCardCode;

                        }
                        var credentialFormat = credentialFormats.FirstOrDefault(o => o.CredentialFormatUid == pc.Credential.CredentialFormatUid);
                        if (credentialFormat == null)
                        {
                            var ex = new DataValidationException($"PersonCredential[{pcIndex}].CredentialFormatUid {pc.Credential.CredentialFormatUid} cannot be assigned to the credential because it is not permitted by EntityId {person.EntityId}.");
                            var detail = new ExceptionDetailEx(ex);
                            throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                        }
                    }

                    pcIndex++;

                }
            }

            // Spin though the cluster permissions and verify that everything is valid
            if (person.PersonClusterPermissions != null && person.PersonClusterPermissions.Any())
            {
                var agRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyAccessGroupRepository>();
                var iogRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyInputOutputGroupRepository>();

                var pcpIndex = 0;

                foreach (var pcp in person.PersonClusterPermissions)
                {
                    var agIndex = 0;
                    var iogIndex = 0;
                    // Validate each access group. Make sure it belongs to the cluster and that the AccessGroupNumber is allowed for the OrderNumber
                    // (AG# > 255 not allowed in Order# 1&2)
                    // (AG# > 2000 not allowed in 3
                    foreach (var ag in pcp.PersonAccessGroups)
                    {
                        var dups = pcp.PersonAccessGroups.Where(o => o.OrderNumber == ag.OrderNumber).ToList();
                        if (dups.Count > 1)
                        {
                            var ex = new DataValidationException($"person.PersonClusterPermissions[{pcpIndex}] cannot have more than one PersonAccessGroup with OrderNumber [{ag.OrderNumber}]. There are [{dups.Count}] specified.");
                            var detail = new ExceptionDetailEx(ex);
                            throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                        }
                        var validationResult = agRepository.GetAccessGroupClusterPermissionValidationResult(pcp.ClusterUid, ag.AccessGroupUid, ag.OrderNumber);
                        if (validationResult != AccessGroupClusterPermissionValidationResult.Ok)
                        {
                            var ex = new DataValidationException($"person.PersonClusterPermissions[{pcpIndex}].PersonAccessGroups[{agIndex}] is not valid. Reason: {validationResult.ToString()}.");
                            var detail = new ExceptionDetailEx(ex);
                            throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                        }

                        agIndex++;
                    }

                    foreach (var iog in pcp.PersonInputOutputGroups)
                    {
                        var dups = pcp.PersonInputOutputGroups.Where(o => o.OrderNumber == iog.OrderNumber).ToList();
                        if (dups.Count > 1)
                        {
                            var ex = new DataValidationException($"person.PersonClusterPermissions[{pcpIndex}] cannot have more than one PersonInputOutputGroup with OrderNumber [{iog.OrderNumber}]. There are [{dups.Count}] specified.");
                            var detail = new ExceptionDetailEx(ex);
                            throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                        }
                        var validationResult = iogRepository.GetInputOutputGroupClusterPermissionValidationResult(pcp.ClusterUid, iog.InputOutputGroupUid, iog.OrderNumber);
                        if (validationResult != InputOutputGroupClusterPermissionValidationResult.Ok)
                        {
                            var ex = new DataValidationException($"person.PersonClusterPermissions[{pcpIndex}].PersonInputOutputGroup[{agIndex}] is not valid. Reason: {validationResult.ToString()}.");
                            var detail = new ExceptionDetailEx(ex);
                            throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                        }
                        iogIndex++;
                    }
                    pcpIndex++;
                }
            }
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeletePersonByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IPersonRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.UniqueId, true, nameof(Person), nameof(Person.PersonUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanDeleteId);

                var retValue = repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);

                var numberOfCdnImagesDeleted = Task.Run(async () => await Globals.Instance.DeleteBlobFromCdn(new DeleteBlobFromCdnParameters()
                {
                    OwnerUid = parameters.UniqueId,
                    TypeOfOwner = BlobOwnerType.Person,
                    DataType = BlobDataType.Photo,
                    Filename = string.Empty
                }, UserSessionToken.JwtToken)).Result;

                var sendDeleteParameters = new SendDataParameters<CredentialToDeleteFromCpu>()
                { PopulateDataFromDatabase = true, ApplicationUserSessionHeader = this.ApplicationUserSessionHeader };
                Globals.Instance.MessageBroker.SendMessage(
                    new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendDeletedCredentialsToHardware, sendDeleteParameters));

                return retValue;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeletePerson(DeleteParameters<Person> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IPersonRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(repository, parameters.Data.PersonUid, true, nameof(Person), nameof(Person.PersonUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanDeleteId);

                var retValue = repository.Remove(parameters.Data, ApplicationUserSessionHeader);

                var numberOfCdnImagesDeleted = Task.Run(async () => await Globals.Instance.DeleteBlobFromCdn(new DeleteBlobFromCdnParameters()
                {
                    OwnerUid = parameters.Data.PersonUid,
                    TypeOfOwner = BlobOwnerType.Person,
                    DataType = BlobDataType.Photo,
                    Filename = string.Empty
                }, UserSessionToken.JwtToken)).Result;

                var sendDeleteParameters = new SendDataParameters<CredentialToDeleteFromCpu>()
                { PopulateDataFromDatabase = true, ApplicationUserSessionHeader = this.ApplicationUserSessionHeader };
                Globals.Instance.MessageBroker.SendMessage(
                    new PDSAMessageBrokerMessage(MessageBrokerMessageNames.SendDeletedCredentialsToHardware, sendDeleteParameters));

                return retValue;
            });
        }

        public bool IsPersonReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IPersonRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsPersonUnique(Person data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IPersonRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }

        public PersonEditingData GetPersonEditingData(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var editingData = new PersonEditingData();
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);

                if (!parameters.IsExcluded(nameof(PersonEditingData.AccessProfiles)))
                {
                    var accessProfileRepository = _DataRepositoryFactory.GetDataRepository<IAccessProfileRepository>();
                    editingData.AccessProfiles = accessProfileRepository.GetAllAccessProfilesForEntity(ApplicationUserSessionHeader, parameters).Items.ToCollection();
                }

                if (!parameters.IsExcluded(nameof(PersonEditingData.BadgeTemplates)))
                {
                    var badgeTemplateRepository = _DataRepositoryFactory.GetDataRepository<IBadgeTemplateRepository>();
                    editingData.BadgeTemplates = badgeTemplateRepository.GetAllBadgeTemplatesForEntity(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(PersonEditingData.CellCarriers)))
                {
                    var cellCarrierRepository = _DataRepositoryFactory.GetDataRepository<ICellCarrierRepository>();
                    editingData.CellCarriers = cellCarrierRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(PersonEditingData.CommandScripts)))
                {
                    var commandScriptRepository = _DataRepositoryFactory.GetDataRepository<ICommandScriptRepository>();
                    editingData.CommandScripts = commandScriptRepository.GetAllCommandScriptsForEntity(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(PersonEditingData.Countries)))
                {
                    var countryRepository = _DataRepositoryFactory.GetDataRepository<ICountryRepository>();
                    editingData.Countries = countryRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(PersonEditingData.Departments)))
                {
                    var departmentRepository = _DataRepositoryFactory.GetDataRepository<IDepartmentRepository>();
                    editingData.Departments = departmentRepository.GetAllDepartmentsForEntity(ApplicationUserSessionHeader, parameters).Items.ToCollection();
                }

                if (!parameters.IsExcluded(nameof(PersonEditingData.Genders)))
                {
                    var genderRepository = _DataRepositoryFactory.GetDataRepository<IGenderRepository>();
                    editingData.Genders = genderRepository.GetAllGendersForEntity(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(PersonEditingData.PersonActiveStatusTypes)))
                {
                    var personActiveStatusTypeRepository = _DataRepositoryFactory.GetDataRepository<IPersonActiveStatusTypeRepository>();
                    editingData.PersonActiveStatusTypes = personActiveStatusTypeRepository.GetAllPersonActiveStatusTypesForEntity(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(PersonEditingData.PersonRecordTypes)))
                {
                    var personRecordTypeRepository = _DataRepositoryFactory.GetDataRepository<IPersonRecordTypeRepository>();
                    editingData.PersonRecordTypes = personRecordTypeRepository.GetAllPersonRecordTypesForEntity(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(PersonEditingData.PersonCredentialRoles)))
                {
                    var personCredentialRoleRepository = _DataRepositoryFactory.GetDataRepository<IPersonCredentialRoleRepository>();
                    editingData.PersonCredentialRoles = personCredentialRoleRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(PersonEditingData.PersonActivationModes)))
                {
                    var personActivationModeRepository = _DataRepositoryFactory.GetDataRepository<IPersonActivationModeRepository>();
                    editingData.PersonActivationModes = personActivationModeRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(PersonEditingData.PersonExpirationModes)))
                {
                    var personExpirationModeRepository = _DataRepositoryFactory.GetDataRepository<IPersonExpirationModeRepository>();
                    editingData.PersonExpirationModes = personExpirationModeRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                //if (!parameters.IsExcluded(nameof(PersonEditingData.Sites)))
                //{
                //    var siteRepository = _DataRepositoryFactory.GetDataRepository<ISiteRepository>();
                //    editingData.Sites = siteRepository.GetAllSitesForEntity(ApplicationUserSessionHeader, parameters).ToCollection();
                //}
                if (!parameters.IsExcluded(nameof(PersonEditingData.AccessPortalDeferToServerBehaviors)))
                {
                    var accessPortalDeferToServerBehaviorRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalDeferToServerBehaviorRepository>();
                    editingData.AccessPortalDeferToServerBehaviors = accessPortalDeferToServerBehaviorRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                if (!parameters.IsExcluded(nameof(PersonEditingData.AccessPortalNoServerReplyBehaviors)))
                {
                    var accessPortalNoServerReplyBehaviorRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalNoServerReplyBehaviorRepository>();
                    editingData.AccessPortalNoServerReplyBehaviors = accessPortalNoServerReplyBehaviorRepository.GetAll(ApplicationUserSessionHeader, parameters).ToCollection();
                }

                parameters.IncludeMemberCollections = true;

                if (!parameters.IsExcluded(nameof(PersonEditingData.AccessAndAlarmControlPermissionsEditingData)))
                {
                    editingData.AccessAndAlarmControlPermissionsEditingData = GetAccessAndAlarmControlPermissionsEditingData(parameters);
                }

                if (!parameters.IsExcluded(nameof(PersonEditingData.CredentialFormats)))
                {
                    var credentialFormatRepository = _DataRepositoryFactory.GetDataRepository<ICredentialFormatRepository>();
                    var p = new GetParametersWithPhoto(parameters);
                    p.ExcludeMemberCollectionSettings = new List<string>();
                    p.ExcludeMemberCollectionSettings.Add(nameof(GalaxySMSBusinessEntities.CredentialFormat.EntityIds));
                    p.ExcludeMemberCollectionSettings.Add(nameof(GalaxySMSBusinessEntities.CredentialFormat.MappedEntitiesPermissionLevels));
                    p.ExcludeMemberCollectionSettings.Add(nameof(GalaxySMSBusinessEntities.CredentialFormat.CredentialFormatParities));
                    editingData.CredentialFormats = credentialFormatRepository.GetAllCredentialFormatsForEntity(ApplicationUserSessionHeader, p).Where(o => o.IsAllowed == true && o.IsEnabled == true).ToCollection();
                }

                return editingData;
            });
        }

        public AccessAndAlarmControlPermissionsEditingData GetAccessAndAlarmControlPermissionsEditingData(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var accessAndAlarmControlPermissionsEditingData = new AccessAndAlarmControlPermissionsEditingData();
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);

                var regionRepository = _DataRepositoryFactory.GetDataRepository<IRegionRepository>();
                //var siteRepository = _DataRepositoryFactory.GetDataRepository<ISiteRepository>();
                //var clusterRepository = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();
                //var accessGroupRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyAccessGroupRepository>();
                //var inputOutputGroupRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyInputOutputGroupRepository>();
                //var accessPortalRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
                //var timeScheduleRepository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();
                accessAndAlarmControlPermissionsEditingData.Regions = regionRepository.GetAllRegionSelectionItemsForEntity(ApplicationUserSessionHeader, parameters).ToCollection();
                return accessAndAlarmControlPermissionsEditingData;
            });
        }

        //public AccessAndAlarmControlPermissionsEditingDataWpf GetAccessAndAlarmControlPermissionsEditingDataWpf(GetParametersWithPhoto parameters)
        //{
        //    return ExecuteFaultHandledOperation(() =>
        //    {
        //        var accessAndAlarmControlPermissionsEditingData = new AccessAndAlarmControlPermissionsEditingDataWpf();
        //        ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);

        //        var regionRepository = _DataRepositoryFactory.GetDataRepository<IRegionRepository>();
        //        //var siteRepository = _DataRepositoryFactory.GetDataRepository<ISiteRepository>();
        //        //var clusterRepository = _DataRepositoryFactory.GetDataRepository<IClusterRepository>();
        //        //var accessGroupRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyAccessGroupRepository>();
        //        //var inputOutputGroupRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyInputOutputGroupRepository>();
        //        //var accessPortalRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalRepository>();
        //        //var timeScheduleRepository = _DataRepositoryFactory.GetDataRepository<ITimeScheduleRepository>();

        //        var regions = regionRepository.GetAllRegionSelectionItemsForEntity(ApplicationUserSessionHeader, parameters).ToCollection();
        //        foreach (var r in regions)
        //            accessAndAlarmControlPermissionsEditingData.Regions.Add(new RegionSelectionItem(r));
        //        return accessAndAlarmControlPermissionsEditingData;
        //    });
        //}

        private UserInterfacePageControlData GetPersonUserInterfacePageControlDataWithoutValidateAuth(GetParametersWithPhoto parameters)
        {
            var editingData = new UserInterfacePageControlData();

            var hasViewPermssionsToPersonPublicProperties = DoesUserHavePermission(parameters, PermissionIds.GalaxySMSPropertyAccessPermission.PersonnelPublicPropertyAccessCanViewId);
            var hasViewPermssionsToPersonConfidentialProperties = DoesUserHavePermission(parameters, PermissionIds.GalaxySMSPropertyAccessPermission.PersonnelConfidentialPropertyAccessCanViewId);
            var hasEditPermssionsToPersonPublicProperties = DoesUserHavePermission(parameters, PermissionIds.GalaxySMSPropertyAccessPermission.PersonnelPublicPropertyAccessCanEditId);
            var hasEditPermssionsToPersonConfidentialProperties = DoesUserHavePermission(parameters, PermissionIds.GalaxySMSPropertyAccessPermission.PersonnelConfidentialPropertyAccessCanEditId);

            var userDefinedPropertyRepository = _DataRepositoryFactory.GetDataRepository<IUserDefinedPropertyRepository>();

            parameters.IncludeMemberCollections = true;
            editingData.ControlProperties = userDefinedPropertyRepository.GetAllUserDefinedPropertiesForEntity(ApplicationUserSessionHeader, parameters).ToCollection();
            foreach (var p in editingData.ControlProperties)
            {
                switch (p.PropertySensitivityLevel.SensitivityLevel)
                {
                    case SensitivityLevel.Confidential:
                        p.IsVisible = hasViewPermssionsToPersonConfidentialProperties;
                        p.IsReadOnly = !hasEditPermssionsToPersonConfidentialProperties;
                        break;

                    case SensitivityLevel.Public:
                        p.IsVisible = hasViewPermssionsToPersonPublicProperties;
                        p.IsReadOnly = !hasEditPermssionsToPersonPublicProperties;
                        break;
                }
                if (p.IsActive == false)
                    p.IsVisible = false;
            }
            return editingData;

        }

        public UserInterfacePageControlData GetPersonUserInterfacePageControlData(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);

                return GetPersonUserInterfacePageControlDataWithoutValidateAuth(parameters);
            });
        }

        public Person SyncPersonWithAccessProfile(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanUpdateId);
                var repository = _DataRepositoryFactory.GetDataRepository<IPersonRepository>();
                var p = repository.SyncPersonWithAccessProfile(ApplicationUserSessionHeader, parameters);
                return p;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public SaveDefaultPhotoResponse SavePersonPhoto(SaveParameters<SavePhotoParameters> parameters)
        {
            // Accept the following image formats: jpg, jpeg, png, webp, avif
            // The incoming data is stored in its native format in the PersonPhoto table (image is in FILESTREAM)
            // Scaled images are converted to Jpg and stored in the PersonPhotoScaled table (image is in FILESTREAM)
            return ExecuteFaultHandledOperation(() =>
            {
                bool bPersonExists = false;
                if (parameters.Data.FileBinaryData == null || parameters.Data.FileBinaryData.Length == 0)
                {
                    var ex =
                        new ApplicationException($"Photo cannot be saved because the FileBinaryData is null or empty.");
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }
                if (parameters.Data.FileBinaryData.Length > Globals.Instance.MaxUploadFileSize)
                {
                    var ex =
                        new ApplicationException($"Photo cannot be saved because the FileBinaryData exceeds the maximum allowed size of {Globals.Instance.MaxUploadFileSize} bytes.");
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                var invalidScaledImageTags = parameters.Data.ScaleImages.Where(o =>
                    o.Tag == null || string.IsNullOrEmpty(o.Tag) || string.IsNullOrWhiteSpace(o.Tag));
                if (invalidScaledImageTags.Any())
                {
                    var ex =
                        new ApplicationException($"ScaleImages contains an entry with no Tag value.");
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);

                }

                var responseData = new SaveDefaultPhotoResponse();
                if (string.IsNullOrEmpty(parameters.Data.Tag))
                    parameters.Data.Tag = "*";

                parameters.Data.TypeOfFile = parameters.Data.OriginalContentType.ContentTypeToFileType();
                parameters.Data.TypeOfOwner = SaveFileParameters.OwnerType.Person;
                var originalIsJpg = false;
                var magickType = MagickFormat.Jpg;
                var saveFilename = parameters.Data.SaveToFilename;
                var saveFileExtension = string.Empty;
                switch (parameters.Data.TypeOfFile)
                {
                    case SaveFileParameters.FileType.Jpeg:
                        saveFileExtension = $"jpg";
                        originalIsJpg = true;
                        break;
                    case SaveFileParameters.FileType.Png:
                        saveFileExtension = $"png";
                        magickType = MagickFormat.Png;
                        break;
                    case SaveFileParameters.FileType.Avif:
                        saveFileExtension = $"avif";
                        magickType = MagickFormat.Avif;
                        parameters.Data.UseMagick = true;
                        break;
                    case SaveFileParameters.FileType.WebP:
                        saveFileExtension = $"webp";
                        magickType = MagickFormat.WebP;
                        parameters.Data.UseMagick = true;
                        break;
                    default:
                        var ex =
                            new ApplicationException($"Photo cannot be saved because file format {parameters.Data.TypeOfFile} is not supported.");
                        var detail = new ExceptionDetailEx(ex);
                        throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                        break;
                }

                if (parameters.Data.GenerateRandomFilename == true || string.IsNullOrEmpty(saveFilename))
                {
                    if (parameters.Data.RandomFilenameLength < 8)
                        parameters.Data.RandomFilenameLength = 40;
                    saveFilename = GCS.Core.Common.Extensions.StringExtensions.GenerateRandomString(parameters.Data.RandomFilenameLength);
                }

                responseData.UniqueFilename = saveFilename;

                if (parameters.Data.JpgQuality == 0)
                    parameters.Data.JpgQuality = 90;    // default to 90%

                var scaledJpgImages = new List<ImageInfo>();
                if (parameters.Data.ScaleImages.Any())
                {
                    int newWidth = 0;
                    int newHeight = 0;
                    // Start by creating the master JPG from the incoming data.
                    byte[] originalAsJpgData = null;
                    if (originalIsJpg)
                        originalAsJpgData = parameters.Data.FileBinaryData;
                    else
                    {
                        if (parameters.Data.UseMagick)
                        {
                            originalAsJpgData =
                                GCS.Framework.Magick.Imaging.ConvertImageFromOneFormatToAnother(parameters.Data.FileBinaryData, magickType, MagickFormat.Jpg, ref newWidth, ref newHeight, null);
                        }
                        else
                        {
                            originalAsJpgData =
                                GCS.Framework.Imaging.Helpers.ImageUtilities.ToJpg(parameters.Data.FileBinaryData, parameters.Data.JpgQuality);
                        }
                    }

                    // Create Image from byte array
                    var jpgImage = GCS.Framework.Imaging.ByteArrayToFromImage.ByteArrayToImage(originalAsJpgData);

                    // Create scaled images
                    foreach (var o in parameters.Data.ScaleImages)
                    {
                        var scaleToWidth = o.ScaleToWidth;
                        var scaleToHeight = o.ScaleToWidth;
                        if (jpgImage.Width < jpgImage.Height)
                            scaleToHeight = 0;
                        else if (jpgImage.Width > jpgImage.Height)
                            scaleToWidth = 0;

                        byte[] scaledImageBytes = null;
                        var imageInfo = new ImageInfo()
                        {
                            Tag = o.Tag
                        };
                        if (o.ScaleToWidth == 0)
                        {
                            imageInfo.ImageBytes = originalAsJpgData;
                            imageInfo.ImageHeight = jpgImage.Height;
                            imageInfo.ImageWidth = jpgImage.Width;
                        }
                        else
                        {
                            System.Drawing.Image scaledImg = null;
                            if (parameters.Data.UseMagick)
                            {
                                imageInfo.ImageBytes = GCS.Framework.Magick.Imaging.ConvertImageFromOneFormatToAnother(
                                    originalAsJpgData, MagickFormat.Jpg, MagickFormat.Jpg, ref newWidth, ref newHeight, new ResizeOptions()
                                    {
                                        Width = scaleToWidth,
                                        Height = scaleToHeight,
                                        IngoreAspectRatio = false,
                                        Compress = true
                                    });
                                imageInfo.ImageHeight = newHeight;
                                imageInfo.ImageWidth = newWidth;
                            }
                            else
                            {
                                scaledImg = GCS.Framework.Imaging.Helpers.ImageUtilities.ResizeImageWithAspectRatio(jpgImage, scaleToWidth, scaleToHeight);
                                imageInfo.ImageBytes = GCS.Framework.Imaging.ByteArrayToFromImage.ImageToByteArray(scaledImg);
                                imageInfo.ImageHeight = scaledImg.Height;
                                imageInfo.ImageWidth = scaledImg.Width;
                            }
                        }

                        scaledJpgImages.Add(imageInfo);
                    }
                }

                if (parameters.Data.OwnerUid != Guid.Empty)
                {
                    var personRepository = _DataRepositoryFactory.GetDataRepository<IPersonRepository>();
                    var personPhotoRepository = _DataRepositoryFactory.GetDataRepository<IPersonPhotoRepository>();

                    bPersonExists = personRepository.DoesExist(parameters.Data.OwnerUid);
                    if (bPersonExists)
                    {
                        var entityId = personRepository.GetEntityId(parameters.Data.OwnerUid);
                        if (entityId != Guid.Empty)
                        {
                            parameters.CurrentEntityId = entityId;
                            ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanAddId);

                            // Get All the existing records for the person, omitting the photo image binary object for performance reasons
                            IEnumerable<PersonPhoto> existingPersonPhotos = existingPersonPhotos =
                                personPhotoRepository.GetAllPersonPhotosForPerson(ApplicationUserSessionHeader,
                                    new GetParametersWithPhoto() { PersonUid = parameters.Data.OwnerUid, OmitPhotoBinaryData = true });

                            // If this is the first photo for the person, set it to the default automatically
                            if (!existingPersonPhotos.Any())
                                parameters.Data.IsDefault = true;

                            PersonPhoto personPhoto = null;
                            // If Tag is included in parameters.Data, then use that as a hint about which photo record to update
                            if (!string.IsNullOrEmpty(parameters.Data.Tag))
                            {
                                //existingPersonPhotos = personPhotoRepository.GetPersonPhotosOmitImageForPersonAndTag(ApplicationUserSessionHeader,
                                //    new GetParametersWithPhoto() { PersonUid = parameters.Data.OwnerUid, GetString = parameters.Data.Tag });
                                personPhoto = existingPersonPhotos.FirstOrDefault(o => o.Tag.ToLower() == parameters.Data.Tag.ToLower());
                            }
                            else
                            {
                                //existingPersonPhotos = personPhotoRepository.GetPersonPhotosOmitImageForPerson(ApplicationUserSessionHeader,
                                //    new GetParametersWithPhoto() { PersonUid = parameters.Data.OwnerUid });
                                personPhoto = existingPersonPhotos.FirstOrDefault();
                            }

                            if (personPhoto == null)
                            {
                                personPhoto = new PersonPhoto()
                                {
                                    PersonUid = parameters.Data.OwnerUid,
                                    UniqueFilename = $"{saveFilename}.{saveFileExtension}",
                                    IsDefault = parameters.Data.IsDefault
                                };
                            }

                            personPhoto.Tag = parameters.Data.Tag;
                            personPhoto.OriginalFilename = parameters.Data.OriginalFilename;
                            personPhoto.ContentType = parameters.Data.OriginalContentType;
                            personPhoto.PhotoImage = parameters.Data.FileBinaryData;
                            UpdateProperties(personPhoto);
                            PersonPhoto savedPersonPhoto = null;
                            if (personPhoto.PersonPhotoUid == Guid.Empty)
                            {
                                personPhoto.PersonPhotoUid = GuidUtilities.GenerateComb();

                                if (personPhoto.IsDefault == true)
                                {// turn off the IsDefault on all other photos for the person
                                    var existingDefaultImages = existingPersonPhotos.Where(o =>
                o.IsDefault == true && o.PersonPhotoUid != personPhoto.PersonPhotoUid);
                                    foreach (var existingDefaultImage in existingDefaultImages)
                                    {
                                        existingDefaultImage.IsDefault = false;
                                        UpdateProperties(existingDefaultImage);
                                        personPhotoRepository.UpdateIsDefault(ApplicationUserSessionHeader, existingDefaultImage);
                                    }
                                }

                                savedPersonPhoto = personPhotoRepository.Add(personPhoto, ApplicationUserSessionHeader, parameters);
                            }
                            else
                            {
                                var existingFilenameParts = personPhoto.UniqueFilename.Split('.');
                                if (existingFilenameParts.LastOrDefault().ToLower() != saveFileExtension.ToLower())
                                {
                                    for (int x = 0; x < existingFilenameParts.Length - 1; x++)
                                        personPhoto.UniqueFilename = existingFilenameParts[x];
                                    personPhoto.UniqueFilename += $".{saveFileExtension}";
                                }

                                savedPersonPhoto = personPhotoRepository.Update(personPhoto, ApplicationUserSessionHeader, parameters);
                            }

                            if (savedPersonPhoto != null)
                            {
                                responseData.IsDefault = savedPersonPhoto.IsDefault;
                                //responseData.Original = savedPersonPhoto.UniqueFilename;

                                if (savedPersonPhoto.IsDefault == true)
                                {// turn off the IsDefault on all other photos for the person
                                    var existingDefaultImages = existingPersonPhotos.Where(o =>
                o.IsDefault == true && o.PersonPhotoUid != savedPersonPhoto.PersonPhotoUid);
                                    foreach (var existingDefaultImage in existingDefaultImages)
                                    {
                                        existingDefaultImage.IsDefault = false;
                                        UpdateProperties(existingDefaultImage);
                                        personPhotoRepository.Update(existingDefaultImage, ApplicationUserSessionHeader, parameters);
                                    }
                                }

                                var numberOfCdnImagesDeleted = Task.Run(async () => await Globals.Instance.DeleteBlobFromCdn(new DeleteBlobFromCdnParameters()
                                {
                                    OwnerUid = savedPersonPhoto.PersonUid,
                                    TypeOfOwner = BlobOwnerType.Person,
                                    DataType = BlobDataType.Photo,
                                    Filename = savedPersonPhoto.UniqueFilename.Split('.')[0]
                                }, UserSessionToken.JwtToken)).Result;


                                savedPersonPhoto.PublicUrl = Task.Run(async () => await Globals.Instance.PushBlobToCdn(new PushBlobToCdnParameters()
                                {
                                    OwnerUid = savedPersonPhoto.PersonUid,
                                    TypeOfOwner = BlobOwnerType.Person,
                                    DataType = BlobDataType.Photo,
                                    Data = savedPersonPhoto.PhotoImage,
                                    Filename = savedPersonPhoto.UniqueFilename
                                }, UserSessionToken.JwtToken)).Result;

                                var pp = personPhotoRepository.UpdatePublicUrl(ApplicationUserSessionHeader, savedPersonPhoto);
                                responseData.Original = pp.PublicUrl;
                            }

                            if (scaledJpgImages.Any())
                            {
                                var scaledPersonPhotoRepository = _DataRepositoryFactory.GetDataRepository<IPersonPhotoScaledRepository>();
                                var existingScaledImages = scaledPersonPhotoRepository.GetAllForPersonPhoto(ApplicationUserSessionHeader, new GetParametersWithPhoto() { UniqueId = savedPersonPhoto.PersonPhotoUid });
                                foreach (var scaledImage in scaledJpgImages)
                                {
                                    var personPhotoScaled =
                                        existingScaledImages.FirstOrDefault(o => o.Tag.ToLower() == scaledImage.Tag.ToLower());
                                    if (personPhotoScaled == null)
                                    {
                                        personPhotoScaled = new PersonPhotoScaled()
                                        {
                                            PersonPhotoUid = savedPersonPhoto.PersonPhotoUid,
                                            Tag = scaledImage.Tag,
                                        };
                                    }

                                    personPhotoScaled.PhotoImage = scaledImage.ImageBytes;
                                    var uniqueFilenameParts = savedPersonPhoto.UniqueFilename.Split('.');
                                    personPhotoScaled.UniqueFilename = $"{uniqueFilenameParts[0]}_{scaledImage.ImageWidth}x{scaledImage.ImageHeight}.jpg";
                                    UpdateProperties(personPhotoScaled);
                                    PersonPhotoScaled savedPersonPhotoScaled = null;

                                    if (personPhotoScaled.PersonPhotoScaledUid == Guid.Empty)
                                    {
                                        personPhotoScaled.PersonPhotoScaledUid = GuidUtilities.GenerateComb();
                                        savedPersonPhotoScaled = scaledPersonPhotoRepository.Add(personPhotoScaled, ApplicationUserSessionHeader,
                                            parameters);
                                    }
                                    else
                                    {
                                        savedPersonPhotoScaled = scaledPersonPhotoRepository.Update(personPhotoScaled, ApplicationUserSessionHeader,
                                            parameters);
                                    }

                                    savedPersonPhotoScaled.PublicUrl = Task.Run(async () => await Globals.Instance.PushBlobToCdn(new PushBlobToCdnParameters()
                                    {
                                        OwnerUid = savedPersonPhoto.PersonUid,
                                        TypeOfOwner = BlobOwnerType.Person,
                                        DataType = BlobDataType.Photo,
                                        Data = savedPersonPhotoScaled.PhotoImage,
                                        Filename = savedPersonPhotoScaled.UniqueFilename
                                    }, UserSessionToken.JwtToken)).Result;

                                    var pps = scaledPersonPhotoRepository.UpdatePublicUrl(ApplicationUserSessionHeader,
                                        savedPersonPhotoScaled);

                                    if (scaledImage.Tag.ToLower() == nameof(responseData.Default).ToLower())
                                        responseData.Default = pps.PublicUrl;
                                    else if (scaledImage.Tag.ToLower() == nameof(responseData.Small).ToLower())
                                        responseData.Small = pps.PublicUrl;
                                }
                            }

                        }
                    }
                }

                if (!bPersonExists)
                {
                    if (string.IsNullOrEmpty(parameters.Data.SaveToFilename))
                        parameters.Data.SaveToFilename = GCS.Core.Common.Extensions.StringExtensions.GenerateRandomString(parameters.Data.RandomFilenameLength);
                    var uploadFile = new UploadedFile()
                    {
                        UploadedFileUid = GuidUtilities.GenerateComb(),
                        Tag = parameters.Data.Tag,
                        PhotoImage = parameters.Data.FileBinaryData,
                        UniqueFilename = parameters.Data.SaveToFilename,
                        OriginalFilename = parameters.Data.OriginalFilename,
                        ContentType = parameters.Data.OriginalContentType
                    };

                    UpdateProperties(uploadFile);
                    var uploadedFileRepository = _DataRepositoryFactory.GetDataRepository<IUploadedFileRepository>();
                    var savedFile = uploadedFileRepository.Add(uploadFile, ApplicationUserSessionHeader, parameters);

                    if (savedFile != null)
                    {
                        responseData.IsDefault = false;
                        responseData.UniqueFilename = savedFile.UniqueFilename;
                    }

                    var numberStaleImagesDeleted = uploadedFileRepository.DeleteStaleImages(ApplicationUserSessionHeader,
                        new GetParametersWithPhoto() { GetInt32 = Globals.Instance.UploadedFilesStaleDays });
                }

                return responseData;
            });
        }

        public PersonInfoWithMissingPhotoUrl[] GetPersonInfoWithNoPhotoPublicUrl(Guid entityId)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                if (entityId == Guid.Empty)
                    entityId = UserSessionToken.CurrentEntityId;
                if (entityId != Guid.Empty)
                {
                    ValidateEntityAuthorizationAndSetupOperation(entityId, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);
                }
                var responseData = new List<PersonInfoWithMissingPhotoUrl>();
                var personRepository = _DataRepositoryFactory.GetDataRepository<IPersonRepository>();
                var pi = personRepository.GetAllPersonsWithMissingPhotoUrl(entityId);
                return pi.ToArray();
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public PersonSavePhotoResponse[] SendPersonPhotosToCdn(Guid personUid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var responseData = new List<PersonSavePhotoResponse>();
                var personPhotoRepository = _DataRepositoryFactory.GetDataRepository<IPersonPhotoRepository>();
                var photos = personPhotoRepository.GetAllPersonPhotosForPerson(ApplicationUserSessionHeader,
                    new GetParametersWithPhoto() { PersonUid = personUid });
                if (photos.Any())
                {
                    var personPhotoScaledRepository = _DataRepositoryFactory.GetDataRepository<IPersonPhotoScaledRepository>();

                    foreach (var photo in photos)
                    {
                        var respItem = new PersonSavePhotoResponse()
                        {
                            PersonUid = personUid,
                        };
                        var numberOfCdnImagesDeleted = Task.Run(async () => await Globals.Instance.DeleteBlobFromCdn(new DeleteBlobFromCdnParameters()
                        {
                            OwnerUid = photo.PersonUid,
                            TypeOfOwner = BlobOwnerType.Person,
                            DataType = BlobDataType.Photo,
                            Filename = photo.UniqueFilename.Split('.')[0]
                        }, UserSessionToken.JwtToken)).Result;

                        photo.PublicUrl = Task.Run(async () => await Globals.Instance.PushBlobToCdn(new PushBlobToCdnParameters()
                        {
                            OwnerUid = photo.PersonUid,
                            TypeOfOwner = BlobOwnerType.Person,
                            DataType = BlobDataType.Photo,
                            Data = photo.PhotoImage,
                            Filename = photo.UniqueFilename
                        }, UserSessionToken.JwtToken)).Result;

                        var pp = personPhotoRepository.UpdatePublicUrl(ApplicationUserSessionHeader, photo);
                        respItem.Original = pp.PublicUrl;

                        var scaledPhotos = personPhotoScaledRepository.GetAllForPersonPhoto(ApplicationUserSessionHeader, new GetParametersWithPhoto() { UniqueId = photo.PersonPhotoUid });
                        foreach (var scaledPhoto in scaledPhotos)
                        {
                            scaledPhoto.PublicUrl = Task.Run(async () => await Globals.Instance.PushBlobToCdn(new PushBlobToCdnParameters()
                            {
                                OwnerUid = personUid,
                                TypeOfOwner = BlobOwnerType.Person,
                                DataType = BlobDataType.Photo,
                                Data = scaledPhoto.PhotoImage,
                                Filename = scaledPhoto.UniqueFilename
                            }, UserSessionToken.JwtToken)).Result;

                            var pps = personPhotoScaledRepository.UpdatePublicUrl(ApplicationUserSessionHeader,
                                scaledPhoto);

                            if (scaledPhoto.Tag.ToLower() == nameof(respItem.Default).ToLower())
                                respItem.Default = pps.PublicUrl;
                            else if (scaledPhoto.Tag.ToLower() == nameof(respItem.Small).ToLower())
                                respItem.Small = pps.PublicUrl;
                        }
                        responseData.Add(respItem);
                    }
                }
                return responseData.ToArray();
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeletePersonPhoto(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var numberDeleted = 0;
                var personRepo = _DataRepositoryFactory.GetDataRepository<IPersonRepository>();
                parameters.CurrentEntityId = GetEntityIdOf(personRepo, parameters.UniqueId, true, nameof(Person), nameof(Person.PersonUid));

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanDeleteId);

                var repository = _DataRepositoryFactory.GetDataRepository<IPersonPhotoRepository>();
                var photos = repository.GetAllPersonPhotosForPerson(ApplicationUserSessionHeader,
                    new GetParametersWithPhoto() { PersonUid = parameters.UniqueId });
                foreach (var p in photos)
                {
                    var bDeleteIt = false;
                    if (string.IsNullOrEmpty(parameters.StringValue))
                        bDeleteIt = true;
                    else
                    {
                        if (p.UniqueFilename.ToLower().StartsWith(parameters.StringValue.ToLower()))
                            bDeleteIt = true;
                    }

                    if (bDeleteIt)
                    {
                        numberDeleted += repository.Remove(p.PersonPhotoUid, ApplicationUserSessionHeader);
                        var numberOfCdnImagesDeleted = Task.Run(async () => await Globals.Instance.DeleteBlobFromCdn(new DeleteBlobFromCdnParameters()
                        {
                            OwnerUid = p.PersonUid,
                            TypeOfOwner = BlobOwnerType.Person,
                            DataType = BlobDataType.Photo,
                            Filename = p.UniqueFilename.Split('.')[0]
                        }, UserSessionToken.JwtToken)).Result;

                    }
                }
                return numberDeleted;
            });

        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public Person UpdatePersonProperties(SaveParameters<SavePersonPropertiesParameters> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IPersonRepository>();
                var p = repository.Get(parameters.Data.PersonUid, ApplicationUserSessionHeader,
                    new GetParametersWithPhoto() { IncludeMemberCollections = true, IncludeScaledPhotos = true, OmitPhotoBinaryData = true, IncludePhoto = true });

                if (p == null)
                {
                    var ex = new ApplicationException("Person.PersonUid does not exist.");
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                var saveProps = new SaveParameters<Person>(parameters);

                var ignoreList = saveProps.IgnoreProperties.ToList();
                ignoreList.Add(nameof(p.PersonAccessControlProperty));
                ignoreList.Add(nameof(p.PersonPhotos));
                ignoreList.Add(nameof(p.PersonAddresses));
                ignoreList.Add(nameof(p.PersonEmailAddresses));
                ignoreList.Add(nameof(p.PersonPhoneNumbers));
                ignoreList.Add(nameof(p.PersonLcdMessages));
                ignoreList.Add(nameof(p.PersonPropertyBags));
                ignoreList.Add(nameof(p.Notes));
                ignoreList.Add(nameof(p.PersonNotes));
                ignoreList.Add(nameof(p.PersonCredentials));
                ignoreList.Add(nameof(p.PersonClusterPermissions));


                var bDirty = false;
                foreach (var prop in parameters.Data.Properties?.BoolProperties)
                {
                    var dirty = p.SetPropertyByName(prop.PropertyName, prop.Value);
                    if (dirty)
                        bDirty = true;
                }

                foreach (var prop in parameters.Data.Properties?.DateTimeProperties)
                {
                    var dirty = p.SetPropertyByName(prop.PropertyName, prop.Value);
                    if (dirty)
                        bDirty = true;
                }

                foreach (var prop in parameters.Data.Properties?.GuidProperties)
                {
                    var dirty = p.SetPropertyByName(prop.PropertyName, prop.Value);
                    if (dirty)
                        bDirty = true;
                }

                foreach (var prop in parameters.Data.Properties?.IntProperties)
                {
                    var dirty = p.SetPropertyByName(prop.PropertyName, prop.Value);
                    if (dirty)
                        bDirty = true;
                }

                foreach (var prop in parameters.Data.Properties?.TextProperties)
                {
                    var dirty = p.SetPropertyByName(prop.PropertyName, prop.Value);
                    if (dirty)
                        bDirty = true;
                }

                var personAccessControlPropertyDirty = false;

                foreach (var prop in parameters.Data.PersonAccessControlProperties?.BoolProperties)
                {
                    personAccessControlPropertyDirty = p.PersonAccessControlProperty.SetPropertyByName(prop.PropertyName, prop.Value);
                    if (personAccessControlPropertyDirty)
                    {
                        p.PersonAccessControlProperty.IsDirty = true;
                        bDirty = true;
                        ignoreList.Remove(nameof(p.PersonAccessControlProperty));
                    }
                }

                foreach (var prop in parameters.Data.PersonAccessControlProperties?.GuidProperties)
                {
                    personAccessControlPropertyDirty = p.PersonAccessControlProperty.SetPropertyByName(prop.PropertyName, prop.Value);
                    if (personAccessControlPropertyDirty)
                    {
                        p.PersonAccessControlProperty.IsDirty = true;
                        bDirty = true;
                        ignoreList.Remove(nameof(p.PersonAccessControlProperty));
                    }
                }

                foreach (var prop in parameters.Data.PersonAccessControlProperties?.IntProperties)
                {
                    personAccessControlPropertyDirty = p.PersonAccessControlProperty.SetPropertyByName(prop.PropertyName, prop.Value);
                    if (personAccessControlPropertyDirty)
                    {
                        p.PersonAccessControlProperty.IsDirty = true;
                        bDirty = true;
                        ignoreList.Remove(nameof(p.PersonAccessControlProperty));
                    }
                }

                if (bDirty)
                {
                    saveProps.Data = p;
                    saveProps.IgnoreProperties = ignoreList;
                    return SavePerson(saveProps);
                }

                return p;
            });

        }

        #endregion

        #region User Defined Property Operations


        public UserDefinedProperty[] GetAllUserDefinedProperties(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IUserDefinedPropertyRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public UserDefinedProperty[] GetAllUserDefinedPropertiesForEntity(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);

                if (parameters.UniqueId != Guid.Empty)
                    ValidateUserHasEntityAccess(parameters.UniqueId, true);

                var repository = _DataRepositoryFactory.GetDataRepository<IUserDefinedPropertyRepository>();
                var data = repository.GetAllUserDefinedPropertiesForEntity(
                    ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public UserDefinedProperty GetUserDefinedProperty(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IUserDefinedPropertyRepository>();
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("UserDefinedProperty with UserDefinedPropertyUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public UserDefinedProperty SaveUserDefinedProperty(
            SaveParameters<UserDefinedProperty>
                parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanUpdateId);
                var repository = _DataRepositoryFactory.GetDataRepository<IUserDefinedPropertyRepository>();

                UserDefinedProperty updatedItem = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format(
                                "UserDefinedProperty with ID of '{0}', Name: {1} cannot be saved because it is a duplicate.",
                                parameters.Data.UserDefinedPropertyUid, parameters.Data.PropertyName));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                UpdateProperties(parameters.Data);
                if (parameters.Data.UserDefinedPropertyUid == Guid.Empty)
                {
                    parameters.Data.UserDefinedPropertyUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.UserDefinedPropertyUid) == false)
                {
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                return updatedItem;
            });
        }


        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteUserDefinedPropertyByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<IUserDefinedPropertyRepository>();

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteUserDefinedProperty(DeleteParameters<UserDefinedProperty> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<IUserDefinedPropertyRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }


        public bool IsUserDefinedPropertyReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IUserDefinedPropertyRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsUserDefinedPropertyUnique(UserDefinedProperty data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IUserDefinedPropertyRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }




        [OperationBehavior(TransactionScopeRequired = true)]
        public UserInterfacePageControlData SaveUserDefinedProperties(SaveParameters<List<UserDefinedProperty>> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var editingData = new UserInterfacePageControlData();
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanUpdateId);

                var userDefinedPropertyRepository = _DataRepositoryFactory.GetDataRepository<IUserDefinedPropertyRepository>();
                foreach (var p in parameters.Data)
                {
                    SaveUserDefinedProperty(new SaveParameters<UserDefinedProperty>(parameters) { Data = p });
                }

                return GetPersonUserInterfacePageControlData(new GetParametersWithPhoto(parameters)
                {
                    IncludeMemberCollections = true,
                });
            });
        }
        #endregion

        #region Credential Operations
        public DecodedCredential[] DecodeCredentialNumber(DecodeCredentialNumberParameters parameters)
        {
            DecodedCredential decodedCredential = null;
            var dataItems = AnalyseCardNumber(parameters.CredentialNumber, parameters.BitCount, GalaxySMS.Common.Enums.CredentialReaderDataFormat.WiegandFormat);
            var retItems = new List<DecodedCredential>();
            if (dataItems == null || dataItems.Any() == false)
            {
                decodedCredential = new DecodedCredential
                {
                    CredentialFormatCode = CredentialFormatCodes.NumericCardCode,
                    DataFormatString = CredentialFormatCodes.NumericCardCode.ToString(),
                    CredentialNumber = parameters.CredentialNumber,
                    BitCount = parameters.BitCount
                };

                retItems.Add(decodedCredential);
            }
            else
            {
                foreach (var data in dataItems)
                {
                    switch (data.DataFormat)
                    {
                        case CredentialFormatCodes.NumericCardCode:
                        case CredentialFormatCodes.MagneticStripeBarcodeAba:
                        case CredentialFormatCodes.GalaxyKeypad:
                        case CredentialFormatCodes.USGovernmentID:
                            decodedCredential = new DecodedCredential
                            {
                                CredentialFormatCode = data.DataFormat,
                                DataFormatString = data.DataFormat.ToString(),
                                CredentialNumber = parameters.CredentialNumber,
                                BitCount = parameters.BitCount
                            };
                            retItems.Add(decodedCredential);
                            break;

                        case CredentialFormatCodes.Standard26Bit:
                            decodedCredential = new DecodedCredential
                            {
                                CredentialFormatCode = data.DataFormat,
                                DataFormatString = data.DataFormat.ToString(),
                                CredentialNumber = data.Wiegand26Data.FCC,
                                BitCount = parameters.BitCount
                            };
                            decodedCredential.CredentialParts.Add(new CredentialPart() { Name = "FacilityCode", Value = data.Wiegand26Data.FacilityCode });
                            decodedCredential.CredentialParts.Add(new CredentialPart() { Name = "IDCode", Value = (uint)data.Wiegand26Data.IDCode });
                            retItems.Add(decodedCredential);
                            break;

                        case CredentialFormatCodes.Corporate1K35Bit:
                            decodedCredential = new DecodedCredential
                            {
                                CredentialFormatCode = data.DataFormat,
                                DataFormatString = data.DataFormat.ToString(),
                                CredentialNumber = data.Wiegand35HIDCorporate1000Data.FCC,
                                BitCount = parameters.BitCount
                            };
                            decodedCredential.CredentialParts.Add(new CredentialPart() { Name = "CompanyCode", Value = data.Wiegand35HIDCorporate1000Data.CompanyCode });
                            decodedCredential.CredentialParts.Add(new CredentialPart() { Name = "IDCode", Value = data.Wiegand35HIDCorporate1000Data.IDCode });
                            retItems.Add(decodedCredential);
                            break;

                        case CredentialFormatCodes.Corporate1K48Bit:
                            decodedCredential = new DecodedCredential
                            {
                                CredentialFormatCode = data.DataFormat,
                                DataFormatString = data.DataFormat.ToString(),
                                CredentialNumber = data.Wiegand48HIDCorporate1000Data.FCC,
                                BitCount = parameters.BitCount
                            };
                            decodedCredential.CredentialParts.Add(new CredentialPart() { Name = "CompanyCode", Value = data.Wiegand48HIDCorporate1000Data.CompanyCode });
                            decodedCredential.CredentialParts.Add(new CredentialPart() { Name = "IDCode", Value = data.Wiegand48HIDCorporate1000Data.IDCode });
                            retItems.Add(decodedCredential);
                            break;

                        case CredentialFormatCodes.PIV75Bit:
                            decodedCredential = new DecodedCredential
                            {
                                CredentialFormatCode = data.DataFormat,
                                DataFormatString = data.DataFormat.ToString(),
                                CredentialNumber = data.PIV75Data.FCC,
                                BitCount = parameters.BitCount
                            };
                            decodedCredential.CredentialParts.Add(new CredentialPart() { Name = "AgencyCode", Value = data.PIV75Data.AgencyCode });
                            decodedCredential.CredentialParts.Add(new CredentialPart() { Name = "SiteCode", Value = data.PIV75Data.SiteCode });
                            decodedCredential.CredentialParts.Add(new CredentialPart() { Name = "Credential", Value = data.PIV75Data.Credential });
                            retItems.Add(decodedCredential);
                            break;

                        case CredentialFormatCodes.Bqt36Bit:
                            decodedCredential = new DecodedCredential
                            {
                                CredentialFormatCode = data.DataFormat,
                                DataFormatString = data.DataFormat.ToString(),
                                CredentialNumber = data.BQT36Data.FCC,
                                BitCount = parameters.BitCount
                            };
                            decodedCredential.CredentialParts.Add(new CredentialPart() { Name = "FacilityCode", Value = data.BQT36Data.FacilityCode });
                            decodedCredential.CredentialParts.Add(new CredentialPart() { Name = "IDCode", Value = data.BQT36Data.IDCode });
                            decodedCredential.CredentialParts.Add(new CredentialPart() { Name = "IssueNumber", Value = data.BQT36Data.IssueNumber });
                            retItems.Add(decodedCredential);
                            break;

                        case CredentialFormatCodes.Cypress37Bit:
                            decodedCredential = new DecodedCredential
                            {
                                CredentialFormatCode = data.DataFormat,
                                DataFormatString = data.DataFormat.ToString(),
                                CredentialNumber = data.Cypress37BitData.FCC,
                                BitCount = parameters.BitCount
                            };
                            decodedCredential.CredentialParts.Add(new CredentialPart() { Name = "FacilityCode", Value = data.Cypress37BitData.FacilityCode });
                            decodedCredential.CredentialParts.Add(new CredentialPart() { Name = "IDCode", Value = data.Cypress37BitData.IDCode });
                            retItems.Add(decodedCredential);
                            break;

                        case CredentialFormatCodes.H1030437Bit:
                            decodedCredential = new DecodedCredential
                            {
                                CredentialFormatCode = data.DataFormat,
                                DataFormatString = data.DataFormat.ToString(),
                                CredentialNumber = data.HIDH1030437BitData.FCC,
                                BitCount = parameters.BitCount
                            };
                            decodedCredential.CredentialParts.Add(new CredentialPart() { Name = "FacilityCode", Value = data.HIDH1030437BitData.FacilityCode });
                            decodedCredential.CredentialParts.Add(new CredentialPart() { Name = "IDCode", Value = data.HIDH1030437BitData.IDCode });
                            retItems.Add(decodedCredential);
                            break;

                        case CredentialFormatCodes.H1030237Bit:
                            decodedCredential = new DecodedCredential
                            {
                                CredentialFormatCode = data.DataFormat,
                                DataFormatString = data.DataFormat.ToString(),
                                CredentialNumber = data.HIDH1030237BitData.FCC,
                                BitCount = parameters.BitCount
                            };
                            decodedCredential.CredentialParts.Add(new CredentialPart() { Name = "IDCode", Value = (ulong)data.HIDH1030237BitData.IdCode });
                            retItems.Add(decodedCredential);
                            break;


                        case CredentialFormatCodes.SoftwareHouse37Bit:
                            decodedCredential = new DecodedCredential
                            {
                                CredentialFormatCode = data.DataFormat,
                                DataFormatString = data.DataFormat.ToString(),
                                CredentialNumber = data.SoftwareHouse37BitData.FCC,
                                BitCount = parameters.BitCount
                            };
                            decodedCredential.CredentialParts.Add(new CredentialPart() { Name = "FacilityCode", Value = (ulong)data.SoftwareHouse37BitData.FacilityCode });
                            decodedCredential.CredentialParts.Add(new CredentialPart() { Name = "SiteCode", Value = (ulong)data.SoftwareHouse37BitData.SiteCode });
                            decodedCredential.CredentialParts.Add(new CredentialPart() { Name = "IDCode", Value = (ulong)data.SoftwareHouse37BitData.IdCode });
                            retItems.Add(decodedCredential);
                            break;


                        case CredentialFormatCodes.XceedId40Bit:
                            decodedCredential = new DecodedCredential
                            {
                                CredentialFormatCode = data.DataFormat,
                                DataFormatString = data.DataFormat.ToString(),
                                CredentialNumber = data.XceedId40BitData.FCC,
                                BitCount = parameters.BitCount
                            };
                            decodedCredential.CredentialParts.Add(new CredentialPart() { Name = "Site", Value = data.XceedId40BitData.SiteCode });
                            decodedCredential.CredentialParts.Add(new CredentialPart() { Name = "IDCode", Value = data.XceedId40BitData.IDCode });
                            retItems.Add(decodedCredential);
                            break;

                        case CredentialFormatCodes.None:
                        default:
                            decodedCredential = new DecodedCredential
                            {
                                CredentialFormatCode = CredentialFormatCodes.NumericCardCode,
                                DataFormatString = CredentialFormatCodes.NumericCardCode.ToString(),
                                CredentialNumber = parameters.CredentialNumber,
                                BitCount = parameters.BitCount
                            };

                            retItems.Add(decodedCredential);
                            break;
                    }
                }

            }
            return retItems.ToArray();
        }



        public RawCredentialData[] AnalyseCardNumber(string cardNumber, short bitCount, GalaxySMS.Common.Enums.CredentialReaderDataFormat readerDataFormat)
        {
            var results = new List<RawCredentialData>();
            if (cardNumber.StartsWith("0x"))
                cardNumber = cardNumber.Replace("0x", "x");

            var rawCredData = new RawCredentialData()
            {
                UseDataType = RawCredentialData.DataType.DecimalString,
                BitCount = bitCount,
                DataString = cardNumber,
                ReaderDataFormat = readerDataFormat
            };

            if (cardNumber.StartsWith("x"))
            {
                rawCredData.UseDataType = RawCredentialData.DataType.HexString;
            }

            var data = CredentialAnalyzer.AnalyzeRawData(rawCredData);

            if (data == CredentialFormatCodes.NumericCardCode || data == CredentialFormatCodes.None)
            {
                //var customFormats = GetCardDataFormats(bitCount);
                //foreach (var cf in customFormats)
                //{
                //    var parts = new List<string>();
                //    var isValid = cf.IsValidCardCode(cardNumber, parts, ref bitCount);
                //    if (isValid)
                //    {
                //        var r = new RawCredentialData();
                //        r.BitCount = bitCount;
                //        r.CustomData.Init((DataFormat)cf.FormatID, parts, cardNumber);
                //        r.DataFormat = (DataFormat)cf.FormatID;
                //        results.Add(r);
                //    }
                //}
                results.Add(rawCredData);
            }
            else
                results.Add(rawCredData);
            return results.ToArray();
        }

        public Credential_PanelLoadData[] GetCredentialDataChangesToLoadForCpu(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IPersonRepository>();
                var data = repository.GetModifiedCredentialPanelLoadDataForCpu(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });

        }

        public Credential_PanelLoadData[] GetAllCredentialPanelData(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IPersonRepository>();
                var data = new List<Credential_PanelLoadData>();
                if (parameters.ClusterUid == Guid.Empty && parameters.PersonUid == Guid.Empty)
                    data = repository.GetCredentialPanelLoadData(ApplicationUserSessionHeader, parameters).ToList();
                else if (parameters.ClusterUid != Guid.Empty && parameters.PersonUid == Guid.Empty)
                    data = repository.GetCredentialPanelLoadDataForCluster(ApplicationUserSessionHeader, new GetParametersWithPhoto<Credential_PanelLoadData>()
                    {
                        ClusterUid = parameters.ClusterUid
                    }).ToList();
                else if (parameters.PersonUid != Guid.Empty)
                {
                    data = repository.GetCredentialPanelLoadDataForPerson(ApplicationUserSessionHeader, new GetParametersWithPhoto<Credential_PanelLoadData>()
                    {
                        PersonUid = parameters.PersonUid
                    }).ToList();

                    if (parameters.ClusterUid != Guid.Empty)
                        data = data.Where(o => o.ClusterUid == parameters.ClusterUid).ToList();
                }

                return data.ToArray();
            });
        }

        public GalaxySMSBusinessEntities.CredentialFormat GetCredentialFormat(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);
                if (parameters.CurrentEntityId == Guid.Empty)
                    parameters.CurrentEntityId = ApplicationUserSessionHeader.CurrentEntityId;
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialFormatRepository>();
                var data = repository.GetAllCredentialFormatsForEntity(ApplicationUserSessionHeader, new GetParametersWithPhoto(parameters)
                {
                    UniqueId = parameters.CurrentEntityId
                });
                GalaxySMSBusinessEntities.CredentialFormat results = null;
                if (parameters.UniqueId != Guid.Empty)
                    results = data.FirstOrDefault(o => o.CredentialFormatUid == parameters.UniqueId);
                if (results == null && !string.IsNullOrEmpty(parameters.GetString))
                {
                    var cfc = parameters.GetString.ParseEnum<CredentialFormatCodes>();
                    results = data.FirstOrDefault(o => o.CredentialFormatCode == cfc);
                }

                if (results == null)
                    results = data.FirstOrDefault(o => (short)o.CredentialFormatCode == parameters.GetInt16);
                return results;
            });
        }

        public CredentialToDeleteFromCpu[] GetCredentialDataToDeleteLoadForCpu(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialToDeleteFromCpuRepository>();
                var data = repository.GetAllThatNeedDeletedForCpu(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public Credential_PanelLoadData[] GetCredentialDataChangesToLoad(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IPersonRepository>();
                var data = repository.GetModifiedCredentialPanelLoadDataForCpu(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });

        }

        public CredentialToDeleteFromCpu[] GetCredentialDataToDeleteLoad(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialToDeleteFromCpuRepository>();
                var data = repository.GetAllThatNeedDeletedForCpu(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        #endregion

        #region Activity Event Data Operations
        public Credential_ActivityEventData GetCredentialActivityEventData(byte[] parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<ICredentialRepository>();
                var data = repository.GetActivityEventData(parameters);
                return data;
            });
        }

        #endregion

        #region GalaxyActivityEventType Operations

        public GalaxyActivityEventType[] GetAllGalaxyActivityEventType(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyActivityEventTypeRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }

        public GalaxyActivityEventTypeBasicGroups GetGalaxyActivityEventTypes(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyActivityEventTypeRepository>();
                var data = repository.GetAll(ApplicationUserSessionHeader, parameters);

                var result = new GalaxyActivityEventTypeBasicGroups(data);
                return result;
            });
        }

        public GalaxyActivityEventType[] GetAllGalaxyActivityEventTypeForCulture(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyActivityEventTypeRepository>();
                var data = repository.GetAllForCulture(ApplicationUserSessionHeader, parameters);

                return data.ToArray();
            });
        }


        public GalaxyActivityEventType GetGalaxyActivityEventType(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyActivityEventTypeRepository>();
                var data = repository.Get(parameters.UniqueId, ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("GalaxyActivityEventType with GalaxyActivityEventTypeUid of {0} is not in database",
                                parameters.UniqueId));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        public GalaxyActivityEventType GetGalaxyActivityEventTypeByEventType(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanViewId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyActivityEventTypeRepository>();
                var data = repository.GetByEventTypeForCulture(ApplicationUserSessionHeader, parameters);
                if (data == null && parameters.ThrowExceptionIfNotFound)
                {
                    var ex =
                        new NotFoundException(
                            string.Format("GalaxyActivityEventType with EventType of {0} is not in database",
                                parameters.GetString));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public GalaxyActivityEventType SaveGalaxyActivityEventType(
            SaveParameters<GalaxyActivityEventType>
                parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanUpdateId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyActivityEventTypeRepository>();

                GalaxyActivityEventType updatedItem = null;

                if (repository.IsUnique(parameters.Data) == false)
                {
                    var ex =
                        new DuplicateIndexException(
                            string.Format(
                                "GalaxyActivityEventType with ID of '{0}', EventType: {1} cannot be saved because it is a duplicate.",
                                parameters.Data.GalaxyActivityEventTypeUid, parameters.Data.EventType));
                    var detail = new ExceptionDetailEx(ex);
                    throw new FaultException<ExceptionDetailEx>(detail, ex.Message);
                }

                UpdateProperties(parameters.Data);
                if (parameters.Data.GalaxyActivityEventTypeUid == Guid.Empty)
                {
                    parameters.Data.GalaxyActivityEventTypeUid = GuidUtilities.GenerateComb(); //Guid.NewGuid();
                }
                if (repository.DoesExist(parameters.Data.GalaxyActivityEventTypeUid) == false)
                {
                    updatedItem = repository.Add(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                else
                {
                    updatedItem = repository.Update(parameters.Data, ApplicationUserSessionHeader, parameters);
                }
                return updatedItem;
            });
        }


        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyActivityEventTypeByPk(DeleteParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyActivityEventTypeRepository>();

                return repository.Remove(parameters.UniqueId, ApplicationUserSessionHeader);
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public int DeleteGalaxyActivityEventType(DeleteParameters<GalaxyActivityEventType> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.PersonnelCanDeleteId);
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyActivityEventTypeRepository>();

                return repository.Remove(parameters.Data, ApplicationUserSessionHeader);
            });
        }


        public bool IsGalaxyActivityEventTypeReferenced(Guid uid)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyActivityEventTypeRepository>();

                bReturn = repository.IsReferenced(uid);
                return bReturn;
            });
        }

        public bool IsGalaxyActivityEventTypeUnique(GalaxyActivityEventType data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                bool bReturn = false;
                var repository = _DataRepositoryFactory.GetDataRepository<IGalaxyActivityEventTypeRepository>();

                bReturn = repository.IsUnique(data);
                return bReturn;
            });
        }




        #endregion

        #region Alarm Acknowledgement Operations
        public AcknowledgedAlarmBasicData AcknowledgeAlarmEvent(SaveParameters<AcknowledgeAlarmEventParameters> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters, Guid.Empty);
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSAlarmAlertCommandPermission.Acknowledge);

                var bInsert = true;
                if (parameters.Data.ActivityEventCategory == PanelActivityEventCategory.Unknown)
                {
                    var accessPortalActivityAlarmEventRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalActivityAlarmEventRepository>();
                    if (accessPortalActivityAlarmEventRepository.DoesExist(parameters.Data.ActivityEventUid))
                        parameters.Data.ActivityEventCategory = PanelActivityEventCategory.Door;
                    else
                    {
                        var galaxyPanelActivityAlarmEventRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelActivityAlarmEventRepository>();
                        // verify that there is an event in the AccessPortalActivityAlarmEvent table that matches the ActivityEventUid value
                        if (galaxyPanelActivityAlarmEventRepository.DoesExist(parameters.Data.ActivityEventUid))
                            parameters.Data.ActivityEventCategory = PanelActivityEventCategory.Panel;
                        else
                        {
                            var inputDeviceActivityAlarmEventRepository = _DataRepositoryFactory.GetDataRepository<IInputDeviceActivityAlarmEventRepository>();
                            // verify that there is an event in the AccessPortalActivityAlarmEvent table that matches the ActivityEventUid value
                            if (inputDeviceActivityAlarmEventRepository.DoesExist(parameters.Data.ActivityEventUid))
                                parameters.Data.ActivityEventCategory = PanelActivityEventCategory.Input;
                        }
                    }
                }

                switch (parameters.Data.ActivityEventCategory)
                {
                    case PanelActivityEventCategory.Door:
                    case PanelActivityEventCategory.PersonDoor:
                        var accessPortalActivityAlarmEventRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalActivityAlarmEventRepository>();
                        // verify that there is an event in the AccessPortalActivityAlarmEvent table that matches the ActivityEventUid value
                        if (!accessPortalActivityAlarmEventRepository.DoesExist(parameters.Data.ActivityEventUid))
                            return null;

                        AccessPortalAlarmEventAcknowledgment updatedAccessPortalEntity = null;
                        var accessPortalAlarmEventAcknowledgmentRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalAlarmEventAcknowledgmentRepository>();
                        if (parameters.Data.AlarmEventAcknowledgmentUid != Guid.Empty)
                        {
                            updatedAccessPortalEntity = accessPortalAlarmEventAcknowledgmentRepository.Get(parameters.Data.AlarmEventAcknowledgmentUid, this.ApplicationUserSessionHeader, null);
                            if (updatedAccessPortalEntity == null)
                            {
                                updatedAccessPortalEntity = new AccessPortalAlarmEventAcknowledgment()
                                { AccessPortalAlarmEventAcknowledgmentUid = parameters.Data.AlarmEventAcknowledgmentUid };
                            }
                            else
                                bInsert = false;
                        }

                        if (updatedAccessPortalEntity == null)
                        {
                            updatedAccessPortalEntity = new AccessPortalAlarmEventAcknowledgment()
                            {
                                AccessPortalAlarmEventAcknowledgmentUid = GuidUtilities.GenerateComb()
                            };
                        }
                        updatedAccessPortalEntity.AccessPortalActivityEventUid = parameters.Data.ActivityEventUid;
                        updatedAccessPortalEntity.Response = parameters.Data.Response;
                        updatedAccessPortalEntity.UserId = this.UserId;
                        UpdateProperties(updatedAccessPortalEntity);
                        if (bInsert == true)
                        {
                            updatedAccessPortalEntity = accessPortalAlarmEventAcknowledgmentRepository.Add(updatedAccessPortalEntity, ApplicationUserSessionHeader, parameters);
                        }
                        else
                        {
                            if (updatedAccessPortalEntity != null)
                            {
                                updatedAccessPortalEntity =
                                    accessPortalAlarmEventAcknowledgmentRepository.Update(updatedAccessPortalEntity, ApplicationUserSessionHeader, parameters);
                            }
                        }

                        var acknowledgedAccessPortalAlarmBasicData = accessPortalAlarmEventAcknowledgmentRepository.GetAcknowledgedAlarmBasicData_ByAccessPortalAlarmEventAcknowledgmentUid(ApplicationUserSessionHeader, new GetParametersWithPhoto() { UniqueId = updatedAccessPortalEntity.AccessPortalAlarmEventAcknowledgmentUid });
                        if (acknowledgedAccessPortalAlarmBasicData != null)
                            Globals.Instance.SendToProcessingQueue(acknowledgedAccessPortalAlarmBasicData);

                        return acknowledgedAccessPortalAlarmBasicData;

                    case PanelActivityEventCategory.Panel:
                        var galaxyPanelActivityAlarmEventRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelActivityAlarmEventRepository>();
                        // verify that there is an event in the AccessPortalActivityAlarmEvent table that matches the ActivityEventUid value
                        if (!galaxyPanelActivityAlarmEventRepository.DoesExist(parameters.Data.ActivityEventUid))
                            return null;

                        GalaxyPanelAlarmEventAcknowledgment updatedPanelEntity = null;
                        var galaxyPanelAlarmEventAcknowledgmentRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelAlarmEventAcknowledgmentRepository>();
                        if (parameters.Data.AlarmEventAcknowledgmentUid != Guid.Empty)
                        {
                            updatedPanelEntity = galaxyPanelAlarmEventAcknowledgmentRepository.Get(parameters.Data.AlarmEventAcknowledgmentUid, this.ApplicationUserSessionHeader, null);
                            if (updatedPanelEntity == null)
                            {
                                updatedPanelEntity = new GalaxyPanelAlarmEventAcknowledgment()
                                { GalaxyPanelAlarmEventAcknowledgmentUid = parameters.Data.AlarmEventAcknowledgmentUid };
                            }
                            else
                                bInsert = false;
                        }

                        if (updatedPanelEntity == null)
                        {
                            updatedPanelEntity = new GalaxyPanelAlarmEventAcknowledgment()
                            {
                                GalaxyPanelAlarmEventAcknowledgmentUid = GuidUtilities.GenerateComb()
                            };
                        }
                        updatedPanelEntity.GalaxyPanelActivityEventUid = parameters.Data.ActivityEventUid;
                        updatedPanelEntity.Response = parameters.Data.Response;
                        updatedPanelEntity.UserId = this.UserId;
                        UpdateProperties(updatedPanelEntity);
                        if (bInsert == true)
                        {
                            updatedPanelEntity = galaxyPanelAlarmEventAcknowledgmentRepository.Add(updatedPanelEntity, ApplicationUserSessionHeader, parameters);
                        }
                        else
                        {
                            updatedPanelEntity = galaxyPanelAlarmEventAcknowledgmentRepository.Update(updatedPanelEntity, ApplicationUserSessionHeader, parameters);
                        }

                        var acknowledgedPanelAlarmBasicData = galaxyPanelAlarmEventAcknowledgmentRepository.GetAcknowledgedAlarmBasicData_ByGalaxyPanelAlarmEventAcknowledgmentUid(ApplicationUserSessionHeader, new GetParametersWithPhoto() { UniqueId = updatedPanelEntity.GalaxyPanelAlarmEventAcknowledgmentUid });
                        if (acknowledgedPanelAlarmBasicData != null)
                            Globals.Instance.SendToProcessingQueue(acknowledgedPanelAlarmBasicData);

                        return acknowledgedPanelAlarmBasicData;

                    case PanelActivityEventCategory.Input:
                        var inputDeviceActivityAlarmEventRepository = _DataRepositoryFactory.GetDataRepository<IInputDeviceActivityAlarmEventRepository>();
                        // verify that there is an event in the AccessPortalActivityAlarmEvent table that matches the ActivityEventUid value
                        if (!inputDeviceActivityAlarmEventRepository.DoesExist(parameters.Data.ActivityEventUid))
                            return null;

                        InputDeviceAlarmEventAcknowledgment updatedInputEntity = null;
                        var inputDeviceAlarmEventAcknowledgmentRepository = _DataRepositoryFactory.GetDataRepository<IInputDeviceAlarmEventAcknowledgmentRepository>();
                        if (parameters.Data.AlarmEventAcknowledgmentUid != Guid.Empty)
                        {
                            updatedInputEntity = inputDeviceAlarmEventAcknowledgmentRepository.Get(parameters.Data.AlarmEventAcknowledgmentUid, this.ApplicationUserSessionHeader, null);
                            if (updatedInputEntity == null)
                            {
                                updatedInputEntity = new InputDeviceAlarmEventAcknowledgment()
                                { InputDeviceAlarmEventAcknowledgmentUid = parameters.Data.AlarmEventAcknowledgmentUid };
                            }
                            else
                                bInsert = false;
                        }

                        if (updatedInputEntity == null)
                        {
                            updatedInputEntity = new InputDeviceAlarmEventAcknowledgment()
                            {
                                InputDeviceAlarmEventAcknowledgmentUid = GuidUtilities.GenerateComb()
                            };
                        }
                        updatedInputEntity.InputDeviceActivityEventUid = parameters.Data.ActivityEventUid;
                        updatedInputEntity.Response = parameters.Data.Response;
                        updatedInputEntity.UserId = this.UserId;
                        UpdateProperties(updatedInputEntity);
                        if (bInsert == true)
                        {
                            updatedInputEntity = inputDeviceAlarmEventAcknowledgmentRepository.Add(updatedInputEntity, ApplicationUserSessionHeader, parameters);
                        }
                        else
                        {
                            updatedInputEntity = inputDeviceAlarmEventAcknowledgmentRepository.Update(updatedInputEntity, ApplicationUserSessionHeader, parameters);
                        }

                        var acknowledgedInputAlarmBasicData = inputDeviceAlarmEventAcknowledgmentRepository.GetAcknowledgedAlarmBasicData_ByInputDeviceAlarmEventAcknowledgmentUid(ApplicationUserSessionHeader, new GetParametersWithPhoto() { UniqueId = updatedInputEntity.InputDeviceAlarmEventAcknowledgmentUid });
                        if (acknowledgedInputAlarmBasicData != null)
                            Globals.Instance.SendToProcessingQueue(acknowledgedInputAlarmBasicData);

                        return acknowledgedInputAlarmBasicData;


                    default:
                        return null;
                }
            });
        }

        public int UnacknowledgeAlarmEvent(SaveParameters<UnacknowledgeAlarmEventParameters> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters, Guid.Empty);
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSAlarmAlertCommandPermission.Unacknowledge);
                var bInsert = true;
                if (parameters.Data.ActivityEventCategory == PanelActivityEventCategory.Unknown)
                {
                    var accessPortalActivityAlarmEventRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalActivityAlarmEventRepository>();
                    if (accessPortalActivityAlarmEventRepository.DoesExist(parameters.Data.ActivityEventUid))
                        parameters.Data.ActivityEventCategory = PanelActivityEventCategory.Door;
                    else
                    {
                        var galaxyPanelActivityAlarmEventRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelActivityAlarmEventRepository>();
                        // verify that there is an event in the AccessPortalActivityAlarmEvent table that matches the ActivityEventUid value
                        if (galaxyPanelActivityAlarmEventRepository.DoesExist(parameters.Data.ActivityEventUid))
                            parameters.Data.ActivityEventCategory = PanelActivityEventCategory.Panel;
                        else
                        {
                            var inputDeviceActivityAlarmEventRepository = _DataRepositoryFactory.GetDataRepository<IInputDeviceActivityAlarmEventRepository>();
                            // verify that there is an event in the AccessPortalActivityAlarmEvent table that matches the ActivityEventUid value
                            if (inputDeviceActivityAlarmEventRepository.DoesExist(parameters.Data.ActivityEventUid))
                                parameters.Data.ActivityEventCategory = PanelActivityEventCategory.Input;
                        }
                    }
                }

                var countDeleted = 0;

                switch (parameters.Data.ActivityEventCategory)
                {
                    case PanelActivityEventCategory.Door:
                    case PanelActivityEventCategory.PersonDoor:
                        var accessPortalActivityAlarmEventRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalActivityAlarmEventRepository>();
                        // verify that there is an event in the AccessPortalActivityAlarmEvent table that matches the ActivityEventUid value
                        if (!accessPortalActivityAlarmEventRepository.DoesExist(parameters.Data.ActivityEventUid))
                            return 0;

                        var accessPortalAlarmAcknowledgements = new List<AccessPortalAlarmEventAcknowledgment>();
                        AccessPortalAlarmEventAcknowledgment updatedAccessPortalEntity = null;
                        var accessPortalAlarmEventAcknowledgmentRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalAlarmEventAcknowledgmentRepository>();
                        if (parameters.Data.AlarmEventAcknowledgmentUid != Guid.Empty)
                        {
                            updatedAccessPortalEntity = accessPortalAlarmEventAcknowledgmentRepository.Get(parameters.Data.AlarmEventAcknowledgmentUid, this.ApplicationUserSessionHeader, null);
                            if (updatedAccessPortalEntity == null)
                            {
                                return 0;
                            }

                            accessPortalAlarmAcknowledgements.Add(updatedAccessPortalEntity);
                        }
                        else
                        {
                            var acks = accessPortalAlarmEventAcknowledgmentRepository.GetByAccessPortalActivityEventUid(ApplicationUserSessionHeader, new GetParametersWithPhoto() { UniqueId = parameters.Data.ActivityEventUid });
                            if (!acks.Any())
                                return 0;
                            accessPortalAlarmAcknowledgements.AddRange(acks);
                        }

                        foreach (var ack in accessPortalAlarmAcknowledgements)
                        {
                            countDeleted += accessPortalAlarmEventAcknowledgmentRepository.Remove(ack.AccessPortalAlarmEventAcknowledgmentUid, ApplicationUserSessionHeader);
                        }

                        return countDeleted;

                    case PanelActivityEventCategory.Panel:
                        var galaxyPanelActivityAlarmEventRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelActivityAlarmEventRepository>();
                        // verify that there is an event in the AccessPortalActivityAlarmEvent table that matches the ActivityEventUid value
                        if (!galaxyPanelActivityAlarmEventRepository.DoesExist(parameters.Data.ActivityEventUid))
                            return 0;

                        var galaxyPanelAlarmAcknowledgements = new List<GalaxyPanelAlarmEventAcknowledgment>();
                        GalaxyPanelAlarmEventAcknowledgment updatedPanelEntity = null;
                        var galaxyPanelAlarmEventAcknowledgmentRepository = _DataRepositoryFactory.GetDataRepository<IGalaxyPanelAlarmEventAcknowledgmentRepository>();
                        if (parameters.Data.AlarmEventAcknowledgmentUid != Guid.Empty)
                        {
                            updatedPanelEntity = galaxyPanelAlarmEventAcknowledgmentRepository.Get(parameters.Data.AlarmEventAcknowledgmentUid, this.ApplicationUserSessionHeader, null);
                            if (updatedPanelEntity == null)
                            {
                                return 0;
                            }

                            galaxyPanelAlarmAcknowledgements.Add(updatedPanelEntity);
                        }
                        else
                        {
                            var acks = galaxyPanelAlarmEventAcknowledgmentRepository.GetByGalaxyPanelActivityEventUid(ApplicationUserSessionHeader, new GetParametersWithPhoto() { UniqueId = parameters.Data.ActivityEventUid });
                            if (!acks.Any())
                                return 0;
                            galaxyPanelAlarmAcknowledgements.AddRange(acks);
                        }

                        foreach (var ack in galaxyPanelAlarmAcknowledgements)
                        {
                            countDeleted += galaxyPanelAlarmEventAcknowledgmentRepository.Remove(ack.GalaxyPanelAlarmEventAcknowledgmentUid, ApplicationUserSessionHeader);
                        }

                        return countDeleted;


                    case PanelActivityEventCategory.Input:
                        var inputDeviceActivityAlarmEventRepository = _DataRepositoryFactory.GetDataRepository<IInputDeviceActivityAlarmEventRepository>();
                        // verify that there is an event in the AccessPortalActivityAlarmEvent table that matches the ActivityEventUid value
                        if (!inputDeviceActivityAlarmEventRepository.DoesExist(parameters.Data.ActivityEventUid))
                            return 0;

                        var inputDeviceAlarmAcknowledgements = new List<InputDeviceAlarmEventAcknowledgment>();
                        InputDeviceAlarmEventAcknowledgment updatedInputEntity = null;
                        var inputDeviceAlarmEventAcknowledgmentRepository = _DataRepositoryFactory.GetDataRepository<IInputDeviceAlarmEventAcknowledgmentRepository>();
                        if (parameters.Data.AlarmEventAcknowledgmentUid != Guid.Empty)
                        {
                            updatedInputEntity = inputDeviceAlarmEventAcknowledgmentRepository.Get(parameters.Data.AlarmEventAcknowledgmentUid, this.ApplicationUserSessionHeader, null);
                            if (updatedInputEntity == null)
                            {
                                return 0;
                            }

                            inputDeviceAlarmAcknowledgements.Add(updatedInputEntity);
                        }
                        else
                        {
                            var acks = inputDeviceAlarmEventAcknowledgmentRepository.GetByInputDeviceActivityEventUid(ApplicationUserSessionHeader, new GetParametersWithPhoto() { UniqueId = parameters.Data.ActivityEventUid });
                            if (!acks.Any())
                                return 0;
                            inputDeviceAlarmAcknowledgements.AddRange(acks);
                        }

                        foreach (var ack in inputDeviceAlarmAcknowledgements)
                        {
                            countDeleted += inputDeviceAlarmEventAcknowledgmentRepository.Remove(ack.InputDeviceAlarmEventAcknowledgmentUid, ApplicationUserSessionHeader);
                        }

                        return countDeleted;


                    default:
                        return 0;
                }
            });
        }

        public PanelActivityLogMessage[] GetUnacknowledgedAlarms(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, Guid.Empty);
                var accessPortalActivityAlarmEventRepository = _DataRepositoryFactory.GetDataRepository<IAccessPortalActivityAlarmEventRepository>();
                var data = accessPortalActivityAlarmEventRepository.GetUnacknowledgedAlarms(this.ApplicationUserSessionHeader, parameters);
                return data;
            });
        }

        #endregion

        #region idPRODUCER Operations
        #region Private methods

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets identifier producer API. </summary>
        ///
        /// <remarks>   Kevin, 4/25/2019. </remarks>
        ///
        /// <param name="username"> The username. </param>
        /// <param name="password"> The password. </param>
        ///
        /// <returns>   The identifier producer API. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        private idProducerAPI GetIdProducerApi(string username, string password)
        {
            var uname = Globals.Instance.IdProducerSettings.UserName;
            var pwd = Globals.Instance.IdProducerSettings.Password;
            if (!string.IsNullOrEmpty(username) && !string.IsNullOrEmpty(password))
            {
                uname = username;
                pwd = password;
            }
            return new idProducerAPI(Globals.Instance.IdProducerSettings.Url, uname, pwd, Globals.Instance.IdProducerSettings.DevUrl, Globals.Instance.IdProducerSettings.SignalRUrl);
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets identifier producer API as root. </summary>
        ///
        /// <remarks>   Kevin, 4/25/2019. </remarks>
        ///
        /// <returns>   The identifier producer API as root. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        private idProducerAPI GetIdProducerApiAsRoot()
        {
            var uname = Globals.Instance.IdProducerSettings.UserName;
            var pwd = Globals.Instance.IdProducerSettings.Password;

            return new idProducerAPI(Globals.Instance.IdProducerSettings.Url, uname, pwd, Globals.Instance.IdProducerSettings.DevUrl, Globals.Instance.IdProducerSettings.SignalRUrl);
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets license bottom API. </summary>
        ///
        /// <remarks>   Kevin, 4/25/2019. </remarks>
        ///
        /// <returns>   The license bottom API. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        private idProducerAPI GetLicenseBotApi()
        {
            return GetIdProducerApi("licensebot@specsid.com", "p@$$30Rd");
        }

        private idProducerAPI GetIdProducerApiForGalaxyEntity(Guid entityId)
        {
            var repository = _DataRepositoryFactory.GetDataRepository<IGcsEntityIdProducerRepository>();
            var data = repository.Get(entityId, ApplicationUserSessionHeader, null);
            var url = Globals.Instance.IdProducerSettings.Url;
            var devurl = Globals.Instance.IdProducerSettings.DevUrl;
            var signalRUrl = Globals.Instance.IdProducerSettings.SignalRUrl;
            var uname = Globals.Instance.IdProducerSettings.UserName;
            var pwd = Globals.Instance.IdProducerSettings.Password;
            if (data != null)
            {
                if (string.IsNullOrEmpty(data.Url))
                    url = data.Url;
                if (string.IsNullOrEmpty(data.DevUrl))
                    devurl = data.DevUrl;

                if (!string.IsNullOrEmpty(data.idProducerUserName) && !string.IsNullOrEmpty(data.idProducerPassword))
                {
                    //var passPhrase = $"{data.EntityId}{data.idProducerUserName}{data.SubscriptionId}";
                    //var decryptedPassword = GCS.Framework.Security.Crypto.Encrypt(data.idProducerPassword, string.Empty, Crypto.EncodingType.Unicode);

                    return new idProducerAPI(data.Url, data.idProducerUserName, data.idProducerPassword, data.DevUrl, data.SignalRUrl);
                }
                else
                    return new idProducerAPI(data.Url, uname, pwd, data.DevUrl, data.SignalRUrl);
            }
            return new idProducerAPI(url, uname, pwd, devurl, data.SignalRUrl);
        }

        private idProducerAPI GetIdProducerApi()
        {
            var uname = Globals.Instance.IdProducerSettings.UserName;
            var pwd = Globals.Instance.IdProducerSettings.Password;

            if (UserSessionToken != null && UserSessionToken?.IsSessionExpired == false)
            {
                return GetIdProducerApiForGalaxyEntity(UserSessionToken.CurrentEntityId);
            }

            return null;
            return GetIdProducerApi(uname, pwd);

        }

        private idProducerAPI GetIdProducerApi(int subscriptionId, Guid personUid, ref int currentEntitySubscriptionId)
        {
            idProducerAPI idpApi;
            gcsEntityIdProducer entityIdProducer;

            currentEntitySubscriptionId = GetCurrentUserSubscriptionId();

            if (subscriptionId != 0)
            {
                entityIdProducer = GetEntityIdProducerBySubscriptionId(subscriptionId);
                if (entityIdProducer != null && !string.IsNullOrEmpty(entityIdProducer.idProducerUserName) && !string.IsNullOrEmpty(entityIdProducer.idProducerPassword))
                {
                    currentEntitySubscriptionId = entityIdProducer.SubscriptionId;
                    idpApi = GetIdProducerApi(entityIdProducer.idProducerUserName, entityIdProducer.idProducerPassword);
                }
                else
                    idpApi = GetIdProducerApi();

                if (subscriptionId == Globals.Instance.IdProducerSettings.DefaultSubscriptionId && idpApi == null)
                {
                    idpApi = GetIdProducerApiAsRoot();
                }
            }
            else if (personUid != Guid.Empty)
            {
                entityIdProducer = GetEntityIdProducerByPersonUid(personUid);
                if (entityIdProducer != null)
                {
                    currentEntitySubscriptionId = entityIdProducer.SubscriptionId;
                    if (!string.IsNullOrEmpty(entityIdProducer.idProducerUserName) && !string.IsNullOrEmpty(entityIdProducer.idProducerPassword))
                        idpApi = GetIdProducerApi(entityIdProducer.idProducerUserName, entityIdProducer.idProducerPassword);
                    else
                        idpApi = GetIdProducerApi();
                }
                else
                    idpApi = GetIdProducerApi();
            }
            else
                idpApi = GetIdProducerApi();
            return idpApi;
        }

        private int GetCurrentUserSubscriptionId()
        {
            if (UserSessionToken == null || UserSessionToken.IsSessionExpired)
                return 0;

            if (UserSessionToken?.CurrentEntityId != Guid.Empty)
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGcsEntityIdProducerRepository>();
                var data = repository.Get(UserSessionToken.CurrentEntityId, ApplicationUserSessionHeader, null);
                if (data != null)
                    return data.SubscriptionId;
            }
            return 0;
        }

        private int GetEntitySubscriptionId(Guid entityId)
        {
            if (entityId != Guid.Empty)
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IGcsEntityIdProducerRepository>();
                var data = repository.Get(entityId, ApplicationUserSessionHeader, null);
                if (data != null)
                    return data.SubscriptionId;
            }
            return GetCurrentUserSubscriptionId();
        }

        private gcsEntityIdProducer GetEntityIdProducerBySubscriptionId(int subId)
        {
            var repository = _DataRepositoryFactory.GetDataRepository<IGcsEntityIdProducerRepository>();
            var data = repository.GetByIdProducerSubscriptionId(subId, ApplicationUserSessionHeader);
            return data;
        }

        private gcsEntityIdProducer GetEntityIdProducerByPersonUid(Guid personUid)
        {
            var repository = _DataRepositoryFactory.GetDataRepository<IGcsEntityIdProducerRepository>();
            var data = repository.GetByPersonUid(personUid, ApplicationUserSessionHeader);
            return data;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets all card template fields. </summary>
        ///
        /// <remarks>   Kevin, 4/25/2019. </remarks>
        ///
        /// <param name="idpApi">   The idp API. </param>
        ///
        /// <returns>   all card template fields. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        private List<GalaxySMSBusinessEntities.SubscriptionTemplateField> GetAllCardTemplateFields(idProducerAPI idpApi)
        {
            var results = new List<GalaxySMSBusinessEntities.SubscriptionTemplateField>();
            try
            {
                var data = idpApi.GetAllSubscriptionTemplateFieldsResponse();
                if (data.IsSuccessful)
                    results.AddRange(Globals.Instance.Mapper.Map<List<GalaxySMSBusinessEntities.SubscriptionTemplateField>>(data.SubscriptionTemplateFields));
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.Write(ex);
            }
            return results;

        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets all card template fields string. </summary>
        ///
        /// <remarks>   Kevin, 4/25/2019. </remarks>
        ///
        /// <param name="idpApi">   The idp API. </param>
        ///
        /// <returns>   all card template fields string. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        private string GetAllCardTemplateFieldsString(idProducerAPI idpApi)
        {
            var results = string.Empty;
            try
            {
                results = idpApi.GetAllSubscriptionTemplateFieldsString();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.Write(ex);
            }
            return results;

        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets card template fields. </summary>
        ///
        /// <remarks>   Kevin, 4/25/2019. </remarks>
        ///
        /// <param name="idpApi">       The idp API. </param>
        /// <param name="templateName"> Name of the template. </param>
        ///
        /// <returns>   The card template fields. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        private List<GalaxySMSBusinessEntities.SubscriptionTemplateField> GetCardTemplateFields(idProducerAPI idpApi, string templateName)
        {
            var results = new List<GalaxySMSBusinessEntities.SubscriptionTemplateField>();
            try
            {
                var data = idpApi.GetAllSubscriptionTemplateFieldsByTemplateNameResponse(templateName);
                if (data.IsSuccessful)
                    results.AddRange(Globals.Instance.Mapper.Map<List<GalaxySMSBusinessEntities.SubscriptionTemplateField>>(data.SubscriptionTemplateFields));
            }
            catch (Exception ex)
            {
                this.Log().ErrorFormat("GetCardTemplateFields: {0}", ex.ToString());
            }
            return results;

        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets card template field formats. </summary>
        ///
        /// <remarks>   Kevin, 4/25/2019. </remarks>
        ///
        /// <param name="idpApi">   The idp API. </param>
        ///
        /// <returns>   The card template field formats. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        private List<TemplateFieldFormat> GetCardTemplateFieldFormats(idProducerAPI idpApi)
        {
            var results = new List<TemplateFieldFormat>();
            try
            {
                var data = idpApi.GetAllTemplateFieldFormatsResponse();
                if (data.IsSuccessful)
                {
                    results.AddRange(data.TemplateFieldFormats);
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.Write(ex);
            }
            return results;

        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets all card template field formats string. </summary>
        ///
        /// <remarks>   Kevin, 4/25/2019. </remarks>
        ///
        /// <param name="idpApi">   The idp API. </param>
        ///
        /// <returns>   all card template field formats string. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        private string GetAllCardTemplateFieldFormatsString(idProducerAPI idpApi)
        {
            var results = string.Empty;
            try
            {
                results = idpApi.GetAllTemplateFieldFormatsString();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.Write(ex);
            }
            return results;

        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets card template lite by name. </summary>
        ///
        /// <remarks>   Kevin, 4/25/2019. </remarks>
        ///
        /// <param name="idpApi">       The idp API. </param>
        /// <param name="templateName"> Name of the template. </param>
        ///
        /// <returns>   The card template lite by name. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        private GalaxySMSBusinessEntities.CardTemplateLite GetCardTemplateLiteByName(idProducerAPI idpApi, string templateName)
        {
            var result = new GalaxySMSBusinessEntities.CardTemplateLite();
            try
            {
                var data = idpApi.GetCardTemplateLiteByNameResponse(templateName);
                if (data.IsSuccessful)
                    return Globals.Instance.Mapper.Map<GalaxySMSBusinessEntities.CardTemplateLite>(data.CardTemplateLite);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.Write(ex);
            }
            return result;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets card template by name. </summary>
        ///
        /// <remarks>   Kevin, 4/25/2019. </remarks>
        ///
        /// <param name="idpApi">       The idp API. </param>
        /// <param name="templateName"> Name of the template. </param>
        ///
        /// <returns>   The card template by name. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        private CardTemplate GetCardTemplateByName(idProducerAPI idpApi, string templateName)
        {
            //var result = new CardTemplate();
            try
            {
                var template = idpApi.GetCardTemplateByNameReponse(templateName);
                if (template.IsSuccessful)
                    return template.CardTemplate;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.Write(ex);
            }
            return new CardTemplate();
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets all print dispatchers. </summary>
        ///
        /// <remarks>   Kevin, 4/25/2019. </remarks>
        ///
        /// <param name="s">        The ChildrenSubscription to process. </param>
        /// <param name="results">  [in,out] The results. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        private void GetAllPrintDispatchers(GalaxySMS.Business.Entities.ChildrenSubscription s, ref List<GalaxySMS.Business.Entities.PrintDispatcher> results)
        {
            results.AddRange(s.PrintDispatchers);
            foreach (var c in s.ChildrenSubscriptions)
                GetAllPrintDispatchers(c, ref results);

        }

        private GalaxySMSBusinessEntities.SubscriptionData IdProducerGetRootSubscriptionWithoutValidateAuth()
        {
            idProducerAPI idpApi = null;

            idpApi = GetIdProducerApiAsRoot();
            if (idpApi == null)
                throw new UnauthorizedAccessException($"Unable to create idpApi");

            try
            {
                var subscriptions = idpApi.GetAllSubscriptionsResponse();

                var results = new List<GalaxySMSBusinessEntities.SubscriptionData>();
                if (subscriptions.IsSuccessful)
                {
                    foreach (var sub in subscriptions.Subscriptions)
                    {
                        if (sub.ID == Globals.Instance.IdProducerSettings.DefaultSubscriptionId)
                        {
                            var theSub = new GalaxySMSBusinessEntities.SubscriptionData();
                            theSub = Globals.Instance.Mapper.Map<GalaxySMSBusinessEntities.SubscriptionData>(sub);
                            //                        SimpleMapper.PropertyMap(sub, theSub);
                            return theSub;
                        }
                    }
                }
            }
            catch (System.Net.WebException ex)
            {
                throw new System.Net.WebException($"Error making idProducer API request.", ex);
            }

            return null;

        }

        private bool IdProducerSaveMasterLicenseWithoutValidateAuth(SaveParameters<IdProducerSaveMasterLicenseParameters> parameters)
        {
            var bRet = false;
            idProducerAPI idpApi = null;
            idpApi = GetLicenseBotApi();

            var license = new GCS.Framework.Badging.IdProducer.Entities.SetMasterLicenseData();
            license.ID = Globals.Instance.IdProducerSettings.DefaultSubscriptionId;
            license.CompanyName = parameters.Data.CompanyName;
            license.FriendlyLicenseDetails.SubscriptionID = license.ID;
            license.FriendlyLicenseDetails.OEMLicenseCode = "Z4FEUayvbDwBvwzftI74LQ==";
            license.FriendlyLicenseDetails.IsLicensePeriodUnlimited = parameters.Data.IsLicensePeriodUnlimited;
            license.FriendlyLicenseDetails.IsTrialPeriod = parameters.Data.IsTrialPeriod;
            license.FriendlyLicenseDetails.LicensedMaxPrinterCount = parameters.Data.LicensedMaxPrinterCount;
            license.FriendlyLicenseDetails.SupportsMultiplePrinters = parameters.Data.SupportsMultiplePrinters;
#if CanSpecifyIdProducerMaxCustomerCount

            license.FriendlyLicenseDetails.MaxCustomerCount = parameters.Data.MaxCustomerCount;
#endif

            if (!string.IsNullOrEmpty(parameters.Data.DefaultTimeZone))
                license.DefaultTimeZone = parameters.Data.DefaultTimeZone;
            license.Email = parameters.Data.Email;
            license.IsInactive = parameters.Data.IsInactive;
            //license.FriendlyLicenseDetails.IsReseller = parameters.IsReseller;
            //license.MasterUserName = parameters.MasterUserName;
            //license.MasterPassword = parameters.MasterPassword;
            license.ContactFirstName = parameters.Data.ContactFirstName;
            license.ContactLastName = parameters.Data.ContactLastName;
            license.ContactMiddleName = parameters.Data.ContactMiddleName;
            license.Address = parameters.Data.Address;
            license.City = parameters.Data.City;
            license.State = parameters.Data.State;
            license.ZipCode = parameters.Data.ZipCode;
            license.Telephone = parameters.Data.Telephone;
            license.CustomerNb = parameters.Data.CustomerNb;
            license.Notes = parameters.Data.Notes;

            dynamic ret = idpApi.SetMasterLicense(license);
            if (!ret["IsSuccessful"].Value)
            {

            }
            else
            {
                bRet = true;

                if (!string.IsNullOrEmpty(parameters.Data.MasterUserName) && parameters.Data.MasterUserName != Globals.Instance.IdProducerSettings.UserName)
                {
                    idpApi = GetIdProducerApi(Globals.Instance.IdProducerSettings.UserName, Globals.Instance.IdProducerSettings.Password);
                    var allUsers = idpApi.GetAllUsersResponse();
                    if (allUsers?.Users?.FirstOrDefault(u => u.UserName == parameters.Data.MasterUserName) == null)
                    {
                        var addUserResult = idpApi.AddUser(new User()
                        {
                            UserName = parameters.Data.MasterUserName,
                            FirstName = "Galaxy API",
                            LastName = "Root User",
                            Password = parameters.Data.MasterPassword,
                            RoleID = 10,
                            SubscriptionID = Globals.Instance.IdProducerSettings.DefaultSubscriptionId
                        });

                        Globals.Instance.UpdateIdProducerLoginSettings(parameters.Data.MasterUserName, parameters.Data.MasterPassword, ApplicationUserSessionHeader, parameters);
                    }
                }
            }
            return bRet;

        }

        private GalaxySMSBusinessEntities.SubscriptionData IdProducerSyncSubscriptionAndEntityWithoutValidateAuth(SaveParameters<IdProducerSyncSubscriptionAndEntityParameters> parameters)
        {
            idProducerAPI idpApi = null;
            // The caller token has a different entity compared to the person AND the caller token is a master,
            // then allow the call to switch to the idpApi using the cardholders entity/subscription. In order for this to succeed, the idProducer api must be called with the 
            // credentials that are correct/valid for the entity/subscription that the cardholder badge is associated with.
            // 
            idpApi = GetIdProducerApi();
            if (idpApi == null)
                idpApi = GetIdProducerApiAsRoot();
            if (idpApi == null)
                throw new UnauthorizedAccessException($"Unable to create idpApi");

            if (parameters.Data.EntityId == Guid.Empty)
                parameters.Data.EntityId = ApplicationUserSessionHeader.CurrentEntityId;

            // Get the Galaxy entity from the db
            var entityRepository = _DataRepositoryFactory.GetDataRepository<IGcsEntityRepository>();
            var entity = entityRepository.Get(parameters.Data.EntityId, ApplicationUserSessionHeader, new GetParametersWithPhoto() { RefreshCache = true });
            if (entity == null)
            {
                throw new UnauthorizedAccessException($"EntityId: {parameters.Data.EntityId} not found in GalaxySMS database");
            }

            var entityIdProducerRepository = _DataRepositoryFactory.GetDataRepository<IGcsEntityIdProducerRepository>();
            var entityIdProducer = entityIdProducerRepository.Get(parameters.Data.EntityId, ApplicationUserSessionHeader, null);

            var subscriptions = idpApi.GetAllSubscriptionsResponse();
            var rootSub = subscriptions.Subscriptions.FirstOrDefault(s => s.ID == Globals.Instance.IdProducerSettings.DefaultSubscriptionId);

            GCS.Framework.Badging.IdProducer.Entities.SubscriptionData sub = null;

            bool bAdd = false;
            bool bSaveSubscription = false;

            if (entityIdProducer == null)
            {
                entityIdProducer = new gcsEntityIdProducer();
                //                entityIdProducer.EntityId = parameters.Data.EntityId;
                if (parameters.Data.EntityId == GalaxySMS.Common.Constants.EntityIds.GalaxySMS_DefaultEntity_Id ||
                    rootSub?.FriendlyLicenseDetails.MaxCustomerCount == 0)
                {
                    entityIdProducer.EntityId = parameters.Data.EntityId;
                    entityIdProducer.idProducerUserName = Globals.Instance.IdProducerSettings.UserName;
                    entityIdProducer.idProducerPassword = Globals.Instance.IdProducerSettings.Password;
                    if (entityIdProducer.idProducerUserName == null)
                        entityIdProducer.idProducerUserName = string.Empty;
                    if (entityIdProducer.idProducerPassword == null)
                        entityIdProducer.idProducerPassword = string.Empty;

                    UpdateProperties(entityIdProducer);
                    entityIdProducer.SubscriptionId = Globals.Instance.IdProducerSettings.DefaultSubscriptionId;
                    entityIdProducer.Url = Globals.Instance.IdProducerSettings.Url;
                    entityIdProducer.DevUrl = Globals.Instance.IdProducerSettings.DevUrl;
                    entityIdProducer.WebClientUrl = Globals.Instance.IdProducerSettings.WebClientUrl;
                    entityIdProducer.SignalRUrl = Globals.Instance.IdProducerSettings.SignalRUrl;
                    entityIdProducerRepository.Add(entityIdProducer, ApplicationUserSessionHeader, parameters);
                }
            }

            if (rootSub != null && rootSub.FriendlyLicenseDetails.SupportsMultipleResellers == true && parameters.Data.AlwaysUseRoot == false)
            {
                // if the entity exists and has a Subscription ID already assigned, then look up the subscription by ID and update name
                // if necessary
                if (entityIdProducer != null &&
                entityIdProducer.SubscriptionId != 0 &&
                subscriptions != null &&
                subscriptions.Subscriptions != null)
                {
                    sub = subscriptions.Subscriptions.FirstOrDefault(s => s.ID == entityIdProducer.SubscriptionId);
                }

                if (sub != null && sub.CompanyName != entity.EntityName && sub.ID != Globals.Instance.IdProducerSettings.DefaultSubscriptionId)
                {
                    if (sub.CompanyName != entity.EntityName)
                    {
                        bSaveSubscription = true;
                        sub.CompanyName = entity.EntityName;
                    }
                }
                else if (sub == null)
                {
                    if (rootSub != null)
                    {
                        if (rootSub.FriendlyLicenseDetails.SupportsMultipleResellers == false)
                        {
                            throw new UnauthorizedAccessException($"idProducer license does not support multiple subscriptions");
                        }
                        if (rootSub.FriendlyLicenseDetails.SupportsMultiplePrinters && rootSub.FriendlyLicenseDetails.LicensedMaxPrinterCount == -1 && parameters.Data.SupportsMultiplePrinters == true && parameters.Data.LicensedMaxPrinterCount == 0)
                            parameters.Data.LicensedMaxPrinterCount = 10;
                    }

                    bSaveSubscription = true;
                    bAdd = true;
                    sub = new GCS.Framework.Badging.IdProducer.Entities.SubscriptionData();
                    sub.CompanyName = entity.EntityName;
                    sub.ParentSubscriptionID = Globals.Instance.IdProducerSettings.DefaultSubscriptionId;
                    sub.FriendlyLicenseDetails.SubscriptionID = sub.ID;
                    //sub.FriendlyLicenseDetails.OEMLicenseCode = "Z4FEUayvbDwBvwzftI74LQ==";
                    sub.FriendlyLicenseDetails.IsLicensePeriodUnlimited = parameters.Data.IsLicensePeriodUnlimited;
                    sub.FriendlyLicenseDetails.IsTrialPeriod = parameters.Data.IsTrialPeriod;
                    sub.FriendlyLicenseDetails.LicensedMaxPrinterCount = parameters.Data.LicensedMaxPrinterCount;
                    sub.FriendlyLicenseDetails.SupportsMultiplePrinters = parameters.Data.SupportsMultiplePrinters;
                    sub.FriendlyLicenseDetails.IsReseller = false;//parameters.IsReseller;
                    sub.DefaultTimeZone = parameters.Data.DefaultTimeZone;
                    sub.Email = parameters.Data.Email;
                    sub.IsInactive = parameters.Data.IsInactive;
                    if (!string.IsNullOrEmpty(parameters.Data.MasterUserName))
                        sub.MasterUserName = parameters.Data.MasterUserName;
                    else
                        sub.MasterUserName = $"master@{entity.Name.RemoveSpecialCharacters()}.com";
                    if (!string.IsNullOrEmpty(parameters.Data.MasterPassword))
                        sub.MasterPassword = parameters.Data.MasterPassword;
                    else
                        sub.MasterPassword = $"master";

                    sub.ContactFirstName = parameters.Data.ContactFirstName;
                    sub.ContactLastName = parameters.Data.ContactLastName;
                    sub.ContactMiddleName = parameters.Data.ContactMiddleName;
                    sub.Address = parameters.Data.Address;
                    sub.City = parameters.Data.City;
                    sub.State = parameters.Data.State;
                    sub.ZipCode = parameters.Data.ZipCode;
                    sub.Telephone = parameters.Data.Telephone;
                    sub.CustomerNb = parameters.Data.CustomerNb;
                    sub.Notes = parameters.Data.Notes;
                }

                if (bSaveSubscription)
                {
                    if (bAdd)
                    {
                        var newSub = idpApi.AddSubscriptionProfile(sub);
                        if (newSub != null)
                        { // update the SysGal customer with the new subscriber info
                            sub.ID = newSub.ID;
                            entityIdProducer.SubscriptionId = newSub.ID;
                            entityIdProducer.idProducerUserName = sub.MasterUserName;
                            entityIdProducer.idProducerPassword = sub.MasterPassword;
                            if (entityIdProducer.idProducerUserName == null)
                                entityIdProducer.idProducerUserName = string.Empty;
                            if (entityIdProducer.idProducerPassword == null)
                                entityIdProducer.idProducerPassword = string.Empty;


                            UpdateProperties(entityIdProducer);
                            if (entityIdProducer.EntityId == Guid.Empty)
                            {
                                entityIdProducer.EntityId = entity.EntityId;
                                entityIdProducer.Url = Globals.Instance.IdProducerSettings.Url;
                                entityIdProducer.DevUrl = Globals.Instance.IdProducerSettings.DevUrl;
                                entityIdProducer.WebClientUrl = Globals.Instance.IdProducerSettings.WebClientUrl;
                                entityIdProducer.SignalRUrl = Globals.Instance.IdProducerSettings.SignalRUrl;
                                entityIdProducerRepository.Add(entityIdProducer, ApplicationUserSessionHeader, parameters);
                            }
                            else
                                entityIdProducerRepository.Update(entityIdProducer, ApplicationUserSessionHeader, parameters);
                        }
                        sub = newSub;
                    }
                    else if (sub.ID != Globals.Instance.IdProducerSettings.DefaultSubscriptionId)
                    {
                        var updatedSub = idpApi.UpdateSubscriptionProfile(sub);
                        sub = updatedSub;
                    }
                }
            }
            else if (rootSub != null)
            {
                bool bUpdate = false;
                sub = rootSub;
                if (sub.ID != entityIdProducer.SubscriptionId)
                {
                    entityIdProducer.SubscriptionId = sub.ID;
                    bUpdate = true;
                }
                if (entityIdProducer.idProducerUserName != sub.MasterUserName &&
                    !string.IsNullOrEmpty(sub.MasterUserName) &&
                    !string.IsNullOrEmpty(entityIdProducer.idProducerUserName))
                {
                    entityIdProducer.idProducerUserName = sub.MasterUserName;
                    bUpdate = true;
                }
                if (entityIdProducer.idProducerPassword != sub.MasterPassword &&
                    !string.IsNullOrEmpty(sub.MasterPassword) &&
                    !string.IsNullOrEmpty(entityIdProducer.idProducerPassword))
                {
                    entityIdProducer.idProducerPassword = sub.MasterPassword;
                    bUpdate = true;
                }
                if (entityIdProducer.idProducerUserName == null)
                    entityIdProducer.idProducerUserName = string.Empty;
                if (entityIdProducer.idProducerPassword == null)
                    entityIdProducer.idProducerPassword = string.Empty;
                UpdateProperties(entityIdProducer);
                if (entityIdProducer.EntityId == Guid.Empty)
                {
                    entityIdProducer.EntityId = entity.EntityId;
                    entityIdProducer.Url = Globals.Instance.IdProducerSettings.Url;
                    entityIdProducer.DevUrl = Globals.Instance.IdProducerSettings.DevUrl;
                    entityIdProducer.WebClientUrl = Globals.Instance.IdProducerSettings.WebClientUrl;
                    entityIdProducer.SignalRUrl = Globals.Instance.IdProducerSettings.SignalRUrl;
                    entityIdProducerRepository.Add(entityIdProducer, ApplicationUserSessionHeader, parameters);
                }
                else if (bUpdate)
                    entityIdProducerRepository.Update(entityIdProducer, ApplicationUserSessionHeader, parameters);
            }

            if (sub != null)
            {
                // Now push galaxy field titles 
                var syncSaveParams = new SaveParameters<IdProducerRequestParameters>(parameters);
                syncSaveParams.Data.SubscriptionId = sub.ID;
                var syncTemplateFieldsResponse = SyncSubscriptionTemplateFields(syncSaveParams);

                // now pull badge templates
                var getcardtemplatesresponse = GetAllCardTemplates(true, sub.ID);
                var mySub = new GalaxySMSBusinessEntities.SubscriptionData();
                mySub = Globals.Instance.Mapper.Map<GalaxySMSBusinessEntities.SubscriptionData>(sub);
                return mySub;
            }
            else
            {
                throw new Exception("Unable to add or update subscription");
            }
        }
        #endregion

        #region Public methods
        public GalaxySMSBusinessEntities.SubscriptionData IdProducerEnsureIsLicensedWithoutValidateAuth(SaveParameters<IdProducerSaveMasterLicenseParameters> parameters)
        {
            bool bIsLicensed = false;
            bool bLicenseInvalid = false;
            GalaxySMSBusinessEntities.SubscriptionData rootSub = null;
            try
            {
                rootSub = IdProducerGetRootSubscriptionWithoutValidateAuth();
                if (rootSub != null)
                {
                    if (rootSub.CompanyName != parameters.Data.CompanyName)
                    {
                        var bRet = IdProducerUpdateRootSubscriptionCompanyName(new SaveParameters<IdProducerUpdateRootCustomerNameParameters>(parameters)
                        {
                            Data = new IdProducerUpdateRootCustomerNameParameters()
                            {
                                CompanyName = parameters.Data.CompanyName,
                                LicensedMaxPrinterCount = Convert.ToInt32(parameters.Data.LicensedMaxPrinterCount),
                                SupportsMultiplePrinters = Convert.ToInt32(parameters.Data.LicensedMaxPrinterCount)
                            }
                        });
                    }
                    bIsLicensed = true;
                }
            }
            catch (System.Net.WebException ex)
            {
                var msg = string.Empty;
                if (ex.Response != null)
                {
                    msg = ((HttpWebResponse)ex.Response).StatusDescription; //ex.Message;

                    if (msg.Contains("license") && msg.Contains("invalid"))
                    {
                        bLicenseInvalid = true;
                        this.Log().Info($"idPRODUCER: {msg}");
                    }
                    else
                        this.Log().Info($"IdProducerEnsureIsLicensedWithoutValidateAuth: {msg}");
                }
                else
                {
                    msg = ex.Message;
                    if (ex.InnerException != null)
                    {
                        var ex1 = ex.InnerException as WebException;
                        if (ex1 != null)
                        {
                            msg += $" - {ex1.Message}";
                            if (ex1.Response is HttpWebResponse)
                            {
                                msg += ((HttpWebResponse)ex1.Response).StatusDescription; //ex.Message;
                            }
                            if (msg.Contains("license") && msg.Contains("invalid"))
                            {
                                bLicenseInvalid = true;
                                this.Log().Info($"idPRODUCER: {msg}");
                            }
                            else
                                this.Log().Info($"IdProducerEnsureIsLicensedWithoutValidateAuth: {msg}");

                        }
                        else
                        {
                            msg += $"{Environment.NewLine}{ex.InnerException.Message}";
                            this.Log().Error($"{System.Reflection.MethodBase.GetCurrentMethod()?.DeclaringType?.FullName}", ex);
                            throw;
                        }
                    }
                    else
                    {
                        msg += $"{Environment.NewLine}{ex.InnerException.Message}";
                        this.Log().Error($"{System.Reflection.MethodBase.GetCurrentMethod()?.DeclaringType?.FullName}", ex);
                        throw;
                    }
                }
            }
            catch (Exception ex)
            {
                this.Log().Error($"{System.Reflection.MethodBase.GetCurrentMethod()?.DeclaringType?.FullName}", ex);
                throw;
            }

            if (bIsLicensed == false && bLicenseInvalid == true)
            {
                bIsLicensed = IdProducerSaveMasterLicenseWithoutValidateAuth(parameters);
                if (bIsLicensed == true)
                {
                    rootSub = IdProducerGetRootSubscriptionWithoutValidateAuth();

                    //IdProducerRequestParameters ^ params = gcnew IdProducerRequestParameters(token->TokenGuid);

                    //List < SubscriptionTemplateField ^> ^fields = client->SyncSubscriptionTemplateFieldsSync(params, nullptr);
                    //List < CardTemplateLite ^> ^templates = client->GetCardTemplatesSync(params, true, 0, nullptr);
                }
            }

            if (bIsLicensed)
            {
                var subData = IdProducerSyncSubscriptionAndEntityWithoutValidateAuth(new SaveParameters<IdProducerSyncSubscriptionAndEntityParameters>(parameters)
                {
                    Data = new IdProducerSyncSubscriptionAndEntityParameters()
                    {
                        EntityId = parameters.CurrentEntityId,//.Common.Constants.EntityIds.GalaxySMS_DefaultEntity_Id
                    }
                });
                if (rootSub != null)
                {
                    if (rootSub.FriendlyLicenseDetails.MaxCustomerCount == 0)
                    {
                        this.Log().Info($"idPRODUCER is licensed to: {rootSub.CompanyName}, License type: Basic");
                    }
                    else
                    {
                        this.Log().Info($"idPRODUCER is licensed to: {rootSub.CompanyName}, License type: Advanced, maximum customers: {rootSub.FriendlyLicenseDetails.MaxCustomerCount}");
                    }
                }
                else
                    this.Log().Info($"idPRODUCER is licensed to: {parameters.Data.CompanyName}");
            }
            else
                this.Log().Info($"idPRODUCER is not licensed.");

            return rootSub;
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public GalaxySMSBusinessEntities.SubscriptionData IdProducerEnsureIsLicensed(SaveParameters<IdProducerSaveMasterLicenseParameters> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.EntityCanUpdateId);
                return IdProducerEnsureIsLicensedWithoutValidateAuth(parameters);
            });

        }

        public bool IdProducerUpdateRootSubscriptionCompanyName(SaveParameters<IdProducerUpdateRootCustomerNameParameters> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
         {
             var bRet = false;
             if (!string.IsNullOrEmpty(parameters.Data.CompanyName))
             {
                 var idpApi = GetIdProducerApi(Globals.Instance.IdProducerSettings.UserName, Globals.Instance.IdProducerSettings.Password);
                 var subscriptions = idpApi.GetAllSubscriptionsResponse();
                 if (subscriptions.IsSuccessful)
                 {
                     var subsList = new List<GCS.Framework.Badging.IdProducer.Entities.SubscriptionData>();
                     subsList.AddRange(subscriptions.Subscriptions);
                     var rootSub = subsList.FirstOrDefault(o => o.ID == Globals.Instance.IdProducerSettings.DefaultSubscriptionId);
                     if (rootSub != null)
                     {
                         //if ((rootSub.CompanyName != parameters.Data.CompanyName ||
                         //    (rootSub.FriendlyLicenseDetails.LicensedMaxPrinterCount != -1 && rootSub.FriendlyLicenseDetails.LicensedMaxPrinterCount != parameters.Data.LicensedMaxPrinterCount)) &&
                         //    rootSub.FriendlyLicenseDetails.SupportsMultipleResellers == false &&
                         //    rootSub.FriendlyLicenseDetails.MaxCustomerCount == 0)
                         //{
                         //    rootSub.CompanyName = parameters.Data.CompanyName;
                         //    var licenseBotApi = GetLicenseBotApi();

                         //    if (rootSub.FriendlyLicenseDetails.LicensedMaxPrinterCount != -1)
                         //        rootSub.FriendlyLicenseDetails.LicensedMaxPrinterCount = parameters.Data.LicensedMaxPrinterCount;
                         //    if (rootSub.FriendlyLicenseDetails.SupportsMultiplePrinters == false && parameters.Data.LicensedMaxPrinterCount > 1)
                         //        rootSub.FriendlyLicenseDetails.SupportsMultiplePrinters = true;

                         //    var updatedSub = licenseBotApi.UpdateSubscriptionProfile(rootSub);
                         //    if (updatedSub?.CompanyName != parameters.Data.CompanyName)
                         //        this.Log().InfoFormat($"Unable to update subscriptions");
                         //    else
                         //        bRet = true;

                         //}
                         //else
                         //    bRet = true;
                         if (rootSub.CompanyName != parameters.Data.CompanyName)
                         {
                             rootSub.CompanyName = parameters.Data.CompanyName;
                             var licenseBotApi = GetLicenseBotApi();

                             if (rootSub.FriendlyLicenseDetails.LicensedMaxPrinterCount != -1)
                                 rootSub.FriendlyLicenseDetails.LicensedMaxPrinterCount = parameters.Data.LicensedMaxPrinterCount;
                             if (rootSub.FriendlyLicenseDetails.SupportsMultiplePrinters == false && parameters.Data.LicensedMaxPrinterCount > 1)
                                 rootSub.FriendlyLicenseDetails.SupportsMultiplePrinters = true;

                             var updatedSub = licenseBotApi.UpdateSubscriptionProfile(rootSub);
                             if (updatedSub?.CompanyName != parameters.Data.CompanyName)
                                 this.Log().InfoFormat($"Unable to update subscriptions");
                             else
                                 bRet = true;

                         }
                         else
                             bRet = true;

                     }
                     else
                         this.Log().InfoFormat($"Unable to retrieve the root subscription");
                 }
                 else
                     this.Log().InfoFormat($"Unable to retrieve subscriptions");
             }
             else
                 this.Log().InfoFormat($"companyname cannot be empty");
             return bRet;
         });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public GalaxySMSBusinessEntities.SubscriptionData IdProducerSyncSubscriptionAndEntity(SaveParameters<IdProducerSyncSubscriptionAndEntityParameters> parameters)
        {   // Create or Update subscription to match entity name. If the subscription already exists, only the name will be updated if it differs from the Entity name. All license details remain unchanged in that case
            // If Adding a new subscription, also update the GalaxySMS gcsEntityIdProducer table with subscription info (ID, master username and password)
            // call syncsubscriptiontemplatefields
            // call getallcardtemplates w/import = true

            return ExecuteFaultHandledOperation(() =>
         {
             ValidateAdminAuthorizationAndSetupOperation(parameters);
             return IdProducerSyncSubscriptionAndEntityWithoutValidateAuth(parameters);
         });

        }

        public GalaxySMSBusinessEntities.SubscriptionData[] IdProducerGetSubscriptions(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
         {
             ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.BadgeTemplateCanViewId);

             idProducerAPI idpApi = null;

             idpApi = GetIdProducerApi();
             if (idpApi == null)
                 throw new UnauthorizedAccessException($"Unable to create idpApi");

             var subscriptions = idpApi.GetAllSubscriptionsResponse();
             var results = new List<GalaxySMSBusinessEntities.SubscriptionData>();
             if (subscriptions.IsSuccessful)
             {
                 foreach (var sub in subscriptions.Subscriptions)
                 {
                     //var theSub = new GalaxySMSBusinessEntities.SubscriptionData();
                     //var fld = new GalaxySMSBusinessEntities.FriendlyLicenseDetails();
                     //SimpleMapper.PropertyMap(theSub.FriendlyLicenseDetails, fld);
                     //SimpleMapper.PropertyMap(sub, theSub);
                     var theSub = Globals.Instance.Mapper.Map<GalaxySMSBusinessEntities.SubscriptionData>(sub);
                     results.Add(theSub);
                 }
             }
             return results.ToArray();
         });

        }

        public GalaxySMSBusinessEntities.SubscriptionData IdProducerGetRootSubscription(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
         {
             ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.BadgeTemplateCanViewId);

             return IdProducerGetRootSubscriptionWithoutValidateAuth();
             //idProducerAPI idpApi = null;

             //idpApi = GetIdProducerApiAsRoot();
             //if (idpApi == null)
             //    throw new UnauthorizedAccessException($"Unable to create idpApi");

             //var subscriptions = idpApi.GetAllSubscriptionsResponse();
             //var results = new List<GalaxySMSBusinessEntities.SubscriptionData>();
             //if (subscriptions.IsSuccessful)
             //{
             //    foreach (var sub in subscriptions.Subscriptions)
             //    {
             //        if (sub.ID == Globals.Instance.IdProducerSettings.DefaultSubscriptionId)
             //        {
             //            var theSub = new GalaxySMSBusinessEntities.SubscriptionData();
             //            SimpleMapper.PropertyMap(sub, theSub);
             //            return theSub;
             //        }
             //    }
             //}
             //return null;
         });

        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public GalaxySMSBusinessEntities.SubscriptionTemplateField[] SyncSubscriptionTemplateFields(SaveParameters<IdProducerRequestParameters> parameters)
        {
            // PushGalaxy fields for a specific entity to idPRODUCER subscription
            return ExecuteFaultHandledOperation(() =>
         {

             int currentEntitySubscriptionId = 0;
             var idpApi = GetIdProducerApi(parameters.Data.SubscriptionId, parameters.Data.PersonUid, ref currentEntitySubscriptionId);

             if (idpApi == null)
                 idpApi = GetIdProducerApiAsRoot();

             var data = idpApi.GetAllSubscriptionTemplateFieldsResponse();
             if (data.IsSuccessful)
             {
                 var existingTemplateFields = new List<GalaxySMSBusinessEntities.SubscriptionTemplateField>();
                 existingTemplateFields.AddRange(Globals.Instance.Mapper.Map<List<GalaxySMSBusinessEntities.SubscriptionTemplateField>>(data.SubscriptionTemplateFields));

                 var existingSMSFields = GetPersonUserInterfacePageControlDataWithoutValidateAuth(new GetParametersWithPhoto(parameters));

                 var deleteTheseTemplateFields = existingTemplateFields.Where(o => existingSMSFields.ControlProperties.All(o2 => o2.TableName != o.TableName)).ToList();

                 var keepPropertyTemplateFields = existingSMSFields.ControlProperties.Where(o2 => o2.ColumnName == string.Empty).ToList();

                 foreach (var pt in keepPropertyTemplateFields)
                 {
                     var tf = deleteTheseTemplateFields.FirstOrDefault(o => o.FieldName == pt.PropertyName && o.TableName == pt.TableName);
                     if (tf != null)
                         deleteTheseTemplateFields.Remove(tf);
                 }

                 foreach (var f in deleteTheseTemplateFields)
                 {
                     System.Diagnostics.Trace.WriteLine(
                         $"templateId:{f.ID}, {f.FieldName}, {f.DisplayName} is being deleted.");
                     var deletedResponse = idpApi.DeleteSubscriptionTemplateField(f.ID);
                     //if (f.HideFromTemplateEditor == false)
                     //{
                     //    System.Diagnostics.Trace.WriteLine($"templateId:{f.ID}, {f.FieldName}, {f.DisplayName} should be deleted. It is being set to hidden instead.");
                     //    f.HideFromTemplateEditor = true;
                     //    var updatedResponse = idpApi.UpdateSubscriptionTemplateField(f);
                     //}
                 }

                 data = idpApi.GetAllSubscriptionTemplateFieldsResponse();
                 if (data.IsSuccessful)
                 {
                     existingTemplateFields = new List<GalaxySMSBusinessEntities.SubscriptionTemplateField>();
                     existingTemplateFields.AddRange(Globals.Instance.Mapper.Map<List<GalaxySMSBusinessEntities.SubscriptionTemplateField>>(data.SubscriptionTemplateFields));
                     var addTheseSMSFields = existingSMSFields.ControlProperties.Where(o => existingTemplateFields.All(o2 => o2.FieldName != o.ColumnName)).ToList();

                     foreach (var pt in keepPropertyTemplateFields)
                     {
                         var et = existingTemplateFields.FirstOrDefault(o => (o.FieldName == pt.PropertyName && o.TableName == pt.TableName));
                         if (et != null)
                             addTheseSMSFields.Remove(pt);
                     }

                     var updateTheseTemplateFields = existingTemplateFields.Where(o => existingSMSFields.ControlProperties.All(o2 => o2.Display != o.DisplayName && o2.TableName != o.TableName)).ToList();

                     foreach (var f in updateTheseTemplateFields)
                     {
                         var smsField = existingSMSFields.ControlProperties.FirstOrDefault(o => (o.ColumnName == f.FieldName && o.TableName == f.TableName));
                         if (smsField != null)
                         {
                             f.DisplayName = smsField.Display;
                             if (smsField.IsRequired || smsField.IsActive == false)
                                 f.IsRequired = true;
                             else
                                 f.IsRequired = false;

                             System.Diagnostics.Trace.WriteLine(
                             $"Updating templateId:{f.ID}, {f.FieldName}, {f.DisplayName}.");
                             var updatedResponse = idpApi.UpdateSubscriptionTemplateField(f);
                         }
                     }


                     foreach (var f in addTheseSMSFields)
                     {
                         var ctf = new SubscriptionTemplateField()
                         {
                             DisplayName = f.Display,
                             FieldName = f.ColumnName,
                             TableName = f.TableName,
                             SubscriptionID = currentEntitySubscriptionId,
                             IsProprietary = true,
                             FormControlTypeID = (int)FormControlTypeId.Input,

                             //TemplateFieldTypeID = (int)TemplateFieldTypeId.Text,
                             //DataSensitivityLevelCode = "Normal",
                             //SearchFieldValues = new List<string>().ToArray(),
                             //TemplateFieldValues = new List<string>().ToArray(),
                             //TemplateFieldChoices = new List<string>().ToArray()
                         };

                         if (f.PropertyTypeUid == GalaxySMS.Common.Constants.UserDefinedPropertyTypeIds.Boolean)
                         {
                             ctf.TemplateFieldTypeID = (int)TemplateFieldTypeId.Numeric;
                             ctf.FormControlTypeID = (int)FormControlTypeId.Checkbox;
                         }
                         else if (f.PropertyTypeUid == GalaxySMS.Common.Constants.UserDefinedPropertyTypeIds.Number)
                         {
                             ctf.TemplateFieldTypeID = (int)TemplateFieldTypeId.Numeric;
                             ctf.FormControlTypeID = (int)FormControlTypeId.Input;
                         }
                         else if (f.PropertyTypeUid == GalaxySMS.Common.Constants.UserDefinedPropertyTypeIds.Date)
                         {
                             if (f.PropertyName == "Date1" || f.PropertyName == "Date2")
                             {
                                 ctf.DisplayName += $" {f.PropertyName}";
                             }
                             else if (f.PropertyName.Contains("Activation") || f.PropertyName.Contains("Expiration"))
                             {
                                 var suffix = f.TableName;
                                 if (f.TableName.Contains("Credential"))
                                     suffix = "Credential";
                                 ctf.DisplayName += $" ({suffix})";
                             }

                             ctf.TemplateFieldTypeID = (int)TemplateFieldTypeId.Date;
                             ctf.FormControlTypeID = (int)FormControlTypeId.DateCtrl;

                         }
                         else if (f.PropertyTypeUid == GalaxySMS.Common.Constants.UserDefinedPropertyTypeIds.List)
                         {
                             ctf.TemplateFieldTypeID = (int)TemplateFieldTypeId.Text;
                             ctf.MaxLength = 65;
                             ctf.FormControlTypeID = (int)FormControlTypeId.SingleSelect;
                         }
                         else if (f.PropertyTypeUid == GalaxySMS.Common.Constants.UserDefinedPropertyTypeIds.Guid)
                         {
                             ctf.TemplateFieldTypeID = (int)TemplateFieldTypeId.Text;
                             ctf.MaxLength = 65;
                             ctf.FormControlTypeID = (int)FormControlTypeId.Input;
                         }
                         else if (f.PropertyTypeUid == GalaxySMS.Common.Constants.UserDefinedPropertyTypeIds.Text)
                         {
                             ctf.TemplateFieldTypeID = (int)TemplateFieldTypeId.Text;
                             ctf.MaxLength = f.UserDefinedTextPropertyRules.MaximumLength;
                             ctf.FormControlTypeID = (int)FormControlTypeId.Input;
                         }
                         else if (f.PropertyTypeUid == GalaxySMS.Common.Constants.UserDefinedPropertyTypeIds.Photo)
                         {
                             ctf.TemplateFieldTypeID = (int)TemplateFieldTypeId.Photograph;
                             ctf.TemplateFieldFormatID = 1;// 1x1
                                                           //    ctf.MaxLength = 2000;
                             ctf.FormControlTypeID = (int)FormControlTypeId.LoadablePicture;
                         }
                         if (string.IsNullOrEmpty(ctf.FieldName))
                         {
                             ctf.FieldName = f.PropertyName;
                         }


                         //case "binary":
                         //    case "varbinary":
                         //    case "image":
                         //        ctf.TemplateFieldTypeID = (int)TemplateFieldTypeId.Photograph;
                         //    ctf.TemplateFieldFormatID = 1;// 1x1
                         //    ctf.MaxLength = 2000;
                         //    break;



                         //if (f.IsRequired)
                         //    ctf.IsRequired = true;

                         var fname = ctf.FieldName.Replace(".", "");
                         //                         var existingTemplateField = existingTemplateFields.FirstOrDefault(o=> (o.TableName == ctf.TableName.ToString() && o.FieldName == fname));
                         var existingTemplateField = existingTemplateFields.FirstOrDefault(o => o.FieldName == fname);
                         if (existingTemplateField == null)
                         {
                             Trace.WriteLine(
                                 $"Adding badging template field: SubscriptionId: {ctf.SubscriptionID}, {ctf.TableName}, {ctf.FieldName}.");

                             idpApi.AddSubscriptionTemplateField(ctf);
                         }
                     }
                     var newData = idpApi.GetAllSubscriptionTemplateFieldsResponse();
                     if (newData.IsSuccessful)
                     {
                         var allTemplateFields = new List<GalaxySMSBusinessEntities.SubscriptionTemplateField>();
                         var fields = newData.SubscriptionTemplateFields.Where(o => o.SubscriptionID == currentEntitySubscriptionId).ToArray();
                         allTemplateFields.AddRange(Globals.Instance.Mapper.Map<GalaxySMSBusinessEntities.SubscriptionTemplateField[]>(fields));
                         return allTemplateFields.ToArray();
                     }
                 }

             }
             return null;
         });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public GalaxySMSBusinessEntities.CardTemplateLite[] GetAllCardTemplates(bool import, int subscriptionId)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                int currentCustomerSubscriptionId = 0;
                var idpApi = GetIdProducerApi(subscriptionId, Guid.Empty, ref currentCustomerSubscriptionId);

                var results = new List<GalaxySMSBusinessEntities.CardTemplateLite>();
                var data = idpApi.GetAllCardTemplatesLiteResponse();
                IBadgeTemplateRepository badgeTemplateRepo = null;
                IEnumerable<BadgeTemplate> galaxyBadges = null;

                var entityIdProducer = GetEntityIdProducerBySubscriptionId(subscriptionId);
                if (entityIdProducer != null)
                {

                    if (data.IsSuccessful)
                    {
                        results.AddRange(Globals.Instance.Mapper.Map<GalaxySMSBusinessEntities.CardTemplateLite[]>(data.CardTemplatesLite));
                        if (import)
                        {
                            var rootSub = IdProducerGetRootSubscriptionWithoutValidateAuth();
                            var alwaysUseRootSubscription = Globals.Instance.IdProducerSettings.AlwaysUseRootSubscription;

                            var adminManager = new AdministrationManager(this._DataRepositoryFactory, _BusinessEngineFactory);
                            badgeTemplateRepo = _DataRepositoryFactory.GetDataRepository<IBadgeTemplateRepository>();

                            galaxyBadges = badgeTemplateRepo.GetAllBadgeTemplatesForEntity(this.ApplicationUserSessionHeader, new GetParametersWithPhoto() { UniqueId = entityIdProducer.EntityId });

                            foreach (var b in results)
                            {
                                var gb = galaxyBadges.FirstOrDefault(o => o.TemplateId == b.ID.ToString());
                                if (gb == null)
                                    gb = new BadgeTemplate()
                                    {
                                        TemplateId = b.ID.ToString(),
                                        EntityId = entityIdProducer.EntityId
                                    };
                                gb.TemplateName = b.Name;
                                gb.Description = b.Description;
                                if (string.IsNullOrEmpty(gb.Description))
                                    gb.Description = gb.TemplateName;
                                gb.BadgeSystemTypeUid = GalaxySMS.Common.Constants.BadgeSystemTypeIds.IdProducer;
                                if (ApplicationUserSessionHeader.SessionGuid == Guid.Empty)
                                    SaveBadgeTemplateWithoutValidateAuth(new SaveParameters<BadgeTemplate>() { Data = gb });
                                else
                                    SaveBadgeTemplate(new SaveParameters<BadgeTemplate>() { Data = gb });

                                // If the system is configured to not link Galaxy Customers with idPRODUCER Subscriptions, or if no customers/subscriptions are allowed
                                // then duplicate the badge templates for each Galaxy customer
                                int maxCustomerCount = 0;
                                if (rootSub != null)
                                {
                                    maxCustomerCount = rootSub.FriendlyLicenseDetails.MaxCustomerCount;
                                }

                                if (alwaysUseRootSubscription == true || maxCustomerCount == 0)
                                {
                                    // If a template gets renamed in idProducer, it will result in new entries being added to the Galaxy DB for each customer.
                                    // The originally named template will still exist in Galaxy, but will not work since it no longer exists 
                                    var galaxyEntities = adminManager.GetAllEntitiesRaw(new GetParametersWithPhoto());
                                    galaxyBadges = badgeTemplateRepo.GetAll(this.ApplicationUserSessionHeader, new GetParametersWithPhoto());
                                    foreach (var entity in galaxyEntities.Where(o => o.EntityId != GalaxySMS.Common.Constants.EntityIds.GalaxySMS_SystemEntity_Id))
                                    {
                                        gb = galaxyBadges.FirstOrDefault(o => o.EntityId == entity.EntityId && o.TemplateName == b.Name);
                                        if (gb == null)
                                        {
                                            gb = new BadgeTemplate()
                                            {
                                                TemplateId = b.ID.ToString(),
                                                EntityId = entity.EntityId
                                            };
                                            gb.TemplateName = b.Name;
                                            gb.Description = b.Description;
                                            if (string.IsNullOrEmpty(gb.Description))
                                                gb.Description = gb.TemplateName;
                                            if (ApplicationUserSessionHeader.SessionGuid == Guid.Empty)
                                                SaveBadgeTemplateWithoutValidateAuth(new SaveParameters<BadgeTemplate>() { Data = gb });
                                            else
                                                SaveBadgeTemplate(new SaveParameters<BadgeTemplate>() { Data = gb });
                                        }
                                    }
                                }

                            }
                        }
                    }
                }
                return results.ToArray();
            });
        }

        public GalaxySMSBusinessEntities.PrintDispatcher[] GetPrintDispatchers(GetParametersWithPhoto<IdProducerRequestParameters> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.BadgeTemplateCanViewId);

                int currentEntitySubscriptionId = 0;
                var idpApi = GetIdProducerApi(parameters.Data.SubscriptionId, parameters.Data.PersonUid, ref currentEntitySubscriptionId);
                if (idpApi == null)
                    throw new UnauthorizedAccessException($"Unable to create idpApi");

                var results = new List<GalaxySMSBusinessEntities.PrintDispatcher>();

                var subscriptionBranchData = idpApi.GetSubscriptionBranchData();
                if (subscriptionBranchData.IsSuccessful)
                {
                    results.AddRange(Globals.Instance.Mapper.Map<GalaxySMSBusinessEntities.PrintDispatcher[]>(subscriptionBranchData.Subscription.PrintDispatchers));
                    foreach (var c in subscriptionBranchData.Subscription.ChildrenSubscriptions)
                        GetAllPrintDispatchers(c, ref results);

                }
                return results.ToArray();
            });


        }

        private void GetAllPrintDispatchers(ChildrenSubscription s, ref List<GalaxySMSBusinessEntities.PrintDispatcher> results)
        {
            results.AddRange(Globals.Instance.Mapper.Map<GalaxySMSBusinessEntities.PrintDispatcher[]>(s.PrintDispatchers));
            foreach (var c in s.ChildrenSubscriptions)
                GetAllPrintDispatchers(c, ref results);

        }

        public GalaxySMSBusinessEntities.Printer[] GetPrinters(GetParametersWithPhoto<IdProducerRequestParameters> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.BadgeTemplateCanViewId);

                int currentEntitySubscriptionId = 0;
                var idpApi = GetIdProducerApi(parameters.Data.SubscriptionId, parameters.Data.PersonUid, ref currentEntitySubscriptionId);
                if (idpApi == null)
                    throw new UnauthorizedAccessException($"Unable to create idpApi");

                var results = new List<GalaxySMSBusinessEntities.Printer>();

                var data = idpApi.GetAllPrintersResponse();
                if (data.IsSuccessful)
                {
                    var p = data.Printers.ToList();
                    p.RemoveAll(x => results.Any(y => y.ID == x.ID));
                    if (p.Count > 0)
                        results.AddRange(Globals.Instance.Mapper.Map<GalaxySMSBusinessEntities.Printer[]>(p));
                }
                return results.ToArray();
            });
        }

        public GalaxySMSBusinessEntities.PreviewData GetPreviewImagesForCredential(GetParametersWithPhoto<IdProducerPrintPreviewRequestParameters> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.BadgeTemplateCanViewId);
                if (IdProducerCreateXmlPayload(parameters, out var templateName, out var idpApi, out var xmlPayload, out var bothSides, out var templateId) == false) return null;

                var data = idpApi.GetCardPreviewImgsResponse(xmlPayload, templateName, bothSides);
                if (data.IsSuccessful == false)
                {
                    this.Log().Info($"GetCardPreviewImgsResponse failed: {data.ErrorMessage}, {data.ErrorCodeStr}");
                    return null;
                }

                var previewData = new GalaxySMSBusinessEntities.PreviewData();

                previewData.FrontPreviewImage = data.Base64Images[0];
                if (data.Base64Images.Length > 1)
                    previewData.BackPreviewImage = data.Base64Images[1];
                return previewData;
            });

        }

        private bool IdProducerCreateXmlPayload(GetParametersWithPhoto<IdProducerPrintPreviewRequestParameters> parameters, out string templateName,
            out idProducerAPI idpApi, out string xmlPayload, out bool bothSides, out int templateId)
        {
            var personCredentialRepository = _DataRepositoryFactory.GetDataRepository<IPersonCredentialRepository>();
            templateName = string.Empty;
            idpApi = null;
            xmlPayload = string.Empty;
            bothSides = true;
            templateId = 0;

            var cardholderPersonData = personCredentialRepository.GetPersonCredentialBadgeDataView(ApplicationUserSessionHeader,
                new GetParametersWithPhoto() { UniqueId = parameters.Data.PersonCredentialUid });
            if (cardholderPersonData == null)
                return false;

            templateName = string.Empty;

            if (parameters.Data.Dossier == false)
            {
                templateName = cardholderPersonData.BadgeTemplateName;
            }
            else
            {
                templateName = cardholderPersonData.DossierTemplateName;
            }

            if (string.IsNullOrEmpty(templateName))
                return false;

            idpApi = null;
            if (Globals.Instance.IdProducerSettings.AlwaysUseRootSubscription)
            {
                idpApi = GetIdProducerApiAsRoot();
            }
            else
            {
                idpApi = GetIdProducerApiForGalaxyEntity(cardholderPersonData.EntityId);
            }

            if (idpApi == null)
            {
                this.Log().Info($"Unable to create IdProducerApi");
                return false;
            }

            var templateLite = GetCardTemplateLiteByName(idpApi, templateName);
            if (templateLite == null)
                return false;

            templateId = templateLite.ID;

            xmlPayload = string.Empty;
            bothSides = true;
            var templateFields = GetCardTemplateFields(idpApi, templateName);
            if (templateFields == null || templateFields.Count == 0)
            {
                dynamic fd = new List<String>();
                xmlPayload =
                    idpApi.CreateXmlPayload(
                        string.Format("{0}-{1}", cardholderPersonData.PersonCredentialUid, DateTimeOffset.Now.ToString()), "", fd);
            }
            else
            {
                var fieldData = new List<KeyValuePair<string, string>>();
                var myType = cardholderPersonData.GetType();
                IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties());

                foreach (var tf in templateFields)
                {
                    KeyValuePair<string, string> kvp;
                    var prop = props.FirstOrDefault(p => p.Name.ToLower() == tf.FieldName.ToLower());
                    if (prop == null)
                    {
                        this.Log().Info($"Fieldname not found: {tf.FieldName}");
                        kvp = new KeyValuePair<string, string>(tf.FieldName, string.Empty);
                        fieldData.Add(kvp);
                        continue;
                    }

                    var oValue = prop.GetValue(cardholderPersonData, null);
                    var value = prop.GetValue(cardholderPersonData, null);

                    switch (prop.PropertyType.FullName.ToLower())
                    {
                        case "system.byte[]":
                            switch (prop.Name.ToLower())
                            {
                                case "personphotomainphoto":
                                case "personphotoaltphoto":
                                case "signature":
                                case "fingerprint":
                                    if (value != null)
                                    {
                                        var sValue = Convert.ToBase64String((byte[])value);
                                        //                                            System.IO.File.WriteAllBytes("R:\\Users\\Kevin\\AppData\\Local\\Temp\\image.jpg", (byte[])value);
                                        kvp = new KeyValuePair<string, string>(tf.FieldName, sValue);
                                    }
                                    else
                                        kvp = new KeyValuePair<string, string>(tf.FieldName, string.Empty);

                                    fieldData.Add(kvp);
                                    break;
                            }

                            break;

                        case "system.guid":
                            switch (prop.Name.ToLower())
                            {
                                case "entityid":
                                    kvp = new KeyValuePair<string, string>(tf.FieldName, cardholderPersonData.EntityName);
                                    fieldData.Add(kvp);
                                    break;

                                case "personrecordtypeuid":
                                    kvp = new KeyValuePair<string, string>(tf.FieldName, cardholderPersonData.PersonRecordType);
                                    fieldData.Add(kvp);
                                    break;

                                case "countryofbirthuid":
                                    kvp = new KeyValuePair<string, string>(tf.FieldName, cardholderPersonData.CountryName);
                                    fieldData.Add(kvp);
                                    break;

                                case "departmentuid":
                                    kvp = new KeyValuePair<string, string>(tf.FieldName, cardholderPersonData.DepartmentName);
                                    fieldData.Add(kvp);
                                    break;

                                case "genderuid":
                                    kvp = new KeyValuePair<string, string>(tf.FieldName, cardholderPersonData.Gender);
                                    fieldData.Add(kvp);
                                    break;

                                case "personactivestatustypeuid":
                                    kvp = new KeyValuePair<string, string>(tf.FieldName,
                                        cardholderPersonData.PersonActiveStatusType);
                                    fieldData.Add(kvp);
                                    break;

                                case "accessprofileuid":
                                    kvp = new KeyValuePair<string, string>(tf.FieldName,
                                        cardholderPersonData.AccessProfileName);
                                    fieldData.Add(kvp);
                                    break;
                            }

                            break;

                        default:
                            kvp = value != null
                                ? new KeyValuePair<string, string>(tf.FieldName, value.ToString())
                                : new KeyValuePair<string, string>(tf.FieldName, string.Empty);
                            fieldData.Add(kvp);
                            break;
                    }
                }

                xmlPayload = idpApi.CreateXmlPayloadFromKVP(
                    string.Format("{0}-{1}", cardholderPersonData.PersonCredentialUid, DateTimeOffset.Now.ToString()), "", fieldData);
            }

            this.Log().Info(xmlPayload);
            return true;
        }

        public GalaxySMSBusinessEntities.CreatedPrintRequest[] CreatePrintRequestForCredential(GetParametersWithPhoto<IdProducerPrintRequestParameters> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.BadgeTemplateCanViewId);
                var previewParams = new GetParametersWithPhoto<IdProducerPrintPreviewRequestParameters>();
                previewParams.Data = new IdProducerPrintPreviewRequestParameters(parameters.Data);

                if (IdProducerCreateXmlPayload(previewParams, out var templateName, out var idpApi, out var xmlPayload, out var bothSides, out var templateId) == false) return null;

                var printRequests = new List<CreatedPrintRequest>();

                bool failIfDispatcherStopped = Globals.Instance.IdProducerSettings.FailIfPrintDispatcherStopped;
                if (parameters.Data.DispatcherId == 0 && parameters.Data.PrinterId != 0)
                {
                    var data = idpApi.CreateDirectPrintRequestsResponse(parameters.Data.PersonCredentialUid.ToString(), parameters.Data.PrinterId, templateId, xmlPayload, failIfDispatcherStopped);
                    if (data.IsSuccessful)
                        printRequests.AddRange(data.CreatedPrintRequests);
                }
                else if (parameters.Data.DispatcherId != 0 && parameters.Data.PrinterId == 0)
                {
                    var data = idpApi.CreateQueuedPrintRequestsResponse(parameters.Data.PersonCredentialUid.ToString(), parameters.Data.DispatcherId, templateId, xmlPayload);
                    if (data.IsSuccessful)
                        printRequests.AddRange(data.CreatedPrintRequests);
                }
                var response = new List<GalaxySMS.Business.Entities.CreatedPrintRequest>();
                foreach (var pr in printRequests)
                {
                    var o = new GalaxySMS.Business.Entities.CreatedPrintRequest();
                    SimpleMapper.PropertyMap(pr, o);
                    response.Add(o);
                }
                return response.ToArray();
            });

        }

        public ServerVersionNumber GetIdProducerVersion()
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters,
                //    PermissionIds.GalaxySMSDataAccessPermission.Bad);

                //int currentEntitySubscriptionId = 0;
                var idpApi = GetIdProducerApi();
                if (idpApi == null)
                    throw new UnauthorizedAccessException($"Unable to create idpApi");

                var version = idpApi.GetServerVersionNumber();
                if (version == null)
                    return null;
                return new ServerVersionNumber()
                {
                    Data = version.Data
                };
            });
        }

        public ValidationProblemDetails ValidateByGuid(GuidValidationRequest data)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IValidationRepository>();
                return repository.Validate(data);
            });
        }

        public ArrayResponse<ActivityHistoryEvent> GetActivityHistoryEvents(ActivityHistoryEventSearchParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                //ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.IsLoggedOn);
                var repository = _DataRepositoryFactory.GetDataRepository<IActivityHistoryEventRepository>();

                if (parameters.ForCurrentUser)
                    parameters.UserId = ApplicationUserSessionHeader.UserId;
                var getFromFlatTables =
                    parameters.GetOption(GetOptions_ActivityHistoryEvents.GetFromFlatTables.ToString());
                if (!getFromFlatTables.HasValue || !getFromFlatTables.Value)
                    return (ArrayResponse<ActivityHistoryEvent>)repository.GetActivityHistoryEvents(ApplicationUserSessionHeader, parameters);
                return (ArrayResponse<ActivityHistoryEvent>)repository.GetActivityEvents(ApplicationUserSessionHeader, parameters);
            });
        }
        public EventFilterData GetEventFilterData(EventFilterDataSelectionParameters parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetDataRepository<IActivityHistoryEventRepository>();
                return repository.GetEventFilterData(ApplicationUserSessionHeader, parameters);
            });
        }
        #endregion
        #endregion

        #region

        public EntityDeviceAlertEventSettings GetDeviceAlertEventSettings(GetParametersWithPhoto parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetRepository<IDeviceAlertEventSettingsRepository>();

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanViewId);
                var data = repository.GetForEntityId(parameters.UniqueId, parameters.GetBool);
                return data;
            });
        }

        [OperationBehavior(TransactionScopeRequired = true)]
        public EntityDeviceAlertEventSettings SaveDeviceAlertEventSettings(SaveParameters<EntityDeviceAlertEventSettings> parameters)
        {
            return ExecuteFaultHandledOperation(() =>
            {
                var repository = _DataRepositoryFactory.GetRepository<IDeviceAlertEventSettingsRepository>();

                ValidateAuthorizationAndSetupOperation(parameters, PermissionIds.GalaxySMSDataAccessPermission.SystemHardwareCanUpdateId);
                var data = repository.SaveForEntityId(parameters, true, ApplicationUserSessionHeader);

                return data;
            });

        }
        #endregion
    }

}

