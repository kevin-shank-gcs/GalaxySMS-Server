//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class InputDeviceAlertEventType : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class InputDeviceAlertEventType
        {
        	public InputDeviceAlertEventType() : base()
        	{
        		Initialize();
        	}
        
        	public InputDeviceAlertEventType(InputDeviceAlertEventType e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        		this.InputDeviceAlertEvents = new HashSet<InputDeviceAlertEvent>();
        		this.InputDeviceEventProperties = new HashSet<InputDeviceEventProperty>();
        }
        
        	public void Initialize(InputDeviceAlertEventType e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.InputDeviceAlertEventTypeUid = e.InputDeviceAlertEventTypeUid;
        		this.DisplayResourceKey = e.DisplayResourceKey;
        		this.DescriptiorResourceKey = e.DescriptiorResourceKey;
        		this.Display = e.Display;
        		this.Description = e.Description;
        		this.Tag = e.Tag;
        		this.CanAcknowledge = e.CanAcknowledge;
        		this.CanHaveInputOutputGroupOffset = e.CanHaveInputOutputGroupOffset;
        		this.CanHaveSchedule = e.CanHaveSchedule;
        		this.CanHaveAudio = e.CanHaveAudio;
        		this.CanHaveInstructions = e.CanHaveInstructions;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.DescriptionResourceKey = e.DescriptionResourceKey;
        		this.Flag = e.Flag;
        		this.InputDeviceAlertEvents = e.InputDeviceAlertEvents.ToCollection();
        		this.InputDeviceEventProperties = e.InputDeviceEventProperties.ToCollection();
        		
        	}
        
        	public InputDeviceAlertEventType Clone(InputDeviceAlertEventType e)
        	{
        		return new InputDeviceAlertEventType(e);
        	}
        
        	public bool Equals(InputDeviceAlertEventType other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(InputDeviceAlertEventType other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.InputDeviceAlertEventTypeUid != this.InputDeviceAlertEventTypeUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _inputDeviceAlertEventTypeUid;
    
    	[DataMember]
    	public System.Guid InputDeviceAlertEventTypeUid
    	{ 
    		get { return _inputDeviceAlertEventTypeUid; }
    		set
    		{
    			if (_inputDeviceAlertEventTypeUid != value )
    			{
    				_inputDeviceAlertEventTypeUid = value;
    				OnPropertyChanged(() => InputDeviceAlertEventTypeUid);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _displayResourceKey;
    
    	[DataMember]
    	public Nullable<System.Guid> DisplayResourceKey
    	{ 
    		get { return _displayResourceKey; }
    		set
    		{
    			if (_displayResourceKey != value )
    			{
    				_displayResourceKey = value;
    				OnPropertyChanged(() => DisplayResourceKey);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _descriptiorResourceKey;
    
    	[DataMember]
    	public Nullable<System.Guid> DescriptiorResourceKey
    	{ 
    		get { return _descriptiorResourceKey; }
    		set
    		{
    			if (_descriptiorResourceKey != value )
    			{
    				_descriptiorResourceKey = value;
    				OnPropertyChanged(() => DescriptiorResourceKey);
    			}
    		}
    	}
    	
    	private string _display;
    
    	[DataMember]
    	public string Display
    	{ 
    		get { return _display; }
    		set
    		{
    			if (_display != value )
    			{
    				_display = value;
    				OnPropertyChanged(() => Display);
    			}
    		}
    	}
    	
    	private string _description;
    
    	[DataMember]
    	public string Description
    	{ 
    		get { return _description; }
    		set
    		{
    			if (_description != value )
    			{
    				_description = value;
    				OnPropertyChanged(() => Description);
    			}
    		}
    	}
    	
    	private string _tag;
    
    	[DataMember]
    	public string Tag
    	{ 
    		get { return _tag; }
    		set
    		{
    			if (_tag != value )
    			{
    				_tag = value;
    				OnPropertyChanged(() => Tag);
    			}
    		}
    	}
    	
    	private bool _canAcknowledge;
    
    	[DataMember]
    	public bool CanAcknowledge
    	{ 
    		get { return _canAcknowledge; }
    		set
    		{
    			if (_canAcknowledge != value )
    			{
    				_canAcknowledge = value;
    				OnPropertyChanged(() => CanAcknowledge);
    			}
    		}
    	}
    	
    	private bool _canHaveInputOutputGroupOffset;
    
    	[DataMember]
    	public bool CanHaveInputOutputGroupOffset
    	{ 
    		get { return _canHaveInputOutputGroupOffset; }
    		set
    		{
    			if (_canHaveInputOutputGroupOffset != value )
    			{
    				_canHaveInputOutputGroupOffset = value;
    				OnPropertyChanged(() => CanHaveInputOutputGroupOffset);
    			}
    		}
    	}
    	
    	private bool _canHaveSchedule;
    
    	[DataMember]
    	public bool CanHaveSchedule
    	{ 
    		get { return _canHaveSchedule; }
    		set
    		{
    			if (_canHaveSchedule != value )
    			{
    				_canHaveSchedule = value;
    				OnPropertyChanged(() => CanHaveSchedule);
    			}
    		}
    	}
    	
    	private bool _canHaveAudio;
    
    	[DataMember]
    	public bool CanHaveAudio
    	{ 
    		get { return _canHaveAudio; }
    		set
    		{
    			if (_canHaveAudio != value )
    			{
    				_canHaveAudio = value;
    				OnPropertyChanged(() => CanHaveAudio);
    			}
    		}
    	}
    	
    	private bool _canHaveInstructions;
    
    	[DataMember]
    	public bool CanHaveInstructions
    	{ 
    		get { return _canHaveInstructions; }
    		set
    		{
    			if (_canHaveInstructions != value )
    			{
    				_canHaveInstructions = value;
    				OnPropertyChanged(() => CanHaveInstructions);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _descriptionResourceKey;
    
    	[DataMember]
    	public Nullable<System.Guid> DescriptionResourceKey
    	{ 
    		get { return _descriptionResourceKey; }
    		set
    		{
    			if (_descriptionResourceKey != value )
    			{
    				_descriptionResourceKey = value;
    				OnPropertyChanged(() => DescriptionResourceKey);
    			}
    		}
    	}
    	
    	private int _flag;
    
    	[DataMember]
    	public int Flag
    	{ 
    		get { return _flag; }
    		set
    		{
    			if (_flag != value )
    			{
    				_flag = value;
    				OnPropertyChanged(() => Flag);
    			}
    		}
    	}
    
    	
    	private ICollection<InputDeviceAlertEvent> _inputDeviceAlertEvents;
    
    	[DataMember]
    	public virtual ICollection<InputDeviceAlertEvent> InputDeviceAlertEvents
    	{ 
    		get { return _inputDeviceAlertEvents; }
    		set
    		{
    			if (_inputDeviceAlertEvents != value )
    			{
    				_inputDeviceAlertEvents = value;
    				OnPropertyChanged(() => InputDeviceAlertEvents);
    			}
    		}
    	}
    	
    	private ICollection<InputDeviceEventProperty> _inputDeviceEventProperties;
    
    	[DataMember]
    	public virtual ICollection<InputDeviceEventProperty> InputDeviceEventProperties
    	{ 
    		get { return _inputDeviceEventProperties; }
    		set
    		{
    			if (_inputDeviceEventProperties != value )
    			{
    				_inputDeviceEventProperties = value;
    				OnPropertyChanged(() => InputDeviceEventProperties);
    			}
    		}
    	}
    }
    
}
