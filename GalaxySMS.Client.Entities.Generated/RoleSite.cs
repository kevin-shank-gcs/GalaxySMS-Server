//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class RoleSite : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class RoleSite
        {
        	public RoleSite() : base()
        	{
        		Initialize();
        	}
        
        	public RoleSite(RoleSite e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        		this.RoleSitePermissions = new HashSet<RoleSitePermission>();
        }
        
        	public void Initialize(RoleSite e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.RoleSiteUid = e.RoleSiteUid;
        		this.RoleId = e.RoleId;
        		this.SiteUid = e.SiteUid;
        		this.IncludeAllClusters = e.IncludeAllClusters;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.RoleSitePermissions = e.RoleSitePermissions.ToCollection();
        		
        	}
        
        	public RoleSite Clone(RoleSite e)
        	{
        		return new RoleSite(e);
        	}
        
        	public bool Equals(RoleSite other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(RoleSite other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.RoleSiteUid != this.RoleSiteUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _roleSiteUid;
    
    	[DataMember]
    	public System.Guid RoleSiteUid
    	{ 
    		get { return _roleSiteUid; }
    		set
    		{
    			if (_roleSiteUid != value )
    			{
    				_roleSiteUid = value;
    				OnPropertyChanged(() => RoleSiteUid);
    			}
    		}
    	}
    	
    	private System.Guid _roleId;
    
    	[DataMember]
    	public System.Guid RoleId
    	{ 
    		get { return _roleId; }
    		set
    		{
    			if (_roleId != value )
    			{
    				_roleId = value;
    				OnPropertyChanged(() => RoleId);
    			}
    		}
    	}
    	
    	private System.Guid _siteUid;
    
    	[DataMember]
    	public System.Guid SiteUid
    	{ 
    		get { return _siteUid; }
    		set
    		{
    			if (_siteUid != value )
    			{
    				_siteUid = value;
    				OnPropertyChanged(() => SiteUid);
    			}
    		}
    	}
    	
    	private bool _includeAllClusters;
    
    	[DataMember]
    	public bool IncludeAllClusters
    	{ 
    		get { return _includeAllClusters; }
    		set
    		{
    			if (_includeAllClusters != value )
    			{
    				_includeAllClusters = value;
    				OnPropertyChanged(() => IncludeAllClusters);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    
    	
    	private gcsRole _gcsRole;
    
    	[DataMember]
    	public virtual gcsRole gcsRole
    	{ 
    		get { return _gcsRole; }
    		set
    		{
    			if (_gcsRole != value )
    			{
    				_gcsRole = value;
    				OnPropertyChanged(() => gcsRole);
    			}
    		}
    	}
    	
    	private ICollection<RoleSitePermission> _roleSitePermissions;
    
    	[DataMember]
    	public virtual ICollection<RoleSitePermission> RoleSitePermissions
    	{ 
    		get { return _roleSitePermissions; }
    		set
    		{
    			if (_roleSitePermissions != value )
    			{
    				_roleSitePermissions = value;
    				OnPropertyChanged(() => RoleSitePermissions);
    			}
    		}
    	}
    	
    	private Site _site;
    
    	[DataMember]
    	public virtual Site Site
    	{ 
    		get { return _site; }
    		set
    		{
    			if (_site != value )
    			{
    				_site = value;
    				OnPropertyChanged(() => Site);
    			}
    		}
    	}
    }
    
}
