//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class PersonCredential : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class PersonCredential
        {
        	public PersonCredential() : base()
        	{
        		Initialize();
        	}
        
        	public PersonCredential(PersonCredential e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        		this.PersonClusterPermissions = new HashSet<PersonClusterPermission>();
        		this.PersonCredentialCommandScripts = new HashSet<PersonCredentialCommandScript>();
        }
        
        	public void Initialize(PersonCredential e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.PersonCredentialUid = e.PersonCredentialUid;
        		this.CredentialUid = e.CredentialUid;
        		this.PersonUid = e.PersonUid;
        		this.PersonCredentialRoleUid = e.PersonCredentialRoleUid;
        		this.PersonActivationModeUid = e.PersonActivationModeUid;
        		this.PersonExpirationModeUid = e.PersonExpirationModeUid;
        		this.BadgeTemplateUid = e.BadgeTemplateUid;
        		this.DossierBadgeTemplateUid = e.DossierBadgeTemplateUid;
        		this.AccessPortalNoServerReplyBehaviorUid = e.AccessPortalNoServerReplyBehaviorUid;
        		this.AccessPortalDeferToServerBehaviorUid = e.AccessPortalDeferToServerBehaviorUid;
        		this.CredentialDescription = e.CredentialDescription;
        		this.ActivationDateTime = e.ActivationDateTime;
        		this.ExpirationDateTime = e.ExpirationDateTime;
        		this.UsageCount = e.UsageCount;
        		this.TraceEnabled = e.TraceEnabled;
        		this.DuressEnabled = e.DuressEnabled;
        		this.ReverseBits = e.ReverseBits;
        		this.BiometricEnrollmentStatus = e.BiometricEnrollmentStatus;
        		this.BadgePrintLimit = e.BadgePrintLimit;
        		this.BadgePrintCount = e.BadgePrintCount;
        		this.BadgeLastPrinted = e.BadgeLastPrinted;
        		this.DossierPrintLimit = e.DossierPrintLimit;
        		this.DossierPrintCount = e.DossierPrintCount;
        		this.DossierLastPrinted = e.DossierLastPrinted;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.IsActive = e.IsActive;
        		this.SysGalCardId = e.SysGalCardId;
        		this.PersonClusterPermissions = e.PersonClusterPermissions.ToCollection();
        		this.PersonCredentialCommandScripts = e.PersonCredentialCommandScripts.ToCollection();
        		
        	}
        
        	public PersonCredential Clone(PersonCredential e)
        	{
        		return new PersonCredential(e);
        	}
        
        	public bool Equals(PersonCredential other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(PersonCredential other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.PersonCredentialUid != this.PersonCredentialUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _personCredentialUid;
    
    	[DataMember]
    	public System.Guid PersonCredentialUid
    	{ 
    		get { return _personCredentialUid; }
    		set
    		{
    			if (_personCredentialUid != value )
    			{
    				_personCredentialUid = value;
    				OnPropertyChanged(() => PersonCredentialUid);
    			}
    		}
    	}
    	
    	private System.Guid _credentialUid;
    
    	[DataMember]
    	public System.Guid CredentialUid
    	{ 
    		get { return _credentialUid; }
    		set
    		{
    			if (_credentialUid != value )
    			{
    				_credentialUid = value;
    				OnPropertyChanged(() => CredentialUid);
    			}
    		}
    	}
    	
    	private System.Guid _personUid;
    
    	[DataMember]
    	public System.Guid PersonUid
    	{ 
    		get { return _personUid; }
    		set
    		{
    			if (_personUid != value )
    			{
    				_personUid = value;
    				OnPropertyChanged(() => PersonUid);
    			}
    		}
    	}
    	
    	private System.Guid _personCredentialRoleUid;
    
    	[DataMember]
    	public System.Guid PersonCredentialRoleUid
    	{ 
    		get { return _personCredentialRoleUid; }
    		set
    		{
    			if (_personCredentialRoleUid != value )
    			{
    				_personCredentialRoleUid = value;
    				OnPropertyChanged(() => PersonCredentialRoleUid);
    			}
    		}
    	}
    	
    	private System.Guid _personActivationModeUid;
    
    	[DataMember]
    	public System.Guid PersonActivationModeUid
    	{ 
    		get { return _personActivationModeUid; }
    		set
    		{
    			if (_personActivationModeUid != value )
    			{
    				_personActivationModeUid = value;
    				OnPropertyChanged(() => PersonActivationModeUid);
    			}
    		}
    	}
    	
    	private System.Guid _personExpirationModeUid;
    
    	[DataMember]
    	public System.Guid PersonExpirationModeUid
    	{ 
    		get { return _personExpirationModeUid; }
    		set
    		{
    			if (_personExpirationModeUid != value )
    			{
    				_personExpirationModeUid = value;
    				OnPropertyChanged(() => PersonExpirationModeUid);
    			}
    		}
    	}
    	
    	private System.Guid _badgeTemplateUid;
    
    	[DataMember]
    	public System.Guid BadgeTemplateUid
    	{ 
    		get { return _badgeTemplateUid; }
    		set
    		{
    			if (_badgeTemplateUid != value )
    			{
    				_badgeTemplateUid = value;
    				OnPropertyChanged(() => BadgeTemplateUid);
    			}
    		}
    	}
    	
    	private System.Guid _dossierBadgeTemplateUid;
    
    	[DataMember]
    	public System.Guid DossierBadgeTemplateUid
    	{ 
    		get { return _dossierBadgeTemplateUid; }
    		set
    		{
    			if (_dossierBadgeTemplateUid != value )
    			{
    				_dossierBadgeTemplateUid = value;
    				OnPropertyChanged(() => DossierBadgeTemplateUid);
    			}
    		}
    	}
    	
    	private System.Guid _accessPortalNoServerReplyBehaviorUid;
    
    	[DataMember]
    	public System.Guid AccessPortalNoServerReplyBehaviorUid
    	{ 
    		get { return _accessPortalNoServerReplyBehaviorUid; }
    		set
    		{
    			if (_accessPortalNoServerReplyBehaviorUid != value )
    			{
    				_accessPortalNoServerReplyBehaviorUid = value;
    				OnPropertyChanged(() => AccessPortalNoServerReplyBehaviorUid);
    			}
    		}
    	}
    	
    	private System.Guid _accessPortalDeferToServerBehaviorUid;
    
    	[DataMember]
    	public System.Guid AccessPortalDeferToServerBehaviorUid
    	{ 
    		get { return _accessPortalDeferToServerBehaviorUid; }
    		set
    		{
    			if (_accessPortalDeferToServerBehaviorUid != value )
    			{
    				_accessPortalDeferToServerBehaviorUid = value;
    				OnPropertyChanged(() => AccessPortalDeferToServerBehaviorUid);
    			}
    		}
    	}
    	
    	private string _credentialDescription;
    
    	[DataMember]
    	public string CredentialDescription
    	{ 
    		get { return _credentialDescription; }
    		set
    		{
    			if (_credentialDescription != value )
    			{
    				_credentialDescription = value;
    				OnPropertyChanged(() => CredentialDescription);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _activationDateTime;
    
    	[DataMember]
    	public Nullable<System.DateTime> ActivationDateTime
    	{ 
    		get { return _activationDateTime; }
    		set
    		{
    			if (_activationDateTime != value )
    			{
    				_activationDateTime = value;
    				OnPropertyChanged(() => ActivationDateTime);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _expirationDateTime;
    
    	[DataMember]
    	public Nullable<System.DateTime> ExpirationDateTime
    	{ 
    		get { return _expirationDateTime; }
    		set
    		{
    			if (_expirationDateTime != value )
    			{
    				_expirationDateTime = value;
    				OnPropertyChanged(() => ExpirationDateTime);
    			}
    		}
    	}
    	
    	private short _usageCount;
    
    	[DataMember]
    	public short UsageCount
    	{ 
    		get { return _usageCount; }
    		set
    		{
    			if (_usageCount != value )
    			{
    				_usageCount = value;
    				OnPropertyChanged(() => UsageCount);
    			}
    		}
    	}
    	
    	private bool _traceEnabled;
    
    	[DataMember]
    	public bool TraceEnabled
    	{ 
    		get { return _traceEnabled; }
    		set
    		{
    			if (_traceEnabled != value )
    			{
    				_traceEnabled = value;
    				OnPropertyChanged(() => TraceEnabled);
    			}
    		}
    	}
    	
    	private bool _duressEnabled;
    
    	[DataMember]
    	public bool DuressEnabled
    	{ 
    		get { return _duressEnabled; }
    		set
    		{
    			if (_duressEnabled != value )
    			{
    				_duressEnabled = value;
    				OnPropertyChanged(() => DuressEnabled);
    			}
    		}
    	}
    	
    	private bool _reverseBits;
    
    	[DataMember]
    	public bool ReverseBits
    	{ 
    		get { return _reverseBits; }
    		set
    		{
    			if (_reverseBits != value )
    			{
    				_reverseBits = value;
    				OnPropertyChanged(() => ReverseBits);
    			}
    		}
    	}
    	
    	private Nullable<short> _biometricEnrollmentStatus;
    
    	[DataMember]
    	public Nullable<short> BiometricEnrollmentStatus
    	{ 
    		get { return _biometricEnrollmentStatus; }
    		set
    		{
    			if (_biometricEnrollmentStatus != value )
    			{
    				_biometricEnrollmentStatus = value;
    				OnPropertyChanged(() => BiometricEnrollmentStatus);
    			}
    		}
    	}
    	
    	private Nullable<int> _badgePrintLimit;
    
    	[DataMember]
    	public Nullable<int> BadgePrintLimit
    	{ 
    		get { return _badgePrintLimit; }
    		set
    		{
    			if (_badgePrintLimit != value )
    			{
    				_badgePrintLimit = value;
    				OnPropertyChanged(() => BadgePrintLimit);
    			}
    		}
    	}
    	
    	private Nullable<int> _badgePrintCount;
    
    	[DataMember]
    	public Nullable<int> BadgePrintCount
    	{ 
    		get { return _badgePrintCount; }
    		set
    		{
    			if (_badgePrintCount != value )
    			{
    				_badgePrintCount = value;
    				OnPropertyChanged(() => BadgePrintCount);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _badgeLastPrinted;
    
    	[DataMember]
    	public Nullable<System.DateTime> BadgeLastPrinted
    	{ 
    		get { return _badgeLastPrinted; }
    		set
    		{
    			if (_badgeLastPrinted != value )
    			{
    				_badgeLastPrinted = value;
    				OnPropertyChanged(() => BadgeLastPrinted);
    			}
    		}
    	}
    	
    	private Nullable<int> _dossierPrintLimit;
    
    	[DataMember]
    	public Nullable<int> DossierPrintLimit
    	{ 
    		get { return _dossierPrintLimit; }
    		set
    		{
    			if (_dossierPrintLimit != value )
    			{
    				_dossierPrintLimit = value;
    				OnPropertyChanged(() => DossierPrintLimit);
    			}
    		}
    	}
    	
    	private Nullable<int> _dossierPrintCount;
    
    	[DataMember]
    	public Nullable<int> DossierPrintCount
    	{ 
    		get { return _dossierPrintCount; }
    		set
    		{
    			if (_dossierPrintCount != value )
    			{
    				_dossierPrintCount = value;
    				OnPropertyChanged(() => DossierPrintCount);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _dossierLastPrinted;
    
    	[DataMember]
    	public Nullable<System.DateTime> DossierLastPrinted
    	{ 
    		get { return _dossierLastPrinted; }
    		set
    		{
    			if (_dossierLastPrinted != value )
    			{
    				_dossierLastPrinted = value;
    				OnPropertyChanged(() => DossierLastPrinted);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    	
    	private bool _isActive;
    
    	[DataMember]
    	public bool IsActive
    	{ 
    		get { return _isActive; }
    		set
    		{
    			if (_isActive != value )
    			{
    				_isActive = value;
    				OnPropertyChanged(() => IsActive);
    			}
    		}
    	}
    	
    	private Nullable<short> _sysGalCardId;
    
    	[DataMember]
    	public Nullable<short> SysGalCardId
    	{ 
    		get { return _sysGalCardId; }
    		set
    		{
    			if (_sysGalCardId != value )
    			{
    				_sysGalCardId = value;
    				OnPropertyChanged(() => SysGalCardId);
    			}
    		}
    	}
    
    	
    	private ICollection<PersonClusterPermission> _personClusterPermissions;
    
    	[DataMember]
    	public virtual ICollection<PersonClusterPermission> PersonClusterPermissions
    	{ 
    		get { return _personClusterPermissions; }
    		set
    		{
    			if (_personClusterPermissions != value )
    			{
    				_personClusterPermissions = value;
    				OnPropertyChanged(() => PersonClusterPermissions);
    			}
    		}
    	}
    	
    	private ICollection<PersonCredentialCommandScript> _personCredentialCommandScripts;
    
    	[DataMember]
    	public virtual ICollection<PersonCredentialCommandScript> PersonCredentialCommandScripts
    	{ 
    		get { return _personCredentialCommandScripts; }
    		set
    		{
    			if (_personCredentialCommandScripts != value )
    			{
    				_personCredentialCommandScripts = value;
    				OnPropertyChanged(() => PersonCredentialCommandScripts);
    			}
    		}
    	}
    }
    
}
