//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class gcsApplication : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class gcsApplication
        {
        	public gcsApplication() : base()
        	{
        		Initialize();
        	}
        
        	public gcsApplication(gcsApplication e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        		this.gcsUserSettings = new HashSet<gcsUserSetting>();
        		this.gcsEntityApplications = new HashSet<gcsEntityApplication>();
        		this.gcsPermissionCategories = new HashSet<gcsPermissionCategory>();
        		this.gcsUserSessions = new HashSet<gcsUserSession>();
        }
        
        	public void Initialize(gcsApplication e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.ApplicationId = e.ApplicationId;
        		this.LanguageId = e.LanguageId;
        		this.SystemRoleId = e.SystemRoleId;
        		this.ApplicationName = e.ApplicationName;
        		this.ApplicationDescription = e.ApplicationDescription;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.Code = e.Code;
        		this.gcsUserSettings = e.gcsUserSettings.ToCollection();
        		this.gcsEntityApplications = e.gcsEntityApplications.ToCollection();
        		this.gcsPermissionCategories = e.gcsPermissionCategories.ToCollection();
        		this.gcsUserSessions = e.gcsUserSessions.ToCollection();
        		
        	}
        
        	public gcsApplication Clone(gcsApplication e)
        	{
        		return new gcsApplication(e);
        	}
        
        	public bool Equals(gcsApplication other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(gcsApplication other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.ApplicationId != this.ApplicationId )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _applicationId;
    
    	[DataMember]
    	public System.Guid ApplicationId
    	{ 
    		get { return _applicationId; }
    		set
    		{
    			if (_applicationId != value )
    			{
    				_applicationId = value;
    				OnPropertyChanged(() => ApplicationId);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _languageId;
    
    	[DataMember]
    	public Nullable<System.Guid> LanguageId
    	{ 
    		get { return _languageId; }
    		set
    		{
    			if (_languageId != value )
    			{
    				_languageId = value;
    				OnPropertyChanged(() => LanguageId);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _systemRoleId;
    
    	[DataMember]
    	public Nullable<System.Guid> SystemRoleId
    	{ 
    		get { return _systemRoleId; }
    		set
    		{
    			if (_systemRoleId != value )
    			{
    				_systemRoleId = value;
    				OnPropertyChanged(() => SystemRoleId);
    			}
    		}
    	}
    	
    	private string _applicationName;
    
    	[DataMember]
    	public string ApplicationName
    	{ 
    		get { return _applicationName; }
    		set
    		{
    			if (_applicationName != value )
    			{
    				_applicationName = value;
    				OnPropertyChanged(() => ApplicationName);
    			}
    		}
    	}
    	
    	private string _applicationDescription;
    
    	[DataMember]
    	public string ApplicationDescription
    	{ 
    		get { return _applicationDescription; }
    		set
    		{
    			if (_applicationDescription != value )
    			{
    				_applicationDescription = value;
    				OnPropertyChanged(() => ApplicationDescription);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    	
    	private string _code;
    
    	[DataMember]
    	public string Code
    	{ 
    		get { return _code; }
    		set
    		{
    			if (_code != value )
    			{
    				_code = value;
    				OnPropertyChanged(() => Code);
    			}
    		}
    	}
    
    	
    	private ICollection<gcsUserSetting> _gcsUserSettings;
    
    	[DataMember]
    	public virtual ICollection<gcsUserSetting> gcsUserSettings
    	{ 
    		get { return _gcsUserSettings; }
    		set
    		{
    			if (_gcsUserSettings != value )
    			{
    				_gcsUserSettings = value;
    				OnPropertyChanged(() => gcsUserSettings);
    			}
    		}
    	}
    	
    	private ICollection<gcsEntityApplication> _gcsEntityApplications;
    
    	[DataMember]
    	public virtual ICollection<gcsEntityApplication> gcsEntityApplications
    	{ 
    		get { return _gcsEntityApplications; }
    		set
    		{
    			if (_gcsEntityApplications != value )
    			{
    				_gcsEntityApplications = value;
    				OnPropertyChanged(() => gcsEntityApplications);
    			}
    		}
    	}
    	
    	private ICollection<gcsPermissionCategory> _gcsPermissionCategories;
    
    	[DataMember]
    	public virtual ICollection<gcsPermissionCategory> gcsPermissionCategories
    	{ 
    		get { return _gcsPermissionCategories; }
    		set
    		{
    			if (_gcsPermissionCategories != value )
    			{
    				_gcsPermissionCategories = value;
    				OnPropertyChanged(() => gcsPermissionCategories);
    			}
    		}
    	}
    	
    	private ICollection<gcsUserSession> _gcsUserSessions;
    
    	[DataMember]
    	public virtual ICollection<gcsUserSession> gcsUserSessions
    	{ 
    		get { return _gcsUserSessions; }
    		set
    		{
    			if (_gcsUserSessions != value )
    			{
    				_gcsUserSessions = value;
    				OnPropertyChanged(() => gcsUserSessions);
    			}
    		}
    	}
    }
    
}
