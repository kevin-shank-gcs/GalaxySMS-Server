//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class AccessPortalAuxiliaryOutput : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class AccessPortalAuxiliaryOutput
        {
        	public AccessPortalAuxiliaryOutput() : base()
        	{
        		Initialize();
        	}
        
        	public AccessPortalAuxiliaryOutput(AccessPortalAuxiliaryOutput e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        		this.AccessPortalAuxiliaryOutputTriggeringEvents = new HashSet<AccessPortalAuxiliaryOutputTriggeringEvent>();
        }
        
        	public void Initialize(AccessPortalAuxiliaryOutput e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.AccessPortalAuxiliaryOutputUid = e.AccessPortalAuxiliaryOutputUid;
        		this.AccessPortalUid = e.AccessPortalUid;
        		this.AccessPortalAuxiliaryOutputModeUid = e.AccessPortalAuxiliaryOutputModeUid;
        		this.TimeScheduleUid = e.TimeScheduleUid;
        		this.Description = e.Description;
        		this.Tag = e.Tag;
        		this.ActivationDelay = e.ActivationDelay;
        		this.ActivationDuration = e.ActivationDuration;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.IllegalOpen = e.IllegalOpen;
        		this.OpenTooLong = e.OpenTooLong;
        		this.InvalidAttempt = e.InvalidAttempt;
        		this.AccessGranted = e.AccessGranted;
        		this.Duress = e.Duress;
        		this.PassbackViolation = e.PassbackViolation;
        		this.AccessPortalAuxiliaryOutputTriggeringEvents = e.AccessPortalAuxiliaryOutputTriggeringEvents.ToCollection();
        		
        	}
        
        	public AccessPortalAuxiliaryOutput Clone(AccessPortalAuxiliaryOutput e)
        	{
        		return new AccessPortalAuxiliaryOutput(e);
        	}
        
        	public bool Equals(AccessPortalAuxiliaryOutput other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(AccessPortalAuxiliaryOutput other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.AccessPortalAuxiliaryOutputUid != this.AccessPortalAuxiliaryOutputUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _accessPortalAuxiliaryOutputUid;
    
    	[DataMember]
    	public System.Guid AccessPortalAuxiliaryOutputUid
    	{ 
    		get { return _accessPortalAuxiliaryOutputUid; }
    		set
    		{
    			if (_accessPortalAuxiliaryOutputUid != value )
    			{
    				_accessPortalAuxiliaryOutputUid = value;
    				OnPropertyChanged(() => AccessPortalAuxiliaryOutputUid);
    			}
    		}
    	}
    	
    	private System.Guid _accessPortalUid;
    
    	[DataMember]
    	public System.Guid AccessPortalUid
    	{ 
    		get { return _accessPortalUid; }
    		set
    		{
    			if (_accessPortalUid != value )
    			{
    				_accessPortalUid = value;
    				OnPropertyChanged(() => AccessPortalUid);
    			}
    		}
    	}
    	
    	private System.Guid _accessPortalAuxiliaryOutputModeUid;
    
    	[DataMember]
    	public System.Guid AccessPortalAuxiliaryOutputModeUid
    	{ 
    		get { return _accessPortalAuxiliaryOutputModeUid; }
    		set
    		{
    			if (_accessPortalAuxiliaryOutputModeUid != value )
    			{
    				_accessPortalAuxiliaryOutputModeUid = value;
    				OnPropertyChanged(() => AccessPortalAuxiliaryOutputModeUid);
    			}
    		}
    	}
    	
    	private System.Guid _timeScheduleUid;
    
    	[DataMember]
    	public System.Guid TimeScheduleUid
    	{ 
    		get { return _timeScheduleUid; }
    		set
    		{
    			if (_timeScheduleUid != value )
    			{
    				_timeScheduleUid = value;
    				OnPropertyChanged(() => TimeScheduleUid);
    			}
    		}
    	}
    	
    	private string _description;
    
    	[DataMember]
    	public string Description
    	{ 
    		get { return _description; }
    		set
    		{
    			if (_description != value )
    			{
    				_description = value;
    				OnPropertyChanged(() => Description);
    			}
    		}
    	}
    	
    	private string _tag;
    
    	[DataMember]
    	public string Tag
    	{ 
    		get { return _tag; }
    		set
    		{
    			if (_tag != value )
    			{
    				_tag = value;
    				OnPropertyChanged(() => Tag);
    			}
    		}
    	}
    	
    	private int _activationDelay;
    
    	[DataMember]
    	public int ActivationDelay
    	{ 
    		get { return _activationDelay; }
    		set
    		{
    			if (_activationDelay != value )
    			{
    				_activationDelay = value;
    				OnPropertyChanged(() => ActivationDelay);
    			}
    		}
    	}
    	
    	private int _activationDuration;
    
    	[DataMember]
    	public int ActivationDuration
    	{ 
    		get { return _activationDuration; }
    		set
    		{
    			if (_activationDuration != value )
    			{
    				_activationDuration = value;
    				OnPropertyChanged(() => ActivationDuration);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    	
    	private bool _illegalOpen;
    
    	[DataMember]
    	public bool IllegalOpen
    	{ 
    		get { return _illegalOpen; }
    		set
    		{
    			if (_illegalOpen != value )
    			{
    				_illegalOpen = value;
    				OnPropertyChanged(() => IllegalOpen);
    			}
    		}
    	}
    	
    	private bool _openTooLong;
    
    	[DataMember]
    	public bool OpenTooLong
    	{ 
    		get { return _openTooLong; }
    		set
    		{
    			if (_openTooLong != value )
    			{
    				_openTooLong = value;
    				OnPropertyChanged(() => OpenTooLong);
    			}
    		}
    	}
    	
    	private bool _invalidAttempt;
    
    	[DataMember]
    	public bool InvalidAttempt
    	{ 
    		get { return _invalidAttempt; }
    		set
    		{
    			if (_invalidAttempt != value )
    			{
    				_invalidAttempt = value;
    				OnPropertyChanged(() => InvalidAttempt);
    			}
    		}
    	}
    	
    	private bool _accessGranted;
    
    	[DataMember]
    	public bool AccessGranted
    	{ 
    		get { return _accessGranted; }
    		set
    		{
    			if (_accessGranted != value )
    			{
    				_accessGranted = value;
    				OnPropertyChanged(() => AccessGranted);
    			}
    		}
    	}
    	
    	private bool _duress;
    
    	[DataMember]
    	public bool Duress
    	{ 
    		get { return _duress; }
    		set
    		{
    			if (_duress != value )
    			{
    				_duress = value;
    				OnPropertyChanged(() => Duress);
    			}
    		}
    	}
    	
    	private bool _passbackViolation;
    
    	[DataMember]
    	public bool PassbackViolation
    	{ 
    		get { return _passbackViolation; }
    		set
    		{
    			if (_passbackViolation != value )
    			{
    				_passbackViolation = value;
    				OnPropertyChanged(() => PassbackViolation);
    			}
    		}
    	}
    
    	
    	private AccessPortal _accessPortal;
    
    	[DataMember]
    	public virtual AccessPortal AccessPortal
    	{ 
    		get { return _accessPortal; }
    		set
    		{
    			if (_accessPortal != value )
    			{
    				_accessPortal = value;
    				OnPropertyChanged(() => AccessPortal);
    			}
    		}
    	}
    	
    	private AccessPortalAuxiliaryOutputMode _accessPortalAuxiliaryOutputMode;
    
    	[DataMember]
    	public virtual AccessPortalAuxiliaryOutputMode AccessPortalAuxiliaryOutputMode
    	{ 
    		get { return _accessPortalAuxiliaryOutputMode; }
    		set
    		{
    			if (_accessPortalAuxiliaryOutputMode != value )
    			{
    				_accessPortalAuxiliaryOutputMode = value;
    				OnPropertyChanged(() => AccessPortalAuxiliaryOutputMode);
    			}
    		}
    	}
    	
    	private ICollection<AccessPortalAuxiliaryOutputTriggeringEvent> _accessPortalAuxiliaryOutputTriggeringEvents;
    
    	[DataMember]
    	public virtual ICollection<AccessPortalAuxiliaryOutputTriggeringEvent> AccessPortalAuxiliaryOutputTriggeringEvents
    	{ 
    		get { return _accessPortalAuxiliaryOutputTriggeringEvents; }
    		set
    		{
    			if (_accessPortalAuxiliaryOutputTriggeringEvents != value )
    			{
    				_accessPortalAuxiliaryOutputTriggeringEvents = value;
    				OnPropertyChanged(() => AccessPortalAuxiliaryOutputTriggeringEvents);
    			}
    		}
    	}
    }
    
}
