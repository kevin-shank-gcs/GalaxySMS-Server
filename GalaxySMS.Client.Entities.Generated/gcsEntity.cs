//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class gcsEntity : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class gcsEntity
        {
        	public gcsEntity() : base()
        	{
        		Initialize();
        	}
        
        	public gcsEntity(gcsEntity e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        		this.gcsUserEntities = new HashSet<gcsUserEntity>();
        		this.gcsEntityApplications = new HashSet<gcsEntityApplication>();
        		this.Regions = new HashSet<Region>();
        		this.AccessPortalEntityMaps = new HashSet<AccessPortalEntityMap>();
        		this.RegionEntityMaps = new HashSet<RegionEntityMap>();
        		this.SiteEntityMaps = new HashSet<SiteEntityMap>();
        		this.TimeSchedules = new HashSet<TimeSchedule>();
        		this.TimeScheduleEntityMaps = new HashSet<TimeScheduleEntityMap>();
        		this.AssaDsrEntityMaps = new HashSet<AssaDsrEntityMap>();
        		this.AssaDayPeriods = new HashSet<AssaDayPeriod>();
        		this.AssaDayPeriodEntityMaps = new HashSet<AssaDayPeriodEntityMap>();
        		this.DateTypeEntityMaps = new HashSet<DateTypeEntityMap>();
        		this.DayTypes = new HashSet<DayType>();
        		this.DayTypeEntityMaps = new HashSet<DayTypeEntityMap>();
        		this.TimePeriods = new HashSet<TimePeriod>();
        		this.TimePeriodEntityMaps = new HashSet<TimePeriodEntityMap>();
        		this.AccessGroupEntityMaps = new HashSet<AccessGroupEntityMap>();
        		this.AreaEntityMaps = new HashSet<AreaEntityMap>();
        		this.InputOutputGroupEntityMaps = new HashSet<InputOutputGroupEntityMap>();
        		this.ClusterEntityMaps = new HashSet<ClusterEntityMap>();
        		this.AccessGroups = new HashSet<AccessGroup>();
        		this.Areas = new HashSet<Area>();
        		this.InputOutputGroups = new HashSet<InputOutputGroup>();
        		this.InputDeviceEntityMaps = new HashSet<InputDeviceEntityMap>();
        		this.OutputDeviceEntityMaps = new HashSet<OutputDeviceEntityMap>();
        		this.LiquidCrystalDisplayEntityMaps = new HashSet<LiquidCrystalDisplayEntityMap>();
        		this.GalaxyTimePeriods = new HashSet<GalaxyTimePeriod>();
        		this.GalaxyTimePeriodEntityMaps = new HashSet<GalaxyTimePeriodEntityMap>();
        		this.DateTypeDefaultBehaviors = new HashSet<DateTypeDefaultBehavior>();
        		this.BadgeTemplates = new HashSet<BadgeTemplate>();
        		this.BadgeTemplateEntityMaps = new HashSet<BadgeTemplateEntityMap>();
        		this.Departments = new HashSet<Department>();
        		this.UserDefinedPropertyEntityMaps = new HashSet<UserDefinedPropertyEntityMap>();
        		this.Genders = new HashSet<Gender>();
        		this.PersonRecordTypes = new HashSet<PersonRecordType>();
        		this.PersonActiveStatusTypes = new HashSet<PersonActiveStatusType>();
        		this.UserDefinedProperties = new HashSet<UserDefinedProperty>();
        		this.AccessProfiles = new HashSet<AccessProfile>();
        		this.AccessProfileEntityMaps = new HashSet<AccessProfileEntityMap>();
        		this.CommandScripts = new HashSet<CommandScript>();
        		this.CredentialFormatEntities = new HashSet<CredentialFormatEntity>();
        		this.People = new HashSet<Person>();
        		this.CredentialFormatEntityMaps = new HashSet<CredentialFormatEntityMap>();
        		this.PersonEntityMaps = new HashSet<PersonEntityMap>();
        		this.gcsSettings = new HashSet<gcsSetting>();
        		this.AcknowledgeAlarmPredefinedResponses = new HashSet<AcknowledgeAlarmPredefinedResponse>();
        		this.gcsLargeObjectStorages = new HashSet<gcsLargeObjectStorage>();
        		this.gcsEntityCounts = new HashSet<gcsEntityCount>();
        		this.MercScpGroups = new HashSet<MercScpGroup>();
        }
        
        	public void Initialize(gcsEntity e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.EntityId = e.EntityId;
        		this.ImageBinaryResourceUid = e.ImageBinaryResourceUid;
        		this.EntityName = e.EntityName;
        		this.EntityDescription = e.EntityDescription;
        		this.EntityKey = e.EntityKey;
        		this.IsDefault = e.IsDefault;
        		this.IsActive = e.IsActive;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.License = e.License;
        		this.BinaryResourceUid = e.BinaryResourceUid;
        		this.ParentEntityId = e.ParentEntityId;
        		this.PublicKey = e.PublicKey;
        		this.EntityType = e.EntityType;
        		this.AutoMapTimeSchedules = e.AutoMapTimeSchedules;
        		this.ClusterGroupId = e.ClusterGroupId;
        		this.TimeZoneId = e.TimeZoneId;
        		this.gcsUserEntities = e.gcsUserEntities.ToCollection();
        		this.gcsEntityApplications = e.gcsEntityApplications.ToCollection();
        		this.Regions = e.Regions.ToCollection();
        		this.AccessPortalEntityMaps = e.AccessPortalEntityMaps.ToCollection();
        		this.RegionEntityMaps = e.RegionEntityMaps.ToCollection();
        		this.SiteEntityMaps = e.SiteEntityMaps.ToCollection();
        		this.TimeSchedules = e.TimeSchedules.ToCollection();
        		this.TimeScheduleEntityMaps = e.TimeScheduleEntityMaps.ToCollection();
        		this.AssaDsrEntityMaps = e.AssaDsrEntityMaps.ToCollection();
        		this.AssaDayPeriods = e.AssaDayPeriods.ToCollection();
        		this.AssaDayPeriodEntityMaps = e.AssaDayPeriodEntityMaps.ToCollection();
        		this.DateTypeEntityMaps = e.DateTypeEntityMaps.ToCollection();
        		this.DayTypes = e.DayTypes.ToCollection();
        		this.DayTypeEntityMaps = e.DayTypeEntityMaps.ToCollection();
        		this.TimePeriods = e.TimePeriods.ToCollection();
        		this.TimePeriodEntityMaps = e.TimePeriodEntityMaps.ToCollection();
        		this.AccessGroupEntityMaps = e.AccessGroupEntityMaps.ToCollection();
        		this.AreaEntityMaps = e.AreaEntityMaps.ToCollection();
        		this.InputOutputGroupEntityMaps = e.InputOutputGroupEntityMaps.ToCollection();
        		this.ClusterEntityMaps = e.ClusterEntityMaps.ToCollection();
        		this.AccessGroups = e.AccessGroups.ToCollection();
        		this.Areas = e.Areas.ToCollection();
        		this.InputOutputGroups = e.InputOutputGroups.ToCollection();
        		this.InputDeviceEntityMaps = e.InputDeviceEntityMaps.ToCollection();
        		this.OutputDeviceEntityMaps = e.OutputDeviceEntityMaps.ToCollection();
        		this.LiquidCrystalDisplayEntityMaps = e.LiquidCrystalDisplayEntityMaps.ToCollection();
        		this.GalaxyTimePeriods = e.GalaxyTimePeriods.ToCollection();
        		this.GalaxyTimePeriodEntityMaps = e.GalaxyTimePeriodEntityMaps.ToCollection();
        		this.DateTypeDefaultBehaviors = e.DateTypeDefaultBehaviors.ToCollection();
        		this.BadgeTemplates = e.BadgeTemplates.ToCollection();
        		this.BadgeTemplateEntityMaps = e.BadgeTemplateEntityMaps.ToCollection();
        		this.Departments = e.Departments.ToCollection();
        		this.UserDefinedPropertyEntityMaps = e.UserDefinedPropertyEntityMaps.ToCollection();
        		this.Genders = e.Genders.ToCollection();
        		this.PersonRecordTypes = e.PersonRecordTypes.ToCollection();
        		this.PersonActiveStatusTypes = e.PersonActiveStatusTypes.ToCollection();
        		this.UserDefinedProperties = e.UserDefinedProperties.ToCollection();
        		this.AccessProfiles = e.AccessProfiles.ToCollection();
        		this.AccessProfileEntityMaps = e.AccessProfileEntityMaps.ToCollection();
        		this.CommandScripts = e.CommandScripts.ToCollection();
        		this.CredentialFormatEntities = e.CredentialFormatEntities.ToCollection();
        		this.People = e.People.ToCollection();
        		this.CredentialFormatEntityMaps = e.CredentialFormatEntityMaps.ToCollection();
        		this.PersonEntityMaps = e.PersonEntityMaps.ToCollection();
        		this.gcsSettings = e.gcsSettings.ToCollection();
        		this.AcknowledgeAlarmPredefinedResponses = e.AcknowledgeAlarmPredefinedResponses.ToCollection();
        		this.gcsLargeObjectStorages = e.gcsLargeObjectStorages.ToCollection();
        		this.gcsEntityCounts = e.gcsEntityCounts.ToCollection();
        		this.MercScpGroups = e.MercScpGroups.ToCollection();
        		
        	}
        
        	public gcsEntity Clone(gcsEntity e)
        	{
        		return new gcsEntity(e);
        	}
        
        	public bool Equals(gcsEntity other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(gcsEntity other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.EntityId != this.EntityId )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _entityId;
    
    	[DataMember]
    	public System.Guid EntityId
    	{ 
    		get { return _entityId; }
    		set
    		{
    			if (_entityId != value )
    			{
    				_entityId = value;
    				OnPropertyChanged(() => EntityId);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _imageBinaryResourceUid;
    
    	[DataMember]
    	public Nullable<System.Guid> ImageBinaryResourceUid
    	{ 
    		get { return _imageBinaryResourceUid; }
    		set
    		{
    			if (_imageBinaryResourceUid != value )
    			{
    				_imageBinaryResourceUid = value;
    				OnPropertyChanged(() => ImageBinaryResourceUid);
    			}
    		}
    	}
    	
    	private string _entityName;
    
    	[DataMember]
    	public string EntityName
    	{ 
    		get { return _entityName; }
    		set
    		{
    			if (_entityName != value )
    			{
    				_entityName = value;
    				OnPropertyChanged(() => EntityName);
    			}
    		}
    	}
    	
    	private string _entityDescription;
    
    	[DataMember]
    	public string EntityDescription
    	{ 
    		get { return _entityDescription; }
    		set
    		{
    			if (_entityDescription != value )
    			{
    				_entityDescription = value;
    				OnPropertyChanged(() => EntityDescription);
    			}
    		}
    	}
    	
    	private string _entityKey;
    
    	[DataMember]
    	public string EntityKey
    	{ 
    		get { return _entityKey; }
    		set
    		{
    			if (_entityKey != value )
    			{
    				_entityKey = value;
    				OnPropertyChanged(() => EntityKey);
    			}
    		}
    	}
    	
    	private bool _isDefault;
    
    	[DataMember]
    	public bool IsDefault
    	{ 
    		get { return _isDefault; }
    		set
    		{
    			if (_isDefault != value )
    			{
    				_isDefault = value;
    				OnPropertyChanged(() => IsDefault);
    			}
    		}
    	}
    	
    	private bool _isActive;
    
    	[DataMember]
    	public bool IsActive
    	{ 
    		get { return _isActive; }
    		set
    		{
    			if (_isActive != value )
    			{
    				_isActive = value;
    				OnPropertyChanged(() => IsActive);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    	
    	private string _license;
    
    	[DataMember]
    	public string License
    	{ 
    		get { return _license; }
    		set
    		{
    			if (_license != value )
    			{
    				_license = value;
    				OnPropertyChanged(() => License);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _binaryResourceUid;
    
    	[DataMember]
    	public Nullable<System.Guid> BinaryResourceUid
    	{ 
    		get { return _binaryResourceUid; }
    		set
    		{
    			if (_binaryResourceUid != value )
    			{
    				_binaryResourceUid = value;
    				OnPropertyChanged(() => BinaryResourceUid);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _parentEntityId;
    
    	[DataMember]
    	public Nullable<System.Guid> ParentEntityId
    	{ 
    		get { return _parentEntityId; }
    		set
    		{
    			if (_parentEntityId != value )
    			{
    				_parentEntityId = value;
    				OnPropertyChanged(() => ParentEntityId);
    			}
    		}
    	}
    	
    	private string _publicKey;
    
    	[DataMember]
    	public string PublicKey
    	{ 
    		get { return _publicKey; }
    		set
    		{
    			if (_publicKey != value )
    			{
    				_publicKey = value;
    				OnPropertyChanged(() => PublicKey);
    			}
    		}
    	}
    	
    	private string _entityType;
    
    	[DataMember]
    	public string EntityType
    	{ 
    		get { return _entityType; }
    		set
    		{
    			if (_entityType != value )
    			{
    				_entityType = value;
    				OnPropertyChanged(() => EntityType);
    			}
    		}
    	}
    	
    	private bool _autoMapTimeSchedules;
    
    	[DataMember]
    	public bool AutoMapTimeSchedules
    	{ 
    		get { return _autoMapTimeSchedules; }
    		set
    		{
    			if (_autoMapTimeSchedules != value )
    			{
    				_autoMapTimeSchedules = value;
    				OnPropertyChanged(() => AutoMapTimeSchedules);
    			}
    		}
    	}
    	
    	private int _clusterGroupId;
    
    	[DataMember]
    	public int ClusterGroupId
    	{ 
    		get { return _clusterGroupId; }
    		set
    		{
    			if (_clusterGroupId != value )
    			{
    				_clusterGroupId = value;
    				OnPropertyChanged(() => ClusterGroupId);
    			}
    		}
    	}
    	
    	private string _timeZoneId;
    
    	[DataMember]
    	public string TimeZoneId
    	{ 
    		get { return _timeZoneId; }
    		set
    		{
    			if (_timeZoneId != value )
    			{
    				_timeZoneId = value;
    				OnPropertyChanged(() => TimeZoneId);
    			}
    		}
    	}
    
    	
    	private ICollection<gcsUserEntity> _gcsUserEntities;
    
    	[DataMember]
    	public virtual ICollection<gcsUserEntity> gcsUserEntities
    	{ 
    		get { return _gcsUserEntities; }
    		set
    		{
    			if (_gcsUserEntities != value )
    			{
    				_gcsUserEntities = value;
    				OnPropertyChanged(() => gcsUserEntities);
    			}
    		}
    	}
    	
    	private ICollection<gcsEntityApplication> _gcsEntityApplications;
    
    	[DataMember]
    	public virtual ICollection<gcsEntityApplication> gcsEntityApplications
    	{ 
    		get { return _gcsEntityApplications; }
    		set
    		{
    			if (_gcsEntityApplications != value )
    			{
    				_gcsEntityApplications = value;
    				OnPropertyChanged(() => gcsEntityApplications);
    			}
    		}
    	}
    	
    	private gcsBinaryResource _gcsBinaryResource;
    
    	[DataMember]
    	public virtual gcsBinaryResource gcsBinaryResource
    	{ 
    		get { return _gcsBinaryResource; }
    		set
    		{
    			if (_gcsBinaryResource != value )
    			{
    				_gcsBinaryResource = value;
    				OnPropertyChanged(() => gcsBinaryResource);
    			}
    		}
    	}
    	
    	private ICollection<Region> _regions;
    
    	[DataMember]
    	public virtual ICollection<Region> Regions
    	{ 
    		get { return _regions; }
    		set
    		{
    			if (_regions != value )
    			{
    				_regions = value;
    				OnPropertyChanged(() => Regions);
    			}
    		}
    	}
    	
    	private gcsBinaryResource _gcsBinaryResource1;
    
    	[DataMember]
    	public virtual gcsBinaryResource gcsBinaryResource1
    	{ 
    		get { return _gcsBinaryResource1; }
    		set
    		{
    			if (_gcsBinaryResource1 != value )
    			{
    				_gcsBinaryResource1 = value;
    				OnPropertyChanged(() => gcsBinaryResource1);
    			}
    		}
    	}
    	
    	private ICollection<AccessPortalEntityMap> _accessPortalEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<AccessPortalEntityMap> AccessPortalEntityMaps
    	{ 
    		get { return _accessPortalEntityMaps; }
    		set
    		{
    			if (_accessPortalEntityMaps != value )
    			{
    				_accessPortalEntityMaps = value;
    				OnPropertyChanged(() => AccessPortalEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<RegionEntityMap> _regionEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<RegionEntityMap> RegionEntityMaps
    	{ 
    		get { return _regionEntityMaps; }
    		set
    		{
    			if (_regionEntityMaps != value )
    			{
    				_regionEntityMaps = value;
    				OnPropertyChanged(() => RegionEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<SiteEntityMap> _siteEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<SiteEntityMap> SiteEntityMaps
    	{ 
    		get { return _siteEntityMaps; }
    		set
    		{
    			if (_siteEntityMaps != value )
    			{
    				_siteEntityMaps = value;
    				OnPropertyChanged(() => SiteEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<TimeSchedule> _timeSchedules;
    
    	[DataMember]
    	public virtual ICollection<TimeSchedule> TimeSchedules
    	{ 
    		get { return _timeSchedules; }
    		set
    		{
    			if (_timeSchedules != value )
    			{
    				_timeSchedules = value;
    				OnPropertyChanged(() => TimeSchedules);
    			}
    		}
    	}
    	
    	private ICollection<TimeScheduleEntityMap> _timeScheduleEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<TimeScheduleEntityMap> TimeScheduleEntityMaps
    	{ 
    		get { return _timeScheduleEntityMaps; }
    		set
    		{
    			if (_timeScheduleEntityMaps != value )
    			{
    				_timeScheduleEntityMaps = value;
    				OnPropertyChanged(() => TimeScheduleEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<AssaDsrEntityMap> _assaDsrEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<AssaDsrEntityMap> AssaDsrEntityMaps
    	{ 
    		get { return _assaDsrEntityMaps; }
    		set
    		{
    			if (_assaDsrEntityMaps != value )
    			{
    				_assaDsrEntityMaps = value;
    				OnPropertyChanged(() => AssaDsrEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<AssaDayPeriod> _assaDayPeriods;
    
    	[DataMember]
    	public virtual ICollection<AssaDayPeriod> AssaDayPeriods
    	{ 
    		get { return _assaDayPeriods; }
    		set
    		{
    			if (_assaDayPeriods != value )
    			{
    				_assaDayPeriods = value;
    				OnPropertyChanged(() => AssaDayPeriods);
    			}
    		}
    	}
    	
    	private ICollection<AssaDayPeriodEntityMap> _assaDayPeriodEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<AssaDayPeriodEntityMap> AssaDayPeriodEntityMaps
    	{ 
    		get { return _assaDayPeriodEntityMaps; }
    		set
    		{
    			if (_assaDayPeriodEntityMaps != value )
    			{
    				_assaDayPeriodEntityMaps = value;
    				OnPropertyChanged(() => AssaDayPeriodEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<DateTypeEntityMap> _dateTypeEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<DateTypeEntityMap> DateTypeEntityMaps
    	{ 
    		get { return _dateTypeEntityMaps; }
    		set
    		{
    			if (_dateTypeEntityMaps != value )
    			{
    				_dateTypeEntityMaps = value;
    				OnPropertyChanged(() => DateTypeEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<DayType> _dayTypes;
    
    	[DataMember]
    	public virtual ICollection<DayType> DayTypes
    	{ 
    		get { return _dayTypes; }
    		set
    		{
    			if (_dayTypes != value )
    			{
    				_dayTypes = value;
    				OnPropertyChanged(() => DayTypes);
    			}
    		}
    	}
    	
    	private ICollection<DayTypeEntityMap> _dayTypeEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<DayTypeEntityMap> DayTypeEntityMaps
    	{ 
    		get { return _dayTypeEntityMaps; }
    		set
    		{
    			if (_dayTypeEntityMaps != value )
    			{
    				_dayTypeEntityMaps = value;
    				OnPropertyChanged(() => DayTypeEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<TimePeriod> _timePeriods;
    
    	[DataMember]
    	public virtual ICollection<TimePeriod> TimePeriods
    	{ 
    		get { return _timePeriods; }
    		set
    		{
    			if (_timePeriods != value )
    			{
    				_timePeriods = value;
    				OnPropertyChanged(() => TimePeriods);
    			}
    		}
    	}
    	
    	private ICollection<TimePeriodEntityMap> _timePeriodEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<TimePeriodEntityMap> TimePeriodEntityMaps
    	{ 
    		get { return _timePeriodEntityMaps; }
    		set
    		{
    			if (_timePeriodEntityMaps != value )
    			{
    				_timePeriodEntityMaps = value;
    				OnPropertyChanged(() => TimePeriodEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<AccessGroupEntityMap> _accessGroupEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<AccessGroupEntityMap> AccessGroupEntityMaps
    	{ 
    		get { return _accessGroupEntityMaps; }
    		set
    		{
    			if (_accessGroupEntityMaps != value )
    			{
    				_accessGroupEntityMaps = value;
    				OnPropertyChanged(() => AccessGroupEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<AreaEntityMap> _areaEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<AreaEntityMap> AreaEntityMaps
    	{ 
    		get { return _areaEntityMaps; }
    		set
    		{
    			if (_areaEntityMaps != value )
    			{
    				_areaEntityMaps = value;
    				OnPropertyChanged(() => AreaEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<InputOutputGroupEntityMap> _inputOutputGroupEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<InputOutputGroupEntityMap> InputOutputGroupEntityMaps
    	{ 
    		get { return _inputOutputGroupEntityMaps; }
    		set
    		{
    			if (_inputOutputGroupEntityMaps != value )
    			{
    				_inputOutputGroupEntityMaps = value;
    				OnPropertyChanged(() => InputOutputGroupEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<ClusterEntityMap> _clusterEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<ClusterEntityMap> ClusterEntityMaps
    	{ 
    		get { return _clusterEntityMaps; }
    		set
    		{
    			if (_clusterEntityMaps != value )
    			{
    				_clusterEntityMaps = value;
    				OnPropertyChanged(() => ClusterEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<AccessGroup> _accessGroups;
    
    	[DataMember]
    	public virtual ICollection<AccessGroup> AccessGroups
    	{ 
    		get { return _accessGroups; }
    		set
    		{
    			if (_accessGroups != value )
    			{
    				_accessGroups = value;
    				OnPropertyChanged(() => AccessGroups);
    			}
    		}
    	}
    	
    	private ICollection<Area> _areas;
    
    	[DataMember]
    	public virtual ICollection<Area> Areas
    	{ 
    		get { return _areas; }
    		set
    		{
    			if (_areas != value )
    			{
    				_areas = value;
    				OnPropertyChanged(() => Areas);
    			}
    		}
    	}
    	
    	private ICollection<InputOutputGroup> _inputOutputGroups;
    
    	[DataMember]
    	public virtual ICollection<InputOutputGroup> InputOutputGroups
    	{ 
    		get { return _inputOutputGroups; }
    		set
    		{
    			if (_inputOutputGroups != value )
    			{
    				_inputOutputGroups = value;
    				OnPropertyChanged(() => InputOutputGroups);
    			}
    		}
    	}
    	
    	private ICollection<InputDeviceEntityMap> _inputDeviceEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<InputDeviceEntityMap> InputDeviceEntityMaps
    	{ 
    		get { return _inputDeviceEntityMaps; }
    		set
    		{
    			if (_inputDeviceEntityMaps != value )
    			{
    				_inputDeviceEntityMaps = value;
    				OnPropertyChanged(() => InputDeviceEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<OutputDeviceEntityMap> _outputDeviceEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<OutputDeviceEntityMap> OutputDeviceEntityMaps
    	{ 
    		get { return _outputDeviceEntityMaps; }
    		set
    		{
    			if (_outputDeviceEntityMaps != value )
    			{
    				_outputDeviceEntityMaps = value;
    				OnPropertyChanged(() => OutputDeviceEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<LiquidCrystalDisplayEntityMap> _liquidCrystalDisplayEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<LiquidCrystalDisplayEntityMap> LiquidCrystalDisplayEntityMaps
    	{ 
    		get { return _liquidCrystalDisplayEntityMaps; }
    		set
    		{
    			if (_liquidCrystalDisplayEntityMaps != value )
    			{
    				_liquidCrystalDisplayEntityMaps = value;
    				OnPropertyChanged(() => LiquidCrystalDisplayEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<GalaxyTimePeriod> _galaxyTimePeriods;
    
    	[DataMember]
    	public virtual ICollection<GalaxyTimePeriod> GalaxyTimePeriods
    	{ 
    		get { return _galaxyTimePeriods; }
    		set
    		{
    			if (_galaxyTimePeriods != value )
    			{
    				_galaxyTimePeriods = value;
    				OnPropertyChanged(() => GalaxyTimePeriods);
    			}
    		}
    	}
    	
    	private ICollection<GalaxyTimePeriodEntityMap> _galaxyTimePeriodEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<GalaxyTimePeriodEntityMap> GalaxyTimePeriodEntityMaps
    	{ 
    		get { return _galaxyTimePeriodEntityMaps; }
    		set
    		{
    			if (_galaxyTimePeriodEntityMaps != value )
    			{
    				_galaxyTimePeriodEntityMaps = value;
    				OnPropertyChanged(() => GalaxyTimePeriodEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<DateTypeDefaultBehavior> _dateTypeDefaultBehaviors;
    
    	[DataMember]
    	public virtual ICollection<DateTypeDefaultBehavior> DateTypeDefaultBehaviors
    	{ 
    		get { return _dateTypeDefaultBehaviors; }
    		set
    		{
    			if (_dateTypeDefaultBehaviors != value )
    			{
    				_dateTypeDefaultBehaviors = value;
    				OnPropertyChanged(() => DateTypeDefaultBehaviors);
    			}
    		}
    	}
    	
    	private ICollection<BadgeTemplate> _badgeTemplates;
    
    	[DataMember]
    	public virtual ICollection<BadgeTemplate> BadgeTemplates
    	{ 
    		get { return _badgeTemplates; }
    		set
    		{
    			if (_badgeTemplates != value )
    			{
    				_badgeTemplates = value;
    				OnPropertyChanged(() => BadgeTemplates);
    			}
    		}
    	}
    	
    	private ICollection<BadgeTemplateEntityMap> _badgeTemplateEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<BadgeTemplateEntityMap> BadgeTemplateEntityMaps
    	{ 
    		get { return _badgeTemplateEntityMaps; }
    		set
    		{
    			if (_badgeTemplateEntityMaps != value )
    			{
    				_badgeTemplateEntityMaps = value;
    				OnPropertyChanged(() => BadgeTemplateEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<Department> _departments;
    
    	[DataMember]
    	public virtual ICollection<Department> Departments
    	{ 
    		get { return _departments; }
    		set
    		{
    			if (_departments != value )
    			{
    				_departments = value;
    				OnPropertyChanged(() => Departments);
    			}
    		}
    	}
    	
    	private ICollection<UserDefinedPropertyEntityMap> _userDefinedPropertyEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<UserDefinedPropertyEntityMap> UserDefinedPropertyEntityMaps
    	{ 
    		get { return _userDefinedPropertyEntityMaps; }
    		set
    		{
    			if (_userDefinedPropertyEntityMaps != value )
    			{
    				_userDefinedPropertyEntityMaps = value;
    				OnPropertyChanged(() => UserDefinedPropertyEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<Gender> _genders;
    
    	[DataMember]
    	public virtual ICollection<Gender> Genders
    	{ 
    		get { return _genders; }
    		set
    		{
    			if (_genders != value )
    			{
    				_genders = value;
    				OnPropertyChanged(() => Genders);
    			}
    		}
    	}
    	
    	private ICollection<PersonRecordType> _personRecordTypes;
    
    	[DataMember]
    	public virtual ICollection<PersonRecordType> PersonRecordTypes
    	{ 
    		get { return _personRecordTypes; }
    		set
    		{
    			if (_personRecordTypes != value )
    			{
    				_personRecordTypes = value;
    				OnPropertyChanged(() => PersonRecordTypes);
    			}
    		}
    	}
    	
    	private ICollection<PersonActiveStatusType> _personActiveStatusTypes;
    
    	[DataMember]
    	public virtual ICollection<PersonActiveStatusType> PersonActiveStatusTypes
    	{ 
    		get { return _personActiveStatusTypes; }
    		set
    		{
    			if (_personActiveStatusTypes != value )
    			{
    				_personActiveStatusTypes = value;
    				OnPropertyChanged(() => PersonActiveStatusTypes);
    			}
    		}
    	}
    	
    	private ICollection<UserDefinedProperty> _userDefinedProperties;
    
    	[DataMember]
    	public virtual ICollection<UserDefinedProperty> UserDefinedProperties
    	{ 
    		get { return _userDefinedProperties; }
    		set
    		{
    			if (_userDefinedProperties != value )
    			{
    				_userDefinedProperties = value;
    				OnPropertyChanged(() => UserDefinedProperties);
    			}
    		}
    	}
    	
    	private ICollection<AccessProfile> _accessProfiles;
    
    	[DataMember]
    	public virtual ICollection<AccessProfile> AccessProfiles
    	{ 
    		get { return _accessProfiles; }
    		set
    		{
    			if (_accessProfiles != value )
    			{
    				_accessProfiles = value;
    				OnPropertyChanged(() => AccessProfiles);
    			}
    		}
    	}
    	
    	private ICollection<AccessProfileEntityMap> _accessProfileEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<AccessProfileEntityMap> AccessProfileEntityMaps
    	{ 
    		get { return _accessProfileEntityMaps; }
    		set
    		{
    			if (_accessProfileEntityMaps != value )
    			{
    				_accessProfileEntityMaps = value;
    				OnPropertyChanged(() => AccessProfileEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<CommandScript> _commandScripts;
    
    	[DataMember]
    	public virtual ICollection<CommandScript> CommandScripts
    	{ 
    		get { return _commandScripts; }
    		set
    		{
    			if (_commandScripts != value )
    			{
    				_commandScripts = value;
    				OnPropertyChanged(() => CommandScripts);
    			}
    		}
    	}
    	
    	private ICollection<CredentialFormatEntity> _credentialFormatEntities;
    
    	[DataMember]
    	public virtual ICollection<CredentialFormatEntity> CredentialFormatEntities
    	{ 
    		get { return _credentialFormatEntities; }
    		set
    		{
    			if (_credentialFormatEntities != value )
    			{
    				_credentialFormatEntities = value;
    				OnPropertyChanged(() => CredentialFormatEntities);
    			}
    		}
    	}
    	
    	private ICollection<Person> _people;
    
    	[DataMember]
    	public virtual ICollection<Person> People
    	{ 
    		get { return _people; }
    		set
    		{
    			if (_people != value )
    			{
    				_people = value;
    				OnPropertyChanged(() => People);
    			}
    		}
    	}
    	
    	private ICollection<CredentialFormatEntityMap> _credentialFormatEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<CredentialFormatEntityMap> CredentialFormatEntityMaps
    	{ 
    		get { return _credentialFormatEntityMaps; }
    		set
    		{
    			if (_credentialFormatEntityMaps != value )
    			{
    				_credentialFormatEntityMaps = value;
    				OnPropertyChanged(() => CredentialFormatEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<PersonEntityMap> _personEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<PersonEntityMap> PersonEntityMaps
    	{ 
    		get { return _personEntityMaps; }
    		set
    		{
    			if (_personEntityMaps != value )
    			{
    				_personEntityMaps = value;
    				OnPropertyChanged(() => PersonEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<gcsSetting> _gcsSettings;
    
    	[DataMember]
    	public virtual ICollection<gcsSetting> gcsSettings
    	{ 
    		get { return _gcsSettings; }
    		set
    		{
    			if (_gcsSettings != value )
    			{
    				_gcsSettings = value;
    				OnPropertyChanged(() => gcsSettings);
    			}
    		}
    	}
    	
    	private ICollection<AcknowledgeAlarmPredefinedResponse> _acknowledgeAlarmPredefinedResponses;
    
    	[DataMember]
    	public virtual ICollection<AcknowledgeAlarmPredefinedResponse> AcknowledgeAlarmPredefinedResponses
    	{ 
    		get { return _acknowledgeAlarmPredefinedResponses; }
    		set
    		{
    			if (_acknowledgeAlarmPredefinedResponses != value )
    			{
    				_acknowledgeAlarmPredefinedResponses = value;
    				OnPropertyChanged(() => AcknowledgeAlarmPredefinedResponses);
    			}
    		}
    	}
    	
    	private ICollection<gcsLargeObjectStorage> _gcsLargeObjectStorages;
    
    	[DataMember]
    	public virtual ICollection<gcsLargeObjectStorage> gcsLargeObjectStorages
    	{ 
    		get { return _gcsLargeObjectStorages; }
    		set
    		{
    			if (_gcsLargeObjectStorages != value )
    			{
    				_gcsLargeObjectStorages = value;
    				OnPropertyChanged(() => gcsLargeObjectStorages);
    			}
    		}
    	}
    	
    	private ICollection<gcsEntityCount> _gcsEntityCounts;
    
    	[DataMember]
    	public virtual ICollection<gcsEntityCount> gcsEntityCounts
    	{ 
    		get { return _gcsEntityCounts; }
    		set
    		{
    			if (_gcsEntityCounts != value )
    			{
    				_gcsEntityCounts = value;
    				OnPropertyChanged(() => gcsEntityCounts);
    			}
    		}
    	}
    	
    	private ICollection<MercScpGroup> _mercScpGroups;
    
    	[DataMember]
    	public virtual ICollection<MercScpGroup> MercScpGroups
    	{ 
    		get { return _mercScpGroups; }
    		set
    		{
    			if (_mercScpGroups != value )
    			{
    				_mercScpGroups = value;
    				OnPropertyChanged(() => MercScpGroups);
    			}
    		}
    	}
    }
    
}
