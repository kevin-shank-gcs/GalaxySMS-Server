//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class UserDefinedNumberPropertyRule : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class UserDefinedNumberPropertyRule
        {
        	public UserDefinedNumberPropertyRule() : base()
        	{
        		Initialize();
        	}
        
        	public UserDefinedNumberPropertyRule(UserDefinedNumberPropertyRule e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        }
        
        	public void Initialize(UserDefinedNumberPropertyRule e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.UserDefinedNumberPropertyRulesUid = e.UserDefinedNumberPropertyRulesUid;
        		this.UserDefinedPropertyUid = e.UserDefinedPropertyUid;
        		this.IsRequired = e.IsRequired;
        		this.MinimumValue = e.MinimumValue;
        		this.MaximumValue = e.MaximumValue;
        		this.ValidationRegEx = e.ValidationRegEx;
        		this.DefaultValue = e.DefaultValue;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.EmptyContent = e.EmptyContent;
        		this.ValidationErrorMessage = e.ValidationErrorMessage;
        		
        	}
        
        	public UserDefinedNumberPropertyRule Clone(UserDefinedNumberPropertyRule e)
        	{
        		return new UserDefinedNumberPropertyRule(e);
        	}
        
        	public bool Equals(UserDefinedNumberPropertyRule other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(UserDefinedNumberPropertyRule other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.UserDefinedNumberPropertyRulesUid != this.UserDefinedNumberPropertyRulesUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _userDefinedNumberPropertyRulesUid;
    
    	[DataMember]
    	public System.Guid UserDefinedNumberPropertyRulesUid
    	{ 
    		get { return _userDefinedNumberPropertyRulesUid; }
    		set
    		{
    			if (_userDefinedNumberPropertyRulesUid != value )
    			{
    				_userDefinedNumberPropertyRulesUid = value;
    				OnPropertyChanged(() => UserDefinedNumberPropertyRulesUid);
    			}
    		}
    	}
    	
    	private System.Guid _userDefinedPropertyUid;
    
    	[DataMember]
    	public System.Guid UserDefinedPropertyUid
    	{ 
    		get { return _userDefinedPropertyUid; }
    		set
    		{
    			if (_userDefinedPropertyUid != value )
    			{
    				_userDefinedPropertyUid = value;
    				OnPropertyChanged(() => UserDefinedPropertyUid);
    			}
    		}
    	}
    	
    	private bool _isRequired;
    
    	[DataMember]
    	public bool IsRequired
    	{ 
    		get { return _isRequired; }
    		set
    		{
    			if (_isRequired != value )
    			{
    				_isRequired = value;
    				OnPropertyChanged(() => IsRequired);
    			}
    		}
    	}
    	
    	private int _minimumValue;
    
    	[DataMember]
    	public int MinimumValue
    	{ 
    		get { return _minimumValue; }
    		set
    		{
    			if (_minimumValue != value )
    			{
    				_minimumValue = value;
    				OnPropertyChanged(() => MinimumValue);
    			}
    		}
    	}
    	
    	private int _maximumValue;
    
    	[DataMember]
    	public int MaximumValue
    	{ 
    		get { return _maximumValue; }
    		set
    		{
    			if (_maximumValue != value )
    			{
    				_maximumValue = value;
    				OnPropertyChanged(() => MaximumValue);
    			}
    		}
    	}
    	
    	private string _validationRegEx;
    
    	[DataMember]
    	public string ValidationRegEx
    	{ 
    		get { return _validationRegEx; }
    		set
    		{
    			if (_validationRegEx != value )
    			{
    				_validationRegEx = value;
    				OnPropertyChanged(() => ValidationRegEx);
    			}
    		}
    	}
    	
    	private int _defaultValue;
    
    	[DataMember]
    	public int DefaultValue
    	{ 
    		get { return _defaultValue; }
    		set
    		{
    			if (_defaultValue != value )
    			{
    				_defaultValue = value;
    				OnPropertyChanged(() => DefaultValue);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    	
    	private string _emptyContent;
    
    	[DataMember]
    	public string EmptyContent
    	{ 
    		get { return _emptyContent; }
    		set
    		{
    			if (_emptyContent != value )
    			{
    				_emptyContent = value;
    				OnPropertyChanged(() => EmptyContent);
    			}
    		}
    	}
    	
    	private string _validationErrorMessage;
    
    	[DataMember]
    	public string ValidationErrorMessage
    	{ 
    		get { return _validationErrorMessage; }
    		set
    		{
    			if (_validationErrorMessage != value )
    			{
    				_validationErrorMessage = value;
    				OnPropertyChanged(() => ValidationErrorMessage);
    			}
    		}
    	}
    
    	
    	private UserDefinedProperty _userDefinedProperty;
    
    	[DataMember]
    	public virtual UserDefinedProperty UserDefinedProperty
    	{ 
    		get { return _userDefinedProperty; }
    		set
    		{
    			if (_userDefinedProperty != value )
    			{
    				_userDefinedProperty = value;
    				OnPropertyChanged(() => UserDefinedProperty);
    			}
    		}
    	}
    }
    
}
