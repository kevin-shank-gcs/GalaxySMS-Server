//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class DayType : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class DayType
        {
        	public DayType() : base()
        	{
        		Initialize();
        	}
        
        	public DayType(DayType e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        		this.DateTypes = new HashSet<DateType>();
        		this.DayTypeTimePeriods = new HashSet<DayTypeTimePeriod>();
        		this.TimeScheduleDayTypeGalaxyTimePeriods = new HashSet<TimeScheduleDayTypeGalaxyTimePeriod>();
        		this.TimeScheduleDayTypeTimePeriods = new HashSet<TimeScheduleDayTypeTimePeriod>();
        }
        
        	public void Initialize(DayType e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.DayTypeUid = e.DayTypeUid;
        		this.EntityId = e.EntityId;
        		this.Name = e.Name;
        		this.Notes = e.Notes;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.HighlightColor = e.HighlightColor;
        		this.DayTypeCode = e.DayTypeCode;
        		this.IsActive = e.IsActive;
        		this.DateTypes = e.DateTypes.ToCollection();
        		this.DayTypeTimePeriods = e.DayTypeTimePeriods.ToCollection();
        		this.TimeScheduleDayTypeGalaxyTimePeriods = e.TimeScheduleDayTypeGalaxyTimePeriods.ToCollection();
        		this.TimeScheduleDayTypeTimePeriods = e.TimeScheduleDayTypeTimePeriods.ToCollection();
        		
        	}
        
        	public DayType Clone(DayType e)
        	{
        		return new DayType(e);
        	}
        
        	public bool Equals(DayType other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(DayType other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.DayTypeUid != this.DayTypeUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _dayTypeUid;
    
    	[DataMember]
    	public System.Guid DayTypeUid
    	{ 
    		get { return _dayTypeUid; }
    		set
    		{
    			if (_dayTypeUid != value )
    			{
    				_dayTypeUid = value;
    				OnPropertyChanged(() => DayTypeUid);
    			}
    		}
    	}
    	
    	private System.Guid _entityId;
    
    	[DataMember]
    	public System.Guid EntityId
    	{ 
    		get { return _entityId; }
    		set
    		{
    			if (_entityId != value )
    			{
    				_entityId = value;
    				OnPropertyChanged(() => EntityId);
    			}
    		}
    	}
    	
    	private string _name;
    
    	[DataMember]
    	public string Name
    	{ 
    		get { return _name; }
    		set
    		{
    			if (_name != value )
    			{
    				_name = value;
    				OnPropertyChanged(() => Name);
    			}
    		}
    	}
    	
    	private string _notes;
    
    	[DataMember]
    	public string Notes
    	{ 
    		get { return _notes; }
    		set
    		{
    			if (_notes != value )
    			{
    				_notes = value;
    				OnPropertyChanged(() => Notes);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    	
    	private Nullable<int> _highlightColor;
    
    	[DataMember]
    	public Nullable<int> HighlightColor
    	{ 
    		get { return _highlightColor; }
    		set
    		{
    			if (_highlightColor != value )
    			{
    				_highlightColor = value;
    				OnPropertyChanged(() => HighlightColor);
    			}
    		}
    	}
    	
    	private short _dayTypeCode;
    
    	[DataMember]
    	public short DayTypeCode
    	{ 
    		get { return _dayTypeCode; }
    		set
    		{
    			if (_dayTypeCode != value )
    			{
    				_dayTypeCode = value;
    				OnPropertyChanged(() => DayTypeCode);
    			}
    		}
    	}
    	
    	private bool _isActive;
    
    	[DataMember]
    	public bool IsActive
    	{ 
    		get { return _isActive; }
    		set
    		{
    			if (_isActive != value )
    			{
    				_isActive = value;
    				OnPropertyChanged(() => IsActive);
    			}
    		}
    	}
    
    	
    	private ICollection<DateType> _dateTypes;
    
    	[DataMember]
    	public virtual ICollection<DateType> DateTypes
    	{ 
    		get { return _dateTypes; }
    		set
    		{
    			if (_dateTypes != value )
    			{
    				_dateTypes = value;
    				OnPropertyChanged(() => DateTypes);
    			}
    		}
    	}
    	
    	private gcsEntity _gcsEntity;
    
    	[DataMember]
    	public virtual gcsEntity gcsEntity
    	{ 
    		get { return _gcsEntity; }
    		set
    		{
    			if (_gcsEntity != value )
    			{
    				_gcsEntity = value;
    				OnPropertyChanged(() => gcsEntity);
    			}
    		}
    	}
    	
    	private ICollection<DayTypeTimePeriod> _dayTypeTimePeriods;
    
    	[DataMember]
    	public virtual ICollection<DayTypeTimePeriod> DayTypeTimePeriods
    	{ 
    		get { return _dayTypeTimePeriods; }
    		set
    		{
    			if (_dayTypeTimePeriods != value )
    			{
    				_dayTypeTimePeriods = value;
    				OnPropertyChanged(() => DayTypeTimePeriods);
    			}
    		}
    	}
    	
    	private ICollection<TimeScheduleDayTypeGalaxyTimePeriod> _timeScheduleDayTypeGalaxyTimePeriods;
    
    	[DataMember]
    	public virtual ICollection<TimeScheduleDayTypeGalaxyTimePeriod> TimeScheduleDayTypeGalaxyTimePeriods
    	{ 
    		get { return _timeScheduleDayTypeGalaxyTimePeriods; }
    		set
    		{
    			if (_timeScheduleDayTypeGalaxyTimePeriods != value )
    			{
    				_timeScheduleDayTypeGalaxyTimePeriods = value;
    				OnPropertyChanged(() => TimeScheduleDayTypeGalaxyTimePeriods);
    			}
    		}
    	}
    	
    	private ICollection<TimeScheduleDayTypeTimePeriod> _timeScheduleDayTypeTimePeriods;
    
    	[DataMember]
    	public virtual ICollection<TimeScheduleDayTypeTimePeriod> TimeScheduleDayTypeTimePeriods
    	{ 
    		get { return _timeScheduleDayTypeTimePeriods; }
    		set
    		{
    			if (_timeScheduleDayTypeTimePeriods != value )
    			{
    				_timeScheduleDayTypeTimePeriods = value;
    				OnPropertyChanged(() => TimeScheduleDayTypeTimePeriods);
    			}
    		}
    	}
    }
    
}
