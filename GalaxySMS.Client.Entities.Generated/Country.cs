//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class Country : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class Country
        {
        	public Country() : base()
        	{
        		Initialize();
        	}
        
        	public Country(Country e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        		this.StateProvinces = new HashSet<StateProvince>();
        }
        
        	public void Initialize(Country e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.CountryUid = e.CountryUid;
        		this.CountryIso = e.CountryIso;
        		this.CountryName = e.CountryName;
        		this.LongCountryName = e.LongCountryName;
        		this.Iso3 = e.Iso3;
        		this.NumberCode = e.NumberCode;
        		this.UnitedNationsMemberState = e.UnitedNationsMemberState;
        		this.CallingCode = e.CallingCode;
        		this.CCTLD = e.CCTLD;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.FlagImage = e.FlagImage;
        		this.StateProvinces = e.StateProvinces.ToCollection();
        		
        	}
        
        	public Country Clone(Country e)
        	{
        		return new Country(e);
        	}
        
        	public bool Equals(Country other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(Country other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.CountryUid != this.CountryUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _countryUid;
    
    	[DataMember]
    	public System.Guid CountryUid
    	{ 
    		get { return _countryUid; }
    		set
    		{
    			if (_countryUid != value )
    			{
    				_countryUid = value;
    				OnPropertyChanged(() => CountryUid);
    			}
    		}
    	}
    	
    	private string _countryIso;
    
    	[DataMember]
    	public string CountryIso
    	{ 
    		get { return _countryIso; }
    		set
    		{
    			if (_countryIso != value )
    			{
    				_countryIso = value;
    				OnPropertyChanged(() => CountryIso);
    			}
    		}
    	}
    	
    	private string _countryName;
    
    	[DataMember]
    	public string CountryName
    	{ 
    		get { return _countryName; }
    		set
    		{
    			if (_countryName != value )
    			{
    				_countryName = value;
    				OnPropertyChanged(() => CountryName);
    			}
    		}
    	}
    	
    	private string _longCountryName;
    
    	[DataMember]
    	public string LongCountryName
    	{ 
    		get { return _longCountryName; }
    		set
    		{
    			if (_longCountryName != value )
    			{
    				_longCountryName = value;
    				OnPropertyChanged(() => LongCountryName);
    			}
    		}
    	}
    	
    	private string _iso3;
    
    	[DataMember]
    	public string Iso3
    	{ 
    		get { return _iso3; }
    		set
    		{
    			if (_iso3 != value )
    			{
    				_iso3 = value;
    				OnPropertyChanged(() => Iso3);
    			}
    		}
    	}
    	
    	private string _numberCode;
    
    	[DataMember]
    	public string NumberCode
    	{ 
    		get { return _numberCode; }
    		set
    		{
    			if (_numberCode != value )
    			{
    				_numberCode = value;
    				OnPropertyChanged(() => NumberCode);
    			}
    		}
    	}
    	
    	private bool _unitedNationsMemberState;
    
    	[DataMember]
    	public bool UnitedNationsMemberState
    	{ 
    		get { return _unitedNationsMemberState; }
    		set
    		{
    			if (_unitedNationsMemberState != value )
    			{
    				_unitedNationsMemberState = value;
    				OnPropertyChanged(() => UnitedNationsMemberState);
    			}
    		}
    	}
    	
    	private string _callingCode;
    
    	[DataMember]
    	public string CallingCode
    	{ 
    		get { return _callingCode; }
    		set
    		{
    			if (_callingCode != value )
    			{
    				_callingCode = value;
    				OnPropertyChanged(() => CallingCode);
    			}
    		}
    	}
    	
    	private string _cCTLD;
    
    	[DataMember]
    	public string CCTLD
    	{ 
    		get { return _cCTLD; }
    		set
    		{
    			if (_cCTLD != value )
    			{
    				_cCTLD = value;
    				OnPropertyChanged(() => CCTLD);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    	
    	private byte[] _flagImage;
    
    	[DataMember]
    	public byte[] FlagImage
    	{ 
    		get { return _flagImage; }
    		set
    		{
    			if (_flagImage != value )
    			{
    				_flagImage = value;
    				OnPropertyChanged(() => FlagImage);
    			}
    		}
    	}
    
    	
    	private ICollection<StateProvince> _stateProvinces;
    
    	[DataMember]
    	public virtual ICollection<StateProvince> StateProvinces
    	{ 
    		get { return _stateProvinces; }
    		set
    		{
    			if (_stateProvinces != value )
    			{
    				_stateProvinces = value;
    				OnPropertyChanged(() => StateProvinces);
    			}
    		}
    	}
    }
    
}
