//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class AccessPortalLastUsage : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class AccessPortalLastUsage
        {
        	public AccessPortalLastUsage() : base()
        	{
        		Initialize();
        	}
        
        	public AccessPortalLastUsage(AccessPortalLastUsage e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        }
        
        	public void Initialize(AccessPortalLastUsage e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.AccessPortalUid = e.AccessPortalUid;
        		this.LastActivityEventUid = e.LastActivityEventUid;
        		this.LastAccessGrantedActivityEventUid = e.LastAccessGrantedActivityEventUid;
        		
        	}
        
        	public AccessPortalLastUsage Clone(AccessPortalLastUsage e)
        	{
        		return new AccessPortalLastUsage(e);
        	}
        
        	public bool Equals(AccessPortalLastUsage other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(AccessPortalLastUsage other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.AccessPortalUid != this.AccessPortalUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _accessPortalUid;
    
    	[DataMember]
    	public System.Guid AccessPortalUid
    	{ 
    		get { return _accessPortalUid; }
    		set
    		{
    			if (_accessPortalUid != value )
    			{
    				_accessPortalUid = value;
    				OnPropertyChanged(() => AccessPortalUid);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _lastActivityEventUid;
    
    	[DataMember]
    	public Nullable<System.Guid> LastActivityEventUid
    	{ 
    		get { return _lastActivityEventUid; }
    		set
    		{
    			if (_lastActivityEventUid != value )
    			{
    				_lastActivityEventUid = value;
    				OnPropertyChanged(() => LastActivityEventUid);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _lastAccessGrantedActivityEventUid;
    
    	[DataMember]
    	public Nullable<System.Guid> LastAccessGrantedActivityEventUid
    	{ 
    		get { return _lastAccessGrantedActivityEventUid; }
    		set
    		{
    			if (_lastAccessGrantedActivityEventUid != value )
    			{
    				_lastAccessGrantedActivityEventUid = value;
    				OnPropertyChanged(() => LastAccessGrantedActivityEventUid);
    			}
    		}
    	}
    
    	
    	private AccessPortal _accessPortal;
    
    	[DataMember]
    	public virtual AccessPortal AccessPortal
    	{ 
    		get { return _accessPortal; }
    		set
    		{
    			if (_accessPortal != value )
    			{
    				_accessPortal = value;
    				OnPropertyChanged(() => AccessPortal);
    			}
    		}
    	}
    }
    
}
