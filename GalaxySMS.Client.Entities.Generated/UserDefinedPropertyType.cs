//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class UserDefinedPropertyType : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class UserDefinedPropertyType
        {
        	public UserDefinedPropertyType() : base()
        	{
        		Initialize();
        	}
        
        	public UserDefinedPropertyType(UserDefinedPropertyType e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        		this.UserDefinedProperties = new HashSet<UserDefinedProperty>();
        }
        
        	public void Initialize(UserDefinedPropertyType e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.PropertyTypeUid = e.PropertyTypeUid;
        		this.PropertyType = e.PropertyType;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.UserDefinedProperties = e.UserDefinedProperties.ToCollection();
        		
        	}
        
        	public UserDefinedPropertyType Clone(UserDefinedPropertyType e)
        	{
        		return new UserDefinedPropertyType(e);
        	}
        
        	public bool Equals(UserDefinedPropertyType other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(UserDefinedPropertyType other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.PropertyTypeUid != this.PropertyTypeUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _propertyTypeUid;
    
    	[DataMember]
    	public System.Guid PropertyTypeUid
    	{ 
    		get { return _propertyTypeUid; }
    		set
    		{
    			if (_propertyTypeUid != value )
    			{
    				_propertyTypeUid = value;
    				OnPropertyChanged(() => PropertyTypeUid);
    			}
    		}
    	}
    	
    	private string _propertyType;
    
    	[DataMember]
    	public string PropertyType
    	{ 
    		get { return _propertyType; }
    		set
    		{
    			if (_propertyType != value )
    			{
    				_propertyType = value;
    				OnPropertyChanged(() => PropertyType);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    
    	
    	private ICollection<UserDefinedProperty> _userDefinedProperties;
    
    	[DataMember]
    	public virtual ICollection<UserDefinedProperty> UserDefinedProperties
    	{ 
    		get { return _userDefinedProperties; }
    		set
    		{
    			if (_userDefinedProperties != value )
    			{
    				_userDefinedProperties = value;
    				OnPropertyChanged(() => UserDefinedProperties);
    			}
    		}
    	}
    }
    
}
