//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class AccessPortalProperty : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class AccessPortalProperty
        {
        	public AccessPortalProperty() : base()
        	{
        		Initialize();
        	}
        
        	public AccessPortalProperty(AccessPortalProperty e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        }
        
        	public void Initialize(AccessPortalProperty e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.AccessPortalPropertiesUid = e.AccessPortalPropertiesUid;
        		this.AccessPortalUid = e.AccessPortalUid;
        		this.AutomaticForgivePassbackFrequencyUid = e.AutomaticForgivePassbackFrequencyUid;
        		this.PinRequiredModeUid = e.PinRequiredModeUid;
        		this.AccessPortalContactSupervisionTypeUid = e.AccessPortalContactSupervisionTypeUid;
        		this.AccessPortalDeferToServerBehaviorUid = e.AccessPortalDeferToServerBehaviorUid;
        		this.AccessPortalNoServerReplyBehaviorUid = e.AccessPortalNoServerReplyBehaviorUid;
        		this.AccessPortalLockPushButtonBehaviorUid = e.AccessPortalLockPushButtonBehaviorUid;
        		this.LiquidCrystalDisplayUid = e.LiquidCrystalDisplayUid;
        		this.AccessPortalElevatorControlTypeUid = e.AccessPortalElevatorControlTypeUid;
        		this.OtisElevatorDecUid = e.OtisElevatorDecUid;
        		this.ElevatorSerialChannelUid = e.ElevatorSerialChannelUid;
        		this.DoorNumber = e.DoorNumber;
        		this.UnlockDelay = e.UnlockDelay;
        		this.UnlockDuration = e.UnlockDuration;
        		this.RecloseDuration = e.RecloseDuration;
        		this.AllowPassbackAccess = e.AllowPassbackAccess;
        		this.RequireTwoValidCredentials = e.RequireTwoValidCredentials;
        		this.UnlockOnREX = e.UnlockOnREX;
        		this.SuppressIllegalOpenLog = e.SuppressIllegalOpenLog;
        		this.SuppressOpenTooLongLog = e.SuppressOpenTooLongLog;
        		this.SuppressClosedLog = e.SuppressClosedLog;
        		this.SuppressREXLog = e.SuppressREXLog;
        		this.LockWhenDoorCloses = e.LockWhenDoorCloses;
        		this.EnableDuress = e.EnableDuress;
        		this.DoorGroupNotify = e.DoorGroupNotify;
        		this.DoorGroupCanDisable = e.DoorGroupCanDisable;
        		this.RelayOneOnDuringArmDelay = e.RelayOneOnDuringArmDelay;
        		this.RequireValidAccessForAutoUnlock = e.RequireValidAccessForAutoUnlock;
        		this.PINSpecifiesRecloseDuration = e.PINSpecifiesRecloseDuration;
        		this.ValidAccessRequiresDoorOpen = e.ValidAccessRequiresDoorOpen;
        		this.DontDecrementLimitedSwipeExpireCount = e.DontDecrementLimitedSwipeExpireCount;
        		this.IgnoreNotInSystem = e.IgnoreNotInSystem;
        		this.ReaderSendsHeartbeat = e.ReaderSendsHeartbeat;
        		this.PhotoVerificationEnabled = e.PhotoVerificationEnabled;
        		this.TimeAttendancePortal = e.TimeAttendancePortal;
        		this.EMailEventsEnabled = e.EMailEventsEnabled;
        		this.TransmitEventsEnabled = e.TransmitEventsEnabled;
        		this.FileOutputEnabled = e.FileOutputEnabled;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.ElevatorRelayInterfaceBoardSectionUid = e.ElevatorRelayInterfaceBoardSectionUid;
        		this.GenerateDoorContactChangeLogs = e.GenerateDoorContactChangeLogs;
        		this.AccessPortalMultiFactorModeUid = e.AccessPortalMultiFactorModeUid;
        		this.DoorNumber1 = e.DoorNumber1;
        		
        	}
        
        	public AccessPortalProperty Clone(AccessPortalProperty e)
        	{
        		return new AccessPortalProperty(e);
        	}
        
        	public bool Equals(AccessPortalProperty other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(AccessPortalProperty other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.AccessPortalPropertiesUid != this.AccessPortalPropertiesUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _accessPortalPropertiesUid;
    
    	[DataMember]
    	public System.Guid AccessPortalPropertiesUid
    	{ 
    		get { return _accessPortalPropertiesUid; }
    		set
    		{
    			if (_accessPortalPropertiesUid != value )
    			{
    				_accessPortalPropertiesUid = value;
    				OnPropertyChanged(() => AccessPortalPropertiesUid);
    			}
    		}
    	}
    	
    	private System.Guid _accessPortalUid;
    
    	[DataMember]
    	public System.Guid AccessPortalUid
    	{ 
    		get { return _accessPortalUid; }
    		set
    		{
    			if (_accessPortalUid != value )
    			{
    				_accessPortalUid = value;
    				OnPropertyChanged(() => AccessPortalUid);
    			}
    		}
    	}
    	
    	private System.Guid _automaticForgivePassbackFrequencyUid;
    
    	[DataMember]
    	public System.Guid AutomaticForgivePassbackFrequencyUid
    	{ 
    		get { return _automaticForgivePassbackFrequencyUid; }
    		set
    		{
    			if (_automaticForgivePassbackFrequencyUid != value )
    			{
    				_automaticForgivePassbackFrequencyUid = value;
    				OnPropertyChanged(() => AutomaticForgivePassbackFrequencyUid);
    			}
    		}
    	}
    	
    	private System.Guid _pinRequiredModeUid;
    
    	[DataMember]
    	public System.Guid PinRequiredModeUid
    	{ 
    		get { return _pinRequiredModeUid; }
    		set
    		{
    			if (_pinRequiredModeUid != value )
    			{
    				_pinRequiredModeUid = value;
    				OnPropertyChanged(() => PinRequiredModeUid);
    			}
    		}
    	}
    	
    	private System.Guid _accessPortalContactSupervisionTypeUid;
    
    	[DataMember]
    	public System.Guid AccessPortalContactSupervisionTypeUid
    	{ 
    		get { return _accessPortalContactSupervisionTypeUid; }
    		set
    		{
    			if (_accessPortalContactSupervisionTypeUid != value )
    			{
    				_accessPortalContactSupervisionTypeUid = value;
    				OnPropertyChanged(() => AccessPortalContactSupervisionTypeUid);
    			}
    		}
    	}
    	
    	private System.Guid _accessPortalDeferToServerBehaviorUid;
    
    	[DataMember]
    	public System.Guid AccessPortalDeferToServerBehaviorUid
    	{ 
    		get { return _accessPortalDeferToServerBehaviorUid; }
    		set
    		{
    			if (_accessPortalDeferToServerBehaviorUid != value )
    			{
    				_accessPortalDeferToServerBehaviorUid = value;
    				OnPropertyChanged(() => AccessPortalDeferToServerBehaviorUid);
    			}
    		}
    	}
    	
    	private System.Guid _accessPortalNoServerReplyBehaviorUid;
    
    	[DataMember]
    	public System.Guid AccessPortalNoServerReplyBehaviorUid
    	{ 
    		get { return _accessPortalNoServerReplyBehaviorUid; }
    		set
    		{
    			if (_accessPortalNoServerReplyBehaviorUid != value )
    			{
    				_accessPortalNoServerReplyBehaviorUid = value;
    				OnPropertyChanged(() => AccessPortalNoServerReplyBehaviorUid);
    			}
    		}
    	}
    	
    	private System.Guid _accessPortalLockPushButtonBehaviorUid;
    
    	[DataMember]
    	public System.Guid AccessPortalLockPushButtonBehaviorUid
    	{ 
    		get { return _accessPortalLockPushButtonBehaviorUid; }
    		set
    		{
    			if (_accessPortalLockPushButtonBehaviorUid != value )
    			{
    				_accessPortalLockPushButtonBehaviorUid = value;
    				OnPropertyChanged(() => AccessPortalLockPushButtonBehaviorUid);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _liquidCrystalDisplayUid;
    
    	[DataMember]
    	public Nullable<System.Guid> LiquidCrystalDisplayUid
    	{ 
    		get { return _liquidCrystalDisplayUid; }
    		set
    		{
    			if (_liquidCrystalDisplayUid != value )
    			{
    				_liquidCrystalDisplayUid = value;
    				OnPropertyChanged(() => LiquidCrystalDisplayUid);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _accessPortalElevatorControlTypeUid;
    
    	[DataMember]
    	public Nullable<System.Guid> AccessPortalElevatorControlTypeUid
    	{ 
    		get { return _accessPortalElevatorControlTypeUid; }
    		set
    		{
    			if (_accessPortalElevatorControlTypeUid != value )
    			{
    				_accessPortalElevatorControlTypeUid = value;
    				OnPropertyChanged(() => AccessPortalElevatorControlTypeUid);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _otisElevatorDecUid;
    
    	[DataMember]
    	public Nullable<System.Guid> OtisElevatorDecUid
    	{ 
    		get { return _otisElevatorDecUid; }
    		set
    		{
    			if (_otisElevatorDecUid != value )
    			{
    				_otisElevatorDecUid = value;
    				OnPropertyChanged(() => OtisElevatorDecUid);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _elevatorSerialChannelUid;
    
    	[DataMember]
    	public Nullable<System.Guid> ElevatorSerialChannelUid
    	{ 
    		get { return _elevatorSerialChannelUid; }
    		set
    		{
    			if (_elevatorSerialChannelUid != value )
    			{
    				_elevatorSerialChannelUid = value;
    				OnPropertyChanged(() => ElevatorSerialChannelUid);
    			}
    		}
    	}
    	
    	private short _doorNumber;
    
    	[DataMember]
    	public short DoorNumber
    	{ 
    		get { return _doorNumber; }
    		set
    		{
    			if (_doorNumber != value )
    			{
    				_doorNumber = value;
    				OnPropertyChanged(() => DoorNumber);
    			}
    		}
    	}
    	
    	private int _unlockDelay;
    
    	[DataMember]
    	public int UnlockDelay
    	{ 
    		get { return _unlockDelay; }
    		set
    		{
    			if (_unlockDelay != value )
    			{
    				_unlockDelay = value;
    				OnPropertyChanged(() => UnlockDelay);
    			}
    		}
    	}
    	
    	private int _unlockDuration;
    
    	[DataMember]
    	public int UnlockDuration
    	{ 
    		get { return _unlockDuration; }
    		set
    		{
    			if (_unlockDuration != value )
    			{
    				_unlockDuration = value;
    				OnPropertyChanged(() => UnlockDuration);
    			}
    		}
    	}
    	
    	private int _recloseDuration;
    
    	[DataMember]
    	public int RecloseDuration
    	{ 
    		get { return _recloseDuration; }
    		set
    		{
    			if (_recloseDuration != value )
    			{
    				_recloseDuration = value;
    				OnPropertyChanged(() => RecloseDuration);
    			}
    		}
    	}
    	
    	private bool _allowPassbackAccess;
    
    	[DataMember]
    	public bool AllowPassbackAccess
    	{ 
    		get { return _allowPassbackAccess; }
    		set
    		{
    			if (_allowPassbackAccess != value )
    			{
    				_allowPassbackAccess = value;
    				OnPropertyChanged(() => AllowPassbackAccess);
    			}
    		}
    	}
    	
    	private bool _requireTwoValidCredentials;
    
    	[DataMember]
    	public bool RequireTwoValidCredentials
    	{ 
    		get { return _requireTwoValidCredentials; }
    		set
    		{
    			if (_requireTwoValidCredentials != value )
    			{
    				_requireTwoValidCredentials = value;
    				OnPropertyChanged(() => RequireTwoValidCredentials);
    			}
    		}
    	}
    	
    	private bool _unlockOnREX;
    
    	[DataMember]
    	public bool UnlockOnREX
    	{ 
    		get { return _unlockOnREX; }
    		set
    		{
    			if (_unlockOnREX != value )
    			{
    				_unlockOnREX = value;
    				OnPropertyChanged(() => UnlockOnREX);
    			}
    		}
    	}
    	
    	private bool _suppressIllegalOpenLog;
    
    	[DataMember]
    	public bool SuppressIllegalOpenLog
    	{ 
    		get { return _suppressIllegalOpenLog; }
    		set
    		{
    			if (_suppressIllegalOpenLog != value )
    			{
    				_suppressIllegalOpenLog = value;
    				OnPropertyChanged(() => SuppressIllegalOpenLog);
    			}
    		}
    	}
    	
    	private bool _suppressOpenTooLongLog;
    
    	[DataMember]
    	public bool SuppressOpenTooLongLog
    	{ 
    		get { return _suppressOpenTooLongLog; }
    		set
    		{
    			if (_suppressOpenTooLongLog != value )
    			{
    				_suppressOpenTooLongLog = value;
    				OnPropertyChanged(() => SuppressOpenTooLongLog);
    			}
    		}
    	}
    	
    	private bool _suppressClosedLog;
    
    	[DataMember]
    	public bool SuppressClosedLog
    	{ 
    		get { return _suppressClosedLog; }
    		set
    		{
    			if (_suppressClosedLog != value )
    			{
    				_suppressClosedLog = value;
    				OnPropertyChanged(() => SuppressClosedLog);
    			}
    		}
    	}
    	
    	private bool _suppressREXLog;
    
    	[DataMember]
    	public bool SuppressREXLog
    	{ 
    		get { return _suppressREXLog; }
    		set
    		{
    			if (_suppressREXLog != value )
    			{
    				_suppressREXLog = value;
    				OnPropertyChanged(() => SuppressREXLog);
    			}
    		}
    	}
    	
    	private bool _lockWhenDoorCloses;
    
    	[DataMember]
    	public bool LockWhenDoorCloses
    	{ 
    		get { return _lockWhenDoorCloses; }
    		set
    		{
    			if (_lockWhenDoorCloses != value )
    			{
    				_lockWhenDoorCloses = value;
    				OnPropertyChanged(() => LockWhenDoorCloses);
    			}
    		}
    	}
    	
    	private bool _enableDuress;
    
    	[DataMember]
    	public bool EnableDuress
    	{ 
    		get { return _enableDuress; }
    		set
    		{
    			if (_enableDuress != value )
    			{
    				_enableDuress = value;
    				OnPropertyChanged(() => EnableDuress);
    			}
    		}
    	}
    	
    	private bool _doorGroupNotify;
    
    	[DataMember]
    	public bool DoorGroupNotify
    	{ 
    		get { return _doorGroupNotify; }
    		set
    		{
    			if (_doorGroupNotify != value )
    			{
    				_doorGroupNotify = value;
    				OnPropertyChanged(() => DoorGroupNotify);
    			}
    		}
    	}
    	
    	private bool _doorGroupCanDisable;
    
    	[DataMember]
    	public bool DoorGroupCanDisable
    	{ 
    		get { return _doorGroupCanDisable; }
    		set
    		{
    			if (_doorGroupCanDisable != value )
    			{
    				_doorGroupCanDisable = value;
    				OnPropertyChanged(() => DoorGroupCanDisable);
    			}
    		}
    	}
    	
    	private bool _relayOneOnDuringArmDelay;
    
    	[DataMember]
    	public bool RelayOneOnDuringArmDelay
    	{ 
    		get { return _relayOneOnDuringArmDelay; }
    		set
    		{
    			if (_relayOneOnDuringArmDelay != value )
    			{
    				_relayOneOnDuringArmDelay = value;
    				OnPropertyChanged(() => RelayOneOnDuringArmDelay);
    			}
    		}
    	}
    	
    	private bool _requireValidAccessForAutoUnlock;
    
    	[DataMember]
    	public bool RequireValidAccessForAutoUnlock
    	{ 
    		get { return _requireValidAccessForAutoUnlock; }
    		set
    		{
    			if (_requireValidAccessForAutoUnlock != value )
    			{
    				_requireValidAccessForAutoUnlock = value;
    				OnPropertyChanged(() => RequireValidAccessForAutoUnlock);
    			}
    		}
    	}
    	
    	private bool _pINSpecifiesRecloseDuration;
    
    	[DataMember]
    	public bool PINSpecifiesRecloseDuration
    	{ 
    		get { return _pINSpecifiesRecloseDuration; }
    		set
    		{
    			if (_pINSpecifiesRecloseDuration != value )
    			{
    				_pINSpecifiesRecloseDuration = value;
    				OnPropertyChanged(() => PINSpecifiesRecloseDuration);
    			}
    		}
    	}
    	
    	private bool _validAccessRequiresDoorOpen;
    
    	[DataMember]
    	public bool ValidAccessRequiresDoorOpen
    	{ 
    		get { return _validAccessRequiresDoorOpen; }
    		set
    		{
    			if (_validAccessRequiresDoorOpen != value )
    			{
    				_validAccessRequiresDoorOpen = value;
    				OnPropertyChanged(() => ValidAccessRequiresDoorOpen);
    			}
    		}
    	}
    	
    	private bool _dontDecrementLimitedSwipeExpireCount;
    
    	[DataMember]
    	public bool DontDecrementLimitedSwipeExpireCount
    	{ 
    		get { return _dontDecrementLimitedSwipeExpireCount; }
    		set
    		{
    			if (_dontDecrementLimitedSwipeExpireCount != value )
    			{
    				_dontDecrementLimitedSwipeExpireCount = value;
    				OnPropertyChanged(() => DontDecrementLimitedSwipeExpireCount);
    			}
    		}
    	}
    	
    	private bool _ignoreNotInSystem;
    
    	[DataMember]
    	public bool IgnoreNotInSystem
    	{ 
    		get { return _ignoreNotInSystem; }
    		set
    		{
    			if (_ignoreNotInSystem != value )
    			{
    				_ignoreNotInSystem = value;
    				OnPropertyChanged(() => IgnoreNotInSystem);
    			}
    		}
    	}
    	
    	private bool _readerSendsHeartbeat;
    
    	[DataMember]
    	public bool ReaderSendsHeartbeat
    	{ 
    		get { return _readerSendsHeartbeat; }
    		set
    		{
    			if (_readerSendsHeartbeat != value )
    			{
    				_readerSendsHeartbeat = value;
    				OnPropertyChanged(() => ReaderSendsHeartbeat);
    			}
    		}
    	}
    	
    	private bool _photoVerificationEnabled;
    
    	[DataMember]
    	public bool PhotoVerificationEnabled
    	{ 
    		get { return _photoVerificationEnabled; }
    		set
    		{
    			if (_photoVerificationEnabled != value )
    			{
    				_photoVerificationEnabled = value;
    				OnPropertyChanged(() => PhotoVerificationEnabled);
    			}
    		}
    	}
    	
    	private bool _timeAttendancePortal;
    
    	[DataMember]
    	public bool TimeAttendancePortal
    	{ 
    		get { return _timeAttendancePortal; }
    		set
    		{
    			if (_timeAttendancePortal != value )
    			{
    				_timeAttendancePortal = value;
    				OnPropertyChanged(() => TimeAttendancePortal);
    			}
    		}
    	}
    	
    	private bool _eMailEventsEnabled;
    
    	[DataMember]
    	public bool EMailEventsEnabled
    	{ 
    		get { return _eMailEventsEnabled; }
    		set
    		{
    			if (_eMailEventsEnabled != value )
    			{
    				_eMailEventsEnabled = value;
    				OnPropertyChanged(() => EMailEventsEnabled);
    			}
    		}
    	}
    	
    	private bool _transmitEventsEnabled;
    
    	[DataMember]
    	public bool TransmitEventsEnabled
    	{ 
    		get { return _transmitEventsEnabled; }
    		set
    		{
    			if (_transmitEventsEnabled != value )
    			{
    				_transmitEventsEnabled = value;
    				OnPropertyChanged(() => TransmitEventsEnabled);
    			}
    		}
    	}
    	
    	private bool _fileOutputEnabled;
    
    	[DataMember]
    	public bool FileOutputEnabled
    	{ 
    		get { return _fileOutputEnabled; }
    		set
    		{
    			if (_fileOutputEnabled != value )
    			{
    				_fileOutputEnabled = value;
    				OnPropertyChanged(() => FileOutputEnabled);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _elevatorRelayInterfaceBoardSectionUid;
    
    	[DataMember]
    	public Nullable<System.Guid> ElevatorRelayInterfaceBoardSectionUid
    	{ 
    		get { return _elevatorRelayInterfaceBoardSectionUid; }
    		set
    		{
    			if (_elevatorRelayInterfaceBoardSectionUid != value )
    			{
    				_elevatorRelayInterfaceBoardSectionUid = value;
    				OnPropertyChanged(() => ElevatorRelayInterfaceBoardSectionUid);
    			}
    		}
    	}
    	
    	private bool _generateDoorContactChangeLogs;
    
    	[DataMember]
    	public bool GenerateDoorContactChangeLogs
    	{ 
    		get { return _generateDoorContactChangeLogs; }
    		set
    		{
    			if (_generateDoorContactChangeLogs != value )
    			{
    				_generateDoorContactChangeLogs = value;
    				OnPropertyChanged(() => GenerateDoorContactChangeLogs);
    			}
    		}
    	}
    	
    	private System.Guid _accessPortalMultiFactorModeUid;
    
    	[DataMember]
    	public System.Guid AccessPortalMultiFactorModeUid
    	{ 
    		get { return _accessPortalMultiFactorModeUid; }
    		set
    		{
    			if (_accessPortalMultiFactorModeUid != value )
    			{
    				_accessPortalMultiFactorModeUid = value;
    				OnPropertyChanged(() => AccessPortalMultiFactorModeUid);
    			}
    		}
    	}
    	
    	private short _doorNumber1;
    
    	[DataMember]
    	public short DoorNumber1
    	{ 
    		get { return _doorNumber1; }
    		set
    		{
    			if (_doorNumber1 != value )
    			{
    				_doorNumber1 = value;
    				OnPropertyChanged(() => DoorNumber1);
    			}
    		}
    	}
    
    	
    	private AccessPortal _accessPortal;
    
    	[DataMember]
    	public virtual AccessPortal AccessPortal
    	{ 
    		get { return _accessPortal; }
    		set
    		{
    			if (_accessPortal != value )
    			{
    				_accessPortal = value;
    				OnPropertyChanged(() => AccessPortal);
    			}
    		}
    	}
    	
    	private AccessPortalContactSupervisionType _accessPortalContactSupervisionType;
    
    	[DataMember]
    	public virtual AccessPortalContactSupervisionType AccessPortalContactSupervisionType
    	{ 
    		get { return _accessPortalContactSupervisionType; }
    		set
    		{
    			if (_accessPortalContactSupervisionType != value )
    			{
    				_accessPortalContactSupervisionType = value;
    				OnPropertyChanged(() => AccessPortalContactSupervisionType);
    			}
    		}
    	}
    	
    	private AccessPortalDeferToServerBehavior _accessPortalDeferToServerBehavior;
    
    	[DataMember]
    	public virtual AccessPortalDeferToServerBehavior AccessPortalDeferToServerBehavior
    	{ 
    		get { return _accessPortalDeferToServerBehavior; }
    		set
    		{
    			if (_accessPortalDeferToServerBehavior != value )
    			{
    				_accessPortalDeferToServerBehavior = value;
    				OnPropertyChanged(() => AccessPortalDeferToServerBehavior);
    			}
    		}
    	}
    	
    	private AccessPortalElevatorControlType _accessPortalElevatorControlType;
    
    	[DataMember]
    	public virtual AccessPortalElevatorControlType AccessPortalElevatorControlType
    	{ 
    		get { return _accessPortalElevatorControlType; }
    		set
    		{
    			if (_accessPortalElevatorControlType != value )
    			{
    				_accessPortalElevatorControlType = value;
    				OnPropertyChanged(() => AccessPortalElevatorControlType);
    			}
    		}
    	}
    	
    	private AccessPortalLockPushButtonBehavior _accessPortalLockPushButtonBehavior;
    
    	[DataMember]
    	public virtual AccessPortalLockPushButtonBehavior AccessPortalLockPushButtonBehavior
    	{ 
    		get { return _accessPortalLockPushButtonBehavior; }
    		set
    		{
    			if (_accessPortalLockPushButtonBehavior != value )
    			{
    				_accessPortalLockPushButtonBehavior = value;
    				OnPropertyChanged(() => AccessPortalLockPushButtonBehavior);
    			}
    		}
    	}
    	
    	private AccessPortalNoServerReplyBehavior _accessPortalNoServerReplyBehavior;
    
    	[DataMember]
    	public virtual AccessPortalNoServerReplyBehavior AccessPortalNoServerReplyBehavior
    	{ 
    		get { return _accessPortalNoServerReplyBehavior; }
    		set
    		{
    			if (_accessPortalNoServerReplyBehavior != value )
    			{
    				_accessPortalNoServerReplyBehavior = value;
    				OnPropertyChanged(() => AccessPortalNoServerReplyBehavior);
    			}
    		}
    	}
    	
    	private GalaxyInterfaceBoardSection _galaxyInterfaceBoardSection;
    
    	[DataMember]
    	public virtual GalaxyInterfaceBoardSection GalaxyInterfaceBoardSection
    	{ 
    		get { return _galaxyInterfaceBoardSection; }
    		set
    		{
    			if (_galaxyInterfaceBoardSection != value )
    			{
    				_galaxyInterfaceBoardSection = value;
    				OnPropertyChanged(() => GalaxyInterfaceBoardSection);
    			}
    		}
    	}
    	
    	private LiquidCrystalDisplay _liquidCrystalDisplay;
    
    	[DataMember]
    	public virtual LiquidCrystalDisplay LiquidCrystalDisplay
    	{ 
    		get { return _liquidCrystalDisplay; }
    		set
    		{
    			if (_liquidCrystalDisplay != value )
    			{
    				_liquidCrystalDisplay = value;
    				OnPropertyChanged(() => LiquidCrystalDisplay);
    			}
    		}
    	}
    	
    	private AccessPortalMultiFactorMode _accessPortalMultiFactorMode;
    
    	[DataMember]
    	public virtual AccessPortalMultiFactorMode AccessPortalMultiFactorMode
    	{ 
    		get { return _accessPortalMultiFactorMode; }
    		set
    		{
    			if (_accessPortalMultiFactorMode != value )
    			{
    				_accessPortalMultiFactorMode = value;
    				OnPropertyChanged(() => AccessPortalMultiFactorMode);
    			}
    		}
    	}
    }
    
}
