//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class MercScpIdReport : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class MercScpIdReport
        {
        	public MercScpIdReport() : base()
        	{
        		Initialize();
        	}
        
        	public MercScpIdReport(MercScpIdReport e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        }
        
        	public void Initialize(MercScpIdReport e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.MercScpIdReportUid = e.MercScpIdReportUid;
        		this.MacAddress = e.MacAddress;
        		this.DriverSpcId = e.DriverSpcId;
        		this.ScpId = e.ScpId;
        		this.SerialNumber = e.SerialNumber;
        		this.DeviceId = e.DeviceId;
        		this.DeviceVersion = e.DeviceVersion;
        		this.SoftwareRevisionMajor = e.SoftwareRevisionMajor;
        		this.SoftwareRevisionMinor = e.SoftwareRevisionMinor;
        		this.CumulativeBuildCount = e.CumulativeBuildCount;
        		this.NeedsConfiguration = e.NeedsConfiguration;
        		this.TlsStatus = e.TlsStatus;
        		this.OemCode = e.OemCode;
        		this.CurrentOperatingMode = e.CurrentOperatingMode;
        		this.Input1State = e.Input1State;
        		this.Input2State = e.Input2State;
        		this.Input3State = e.Input3State;
        		this.BioDb1Active = e.BioDb1Active;
        		this.BioDb1Max = e.BioDb1Max;
        		this.BioDb2Active = e.BioDb2Active;
        		this.BioDb2Max = e.BioDb2Max;
        		this.AssetDbActive = e.AssetDbActive;
        		this.AssetDbMax = e.AssetDbMax;
        		this.FirmwareAdvisory = e.FirmwareAdvisory;
        		this.DipSwitchCurrent = e.DipSwitchCurrent;
        		this.DipSwitchPowerUp = e.DipSwitchPowerUp;
        		this.DbActiveRecords = e.DbActiveRecords;
        		this.DbMaxSize = e.DbMaxSize;
        		this.CurrentClock = e.CurrentClock;
        		this.RamFree = e.RamFree;
        		this.RamSize = e.RamSize;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		
        	}
        
        	public MercScpIdReport Clone(MercScpIdReport e)
        	{
        		return new MercScpIdReport(e);
        	}
        
        	public bool Equals(MercScpIdReport other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(MercScpIdReport other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.MercScpIdReportUid != this.MercScpIdReportUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _mercScpIdReportUid;
    
    	[DataMember]
    	public System.Guid MercScpIdReportUid
    	{ 
    		get { return _mercScpIdReportUid; }
    		set
    		{
    			if (_mercScpIdReportUid != value )
    			{
    				_mercScpIdReportUid = value;
    				OnPropertyChanged(() => MercScpIdReportUid);
    			}
    		}
    	}
    	
    	private string _macAddress;
    
    	[DataMember]
    	public string MacAddress
    	{ 
    		get { return _macAddress; }
    		set
    		{
    			if (_macAddress != value )
    			{
    				_macAddress = value;
    				OnPropertyChanged(() => MacAddress);
    			}
    		}
    	}
    	
    	private int _driverSpcId;
    
    	[DataMember]
    	public int DriverSpcId
    	{ 
    		get { return _driverSpcId; }
    		set
    		{
    			if (_driverSpcId != value )
    			{
    				_driverSpcId = value;
    				OnPropertyChanged(() => DriverSpcId);
    			}
    		}
    	}
    	
    	private int _scpId;
    
    	[DataMember]
    	public int ScpId
    	{ 
    		get { return _scpId; }
    		set
    		{
    			if (_scpId != value )
    			{
    				_scpId = value;
    				OnPropertyChanged(() => ScpId);
    			}
    		}
    	}
    	
    	private string _serialNumber;
    
    	[DataMember]
    	public string SerialNumber
    	{ 
    		get { return _serialNumber; }
    		set
    		{
    			if (_serialNumber != value )
    			{
    				_serialNumber = value;
    				OnPropertyChanged(() => SerialNumber);
    			}
    		}
    	}
    	
    	private string _deviceId;
    
    	[DataMember]
    	public string DeviceId
    	{ 
    		get { return _deviceId; }
    		set
    		{
    			if (_deviceId != value )
    			{
    				_deviceId = value;
    				OnPropertyChanged(() => DeviceId);
    			}
    		}
    	}
    	
    	private string _deviceVersion;
    
    	[DataMember]
    	public string DeviceVersion
    	{ 
    		get { return _deviceVersion; }
    		set
    		{
    			if (_deviceVersion != value )
    			{
    				_deviceVersion = value;
    				OnPropertyChanged(() => DeviceVersion);
    			}
    		}
    	}
    	
    	private int _softwareRevisionMajor;
    
    	[DataMember]
    	public int SoftwareRevisionMajor
    	{ 
    		get { return _softwareRevisionMajor; }
    		set
    		{
    			if (_softwareRevisionMajor != value )
    			{
    				_softwareRevisionMajor = value;
    				OnPropertyChanged(() => SoftwareRevisionMajor);
    			}
    		}
    	}
    	
    	private int _softwareRevisionMinor;
    
    	[DataMember]
    	public int SoftwareRevisionMinor
    	{ 
    		get { return _softwareRevisionMinor; }
    		set
    		{
    			if (_softwareRevisionMinor != value )
    			{
    				_softwareRevisionMinor = value;
    				OnPropertyChanged(() => SoftwareRevisionMinor);
    			}
    		}
    	}
    	
    	private int _cumulativeBuildCount;
    
    	[DataMember]
    	public int CumulativeBuildCount
    	{ 
    		get { return _cumulativeBuildCount; }
    		set
    		{
    			if (_cumulativeBuildCount != value )
    			{
    				_cumulativeBuildCount = value;
    				OnPropertyChanged(() => CumulativeBuildCount);
    			}
    		}
    	}
    	
    	private bool _needsConfiguration;
    
    	[DataMember]
    	public bool NeedsConfiguration
    	{ 
    		get { return _needsConfiguration; }
    		set
    		{
    			if (_needsConfiguration != value )
    			{
    				_needsConfiguration = value;
    				OnPropertyChanged(() => NeedsConfiguration);
    			}
    		}
    	}
    	
    	private string _tlsStatus;
    
    	[DataMember]
    	public string TlsStatus
    	{ 
    		get { return _tlsStatus; }
    		set
    		{
    			if (_tlsStatus != value )
    			{
    				_tlsStatus = value;
    				OnPropertyChanged(() => TlsStatus);
    			}
    		}
    	}
    	
    	private int _oemCode;
    
    	[DataMember]
    	public int OemCode
    	{ 
    		get { return _oemCode; }
    		set
    		{
    			if (_oemCode != value )
    			{
    				_oemCode = value;
    				OnPropertyChanged(() => OemCode);
    			}
    		}
    	}
    	
    	private short _currentOperatingMode;
    
    	[DataMember]
    	public short CurrentOperatingMode
    	{ 
    		get { return _currentOperatingMode; }
    		set
    		{
    			if (_currentOperatingMode != value )
    			{
    				_currentOperatingMode = value;
    				OnPropertyChanged(() => CurrentOperatingMode);
    			}
    		}
    	}
    	
    	private short _input1State;
    
    	[DataMember]
    	public short Input1State
    	{ 
    		get { return _input1State; }
    		set
    		{
    			if (_input1State != value )
    			{
    				_input1State = value;
    				OnPropertyChanged(() => Input1State);
    			}
    		}
    	}
    	
    	private short _input2State;
    
    	[DataMember]
    	public short Input2State
    	{ 
    		get { return _input2State; }
    		set
    		{
    			if (_input2State != value )
    			{
    				_input2State = value;
    				OnPropertyChanged(() => Input2State);
    			}
    		}
    	}
    	
    	private short _input3State;
    
    	[DataMember]
    	public short Input3State
    	{ 
    		get { return _input3State; }
    		set
    		{
    			if (_input3State != value )
    			{
    				_input3State = value;
    				OnPropertyChanged(() => Input3State);
    			}
    		}
    	}
    	
    	private int _bioDb1Active;
    
    	[DataMember]
    	public int BioDb1Active
    	{ 
    		get { return _bioDb1Active; }
    		set
    		{
    			if (_bioDb1Active != value )
    			{
    				_bioDb1Active = value;
    				OnPropertyChanged(() => BioDb1Active);
    			}
    		}
    	}
    	
    	private int _bioDb1Max;
    
    	[DataMember]
    	public int BioDb1Max
    	{ 
    		get { return _bioDb1Max; }
    		set
    		{
    			if (_bioDb1Max != value )
    			{
    				_bioDb1Max = value;
    				OnPropertyChanged(() => BioDb1Max);
    			}
    		}
    	}
    	
    	private int _bioDb2Active;
    
    	[DataMember]
    	public int BioDb2Active
    	{ 
    		get { return _bioDb2Active; }
    		set
    		{
    			if (_bioDb2Active != value )
    			{
    				_bioDb2Active = value;
    				OnPropertyChanged(() => BioDb2Active);
    			}
    		}
    	}
    	
    	private int _bioDb2Max;
    
    	[DataMember]
    	public int BioDb2Max
    	{ 
    		get { return _bioDb2Max; }
    		set
    		{
    			if (_bioDb2Max != value )
    			{
    				_bioDb2Max = value;
    				OnPropertyChanged(() => BioDb2Max);
    			}
    		}
    	}
    	
    	private int _assetDbActive;
    
    	[DataMember]
    	public int AssetDbActive
    	{ 
    		get { return _assetDbActive; }
    		set
    		{
    			if (_assetDbActive != value )
    			{
    				_assetDbActive = value;
    				OnPropertyChanged(() => AssetDbActive);
    			}
    		}
    	}
    	
    	private int _assetDbMax;
    
    	[DataMember]
    	public int AssetDbMax
    	{ 
    		get { return _assetDbMax; }
    		set
    		{
    			if (_assetDbMax != value )
    			{
    				_assetDbMax = value;
    				OnPropertyChanged(() => AssetDbMax);
    			}
    		}
    	}
    	
    	private string _firmwareAdvisory;
    
    	[DataMember]
    	public string FirmwareAdvisory
    	{ 
    		get { return _firmwareAdvisory; }
    		set
    		{
    			if (_firmwareAdvisory != value )
    			{
    				_firmwareAdvisory = value;
    				OnPropertyChanged(() => FirmwareAdvisory);
    			}
    		}
    	}
    	
    	private short _dipSwitchCurrent;
    
    	[DataMember]
    	public short DipSwitchCurrent
    	{ 
    		get { return _dipSwitchCurrent; }
    		set
    		{
    			if (_dipSwitchCurrent != value )
    			{
    				_dipSwitchCurrent = value;
    				OnPropertyChanged(() => DipSwitchCurrent);
    			}
    		}
    	}
    	
    	private short _dipSwitchPowerUp;
    
    	[DataMember]
    	public short DipSwitchPowerUp
    	{ 
    		get { return _dipSwitchPowerUp; }
    		set
    		{
    			if (_dipSwitchPowerUp != value )
    			{
    				_dipSwitchPowerUp = value;
    				OnPropertyChanged(() => DipSwitchPowerUp);
    			}
    		}
    	}
    	
    	private int _dbActiveRecords;
    
    	[DataMember]
    	public int DbActiveRecords
    	{ 
    		get { return _dbActiveRecords; }
    		set
    		{
    			if (_dbActiveRecords != value )
    			{
    				_dbActiveRecords = value;
    				OnPropertyChanged(() => DbActiveRecords);
    			}
    		}
    	}
    	
    	private int _dbMaxSize;
    
    	[DataMember]
    	public int DbMaxSize
    	{ 
    		get { return _dbMaxSize; }
    		set
    		{
    			if (_dbMaxSize != value )
    			{
    				_dbMaxSize = value;
    				OnPropertyChanged(() => DbMaxSize);
    			}
    		}
    	}
    	
    	private long _currentClock;
    
    	[DataMember]
    	public long CurrentClock
    	{ 
    		get { return _currentClock; }
    		set
    		{
    			if (_currentClock != value )
    			{
    				_currentClock = value;
    				OnPropertyChanged(() => CurrentClock);
    			}
    		}
    	}
    	
    	private int _ramFree;
    
    	[DataMember]
    	public int RamFree
    	{ 
    		get { return _ramFree; }
    		set
    		{
    			if (_ramFree != value )
    			{
    				_ramFree = value;
    				OnPropertyChanged(() => RamFree);
    			}
    		}
    	}
    	
    	private int _ramSize;
    
    	[DataMember]
    	public int RamSize
    	{ 
    		get { return _ramSize; }
    		set
    		{
    			if (_ramSize != value )
    			{
    				_ramSize = value;
    				OnPropertyChanged(() => RamSize);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private System.DateTime _insertDate;
    
    	[DataMember]
    	public System.DateTime InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    }
    
}
