//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class gcsUser : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class gcsUser
        {
        	public gcsUser() : base()
        	{
        		Initialize();
        	}
        
        	public gcsUser(gcsUser e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        		this.gcsUserSettings = new HashSet<gcsUserSetting>();
        		this.gcsUserOldPasswords = new HashSet<gcsUserOldPassword>();
        		this.gcsUserEntities = new HashSet<gcsUserEntity>();
        		this.gcsUserSessions = new HashSet<gcsUserSession>();
        		this.ClusterCommandAudits = new HashSet<ClusterCommandAudit>();
        		this.GalaxyPanelCommandAudits = new HashSet<GalaxyPanelCommandAudit>();
        		this.AccessPortalCommandAudits = new HashSet<AccessPortalCommandAudit>();
        		this.InputCommandAudits = new HashSet<InputCommandAudit>();
        		this.InputOutputGroupCommandAudits = new HashSet<InputOutputGroupCommandAudit>();
        		this.OutputCommandAudits = new HashSet<OutputCommandAudit>();
        		this.GalaxyInterfaceBoardSectionCommandAudits = new HashSet<GalaxyInterfaceBoardSectionCommandAudit>();
        		this.gcsUserUserGroups = new HashSet<gcsUserUserGroup>();
        }
        
        	public void Initialize(gcsUser e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.UserId = e.UserId;
        		this.LanguageId = e.LanguageId;
        		this.PrimaryEntityId = e.PrimaryEntityId;
        		this.FirstName = e.FirstName;
        		this.LastName = e.LastName;
        		this.UserInitials = e.UserInitials;
        		this.DisplayName = e.DisplayName;
        		this.UserPassword = e.UserPassword;
        		this.LastLoginDate = e.LastLoginDate;
        		this.UserTheme = e.UserTheme;
        		this.IsLockedOut = e.IsLockedOut;
        		this.IsActive = e.IsActive;
        		this.ResetPasswordFlag = e.ResetPasswordFlag;
        		this.LastPasswordResetDate = e.LastPasswordResetDate;
        		this.UserActivationDate = e.UserActivationDate;
        		this.UserExpirationDate = e.UserExpirationDate;
        		this.ImportedFromActiveDirectory = e.ImportedFromActiveDirectory;
        		this.ActiveDirectoryObjectGuid = e.ActiveDirectoryObjectGuid;
        		this.SecurityImage = e.SecurityImage;
        		this.UserImage = e.UserImage;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.Email = e.Email;
        		this.UserName = e.UserName;
        		this.AccessFailedCount = e.AccessFailedCount;
        		this.ConcurrencyStamp = e.ConcurrencyStamp;
        		this.EmailConfirmed = e.EmailConfirmed;
        		this.LockoutEnabled = e.LockoutEnabled;
        		this.LockoutEnd = e.LockoutEnd;
        		this.NormalizedEmail = e.NormalizedEmail;
        		this.NormalizedUserName = e.NormalizedUserName;
        		this.PhoneNumber = e.PhoneNumber;
        		this.PhoneNumberConfirmed = e.PhoneNumberConfirmed;
        		this.SecurityStamp = e.SecurityStamp;
        		this.TwoFactorEnabled = e.TwoFactorEnabled;
        		this.PasswordHash = e.PasswordHash;
        		this.IsLockedOutClearedDate = e.IsLockedOutClearedDate;
        		this.PasswordResetToken = e.PasswordResetToken;
        		this.PasswordResetTokenExpiration = e.PasswordResetTokenExpiration;
        		this.gcsUserSettings = e.gcsUserSettings.ToCollection();
        		this.gcsUserOldPasswords = e.gcsUserOldPasswords.ToCollection();
        		this.gcsUserEntities = e.gcsUserEntities.ToCollection();
        		this.gcsUserSessions = e.gcsUserSessions.ToCollection();
        		this.ClusterCommandAudits = e.ClusterCommandAudits.ToCollection();
        		this.GalaxyPanelCommandAudits = e.GalaxyPanelCommandAudits.ToCollection();
        		this.AccessPortalCommandAudits = e.AccessPortalCommandAudits.ToCollection();
        		this.InputCommandAudits = e.InputCommandAudits.ToCollection();
        		this.InputOutputGroupCommandAudits = e.InputOutputGroupCommandAudits.ToCollection();
        		this.OutputCommandAudits = e.OutputCommandAudits.ToCollection();
        		this.GalaxyInterfaceBoardSectionCommandAudits = e.GalaxyInterfaceBoardSectionCommandAudits.ToCollection();
        		this.gcsUserUserGroups = e.gcsUserUserGroups.ToCollection();
        		
        	}
        
        	public gcsUser Clone(gcsUser e)
        	{
        		return new gcsUser(e);
        	}
        
        	public bool Equals(gcsUser other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(gcsUser other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.UserId != this.UserId )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _userId;
    
    	[DataMember]
    	public System.Guid UserId
    	{ 
    		get { return _userId; }
    		set
    		{
    			if (_userId != value )
    			{
    				_userId = value;
    				OnPropertyChanged(() => UserId);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _languageId;
    
    	[DataMember]
    	public Nullable<System.Guid> LanguageId
    	{ 
    		get { return _languageId; }
    		set
    		{
    			if (_languageId != value )
    			{
    				_languageId = value;
    				OnPropertyChanged(() => LanguageId);
    			}
    		}
    	}
    	
    	private System.Guid _primaryEntityId;
    
    	[DataMember]
    	public System.Guid PrimaryEntityId
    	{ 
    		get { return _primaryEntityId; }
    		set
    		{
    			if (_primaryEntityId != value )
    			{
    				_primaryEntityId = value;
    				OnPropertyChanged(() => PrimaryEntityId);
    			}
    		}
    	}
    	
    	private string _firstName;
    
    	[DataMember]
    	public string FirstName
    	{ 
    		get { return _firstName; }
    		set
    		{
    			if (_firstName != value )
    			{
    				_firstName = value;
    				OnPropertyChanged(() => FirstName);
    			}
    		}
    	}
    	
    	private string _lastName;
    
    	[DataMember]
    	public string LastName
    	{ 
    		get { return _lastName; }
    		set
    		{
    			if (_lastName != value )
    			{
    				_lastName = value;
    				OnPropertyChanged(() => LastName);
    			}
    		}
    	}
    	
    	private string _userInitials;
    
    	[DataMember]
    	public string UserInitials
    	{ 
    		get { return _userInitials; }
    		set
    		{
    			if (_userInitials != value )
    			{
    				_userInitials = value;
    				OnPropertyChanged(() => UserInitials);
    			}
    		}
    	}
    	
    	private string _displayName;
    
    	[DataMember]
    	public string DisplayName
    	{ 
    		get { return _displayName; }
    		set
    		{
    			if (_displayName != value )
    			{
    				_displayName = value;
    				OnPropertyChanged(() => DisplayName);
    			}
    		}
    	}
    	
    	private string _userPassword;
    
    	[DataMember]
    	public string UserPassword
    	{ 
    		get { return _userPassword; }
    		set
    		{
    			if (_userPassword != value )
    			{
    				_userPassword = value;
    				OnPropertyChanged(() => UserPassword);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _lastLoginDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> LastLoginDate
    	{ 
    		get { return _lastLoginDate; }
    		set
    		{
    			if (_lastLoginDate != value )
    			{
    				_lastLoginDate = value;
    				OnPropertyChanged(() => LastLoginDate);
    			}
    		}
    	}
    	
    	private string _userTheme;
    
    	[DataMember]
    	public string UserTheme
    	{ 
    		get { return _userTheme; }
    		set
    		{
    			if (_userTheme != value )
    			{
    				_userTheme = value;
    				OnPropertyChanged(() => UserTheme);
    			}
    		}
    	}
    	
    	private bool _isLockedOut;
    
    	[DataMember]
    	public bool IsLockedOut
    	{ 
    		get { return _isLockedOut; }
    		set
    		{
    			if (_isLockedOut != value )
    			{
    				_isLockedOut = value;
    				OnPropertyChanged(() => IsLockedOut);
    			}
    		}
    	}
    	
    	private bool _isActive;
    
    	[DataMember]
    	public bool IsActive
    	{ 
    		get { return _isActive; }
    		set
    		{
    			if (_isActive != value )
    			{
    				_isActive = value;
    				OnPropertyChanged(() => IsActive);
    			}
    		}
    	}
    	
    	private bool _resetPasswordFlag;
    
    	[DataMember]
    	public bool ResetPasswordFlag
    	{ 
    		get { return _resetPasswordFlag; }
    		set
    		{
    			if (_resetPasswordFlag != value )
    			{
    				_resetPasswordFlag = value;
    				OnPropertyChanged(() => ResetPasswordFlag);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _lastPasswordResetDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> LastPasswordResetDate
    	{ 
    		get { return _lastPasswordResetDate; }
    		set
    		{
    			if (_lastPasswordResetDate != value )
    			{
    				_lastPasswordResetDate = value;
    				OnPropertyChanged(() => LastPasswordResetDate);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _userActivationDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UserActivationDate
    	{ 
    		get { return _userActivationDate; }
    		set
    		{
    			if (_userActivationDate != value )
    			{
    				_userActivationDate = value;
    				OnPropertyChanged(() => UserActivationDate);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _userExpirationDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UserExpirationDate
    	{ 
    		get { return _userExpirationDate; }
    		set
    		{
    			if (_userExpirationDate != value )
    			{
    				_userExpirationDate = value;
    				OnPropertyChanged(() => UserExpirationDate);
    			}
    		}
    	}
    	
    	private bool _importedFromActiveDirectory;
    
    	[DataMember]
    	public bool ImportedFromActiveDirectory
    	{ 
    		get { return _importedFromActiveDirectory; }
    		set
    		{
    			if (_importedFromActiveDirectory != value )
    			{
    				_importedFromActiveDirectory = value;
    				OnPropertyChanged(() => ImportedFromActiveDirectory);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _activeDirectoryObjectGuid;
    
    	[DataMember]
    	public Nullable<System.Guid> ActiveDirectoryObjectGuid
    	{ 
    		get { return _activeDirectoryObjectGuid; }
    		set
    		{
    			if (_activeDirectoryObjectGuid != value )
    			{
    				_activeDirectoryObjectGuid = value;
    				OnPropertyChanged(() => ActiveDirectoryObjectGuid);
    			}
    		}
    	}
    	
    	private byte[] _securityImage;
    
    	[DataMember]
    	public byte[] SecurityImage
    	{ 
    		get { return _securityImage; }
    		set
    		{
    			if (_securityImage != value )
    			{
    				_securityImage = value;
    				OnPropertyChanged(() => SecurityImage);
    			}
    		}
    	}
    	
    	private byte[] _userImage;
    
    	[DataMember]
    	public byte[] UserImage
    	{ 
    		get { return _userImage; }
    		set
    		{
    			if (_userImage != value )
    			{
    				_userImage = value;
    				OnPropertyChanged(() => UserImage);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    	
    	private string _email;
    
    	[DataMember]
    	public string Email
    	{ 
    		get { return _email; }
    		set
    		{
    			if (_email != value )
    			{
    				_email = value;
    				OnPropertyChanged(() => Email);
    			}
    		}
    	}
    	
    	private string _userName;
    
    	[DataMember]
    	public string UserName
    	{ 
    		get { return _userName; }
    		set
    		{
    			if (_userName != value )
    			{
    				_userName = value;
    				OnPropertyChanged(() => UserName);
    			}
    		}
    	}
    	
    	private int _accessFailedCount;
    
    	[DataMember]
    	public int AccessFailedCount
    	{ 
    		get { return _accessFailedCount; }
    		set
    		{
    			if (_accessFailedCount != value )
    			{
    				_accessFailedCount = value;
    				OnPropertyChanged(() => AccessFailedCount);
    			}
    		}
    	}
    	
    	private string _concurrencyStamp;
    
    	[DataMember]
    	public string ConcurrencyStamp
    	{ 
    		get { return _concurrencyStamp; }
    		set
    		{
    			if (_concurrencyStamp != value )
    			{
    				_concurrencyStamp = value;
    				OnPropertyChanged(() => ConcurrencyStamp);
    			}
    		}
    	}
    	
    	private bool _emailConfirmed;
    
    	[DataMember]
    	public bool EmailConfirmed
    	{ 
    		get { return _emailConfirmed; }
    		set
    		{
    			if (_emailConfirmed != value )
    			{
    				_emailConfirmed = value;
    				OnPropertyChanged(() => EmailConfirmed);
    			}
    		}
    	}
    	
    	private bool _lockoutEnabled;
    
    	[DataMember]
    	public bool LockoutEnabled
    	{ 
    		get { return _lockoutEnabled; }
    		set
    		{
    			if (_lockoutEnabled != value )
    			{
    				_lockoutEnabled = value;
    				OnPropertyChanged(() => LockoutEnabled);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTimeOffset> _lockoutEnd;
    
    	[DataMember]
    	public Nullable<System.DateTimeOffset> LockoutEnd
    	{ 
    		get { return _lockoutEnd; }
    		set
    		{
    			if (_lockoutEnd != value )
    			{
    				_lockoutEnd = value;
    				OnPropertyChanged(() => LockoutEnd);
    			}
    		}
    	}
    	
    	private string _normalizedEmail;
    
    	[DataMember]
    	public string NormalizedEmail
    	{ 
    		get { return _normalizedEmail; }
    		set
    		{
    			if (_normalizedEmail != value )
    			{
    				_normalizedEmail = value;
    				OnPropertyChanged(() => NormalizedEmail);
    			}
    		}
    	}
    	
    	private string _normalizedUserName;
    
    	[DataMember]
    	public string NormalizedUserName
    	{ 
    		get { return _normalizedUserName; }
    		set
    		{
    			if (_normalizedUserName != value )
    			{
    				_normalizedUserName = value;
    				OnPropertyChanged(() => NormalizedUserName);
    			}
    		}
    	}
    	
    	private string _phoneNumber;
    
    	[DataMember]
    	public string PhoneNumber
    	{ 
    		get { return _phoneNumber; }
    		set
    		{
    			if (_phoneNumber != value )
    			{
    				_phoneNumber = value;
    				OnPropertyChanged(() => PhoneNumber);
    			}
    		}
    	}
    	
    	private bool _phoneNumberConfirmed;
    
    	[DataMember]
    	public bool PhoneNumberConfirmed
    	{ 
    		get { return _phoneNumberConfirmed; }
    		set
    		{
    			if (_phoneNumberConfirmed != value )
    			{
    				_phoneNumberConfirmed = value;
    				OnPropertyChanged(() => PhoneNumberConfirmed);
    			}
    		}
    	}
    	
    	private string _securityStamp;
    
    	[DataMember]
    	public string SecurityStamp
    	{ 
    		get { return _securityStamp; }
    		set
    		{
    			if (_securityStamp != value )
    			{
    				_securityStamp = value;
    				OnPropertyChanged(() => SecurityStamp);
    			}
    		}
    	}
    	
    	private bool _twoFactorEnabled;
    
    	[DataMember]
    	public bool TwoFactorEnabled
    	{ 
    		get { return _twoFactorEnabled; }
    		set
    		{
    			if (_twoFactorEnabled != value )
    			{
    				_twoFactorEnabled = value;
    				OnPropertyChanged(() => TwoFactorEnabled);
    			}
    		}
    	}
    	
    	private string _passwordHash;
    
    	[DataMember]
    	public string PasswordHash
    	{ 
    		get { return _passwordHash; }
    		set
    		{
    			if (_passwordHash != value )
    			{
    				_passwordHash = value;
    				OnPropertyChanged(() => PasswordHash);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTimeOffset> _isLockedOutClearedDate;
    
    	[DataMember]
    	public Nullable<System.DateTimeOffset> IsLockedOutClearedDate
    	{ 
    		get { return _isLockedOutClearedDate; }
    		set
    		{
    			if (_isLockedOutClearedDate != value )
    			{
    				_isLockedOutClearedDate = value;
    				OnPropertyChanged(() => IsLockedOutClearedDate);
    			}
    		}
    	}
    	
    	private string _passwordResetToken;
    
    	[DataMember]
    	public string PasswordResetToken
    	{ 
    		get { return _passwordResetToken; }
    		set
    		{
    			if (_passwordResetToken != value )
    			{
    				_passwordResetToken = value;
    				OnPropertyChanged(() => PasswordResetToken);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTimeOffset> _passwordResetTokenExpiration;
    
    	[DataMember]
    	public Nullable<System.DateTimeOffset> PasswordResetTokenExpiration
    	{ 
    		get { return _passwordResetTokenExpiration; }
    		set
    		{
    			if (_passwordResetTokenExpiration != value )
    			{
    				_passwordResetTokenExpiration = value;
    				OnPropertyChanged(() => PasswordResetTokenExpiration);
    			}
    		}
    	}
    
    	
    	private ICollection<gcsUserSetting> _gcsUserSettings;
    
    	[DataMember]
    	public virtual ICollection<gcsUserSetting> gcsUserSettings
    	{ 
    		get { return _gcsUserSettings; }
    		set
    		{
    			if (_gcsUserSettings != value )
    			{
    				_gcsUserSettings = value;
    				OnPropertyChanged(() => gcsUserSettings);
    			}
    		}
    	}
    	
    	private ICollection<gcsUserOldPassword> _gcsUserOldPasswords;
    
    	[DataMember]
    	public virtual ICollection<gcsUserOldPassword> gcsUserOldPasswords
    	{ 
    		get { return _gcsUserOldPasswords; }
    		set
    		{
    			if (_gcsUserOldPasswords != value )
    			{
    				_gcsUserOldPasswords = value;
    				OnPropertyChanged(() => gcsUserOldPasswords);
    			}
    		}
    	}
    	
    	private ICollection<gcsUserEntity> _gcsUserEntities;
    
    	[DataMember]
    	public virtual ICollection<gcsUserEntity> gcsUserEntities
    	{ 
    		get { return _gcsUserEntities; }
    		set
    		{
    			if (_gcsUserEntities != value )
    			{
    				_gcsUserEntities = value;
    				OnPropertyChanged(() => gcsUserEntities);
    			}
    		}
    	}
    	
    	private ICollection<gcsUserSession> _gcsUserSessions;
    
    	[DataMember]
    	public virtual ICollection<gcsUserSession> gcsUserSessions
    	{ 
    		get { return _gcsUserSessions; }
    		set
    		{
    			if (_gcsUserSessions != value )
    			{
    				_gcsUserSessions = value;
    				OnPropertyChanged(() => gcsUserSessions);
    			}
    		}
    	}
    	
    	private ICollection<ClusterCommandAudit> _clusterCommandAudits;
    
    	[DataMember]
    	public virtual ICollection<ClusterCommandAudit> ClusterCommandAudits
    	{ 
    		get { return _clusterCommandAudits; }
    		set
    		{
    			if (_clusterCommandAudits != value )
    			{
    				_clusterCommandAudits = value;
    				OnPropertyChanged(() => ClusterCommandAudits);
    			}
    		}
    	}
    	
    	private ICollection<GalaxyPanelCommandAudit> _galaxyPanelCommandAudits;
    
    	[DataMember]
    	public virtual ICollection<GalaxyPanelCommandAudit> GalaxyPanelCommandAudits
    	{ 
    		get { return _galaxyPanelCommandAudits; }
    		set
    		{
    			if (_galaxyPanelCommandAudits != value )
    			{
    				_galaxyPanelCommandAudits = value;
    				OnPropertyChanged(() => GalaxyPanelCommandAudits);
    			}
    		}
    	}
    	
    	private ICollection<AccessPortalCommandAudit> _accessPortalCommandAudits;
    
    	[DataMember]
    	public virtual ICollection<AccessPortalCommandAudit> AccessPortalCommandAudits
    	{ 
    		get { return _accessPortalCommandAudits; }
    		set
    		{
    			if (_accessPortalCommandAudits != value )
    			{
    				_accessPortalCommandAudits = value;
    				OnPropertyChanged(() => AccessPortalCommandAudits);
    			}
    		}
    	}
    	
    	private ICollection<InputCommandAudit> _inputCommandAudits;
    
    	[DataMember]
    	public virtual ICollection<InputCommandAudit> InputCommandAudits
    	{ 
    		get { return _inputCommandAudits; }
    		set
    		{
    			if (_inputCommandAudits != value )
    			{
    				_inputCommandAudits = value;
    				OnPropertyChanged(() => InputCommandAudits);
    			}
    		}
    	}
    	
    	private ICollection<InputOutputGroupCommandAudit> _inputOutputGroupCommandAudits;
    
    	[DataMember]
    	public virtual ICollection<InputOutputGroupCommandAudit> InputOutputGroupCommandAudits
    	{ 
    		get { return _inputOutputGroupCommandAudits; }
    		set
    		{
    			if (_inputOutputGroupCommandAudits != value )
    			{
    				_inputOutputGroupCommandAudits = value;
    				OnPropertyChanged(() => InputOutputGroupCommandAudits);
    			}
    		}
    	}
    	
    	private ICollection<OutputCommandAudit> _outputCommandAudits;
    
    	[DataMember]
    	public virtual ICollection<OutputCommandAudit> OutputCommandAudits
    	{ 
    		get { return _outputCommandAudits; }
    		set
    		{
    			if (_outputCommandAudits != value )
    			{
    				_outputCommandAudits = value;
    				OnPropertyChanged(() => OutputCommandAudits);
    			}
    		}
    	}
    	
    	private ICollection<GalaxyInterfaceBoardSectionCommandAudit> _galaxyInterfaceBoardSectionCommandAudits;
    
    	[DataMember]
    	public virtual ICollection<GalaxyInterfaceBoardSectionCommandAudit> GalaxyInterfaceBoardSectionCommandAudits
    	{ 
    		get { return _galaxyInterfaceBoardSectionCommandAudits; }
    		set
    		{
    			if (_galaxyInterfaceBoardSectionCommandAudits != value )
    			{
    				_galaxyInterfaceBoardSectionCommandAudits = value;
    				OnPropertyChanged(() => GalaxyInterfaceBoardSectionCommandAudits);
    			}
    		}
    	}
    	
    	private ICollection<gcsUserUserGroup> _gcsUserUserGroups;
    
    	[DataMember]
    	public virtual ICollection<gcsUserUserGroup> gcsUserUserGroups
    	{ 
    		get { return _gcsUserUserGroups; }
    		set
    		{
    			if (_gcsUserUserGroups != value )
    			{
    				_gcsUserUserGroups = value;
    				OnPropertyChanged(() => gcsUserUserGroups);
    			}
    		}
    	}
    }
    
}
