//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class gcsResourceImage : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class gcsResourceImage
        {
        	public gcsResourceImage() : base()
        	{
        		Initialize();
        	}
        
        	public gcsResourceImage(gcsResourceImage e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        }
        
        	public void Initialize(gcsResourceImage e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.ResourceImageId = e.ResourceImageId;
        		this.ResourceName = e.ResourceName;
        		this.ResourceNumber = e.ResourceNumber;
        		this.ResourceClassName = e.ResourceClassName;
        		this.ImageTypeId = e.ImageTypeId;
        		this.ImageData = e.ImageData;
        		this.ImageUri = e.ImageUri;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		
        	}
        
        	public gcsResourceImage Clone(gcsResourceImage e)
        	{
        		return new gcsResourceImage(e);
        	}
        
        	public bool Equals(gcsResourceImage other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(gcsResourceImage other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.ResourceImageId != this.ResourceImageId )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _resourceImageId;
    
    	[DataMember]
    	public System.Guid ResourceImageId
    	{ 
    		get { return _resourceImageId; }
    		set
    		{
    			if (_resourceImageId != value )
    			{
    				_resourceImageId = value;
    				OnPropertyChanged(() => ResourceImageId);
    			}
    		}
    	}
    	
    	private string _resourceName;
    
    	[DataMember]
    	public string ResourceName
    	{ 
    		get { return _resourceName; }
    		set
    		{
    			if (_resourceName != value )
    			{
    				_resourceName = value;
    				OnPropertyChanged(() => ResourceName);
    			}
    		}
    	}
    	
    	private Nullable<int> _resourceNumber;
    
    	[DataMember]
    	public Nullable<int> ResourceNumber
    	{ 
    		get { return _resourceNumber; }
    		set
    		{
    			if (_resourceNumber != value )
    			{
    				_resourceNumber = value;
    				OnPropertyChanged(() => ResourceNumber);
    			}
    		}
    	}
    	
    	private string _resourceClassName;
    
    	[DataMember]
    	public string ResourceClassName
    	{ 
    		get { return _resourceClassName; }
    		set
    		{
    			if (_resourceClassName != value )
    			{
    				_resourceClassName = value;
    				OnPropertyChanged(() => ResourceClassName);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _imageTypeId;
    
    	[DataMember]
    	public Nullable<System.Guid> ImageTypeId
    	{ 
    		get { return _imageTypeId; }
    		set
    		{
    			if (_imageTypeId != value )
    			{
    				_imageTypeId = value;
    				OnPropertyChanged(() => ImageTypeId);
    			}
    		}
    	}
    	
    	private byte[] _imageData;
    
    	[DataMember]
    	public byte[] ImageData
    	{ 
    		get { return _imageData; }
    		set
    		{
    			if (_imageData != value )
    			{
    				_imageData = value;
    				OnPropertyChanged(() => ImageData);
    			}
    		}
    	}
    	
    	private string _imageUri;
    
    	[DataMember]
    	public string ImageUri
    	{ 
    		get { return _imageUri; }
    		set
    		{
    			if (_imageUri != value )
    			{
    				_imageUri = value;
    				OnPropertyChanged(() => ImageUri);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    }
    
}
