//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class InputDeviceSupervisionType : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class InputDeviceSupervisionType
        {
        	public InputDeviceSupervisionType() : base()
        	{
        		Initialize();
        	}
        
        	public InputDeviceSupervisionType(InputDeviceSupervisionType e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        		this.GalaxyInputDevices = new HashSet<GalaxyInputDevice>();
        		this.InputDeviceSupervisionTypeInterfaceBoardSectionModes = new HashSet<InputDeviceSupervisionTypeInterfaceBoardSectionMode>();
        }
        
        	public void Initialize(InputDeviceSupervisionType e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.InputDeviceSupervisionTypeUid = e.InputDeviceSupervisionTypeUid;
        		this.Display = e.Display;
        		this.DisplayResourceKey = e.DisplayResourceKey;
        		this.Description = e.Description;
        		this.DescriptionResourceKey = e.DescriptionResourceKey;
        		this.HasSeriesResistor = e.HasSeriesResistor;
        		this.HasParallelResistor = e.HasParallelResistor;
        		this.IsNormalOpen = e.IsNormalOpen;
        		this.TroubleShortThreshold = e.TroubleShortThreshold;
        		this.NormalChangeThreshold = e.NormalChangeThreshold;
        		this.TroubleOpenThreshold = e.TroubleOpenThreshold;
        		this.AlternateVoltagesEnabled = e.AlternateVoltagesEnabled;
        		this.AlternateTroubleShortThreshold = e.AlternateTroubleShortThreshold;
        		this.AlternateNormalChangeThreshold = e.AlternateNormalChangeThreshold;
        		this.AlternateTroubleOpenThreshold = e.AlternateTroubleOpenThreshold;
        		this.DisplayOrder = e.DisplayOrder;
        		this.IsDefault = e.IsDefault;
        		this.IsActive = e.IsActive;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.BinaryResourceUid = e.BinaryResourceUid;
        		this.GalaxyInputDevices = e.GalaxyInputDevices.ToCollection();
        		this.InputDeviceSupervisionTypeInterfaceBoardSectionModes = e.InputDeviceSupervisionTypeInterfaceBoardSectionModes.ToCollection();
        		
        	}
        
        	public InputDeviceSupervisionType Clone(InputDeviceSupervisionType e)
        	{
        		return new InputDeviceSupervisionType(e);
        	}
        
        	public bool Equals(InputDeviceSupervisionType other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(InputDeviceSupervisionType other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.InputDeviceSupervisionTypeUid != this.InputDeviceSupervisionTypeUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _inputDeviceSupervisionTypeUid;
    
    	[DataMember]
    	public System.Guid InputDeviceSupervisionTypeUid
    	{ 
    		get { return _inputDeviceSupervisionTypeUid; }
    		set
    		{
    			if (_inputDeviceSupervisionTypeUid != value )
    			{
    				_inputDeviceSupervisionTypeUid = value;
    				OnPropertyChanged(() => InputDeviceSupervisionTypeUid);
    			}
    		}
    	}
    	
    	private string _display;
    
    	[DataMember]
    	public string Display
    	{ 
    		get { return _display; }
    		set
    		{
    			if (_display != value )
    			{
    				_display = value;
    				OnPropertyChanged(() => Display);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _displayResourceKey;
    
    	[DataMember]
    	public Nullable<System.Guid> DisplayResourceKey
    	{ 
    		get { return _displayResourceKey; }
    		set
    		{
    			if (_displayResourceKey != value )
    			{
    				_displayResourceKey = value;
    				OnPropertyChanged(() => DisplayResourceKey);
    			}
    		}
    	}
    	
    	private string _description;
    
    	[DataMember]
    	public string Description
    	{ 
    		get { return _description; }
    		set
    		{
    			if (_description != value )
    			{
    				_description = value;
    				OnPropertyChanged(() => Description);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _descriptionResourceKey;
    
    	[DataMember]
    	public Nullable<System.Guid> DescriptionResourceKey
    	{ 
    		get { return _descriptionResourceKey; }
    		set
    		{
    			if (_descriptionResourceKey != value )
    			{
    				_descriptionResourceKey = value;
    				OnPropertyChanged(() => DescriptionResourceKey);
    			}
    		}
    	}
    	
    	private bool _hasSeriesResistor;
    
    	[DataMember]
    	public bool HasSeriesResistor
    	{ 
    		get { return _hasSeriesResistor; }
    		set
    		{
    			if (_hasSeriesResistor != value )
    			{
    				_hasSeriesResistor = value;
    				OnPropertyChanged(() => HasSeriesResistor);
    			}
    		}
    	}
    	
    	private bool _hasParallelResistor;
    
    	[DataMember]
    	public bool HasParallelResistor
    	{ 
    		get { return _hasParallelResistor; }
    		set
    		{
    			if (_hasParallelResistor != value )
    			{
    				_hasParallelResistor = value;
    				OnPropertyChanged(() => HasParallelResistor);
    			}
    		}
    	}
    	
    	private bool _isNormalOpen;
    
    	[DataMember]
    	public bool IsNormalOpen
    	{ 
    		get { return _isNormalOpen; }
    		set
    		{
    			if (_isNormalOpen != value )
    			{
    				_isNormalOpen = value;
    				OnPropertyChanged(() => IsNormalOpen);
    			}
    		}
    	}
    	
    	private short _troubleShortThreshold;
    
    	[DataMember]
    	public short TroubleShortThreshold
    	{ 
    		get { return _troubleShortThreshold; }
    		set
    		{
    			if (_troubleShortThreshold != value )
    			{
    				_troubleShortThreshold = value;
    				OnPropertyChanged(() => TroubleShortThreshold);
    			}
    		}
    	}
    	
    	private short _normalChangeThreshold;
    
    	[DataMember]
    	public short NormalChangeThreshold
    	{ 
    		get { return _normalChangeThreshold; }
    		set
    		{
    			if (_normalChangeThreshold != value )
    			{
    				_normalChangeThreshold = value;
    				OnPropertyChanged(() => NormalChangeThreshold);
    			}
    		}
    	}
    	
    	private short _troubleOpenThreshold;
    
    	[DataMember]
    	public short TroubleOpenThreshold
    	{ 
    		get { return _troubleOpenThreshold; }
    		set
    		{
    			if (_troubleOpenThreshold != value )
    			{
    				_troubleOpenThreshold = value;
    				OnPropertyChanged(() => TroubleOpenThreshold);
    			}
    		}
    	}
    	
    	private bool _alternateVoltagesEnabled;
    
    	[DataMember]
    	public bool AlternateVoltagesEnabled
    	{ 
    		get { return _alternateVoltagesEnabled; }
    		set
    		{
    			if (_alternateVoltagesEnabled != value )
    			{
    				_alternateVoltagesEnabled = value;
    				OnPropertyChanged(() => AlternateVoltagesEnabled);
    			}
    		}
    	}
    	
    	private short _alternateTroubleShortThreshold;
    
    	[DataMember]
    	public short AlternateTroubleShortThreshold
    	{ 
    		get { return _alternateTroubleShortThreshold; }
    		set
    		{
    			if (_alternateTroubleShortThreshold != value )
    			{
    				_alternateTroubleShortThreshold = value;
    				OnPropertyChanged(() => AlternateTroubleShortThreshold);
    			}
    		}
    	}
    	
    	private short _alternateNormalChangeThreshold;
    
    	[DataMember]
    	public short AlternateNormalChangeThreshold
    	{ 
    		get { return _alternateNormalChangeThreshold; }
    		set
    		{
    			if (_alternateNormalChangeThreshold != value )
    			{
    				_alternateNormalChangeThreshold = value;
    				OnPropertyChanged(() => AlternateNormalChangeThreshold);
    			}
    		}
    	}
    	
    	private short _alternateTroubleOpenThreshold;
    
    	[DataMember]
    	public short AlternateTroubleOpenThreshold
    	{ 
    		get { return _alternateTroubleOpenThreshold; }
    		set
    		{
    			if (_alternateTroubleOpenThreshold != value )
    			{
    				_alternateTroubleOpenThreshold = value;
    				OnPropertyChanged(() => AlternateTroubleOpenThreshold);
    			}
    		}
    	}
    	
    	private Nullable<int> _displayOrder;
    
    	[DataMember]
    	public Nullable<int> DisplayOrder
    	{ 
    		get { return _displayOrder; }
    		set
    		{
    			if (_displayOrder != value )
    			{
    				_displayOrder = value;
    				OnPropertyChanged(() => DisplayOrder);
    			}
    		}
    	}
    	
    	private Nullable<bool> _isDefault;
    
    	[DataMember]
    	public Nullable<bool> IsDefault
    	{ 
    		get { return _isDefault; }
    		set
    		{
    			if (_isDefault != value )
    			{
    				_isDefault = value;
    				OnPropertyChanged(() => IsDefault);
    			}
    		}
    	}
    	
    	private Nullable<bool> _isActive;
    
    	[DataMember]
    	public Nullable<bool> IsActive
    	{ 
    		get { return _isActive; }
    		set
    		{
    			if (_isActive != value )
    			{
    				_isActive = value;
    				OnPropertyChanged(() => IsActive);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _binaryResourceUid;
    
    	[DataMember]
    	public Nullable<System.Guid> BinaryResourceUid
    	{ 
    		get { return _binaryResourceUid; }
    		set
    		{
    			if (_binaryResourceUid != value )
    			{
    				_binaryResourceUid = value;
    				OnPropertyChanged(() => BinaryResourceUid);
    			}
    		}
    	}
    
    	
    	private gcsResourceString _gcsResourceString;
    
    	[DataMember]
    	public virtual gcsResourceString gcsResourceString
    	{ 
    		get { return _gcsResourceString; }
    		set
    		{
    			if (_gcsResourceString != value )
    			{
    				_gcsResourceString = value;
    				OnPropertyChanged(() => gcsResourceString);
    			}
    		}
    	}
    	
    	private ICollection<GalaxyInputDevice> _galaxyInputDevices;
    
    	[DataMember]
    	public virtual ICollection<GalaxyInputDevice> GalaxyInputDevices
    	{ 
    		get { return _galaxyInputDevices; }
    		set
    		{
    			if (_galaxyInputDevices != value )
    			{
    				_galaxyInputDevices = value;
    				OnPropertyChanged(() => GalaxyInputDevices);
    			}
    		}
    	}
    	
    	private ICollection<InputDeviceSupervisionTypeInterfaceBoardSectionMode> _inputDeviceSupervisionTypeInterfaceBoardSectionModes;
    
    	[DataMember]
    	public virtual ICollection<InputDeviceSupervisionTypeInterfaceBoardSectionMode> InputDeviceSupervisionTypeInterfaceBoardSectionModes
    	{ 
    		get { return _inputDeviceSupervisionTypeInterfaceBoardSectionModes; }
    		set
    		{
    			if (_inputDeviceSupervisionTypeInterfaceBoardSectionModes != value )
    			{
    				_inputDeviceSupervisionTypeInterfaceBoardSectionModes = value;
    				OnPropertyChanged(() => InputDeviceSupervisionTypeInterfaceBoardSectionModes);
    			}
    		}
    	}
    }
    
}
