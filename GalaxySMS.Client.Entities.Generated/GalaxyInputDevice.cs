//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class GalaxyInputDevice : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class GalaxyInputDevice
        {
        	public GalaxyInputDevice() : base()
        	{
        		Initialize();
        	}
        
        	public GalaxyInputDevice(GalaxyInputDevice e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        		this.InputDeviceAlertEvents = new HashSet<InputDeviceAlertEvent>();
        }
        
        	public void Initialize(GalaxyInputDevice e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.InputDeviceUid = e.InputDeviceUid;
        		this.InputDeviceSupervisionTypeUid = e.InputDeviceSupervisionTypeUid;
        		this.GalaxyInputModeUid = e.GalaxyInputModeUid;
        		this.DelayDuration = e.DelayDuration;
        		this.GalaxyInputDelayTypeUid = e.GalaxyInputDelayTypeUid;
        		this.DisableDisarmedOnOffLogEvents = e.DisableDisarmedOnOffLogEvents;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.IsNormalOpen = e.IsNormalOpen;
        		this.NormalChangeThreshold = e.NormalChangeThreshold;
        		this.TroubleOpenThreshold = e.TroubleOpenThreshold;
        		this.AlternateVoltagesEnabled = e.AlternateVoltagesEnabled;
        		this.AlternateTroubleShortThreshold = e.AlternateTroubleShortThreshold;
        		this.AlternateNormalChangeThreshold = e.AlternateNormalChangeThreshold;
        		this.AlternateTroubleOpenThreshold = e.AlternateTroubleOpenThreshold;
        		this.TroubleShortThreshold = e.TroubleShortThreshold;
        		this.InputDeviceAlertEvents = e.InputDeviceAlertEvents.ToCollection();
        		
        	}
        
        	public GalaxyInputDevice Clone(GalaxyInputDevice e)
        	{
        		return new GalaxyInputDevice(e);
        	}
        
        	public bool Equals(GalaxyInputDevice other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(GalaxyInputDevice other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.InputDeviceUid != this.InputDeviceUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _inputDeviceUid;
    
    	[DataMember]
    	public System.Guid InputDeviceUid
    	{ 
    		get { return _inputDeviceUid; }
    		set
    		{
    			if (_inputDeviceUid != value )
    			{
    				_inputDeviceUid = value;
    				OnPropertyChanged(() => InputDeviceUid);
    			}
    		}
    	}
    	
    	private System.Guid _inputDeviceSupervisionTypeUid;
    
    	[DataMember]
    	public System.Guid InputDeviceSupervisionTypeUid
    	{ 
    		get { return _inputDeviceSupervisionTypeUid; }
    		set
    		{
    			if (_inputDeviceSupervisionTypeUid != value )
    			{
    				_inputDeviceSupervisionTypeUid = value;
    				OnPropertyChanged(() => InputDeviceSupervisionTypeUid);
    			}
    		}
    	}
    	
    	private System.Guid _galaxyInputModeUid;
    
    	[DataMember]
    	public System.Guid GalaxyInputModeUid
    	{ 
    		get { return _galaxyInputModeUid; }
    		set
    		{
    			if (_galaxyInputModeUid != value )
    			{
    				_galaxyInputModeUid = value;
    				OnPropertyChanged(() => GalaxyInputModeUid);
    			}
    		}
    	}
    	
    	private int _delayDuration;
    
    	[DataMember]
    	public int DelayDuration
    	{ 
    		get { return _delayDuration; }
    		set
    		{
    			if (_delayDuration != value )
    			{
    				_delayDuration = value;
    				OnPropertyChanged(() => DelayDuration);
    			}
    		}
    	}
    	
    	private System.Guid _galaxyInputDelayTypeUid;
    
    	[DataMember]
    	public System.Guid GalaxyInputDelayTypeUid
    	{ 
    		get { return _galaxyInputDelayTypeUid; }
    		set
    		{
    			if (_galaxyInputDelayTypeUid != value )
    			{
    				_galaxyInputDelayTypeUid = value;
    				OnPropertyChanged(() => GalaxyInputDelayTypeUid);
    			}
    		}
    	}
    	
    	private bool _disableDisarmedOnOffLogEvents;
    
    	[DataMember]
    	public bool DisableDisarmedOnOffLogEvents
    	{ 
    		get { return _disableDisarmedOnOffLogEvents; }
    		set
    		{
    			if (_disableDisarmedOnOffLogEvents != value )
    			{
    				_disableDisarmedOnOffLogEvents = value;
    				OnPropertyChanged(() => DisableDisarmedOnOffLogEvents);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    	
    	private bool _isNormalOpen;
    
    	[DataMember]
    	public bool IsNormalOpen
    	{ 
    		get { return _isNormalOpen; }
    		set
    		{
    			if (_isNormalOpen != value )
    			{
    				_isNormalOpen = value;
    				OnPropertyChanged(() => IsNormalOpen);
    			}
    		}
    	}
    	
    	private short _normalChangeThreshold;
    
    	[DataMember]
    	public short NormalChangeThreshold
    	{ 
    		get { return _normalChangeThreshold; }
    		set
    		{
    			if (_normalChangeThreshold != value )
    			{
    				_normalChangeThreshold = value;
    				OnPropertyChanged(() => NormalChangeThreshold);
    			}
    		}
    	}
    	
    	private short _troubleOpenThreshold;
    
    	[DataMember]
    	public short TroubleOpenThreshold
    	{ 
    		get { return _troubleOpenThreshold; }
    		set
    		{
    			if (_troubleOpenThreshold != value )
    			{
    				_troubleOpenThreshold = value;
    				OnPropertyChanged(() => TroubleOpenThreshold);
    			}
    		}
    	}
    	
    	private bool _alternateVoltagesEnabled;
    
    	[DataMember]
    	public bool AlternateVoltagesEnabled
    	{ 
    		get { return _alternateVoltagesEnabled; }
    		set
    		{
    			if (_alternateVoltagesEnabled != value )
    			{
    				_alternateVoltagesEnabled = value;
    				OnPropertyChanged(() => AlternateVoltagesEnabled);
    			}
    		}
    	}
    	
    	private short _alternateTroubleShortThreshold;
    
    	[DataMember]
    	public short AlternateTroubleShortThreshold
    	{ 
    		get { return _alternateTroubleShortThreshold; }
    		set
    		{
    			if (_alternateTroubleShortThreshold != value )
    			{
    				_alternateTroubleShortThreshold = value;
    				OnPropertyChanged(() => AlternateTroubleShortThreshold);
    			}
    		}
    	}
    	
    	private short _alternateNormalChangeThreshold;
    
    	[DataMember]
    	public short AlternateNormalChangeThreshold
    	{ 
    		get { return _alternateNormalChangeThreshold; }
    		set
    		{
    			if (_alternateNormalChangeThreshold != value )
    			{
    				_alternateNormalChangeThreshold = value;
    				OnPropertyChanged(() => AlternateNormalChangeThreshold);
    			}
    		}
    	}
    	
    	private short _alternateTroubleOpenThreshold;
    
    	[DataMember]
    	public short AlternateTroubleOpenThreshold
    	{ 
    		get { return _alternateTroubleOpenThreshold; }
    		set
    		{
    			if (_alternateTroubleOpenThreshold != value )
    			{
    				_alternateTroubleOpenThreshold = value;
    				OnPropertyChanged(() => AlternateTroubleOpenThreshold);
    			}
    		}
    	}
    	
    	private short _troubleShortThreshold;
    
    	[DataMember]
    	public short TroubleShortThreshold
    	{ 
    		get { return _troubleShortThreshold; }
    		set
    		{
    			if (_troubleShortThreshold != value )
    			{
    				_troubleShortThreshold = value;
    				OnPropertyChanged(() => TroubleShortThreshold);
    			}
    		}
    	}
    
    	
    	private InputDevice _inputDevice;
    
    	[DataMember]
    	public virtual InputDevice InputDevice
    	{ 
    		get { return _inputDevice; }
    		set
    		{
    			if (_inputDevice != value )
    			{
    				_inputDevice = value;
    				OnPropertyChanged(() => InputDevice);
    			}
    		}
    	}
    	
    	private InputDeviceSupervisionType _inputDeviceSupervisionType;
    
    	[DataMember]
    	public virtual InputDeviceSupervisionType InputDeviceSupervisionType
    	{ 
    		get { return _inputDeviceSupervisionType; }
    		set
    		{
    			if (_inputDeviceSupervisionType != value )
    			{
    				_inputDeviceSupervisionType = value;
    				OnPropertyChanged(() => InputDeviceSupervisionType);
    			}
    		}
    	}
    	
    	private ICollection<InputDeviceAlertEvent> _inputDeviceAlertEvents;
    
    	[DataMember]
    	public virtual ICollection<InputDeviceAlertEvent> InputDeviceAlertEvents
    	{ 
    		get { return _inputDeviceAlertEvents; }
    		set
    		{
    			if (_inputDeviceAlertEvents != value )
    			{
    				_inputDeviceAlertEvents = value;
    				OnPropertyChanged(() => InputDeviceAlertEvents);
    			}
    		}
    	}
    }
    
}
