//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class Note : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class Note
        {
        	public Note() : base()
        	{
        		Initialize();
        	}
        
        	public Note(Note e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        		this.AccessPortalAlertEvents = new HashSet<AccessPortalAlertEvent>();
        		this.AccessPortalNotes = new HashSet<AccessPortalNote>();
        		this.GalaxyPanelAlertEvents = new HashSet<GalaxyPanelAlertEvent>();
        		this.AccessPortalActivityAlarmEvents = new HashSet<AccessPortalActivityAlarmEvent>();
        		this.InputDeviceNotes = new HashSet<InputDeviceNote>();
        		this.OutputDeviceNotes = new HashSet<OutputDeviceNote>();
        }
        
        	public void Initialize(Note e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.NoteUid = e.NoteUid;
        		this.Category = e.Category;
        		this.Note1 = e.Note1;
        		this.Photo = e.Photo;
        		this.Document = e.Document;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.NoteText = e.NoteText;
        		this.AccessPortalAlertEvents = e.AccessPortalAlertEvents.ToCollection();
        		this.AccessPortalNotes = e.AccessPortalNotes.ToCollection();
        		this.GalaxyPanelAlertEvents = e.GalaxyPanelAlertEvents.ToCollection();
        		this.AccessPortalActivityAlarmEvents = e.AccessPortalActivityAlarmEvents.ToCollection();
        		this.InputDeviceNotes = e.InputDeviceNotes.ToCollection();
        		this.OutputDeviceNotes = e.OutputDeviceNotes.ToCollection();
        		
        	}
        
        	public Note Clone(Note e)
        	{
        		return new Note(e);
        	}
        
        	public bool Equals(Note other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(Note other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.NoteUid != this.NoteUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _noteUid;
    
    	[DataMember]
    	public System.Guid NoteUid
    	{ 
    		get { return _noteUid; }
    		set
    		{
    			if (_noteUid != value )
    			{
    				_noteUid = value;
    				OnPropertyChanged(() => NoteUid);
    			}
    		}
    	}
    	
    	private string _category;
    
    	[DataMember]
    	public string Category
    	{ 
    		get { return _category; }
    		set
    		{
    			if (_category != value )
    			{
    				_category = value;
    				OnPropertyChanged(() => Category);
    			}
    		}
    	}
    	
    	private string _note1;
    
    	[DataMember]
    	public string Note1
    	{ 
    		get { return _note1; }
    		set
    		{
    			if (_note1 != value )
    			{
    				_note1 = value;
    				OnPropertyChanged(() => Note1);
    			}
    		}
    	}
    	
    	private byte[] _photo;
    
    	[DataMember]
    	public byte[] Photo
    	{ 
    		get { return _photo; }
    		set
    		{
    			if (_photo != value )
    			{
    				_photo = value;
    				OnPropertyChanged(() => Photo);
    			}
    		}
    	}
    	
    	private byte[] _document;
    
    	[DataMember]
    	public byte[] Document
    	{ 
    		get { return _document; }
    		set
    		{
    			if (_document != value )
    			{
    				_document = value;
    				OnPropertyChanged(() => Document);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    	
    	private string _noteText;
    
    	[DataMember]
    	public string NoteText
    	{ 
    		get { return _noteText; }
    		set
    		{
    			if (_noteText != value )
    			{
    				_noteText = value;
    				OnPropertyChanged(() => NoteText);
    			}
    		}
    	}
    
    	
    	private ICollection<AccessPortalAlertEvent> _accessPortalAlertEvents;
    
    	[DataMember]
    	public virtual ICollection<AccessPortalAlertEvent> AccessPortalAlertEvents
    	{ 
    		get { return _accessPortalAlertEvents; }
    		set
    		{
    			if (_accessPortalAlertEvents != value )
    			{
    				_accessPortalAlertEvents = value;
    				OnPropertyChanged(() => AccessPortalAlertEvents);
    			}
    		}
    	}
    	
    	private ICollection<AccessPortalNote> _accessPortalNotes;
    
    	[DataMember]
    	public virtual ICollection<AccessPortalNote> AccessPortalNotes
    	{ 
    		get { return _accessPortalNotes; }
    		set
    		{
    			if (_accessPortalNotes != value )
    			{
    				_accessPortalNotes = value;
    				OnPropertyChanged(() => AccessPortalNotes);
    			}
    		}
    	}
    	
    	private ICollection<GalaxyPanelAlertEvent> _galaxyPanelAlertEvents;
    
    	[DataMember]
    	public virtual ICollection<GalaxyPanelAlertEvent> GalaxyPanelAlertEvents
    	{ 
    		get { return _galaxyPanelAlertEvents; }
    		set
    		{
    			if (_galaxyPanelAlertEvents != value )
    			{
    				_galaxyPanelAlertEvents = value;
    				OnPropertyChanged(() => GalaxyPanelAlertEvents);
    			}
    		}
    	}
    	
    	private ICollection<AccessPortalActivityAlarmEvent> _accessPortalActivityAlarmEvents;
    
    	[DataMember]
    	public virtual ICollection<AccessPortalActivityAlarmEvent> AccessPortalActivityAlarmEvents
    	{ 
    		get { return _accessPortalActivityAlarmEvents; }
    		set
    		{
    			if (_accessPortalActivityAlarmEvents != value )
    			{
    				_accessPortalActivityAlarmEvents = value;
    				OnPropertyChanged(() => AccessPortalActivityAlarmEvents);
    			}
    		}
    	}
    	
    	private ICollection<InputDeviceNote> _inputDeviceNotes;
    
    	[DataMember]
    	public virtual ICollection<InputDeviceNote> InputDeviceNotes
    	{ 
    		get { return _inputDeviceNotes; }
    		set
    		{
    			if (_inputDeviceNotes != value )
    			{
    				_inputDeviceNotes = value;
    				OnPropertyChanged(() => InputDeviceNotes);
    			}
    		}
    	}
    	
    	private ICollection<OutputDeviceNote> _outputDeviceNotes;
    
    	[DataMember]
    	public virtual ICollection<OutputDeviceNote> OutputDeviceNotes
    	{ 
    		get { return _outputDeviceNotes; }
    		set
    		{
    			if (_outputDeviceNotes != value )
    			{
    				_outputDeviceNotes = value;
    				OnPropertyChanged(() => OutputDeviceNotes);
    			}
    		}
    	}
    }
    
}
