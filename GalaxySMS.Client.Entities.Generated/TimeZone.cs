//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class TimeZone : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class TimeZone
        {
        	public TimeZone() : base()
        	{
        		Initialize();
        	}
        
        	public TimeZone(TimeZone e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        }
        
        	public void Initialize(TimeZone e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.TimeZoneUid = e.TimeZoneUid;
        		this.Id = e.Id;
        		this.DisplayName = e.DisplayName;
        		this.StandardName = e.StandardName;
        		this.DaylightName = e.DaylightName;
        		this.SupportsDaylightSavingsTime = e.SupportsDaylightSavingsTime;
        		this.BaseUtcOffset = e.BaseUtcOffset;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		
        	}
        
        	public TimeZone Clone(TimeZone e)
        	{
        		return new TimeZone(e);
        	}
        
        	public bool Equals(TimeZone other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(TimeZone other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.TimeZoneUid != this.TimeZoneUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _timeZoneUid;
    
    	[DataMember]
    	public System.Guid TimeZoneUid
    	{ 
    		get { return _timeZoneUid; }
    		set
    		{
    			if (_timeZoneUid != value )
    			{
    				_timeZoneUid = value;
    				OnPropertyChanged(() => TimeZoneUid);
    			}
    		}
    	}
    	
    	private string _id;
    
    	[DataMember]
    	public string Id
    	{ 
    		get { return _id; }
    		set
    		{
    			if (_id != value )
    			{
    				_id = value;
    				OnPropertyChanged(() => Id);
    			}
    		}
    	}
    	
    	private string _displayName;
    
    	[DataMember]
    	public string DisplayName
    	{ 
    		get { return _displayName; }
    		set
    		{
    			if (_displayName != value )
    			{
    				_displayName = value;
    				OnPropertyChanged(() => DisplayName);
    			}
    		}
    	}
    	
    	private string _standardName;
    
    	[DataMember]
    	public string StandardName
    	{ 
    		get { return _standardName; }
    		set
    		{
    			if (_standardName != value )
    			{
    				_standardName = value;
    				OnPropertyChanged(() => StandardName);
    			}
    		}
    	}
    	
    	private string _daylightName;
    
    	[DataMember]
    	public string DaylightName
    	{ 
    		get { return _daylightName; }
    		set
    		{
    			if (_daylightName != value )
    			{
    				_daylightName = value;
    				OnPropertyChanged(() => DaylightName);
    			}
    		}
    	}
    	
    	private bool _supportsDaylightSavingsTime;
    
    	[DataMember]
    	public bool SupportsDaylightSavingsTime
    	{ 
    		get { return _supportsDaylightSavingsTime; }
    		set
    		{
    			if (_supportsDaylightSavingsTime != value )
    			{
    				_supportsDaylightSavingsTime = value;
    				OnPropertyChanged(() => SupportsDaylightSavingsTime);
    			}
    		}
    	}
    	
    	private long _baseUtcOffset;
    
    	[DataMember]
    	public long BaseUtcOffset
    	{ 
    		get { return _baseUtcOffset; }
    		set
    		{
    			if (_baseUtcOffset != value )
    			{
    				_baseUtcOffset = value;
    				OnPropertyChanged(() => BaseUtcOffset);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    }
    
}
