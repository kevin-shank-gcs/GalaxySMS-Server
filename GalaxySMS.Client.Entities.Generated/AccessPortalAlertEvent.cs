//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class AccessPortalAlertEvent : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class AccessPortalAlertEvent
        {
        	public AccessPortalAlertEvent() : base()
        	{
        		Initialize();
        	}
        
        	public AccessPortalAlertEvent(AccessPortalAlertEvent e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        }
        
        	public void Initialize(AccessPortalAlertEvent e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.AccessPortalAlertEventUid = e.AccessPortalAlertEventUid;
        		this.AccessPortalUid = e.AccessPortalUid;
        		this.InputOutputGroupUid = e.InputOutputGroupUid;
        		this.AcknowledgeTimeScheduleUid = e.AcknowledgeTimeScheduleUid;
        		this.AudioBinaryResourceUid = e.AudioBinaryResourceUid;
        		this.ResponseInstructionsUid = e.ResponseInstructionsUid;
        		this.AccessPortalAlertEventTypeUid = e.AccessPortalAlertEventTypeUid;
        		this.OffsetIndex = e.OffsetIndex;
        		this.AcknowledgePriority = e.AcknowledgePriority;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.InputOutputGroupAssignmentUid = e.InputOutputGroupAssignmentUid;
        		this.IsActive = e.IsActive;
        		this.ResponseRequired = e.ResponseRequired;
        		
        	}
        
        	public AccessPortalAlertEvent Clone(AccessPortalAlertEvent e)
        	{
        		return new AccessPortalAlertEvent(e);
        	}
        
        	public bool Equals(AccessPortalAlertEvent other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(AccessPortalAlertEvent other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.AccessPortalAlertEventUid != this.AccessPortalAlertEventUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _accessPortalAlertEventUid;
    
    	[DataMember]
    	public System.Guid AccessPortalAlertEventUid
    	{ 
    		get { return _accessPortalAlertEventUid; }
    		set
    		{
    			if (_accessPortalAlertEventUid != value )
    			{
    				_accessPortalAlertEventUid = value;
    				OnPropertyChanged(() => AccessPortalAlertEventUid);
    			}
    		}
    	}
    	
    	private System.Guid _accessPortalUid;
    
    	[DataMember]
    	public System.Guid AccessPortalUid
    	{ 
    		get { return _accessPortalUid; }
    		set
    		{
    			if (_accessPortalUid != value )
    			{
    				_accessPortalUid = value;
    				OnPropertyChanged(() => AccessPortalUid);
    			}
    		}
    	}
    	
    	private System.Guid _inputOutputGroupUid;
    
    	[DataMember]
    	public System.Guid InputOutputGroupUid
    	{ 
    		get { return _inputOutputGroupUid; }
    		set
    		{
    			if (_inputOutputGroupUid != value )
    			{
    				_inputOutputGroupUid = value;
    				OnPropertyChanged(() => InputOutputGroupUid);
    			}
    		}
    	}
    	
    	private System.Guid _acknowledgeTimeScheduleUid;
    
    	[DataMember]
    	public System.Guid AcknowledgeTimeScheduleUid
    	{ 
    		get { return _acknowledgeTimeScheduleUid; }
    		set
    		{
    			if (_acknowledgeTimeScheduleUid != value )
    			{
    				_acknowledgeTimeScheduleUid = value;
    				OnPropertyChanged(() => AcknowledgeTimeScheduleUid);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _audioBinaryResourceUid;
    
    	[DataMember]
    	public Nullable<System.Guid> AudioBinaryResourceUid
    	{ 
    		get { return _audioBinaryResourceUid; }
    		set
    		{
    			if (_audioBinaryResourceUid != value )
    			{
    				_audioBinaryResourceUid = value;
    				OnPropertyChanged(() => AudioBinaryResourceUid);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _responseInstructionsUid;
    
    	[DataMember]
    	public Nullable<System.Guid> ResponseInstructionsUid
    	{ 
    		get { return _responseInstructionsUid; }
    		set
    		{
    			if (_responseInstructionsUid != value )
    			{
    				_responseInstructionsUid = value;
    				OnPropertyChanged(() => ResponseInstructionsUid);
    			}
    		}
    	}
    	
    	private System.Guid _accessPortalAlertEventTypeUid;
    
    	[DataMember]
    	public System.Guid AccessPortalAlertEventTypeUid
    	{ 
    		get { return _accessPortalAlertEventTypeUid; }
    		set
    		{
    			if (_accessPortalAlertEventTypeUid != value )
    			{
    				_accessPortalAlertEventTypeUid = value;
    				OnPropertyChanged(() => AccessPortalAlertEventTypeUid);
    			}
    		}
    	}
    	
    	private short _offsetIndex;
    
    	[DataMember]
    	public short OffsetIndex
    	{ 
    		get { return _offsetIndex; }
    		set
    		{
    			if (_offsetIndex != value )
    			{
    				_offsetIndex = value;
    				OnPropertyChanged(() => OffsetIndex);
    			}
    		}
    	}
    	
    	private int _acknowledgePriority;
    
    	[DataMember]
    	public int AcknowledgePriority
    	{ 
    		get { return _acknowledgePriority; }
    		set
    		{
    			if (_acknowledgePriority != value )
    			{
    				_acknowledgePriority = value;
    				OnPropertyChanged(() => AcknowledgePriority);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _inputOutputGroupAssignmentUid;
    
    	[DataMember]
    	public Nullable<System.Guid> InputOutputGroupAssignmentUid
    	{ 
    		get { return _inputOutputGroupAssignmentUid; }
    		set
    		{
    			if (_inputOutputGroupAssignmentUid != value )
    			{
    				_inputOutputGroupAssignmentUid = value;
    				OnPropertyChanged(() => InputOutputGroupAssignmentUid);
    			}
    		}
    	}
    	
    	private bool _isActive;
    
    	[DataMember]
    	public bool IsActive
    	{ 
    		get { return _isActive; }
    		set
    		{
    			if (_isActive != value )
    			{
    				_isActive = value;
    				OnPropertyChanged(() => IsActive);
    			}
    		}
    	}
    	
    	private bool _responseRequired;
    
    	[DataMember]
    	public bool ResponseRequired
    	{ 
    		get { return _responseRequired; }
    		set
    		{
    			if (_responseRequired != value )
    			{
    				_responseRequired = value;
    				OnPropertyChanged(() => ResponseRequired);
    			}
    		}
    	}
    
    	
    	private AccessPortalAlertEventType _accessPortalAlertEventType;
    
    	[DataMember]
    	public virtual AccessPortalAlertEventType AccessPortalAlertEventType
    	{ 
    		get { return _accessPortalAlertEventType; }
    		set
    		{
    			if (_accessPortalAlertEventType != value )
    			{
    				_accessPortalAlertEventType = value;
    				OnPropertyChanged(() => AccessPortalAlertEventType);
    			}
    		}
    	}
    	
    	private gcsBinaryResource _gcsBinaryResource;
    
    	[DataMember]
    	public virtual gcsBinaryResource gcsBinaryResource
    	{ 
    		get { return _gcsBinaryResource; }
    		set
    		{
    			if (_gcsBinaryResource != value )
    			{
    				_gcsBinaryResource = value;
    				OnPropertyChanged(() => gcsBinaryResource);
    			}
    		}
    	}
    	
    	private Note _note;
    
    	[DataMember]
    	public virtual Note Note
    	{ 
    		get { return _note; }
    		set
    		{
    			if (_note != value )
    			{
    				_note = value;
    				OnPropertyChanged(() => Note);
    			}
    		}
    	}
    }
    
}
