//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class gcsUserRequirement : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class gcsUserRequirement
        {
        	public gcsUserRequirement() : base()
        	{
        		Initialize();
        	}
        
        	public gcsUserRequirement(gcsUserRequirement e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        }
        
        	public void Initialize(gcsUserRequirement e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.UserRequirementsId = e.UserRequirementsId;
        		this.EntityId = e.EntityId;
        		this.PasswordCannotContainName = e.PasswordCannotContainName;
        		this.PasswordMinimumLength = e.PasswordMinimumLength;
        		this.PasswordMaximumLength = e.PasswordMaximumLength;
        		this.PasswordMinimumChangeCharacters = e.PasswordMinimumChangeCharacters;
        		this.MinimumPasswordAge = e.MinimumPasswordAge;
        		this.MaximumPasswordAge = e.MaximumPasswordAge;
        		this.MaintainPasswordHistoryCount = e.MaintainPasswordHistoryCount;
        		this.DefaultExpirationDays = e.DefaultExpirationDays;
        		this.LockoutUserIfInactiveForDays = e.LockoutUserIfInactiveForDays;
        		this.AllowPasswordChangeAttempt = e.AllowPasswordChangeAttempt;
        		this.RequireLowerCaseLetterCount = e.RequireLowerCaseLetterCount;
        		this.RequireUpperCaseLetterCount = e.RequireUpperCaseLetterCount;
        		this.RequireNumericDigitCount = e.RequireNumericDigitCount;
        		this.RequireSpecialCharacterCount = e.RequireSpecialCharacterCount;
        		this.UseCustomRegEx = e.UseCustomRegEx;
        		this.PasswordCustomRegEx = e.PasswordCustomRegEx;
        		this.RegularExpressionDescription = e.RegularExpressionDescription;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.RequireTwoFactorAuthentication = e.RequireTwoFactorAuthentication;
        		
        	}
        
        	public gcsUserRequirement Clone(gcsUserRequirement e)
        	{
        		return new gcsUserRequirement(e);
        	}
        
        	public bool Equals(gcsUserRequirement other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(gcsUserRequirement other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.UserRequirementsId != this.UserRequirementsId )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _userRequirementsId;
    
    	[DataMember]
    	public System.Guid UserRequirementsId
    	{ 
    		get { return _userRequirementsId; }
    		set
    		{
    			if (_userRequirementsId != value )
    			{
    				_userRequirementsId = value;
    				OnPropertyChanged(() => UserRequirementsId);
    			}
    		}
    	}
    	
    	private System.Guid _entityId;
    
    	[DataMember]
    	public System.Guid EntityId
    	{ 
    		get { return _entityId; }
    		set
    		{
    			if (_entityId != value )
    			{
    				_entityId = value;
    				OnPropertyChanged(() => EntityId);
    			}
    		}
    	}
    	
    	private bool _passwordCannotContainName;
    
    	[DataMember]
    	public bool PasswordCannotContainName
    	{ 
    		get { return _passwordCannotContainName; }
    		set
    		{
    			if (_passwordCannotContainName != value )
    			{
    				_passwordCannotContainName = value;
    				OnPropertyChanged(() => PasswordCannotContainName);
    			}
    		}
    	}
    	
    	private short _passwordMinimumLength;
    
    	[DataMember]
    	public short PasswordMinimumLength
    	{ 
    		get { return _passwordMinimumLength; }
    		set
    		{
    			if (_passwordMinimumLength != value )
    			{
    				_passwordMinimumLength = value;
    				OnPropertyChanged(() => PasswordMinimumLength);
    			}
    		}
    	}
    	
    	private short _passwordMaximumLength;
    
    	[DataMember]
    	public short PasswordMaximumLength
    	{ 
    		get { return _passwordMaximumLength; }
    		set
    		{
    			if (_passwordMaximumLength != value )
    			{
    				_passwordMaximumLength = value;
    				OnPropertyChanged(() => PasswordMaximumLength);
    			}
    		}
    	}
    	
    	private short _passwordMinimumChangeCharacters;
    
    	[DataMember]
    	public short PasswordMinimumChangeCharacters
    	{ 
    		get { return _passwordMinimumChangeCharacters; }
    		set
    		{
    			if (_passwordMinimumChangeCharacters != value )
    			{
    				_passwordMinimumChangeCharacters = value;
    				OnPropertyChanged(() => PasswordMinimumChangeCharacters);
    			}
    		}
    	}
    	
    	private short _minimumPasswordAge;
    
    	[DataMember]
    	public short MinimumPasswordAge
    	{ 
    		get { return _minimumPasswordAge; }
    		set
    		{
    			if (_minimumPasswordAge != value )
    			{
    				_minimumPasswordAge = value;
    				OnPropertyChanged(() => MinimumPasswordAge);
    			}
    		}
    	}
    	
    	private short _maximumPasswordAge;
    
    	[DataMember]
    	public short MaximumPasswordAge
    	{ 
    		get { return _maximumPasswordAge; }
    		set
    		{
    			if (_maximumPasswordAge != value )
    			{
    				_maximumPasswordAge = value;
    				OnPropertyChanged(() => MaximumPasswordAge);
    			}
    		}
    	}
    	
    	private short _maintainPasswordHistoryCount;
    
    	[DataMember]
    	public short MaintainPasswordHistoryCount
    	{ 
    		get { return _maintainPasswordHistoryCount; }
    		set
    		{
    			if (_maintainPasswordHistoryCount != value )
    			{
    				_maintainPasswordHistoryCount = value;
    				OnPropertyChanged(() => MaintainPasswordHistoryCount);
    			}
    		}
    	}
    	
    	private short _defaultExpirationDays;
    
    	[DataMember]
    	public short DefaultExpirationDays
    	{ 
    		get { return _defaultExpirationDays; }
    		set
    		{
    			if (_defaultExpirationDays != value )
    			{
    				_defaultExpirationDays = value;
    				OnPropertyChanged(() => DefaultExpirationDays);
    			}
    		}
    	}
    	
    	private short _lockoutUserIfInactiveForDays;
    
    	[DataMember]
    	public short LockoutUserIfInactiveForDays
    	{ 
    		get { return _lockoutUserIfInactiveForDays; }
    		set
    		{
    			if (_lockoutUserIfInactiveForDays != value )
    			{
    				_lockoutUserIfInactiveForDays = value;
    				OnPropertyChanged(() => LockoutUserIfInactiveForDays);
    			}
    		}
    	}
    	
    	private bool _allowPasswordChangeAttempt;
    
    	[DataMember]
    	public bool AllowPasswordChangeAttempt
    	{ 
    		get { return _allowPasswordChangeAttempt; }
    		set
    		{
    			if (_allowPasswordChangeAttempt != value )
    			{
    				_allowPasswordChangeAttempt = value;
    				OnPropertyChanged(() => AllowPasswordChangeAttempt);
    			}
    		}
    	}
    	
    	private short _requireLowerCaseLetterCount;
    
    	[DataMember]
    	public short RequireLowerCaseLetterCount
    	{ 
    		get { return _requireLowerCaseLetterCount; }
    		set
    		{
    			if (_requireLowerCaseLetterCount != value )
    			{
    				_requireLowerCaseLetterCount = value;
    				OnPropertyChanged(() => RequireLowerCaseLetterCount);
    			}
    		}
    	}
    	
    	private short _requireUpperCaseLetterCount;
    
    	[DataMember]
    	public short RequireUpperCaseLetterCount
    	{ 
    		get { return _requireUpperCaseLetterCount; }
    		set
    		{
    			if (_requireUpperCaseLetterCount != value )
    			{
    				_requireUpperCaseLetterCount = value;
    				OnPropertyChanged(() => RequireUpperCaseLetterCount);
    			}
    		}
    	}
    	
    	private short _requireNumericDigitCount;
    
    	[DataMember]
    	public short RequireNumericDigitCount
    	{ 
    		get { return _requireNumericDigitCount; }
    		set
    		{
    			if (_requireNumericDigitCount != value )
    			{
    				_requireNumericDigitCount = value;
    				OnPropertyChanged(() => RequireNumericDigitCount);
    			}
    		}
    	}
    	
    	private short _requireSpecialCharacterCount;
    
    	[DataMember]
    	public short RequireSpecialCharacterCount
    	{ 
    		get { return _requireSpecialCharacterCount; }
    		set
    		{
    			if (_requireSpecialCharacterCount != value )
    			{
    				_requireSpecialCharacterCount = value;
    				OnPropertyChanged(() => RequireSpecialCharacterCount);
    			}
    		}
    	}
    	
    	private bool _useCustomRegEx;
    
    	[DataMember]
    	public bool UseCustomRegEx
    	{ 
    		get { return _useCustomRegEx; }
    		set
    		{
    			if (_useCustomRegEx != value )
    			{
    				_useCustomRegEx = value;
    				OnPropertyChanged(() => UseCustomRegEx);
    			}
    		}
    	}
    	
    	private string _passwordCustomRegEx;
    
    	[DataMember]
    	public string PasswordCustomRegEx
    	{ 
    		get { return _passwordCustomRegEx; }
    		set
    		{
    			if (_passwordCustomRegEx != value )
    			{
    				_passwordCustomRegEx = value;
    				OnPropertyChanged(() => PasswordCustomRegEx);
    			}
    		}
    	}
    	
    	private string _regularExpressionDescription;
    
    	[DataMember]
    	public string RegularExpressionDescription
    	{ 
    		get { return _regularExpressionDescription; }
    		set
    		{
    			if (_regularExpressionDescription != value )
    			{
    				_regularExpressionDescription = value;
    				OnPropertyChanged(() => RegularExpressionDescription);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    	
    	private bool _requireTwoFactorAuthentication;
    
    	[DataMember]
    	public bool RequireTwoFactorAuthentication
    	{ 
    		get { return _requireTwoFactorAuthentication; }
    		set
    		{
    			if (_requireTwoFactorAuthentication != value )
    			{
    				_requireTwoFactorAuthentication = value;
    				OnPropertyChanged(() => RequireTwoFactorAuthentication);
    			}
    		}
    	}
    }
    
}
