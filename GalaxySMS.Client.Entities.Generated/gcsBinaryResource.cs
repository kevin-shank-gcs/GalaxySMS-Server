//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class gcsBinaryResource : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class gcsBinaryResource
        {
        	public gcsBinaryResource() : base()
        	{
        		Initialize();
        	}
        
        	public gcsBinaryResource(gcsBinaryResource e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        		this.gcsEntities = new HashSet<gcsEntity>();
        		this.AccessPortals = new HashSet<AccessPortal>();
        		this.AccessPortalTypes = new HashSet<AccessPortalType>();
        		this.Brands = new HashSet<Brand>();
        		this.CredentialReaderTypes = new HashSet<CredentialReaderType>();
        		this.InputDevices = new HashSet<InputDevice>();
        		this.OutputDevices = new HashSet<OutputDevice>();
        		this.AccessPortalAlertEvents = new HashSet<AccessPortalAlertEvent>();
        		this.GalaxyPanelAlertEvents = new HashSet<GalaxyPanelAlertEvent>();
        }
        
        	public void Initialize(gcsBinaryResource e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.BinaryResourceUid = e.BinaryResourceUid;
        		this.DataType = e.DataType;
        		this.Category = e.Category;
        		this.Tag = e.Tag;
        		this.BinaryResource = e.BinaryResource;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.gcsEntities = e.gcsEntities.ToCollection();
        		this.AccessPortals = e.AccessPortals.ToCollection();
        		this.AccessPortalTypes = e.AccessPortalTypes.ToCollection();
        		this.Brands = e.Brands.ToCollection();
        		this.CredentialReaderTypes = e.CredentialReaderTypes.ToCollection();
        		this.InputDevices = e.InputDevices.ToCollection();
        		this.OutputDevices = e.OutputDevices.ToCollection();
        		this.AccessPortalAlertEvents = e.AccessPortalAlertEvents.ToCollection();
        		this.GalaxyPanelAlertEvents = e.GalaxyPanelAlertEvents.ToCollection();
        		
        	}
        
        	public gcsBinaryResource Clone(gcsBinaryResource e)
        	{
        		return new gcsBinaryResource(e);
        	}
        
        	public bool Equals(gcsBinaryResource other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(gcsBinaryResource other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.BinaryResourceUid != this.BinaryResourceUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _binaryResourceUid;
    
    	[DataMember]
    	public System.Guid BinaryResourceUid
    	{ 
    		get { return _binaryResourceUid; }
    		set
    		{
    			if (_binaryResourceUid != value )
    			{
    				_binaryResourceUid = value;
    				OnPropertyChanged(() => BinaryResourceUid);
    			}
    		}
    	}
    	
    	private string _dataType;
    
    	[DataMember]
    	public string DataType
    	{ 
    		get { return _dataType; }
    		set
    		{
    			if (_dataType != value )
    			{
    				_dataType = value;
    				OnPropertyChanged(() => DataType);
    			}
    		}
    	}
    	
    	private string _category;
    
    	[DataMember]
    	public string Category
    	{ 
    		get { return _category; }
    		set
    		{
    			if (_category != value )
    			{
    				_category = value;
    				OnPropertyChanged(() => Category);
    			}
    		}
    	}
    	
    	private string _tag;
    
    	[DataMember]
    	public string Tag
    	{ 
    		get { return _tag; }
    		set
    		{
    			if (_tag != value )
    			{
    				_tag = value;
    				OnPropertyChanged(() => Tag);
    			}
    		}
    	}
    	
    	private byte[] _binaryResource;
    
    	[DataMember]
    	public byte[] BinaryResource
    	{ 
    		get { return _binaryResource; }
    		set
    		{
    			if (_binaryResource != value )
    			{
    				_binaryResource = value;
    				OnPropertyChanged(() => BinaryResource);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    
    	
    	private ICollection<gcsEntity> _gcsEntities;
    
    	[DataMember]
    	public virtual ICollection<gcsEntity> gcsEntities
    	{ 
    		get { return _gcsEntities; }
    		set
    		{
    			if (_gcsEntities != value )
    			{
    				_gcsEntities = value;
    				OnPropertyChanged(() => gcsEntities);
    			}
    		}
    	}
    	
    	private ICollection<AccessPortal> _accessPortals;
    
    	[DataMember]
    	public virtual ICollection<AccessPortal> AccessPortals
    	{ 
    		get { return _accessPortals; }
    		set
    		{
    			if (_accessPortals != value )
    			{
    				_accessPortals = value;
    				OnPropertyChanged(() => AccessPortals);
    			}
    		}
    	}
    	
    	private ICollection<AccessPortalType> _accessPortalTypes;
    
    	[DataMember]
    	public virtual ICollection<AccessPortalType> AccessPortalTypes
    	{ 
    		get { return _accessPortalTypes; }
    		set
    		{
    			if (_accessPortalTypes != value )
    			{
    				_accessPortalTypes = value;
    				OnPropertyChanged(() => AccessPortalTypes);
    			}
    		}
    	}
    	
    	private ICollection<Brand> _brands;
    
    	[DataMember]
    	public virtual ICollection<Brand> Brands
    	{ 
    		get { return _brands; }
    		set
    		{
    			if (_brands != value )
    			{
    				_brands = value;
    				OnPropertyChanged(() => Brands);
    			}
    		}
    	}
    	
    	private ICollection<CredentialReaderType> _credentialReaderTypes;
    
    	[DataMember]
    	public virtual ICollection<CredentialReaderType> CredentialReaderTypes
    	{ 
    		get { return _credentialReaderTypes; }
    		set
    		{
    			if (_credentialReaderTypes != value )
    			{
    				_credentialReaderTypes = value;
    				OnPropertyChanged(() => CredentialReaderTypes);
    			}
    		}
    	}
    	
    	private ICollection<InputDevice> _inputDevices;
    
    	[DataMember]
    	public virtual ICollection<InputDevice> InputDevices
    	{ 
    		get { return _inputDevices; }
    		set
    		{
    			if (_inputDevices != value )
    			{
    				_inputDevices = value;
    				OnPropertyChanged(() => InputDevices);
    			}
    		}
    	}
    	
    	private ICollection<OutputDevice> _outputDevices;
    
    	[DataMember]
    	public virtual ICollection<OutputDevice> OutputDevices
    	{ 
    		get { return _outputDevices; }
    		set
    		{
    			if (_outputDevices != value )
    			{
    				_outputDevices = value;
    				OnPropertyChanged(() => OutputDevices);
    			}
    		}
    	}
    	
    	private ICollection<AccessPortalAlertEvent> _accessPortalAlertEvents;
    
    	[DataMember]
    	public virtual ICollection<AccessPortalAlertEvent> AccessPortalAlertEvents
    	{ 
    		get { return _accessPortalAlertEvents; }
    		set
    		{
    			if (_accessPortalAlertEvents != value )
    			{
    				_accessPortalAlertEvents = value;
    				OnPropertyChanged(() => AccessPortalAlertEvents);
    			}
    		}
    	}
    	
    	private ICollection<GalaxyPanelAlertEvent> _galaxyPanelAlertEvents;
    
    	[DataMember]
    	public virtual ICollection<GalaxyPanelAlertEvent> GalaxyPanelAlertEvents
    	{ 
    		get { return _galaxyPanelAlertEvents; }
    		set
    		{
    			if (_galaxyPanelAlertEvents != value )
    			{
    				_galaxyPanelAlertEvents = value;
    				OnPropertyChanged(() => GalaxyPanelAlertEvents);
    			}
    		}
    	}
    }
    
}
