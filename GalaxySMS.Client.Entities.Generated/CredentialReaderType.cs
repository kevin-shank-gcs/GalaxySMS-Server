//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class CredentialReaderType : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class CredentialReaderType
        {
        	public CredentialReaderType() : base()
        	{
        		Initialize();
        	}
        
        	public CredentialReaderType(CredentialReaderType e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        		this.CredentialReaderTypeFeatureMaps = new HashSet<CredentialReaderTypeFeatureMap>();
        }
        
        	public void Initialize(CredentialReaderType e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.CredentialReaderTypeUid = e.CredentialReaderTypeUid;
        		this.CredentialReaderDataFormatUid = e.CredentialReaderDataFormatUid;
        		this.BrandUid = e.BrandUid;
        		this.BinaryResourceUid = e.BinaryResourceUid;
        		this.ReaderTypeName = e.ReaderTypeName;
        		this.Model = e.Model;
        		this.Description = e.Description;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.CredentialReaderTypeFeatureMaps = e.CredentialReaderTypeFeatureMaps.ToCollection();
        		
        	}
        
        	public CredentialReaderType Clone(CredentialReaderType e)
        	{
        		return new CredentialReaderType(e);
        	}
        
        	public bool Equals(CredentialReaderType other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(CredentialReaderType other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.CredentialReaderTypeUid != this.CredentialReaderTypeUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _credentialReaderTypeUid;
    
    	[DataMember]
    	public System.Guid CredentialReaderTypeUid
    	{ 
    		get { return _credentialReaderTypeUid; }
    		set
    		{
    			if (_credentialReaderTypeUid != value )
    			{
    				_credentialReaderTypeUid = value;
    				OnPropertyChanged(() => CredentialReaderTypeUid);
    			}
    		}
    	}
    	
    	private System.Guid _credentialReaderDataFormatUid;
    
    	[DataMember]
    	public System.Guid CredentialReaderDataFormatUid
    	{ 
    		get { return _credentialReaderDataFormatUid; }
    		set
    		{
    			if (_credentialReaderDataFormatUid != value )
    			{
    				_credentialReaderDataFormatUid = value;
    				OnPropertyChanged(() => CredentialReaderDataFormatUid);
    			}
    		}
    	}
    	
    	private System.Guid _brandUid;
    
    	[DataMember]
    	public System.Guid BrandUid
    	{ 
    		get { return _brandUid; }
    		set
    		{
    			if (_brandUid != value )
    			{
    				_brandUid = value;
    				OnPropertyChanged(() => BrandUid);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _binaryResourceUid;
    
    	[DataMember]
    	public Nullable<System.Guid> BinaryResourceUid
    	{ 
    		get { return _binaryResourceUid; }
    		set
    		{
    			if (_binaryResourceUid != value )
    			{
    				_binaryResourceUid = value;
    				OnPropertyChanged(() => BinaryResourceUid);
    			}
    		}
    	}
    	
    	private string _readerTypeName;
    
    	[DataMember]
    	public string ReaderTypeName
    	{ 
    		get { return _readerTypeName; }
    		set
    		{
    			if (_readerTypeName != value )
    			{
    				_readerTypeName = value;
    				OnPropertyChanged(() => ReaderTypeName);
    			}
    		}
    	}
    	
    	private string _model;
    
    	[DataMember]
    	public string Model
    	{ 
    		get { return _model; }
    		set
    		{
    			if (_model != value )
    			{
    				_model = value;
    				OnPropertyChanged(() => Model);
    			}
    		}
    	}
    	
    	private string _description;
    
    	[DataMember]
    	public string Description
    	{ 
    		get { return _description; }
    		set
    		{
    			if (_description != value )
    			{
    				_description = value;
    				OnPropertyChanged(() => Description);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    
    	
    	private CredentialReaderDataFormat _credentialReaderDataFormat;
    
    	[DataMember]
    	public virtual CredentialReaderDataFormat CredentialReaderDataFormat
    	{ 
    		get { return _credentialReaderDataFormat; }
    		set
    		{
    			if (_credentialReaderDataFormat != value )
    			{
    				_credentialReaderDataFormat = value;
    				OnPropertyChanged(() => CredentialReaderDataFormat);
    			}
    		}
    	}
    	
    	private gcsBinaryResource _gcsBinaryResource;
    
    	[DataMember]
    	public virtual gcsBinaryResource gcsBinaryResource
    	{ 
    		get { return _gcsBinaryResource; }
    		set
    		{
    			if (_gcsBinaryResource != value )
    			{
    				_gcsBinaryResource = value;
    				OnPropertyChanged(() => gcsBinaryResource);
    			}
    		}
    	}
    	
    	private ICollection<CredentialReaderTypeFeatureMap> _credentialReaderTypeFeatureMaps;
    
    	[DataMember]
    	public virtual ICollection<CredentialReaderTypeFeatureMap> CredentialReaderTypeFeatureMaps
    	{ 
    		get { return _credentialReaderTypeFeatureMaps; }
    		set
    		{
    			if (_credentialReaderTypeFeatureMaps != value )
    			{
    				_credentialReaderTypeFeatureMaps = value;
    				OnPropertyChanged(() => CredentialReaderTypeFeatureMaps);
    			}
    		}
    	}
    }
    
}
