//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class Cluster : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class Cluster
        {
        	public Cluster() : base()
        	{
        		Initialize();
        	}
        
        	public Cluster(Cluster e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        		this.GalaxyClusterTimeScheduleMaps = new HashSet<GalaxyClusterTimeScheduleMap>();
        		this.InputOutputGroups = new HashSet<InputOutputGroup>();
        		this.AccessGroups = new HashSet<AccessGroup>();
        		this.Areas = new HashSet<Area>();
        		this.ClusterEntityMaps = new HashSet<ClusterEntityMap>();
        		this.ClusterInputOutputGroups = new HashSet<ClusterInputOutputGroup>();
        		this.ClusterCommandAudits = new HashSet<ClusterCommandAudit>();
        		this.GalaxyClusterDayTypeMaps = new HashSet<GalaxyClusterDayTypeMap>();
        		this.AccessProfileClusters = new HashSet<AccessProfileCluster>();
        		this.CredentialClusterTours = new HashSet<CredentialClusterTour>();
        		this.PersonClusterPermissions = new HashSet<PersonClusterPermission>();
        		this.RoleClusters = new HashSet<RoleCluster>();
        }
        
        	public void Initialize(Cluster e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.ClusterUid = e.ClusterUid;
        		this.SiteUid = e.SiteUid;
        		this.ClusterNumber = e.ClusterNumber;
        		this.ClusterName = e.ClusterName;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.ClusterTypeUid = e.ClusterTypeUid;
        		this.EntityId = e.EntityId;
        		this.SiteUid1 = e.SiteUid1;
        		this.CredentialDataLengthUid = e.CredentialDataLengthUid;
        		this.TimeScheduleTypeUid = e.TimeScheduleTypeUid;
        		this.ClusterGroupId = e.ClusterGroupId;
        		this.IsActive = e.IsActive;
        		this.AbaStartDigit = e.AbaStartDigit;
        		this.AbaStopDigit = e.AbaStopDigit;
        		this.AbaFoldOption = e.AbaFoldOption;
        		this.WiegandStartBit = e.WiegandStartBit;
        		this.WiegandStopBit = e.WiegandStopBit;
        		this.CardaxStartBit = e.CardaxStartBit;
        		this.CardaxStopBit = e.CardaxStopBit;
        		this.LockoutAfterInvalidAttempts = e.LockoutAfterInvalidAttempts;
        		this.LockoutDurationSeconds = e.LockoutDurationSeconds;
        		this.AccessRuleOverrideTimeout = e.AccessRuleOverrideTimeout;
        		this.UnlimitedCredentialTimeout = e.UnlimitedCredentialTimeout;
        		this.TimeZoneId = e.TimeZoneId;
        		this.BinaryResourceUid = e.BinaryResourceUid;
        		this.CrisisActivateInputOutputGroupUid = e.CrisisActivateInputOutputGroupUid;
        		this.CrisisResetInputOutputGroupUid = e.CrisisResetInputOutputGroupUid;
        		this.AccessPortalLockedLedBehaviorModeUid = e.AccessPortalLockedLedBehaviorModeUid;
        		this.AccessPortalUnlockedLedBehaviorModeUid = e.AccessPortalUnlockedLedBehaviorModeUid;
        		this.AccessPortalTypeUid = e.AccessPortalTypeUid;
        		this.TemplateAccessPortalUid = e.TemplateAccessPortalUid;
        		this.AbaClipOption = e.AbaClipOption;
        		this.CurrentTimeForCluster = e.CurrentTimeForCluster;
        		this.Description = e.Description;
        		this.ClusterGroupIdOrig = e.ClusterGroupIdOrig;
        		this.GalaxyClusterTimeScheduleMaps = e.GalaxyClusterTimeScheduleMaps.ToCollection();
        		this.InputOutputGroups = e.InputOutputGroups.ToCollection();
        		this.AccessGroups = e.AccessGroups.ToCollection();
        		this.Areas = e.Areas.ToCollection();
        		this.ClusterEntityMaps = e.ClusterEntityMaps.ToCollection();
        		this.ClusterInputOutputGroups = e.ClusterInputOutputGroups.ToCollection();
        		this.ClusterCommandAudits = e.ClusterCommandAudits.ToCollection();
        		this.GalaxyClusterDayTypeMaps = e.GalaxyClusterDayTypeMaps.ToCollection();
        		this.AccessProfileClusters = e.AccessProfileClusters.ToCollection();
        		this.CredentialClusterTours = e.CredentialClusterTours.ToCollection();
        		this.PersonClusterPermissions = e.PersonClusterPermissions.ToCollection();
        		this.RoleClusters = e.RoleClusters.ToCollection();
        		
        	}
        
        	public Cluster Clone(Cluster e)
        	{
        		return new Cluster(e);
        	}
        
        	public bool Equals(Cluster other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(Cluster other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.ClusterUid != this.ClusterUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _clusterUid;
    
    	[DataMember]
    	public System.Guid ClusterUid
    	{ 
    		get { return _clusterUid; }
    		set
    		{
    			if (_clusterUid != value )
    			{
    				_clusterUid = value;
    				OnPropertyChanged(() => ClusterUid);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _siteUid;
    
    	[DataMember]
    	public Nullable<System.Guid> SiteUid
    	{ 
    		get { return _siteUid; }
    		set
    		{
    			if (_siteUid != value )
    			{
    				_siteUid = value;
    				OnPropertyChanged(() => SiteUid);
    			}
    		}
    	}
    	
    	private short _clusterNumber;
    
    	[DataMember]
    	public short ClusterNumber
    	{ 
    		get { return _clusterNumber; }
    		set
    		{
    			if (_clusterNumber != value )
    			{
    				_clusterNumber = value;
    				OnPropertyChanged(() => ClusterNumber);
    			}
    		}
    	}
    	
    	private string _clusterName;
    
    	[DataMember]
    	public string ClusterName
    	{ 
    		get { return _clusterName; }
    		set
    		{
    			if (_clusterName != value )
    			{
    				_clusterName = value;
    				OnPropertyChanged(() => ClusterName);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    	
    	private System.Guid _clusterTypeUid;
    
    	[DataMember]
    	public System.Guid ClusterTypeUid
    	{ 
    		get { return _clusterTypeUid; }
    		set
    		{
    			if (_clusterTypeUid != value )
    			{
    				_clusterTypeUid = value;
    				OnPropertyChanged(() => ClusterTypeUid);
    			}
    		}
    	}
    	
    	private System.Guid _entityId;
    
    	[DataMember]
    	public System.Guid EntityId
    	{ 
    		get { return _entityId; }
    		set
    		{
    			if (_entityId != value )
    			{
    				_entityId = value;
    				OnPropertyChanged(() => EntityId);
    			}
    		}
    	}
    	
    	private System.Guid _siteUid1;
    
    	[DataMember]
    	public System.Guid SiteUid1
    	{ 
    		get { return _siteUid1; }
    		set
    		{
    			if (_siteUid1 != value )
    			{
    				_siteUid1 = value;
    				OnPropertyChanged(() => SiteUid1);
    			}
    		}
    	}
    	
    	private System.Guid _credentialDataLengthUid;
    
    	[DataMember]
    	public System.Guid CredentialDataLengthUid
    	{ 
    		get { return _credentialDataLengthUid; }
    		set
    		{
    			if (_credentialDataLengthUid != value )
    			{
    				_credentialDataLengthUid = value;
    				OnPropertyChanged(() => CredentialDataLengthUid);
    			}
    		}
    	}
    	
    	private System.Guid _timeScheduleTypeUid;
    
    	[DataMember]
    	public System.Guid TimeScheduleTypeUid
    	{ 
    		get { return _timeScheduleTypeUid; }
    		set
    		{
    			if (_timeScheduleTypeUid != value )
    			{
    				_timeScheduleTypeUid = value;
    				OnPropertyChanged(() => TimeScheduleTypeUid);
    			}
    		}
    	}
    	
    	private string _clusterGroupId;
    
    	[DataMember]
    	public string ClusterGroupId
    	{ 
    		get { return _clusterGroupId; }
    		set
    		{
    			if (_clusterGroupId != value )
    			{
    				_clusterGroupId = value;
    				OnPropertyChanged(() => ClusterGroupId);
    			}
    		}
    	}
    	
    	private bool _isActive;
    
    	[DataMember]
    	public bool IsActive
    	{ 
    		get { return _isActive; }
    		set
    		{
    			if (_isActive != value )
    			{
    				_isActive = value;
    				OnPropertyChanged(() => IsActive);
    			}
    		}
    	}
    	
    	private short _abaStartDigit;
    
    	[DataMember]
    	public short AbaStartDigit
    	{ 
    		get { return _abaStartDigit; }
    		set
    		{
    			if (_abaStartDigit != value )
    			{
    				_abaStartDigit = value;
    				OnPropertyChanged(() => AbaStartDigit);
    			}
    		}
    	}
    	
    	private short _abaStopDigit;
    
    	[DataMember]
    	public short AbaStopDigit
    	{ 
    		get { return _abaStopDigit; }
    		set
    		{
    			if (_abaStopDigit != value )
    			{
    				_abaStopDigit = value;
    				OnPropertyChanged(() => AbaStopDigit);
    			}
    		}
    	}
    	
    	private bool _abaFoldOption;
    
    	[DataMember]
    	public bool AbaFoldOption
    	{ 
    		get { return _abaFoldOption; }
    		set
    		{
    			if (_abaFoldOption != value )
    			{
    				_abaFoldOption = value;
    				OnPropertyChanged(() => AbaFoldOption);
    			}
    		}
    	}
    	
    	private short _wiegandStartBit;
    
    	[DataMember]
    	public short WiegandStartBit
    	{ 
    		get { return _wiegandStartBit; }
    		set
    		{
    			if (_wiegandStartBit != value )
    			{
    				_wiegandStartBit = value;
    				OnPropertyChanged(() => WiegandStartBit);
    			}
    		}
    	}
    	
    	private short _wiegandStopBit;
    
    	[DataMember]
    	public short WiegandStopBit
    	{ 
    		get { return _wiegandStopBit; }
    		set
    		{
    			if (_wiegandStopBit != value )
    			{
    				_wiegandStopBit = value;
    				OnPropertyChanged(() => WiegandStopBit);
    			}
    		}
    	}
    	
    	private short _cardaxStartBit;
    
    	[DataMember]
    	public short CardaxStartBit
    	{ 
    		get { return _cardaxStartBit; }
    		set
    		{
    			if (_cardaxStartBit != value )
    			{
    				_cardaxStartBit = value;
    				OnPropertyChanged(() => CardaxStartBit);
    			}
    		}
    	}
    	
    	private short _cardaxStopBit;
    
    	[DataMember]
    	public short CardaxStopBit
    	{ 
    		get { return _cardaxStopBit; }
    		set
    		{
    			if (_cardaxStopBit != value )
    			{
    				_cardaxStopBit = value;
    				OnPropertyChanged(() => CardaxStopBit);
    			}
    		}
    	}
    	
    	private short _lockoutAfterInvalidAttempts;
    
    	[DataMember]
    	public short LockoutAfterInvalidAttempts
    	{ 
    		get { return _lockoutAfterInvalidAttempts; }
    		set
    		{
    			if (_lockoutAfterInvalidAttempts != value )
    			{
    				_lockoutAfterInvalidAttempts = value;
    				OnPropertyChanged(() => LockoutAfterInvalidAttempts);
    			}
    		}
    	}
    	
    	private int _lockoutDurationSeconds;
    
    	[DataMember]
    	public int LockoutDurationSeconds
    	{ 
    		get { return _lockoutDurationSeconds; }
    		set
    		{
    			if (_lockoutDurationSeconds != value )
    			{
    				_lockoutDurationSeconds = value;
    				OnPropertyChanged(() => LockoutDurationSeconds);
    			}
    		}
    	}
    	
    	private short _accessRuleOverrideTimeout;
    
    	[DataMember]
    	public short AccessRuleOverrideTimeout
    	{ 
    		get { return _accessRuleOverrideTimeout; }
    		set
    		{
    			if (_accessRuleOverrideTimeout != value )
    			{
    				_accessRuleOverrideTimeout = value;
    				OnPropertyChanged(() => AccessRuleOverrideTimeout);
    			}
    		}
    	}
    	
    	private short _unlimitedCredentialTimeout;
    
    	[DataMember]
    	public short UnlimitedCredentialTimeout
    	{ 
    		get { return _unlimitedCredentialTimeout; }
    		set
    		{
    			if (_unlimitedCredentialTimeout != value )
    			{
    				_unlimitedCredentialTimeout = value;
    				OnPropertyChanged(() => UnlimitedCredentialTimeout);
    			}
    		}
    	}
    	
    	private string _timeZoneId;
    
    	[DataMember]
    	public string TimeZoneId
    	{ 
    		get { return _timeZoneId; }
    		set
    		{
    			if (_timeZoneId != value )
    			{
    				_timeZoneId = value;
    				OnPropertyChanged(() => TimeZoneId);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _binaryResourceUid;
    
    	[DataMember]
    	public Nullable<System.Guid> BinaryResourceUid
    	{ 
    		get { return _binaryResourceUid; }
    		set
    		{
    			if (_binaryResourceUid != value )
    			{
    				_binaryResourceUid = value;
    				OnPropertyChanged(() => BinaryResourceUid);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _crisisActivateInputOutputGroupUid;
    
    	[DataMember]
    	public Nullable<System.Guid> CrisisActivateInputOutputGroupUid
    	{ 
    		get { return _crisisActivateInputOutputGroupUid; }
    		set
    		{
    			if (_crisisActivateInputOutputGroupUid != value )
    			{
    				_crisisActivateInputOutputGroupUid = value;
    				OnPropertyChanged(() => CrisisActivateInputOutputGroupUid);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _crisisResetInputOutputGroupUid;
    
    	[DataMember]
    	public Nullable<System.Guid> CrisisResetInputOutputGroupUid
    	{ 
    		get { return _crisisResetInputOutputGroupUid; }
    		set
    		{
    			if (_crisisResetInputOutputGroupUid != value )
    			{
    				_crisisResetInputOutputGroupUid = value;
    				OnPropertyChanged(() => CrisisResetInputOutputGroupUid);
    			}
    		}
    	}
    	
    	private System.Guid _accessPortalLockedLedBehaviorModeUid;
    
    	[DataMember]
    	public System.Guid AccessPortalLockedLedBehaviorModeUid
    	{ 
    		get { return _accessPortalLockedLedBehaviorModeUid; }
    		set
    		{
    			if (_accessPortalLockedLedBehaviorModeUid != value )
    			{
    				_accessPortalLockedLedBehaviorModeUid = value;
    				OnPropertyChanged(() => AccessPortalLockedLedBehaviorModeUid);
    			}
    		}
    	}
    	
    	private System.Guid _accessPortalUnlockedLedBehaviorModeUid;
    
    	[DataMember]
    	public System.Guid AccessPortalUnlockedLedBehaviorModeUid
    	{ 
    		get { return _accessPortalUnlockedLedBehaviorModeUid; }
    		set
    		{
    			if (_accessPortalUnlockedLedBehaviorModeUid != value )
    			{
    				_accessPortalUnlockedLedBehaviorModeUid = value;
    				OnPropertyChanged(() => AccessPortalUnlockedLedBehaviorModeUid);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _accessPortalTypeUid;
    
    	[DataMember]
    	public Nullable<System.Guid> AccessPortalTypeUid
    	{ 
    		get { return _accessPortalTypeUid; }
    		set
    		{
    			if (_accessPortalTypeUid != value )
    			{
    				_accessPortalTypeUid = value;
    				OnPropertyChanged(() => AccessPortalTypeUid);
    			}
    		}
    	}
    	
    	private Nullable<System.Guid> _templateAccessPortalUid;
    
    	[DataMember]
    	public Nullable<System.Guid> TemplateAccessPortalUid
    	{ 
    		get { return _templateAccessPortalUid; }
    		set
    		{
    			if (_templateAccessPortalUid != value )
    			{
    				_templateAccessPortalUid = value;
    				OnPropertyChanged(() => TemplateAccessPortalUid);
    			}
    		}
    	}
    	
    	private bool _abaClipOption;
    
    	[DataMember]
    	public bool AbaClipOption
    	{ 
    		get { return _abaClipOption; }
    		set
    		{
    			if (_abaClipOption != value )
    			{
    				_abaClipOption = value;
    				OnPropertyChanged(() => AbaClipOption);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _currentTimeForCluster;
    
    	[DataMember]
    	public Nullable<System.DateTime> CurrentTimeForCluster
    	{ 
    		get { return _currentTimeForCluster; }
    		set
    		{
    			if (_currentTimeForCluster != value )
    			{
    				_currentTimeForCluster = value;
    				OnPropertyChanged(() => CurrentTimeForCluster);
    			}
    		}
    	}
    	
    	private string _description;
    
    	[DataMember]
    	public string Description
    	{ 
    		get { return _description; }
    		set
    		{
    			if (_description != value )
    			{
    				_description = value;
    				OnPropertyChanged(() => Description);
    			}
    		}
    	}
    	
    	private Nullable<int> _clusterGroupIdOrig;
    
    	[DataMember]
    	public Nullable<int> ClusterGroupIdOrig
    	{ 
    		get { return _clusterGroupIdOrig; }
    		set
    		{
    			if (_clusterGroupIdOrig != value )
    			{
    				_clusterGroupIdOrig = value;
    				OnPropertyChanged(() => ClusterGroupIdOrig);
    			}
    		}
    	}
    
    	
    	private ICollection<GalaxyClusterTimeScheduleMap> _galaxyClusterTimeScheduleMaps;
    
    	[DataMember]
    	public virtual ICollection<GalaxyClusterTimeScheduleMap> GalaxyClusterTimeScheduleMaps
    	{ 
    		get { return _galaxyClusterTimeScheduleMaps; }
    		set
    		{
    			if (_galaxyClusterTimeScheduleMaps != value )
    			{
    				_galaxyClusterTimeScheduleMaps = value;
    				OnPropertyChanged(() => GalaxyClusterTimeScheduleMaps);
    			}
    		}
    	}
    	
    	private ClusterType _clusterType;
    
    	[DataMember]
    	public virtual ClusterType ClusterType
    	{ 
    		get { return _clusterType; }
    		set
    		{
    			if (_clusterType != value )
    			{
    				_clusterType = value;
    				OnPropertyChanged(() => ClusterType);
    			}
    		}
    	}
    	
    	private ICollection<InputOutputGroup> _inputOutputGroups;
    
    	[DataMember]
    	public virtual ICollection<InputOutputGroup> InputOutputGroups
    	{ 
    		get { return _inputOutputGroups; }
    		set
    		{
    			if (_inputOutputGroups != value )
    			{
    				_inputOutputGroups = value;
    				OnPropertyChanged(() => InputOutputGroups);
    			}
    		}
    	}
    	
    	private ICollection<AccessGroup> _accessGroups;
    
    	[DataMember]
    	public virtual ICollection<AccessGroup> AccessGroups
    	{ 
    		get { return _accessGroups; }
    		set
    		{
    			if (_accessGroups != value )
    			{
    				_accessGroups = value;
    				OnPropertyChanged(() => AccessGroups);
    			}
    		}
    	}
    	
    	private ICollection<Area> _areas;
    
    	[DataMember]
    	public virtual ICollection<Area> Areas
    	{ 
    		get { return _areas; }
    		set
    		{
    			if (_areas != value )
    			{
    				_areas = value;
    				OnPropertyChanged(() => Areas);
    			}
    		}
    	}
    	
    	private ICollection<ClusterEntityMap> _clusterEntityMaps;
    
    	[DataMember]
    	public virtual ICollection<ClusterEntityMap> ClusterEntityMaps
    	{ 
    		get { return _clusterEntityMaps; }
    		set
    		{
    			if (_clusterEntityMaps != value )
    			{
    				_clusterEntityMaps = value;
    				OnPropertyChanged(() => ClusterEntityMaps);
    			}
    		}
    	}
    	
    	private ICollection<ClusterInputOutputGroup> _clusterInputOutputGroups;
    
    	[DataMember]
    	public virtual ICollection<ClusterInputOutputGroup> ClusterInputOutputGroups
    	{ 
    		get { return _clusterInputOutputGroups; }
    		set
    		{
    			if (_clusterInputOutputGroups != value )
    			{
    				_clusterInputOutputGroups = value;
    				OnPropertyChanged(() => ClusterInputOutputGroups);
    			}
    		}
    	}
    	
    	private ICollection<ClusterCommandAudit> _clusterCommandAudits;
    
    	[DataMember]
    	public virtual ICollection<ClusterCommandAudit> ClusterCommandAudits
    	{ 
    		get { return _clusterCommandAudits; }
    		set
    		{
    			if (_clusterCommandAudits != value )
    			{
    				_clusterCommandAudits = value;
    				OnPropertyChanged(() => ClusterCommandAudits);
    			}
    		}
    	}
    	
    	private ICollection<GalaxyClusterDayTypeMap> _galaxyClusterDayTypeMaps;
    
    	[DataMember]
    	public virtual ICollection<GalaxyClusterDayTypeMap> GalaxyClusterDayTypeMaps
    	{ 
    		get { return _galaxyClusterDayTypeMaps; }
    		set
    		{
    			if (_galaxyClusterDayTypeMaps != value )
    			{
    				_galaxyClusterDayTypeMaps = value;
    				OnPropertyChanged(() => GalaxyClusterDayTypeMaps);
    			}
    		}
    	}
    	
    	private ICollection<AccessProfileCluster> _accessProfileClusters;
    
    	[DataMember]
    	public virtual ICollection<AccessProfileCluster> AccessProfileClusters
    	{ 
    		get { return _accessProfileClusters; }
    		set
    		{
    			if (_accessProfileClusters != value )
    			{
    				_accessProfileClusters = value;
    				OnPropertyChanged(() => AccessProfileClusters);
    			}
    		}
    	}
    	
    	private ICollection<CredentialClusterTour> _credentialClusterTours;
    
    	[DataMember]
    	public virtual ICollection<CredentialClusterTour> CredentialClusterTours
    	{ 
    		get { return _credentialClusterTours; }
    		set
    		{
    			if (_credentialClusterTours != value )
    			{
    				_credentialClusterTours = value;
    				OnPropertyChanged(() => CredentialClusterTours);
    			}
    		}
    	}
    	
    	private ICollection<PersonClusterPermission> _personClusterPermissions;
    
    	[DataMember]
    	public virtual ICollection<PersonClusterPermission> PersonClusterPermissions
    	{ 
    		get { return _personClusterPermissions; }
    		set
    		{
    			if (_personClusterPermissions != value )
    			{
    				_personClusterPermissions = value;
    				OnPropertyChanged(() => PersonClusterPermissions);
    			}
    		}
    	}
    	
    	private ICollection<RoleCluster> _roleClusters;
    
    	[DataMember]
    	public virtual ICollection<RoleCluster> RoleClusters
    	{ 
    		get { return _roleClusters; }
    		set
    		{
    			if (_roleClusters != value )
    			{
    				_roleClusters = value;
    				OnPropertyChanged(() => RoleClusters);
    			}
    		}
    	}
    }
    
}
