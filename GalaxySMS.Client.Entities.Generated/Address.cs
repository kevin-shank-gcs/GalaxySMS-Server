//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class Address : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class Address
        {
        	public Address() : base()
        	{
        		Initialize();
        	}
        
        	public Address(Address e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        }
        
        	public void Initialize(Address e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.AddressUid = e.AddressUid;
        		this.StreetAddress = e.StreetAddress;
        		this.PostalCode = e.PostalCode;
        		this.City = e.City;
        		this.StateProvinceUid = e.StateProvinceUid;
        		this.Longitude = e.Longitude;
        		this.Latitude = e.Latitude;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		
        	}
        
        	public Address Clone(Address e)
        	{
        		return new Address(e);
        	}
        
        	public bool Equals(Address other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(Address other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.AddressUid != this.AddressUid )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _addressUid;
    
    	[DataMember]
    	public System.Guid AddressUid
    	{ 
    		get { return _addressUid; }
    		set
    		{
    			if (_addressUid != value )
    			{
    				_addressUid = value;
    				OnPropertyChanged(() => AddressUid);
    			}
    		}
    	}
    	
    	private string _streetAddress;
    
    	[DataMember]
    	public string StreetAddress
    	{ 
    		get { return _streetAddress; }
    		set
    		{
    			if (_streetAddress != value )
    			{
    				_streetAddress = value;
    				OnPropertyChanged(() => StreetAddress);
    			}
    		}
    	}
    	
    	private string _postalCode;
    
    	[DataMember]
    	public string PostalCode
    	{ 
    		get { return _postalCode; }
    		set
    		{
    			if (_postalCode != value )
    			{
    				_postalCode = value;
    				OnPropertyChanged(() => PostalCode);
    			}
    		}
    	}
    	
    	private string _city;
    
    	[DataMember]
    	public string City
    	{ 
    		get { return _city; }
    		set
    		{
    			if (_city != value )
    			{
    				_city = value;
    				OnPropertyChanged(() => City);
    			}
    		}
    	}
    	
    	private System.Guid _stateProvinceUid;
    
    	[DataMember]
    	public System.Guid StateProvinceUid
    	{ 
    		get { return _stateProvinceUid; }
    		set
    		{
    			if (_stateProvinceUid != value )
    			{
    				_stateProvinceUid = value;
    				OnPropertyChanged(() => StateProvinceUid);
    			}
    		}
    	}
    	
    	private Nullable<double> _longitude;
    
    	[DataMember]
    	public Nullable<double> Longitude
    	{ 
    		get { return _longitude; }
    		set
    		{
    			if (_longitude != value )
    			{
    				_longitude = value;
    				OnPropertyChanged(() => Longitude);
    			}
    		}
    	}
    	
    	private Nullable<double> _latitude;
    
    	[DataMember]
    	public Nullable<double> Latitude
    	{ 
    		get { return _latitude; }
    		set
    		{
    			if (_latitude != value )
    			{
    				_latitude = value;
    				OnPropertyChanged(() => Latitude);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    
    	
    	private StateProvince _stateProvince;
    
    	[DataMember]
    	public virtual StateProvince StateProvince
    	{ 
    		get { return _stateProvince; }
    		set
    		{
    			if (_stateProvince != value )
    			{
    				_stateProvince = value;
    				OnPropertyChanged(() => StateProvince);
    			}
    		}
    	}
    }
    
}
