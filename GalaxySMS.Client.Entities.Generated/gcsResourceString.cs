//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GalaxySMS.Client.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    
	[DataContract]
	public partial class gcsResourceString : DbObjectBase, ITableEntityBase
    {
    
    /*	// Move to partial class
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
	using GCS.Core.Common.Core;
	using GCS.Core.Common.Contracts;	using FluentValidation;
    using System.Collections.ObjectModel;
    using GCS.Core.Common.Extensions;
    
    namespace GalaxySMS.Client.Entities
    {
        public partial class gcsResourceString
        {
        	public gcsResourceString() : base()
        	{
        		Initialize();
        	}
        
        	public gcsResourceString(gcsResourceString e) : base(e)
        	{
        		Initialize(e);
        	}
        
        	public void Initialize()
        	{
        		base.Initialize();
        		this.gcsApplicationAuditTypes = new HashSet<gcsApplicationAuditType>();
        		this.InterfaceBoardSectionModes = new HashSet<InterfaceBoardSectionMode>();
        		this.InterfaceBoardTypes = new HashSet<InterfaceBoardType>();
        		this.CredentialDataLengths = new HashSet<CredentialDataLength>();
        		this.TimeScheduleTypes = new HashSet<TimeScheduleType>();
        		this.GalaxyInputDelayTypes = new HashSet<GalaxyInputDelayType>();
        		this.GalaxyInputModes = new HashSet<GalaxyInputMode>();
        		this.InputDeviceSupervisionTypes = new HashSet<InputDeviceSupervisionType>();
        		this.CredentialFormats = new HashSet<CredentialFormat>();
        		this.PersonActivationModes = new HashSet<PersonActivationMode>();
        		this.PersonCredentialRoles = new HashSet<PersonCredentialRole>();
        		this.PersonExpirationModes = new HashSet<PersonExpirationMode>();
        		this.gcsPermissionTypes = new HashSet<gcsPermissionType>();
        		this.PropertySensitivityLevels = new HashSet<PropertySensitivityLevel>();
        		this.AccessPortalCommandChoices = new HashSet<AccessPortalCommandChoice>();
        }
        
        	public void Initialize(gcsResourceString e)
        	{
        		Initialize();
        		base.Initialize(e);
        
        		if( e == null )
        			return;
        		this.ResourceId = e.ResourceId;
        		this.ResourceName = e.ResourceName;
        		this.ResourceNumber = e.ResourceNumber;
        		this.ResourceClassName = e.ResourceClassName;
        		this.DefaultValue = e.DefaultValue;
        		this.InsertName = e.InsertName;
        		this.InsertDate = e.InsertDate;
        		this.UpdateName = e.UpdateName;
        		this.UpdateDate = e.UpdateDate;
        		this.ConcurrencyValue = e.ConcurrencyValue;
        		this.gcsApplicationAuditTypes = e.gcsApplicationAuditTypes.ToCollection();
        		this.InterfaceBoardSectionModes = e.InterfaceBoardSectionModes.ToCollection();
        		this.InterfaceBoardTypes = e.InterfaceBoardTypes.ToCollection();
        		this.CredentialDataLengths = e.CredentialDataLengths.ToCollection();
        		this.TimeScheduleTypes = e.TimeScheduleTypes.ToCollection();
        		this.GalaxyInputDelayTypes = e.GalaxyInputDelayTypes.ToCollection();
        		this.GalaxyInputModes = e.GalaxyInputModes.ToCollection();
        		this.InputDeviceSupervisionTypes = e.InputDeviceSupervisionTypes.ToCollection();
        		this.CredentialFormats = e.CredentialFormats.ToCollection();
        		this.PersonActivationModes = e.PersonActivationModes.ToCollection();
        		this.PersonCredentialRoles = e.PersonCredentialRoles.ToCollection();
        		this.PersonExpirationModes = e.PersonExpirationModes.ToCollection();
        		this.gcsPermissionTypes = e.gcsPermissionTypes.ToCollection();
        		this.PropertySensitivityLevels = e.PropertySensitivityLevels.ToCollection();
        		this.AccessPortalCommandChoices = e.AccessPortalCommandChoices.ToCollection();
        		
        	}
        
        	public gcsResourceString Clone(gcsResourceString e)
        	{
        		return new gcsResourceString(e);
        	}
        
        	public bool Equals(gcsResourceString other)
        	{
        		return base.Equals(other);
        	}
        	
        	public bool IsPrimaryKeyEqual(gcsResourceString other)
        	{
        		if( other == null ) 
        			return false;
        
        		if(other.ResourceId != this.ResourceId )
        			return false;
        		return true;
        	}
        
        	public override int GetHashCode()
        	{
        		return base.GetHashCode();
        	}
        
        	public override string ToString()
        	{
        		return base.ToString();
        	}
        }
    }
    */
    
    	
    	private System.Guid _resourceId;
    
    	[DataMember]
    	public System.Guid ResourceId
    	{ 
    		get { return _resourceId; }
    		set
    		{
    			if (_resourceId != value )
    			{
    				_resourceId = value;
    				OnPropertyChanged(() => ResourceId);
    			}
    		}
    	}
    	
    	private string _resourceName;
    
    	[DataMember]
    	public string ResourceName
    	{ 
    		get { return _resourceName; }
    		set
    		{
    			if (_resourceName != value )
    			{
    				_resourceName = value;
    				OnPropertyChanged(() => ResourceName);
    			}
    		}
    	}
    	
    	private Nullable<int> _resourceNumber;
    
    	[DataMember]
    	public Nullable<int> ResourceNumber
    	{ 
    		get { return _resourceNumber; }
    		set
    		{
    			if (_resourceNumber != value )
    			{
    				_resourceNumber = value;
    				OnPropertyChanged(() => ResourceNumber);
    			}
    		}
    	}
    	
    	private string _resourceClassName;
    
    	[DataMember]
    	public string ResourceClassName
    	{ 
    		get { return _resourceClassName; }
    		set
    		{
    			if (_resourceClassName != value )
    			{
    				_resourceClassName = value;
    				OnPropertyChanged(() => ResourceClassName);
    			}
    		}
    	}
    	
    	private string _defaultValue;
    
    	[DataMember]
    	public string DefaultValue
    	{ 
    		get { return _defaultValue; }
    		set
    		{
    			if (_defaultValue != value )
    			{
    				_defaultValue = value;
    				OnPropertyChanged(() => DefaultValue);
    			}
    		}
    	}
    	
    	private string _insertName;
    
    	[DataMember]
    	public string InsertName
    	{ 
    		get { return _insertName; }
    		set
    		{
    			if (_insertName != value )
    			{
    				_insertName = value;
    				OnPropertyChanged(() => InsertName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _insertDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> InsertDate
    	{ 
    		get { return _insertDate; }
    		set
    		{
    			if (_insertDate != value )
    			{
    				_insertDate = value;
    				OnPropertyChanged(() => InsertDate);
    			}
    		}
    	}
    	
    	private string _updateName;
    
    	[DataMember]
    	public string UpdateName
    	{ 
    		get { return _updateName; }
    		set
    		{
    			if (_updateName != value )
    			{
    				_updateName = value;
    				OnPropertyChanged(() => UpdateName);
    			}
    		}
    	}
    	
    	private Nullable<System.DateTime> _updateDate;
    
    	[DataMember]
    	public Nullable<System.DateTime> UpdateDate
    	{ 
    		get { return _updateDate; }
    		set
    		{
    			if (_updateDate != value )
    			{
    				_updateDate = value;
    				OnPropertyChanged(() => UpdateDate);
    			}
    		}
    	}
    	
    	private Nullable<short> _concurrencyValue;
    
    	[DataMember]
    	public Nullable<short> ConcurrencyValue
    	{ 
    		get { return _concurrencyValue; }
    		set
    		{
    			if (_concurrencyValue != value )
    			{
    				_concurrencyValue = value;
    				OnPropertyChanged(() => ConcurrencyValue);
    			}
    		}
    	}
    
    	
    	private ICollection<gcsApplicationAuditType> _gcsApplicationAuditTypes;
    
    	[DataMember]
    	public virtual ICollection<gcsApplicationAuditType> gcsApplicationAuditTypes
    	{ 
    		get { return _gcsApplicationAuditTypes; }
    		set
    		{
    			if (_gcsApplicationAuditTypes != value )
    			{
    				_gcsApplicationAuditTypes = value;
    				OnPropertyChanged(() => gcsApplicationAuditTypes);
    			}
    		}
    	}
    	
    	private ICollection<InterfaceBoardSectionMode> _interfaceBoardSectionModes;
    
    	[DataMember]
    	public virtual ICollection<InterfaceBoardSectionMode> InterfaceBoardSectionModes
    	{ 
    		get { return _interfaceBoardSectionModes; }
    		set
    		{
    			if (_interfaceBoardSectionModes != value )
    			{
    				_interfaceBoardSectionModes = value;
    				OnPropertyChanged(() => InterfaceBoardSectionModes);
    			}
    		}
    	}
    	
    	private ICollection<InterfaceBoardType> _interfaceBoardTypes;
    
    	[DataMember]
    	public virtual ICollection<InterfaceBoardType> InterfaceBoardTypes
    	{ 
    		get { return _interfaceBoardTypes; }
    		set
    		{
    			if (_interfaceBoardTypes != value )
    			{
    				_interfaceBoardTypes = value;
    				OnPropertyChanged(() => InterfaceBoardTypes);
    			}
    		}
    	}
    	
    	private ICollection<CredentialDataLength> _credentialDataLengths;
    
    	[DataMember]
    	public virtual ICollection<CredentialDataLength> CredentialDataLengths
    	{ 
    		get { return _credentialDataLengths; }
    		set
    		{
    			if (_credentialDataLengths != value )
    			{
    				_credentialDataLengths = value;
    				OnPropertyChanged(() => CredentialDataLengths);
    			}
    		}
    	}
    	
    	private ICollection<TimeScheduleType> _timeScheduleTypes;
    
    	[DataMember]
    	public virtual ICollection<TimeScheduleType> TimeScheduleTypes
    	{ 
    		get { return _timeScheduleTypes; }
    		set
    		{
    			if (_timeScheduleTypes != value )
    			{
    				_timeScheduleTypes = value;
    				OnPropertyChanged(() => TimeScheduleTypes);
    			}
    		}
    	}
    	
    	private ICollection<GalaxyInputDelayType> _galaxyInputDelayTypes;
    
    	[DataMember]
    	public virtual ICollection<GalaxyInputDelayType> GalaxyInputDelayTypes
    	{ 
    		get { return _galaxyInputDelayTypes; }
    		set
    		{
    			if (_galaxyInputDelayTypes != value )
    			{
    				_galaxyInputDelayTypes = value;
    				OnPropertyChanged(() => GalaxyInputDelayTypes);
    			}
    		}
    	}
    	
    	private ICollection<GalaxyInputMode> _galaxyInputModes;
    
    	[DataMember]
    	public virtual ICollection<GalaxyInputMode> GalaxyInputModes
    	{ 
    		get { return _galaxyInputModes; }
    		set
    		{
    			if (_galaxyInputModes != value )
    			{
    				_galaxyInputModes = value;
    				OnPropertyChanged(() => GalaxyInputModes);
    			}
    		}
    	}
    	
    	private ICollection<InputDeviceSupervisionType> _inputDeviceSupervisionTypes;
    
    	[DataMember]
    	public virtual ICollection<InputDeviceSupervisionType> InputDeviceSupervisionTypes
    	{ 
    		get { return _inputDeviceSupervisionTypes; }
    		set
    		{
    			if (_inputDeviceSupervisionTypes != value )
    			{
    				_inputDeviceSupervisionTypes = value;
    				OnPropertyChanged(() => InputDeviceSupervisionTypes);
    			}
    		}
    	}
    	
    	private ICollection<CredentialFormat> _credentialFormats;
    
    	[DataMember]
    	public virtual ICollection<CredentialFormat> CredentialFormats
    	{ 
    		get { return _credentialFormats; }
    		set
    		{
    			if (_credentialFormats != value )
    			{
    				_credentialFormats = value;
    				OnPropertyChanged(() => CredentialFormats);
    			}
    		}
    	}
    	
    	private ICollection<PersonActivationMode> _personActivationModes;
    
    	[DataMember]
    	public virtual ICollection<PersonActivationMode> PersonActivationModes
    	{ 
    		get { return _personActivationModes; }
    		set
    		{
    			if (_personActivationModes != value )
    			{
    				_personActivationModes = value;
    				OnPropertyChanged(() => PersonActivationModes);
    			}
    		}
    	}
    	
    	private ICollection<PersonCredentialRole> _personCredentialRoles;
    
    	[DataMember]
    	public virtual ICollection<PersonCredentialRole> PersonCredentialRoles
    	{ 
    		get { return _personCredentialRoles; }
    		set
    		{
    			if (_personCredentialRoles != value )
    			{
    				_personCredentialRoles = value;
    				OnPropertyChanged(() => PersonCredentialRoles);
    			}
    		}
    	}
    	
    	private ICollection<PersonExpirationMode> _personExpirationModes;
    
    	[DataMember]
    	public virtual ICollection<PersonExpirationMode> PersonExpirationModes
    	{ 
    		get { return _personExpirationModes; }
    		set
    		{
    			if (_personExpirationModes != value )
    			{
    				_personExpirationModes = value;
    				OnPropertyChanged(() => PersonExpirationModes);
    			}
    		}
    	}
    	
    	private ICollection<gcsPermissionType> _gcsPermissionTypes;
    
    	[DataMember]
    	public virtual ICollection<gcsPermissionType> gcsPermissionTypes
    	{ 
    		get { return _gcsPermissionTypes; }
    		set
    		{
    			if (_gcsPermissionTypes != value )
    			{
    				_gcsPermissionTypes = value;
    				OnPropertyChanged(() => gcsPermissionTypes);
    			}
    		}
    	}
    	
    	private ICollection<PropertySensitivityLevel> _propertySensitivityLevels;
    
    	[DataMember]
    	public virtual ICollection<PropertySensitivityLevel> PropertySensitivityLevels
    	{ 
    		get { return _propertySensitivityLevels; }
    		set
    		{
    			if (_propertySensitivityLevels != value )
    			{
    				_propertySensitivityLevels = value;
    				OnPropertyChanged(() => PropertySensitivityLevels);
    			}
    		}
    	}
    	
    	private ICollection<AccessPortalCommandChoice> _accessPortalCommandChoices;
    
    	[DataMember]
    	public virtual ICollection<AccessPortalCommandChoice> AccessPortalCommandChoices
    	{ 
    		get { return _accessPortalCommandChoices; }
    		set
    		{
    			if (_accessPortalCommandChoices != value )
    			{
    				_accessPortalCommandChoices = value;
    				OnPropertyChanged(() => AccessPortalCommandChoices);
    			}
    		}
    	}
    }
    
}
